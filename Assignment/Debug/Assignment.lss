
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a0  00800100  00003450  000034e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003450  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  008002a0  008002a0  00003684  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003684  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000036e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000770  00000000  00000000  00003720  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069de  00000000  00000000  00003e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000214a  00000000  00000000  0000a86e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038a9  00000000  00000000  0000c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011b8  00000000  00000000  00010264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001915  00000000  00000000  0001141c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000354f  00000000  00000000  00012d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d8  00000000  00000000  00016280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
       4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
       8:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
       c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      10:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      14:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_5>
      18:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      1c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      20:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      24:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      28:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      2c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      30:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      3c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      40:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__vector_16>
      44:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      48:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      4c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      50:	0c 94 e3 0e 	jmp	0x1dc6	; 0x1dc6 <__vector_20>
      54:	0c 94 a1 0e 	jmp	0x1d42	; 0x1d42 <__vector_21>
      58:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      5c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      60:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      64:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      68:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      6c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      70:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      74:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      78:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <new_game_from_EEPROM+0x46>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
      d6:	23 23       	and	r18, r19
      d8:	23 48       	sbci	r18, 0x83	; 131
      da:	49 47       	sbci	r20, 0x79	; 121
      dc:	48 20       	and	r4, r8
      de:	53 43       	sbci	r21, 0x33	; 51
      e0:	4f 52       	subi	r20, 0x2F	; 47
      e2:	45 53       	subi	r20, 0x35	; 53
      e4:	23 23       	and	r18, r19
      e6:	23 00       	.word	0x0023	; ????

000000e8 <__c.2568>:
      e8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      f8:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000106 <__c.2566>:
     106:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000110 <numbers>:
     110:	7b 01 78 01 74 01 70 01 6c 01 68 01 64 01 60 01     {.x.t.p.l.h.d.`.
     120:	5c 01 58 01                                         \.X.

00000124 <letters>:
     124:	ea 01 e6 01 e2 01 de 01 da 01 d6 01 d2 01 ce 01     ................
     134:	cb 01 c7 01 c3 01 bf 01 ba 01 b6 01 b2 01 ae 01     ................
     144:	a9 01 a5 01 a1 01 9c 01 98 01 93 01 8e 01 89 01     ................
     154:	84 01 7f 01                                         ....

00000158 <cols_9>:
     158:	64 92 92 7d                                         d..}

0000015c <cols_8>:
     15c:	6c 92 92 6d                                         l..m

00000160 <cols_7>:
     160:	80 9e a0 c1                                         ....

00000164 <cols_6>:
     164:	7c 92 92 4d                                         |..M

00000168 <cols_5>:
     168:	e4 a2 a2 9d                                         ....

0000016c <cols_4>:
     16c:	18 28 48 ff                                         .(H.

00000170 <cols_3>:
     170:	44 92 92 6d                                         D..m

00000174 <cols_2>:
     174:	46 8a 92 63                                         F..c

00000178 <cols_1>:
     178:	42 fe 03                                            B..

0000017b <cols_0>:
     17b:	7c 92 a2 7d                                         |..}

0000017f <cols_Z>:
     17f:	86 8a 92 a2 c3                                      .....

00000184 <cols_Y>:
     184:	e0 10 0e 10 e1                                      .....

00000189 <cols_X>:
     189:	c6 28 10 28 c7                                      .(.(.

0000018e <cols_W>:
     18e:	fc 02 1c 02 fd                                      .....

00000193 <cols_V>:
     193:	f8 04 02 04 f9                                      .....

00000198 <cols_U>:
     198:	fc 02 02 fd                                         ....

0000019c <cols_T>:
     19c:	80 80 fe 80 81                                      .....

000001a1 <cols_S>:
     1a1:	64 92 92 4d                                         d..M

000001a5 <cols_R>:
     1a5:	fe 90 98 67                                         ...g

000001a9 <cols_Q>:
     1a9:	7c 82 8a 7c 03                                      |..|.

000001ae <cols_P>:
     1ae:	fe 90 90 61                                         ...a

000001b2 <cols_O>:
     1b2:	7c 82 82 7d                                         |..}

000001b6 <cols_N>:
     1b6:	fe 20 10 ff                                         . ..

000001ba <cols_M>:
     1ba:	fe 40 30 40 ff                                      .@0@.

000001bf <cols_L>:
     1bf:	fe 02 02 03                                         ....

000001c3 <cols_K>:
     1c3:	fe 10 28 c7                                         ..(.

000001c7 <cols_J>:
     1c7:	04 02 02 fd                                         ....

000001cb <cols_I>:
     1cb:	82 fe 83                                            ...

000001ce <cols_H>:
     1ce:	fe 10 10 ff                                         ....

000001d2 <cols_G>:
     1d2:	7c 82 92 5d                                         |..]

000001d6 <cols_F>:
     1d6:	fe 90 90 81                                         ....

000001da <cols_E>:
     1da:	fe 92 92 83                                         ....

000001de <cols_D>:
     1de:	fe 82 82 7d                                         ...}

000001e2 <cols_C>:
     1e2:	7c 82 82 45                                         |..E

000001e6 <cols_B>:
     1e6:	fe 92 92 6d                                         ...m

000001ea <cols_A>:
     1ea:	7e 90 90 7f                                         ~...

000001ee <__c.2114>:
     1ee:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1fe:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     20e:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

00000218 <__c.2112>:
     218:	53 6e 61 6b 65 00                                   Snake.

0000021e <__c.2066>:
     21e:	1b 5b 3f 32 35 68 00                                .[?25h.

00000225 <__c.2062>:
     225:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000022c <__c.2058>:
     22c:	1b 5b 25 64 6d 00                                   .[%dm.

00000232 <__c.2048>:
     232:	1b 5b 32 4a 00                                      .[2J.

00000237 <__c.2033>:
     237:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d8 e0       	ldi	r29, 0x08	; 8
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	12 e0       	ldi	r17, 0x02	; 2
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	e0 e5       	ldi	r30, 0x50	; 80
     254:	f4 e3       	ldi	r31, 0x34	; 52
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x10>
     258:	05 90       	lpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	a0 3a       	cpi	r26, 0xA0	; 160
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0xc>

00000262 <__do_clear_bss>:
     262:	24 e0       	ldi	r18, 0x04	; 4
     264:	a0 ea       	ldi	r26, 0xA0	; 160
     266:	b2 e0       	ldi	r27, 0x02	; 2
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a7 32       	cpi	r26, 0x27	; 39
     26e:	b2 07       	cpc	r27, r18
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
     272:	0e 94 3f 0b 	call	0x167e	; 0x167e <main>
     276:	0c 94 26 1a 	jmp	0x344c	; 0x344c <_exit>

0000027a <__bad_interrupt>:
     27a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027e <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     27e:	e8 e6       	ldi	r30, 0x68	; 104
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	82 60       	ori	r24, 0x02	; 2
     286:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     288:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     28a:	ec e6       	ldi	r30, 0x6C	; 108
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	8f 60       	ori	r24, 0x0F	; 15
     292:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     294:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>
     298:	08 95       	ret

0000029a <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     29a:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <__data_end>
     29e:	08 95       	ret

000002a0 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     2a0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end>
     2a4:	18 16       	cp	r1, r24
     2a6:	3c f5       	brge	.+78     	; 0x2f6 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     2a8:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     2ac:	6f b7       	in	r22, 0x3f	; 63
		cli();
     2ae:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2b0:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <__data_end>
     2b4:	92 30       	cpi	r25, 0x02	; 2
     2b6:	b4 f0       	brlt	.+44     	; 0x2e4 <button_pushed+0x44>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     2be:	f9 01       	movw	r30, r18
     2c0:	ef 55       	subi	r30, 0x5F	; 95
     2c2:	fd 4f       	sbci	r31, 0xFD	; 253
     2c4:	40 81       	ld	r20, Z
     2c6:	f9 01       	movw	r30, r18
     2c8:	e0 56       	subi	r30, 0x60	; 96
     2ca:	fd 4f       	sbci	r31, 0xFD	; 253
     2cc:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2ce:	9f 5f       	subi	r25, 0xFF	; 255
     2d0:	29 2f       	mov	r18, r25
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <__data_end>
     2d8:	04 2e       	mov	r0, r20
     2da:	00 0c       	add	r0, r0
     2dc:	55 0b       	sbc	r21, r21
     2de:	24 17       	cp	r18, r20
     2e0:	35 07       	cpc	r19, r21
     2e2:	6c f3       	brlt	.-38     	; 0x2be <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     2e4:	90 91 a0 02 	lds	r25, 0x02A0	; 0x8002a0 <__data_end>
     2e8:	91 50       	subi	r25, 0x01	; 1
     2ea:	90 93 a0 02 	sts	0x02A0, r25	; 0x8002a0 <__data_end>
		
		if(interrupts_were_enabled) {
     2ee:	66 23       	and	r22, r22
     2f0:	1c f4       	brge	.+6      	; 0x2f8 <button_pushed+0x58>
			// Turn them back on again
			sei();
     2f2:	78 94       	sei
     2f4:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2f8:	08 95       	ret

000002fa <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     318:	43 b1       	in	r20, 0x03	; 3
     31a:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     31c:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end>
     320:	88 30       	cpi	r24, 0x08	; 8
     322:	64 f5       	brge	.+88     	; 0x37c <__vector_5+0x82>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     328:	64 2f       	mov	r22, r20
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	9b 01       	movw	r18, r22
     32e:	08 2e       	mov	r0, r24
     330:	02 c0       	rjmp	.+4      	; 0x336 <__vector_5+0x3c>
     332:	35 95       	asr	r19
     334:	27 95       	ror	r18
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <__vector_5+0x38>
     33a:	20 ff       	sbrs	r18, 0
     33c:	1b c0       	rjmp	.+54     	; 0x374 <__vector_5+0x7a>
     33e:	20 91 a9 02 	lds	r18, 0x02A9	; 0x8002a9 <last_button_state>
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	08 2e       	mov	r0, r24
     346:	02 c0       	rjmp	.+4      	; 0x34c <__vector_5+0x52>
     348:	35 95       	asr	r19
     34a:	27 95       	ror	r18
     34c:	0a 94       	dec	r0
     34e:	e2 f7       	brpl	.-8      	; 0x348 <__vector_5+0x4e>
     350:	20 fd       	sbrc	r18, 0
     352:	10 c0       	rjmp	.+32     	; 0x374 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     354:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <__data_end>
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	2e 0f       	add	r18, r30
     35c:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <__data_end>
     360:	0e 2e       	mov	r0, r30
     362:	00 0c       	add	r0, r0
     364:	ff 0b       	sbc	r31, r31
     366:	ef 55       	subi	r30, 0x5F	; 95
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     36c:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <__data_end>
     370:	28 30       	cpi	r18, 0x08	; 8
     372:	24 f4       	brge	.+8      	; 0x37c <__vector_5+0x82>
     374:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     376:	84 30       	cpi	r24, 0x04	; 4
     378:	91 05       	cpc	r25, r1
     37a:	c1 f6       	brne	.-80     	; 0x32c <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     37c:	40 93 a9 02 	sts	0x02A9, r20	; 0x8002a9 <last_button_state>
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     39e:	89 b1       	in	r24, 0x09	; 9
     3a0:	83 fb       	bst	r24, 3
     3a2:	88 27       	eor	r24, r24
     3a4:	80 f9       	bld	r24, 0
     3a6:	08 95       	ret

000003a8 <buzzer_time_left>:
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
     3b8:	40 91 aa 02 	lds	r20, 0x02AA	; 0x8002aa <buzzer_time>
     3bc:	50 91 ab 02 	lds	r21, 0x02AB	; 0x8002ab <buzzer_time+0x1>
     3c0:	6a 01       	movw	r12, r20
     3c2:	55 0f       	add	r21, r21
     3c4:	ee 08       	sbc	r14, r14
     3c6:	ff 08       	sbc	r15, r15
     3c8:	00 91 fd 02 	lds	r16, 0x02FD	; 0x8002fd <clock_at_tone_start>
     3cc:	10 91 fe 02 	lds	r17, 0x02FE	; 0x8002fe <clock_at_tone_start+0x1>
     3d0:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <clock_at_tone_start+0x2>
     3d4:	30 91 00 03 	lds	r19, 0x0300	; 0x800300 <clock_at_tone_start+0x3>
     3d8:	c0 0e       	add	r12, r16
     3da:	d1 1e       	adc	r13, r17
     3dc:	e2 1e       	adc	r14, r18
     3de:	f3 1e       	adc	r15, r19
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	6c 15       	cp	r22, r12
     3e6:	7d 05       	cpc	r23, r13
     3e8:	8e 05       	cpc	r24, r14
     3ea:	9f 05       	cpc	r25, r15
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <buzzer_time_left+0x4a>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <next_buzzer_tone>:
     402:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     406:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     410:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	fc 01       	movw	r30, r24
     41a:	e7 51       	subi	r30, 0x17	; 23
     41c:	fd 4f       	sbci	r31, 0xFD	; 253
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	0e 94 0b 13 	call	0x2616	; 0x2616 <change_OCR1A>
     426:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
     42a:	60 93 fd 02 	sts	0x02FD, r22	; 0x8002fd <clock_at_tone_start>
     42e:	70 93 fe 02 	sts	0x02FE, r23	; 0x8002fe <clock_at_tone_start+0x1>
     432:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <clock_at_tone_start+0x2>
     436:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <clock_at_tone_start+0x3>
     43a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     43e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	ed 50       	subi	r30, 0x0D	; 13
     448:	fd 4f       	sbci	r31, 0xFD	; 253
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	90 93 ab 02 	sts	0x02AB, r25	; 0x8002ab <buzzer_time+0x1>
     452:	80 93 aa 02 	sts	0x02AA, r24	; 0x8002aa <buzzer_time>
     456:	08 95       	ret

00000458 <reset_buzzer>:
     458:	55 98       	cbi	0x0a, 5	; 10
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	9f ef       	ldi	r25, 0xFF	; 255
     45e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     462:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     466:	08 95       	ret

00000468 <play_start_game_sound_effect>:
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <number_of_tones+0x1>
     470:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <number_of_tones>
     474:	e3 ef       	ldi	r30, 0xF3	; 243
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	84 ef       	ldi	r24, 0xF4	; 244
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24
     480:	28 ec       	ldi	r18, 0xC8	; 200
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	33 83       	std	Z+3, r19	; 0x03
     486:	22 83       	std	Z+2, r18	; 0x02
     488:	95 83       	std	Z+5, r25	; 0x05
     48a:	84 83       	std	Z+4, r24	; 0x04
     48c:	e9 ee       	ldi	r30, 0xE9	; 233
     48e:	f2 e0       	ldi	r31, 0x02	; 2
     490:	80 ed       	ldi	r24, 0xD0	; 208
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	28 ee       	ldi	r18, 0xE8	; 232
     49a:	33 e0       	ldi	r19, 0x03	; 3
     49c:	33 83       	std	Z+3, r19	; 0x03
     49e:	22 83       	std	Z+2, r18	; 0x02
     4a0:	95 83       	std	Z+5, r25	; 0x05
     4a2:	84 83       	std	Z+4, r24	; 0x04
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
     4a6:	9f ef       	ldi	r25, 0xFF	; 255
     4a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     4b0:	0e 94 01 02 	call	0x402	; 0x402 <next_buzzer_tone>
     4b4:	0e 94 cf 01 	call	0x39e	; 0x39e <sound_effects_on_mode>
     4b8:	81 11       	cpse	r24, r1
     4ba:	0e 94 10 13 	call	0x2620	; 0x2620 <enable_timer_one>
     4be:	08 95       	ret

000004c0 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <number_of_tones+0x1>
     4c8:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <number_of_tones>
		buzzer_durations[0] = 50;
     4cc:	e3 ef       	ldi	r30, 0xF3	; 243
     4ce:	f2 e0       	ldi	r31, 0x02	; 2
     4d0:	82 e3       	ldi	r24, 0x32	; 50
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 83       	std	Z+1, r25	; 0x01
     4d6:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     4d8:	84 e6       	ldi	r24, 0x64	; 100
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     4e0:	e9 ee       	ldi	r30, 0xE9	; 233
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	80 ed       	ldi	r24, 0xD0	; 208
     4e6:	97 e0       	ldi	r25, 0x07	; 7
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     4ec:	88 ee       	ldi	r24, 0xE8	; 232
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     500:	0e 94 01 02 	call	0x402	; 0x402 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     504:	0e 94 cf 01 	call	0x39e	; 0x39e <sound_effects_on_mode>
     508:	81 11       	cpse	r24, r1
			enable_timer_one();
     50a:	0e 94 10 13 	call	0x2620	; 0x2620 <enable_timer_one>
     50e:	08 95       	ret

00000510 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     510:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <number_of_tones>
     514:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <number_of_tones+0x1>
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	31 09       	sbc	r19, r1
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     524:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     528:	42 17       	cp	r20, r18
     52a:	53 07       	cpc	r21, r19
     52c:	14 f4       	brge	.+4      	; 0x532 <last_tone_in_sequence+0x22>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
	}
     532:	08 95       	ret

00000534 <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     534:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <buzzer_time_left>
     538:	89 2b       	or	r24, r25
     53a:	59 f4       	brne	.+22     	; 0x552 <handle_buzzer_loop+0x1e>
     53c:	0e 94 88 02 	call	0x510	; 0x510 <last_tone_in_sequence>
     540:	89 2b       	or	r24, r25
     542:	39 f0       	breq	.+14     	; 0x552 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     544:	67 e0       	ldi	r22, 0x07	; 7
     546:	8a e0       	ldi	r24, 0x0A	; 10
     548:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     54c:	0e 94 2c 02 	call	0x458	; 0x458 <reset_buzzer>
     550:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     552:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <buzzer_time_left>
     556:	89 2b       	or	r24, r25
     558:	11 f4       	brne	.+4      	; 0x55e <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     55a:	0e 94 01 02 	call	0x402	; 0x402 <next_buzzer_tone>
     55e:	08 95       	ret

00000560 <EEPROM_has_saved_game>:
	printf("G Score :%u \n", eeprom_read_dword(GAME_SCORE));  // not working
	printf("Snake Length :%u \n", eeprom_read_byte(SNAKE_LENGTH));
	printf("Snake tail :%u \n", eeprom_read_byte(SNAKE_POSITION_TAIL));
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}
     560:	80 e8       	ldi	r24, 0x80	; 128
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	61 15       	cp	r22, r1
     56c:	72 41       	sbci	r23, 0x12	; 18
     56e:	81 05       	cpc	r24, r1
     570:	91 05       	cpc	r25, r1
     572:	09 f0       	breq	.+2      	; 0x576 <EEPROM_has_saved_game+0x16>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	82 2f       	mov	r24, r18
     578:	08 95       	ret

0000057a <save_game_to_EPPROM>:
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	f8 94       	cli
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	52 e1       	ldi	r21, 0x12	; 18
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e8       	ldi	r24, 0x80	; 128
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 23 08 	call	0x1046	; 0x1046 <get_position_of_food>
     59c:	68 2f       	mov	r22, r24
     59e:	80 ea       	ldi	r24, 0xA0	; 160
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	0e 94 23 08 	call	0x1046	; 0x1046 <get_position_of_food>
     5ac:	68 2f       	mov	r22, r24
     5ae:	88 ea       	ldi	r24, 0xA8	; 168
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	0e 94 23 08 	call	0x1046	; 0x1046 <get_position_of_food>
     5bc:	68 2f       	mov	r22, r24
     5be:	80 eb       	ldi	r24, 0xB0	; 176
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	0e 94 23 08 	call	0x1046	; 0x1046 <get_position_of_food>
     5cc:	68 2f       	mov	r22, r24
     5ce:	88 eb       	ldi	r24, 0xB8	; 184
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     5d6:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <get_rat_position>
     5da:	68 2f       	mov	r22, r24
     5dc:	80 ec       	ldi	r24, 0xC0	; 192
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     5e4:	0e 94 c6 10 	call	0x218c	; 0x218c <superfood_is_on_board>
     5e8:	88 23       	and	r24, r24
     5ea:	41 f0       	breq	.+16     	; 0x5fc <save_game_to_EPPROM+0x82>
     5ec:	0e 94 10 11 	call	0x2220	; 0x2220 <get_superfood_position>
     5f0:	68 2f       	mov	r22, r24
     5f2:	88 ec       	ldi	r24, 0xC8	; 200
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <save_game_to_EPPROM+0x8c>
     5fc:	68 e0       	ldi	r22, 0x08	; 8
     5fe:	88 ec       	ldi	r24, 0xC8	; 200
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     606:	0e 94 0b 09 	call	0x1216	; 0x1216 <get_current_game_speed>
     60a:	bc 01       	movw	r22, r24
     60c:	80 ed       	ldi	r24, 0xD0	; 208
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 b8 19 	call	0x3370	; 0x3370 <eeprom_write_word>
     614:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     618:	ac 01       	movw	r20, r24
     61a:	99 0f       	add	r25, r25
     61c:	66 0b       	sbc	r22, r22
     61e:	77 0b       	sbc	r23, r23
     620:	80 ee       	ldi	r24, 0xE0	; 224
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
     628:	80 ee       	ldi	r24, 0xE0	; 224
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     630:	9f 93       	push	r25
     632:	8f 93       	push	r24
     634:	7f 93       	push	r23
     636:	6f 93       	push	r22
     638:	83 e3       	ldi	r24, 0x33	; 51
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	9f 93       	push	r25
     63e:	8f 93       	push	r24
     640:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
     644:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_length>
     648:	68 2f       	mov	r22, r24
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	92 e0       	ldi	r25, 0x02	; 2
     64e:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     652:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
     656:	ac 01       	movw	r20, r24
     658:	99 0f       	add	r25, r25
     65a:	66 0b       	sbc	r22, r22
     65c:	77 0b       	sbc	r23, r23
     65e:	88 e0       	ldi	r24, 0x08	; 8
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
     666:	0e 94 8c 0f 	call	0x1f18	; 0x1f18 <get_current_drn>
     66a:	68 2f       	mov	r22, r24
     66c:	88 e1       	ldi	r24, 0x18	; 24
     66e:	92 e0       	ldi	r25, 0x02	; 2
     670:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     674:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <get_snake_tail_index>
     678:	c8 2f       	mov	r28, r24
     67a:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <get_snake_head_index>
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	8c 17       	cp	r24, r28
     68c:	e8 f5       	brcc	.+122    	; 0x708 <save_game_to_EPPROM+0x18e>
     68e:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <get_snake_tail_index>
     692:	f8 2e       	mov	r15, r24
     694:	c8 2f       	mov	r28, r24
     696:	d0 e0       	ldi	r29, 0x00	; 0
     698:	c1 32       	cpi	r28, 0x21	; 33
     69a:	d1 05       	cpc	r29, r1
     69c:	ec f4       	brge	.+58     	; 0x6d8 <save_game_to_EPPROM+0x15e>
     69e:	00 e2       	ldi	r16, 0x20	; 32
     6a0:	12 e0       	ldi	r17, 0x02	; 2
     6a2:	8c 2f       	mov	r24, r28
     6a4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <get_snake_position_at_index>
     6a8:	68 2f       	mov	r22, r24
     6aa:	c8 01       	movw	r24, r16
     6ac:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     6b0:	21 96       	adiw	r28, 0x01	; 1
     6b2:	08 5f       	subi	r16, 0xF8	; 248
     6b4:	1f 4f       	sbci	r17, 0xFF	; 255
     6b6:	c1 32       	cpi	r28, 0x21	; 33
     6b8:	d1 05       	cpc	r29, r1
     6ba:	99 f7       	brne	.-26     	; 0x6a2 <save_game_to_EPPROM+0x128>
     6bc:	cf 2d       	mov	r28, r15
     6be:	d0 e0       	ldi	r29, 0x00	; 0
     6c0:	d1 95       	neg	r29
     6c2:	c1 95       	neg	r28
     6c4:	d1 09       	sbc	r29, r1
     6c6:	cc 0f       	add	r28, r28
     6c8:	dd 1f       	adc	r29, r29
     6ca:	cc 0f       	add	r28, r28
     6cc:	dd 1f       	adc	r29, r29
     6ce:	cc 0f       	add	r28, r28
     6d0:	dd 1f       	adc	r29, r29
     6d2:	c8 5f       	subi	r28, 0xF8	; 248
     6d4:	de 4f       	sbci	r29, 0xFE	; 254
     6d6:	02 c0       	rjmp	.+4      	; 0x6dc <save_game_to_EPPROM+0x162>
     6d8:	c0 e0       	ldi	r28, 0x00	; 0
     6da:	d0 e0       	ldi	r29, 0x00	; 0
     6dc:	00 e0       	ldi	r16, 0x00	; 0
     6de:	10 e0       	ldi	r17, 0x00	; 0
     6e0:	0c c0       	rjmp	.+24     	; 0x6fa <save_game_to_EPPROM+0x180>
     6e2:	80 2f       	mov	r24, r16
     6e4:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <get_snake_position_at_index>
     6e8:	68 2f       	mov	r22, r24
     6ea:	ce 01       	movw	r24, r28
     6ec:	80 5e       	subi	r24, 0xE0	; 224
     6ee:	9d 4f       	sbci	r25, 0xFD	; 253
     6f0:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     6f4:	28 96       	adiw	r28, 0x08	; 8
     6f6:	0f 5f       	subi	r16, 0xFF	; 255
     6f8:	1f 4f       	sbci	r17, 0xFF	; 255
     6fa:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <get_snake_head_index>
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	80 17       	cp	r24, r16
     702:	91 07       	cpc	r25, r17
     704:	74 f7       	brge	.-36     	; 0x6e2 <save_game_to_EPPROM+0x168>
     706:	19 c0       	rjmp	.+50     	; 0x73a <save_game_to_EPPROM+0x1c0>
     708:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <get_snake_tail_index>
     70c:	08 2f       	mov	r16, r24
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	c0 e0       	ldi	r28, 0x00	; 0
     712:	d0 e0       	ldi	r29, 0x00	; 0
     714:	0c c0       	rjmp	.+24     	; 0x72e <save_game_to_EPPROM+0x1b4>
     716:	80 2f       	mov	r24, r16
     718:	0e 94 71 0f 	call	0x1ee2	; 0x1ee2 <get_snake_position_at_index>
     71c:	68 2f       	mov	r22, r24
     71e:	ce 01       	movw	r24, r28
     720:	80 5e       	subi	r24, 0xE0	; 224
     722:	9d 4f       	sbci	r25, 0xFD	; 253
     724:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     728:	28 96       	adiw	r28, 0x08	; 8
     72a:	0f 5f       	subi	r16, 0xFF	; 255
     72c:	1f 4f       	sbci	r17, 0xFF	; 255
     72e:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <get_snake_head_index>
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	80 17       	cp	r24, r16
     736:	91 07       	cpc	r25, r17
     738:	74 f7       	brge	.-36     	; 0x716 <save_game_to_EPPROM+0x19c>
     73a:	68 e0       	ldi	r22, 0x08	; 8
     73c:	ce 01       	movw	r24, r28
     73e:	80 5e       	subi	r24, 0xE0	; 224
     740:	9d 4f       	sbci	r25, 0xFD	; 253
     742:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
     746:	78 94       	sei
     748:	df 91       	pop	r29
     74a:	cf 91       	pop	r28
     74c:	1f 91       	pop	r17
     74e:	0f 91       	pop	r16
     750:	ff 90       	pop	r15
     752:	08 95       	ret

00000754 <add_food_to_board>:
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
	add_food_to_board(food_four);
}

void add_food_to_board(PosnType food_pos){
     754:	cf 93       	push	r28
     756:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     758:	0e 94 65 09 	call	0x12ca	; 0x12ca <is_position_valid>
     75c:	88 23       	and	r24, r24
     75e:	99 f0       	breq	.+38     	; 0x786 <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     760:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <numFoodItems>
     764:	0e 2e       	mov	r0, r30
     766:	00 0c       	add	r0, r0
     768:	ff 0b       	sbc	r31, r31
     76a:	ee 5f       	subi	r30, 0xFE	; 254
     76c:	fc 4f       	sbci	r31, 0xFC	; 252
     76e:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     770:	63 e3       	ldi	r22, 0x33	; 51
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	8c 2f       	mov	r24, r28
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
		numFoodItems++; 
     77c:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <numFoodItems>
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <numFoodItems>
	}
}
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <load_food_from_EEPROM>:
		load_EEPROM_data_on_next_game =0;
	}
}

void load_food_from_EEPROM(void){
	init_food();
     78a:	0e 94 99 07 	call	0xf32	; 0xf32 <init_food>
	PosnType food_one = eeprom_read_byte(FOOD_ONE);
     78e:	80 ea       	ldi	r24, 0xA0	; 160
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
	add_food_to_board(food_one);
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	0e 94 aa 03 	call	0x754	; 0x754 <add_food_to_board>
	PosnType food_two = eeprom_read_byte(FOOD_TWO);
     79c:	88 ea       	ldi	r24, 0xA8	; 168
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
	add_food_to_board(food_two);
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 aa 03 	call	0x754	; 0x754 <add_food_to_board>
	
	PosnType food_three = eeprom_read_byte(FOOD_THREE);
     7aa:	80 eb       	ldi	r24, 0xB0	; 176
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
	add_food_to_board(food_three);	
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 aa 03 	call	0x754	; 0x754 <add_food_to_board>
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
     7b8:	88 eb       	ldi	r24, 0xB8	; 184
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
	add_food_to_board(food_four);
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 aa 03 	call	0x754	; 0x754 <add_food_to_board>
     7c6:	08 95       	ret

000007c8 <load_rat_from_EEPROM>:
		foodPositions[numFoodItems] = food_pos;
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
		numFoodItems++; 
	}
}
void load_rat_from_EEPROM(void){
     7c8:	cf 93       	push	r28
	PosnType rat_pos = eeprom_read_byte(RAT); 
     7ca:	80 ec       	ldi	r24, 0xC0	; 192
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     7d2:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     7d4:	0e 94 65 09 	call	0x12ca	; 0x12ca <is_position_valid>
     7d8:	88 23       	and	r24, r24
     7da:	21 f0       	breq	.+8      	; 0x7e4 <load_rat_from_EEPROM+0x1c>
		set_rat_at_pos(rat_pos); 
     7dc:	8c 2f       	mov	r24, r28
     7de:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_rat_at_pos>
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <load_rat_from_EEPROM+0x20>
	}else{
		add_new_rat_position();
     7e4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <add_new_rat_position>
	}
}
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(void){
     7ec:	cf 93       	push	r28
	PosnType super_food = eeprom_read_byte(SUPERFOOD); 
     7ee:	88 ec       	ldi	r24, 0xC8	; 200
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     7f6:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     7f8:	0e 94 65 09 	call	0x12ca	; 0x12ca <is_position_valid>
     7fc:	88 23       	and	r24, r24
     7fe:	21 f0       	breq	.+8      	; 0x808 <load_superfood_from_EEPROM+0x1c>
		load_superfood(super_food);
     800:	8c 2f       	mov	r24, r28
     802:	0e 94 c0 10 	call	0x2180	; 0x2180 <load_superfood>
     806:	02 c0       	rjmp	.+4      	; 0x80c <load_superfood_from_EEPROM+0x20>
	}else{
		remove_superfood_from_board(); 
     808:	0e 94 ef 10 	call	0x21de	; 0x21de <remove_superfood_from_board>
	}
}
     80c:	cf 91       	pop	r28
     80e:	08 95       	ret

00000810 <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     820:	0e 94 77 0f 	call	0x1eee	; 0x1eee <set_snake_length>
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     82a:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_length>
     82e:	81 50       	subi	r24, 0x01	; 1
     830:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <set_snake_head_pointer>
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
	uint8_t snakePosition_index = 0; 
     834:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     836:	c0 e2       	ldi	r28, 0x20	; 32
     838:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     840:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     842:	61 2f       	mov	r22, r17
     844:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     848:	60 ef       	ldi	r22, 0xF0	; 240
     84a:	70 e0       	ldi	r23, 0x00	; 0
     84c:	80 2f       	mov	r24, r16
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
		snake_memory_position +=8; 
     854:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     856:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     858:	ce 01       	movw	r24, r28
     85a:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     85e:	0e 94 65 09 	call	0x12ca	; 0x12ca <is_position_valid>
     862:	81 11       	cpse	r24, r1
     864:	ea cf       	rjmp	.-44     	; 0x83a <load_snake_from_EPPROM+0x2a>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     866:	0e 94 57 0f 	call	0x1eae	; 0x1eae <get_snake_head_position>
     86a:	6f e0       	ldi	r22, 0x0F	; 15
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>

	reset_snake_drn(eeprom_read_byte(SNAKE_DIRECTION)); 
     874:	88 e1       	ldi	r24, 0x18	; 24
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     87c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <reset_snake_drn>
}
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	08 95       	ret

0000088a <new_game_from_EEPROM>:
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}

void new_game_from_EEPROM(void){
	if(EEPROM_has_saved_game()){
     88a:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
     88e:	88 23       	and	r24, r24
     890:	61 f1       	breq	.+88     	; 0x8ea <new_game_from_EEPROM+0x60>
		clear_terminal(); 
     892:	0e 94 a3 11 	call	0x2346	; 0x2346 <clear_terminal>
		set_clock_ticks(eeprom_read_dword(CLOCK_TICKS));
     896:	88 e0       	ldi	r24, 0x08	; 8
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     89e:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <set_clock_ticks>
		set_score(eeprom_read_dword(GAME_SCORE));
     8a2:	80 ee       	ldi	r24, 0xE0	; 224
     8a4:	91 e0       	ldi	r25, 0x01	; 1
     8a6:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     8aa:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <set_score>
		
		// Methods from init_game(); 
		ledmatrix_clear();
     8ae:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <ledmatrix_clear>
		init_score_on_terminal();
     8b2:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <init_score_on_terminal>
		set_game_speed(eeprom_read_word(GAME_SPEED));
     8b6:	80 ed       	ldi	r24, 0xD0	; 208
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	0e 94 9c 19 	call	0x3338	; 0x3338 <eeprom_read_word>
     8be:	0e 94 10 09 	call	0x1220	; 0x1220 <set_game_speed>
		add_new_rat_position();
     8c2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <add_new_rat_position>
		initialise_timer_one();
     8c6:	0e 94 f6 12 	call	0x25ec	; 0x25ec <initialise_timer_one>
		play_start_game_sound_effect();
     8ca:	0e 94 34 02 	call	0x468	; 0x468 <play_start_game_sound_effect>
	
		// Init food, rats, superfood and snake
		load_food_from_EEPROM();
     8ce:	0e 94 c5 03 	call	0x78a	; 0x78a <load_food_from_EEPROM>
		load_rat_from_EEPROM();
     8d2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <load_rat_from_EEPROM>
		load_superfood_from_EEPROM();
     8d6:	0e 94 f6 03 	call	0x7ec	; 0x7ec <load_superfood_from_EEPROM>
		load_snake_from_EPPROM();
     8da:	0e 94 08 04 	call	0x810	; 0x810 <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     8de:	0e 94 4d 01 	call	0x29a	; 0x29a <empty_button_queue>
		clear_serial_input_buffer();
     8e2:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     8e6:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <load_EEPROM_data_on_next_game>
     8ea:	08 95       	ret

000008ec <high_score_name_position>:

uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
     8ec:	81 15       	cp	r24, r1
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	92 07       	cpc	r25, r18
     8f2:	e9 f0       	breq	.+58     	; 0x92e <__stack+0x2f>
     8f4:	38 f4       	brcc	.+14     	; 0x904 <__stack+0x5>
     8f6:	80 3c       	cpi	r24, 0xC0	; 192
     8f8:	91 05       	cpc	r25, r1
     8fa:	91 f0       	breq	.+36     	; 0x920 <__stack+0x21>
     8fc:	80 3e       	cpi	r24, 0xE0	; 224
     8fe:	91 05       	cpc	r25, r1
     900:	61 f0       	breq	.+24     	; 0x91a <__stack+0x1b>
     902:	11 c0       	rjmp	.+34     	; 0x926 <__stack+0x27>
     904:	80 32       	cpi	r24, 0x20	; 32
     906:	21 e0       	ldi	r18, 0x01	; 1
     908:	92 07       	cpc	r25, r18
     90a:	21 f0       	breq	.+8      	; 0x914 <__stack+0x15>
     90c:	80 34       	cpi	r24, 0x40	; 64
     90e:	91 40       	sbci	r25, 0x01	; 1
     910:	59 f0       	breq	.+22     	; 0x928 <__stack+0x29>
     912:	09 c0       	rjmp	.+18     	; 0x926 <__stack+0x27>
		case SCORE_FIVE: return NAME_FIVE; break; 
		case SCORE_FOUR: return NAME_FOUR; break;
     914:	80 e8       	ldi	r24, 0x80	; 128
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	08 95       	ret
		case SCORE_THREE: return NAME_THREE; break;
		case SCORE_TWO: return NAME_TWO; break;
     91a:	80 e4       	ldi	r24, 0x40	; 64
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	08 95       	ret
		case SCORE_ONE: return NAME_ONE; break;
     920:	80 e2       	ldi	r24, 0x20	; 32
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	08 95       	ret
	}
}
     926:	08 95       	ret
uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
		case SCORE_FIVE: return NAME_FIVE; break; 
     928:	80 ea       	ldi	r24, 0xA0	; 160
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	08 95       	ret
		case SCORE_FOUR: return NAME_FOUR; break;
		case SCORE_THREE: return NAME_THREE; break;
     92e:	80 e6       	ldi	r24, 0x60	; 96
     930:	90 e0       	ldi	r25, 0x00	; 0
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}
     932:	08 95       	ret

00000934 <move_place_down>:
	eeprom_write_byte(high_score_name_position(score_position) +0x10, current_high_score_name[2]);
	
	clear_terminal();
}

void move_place_down(uint16_t score_position, uint16_t name_position){
     934:	8f 92       	push	r8
     936:	9f 92       	push	r9
     938:	af 92       	push	r10
     93a:	bf 92       	push	r11
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	8c 01       	movw	r16, r24
     94c:	eb 01       	movw	r28, r22
	uint32_t score = eeprom_read_dword(score_position); 
     94e:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     952:	4b 01       	movw	r8, r22
     954:	5c 01       	movw	r10, r24
	uint8_t char1 = eeprom_read_byte(name_position);
     956:	ce 01       	movw	r24, r28
     958:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     95c:	d8 2e       	mov	r13, r24
	uint8_t char2 = eeprom_read_byte(name_position+0x08);
     95e:	ce 01       	movw	r24, r28
     960:	08 96       	adiw	r24, 0x08	; 8
     962:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     966:	e8 2e       	mov	r14, r24
	uint8_t char3 = eeprom_read_byte(name_position+0x10);
     968:	ce 01       	movw	r24, r28
     96a:	40 96       	adiw	r24, 0x10	; 16
     96c:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     970:	f8 2e       	mov	r15, r24
	eeprom_write_dword((score_position+0x20), score); 
     972:	b5 01       	movw	r22, r10
     974:	a4 01       	movw	r20, r8
     976:	c8 01       	movw	r24, r16
     978:	80 96       	adiw	r24, 0x20	; 32
     97a:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	//  eeprom_write_block()
	eeprom_write_byte(name_position +0x20, char1);
     97e:	6d 2d       	mov	r22, r13
     980:	ce 01       	movw	r24, r28
     982:	80 96       	adiw	r24, 0x20	; 32
     984:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	eeprom_write_byte(name_position +0x28, char2);
     988:	6e 2d       	mov	r22, r14
     98a:	ce 01       	movw	r24, r28
     98c:	88 96       	adiw	r24, 0x28	; 40
     98e:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	eeprom_write_byte(name_position +0x30, char3);
     992:	6f 2d       	mov	r22, r15
     994:	ce 01       	movw	r24, r28
     996:	c0 96       	adiw	r24, 0x30	; 48
     998:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
}
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	1f 91       	pop	r17
     9a2:	0f 91       	pop	r16
     9a4:	ff 90       	pop	r15
     9a6:	ef 90       	pop	r14
     9a8:	df 90       	pop	r13
     9aa:	bf 90       	pop	r11
     9ac:	af 90       	pop	r10
     9ae:	9f 90       	pop	r9
     9b0:	8f 90       	pop	r8
     9b2:	08 95       	ret

000009b4 <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(SCORE_FOUR, NAME_FOUR); 
     9b4:	60 e8       	ldi	r22, 0x80	; 128
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	80 e2       	ldi	r24, 0x20	; 32
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 9a 04 	call	0x934	; 0x934 <move_place_down>
     9c0:	08 95       	ret

000009c2 <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     9c2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <move_four_place_down>
	move_place_down(SCORE_THREE, NAME_THREE);
     9c6:	60 e6       	ldi	r22, 0x60	; 96
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	0e 94 9a 04 	call	0x934	; 0x934 <move_place_down>
     9d2:	08 95       	ret

000009d4 <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     9d4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <move_three_place_down>
	move_place_down(SCORE_TWO, NAME_TWO);
     9d8:	60 e4       	ldi	r22, 0x40	; 64
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	80 ee       	ldi	r24, 0xE0	; 224
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 9a 04 	call	0x934	; 0x934 <move_place_down>
     9e4:	08 95       	ret

000009e6 <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     9e6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <move_two_place_down>
	move_place_down(SCORE_ONE, NAME_ONE);
     9ea:	60 e2       	ldi	r22, 0x20	; 32
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	80 ec       	ldi	r24, 0xC0	; 192
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0e 94 9a 04 	call	0x934	; 0x934 <move_place_down>
     9f6:	08 95       	ret

000009f8 <reset_name_at_memory_position>:
	reset_name_at_memory_position(NAME_FOUR);
	reset_name_at_memory_position(NAME_FIVE);
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
	}
	
void reset_name_at_memory_position(uint16_t mem_pos){
     9f8:	cf 93       	push	r28
     9fa:	df 93       	push	r29
     9fc:	ec 01       	movw	r28, r24
	eeprom_write_byte(mem_pos, UNDERSCORE);
     9fe:	6f e5       	ldi	r22, 0x5F	; 95
     a00:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x08, UNDERSCORE);
     a04:	6f e5       	ldi	r22, 0x5F	; 95
     a06:	ce 01       	movw	r24, r28
     a08:	08 96       	adiw	r24, 0x08	; 8
     a0a:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
     a0e:	6f e5       	ldi	r22, 0x5F	; 95
     a10:	ce 01       	movw	r24, r28
     a12:	40 96       	adiw	r24, 0x10	; 16
     a14:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
}
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <initialise_EEPROM>:
	move_two_place_down();
	move_place_down(SCORE_ONE, NAME_ONE);
}

void initialise_EEPROM(void){
	eeprom_write_dword(SCORE_ONE, 0x00);
     a1e:	40 e0       	ldi	r20, 0x00	; 0
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	ba 01       	movw	r22, r20
     a24:	80 ec       	ldi	r24, 0xC0	; 192
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	eeprom_write_dword(SCORE_TWO, 0x00);
     a2c:	40 e0       	ldi	r20, 0x00	; 0
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	ba 01       	movw	r22, r20
     a32:	80 ee       	ldi	r24, 0xE0	; 224
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	eeprom_write_dword(SCORE_THREE, 0x00);
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	ba 01       	movw	r22, r20
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	eeprom_write_dword(SCORE_FOUR, 0x00);
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	ba 01       	movw	r22, r20
     a4e:	80 e2       	ldi	r24, 0x20	; 32
     a50:	91 e0       	ldi	r25, 0x01	; 1
     a52:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	eeprom_write_dword(SCORE_FIVE, 0x00);
     a56:	40 e0       	ldi	r20, 0x00	; 0
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	ba 01       	movw	r22, r20
     a5c:	80 e4       	ldi	r24, 0x40	; 64
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	reset_name_at_memory_position(NAME_ONE);
     a64:	80 e2       	ldi	r24, 0x20	; 32
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_TWO);
     a6c:	80 e4       	ldi	r24, 0x40	; 64
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_THREE);
     a74:	80 e6       	ldi	r24, 0x60	; 96
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FOUR);
     a7c:	80 e8       	ldi	r24, 0x80	; 128
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FIVE);
     a84:	80 ea       	ldi	r24, 0xA0	; 160
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <reset_name_at_memory_position>
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     a8c:	44 e3       	ldi	r20, 0x34	; 52
     a8e:	52 e1       	ldi	r21, 0x12	; 18
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	80 e6       	ldi	r24, 0x60	; 96
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
     a9c:	08 95       	ret

00000a9e <EEPROM_High_Score_has_been_initialised>:
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
}


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     a9e:	80 e6       	ldi	r24, 0x60	; 96
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	64 33       	cpi	r22, 0x34	; 52
     aac:	72 41       	sbci	r23, 0x12	; 18
     aae:	81 05       	cpc	r24, r1
     ab0:	91 05       	cpc	r25, r1
     ab2:	11 f0       	breq	.+4      	; 0xab8 <EEPROM_High_Score_has_been_initialised+0x1a>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
}
     ab8:	c9 01       	movw	r24, r18
     aba:	08 95       	ret

00000abc <is_high_score>:
#include <avr/eeprom.h>
#include "terminalio.h"


static char current_high_score_name[4]; 
uint8_t is_high_score(void){
     abc:	cf 92       	push	r12
     abe:	df 92       	push	r13
     ac0:	ef 92       	push	r14
     ac2:	ff 92       	push	r15
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
     ac4:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     ac8:	6b 01       	movw	r12, r22
     aca:	7c 01       	movw	r14, r24
     acc:	80 e4       	ldi	r24, 0x40	; 64
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     ad4:	c6 16       	cp	r12, r22
     ad6:	d7 06       	cpc	r13, r23
     ad8:	e8 06       	cpc	r14, r24
     ada:	f9 06       	cpc	r15, r25
     adc:	40 f4       	brcc	.+16     	; 0xaee <is_high_score+0x32>
     ade:	0e 94 4f 05 	call	0xa9e	; 0xa9e <EEPROM_High_Score_has_been_initialised>
     ae2:	21 e0       	ldi	r18, 0x01	; 1
     ae4:	89 2b       	or	r24, r25
     ae6:	09 f0       	breq	.+2      	; 0xaea <is_high_score+0x2e>
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	82 2f       	mov	r24, r18
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <is_high_score+0x34>
     aee:	81 e0       	ldi	r24, 0x01	; 1
}
     af0:	ff 90       	pop	r15
     af2:	ef 90       	pop	r14
     af4:	df 90       	pop	r13
     af6:	cf 90       	pop	r12
     af8:	08 95       	ret

00000afa <high_score_position>:
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}

uint16_t high_score_position(void){
     afa:	cf 92       	push	r12
     afc:	df 92       	push	r13
     afe:	ef 92       	push	r14
     b00:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     b02:	0e 94 4f 05 	call	0xa9e	; 0xa9e <EEPROM_High_Score_has_been_initialised>
     b06:	89 2b       	or	r24, r25
     b08:	09 f4       	brne	.+2      	; 0xb0c <high_score_position+0x12>
     b0a:	42 c0       	rjmp	.+132    	; 0xb90 <high_score_position+0x96>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     b0c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
     b14:	80 ec       	ldi	r24, 0xC0	; 192
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     b1c:	6c 15       	cp	r22, r12
     b1e:	7d 05       	cpc	r23, r13
     b20:	8e 05       	cpc	r24, r14
     b22:	9f 05       	cpc	r25, r15
     b24:	c0 f1       	brcs	.+112    	; 0xb96 <high_score_position+0x9c>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     b26:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     b2a:	6b 01       	movw	r12, r22
     b2c:	7c 01       	movw	r14, r24
     b2e:	80 ee       	ldi	r24, 0xE0	; 224
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     b36:	6c 15       	cp	r22, r12
     b38:	7d 05       	cpc	r23, r13
     b3a:	8e 05       	cpc	r24, r14
     b3c:	9f 05       	cpc	r25, r15
     b3e:	70 f1       	brcs	.+92     	; 0xb9c <high_score_position+0xa2>
		return SCORE_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     b40:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     b44:	6b 01       	movw	r12, r22
     b46:	7c 01       	movw	r14, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     b50:	6c 15       	cp	r22, r12
     b52:	7d 05       	cpc	r23, r13
     b54:	8e 05       	cpc	r24, r14
     b56:	9f 05       	cpc	r25, r15
     b58:	20 f1       	brcs	.+72     	; 0xba2 <high_score_position+0xa8>
		return SCORE_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     b5a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     b5e:	6b 01       	movw	r12, r22
     b60:	7c 01       	movw	r14, r24
     b62:	80 e2       	ldi	r24, 0x20	; 32
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     b6a:	6c 15       	cp	r22, r12
     b6c:	7d 05       	cpc	r23, r13
     b6e:	8e 05       	cpc	r24, r14
     b70:	9f 05       	cpc	r25, r15
     b72:	d0 f0       	brcs	.+52     	; 0xba8 <high_score_position+0xae>
		return SCORE_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     b74:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     b78:	6b 01       	movw	r12, r22
     b7a:	7c 01       	movw	r14, r24
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     b84:	6c 15       	cp	r22, r12
     b86:	7d 05       	cpc	r23, r13
     b88:	8e 05       	cpc	r24, r14
     b8a:	9f 05       	cpc	r25, r15
     b8c:	80 f0       	brcs	.+32     	; 0xbae <high_score_position+0xb4>
		return SCORE_FIVE;
	}
}
     b8e:	11 c0       	rjmp	.+34     	; 0xbb2 <high_score_position+0xb8>
	}
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return SCORE_ONE;
     b90:	80 ec       	ldi	r24, 0xC0	; 192
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e c0       	rjmp	.+28     	; 0xbb2 <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return SCORE_ONE;
     b96:	80 ec       	ldi	r24, 0xC0	; 192
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	0b c0       	rjmp	.+22     	; 0xbb2 <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return SCORE_TWO;
     b9c:	80 ee       	ldi	r24, 0xE0	; 224
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return SCORE_THREE;
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return SCORE_FOUR;
     ba8:	80 e2       	ldi	r24, 0x20	; 32
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
     bae:	80 e4       	ldi	r24, 0x40	; 64
     bb0:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	df 90       	pop	r13
     bb8:	cf 90       	pop	r12
     bba:	08 95       	ret

00000bbc <handle_sequence_into_EEPFROM>:
				handle_sequence_into_EEPFROM();
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     bbc:	ff 92       	push	r15
     bbe:	0f 93       	push	r16
     bc0:	1f 93       	push	r17
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     bc6:	44 e3       	ldi	r20, 0x34	; 52
     bc8:	52 e1       	ldi	r21, 0x12	; 18
     bca:	60 e0       	ldi	r22, 0x00	; 0
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	80 e6       	ldi	r24, 0x60	; 96
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	uint16_t score_position= high_score_position();
     bd6:	0e 94 7d 05 	call	0xafa	; 0xafa <high_score_position>
     bda:	ec 01       	movw	r28, r24
	switch(score_position){
     bdc:	80 3e       	cpi	r24, 0xE0	; 224
     bde:	91 05       	cpc	r25, r1
     be0:	99 f0       	breq	.+38     	; 0xc08 <handle_sequence_into_EEPFROM+0x4c>
     be2:	20 f4       	brcc	.+8      	; 0xbec <handle_sequence_into_EEPFROM+0x30>
     be4:	80 3c       	cpi	r24, 0xC0	; 192
     be6:	91 05       	cpc	r25, r1
     be8:	91 f0       	breq	.+36     	; 0xc0e <handle_sequence_into_EEPFROM+0x52>
     bea:	13 c0       	rjmp	.+38     	; 0xc12 <handle_sequence_into_EEPFROM+0x56>
     bec:	c1 15       	cp	r28, r1
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	d8 07       	cpc	r29, r24
     bf2:	39 f0       	breq	.+14     	; 0xc02 <handle_sequence_into_EEPFROM+0x46>
     bf4:	c0 32       	cpi	r28, 0x20	; 32
     bf6:	e1 e0       	ldi	r30, 0x01	; 1
     bf8:	de 07       	cpc	r29, r30
     bfa:	59 f4       	brne	.+22     	; 0xc12 <handle_sequence_into_EEPFROM+0x56>
		case SCORE_FOUR: move_four_place_down(); break; 
     bfc:	0e 94 da 04 	call	0x9b4	; 0x9b4 <move_four_place_down>
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <handle_sequence_into_EEPFROM+0x56>
		case SCORE_THREE: move_three_place_down(); break; 
     c02:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <move_three_place_down>
     c06:	05 c0       	rjmp	.+10     	; 0xc12 <handle_sequence_into_EEPFROM+0x56>
		case SCORE_TWO: move_two_place_down(); break;
     c08:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <move_two_place_down>
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <handle_sequence_into_EEPFROM+0x56>
		case SCORE_ONE: move_one_place_down(); break; 
     c0e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <move_one_place_down>
	}
	
	eeprom_write_dword(score_position, get_score());
     c12:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
     c16:	ab 01       	movw	r20, r22
     c18:	bc 01       	movw	r22, r24
     c1a:	ce 01       	movw	r24, r28
     c1c:	0e 94 b0 19 	call	0x3360	; 0x3360 <eeprom_write_dword>
	eeprom_write_byte(high_score_name_position(score_position), current_high_score_name[0]);
     c20:	0c ea       	ldi	r16, 0xAC	; 172
     c22:	12 e0       	ldi	r17, 0x02	; 2
     c24:	f8 01       	movw	r30, r16
     c26:	f0 80       	ld	r15, Z
     c28:	ce 01       	movw	r24, r28
     c2a:	0e 94 76 04 	call	0x8ec	; 0x8ec <high_score_name_position>
     c2e:	ec 01       	movw	r28, r24
     c30:	6f 2d       	mov	r22, r15
     c32:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(score_position) +0x08, current_high_score_name[1]);
     c36:	f8 01       	movw	r30, r16
     c38:	61 81       	ldd	r22, Z+1	; 0x01
     c3a:	ce 01       	movw	r24, r28
     c3c:	08 96       	adiw	r24, 0x08	; 8
     c3e:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(score_position) +0x10, current_high_score_name[2]);
     c42:	f8 01       	movw	r30, r16
     c44:	62 81       	ldd	r22, Z+2	; 0x02
     c46:	ce 01       	movw	r24, r28
     c48:	40 96       	adiw	r24, 0x10	; 16
     c4a:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
	
	clear_terminal();
     c4e:	0e 94 a3 11 	call	0x2346	; 0x2346 <clear_terminal>
}
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	1f 91       	pop	r17
     c58:	0f 91       	pop	r16
     c5a:	ff 90       	pop	r15
     c5c:	08 95       	ret

00000c5e <set_high_score_name>:
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
	}
}

void set_high_score_name(void){
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
	move_cursor(10,8);
     c6a:	68 e0       	ldi	r22, 0x08	; 8
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     c72:	88 eb       	ldi	r24, 0xB8	; 184
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     c82:	00 e0       	ldi	r16, 0x00	; 0
     c84:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     c86:	0f 2e       	mov	r0, r31
     c88:	f1 e2       	ldi	r31, 0x21	; 33
     c8a:	ef 2e       	mov	r14, r31
     c8c:	f4 e0       	ldi	r31, 0x04	; 4
     c8e:	ff 2e       	mov	r15, r31
     c90:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     c92:	0e 94 c2 11 	call	0x2384	; 0x2384 <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     c96:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <serial_input_available>
     c9a:	88 23       	and	r24, r24
     c9c:	d1 f3       	breq	.-12     	; 0xc92 <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     c9e:	f7 01       	movw	r30, r14
     ca0:	80 81       	ld	r24, Z
     ca2:	91 81       	ldd	r25, Z+1	; 0x01
     ca4:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <fgetc>
     ca8:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     caa:	98 2f       	mov	r25, r24
     cac:	91 54       	subi	r25, 0x41	; 65
     cae:	9a 33       	cpi	r25, 0x3A	; 58
     cb0:	98 f4       	brcc	.+38     	; 0xcd8 <set_high_score_name+0x7a>
     cb2:	03 30       	cpi	r16, 0x03	; 3
     cb4:	11 05       	cpc	r17, r1
     cb6:	84 f4       	brge	.+32     	; 0xcd8 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     cb8:	69 e0       	ldi	r22, 0x09	; 9
     cba:	8a e0       	ldi	r24, 0x0A	; 10
     cbc:	80 0f       	add	r24, r16
     cbe:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     cc2:	f8 01       	movw	r30, r16
     cc4:	e4 55       	subi	r30, 0x54	; 84
     cc6:	fd 4f       	sbci	r31, 0xFD	; 253
     cc8:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     cca:	ce 01       	movw	r24, r28
     ccc:	99 27       	eor	r25, r25
     cce:	0e 94 f6 16 	call	0x2dec	; 0x2dec <putchar>
				score_name_pointer++;
     cd2:	0f 5f       	subi	r16, 0xFF	; 255
     cd4:	1f 4f       	sbci	r17, 0xFF	; 255
     cd6:	dd cf       	rjmp	.-70     	; 0xc92 <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>=1){
     cd8:	8a 30       	cpi	r24, 0x0A	; 10
     cda:	21 f4       	brne	.+8      	; 0xce4 <set_high_score_name+0x86>
     cdc:	10 16       	cp	r1, r16
     cde:	11 06       	cpc	r1, r17
     ce0:	c4 f6       	brge	.-80     	; 0xc92 <set_high_score_name+0x34>
     ce2:	11 c0       	rjmp	.+34     	; 0xd06 <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     ce4:	8f 37       	cpi	r24, 0x7F	; 127
     ce6:	a9 f6       	brne	.-86     	; 0xc92 <set_high_score_name+0x34>
				printf("%c", ' ');
     ce8:	80 e2       	ldi	r24, 0x20	; 32
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	0e 94 f6 16 	call	0x2dec	; 0x2dec <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     cf0:	10 16       	cp	r1, r16
     cf2:	11 06       	cpc	r1, r17
     cf4:	14 f4       	brge	.+4      	; 0xcfa <set_high_score_name+0x9c>
     cf6:	01 50       	subi	r16, 0x01	; 1
     cf8:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     cfa:	69 e0       	ldi	r22, 0x09	; 9
     cfc:	8a e0       	ldi	r24, 0x0A	; 10
     cfe:	80 0f       	add	r24, r16
     d00:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
     d04:	c6 cf       	rjmp	.-116    	; 0xc92 <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     d06:	f9 99       	sbic	0x1f, 1	; 31
     d08:	fe cf       	rjmp	.-4      	; 0xd06 <set_high_score_name+0xa8>
				handle_sequence_into_EEPFROM();
     d0a:	0e 94 de 05 	call	0xbbc	; 0xbbc <handle_sequence_into_EEPFROM>
				break; 
			}
		}
	}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	08 95       	ret

00000d1c <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     d1c:	ef 92       	push	r14
     d1e:	ff 92       	push	r15
     d20:	0f 93       	push	r16
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
	move_cursor(10,11);
     d28:	6b e0       	ldi	r22, 0x0B	; 11
     d2a:	8a e0       	ldi	r24, 0x0A	; 10
     d2c:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     d30:	86 ed       	ldi	r24, 0xD6	; 214
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	9f 93       	push	r25
     d36:	8f 93       	push	r24
     d38:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
	move_cursor(10,13);
     d3c:	6d e0       	ldi	r22, 0x0D	; 13
     d3e:	8a e0       	ldi	r24, 0x0A	; 10
     d40:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     d44:	0e 94 4f 05 	call	0xa9e	; 0xa9e <EEPROM_High_Score_has_been_initialised>
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	89 2b       	or	r24, r25
     d4e:	09 f4       	brne	.+2      	; 0xd52 <display_EEPROM_high_score+0x36>
     d50:	df c0       	rjmp	.+446    	; 0xf10 <display_EEPROM_high_score+0x1f4>

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     d52:	80 ec       	ldi	r24, 0xC0	; 192
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     d5a:	16 2f       	mov	r17, r22
     d5c:	07 2f       	mov	r16, r23
     d5e:	f8 2e       	mov	r15, r24
     d60:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
     d62:	80 e3       	ldi	r24, 0x30	; 48
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     d6a:	d8 2f       	mov	r29, r24
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
									eeprom_read_byte(NAME_ONE+0x08), 
     d6c:	88 e2       	ldi	r24, 0x28	; 40
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     d74:	c8 2f       	mov	r28, r24
	printf_P(PSTR("###HIGH SCORES###"));
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     d76:	80 e2       	ldi	r24, 0x20	; 32
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	1f 92       	push	r1
     d88:	df 93       	push	r29
     d8a:	1f 92       	push	r1
     d8c:	cf 93       	push	r28
     d8e:	1f 92       	push	r1
     d90:	8f 93       	push	r24
     d92:	81 ef       	ldi	r24, 0xF1	; 241
     d94:	91 e0       	ldi	r25, 0x01	; 1
     d96:	9f 93       	push	r25
     d98:	8f 93       	push	r24
     d9a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
     d9e:	6e e0       	ldi	r22, 0x0E	; 14
     da0:	8a e0       	ldi	r24, 0x0A	; 10
     da2:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     da6:	80 ee       	ldi	r24, 0xE0	; 224
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     dae:	16 2f       	mov	r17, r22
     db0:	07 2f       	mov	r16, r23
     db2:	f8 2e       	mov	r15, r24
     db4:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
     db6:	80 e5       	ldi	r24, 0x50	; 80
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     dbe:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
									eeprom_read_byte(NAME_TWO+0x08),
     dc0:	88 e4       	ldi	r24, 0x48	; 72
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     dc8:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     dca:	80 e4       	ldi	r24, 0x40	; 64
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     dd2:	ef 92       	push	r14
     dd4:	ff 92       	push	r15
     dd6:	0f 93       	push	r16
     dd8:	1f 93       	push	r17
     dda:	1f 92       	push	r1
     ddc:	df 93       	push	r29
     dde:	1f 92       	push	r1
     de0:	cf 93       	push	r28
     de2:	1f 92       	push	r1
     de4:	8f 93       	push	r24
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	92 e0       	ldi	r25, 0x02	; 2
     dea:	9f 93       	push	r25
     dec:	8f 93       	push	r24
     dee:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);
     df2:	6f e0       	ldi	r22, 0x0F	; 15
     df4:	8a e0       	ldi	r24, 0x0A	; 10
     df6:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	91 e0       	ldi	r25, 0x01	; 1
     dfe:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     e02:	16 2f       	mov	r17, r22
     e04:	07 2f       	mov	r16, r23
     e06:	f8 2e       	mov	r15, r24
     e08:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
     e0a:	80 e7       	ldi	r24, 0x70	; 112
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     e12:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
									eeprom_read_byte(NAME_THREE +8),
     e14:	88 e6       	ldi	r24, 0x68	; 104
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     e1c:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     e1e:	80 e6       	ldi	r24, 0x60	; 96
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     e26:	ef 92       	push	r14
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	1f 92       	push	r1
     e30:	df 93       	push	r29
     e32:	1f 92       	push	r1
     e34:	cf 93       	push	r28
     e36:	1f 92       	push	r1
     e38:	8f 93       	push	r24
     e3a:	84 e1       	ldi	r24, 0x14	; 20
     e3c:	92 e0       	ldi	r25, 0x02	; 2
     e3e:	9f 93       	push	r25
     e40:	8f 93       	push	r24
     e42:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);
     e46:	8d b7       	in	r24, 0x3d	; 61
     e48:	9e b7       	in	r25, 0x3e	; 62
     e4a:	84 96       	adiw	r24, 0x24	; 36
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	9e bf       	out	0x3e, r25	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	8d bf       	out	0x3d, r24	; 61
     e56:	60 e1       	ldi	r22, 0x10	; 16
     e58:	8a e0       	ldi	r24, 0x0A	; 10
     e5a:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     e5e:	80 e2       	ldi	r24, 0x20	; 32
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     e66:	16 2f       	mov	r17, r22
     e68:	07 2f       	mov	r16, r23
     e6a:	f8 2e       	mov	r15, r24
     e6c:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
     e6e:	80 e9       	ldi	r24, 0x90	; 144
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     e76:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
									eeprom_read_byte(NAME_FOUR+8),
     e78:	88 e8       	ldi	r24, 0x88	; 136
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     e80:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     e82:	80 e8       	ldi	r24, 0x80	; 128
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	1f 92       	push	r1
     e94:	df 93       	push	r29
     e96:	1f 92       	push	r1
     e98:	cf 93       	push	r28
     e9a:	1f 92       	push	r1
     e9c:	8f 93       	push	r24
     e9e:	85 e2       	ldi	r24, 0x25	; 37
     ea0:	92 e0       	ldi	r25, 0x02	; 2
     ea2:	9f 93       	push	r25
     ea4:	8f 93       	push	r24
     ea6:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);
     eaa:	61 e1       	ldi	r22, 0x11	; 17
     eac:	8a e0       	ldi	r24, 0x0A	; 10
     eae:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     eb2:	80 e4       	ldi	r24, 0x40	; 64
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	0e 94 96 19 	call	0x332c	; 0x332c <eeprom_read_dword>
     eba:	16 2f       	mov	r17, r22
     ebc:	07 2f       	mov	r16, r23
     ebe:	f8 2e       	mov	r15, r24
     ec0:	e9 2e       	mov	r14, r25
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
     ec2:	80 eb       	ldi	r24, 0xB0	; 176
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     eca:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
								eeprom_read_byte(NAME_FIVE+8),
     ecc:	88 ea       	ldi	r24, 0xA8	; 168
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     ed4:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     ed6:	80 ea       	ldi	r24, 0xA0	; 160
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	0e 94 8e 19 	call	0x331c	; 0x331c <eeprom_read_byte>
     ede:	ef 92       	push	r14
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	1f 92       	push	r1
     ee8:	df 93       	push	r29
     eea:	1f 92       	push	r1
     eec:	cf 93       	push	r28
     eee:	1f 92       	push	r1
     ef0:	8f 93       	push	r24
     ef2:	87 e3       	ldi	r24, 0x37	; 55
     ef4:	92 e0       	ldi	r25, 0x02	; 2
     ef6:	9f 93       	push	r25
     ef8:	8f 93       	push	r24
     efa:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
     efe:	8d b7       	in	r24, 0x3d	; 61
     f00:	9e b7       	in	r25, 0x3e	; 62
     f02:	48 96       	adiw	r24, 0x18	; 24
     f04:	0f b6       	in	r0, 0x3f	; 63
     f06:	f8 94       	cli
     f08:	9e bf       	out	0x3e, r25	; 62
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	8d bf       	out	0x3d, r24	; 61
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <display_EEPROM_high_score+0x208>
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
								eeprom_read_dword(SCORE_FIVE));
	}
	else{
		initialise_EEPROM();
     f10:	0e 94 0f 05 	call	0xa1e	; 0xa1e <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     f14:	87 e4       	ldi	r24, 0x47	; 71
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	9f 93       	push	r25
     f1a:	8f 93       	push	r24
     f1c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
	}

}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	0f 91       	pop	r16
     f2c:	ff 90       	pop	r15
     f2e:	ef 90       	pop	r14
     f30:	08 95       	ret

00000f32 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     f32:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <numFoodItems>
     f36:	08 95       	ret

00000f38 <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f38:	30 91 01 03 	lds	r19, 0x0301	; 0x800301 <numFoodItems>
     f3c:	13 16       	cp	r1, r19
     f3e:	84 f4       	brge	.+32     	; 0xf60 <food_at+0x28>
        if(foodPositions[id] == posn) {
     f40:	90 91 02 03 	lds	r25, 0x0302	; 0x800302 <foodPositions>
     f44:	89 17       	cp	r24, r25
     f46:	71 f0       	breq	.+28     	; 0xf64 <food_at+0x2c>
     f48:	e3 e0       	ldi	r30, 0x03	; 3
     f4a:	f3 e0       	ldi	r31, 0x03	; 3
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	03 c0       	rjmp	.+6      	; 0xf56 <food_at+0x1e>
     f50:	21 91       	ld	r18, Z+
     f52:	28 17       	cp	r18, r24
     f54:	49 f0       	breq	.+18     	; 0xf68 <food_at+0x30>
     f56:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f58:	39 13       	cpse	r19, r25
     f5a:	fa cf       	rjmp	.-12     	; 0xf50 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	08 95       	ret
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	08 95       	ret
     f68:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     f6a:	08 95       	ret

00000f6c <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     f6c:	0e 94 9c 07 	call	0xf38	; 0xf38 <food_at>
     f70:	91 e0       	ldi	r25, 0x01	; 1
     f72:	8f 3f       	cpi	r24, 0xFF	; 255
     f74:	09 f4       	brne	.+2      	; 0xf78 <is_food_at+0xc>
     f76:	90 e0       	ldi	r25, 0x00	; 0
}
     f78:	89 2f       	mov	r24, r25
     f7a:	08 95       	ret

00000f7c <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     f86:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <numFoodItems>
     f8a:	88 30       	cpi	r24, 0x08	; 8
     f8c:	0c f0       	brlt	.+2      	; 0xf90 <add_food_item+0x14>
     f8e:	44 c0       	rjmp	.+136    	; 0x1018 <add_food_item+0x9c>
     f90:	00 e0       	ldi	r16, 0x00	; 0
     f92:	10 e0       	ldi	r17, 0x00	; 0
     f94:	d0 e0       	ldi	r29, 0x00	; 0
     f96:	c0 e0       	ldi	r28, 0x00	; 0
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <add_food_item+0x22>
     f9a:	0f 5f       	subi	r16, 0xFF	; 255
     f9c:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     f9e:	2c 2f       	mov	r18, r28
     fa0:	cc 0f       	add	r28, r28
     fa2:	33 0b       	sbc	r19, r19
     fa4:	2d 5f       	subi	r18, 0xFD	; 253
     fa6:	3f 4f       	sbci	r19, 0xFF	; 255
     fa8:	20 0f       	add	r18, r16
     faa:	31 1f       	adc	r19, r17
     fac:	2f 70       	andi	r18, 0x0F	; 15
     fae:	30 78       	andi	r19, 0x80	; 128
     fb0:	33 23       	and	r19, r19
     fb2:	34 f4       	brge	.+12     	; 0xfc0 <add_food_item+0x44>
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	31 09       	sbc	r19, r1
     fb8:	20 6f       	ori	r18, 0xF0	; 240
     fba:	3f 6f       	ori	r19, 0xFF	; 255
     fbc:	2f 5f       	subi	r18, 0xFF	; 255
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	82 2f       	mov	r24, r18
     fc2:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     fc4:	6d 2f       	mov	r22, r29
     fc6:	dd 0f       	add	r29, r29
     fc8:	77 0b       	sbc	r23, r23
     fca:	6b 5f       	subi	r22, 0xFB	; 251
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	67 70       	andi	r22, 0x07	; 7
     fd0:	70 78       	andi	r23, 0x80	; 128
     fd2:	77 23       	and	r23, r23
     fd4:	34 f4       	brge	.+12     	; 0xfe2 <add_food_item+0x66>
     fd6:	61 50       	subi	r22, 0x01	; 1
     fd8:	71 09       	sbc	r23, r1
     fda:	68 6f       	ori	r22, 0xF8	; 248
     fdc:	7f 6f       	ori	r23, 0xFF	; 255
     fde:	6f 5f       	subi	r22, 0xFF	; 255
     fe0:	7f 4f       	sbci	r23, 0xFF	; 255
     fe2:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     fe4:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
     fe8:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     fea:	03 36       	cpi	r16, 0x63	; 99
     fec:	11 05       	cpc	r17, r1
     fee:	b1 f0       	breq	.+44     	; 0x101c <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     ff0:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     ff4:	81 11       	cpse	r24, r1
     ff6:	d1 cf       	rjmp	.-94     	; 0xf9a <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     ff8:	8f 2d       	mov	r24, r15
     ffa:	0e 94 b6 07 	call	0xf6c	; 0xf6c <is_food_at>
     ffe:	81 11       	cpse	r24, r1
    1000:	cc cf       	rjmp	.-104    	; 0xf9a <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1002:	8f 2d       	mov	r24, r15
    1004:	0e 94 13 11 	call	0x2226	; 0x2226 <is_superfood_at>
    1008:	81 11       	cpse	r24, r1
    100a:	c7 cf       	rjmp	.-114    	; 0xf9a <add_food_item+0x1e>
    100c:	8f 2d       	mov	r24, r15
    100e:	0e 94 4e 0c 	call	0x189c	; 0x189c <is_rat_at>
    1012:	81 11       	cpse	r24, r1
    1014:	c2 cf       	rjmp	.-124    	; 0xf9a <add_food_item+0x1e>
    1016:	04 c0       	rjmp	.+8      	; 0x1020 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
    1018:	88 e0       	ldi	r24, 0x08	; 8
    101a:	0f c0       	rjmp	.+30     	; 0x103a <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	0d c0       	rjmp	.+26     	; 0x103a <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
    1020:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <numFoodItems>
	foodPositions[newFoodID] = test_position;
    1024:	e8 2f       	mov	r30, r24
    1026:	08 2e       	mov	r0, r24
    1028:	00 0c       	add	r0, r0
    102a:	ff 0b       	sbc	r31, r31
    102c:	ee 5f       	subi	r30, 0xFE	; 254
    102e:	fc 4f       	sbci	r31, 0xFC	; 252
    1030:	f0 82       	st	Z, r15
	numFoodItems++;
    1032:	8f 5f       	subi	r24, 0xFF	; 255
    1034:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
    1038:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	0f 91       	pop	r16
    1042:	ff 90       	pop	r15
    1044:	08 95       	ret

00001046 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
    1046:	e8 2f       	mov	r30, r24
    1048:	88 0f       	add	r24, r24
    104a:	ff 0b       	sbc	r31, r31
    104c:	ee 5f       	subi	r30, 0xFE	; 254
    104e:	fc 4f       	sbci	r31, 0xFC	; 252
}
    1050:	80 81       	ld	r24, Z
    1052:	08 95       	ret

00001054 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
    1054:	88 23       	and	r24, r24
    1056:	b4 f0       	brlt	.+44     	; 0x1084 <remove_food+0x30>
    1058:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <numFoodItems>
    105c:	82 17       	cp	r24, r18
    105e:	94 f4       	brge	.+36     	; 0x1084 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	82 17       	cp	r24, r18
    1064:	64 f4       	brge	.+24     	; 0x107e <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
    1066:	e8 2f       	mov	r30, r24
    1068:	08 2e       	mov	r0, r24
    106a:	00 0c       	add	r0, r0
    106c:	ff 0b       	sbc	r31, r31
    106e:	ee 5f       	subi	r30, 0xFE	; 254
    1070:	fc 4f       	sbci	r31, 0xFC	; 252
    1072:	90 81       	ld	r25, Z
    1074:	31 97       	sbiw	r30, 0x01	; 1
    1076:	90 83       	st	Z, r25
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    107a:	82 17       	cp	r24, r18
    107c:	a4 f3       	brlt	.-24     	; 0x1066 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
    107e:	21 50       	subi	r18, 0x01	; 1
    1080:	20 93 01 03 	sts	0x0301, r18	; 0x800301 <numFoodItems>
    1084:	08 95       	ret

00001086 <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	c8 2f       	mov	r28, r24
    108e:	16 2f       	mov	r17, r22
    1090:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    1094:	d8 2f       	mov	r29, r24
    1096:	8c 2f       	mov	r24, r28
    1098:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    109c:	41 2f       	mov	r20, r17
    109e:	6d 2f       	mov	r22, r29
    10a0:	0e 94 19 09 	call	0x1232	; 0x1232 <ledmatrix_update_pixel>
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	08 95       	ret

000010ac <init_game>:
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <ledmatrix_clear>
    10b4:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <init_score_on_terminal>
    10b8:	88 e5       	ldi	r24, 0x58	; 88
    10ba:	92 e0       	ldi	r25, 0x02	; 2
    10bc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    10c0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    10c4:	0e 94 55 0c 	call	0x18aa	; 0x18aa <add_new_rat_position>
    10c8:	0e 94 f6 12 	call	0x25ec	; 0x25ec <initialise_timer_one>
    10cc:	0e 94 34 02 	call	0x468	; 0x468 <play_start_game_sound_effect>
    10d0:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <init_snake>
    10d4:	0e 94 57 0f 	call	0x1eae	; 0x1eae <get_snake_head_position>
    10d8:	6f e0       	ldi	r22, 0x0F	; 15
    10da:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    10de:	0e 94 65 0f 	call	0x1eca	; 0x1eca <get_snake_tail_position>
    10e2:	60 ef       	ldi	r22, 0xF0	; 240
    10e4:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    10e8:	0e 94 99 07 	call	0xf32	; 0xf32 <init_food>
    10ec:	c3 e0       	ldi	r28, 0x03	; 3
    10ee:	0e 94 be 07 	call	0xf7c	; 0xf7c <add_food_item>
    10f2:	d8 2f       	mov	r29, r24
    10f4:	0e 94 65 09 	call	0x12ca	; 0x12ca <is_position_valid>
    10f8:	88 23       	and	r24, r24
    10fa:	21 f0       	breq	.+8      	; 0x1104 <init_game+0x58>
    10fc:	63 e3       	ldi	r22, 0x33	; 51
    10fe:	8d 2f       	mov	r24, r29
    1100:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    1104:	c1 50       	subi	r28, 0x01	; 1
    1106:	99 f7       	brne	.-26     	; 0x10ee <init_game+0x42>
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	08 95       	ret

0000110e <increase_game_speed>:
    110e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    1112:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    1116:	8b 3f       	cpi	r24, 0xFB	; 251
    1118:	91 05       	cpc	r25, r1
    111a:	a4 f0       	brlt	.+40     	; 0x1144 <increase_game_speed+0x36>
    111c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
    1120:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 b5 13 	call	0x276a	; 0x276a <__floatunsisf>
    112c:	26 e6       	ldi	r18, 0x66	; 102
    112e:	36 e6       	ldi	r19, 0x66	; 102
    1130:	46 e6       	ldi	r20, 0x66	; 102
    1132:	5f e3       	ldi	r21, 0x3F	; 63
    1134:	0e 94 9b 14 	call	0x2936	; 0x2936 <__mulsf3>
    1138:	0e 94 86 13 	call	0x270c	; 0x270c <__fixunssfsi>
    113c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
    1140:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
    1144:	08 95       	ret

00001146 <attempt_to_move_snake_forward>:
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	0e 94 57 0f 	call	0x1eae	; 0x1eae <get_snake_head_position>
    1152:	d8 2f       	mov	r29, r24
    1154:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <advance_snake_head>
    1158:	c8 2f       	mov	r28, r24
    115a:	88 23       	and	r24, r24
    115c:	0c f4       	brge	.+2      	; 0x1160 <attempt_to_move_snake_forward+0x1a>
    115e:	55 c0       	rjmp	.+170    	; 0x120a <attempt_to_move_snake_forward+0xc4>
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_to_score>
    1168:	0e 94 57 0f 	call	0x1eae	; 0x1eae <get_snake_head_position>
    116c:	18 2f       	mov	r17, r24
    116e:	8e ef       	ldi	r24, 0xFE	; 254
    1170:	8c 0f       	add	r24, r28
    1172:	82 30       	cpi	r24, 0x02	; 2
    1174:	c0 f4       	brcc	.+48     	; 0x11a6 <attempt_to_move_snake_forward+0x60>
    1176:	81 2f       	mov	r24, r17
    1178:	0e 94 9c 07 	call	0xf38	; 0xf38 <food_at>
    117c:	0e 94 2a 08 	call	0x1054	; 0x1054 <remove_food>
    1180:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
    1184:	82 e0       	ldi	r24, 0x02	; 2
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_to_score>
    118c:	0e 94 87 08 	call	0x110e	; 0x110e <increase_game_speed>
    1190:	0e 94 be 07 	call	0xf7c	; 0xf7c <add_food_item>
    1194:	08 2f       	mov	r16, r24
    1196:	0e 94 65 09 	call	0x12ca	; 0x12ca <is_position_valid>
    119a:	88 23       	and	r24, r24
    119c:	21 f0       	breq	.+8      	; 0x11a6 <attempt_to_move_snake_forward+0x60>
    119e:	63 e3       	ldi	r22, 0x33	; 51
    11a0:	80 2f       	mov	r24, r16
    11a2:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    11a6:	8c ef       	ldi	r24, 0xFC	; 252
    11a8:	8c 0f       	add	r24, r28
    11aa:	82 30       	cpi	r24, 0x02	; 2
    11ac:	50 f4       	brcc	.+20     	; 0x11c2 <attempt_to_move_snake_forward+0x7c>
    11ae:	0e 94 07 11 	call	0x220e	; 0x220e <eat_superfood_from_board>
    11b2:	89 e0       	ldi	r24, 0x09	; 9
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_to_score>
    11ba:	0e 94 87 08 	call	0x110e	; 0x110e <increase_game_speed>
    11be:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
    11c2:	8a ef       	ldi	r24, 0xFA	; 250
    11c4:	8c 0f       	add	r24, r28
    11c6:	82 30       	cpi	r24, 0x02	; 2
    11c8:	50 f4       	brcc	.+20     	; 0x11de <attempt_to_move_snake_forward+0x98>
    11ca:	0e 94 55 0c 	call	0x18aa	; 0x18aa <add_new_rat_position>
    11ce:	84 e0       	ldi	r24, 0x04	; 4
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <add_to_score>
    11d6:	0e 94 87 08 	call	0x110e	; 0x110e <increase_game_speed>
    11da:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
    11de:	cd 7f       	andi	r28, 0xFD	; 253
    11e0:	c1 30       	cpi	r28, 0x01	; 1
    11e2:	11 f0       	breq	.+4      	; 0x11e8 <attempt_to_move_snake_forward+0xa2>
    11e4:	c5 30       	cpi	r28, 0x05	; 5
    11e6:	29 f4       	brne	.+10     	; 0x11f2 <attempt_to_move_snake_forward+0xac>
    11e8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <advance_snake_tail>
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    11f2:	60 ef       	ldi	r22, 0xF0	; 240
    11f4:	8d 2f       	mov	r24, r29
    11f6:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    11fa:	6f e0       	ldi	r22, 0x0F	; 15
    11fc:	81 2f       	mov	r24, r17
    11fe:	0e 94 43 08 	call	0x1086	; 0x1086 <update_display_at_position>
    1202:	0e 94 29 12 	call	0x2452	; 0x2452 <update_terminal_score>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	01 c0       	rjmp	.+2      	; 0x120c <attempt_to_move_snake_forward+0xc6>
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	df 91       	pop	r29
    120e:	cf 91       	pop	r28
    1210:	1f 91       	pop	r17
    1212:	0f 91       	pop	r16
    1214:	08 95       	ret

00001216 <get_current_game_speed>:
    1216:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    121a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    121e:	08 95       	ret

00001220 <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    1220:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1224:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    1228:	08 95       	ret

0000122a <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    122a:	80 e8       	ldi	r24, 0x80	; 128
    122c:	0e 94 92 10 	call	0x2124	; 0x2124 <spi_setup_master>
    1230:	08 95       	ret

00001232 <ledmatrix_update_pixel>:
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	b0 f4       	brcc	.+44     	; 0x1268 <ledmatrix_update_pixel+0x36>
    123c:	68 30       	cpi	r22, 0x08	; 8
    123e:	a0 f4       	brcc	.+40     	; 0x1268 <ledmatrix_update_pixel+0x36>
    1240:	14 2f       	mov	r17, r20
    1242:	c6 2f       	mov	r28, r22
    1244:	d8 2f       	mov	r29, r24
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    124c:	6c 2f       	mov	r22, r28
    124e:	67 70       	andi	r22, 0x07	; 7
    1250:	80 e1       	ldi	r24, 0x10	; 16
    1252:	68 9f       	mul	r22, r24
    1254:	90 01       	movw	r18, r0
    1256:	11 24       	eor	r1, r1
    1258:	8d 2f       	mov	r24, r29
    125a:	8f 70       	andi	r24, 0x0F	; 15
    125c:	82 2b       	or	r24, r18
    125e:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    1262:	81 2f       	mov	r24, r17
    1264:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	08 95       	ret

00001270 <ledmatrix_update_column>:
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
    1274:	cf 93       	push	r28
    1276:	df 93       	push	r29
    1278:	80 31       	cpi	r24, 0x10	; 16
    127a:	90 f4       	brcc	.+36     	; 0x12a0 <ledmatrix_update_column+0x30>
    127c:	8b 01       	movw	r16, r22
    127e:	c8 2f       	mov	r28, r24
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    1286:	8c 2f       	mov	r24, r28
    1288:	8f 70       	andi	r24, 0x0F	; 15
    128a:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    128e:	e8 01       	movw	r28, r16
    1290:	08 5f       	subi	r16, 0xF8	; 248
    1292:	1f 4f       	sbci	r17, 0xFF	; 255
    1294:	89 91       	ld	r24, Y+
    1296:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    129a:	c0 17       	cp	r28, r16
    129c:	d1 07       	cpc	r29, r17
    129e:	d1 f7       	brne	.-12     	; 0x1294 <ledmatrix_update_column+0x24>
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	08 95       	ret

000012aa <ledmatrix_shift_display_left>:
    12aa:	84 e0       	ldi	r24, 0x04	; 4
    12ac:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    12b0:	82 e0       	ldi	r24, 0x02	; 2
    12b2:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    12b6:	08 95       	ret

000012b8 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    12b8:	8f e0       	ldi	r24, 0x0F	; 15
    12ba:	0e 94 ba 10 	call	0x2174	; 0x2174 <spi_send_byte>
    12be:	08 95       	ret

000012c0 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    12c0:	82 95       	swap	r24
    12c2:	8f 70       	andi	r24, 0x0F	; 15
    12c4:	08 95       	ret

000012c6 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    12c6:	8f 70       	andi	r24, 0x0F	; 15
    12c8:	08 95       	ret

000012ca <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    12ca:	83 fb       	bst	r24, 3
    12cc:	88 27       	eor	r24, r24
    12ce:	80 f9       	bld	r24, 0
}
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	89 27       	eor	r24, r25
    12d4:	08 95       	ret

000012d6 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    12d6:	20 e1       	ldi	r18, 0x10	; 16
    12d8:	82 9f       	mul	r24, r18
    12da:	c0 01       	movw	r24, r0
    12dc:	11 24       	eor	r1, r1
    12de:	67 70       	andi	r22, 0x07	; 7
}
    12e0:	86 2b       	or	r24, r22
    12e2:	08 95       	ret

000012e4 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    12e4:	0e 94 15 09 	call	0x122a	; 0x122a <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    12e8:	0e 94 3f 01 	call	0x27e	; 0x27e <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	7b e4       	ldi	r23, 0x4B	; 75
    12f2:	80 e0       	ldi	r24, 0x00	; 0
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    12fa:	0e 94 46 12 	call	0x248c	; 0x248c <init_timer0>
	
	// Turn on global interrupts
	sei();
    12fe:	78 94       	sei
    1300:	08 95       	ret

00001302 <splash_screen>:
}

void splash_screen(void) {
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 ac 11 	call	0x2358	; 0x2358 <set_display_attribute>
	clear_terminal();
    1312:	0e 94 a3 11 	call	0x2346	; 0x2346 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1316:	0e 94 b9 11 	call	0x2372	; 0x2372 <hide_cursor>
	display_start_terminal_screen();
    131a:	0e 94 cb 11 	call	0x2396	; 0x2396 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    131e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    1322:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1324:	0f 2e       	mov	r0, r31
    1326:	ff e0       	ldi	r31, 0x0F	; 15
    1328:	ff 2e       	mov	r15, r31
    132a:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    132c:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    132e:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1330:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    1332:	6c 2f       	mov	r22, r28
    1334:	89 e6       	ldi	r24, 0x69	; 105
    1336:	92 e0       	ldi	r25, 0x02	; 2
    1338:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    133e:	2f e7       	ldi	r18, 0x7F	; 127
    1340:	8c e2       	ldi	r24, 0x2C	; 44
    1342:	93 e0       	ldi	r25, 0x03	; 3
    1344:	21 50       	subi	r18, 0x01	; 1
    1346:	80 40       	sbci	r24, 0x00	; 0
    1348:	90 40       	sbci	r25, 0x00	; 0
    134a:	e1 f7       	brne	.-8      	; 0x1344 <splash_screen+0x42>
    134c:	00 c0       	rjmp	.+0      	; 0x134e <splash_screen+0x4c>
    134e:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    1350:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_pushed>
    1354:	8f 3f       	cpi	r24, 0xFF	; 255
    1356:	a9 f5       	brne	.+106    	; 0x13c2 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1358:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <scroll_display>
    135c:	81 11       	cpse	r24, r1
    135e:	ef cf       	rjmp	.-34     	; 0x133e <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    1360:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <random>
    1364:	dc 01       	movw	r26, r24
    1366:	cb 01       	movw	r24, r22
    1368:	83 70       	andi	r24, 0x03	; 3
    136a:	99 27       	eor	r25, r25
    136c:	aa 27       	eor	r26, r26
    136e:	b0 78       	andi	r27, 0x80	; 128
    1370:	bb 23       	and	r27, r27
    1372:	54 f4       	brge	.+20     	; 0x1388 <splash_screen+0x86>
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	a1 09       	sbc	r26, r1
    1378:	b1 09       	sbc	r27, r1
    137a:	8c 6f       	ori	r24, 0xFC	; 252
    137c:	9f 6f       	ori	r25, 0xFF	; 255
    137e:	af 6f       	ori	r26, 0xFF	; 255
    1380:	bf 6f       	ori	r27, 0xFF	; 255
    1382:	01 96       	adiw	r24, 0x01	; 1
    1384:	a1 1d       	adc	r26, r1
    1386:	b1 1d       	adc	r27, r1
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	91 05       	cpc	r25, r1
    138c:	a1 05       	cpc	r26, r1
    138e:	b1 05       	cpc	r27, r1
    1390:	91 f0       	breq	.+36     	; 0x13b6 <splash_screen+0xb4>
    1392:	2c f4       	brge	.+10     	; 0x139e <splash_screen+0x9c>
    1394:	89 2b       	or	r24, r25
    1396:	8a 2b       	or	r24, r26
    1398:	8b 2b       	or	r24, r27
    139a:	59 f0       	breq	.+22     	; 0x13b2 <splash_screen+0xb0>
    139c:	ca cf       	rjmp	.-108    	; 0x1332 <splash_screen+0x30>
    139e:	82 30       	cpi	r24, 0x02	; 2
    13a0:	91 05       	cpc	r25, r1
    13a2:	a1 05       	cpc	r26, r1
    13a4:	b1 05       	cpc	r27, r1
    13a6:	49 f0       	breq	.+18     	; 0x13ba <splash_screen+0xb8>
    13a8:	03 97       	sbiw	r24, 0x03	; 3
    13aa:	a1 05       	cpc	r26, r1
    13ac:	b1 05       	cpc	r27, r1
    13ae:	39 f0       	breq	.+14     	; 0x13be <splash_screen+0xbc>
    13b0:	c0 cf       	rjmp	.-128    	; 0x1332 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    13b2:	cd 2f       	mov	r28, r29
    13b4:	be cf       	rjmp	.-132    	; 0x1332 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    13b6:	cf 2d       	mov	r28, r15
    13b8:	bc cf       	rjmp	.-136    	; 0x1332 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    13ba:	c0 2f       	mov	r28, r16
    13bc:	ba cf       	rjmp	.-140    	; 0x1332 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    13be:	c1 2f       	mov	r28, r17
    13c0:	b8 cf       	rjmp	.-144    	; 0x1332 <splash_screen+0x30>
		}
	}
}
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	ff 90       	pop	r15
    13cc:	08 95       	ret

000013ce <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    13ce:	0e 94 a3 11 	call	0x2346	; 0x2346 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    13d2:	0e 94 56 08 	call	0x10ac	; 0x10ac <init_game>
		
	// Initialise the score
	init_score();
    13d6:	0e 94 ca 0c 	call	0x1994	; 0x1994 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    13da:	0e 94 4d 01 	call	0x29a	; 0x29a <empty_button_queue>
	clear_serial_input_buffer();
    13de:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <clear_serial_input_buffer>
    13e2:	08 95       	ret

000013e4 <play_game>:
}

void play_game(void) {
    13e4:	4f 92       	push	r4
    13e6:	5f 92       	push	r5
    13e8:	7f 92       	push	r7
    13ea:	8f 92       	push	r8
    13ec:	9f 92       	push	r9
    13ee:	af 92       	push	r10
    13f0:	bf 92       	push	r11
    13f2:	cf 92       	push	r12
    13f4:	df 92       	push	r13
    13f6:	ef 92       	push	r14
    13f8:	ff 92       	push	r15
    13fa:	0f 93       	push	r16
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    1402:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    1406:	4b 01       	movw	r8, r22
    1408:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    140a:	00 e0       	ldi	r16, 0x00	; 0
    140c:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    140e:	0f 2e       	mov	r0, r31
    1410:	ff ed       	ldi	r31, 0xDF	; 223
    1412:	7f 2e       	mov	r7, r31
    1414:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1416:	0f 2e       	mov	r0, r31
    1418:	f1 e2       	ldi	r31, 0x21	; 33
    141a:	4f 2e       	mov	r4, r31
    141c:	f4 e0       	ldi	r31, 0x04	; 4
    141e:	5f 2e       	mov	r5, r31
    1420:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    1422:	0e 94 c9 10 	call	0x2192	; 0x2192 <time_to_add_superfood>
    1426:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    1428:	0e 94 20 11 	call	0x2240	; 0x2240 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    142c:	0e 94 df 10 	call	0x21be	; 0x21be <time_to_remove_superfood>
    1430:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    1432:	0e 94 ef 10 	call	0x21de	; 0x21de <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    1436:	0e 94 b8 0c 	call	0x1970	; 0x1970 <is_time_to_move_rat>
    143a:	81 11       	cpse	r24, r1
    143c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <move_rat>
			handle_buzzer_loop();
    1440:	0e 94 9a 02 	call	0x534	; 0x534 <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    1444:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_is_paused>
    1448:	89 2b       	or	r24, r25
    144a:	19 f0       	breq	.+6      	; 0x1452 <play_game+0x6e>
			button = -1;
			empty_button_queue();
    144c:	0e 94 4d 01 	call	0x29a	; 0x29a <empty_button_queue>
    1450:	06 c0       	rjmp	.+12     	; 0x145e <play_game+0x7a>
			}else{
		button = button_pushed();}
    1452:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_pushed>
    1456:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    1458:	8f 3f       	cpi	r24, 0xFF	; 255
    145a:	09 f0       	breq	.+2      	; 0x145e <play_game+0x7a>
    145c:	9a c0       	rjmp	.+308    	; 0x1592 <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    145e:	0e 94 95 0e 	call	0x1d2a	; 0x1d2a <serial_input_available>
    1462:	88 23       	and	r24, r24
    1464:	09 f4       	brne	.+2      	; 0x1468 <play_game+0x84>
    1466:	a4 c0       	rjmp	.+328    	; 0x15b0 <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1468:	f2 01       	movw	r30, r4
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <fgetc>
    1472:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1474:	01 11       	cpse	r16, r1
    1476:	03 c0       	rjmp	.+6      	; 0x147e <play_game+0x9a>
    1478:	8b 31       	cpi	r24, 0x1B	; 27
    147a:	51 f4       	brne	.+20     	; 0x1490 <play_game+0xac>
    147c:	96 c0       	rjmp	.+300    	; 0x15aa <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    147e:	01 30       	cpi	r16, 0x01	; 1
    1480:	19 f4       	brne	.+6      	; 0x1488 <play_game+0xa4>
    1482:	8b 35       	cpi	r24, 0x5B	; 91
    1484:	29 f4       	brne	.+10     	; 0x1490 <play_game+0xac>
    1486:	93 c0       	rjmp	.+294    	; 0x15ae <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1488:	02 30       	cpi	r16, 0x02	; 2
    148a:	09 f4       	brne	.+2      	; 0x148e <play_game+0xaa>
    148c:	88 c0       	rjmp	.+272    	; 0x159e <play_game+0x1ba>
    148e:	7b c0       	rjmp	.+246    	; 0x1586 <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1490:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_is_paused>
    1494:	89 2b       	or	r24, r25
    1496:	09 f0       	breq	.+2      	; 0x149a <play_game+0xb6>
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <play_game+0x134>
    149a:	08 c0       	rjmp	.+16     	; 0x14ac <play_game+0xc8>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    149c:	d1 11       	cpse	r29, r1
    149e:	09 c0       	rjmp	.+18     	; 0x14b2 <play_game+0xce>
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    14a2:	00 e0       	ldi	r16, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <set_snake_dirn>
    14aa:	50 c0       	rjmp	.+160    	; 0x154c <play_game+0x168>
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	d1 2f       	mov	r29, r17
    14b0:	01 c0       	rjmp	.+2      	; 0x14b4 <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    14b2:	c1 2f       	mov	r28, r17
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    14b4:	d2 30       	cpi	r29, 0x02	; 2
    14b6:	19 f0       	breq	.+6      	; 0x14be <play_game+0xda>
    14b8:	81 2f       	mov	r24, r17
    14ba:	81 34       	cpi	r24, 0x41	; 65
    14bc:	21 f4       	brne	.+8      	; 0x14c6 <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <set_snake_dirn>
    14c4:	43 c0       	rjmp	.+134    	; 0x154c <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    14c6:	d3 30       	cpi	r29, 0x03	; 3
    14c8:	11 f0       	breq	.+4      	; 0x14ce <play_game+0xea>
    14ca:	84 34       	cpi	r24, 0x44	; 68
    14cc:	21 f4       	brne	.+8      	; 0x14d6 <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    14ce:	83 e0       	ldi	r24, 0x03	; 3
    14d0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <set_snake_dirn>
    14d4:	3b c0       	rjmp	.+118    	; 0x154c <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    14d6:	d1 30       	cpi	r29, 0x01	; 1
    14d8:	11 f0       	breq	.+4      	; 0x14de <play_game+0xfa>
    14da:	82 34       	cpi	r24, 0x42	; 66
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    14de:	82 e0       	ldi	r24, 0x02	; 2
    14e0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <set_snake_dirn>
    14e4:	33 c0       	rjmp	.+102    	; 0x154c <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    14e6:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    14e8:	8c 2f       	mov	r24, r28
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	80 35       	cpi	r24, 0x50	; 80
    14ee:	19 f4       	brne	.+6      	; 0x14f6 <play_game+0x112>
			toggle_timer_clock();
    14f0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <toggle_timer_clock>
    14f4:	2b c0       	rjmp	.+86     	; 0x154c <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    14f6:	c3 37       	cpi	r28, 0x73	; 115
    14f8:	19 f4       	brne	.+6      	; 0x1500 <play_game+0x11c>
			save_game_to_EPPROM();
    14fa:	0e 94 bd 02 	call	0x57a	; 0x57a <save_game_to_EPPROM>
    14fe:	26 c0       	rjmp	.+76     	; 0x154c <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1500:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    1504:	89 2b       	or	r24, r25
    1506:	11 f1       	breq	.+68     	; 0x154c <play_game+0x168>
    1508:	8c 2f       	mov	r24, r28
    150a:	8f 7d       	andi	r24, 0xDF	; 223
    150c:	8f 34       	cpi	r24, 0x4F	; 79
    150e:	f1 f4       	brne	.+60     	; 0x154c <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <load_EEPROM_data_on_next_game>
 			break;
    1516:	62 c0       	rjmp	.+196    	; 0x15dc <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1518:	8c 2f       	mov	r24, r28
    151a:	8f 7d       	andi	r24, 0xDF	; 223
    151c:	80 35       	cpi	r24, 0x50	; 80
    151e:	21 f4       	brne	.+8      	; 0x1528 <play_game+0x144>
			toggle_timer_clock();
    1520:	0e 94 5e 12 	call	0x24bc	; 0x24bc <toggle_timer_clock>
    1524:	00 e0       	ldi	r16, 0x00	; 0
    1526:	12 c0       	rjmp	.+36     	; 0x154c <play_game+0x168>
    1528:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    152a:	83 35       	cpi	r24, 0x53	; 83
    152c:	19 f4       	brne	.+6      	; 0x1534 <play_game+0x150>
			save_game_to_EPPROM();
    152e:	0e 94 bd 02 	call	0x57a	; 0x57a <save_game_to_EPPROM>
    1532:	0c c0       	rjmp	.+24     	; 0x154c <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1534:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    1538:	89 2b       	or	r24, r25
    153a:	41 f0       	breq	.+16     	; 0x154c <play_game+0x168>
    153c:	8c 2f       	mov	r24, r28
    153e:	8f 7d       	andi	r24, 0xDF	; 223
    1540:	8f 34       	cpi	r24, 0x4F	; 79
    1542:	21 f4       	brne	.+8      	; 0x154c <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <load_EEPROM_data_on_next_game>
			break;
    154a:	48 c0       	rjmp	.+144    	; 0x15dc <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    154c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    1550:	6b 01       	movw	r12, r22
    1552:	7c 01       	movw	r14, r24
    1554:	0e 94 0b 09 	call	0x1216	; 0x1216 <get_current_game_speed>
    1558:	09 2e       	mov	r0, r25
    155a:	00 0c       	add	r0, r0
    155c:	aa 0b       	sbc	r26, r26
    155e:	bb 0b       	sbc	r27, r27
    1560:	88 0d       	add	r24, r8
    1562:	99 1d       	adc	r25, r9
    1564:	aa 1d       	adc	r26, r10
    1566:	bb 1d       	adc	r27, r11
    1568:	c8 16       	cp	r12, r24
    156a:	d9 06       	cpc	r13, r25
    156c:	ea 06       	cpc	r14, r26
    156e:	fb 06       	cpc	r15, r27
    1570:	08 f4       	brcc	.+2      	; 0x1574 <play_game+0x190>
    1572:	57 cf       	rjmp	.-338    	; 0x1422 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    1574:	0e 94 a3 08 	call	0x1146	; 0x1146 <attempt_to_move_snake_forward>
    1578:	88 23       	and	r24, r24
    157a:	81 f1       	breq	.+96     	; 0x15dc <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    157c:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    1580:	4b 01       	movw	r8, r22
    1582:	5c 01       	movw	r10, r24
    1584:	4e cf       	rjmp	.-356    	; 0x1422 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1586:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_is_paused>
    158a:	89 2b       	or	r24, r25
    158c:	09 f4       	brne	.+2      	; 0x1590 <play_game+0x1ac>
    158e:	ab cf       	rjmp	.-170    	; 0x14e6 <play_game+0x102>
    1590:	c3 cf       	rjmp	.-122    	; 0x1518 <play_game+0x134>
    1592:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_is_paused>
    1596:	89 2b       	or	r24, r25
    1598:	09 f4       	brne	.+2      	; 0x159c <play_game+0x1b8>
    159a:	80 cf       	rjmp	.-256    	; 0x149c <play_game+0xb8>
    159c:	1c c0       	rjmp	.+56     	; 0x15d6 <play_game+0x1f2>
    159e:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_is_paused>
    15a2:	89 2b       	or	r24, r25
    15a4:	51 f0       	breq	.+20     	; 0x15ba <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15a6:	00 e0       	ldi	r16, 0x00	; 0
    15a8:	13 c0       	rjmp	.+38     	; 0x15d0 <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    15aa:	01 e0       	ldi	r16, 0x01	; 1
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    15ae:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    15b0:	0e 94 65 12 	call	0x24ca	; 0x24ca <timer_is_paused>
    15b4:	89 2b       	or	r24, r25
    15b6:	61 f4       	brne	.+24     	; 0x15d0 <play_game+0x1ec>
    15b8:	08 c0       	rjmp	.+16     	; 0x15ca <play_game+0x1e6>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15ba:	c3 34       	cpi	r28, 0x43	; 67
    15bc:	09 f4       	brne	.+2      	; 0x15c0 <play_game+0x1dc>
    15be:	71 cf       	rjmp	.-286    	; 0x14a2 <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    15c0:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15c2:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    15c4:	c1 2f       	mov	r28, r17
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15c6:	d1 2f       	mov	r29, r17
    15c8:	78 cf       	rjmp	.-272    	; 0x14ba <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15ca:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    15ce:	be cf       	rjmp	.-132    	; 0x154c <play_game+0x168>
    15d0:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    15d2:	87 2d       	mov	r24, r7
    15d4:	aa cf       	rjmp	.-172    	; 0x152a <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15d6:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    15da:	b8 cf       	rjmp	.-144    	; 0x154c <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    15dc:	df 91       	pop	r29
    15de:	cf 91       	pop	r28
    15e0:	1f 91       	pop	r17
    15e2:	0f 91       	pop	r16
    15e4:	ff 90       	pop	r15
    15e6:	ef 90       	pop	r14
    15e8:	df 90       	pop	r13
    15ea:	cf 90       	pop	r12
    15ec:	bf 90       	pop	r11
    15ee:	af 90       	pop	r10
    15f0:	9f 90       	pop	r9
    15f2:	8f 90       	pop	r8
    15f4:	7f 90       	pop	r7
    15f6:	5f 90       	pop	r5
    15f8:	4f 90       	pop	r4
    15fa:	08 95       	ret

000015fc <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    15fc:	0e 94 a3 11 	call	0x2346	; 0x2346 <clear_terminal>
	move_cursor(10,5);
    1600:	65 e0       	ldi	r22, 0x05	; 5
    1602:	8a e0       	ldi	r24, 0x0A	; 10
    1604:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1608:	86 e0       	ldi	r24, 0x06	; 6
    160a:	91 e0       	ldi	r25, 0x01	; 1
    160c:	9f 93       	push	r25
    160e:	8f 93       	push	r24
    1610:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
	move_cursor(10,7);
    1614:	67 e0       	ldi	r22, 0x07	; 7
    1616:	8a e0       	ldi	r24, 0x0A	; 10
    1618:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf("Score: %u", get_score());
    161c:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
    1620:	9f 93       	push	r25
    1622:	8f 93       	push	r24
    1624:	7f 93       	push	r23
    1626:	6f 93       	push	r22
    1628:	8b e7       	ldi	r24, 0x7B	; 123
    162a:	92 e0       	ldi	r25, 0x02	; 2
    162c:	9f 93       	push	r25
    162e:	8f 93       	push	r24
    1630:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
	display_EEPROM_high_score();
    1634:	0e 94 8e 06 	call	0xd1c	; 0xd1c <display_EEPROM_high_score>

	if (is_high_score()){
    1638:	0e 94 5e 05 	call	0xabc	; 0xabc <is_high_score>
    163c:	2d b7       	in	r18, 0x3d	; 61
    163e:	3e b7       	in	r19, 0x3e	; 62
    1640:	28 5f       	subi	r18, 0xF8	; 248
    1642:	3f 4f       	sbci	r19, 0xFF	; 255
    1644:	0f b6       	in	r0, 0x3f	; 63
    1646:	f8 94       	cli
    1648:	3e bf       	out	0x3e, r19	; 62
    164a:	0f be       	out	0x3f, r0	; 63
    164c:	2d bf       	out	0x3d, r18	; 61
    164e:	81 11       	cpse	r24, r1
		set_high_score_name();	
    1650:	0e 94 2f 06 	call	0xc5e	; 0xc5e <set_high_score_name>
	}
	move_cursor(10,9);
    1654:	69 e0       	ldi	r22, 0x09	; 9
    1656:	8a e0       	ldi	r24, 0x0A	; 10
    1658:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    165c:	88 ee       	ldi	r24, 0xE8	; 232
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	9f 93       	push	r25
    1662:	8f 93       	push	r24
    1664:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
	display_EEPROM_high_score(); 
    1668:	0e 94 8e 06 	call	0xd1c	; 0xd1c <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_pushed>
    1674:	8f 3f       	cpi	r24, 0xFF	; 255
    1676:	e1 f3       	breq	.-8      	; 0x1670 <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    1678:	0e 94 a3 11 	call	0x2346	; 0x2346 <clear_terminal>
    167c:	08 95       	ret

0000167e <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    167e:	0e 94 72 09 	call	0x12e4	; 0x12e4 <initialise_hardware>
	DDRA = 0xff;
    1682:	8f ef       	ldi	r24, 0xFF	; 255
    1684:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    1686:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    1688:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    168a:	0e 94 81 09 	call	0x1302	; 0x1302 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    168e:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <load_EEPROM_data_on_next_game>
    1692:	88 23       	and	r24, r24
    1694:	19 f0       	breq	.+6      	; 0x169c <main+0x1e>
    1696:	0e 94 45 04 	call	0x88a	; 0x88a <new_game_from_EEPROM>
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <main+0x22>
			else{new_game();}
    169c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <new_game>
		play_game();
    16a0:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    16a4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <load_EEPROM_data_on_next_game>
    16a8:	81 11       	cpse	r24, r1
    16aa:	f1 cf       	rjmp	.-30     	; 0x168e <main+0x10>
    16ac:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <handle_game_over>
    16b0:	ee cf       	rjmp	.-36     	; 0x168e <main+0x10>

000016b2 <get_rat_position>:

uint16_t RAT_WAIT_TIME = 1200;

PosnType get_rat_position(void){
	return rat_position;
}
    16b2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    16b6:	08 95       	ret

000016b8 <set_rat_at_pos>:

void set_rat_at_pos(PosnType new_pos){
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	c8 2f       	mov	r28, r24
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_BLACK);
    16be:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    16c2:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    16c6:	d8 2f       	mov	r29, r24
    16c8:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    16cc:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    16d0:	40 e0       	ldi	r20, 0x00	; 0
    16d2:	6d 2f       	mov	r22, r29
    16d4:	0e 94 19 09 	call	0x1232	; 0x1232 <ledmatrix_update_pixel>
	rat_position = new_pos;
    16d8:	c0 93 0a 03 	sts	0x030A, r28	; 0x80030a <rat_position>
	ledmatrix_update_pixel(x_position(new_pos), y_position(new_pos), COLOUR_LIGHT_YELLOW);
    16dc:	8c 2f       	mov	r24, r28
    16de:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    16e2:	d8 2f       	mov	r29, r24
    16e4:	8c 2f       	mov	r24, r28
    16e6:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    16ea:	43 e3       	ldi	r20, 0x33	; 51
    16ec:	6d 2f       	mov	r22, r29
    16ee:	0e 94 19 09 	call	0x1232	; 0x1232 <ledmatrix_update_pixel>

}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	08 95       	ret

000016f8 <is_item_at>:

uint8_t is_item_at(PosnType position){
    16f8:	cf 93       	push	r28
    16fa:	c8 2f       	mov	r28, r24
	if (is_snake_at(position) || is_food_at(position)|| is_superfood_at(position)){
    16fc:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <is_snake_at>
    1700:	81 11       	cpse	r24, r1
    1702:	0d c0       	rjmp	.+26     	; 0x171e <is_item_at+0x26>
    1704:	8c 2f       	mov	r24, r28
    1706:	0e 94 b6 07 	call	0xf6c	; 0xf6c <is_food_at>
    170a:	81 11       	cpse	r24, r1
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <is_item_at+0x2a>
    170e:	8c 2f       	mov	r24, r28
    1710:	0e 94 13 11 	call	0x2226	; 0x2226 <is_superfood_at>
		return 1;
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	81 11       	cpse	r24, r1
    1718:	05 c0       	rjmp	.+10     	; 0x1724 <is_item_at+0x2c>
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	03 c0       	rjmp	.+6      	; 0x1724 <is_item_at+0x2c>
    171e:	91 e0       	ldi	r25, 0x01	; 1
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <is_item_at+0x2c>
    1722:	91 e0       	ldi	r25, 0x01	; 1
	}
	return 0;
}
    1724:	89 2f       	mov	r24, r25
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret

0000172a <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    1732:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1736:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    173a:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    173c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1740:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    1744:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    1746:	8f ef       	ldi	r24, 0xFF	; 255
    1748:	8c 0f       	add	r24, r28
    174a:	8e 30       	cpi	r24, 0x0E	; 14
    174c:	20 f4       	brcc	.+8      	; 0x1756 <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    174e:	8f ef       	ldi	r24, 0xFF	; 255
    1750:	8d 0f       	add	r24, r29
    1752:	86 30       	cpi	r24, 0x06	; 6
    1754:	e8 f0       	brcs	.+58     	; 0x1790 <rat_jumped_the_board+0x66>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
    1756:	c1 11       	cpse	r28, r1
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <rat_jumped_the_board+0x3c>
    175a:	81 2f       	mov	r24, r17
    175c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1760:	8f 30       	cpi	r24, 0x0F	; 15
    1762:	41 f4       	brne	.+16     	; 0x1774 <rat_jumped_the_board+0x4a>
    1764:	17 c0       	rjmp	.+46     	; 0x1794 <rat_jumped_the_board+0x6a>
    1766:	cf 30       	cpi	r28, 0x0F	; 15
    1768:	29 f4       	brne	.+10     	; 0x1774 <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
    176a:	81 2f       	mov	r24, r17
    176c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1770:	88 23       	and	r24, r24
    1772:	91 f0       	breq	.+36     	; 0x1798 <rat_jumped_the_board+0x6e>
    1774:	d1 11       	cpse	r29, r1
    1776:	05 c0       	rjmp	.+10     	; 0x1782 <rat_jumped_the_board+0x58>
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    1778:	81 2f       	mov	r24, r17
    177a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	0e c0       	rjmp	.+28     	; 0x179e <rat_jumped_the_board+0x74>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    1782:	d7 30       	cpi	r29, 0x07	; 7
    1784:	59 f4       	brne	.+22     	; 0x179c <rat_jumped_the_board+0x72>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
    1786:	81 2f       	mov	r24, r17
    1788:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
			return 1; 
		}
	return 1; 
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	07 c0       	rjmp	.+14     	; 0x179e <rat_jumped_the_board+0x74>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	05 c0       	rjmp	.+10     	; 0x179e <rat_jumped_the_board+0x74>
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	03 c0       	rjmp	.+6      	; 0x179e <rat_jumped_the_board+0x74>
    1798:	81 e0       	ldi	r24, 0x01	; 1
    179a:	01 c0       	rjmp	.+2      	; 0x179e <rat_jumped_the_board+0x74>
		}
	return 1; 
    179c:	81 e0       	ldi	r24, 0x01	; 1
}
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	1f 91       	pop	r17
    17a4:	08 95       	ret

000017a6 <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    17a6:	0f 93       	push	r16
    17a8:	1f 93       	push	r17
    17aa:	cf 93       	push	r28
    17ac:	df 93       	push	r29
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    17ae:	60 e0       	ldi	r22, 0x00	; 0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    17b6:	08 2f       	mov	r16, r24
	uint8_t move_option = rand()%4; 
    17b8:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
    17bc:	83 70       	andi	r24, 0x03	; 3
    17be:	90 78       	andi	r25, 0x80	; 128
    17c0:	99 23       	and	r25, r25
    17c2:	24 f4       	brge	.+8      	; 0x17cc <move_rat+0x26>
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	8c 6f       	ori	r24, 0xFC	; 252
    17c8:	9f 6f       	ori	r25, 0xFF	; 255
    17ca:	01 96       	adiw	r24, 0x01	; 1
	return 0;
}

void move_rat(void){
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <move_rat+0x3c>
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
			break;
			
		}
		attempts ++;
		move_option = rand() %4; 
    17d0:	ce 01       	movw	r24, r28
    17d2:	83 70       	andi	r24, 0x03	; 3
    17d4:	90 78       	andi	r25, 0x80	; 128
    17d6:	99 23       	and	r25, r25
    17d8:	24 f4       	brge	.+8      	; 0x17e2 <move_rat+0x3c>
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	8c 6f       	ori	r24, 0xFC	; 252
    17de:	9f 6f       	ori	r25, 0xFF	; 255
    17e0:	01 96       	adiw	r24, 0x01	; 1
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    17e2:	81 30       	cpi	r24, 0x01	; 1
    17e4:	a9 f0       	breq	.+42     	; 0x1810 <move_rat+0x6a>
    17e6:	28 f0       	brcs	.+10     	; 0x17f2 <move_rat+0x4c>
    17e8:	82 30       	cpi	r24, 0x02	; 2
    17ea:	09 f1       	breq	.+66     	; 0x182e <move_rat+0x88>
    17ec:	83 30       	cpi	r24, 0x03	; 3
    17ee:	71 f1       	breq	.+92     	; 0x184c <move_rat+0xa6>
    17f0:	3b c0       	rjmp	.+118    	; 0x1868 <move_rat+0xc2>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    17f2:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    17f6:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    17fa:	c8 2f       	mov	r28, r24
    17fc:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1800:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1804:	61 e0       	ldi	r22, 0x01	; 1
    1806:	6c 0f       	add	r22, r28
    1808:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    180c:	08 2f       	mov	r16, r24
			break; 
    180e:	2c c0       	rjmp	.+88     	; 0x1868 <move_rat+0xc2>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    1810:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1814:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    1818:	c8 2f       	mov	r28, r24
    181a:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    181e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1822:	6f ef       	ldi	r22, 0xFF	; 255
    1824:	6c 0f       	add	r22, r28
    1826:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    182a:	08 2f       	mov	r16, r24
			break;
    182c:	1d c0       	rjmp	.+58     	; 0x1868 <move_rat+0xc2>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    182e:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1832:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    1836:	c8 2f       	mov	r28, r24
    1838:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    183c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1840:	6c 2f       	mov	r22, r28
    1842:	8f 5f       	subi	r24, 0xFF	; 255
    1844:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    1848:	08 2f       	mov	r16, r24
			break;
    184a:	0e c0       	rjmp	.+28     	; 0x1868 <move_rat+0xc2>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    184c:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1850:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    1854:	c8 2f       	mov	r28, r24
    1856:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    185a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    185e:	6c 2f       	mov	r22, r28
    1860:	81 50       	subi	r24, 0x01	; 1
    1862:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    1866:	08 2f       	mov	r16, r24
			break;
			
		}
		attempts ++;
    1868:	1f 5f       	subi	r17, 0xFF	; 255
		move_option = rand() %4; 
    186a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
    186e:	ec 01       	movw	r28, r24
		
	} while ((attempts <4) && (is_item_at(new_rat_pos) || (rat_jumped_the_board(new_rat_pos))));
    1870:	14 30       	cpi	r17, 0x04	; 4
    1872:	61 f0       	breq	.+24     	; 0x188c <move_rat+0xe6>
    1874:	80 2f       	mov	r24, r16
    1876:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <is_item_at>
    187a:	81 11       	cpse	r24, r1
    187c:	a9 cf       	rjmp	.-174    	; 0x17d0 <move_rat+0x2a>
    187e:	80 2f       	mov	r24, r16
    1880:	0e 94 95 0b 	call	0x172a	; 0x172a <rat_jumped_the_board>
    1884:	81 11       	cpse	r24, r1
    1886:	a4 cf       	rjmp	.-184    	; 0x17d0 <move_rat+0x2a>
	
	if (attempts<=4){
    1888:	15 30       	cpi	r17, 0x05	; 5
    188a:	18 f4       	brcc	.+6      	; 0x1892 <move_rat+0xec>
		set_rat_at_pos(new_rat_pos); 
    188c:	80 2f       	mov	r24, r16
    188e:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <set_rat_at_pos>
	}
	}
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	08 95       	ret

0000189c <is_rat_at>:
		}
	return 1; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    189c:	91 e0       	ldi	r25, 0x01	; 1
    189e:	20 91 0a 03 	lds	r18, 0x030A	; 0x80030a <rat_position>
    18a2:	28 13       	cpse	r18, r24
    18a4:	90 e0       	ldi	r25, 0x00	; 0
}
    18a6:	89 2f       	mov	r24, r25
    18a8:	08 95       	ret

000018aa <add_new_rat_position>:

void add_new_rat_position(void){
    18aa:	1f 93       	push	r17
    18ac:	cf 93       	push	r28
    18ae:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    18b0:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
    18b4:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    18b6:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
        test_position = position(x,y);
    18ba:	bc 01       	movw	r22, r24
    18bc:	67 70       	andi	r22, 0x07	; 7
    18be:	70 78       	andi	r23, 0x80	; 128
    18c0:	77 23       	and	r23, r23
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <add_new_rat_position+0x26>
    18c4:	61 50       	subi	r22, 0x01	; 1
    18c6:	71 09       	sbc	r23, r1
    18c8:	68 6f       	ori	r22, 0xF8	; 248
    18ca:	7f 6f       	ori	r23, 0xFF	; 255
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	ce 01       	movw	r24, r28
    18d2:	8f 70       	andi	r24, 0x0F	; 15
    18d4:	90 78       	andi	r25, 0x80	; 128
    18d6:	99 23       	and	r25, r25
    18d8:	24 f4       	brge	.+8      	; 0x18e2 <add_new_rat_position+0x38>
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	80 6f       	ori	r24, 0xF0	; 240
    18de:	9f 6f       	ori	r25, 0xFF	; 255
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    18e6:	c8 2f       	mov	r28, r24
    18e8:	13 e6       	ldi	r17, 0x63	; 99
    18ea:	1e c0       	rjmp	.+60     	; 0x1928 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    18ec:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
    18f0:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    18f2:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
        test_position = position(x,y);
    18f6:	bc 01       	movw	r22, r24
    18f8:	67 70       	andi	r22, 0x07	; 7
    18fa:	70 78       	andi	r23, 0x80	; 128
    18fc:	77 23       	and	r23, r23
    18fe:	34 f4       	brge	.+12     	; 0x190c <add_new_rat_position+0x62>
    1900:	61 50       	subi	r22, 0x01	; 1
    1902:	71 09       	sbc	r23, r1
    1904:	68 6f       	ori	r22, 0xF8	; 248
    1906:	7f 6f       	ori	r23, 0xFF	; 255
    1908:	6f 5f       	subi	r22, 0xFF	; 255
    190a:	7f 4f       	sbci	r23, 0xFF	; 255
    190c:	ce 01       	movw	r24, r28
    190e:	8f 70       	andi	r24, 0x0F	; 15
    1910:	90 78       	andi	r25, 0x80	; 128
    1912:	99 23       	and	r25, r25
    1914:	24 f4       	brge	.+8      	; 0x191e <add_new_rat_position+0x74>
    1916:	01 97       	sbiw	r24, 0x01	; 1
    1918:	80 6f       	ori	r24, 0xF0	; 240
    191a:	9f 6f       	ori	r25, 0xFF	; 255
    191c:	01 96       	adiw	r24, 0x01	; 1
    191e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    1922:	c8 2f       	mov	r28, r24
    1924:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1926:	91 f0       	breq	.+36     	; 0x194c <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1928:	8c 2f       	mov	r24, r28
    192a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    192e:	81 11       	cpse	r24, r1
    1930:	dd cf       	rjmp	.-70     	; 0x18ec <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    1932:	8c 2f       	mov	r24, r28
    1934:	0e 94 b6 07 	call	0xf6c	; 0xf6c <is_food_at>
    1938:	81 11       	cpse	r24, r1
    193a:	d8 cf       	rjmp	.-80     	; 0x18ec <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    193c:	0e 94 10 11 	call	0x2220	; 0x2220 <get_superfood_position>
    1940:	8c 17       	cp	r24, r28
    1942:	a1 f2       	breq	.-88     	; 0x18ec <add_new_rat_position+0x42>
    1944:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    1948:	8c 17       	cp	r24, r28
    194a:	81 f2       	breq	.-96     	; 0x18ec <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    194c:	c0 93 0a 03 	sts	0x030A, r28	; 0x80030a <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    1950:	8c 2f       	mov	r24, r28
    1952:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    1956:	c8 2f       	mov	r28, r24
    1958:	80 91 0a 03 	lds	r24, 0x030A	; 0x80030a <rat_position>
    195c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1960:	4c e3       	ldi	r20, 0x3C	; 60
    1962:	6c 2f       	mov	r22, r28
    1964:	0e 94 19 09 	call	0x1232	; 0x1232 <ledmatrix_update_pixel>
}
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	08 95       	ret

00001970 <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    1970:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    1974:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    1978:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	50 e0       	ldi	r21, 0x00	; 0
    1980:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__udivmodsi4>
    1984:	21 e0       	ldi	r18, 0x01	; 1
    1986:	67 2b       	or	r22, r23
    1988:	68 2b       	or	r22, r24
    198a:	69 2b       	or	r22, r25
    198c:	09 f0       	breq	.+2      	; 0x1990 <is_time_to_move_rat+0x20>
    198e:	20 e0       	ldi	r18, 0x00	; 0
}
    1990:	82 2f       	mov	r24, r18
    1992:	08 95       	ret

00001994 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    1994:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <score>
    1998:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <score+0x1>
    199c:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <score+0x2>
    19a0:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <score+0x3>
    19a4:	08 95       	ret

000019a6 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    19a6:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <score>
    19aa:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <score+0x1>
    19ae:	60 91 b3 02 	lds	r22, 0x02B3	; 0x8002b3 <score+0x2>
    19b2:	70 91 b4 02 	lds	r23, 0x02B4	; 0x8002b4 <score+0x3>
    19b6:	48 0f       	add	r20, r24
    19b8:	59 1f       	adc	r21, r25
    19ba:	61 1d       	adc	r22, r1
    19bc:	71 1d       	adc	r23, r1
    19be:	40 93 b1 02 	sts	0x02B1, r20	; 0x8002b1 <score>
    19c2:	50 93 b2 02 	sts	0x02B2, r21	; 0x8002b2 <score+0x1>
    19c6:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <score+0x2>
    19ca:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <score+0x3>
    19ce:	08 95       	ret

000019d0 <get_score>:
}

uint32_t get_score(void) {
	return score;
    19d0:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <score>
    19d4:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <score+0x1>
    19d8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <score+0x2>
    19dc:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <score+0x3>
}
    19e0:	08 95       	ret

000019e2 <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    19e2:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <score>
    19e6:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <score+0x1>
    19ea:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <score+0x2>
    19ee:	90 93 b4 02 	sts	0x02B4, r25	; 0x8002b4 <score+0x3>
    19f2:	08 95       	ret

000019f4 <score_length>:
}

uint8_t score_length(void){
	return (score == 0 ? 1 : (int)(log10(score)+1)); 
    19f4:	60 91 b1 02 	lds	r22, 0x02B1	; 0x8002b1 <score>
    19f8:	70 91 b2 02 	lds	r23, 0x02B2	; 0x8002b2 <score+0x1>
    19fc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <score+0x2>
    1a00:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <score+0x3>
    1a04:	61 15       	cp	r22, r1
    1a06:	71 05       	cpc	r23, r1
    1a08:	81 05       	cpc	r24, r1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	71 f0       	breq	.+28     	; 0x1a2a <score_length+0x36>
    1a0e:	0e 94 b5 13 	call	0x276a	; 0x276a <__floatunsisf>
    1a12:	0e 94 43 14 	call	0x2886	; 0x2886 <log10>
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	40 e8       	ldi	r20, 0x80	; 128
    1a1c:	5f e3       	ldi	r21, 0x3F	; 63
    1a1e:	0e 94 13 13 	call	0x2626	; 0x2626 <__addsf3>
    1a22:	0e 94 7f 13 	call	0x26fe	; 0x26fe <__fixsfsi>
    1a26:	86 2f       	mov	r24, r22
    1a28:	08 95       	ret
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
}
    1a2c:	08 95       	ret

00001a2e <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1a2e:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    1a32:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <display_string+0x1>
    1a36:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <display_string>
	next_col_ptr = 0;
    1a3a:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <next_col_ptr+0x1>
    1a3e:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <next_col_ptr>
	next_char_to_display = 0;
    1a42:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <next_char_to_display+0x1>
    1a46:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <next_char_to_display>
    1a4a:	08 95       	ret

00001a4c <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	28 97       	sbiw	r28, 0x08	; 8
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1a64:	e0 91 ba 02 	lds	r30, 0x02BA	; 0x8002ba <next_col_ptr>
    1a68:	f0 91 bb 02 	lds	r31, 0x02BB	; 0x8002bb <next_col_ptr+0x1>
    1a6c:	30 97       	sbiw	r30, 0x00	; 0
    1a6e:	81 f0       	breq	.+32     	; 0x1a90 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1a70:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1a72:	10 ff       	sbrs	r17, 0
    1a74:	06 c0       	rjmp	.+12     	; 0x1a82 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1a76:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <next_col_ptr+0x1>
    1a7a:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a7e:	00 e0       	ldi	r16, 0x00	; 0
    1a80:	6b c0       	rjmp	.+214    	; 0x1b58 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1a82:	31 96       	adiw	r30, 0x01	; 1
    1a84:	f0 93 bb 02 	sts	0x02BB, r31	; 0x8002bb <next_col_ptr+0x1>
    1a88:	e0 93 ba 02 	sts	0x02BA, r30	; 0x8002ba <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a8c:	00 e0       	ldi	r16, 0x00	; 0
    1a8e:	64 c0       	rjmp	.+200    	; 0x1b58 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1a90:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <next_char_to_display>
    1a94:	f0 91 b7 02 	lds	r31, 0x02B7	; 0x8002b7 <next_char_to_display+0x1>
    1a98:	30 97       	sbiw	r30, 0x00	; 0
    1a9a:	09 f4       	brne	.+2      	; 0x1a9e <scroll_display+0x52>
    1a9c:	49 c0       	rjmp	.+146    	; 0x1b30 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1a9e:	cf 01       	movw	r24, r30
    1aa0:	01 96       	adiw	r24, 0x01	; 1
    1aa2:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <next_char_to_display+0x1>
    1aa6:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <next_char_to_display>
    1aaa:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1aac:	e1 11       	cpse	r30, r1
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1ab0:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <next_char_to_display+0x1>
    1ab4:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <next_char_to_display>
			shift_countdown = 16;
    1ab8:	80 e1       	ldi	r24, 0x10	; 16
    1aba:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1abe:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ac0:	10 e0       	ldi	r17, 0x00	; 0
    1ac2:	4a c0       	rjmp	.+148    	; 0x1b58 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1ac4:	8f e9       	ldi	r24, 0x9F	; 159
    1ac6:	8e 0f       	add	r24, r30
    1ac8:	8a 31       	cpi	r24, 0x1A	; 26
    1aca:	70 f4       	brcc	.+28     	; 0x1ae8 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	ee 0f       	add	r30, r30
    1ad0:	ff 1f       	adc	r31, r31
    1ad2:	ee 59       	subi	r30, 0x9E	; 158
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	85 91       	lpm	r24, Z+
    1ad8:	94 91       	lpm	r25, Z
    1ada:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <next_col_ptr+0x1>
    1ade:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ae2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ae4:	10 e0       	ldi	r17, 0x00	; 0
    1ae6:	38 c0       	rjmp	.+112    	; 0x1b58 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1ae8:	8f eb       	ldi	r24, 0xBF	; 191
    1aea:	8e 0f       	add	r24, r30
    1aec:	8a 31       	cpi	r24, 0x1A	; 26
    1aee:	70 f4       	brcc	.+28     	; 0x1b0c <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	ee 0f       	add	r30, r30
    1af4:	ff 1f       	adc	r31, r31
    1af6:	ee 55       	subi	r30, 0x5E	; 94
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	85 91       	lpm	r24, Z+
    1afc:	94 91       	lpm	r25, Z
    1afe:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <next_col_ptr+0x1>
    1b02:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b06:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	26 c0       	rjmp	.+76     	; 0x1b58 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1b0c:	80 ed       	ldi	r24, 0xD0	; 208
    1b0e:	8e 0f       	add	r24, r30
    1b10:	8a 30       	cpi	r24, 0x0A	; 10
    1b12:	00 f5       	brcc	.+64     	; 0x1b54 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e0 55       	subi	r30, 0x50	; 80
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	85 91       	lpm	r24, Z+
    1b20:	94 91       	lpm	r25, Z
    1b22:	90 93 bb 02 	sts	0x02BB, r25	; 0x8002bb <next_col_ptr+0x1>
    1b26:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b2a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b2c:	10 e0       	ldi	r17, 0x00	; 0
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1b30:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <display_string>
    1b34:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b38:	01 e0       	ldi	r16, 0x01	; 1
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	09 f0       	breq	.+2      	; 0x1b40 <scroll_display+0xf4>
    1b3e:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1b40:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <next_char_to_display+0x1>
    1b44:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <next_char_to_display>
		display_string = 0;
    1b48:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <display_string+0x1>
    1b4c:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b50:	10 e0       	ldi	r17, 0x00	; 0
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b54:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b56:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1b58:	0e 94 55 09 	call	0x12aa	; 0x12aa <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1b5c:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    1b60:	fe 01       	movw	r30, r28
    1b62:	38 96       	adiw	r30, 0x08	; 8
    1b64:	ce 01       	movw	r24, r28
    1b66:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1b68:	11 23       	and	r17, r17
    1b6a:	14 f4       	brge	.+4      	; 0x1b70 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1b6c:	20 83       	st	Z, r18
    1b6e:	01 c0       	rjmp	.+2      	; 0x1b72 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1b70:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1b72:	11 0f       	add	r17, r17
    1b74:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1b76:	e8 17       	cp	r30, r24
    1b78:	f9 07       	cpc	r31, r25
    1b7a:	b1 f7       	brne	.-20     	; 0x1b68 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1b7c:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1b7e:	be 01       	movw	r22, r28
    1b80:	6f 5f       	subi	r22, 0xFF	; 255
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f e0       	ldi	r24, 0x0F	; 15
    1b86:	0e 94 38 09 	call	0x1270	; 0x1270 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1b8a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <shift_countdown.1854>
    1b8e:	88 23       	and	r24, r24
    1b90:	89 f0       	breq	.+34     	; 0x1bb4 <scroll_display+0x168>
		shift_countdown--;
    1b92:	81 50       	subi	r24, 0x01	; 1
    1b94:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1b98:	00 23       	and	r16, r16
    1b9a:	11 f0       	breq	.+4      	; 0x1ba0 <scroll_display+0x154>
    1b9c:	88 23       	and	r24, r24
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <scroll_display+0x158>
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <scroll_display+0x15e>
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	01 c0       	rjmp	.+2      	; 0x1baa <scroll_display+0x15e>
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1baa:	81 e0       	ldi	r24, 0x01	; 1
    1bac:	99 23       	and	r25, r25
    1bae:	29 f0       	breq	.+10     	; 0x1bba <scroll_display+0x16e>
    1bb0:	80 e0       	ldi	r24, 0x00	; 0
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1bb4:	00 23       	and	r16, r16
    1bb6:	a1 f3       	breq	.-24     	; 0x1ba0 <scroll_display+0x154>
    1bb8:	f7 cf       	rjmp	.-18     	; 0x1ba8 <scroll_display+0x15c>
	return !finished;
}
    1bba:	28 96       	adiw	r28, 0x08	; 8
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	08 95       	ret

00001bd0 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1bd0:	cf 93       	push	r28
    1bd2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1bd4:	8a 30       	cpi	r24, 0x0A	; 10
    1bd6:	19 f4       	brne	.+6      	; 0x1bde <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1bd8:	8d e0       	ldi	r24, 0x0D	; 13
    1bda:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1bde:	9f b7       	in	r25, 0x3f	; 63
    1be0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1be4:	99 23       	and	r25, r25
    1be6:	29 f1       	breq	.+74     	; 0x1c32 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1be8:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1bec:	8f 3f       	cpi	r24, 0xFF	; 255
    1bee:	d1 f3       	breq	.-12     	; 0x1be4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1bf0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1bf2:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <out_insert_pos>
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	8e 0f       	add	r24, r30
    1bfa:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <out_insert_pos>
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	e3 5f       	subi	r30, 0xF3	; 243
    1c02:	fc 4f       	sbci	r31, 0xFC	; 252
    1c04:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1c06:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1c0a:	8f 5f       	subi	r24, 0xFF	; 255
    1c0c:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1c10:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <out_insert_pos>
    1c14:	8f 3f       	cpi	r24, 0xFF	; 255
    1c16:	11 f4       	brne	.+4      	; 0x1c1c <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1c18:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1c1c:	e1 ec       	ldi	r30, 0xC1	; 193
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 62       	ori	r24, 0x20	; 32
    1c24:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1c26:	99 23       	and	r25, r25
    1c28:	39 f0       	breq	.+14     	; 0x1c38 <uart_put_char+0x68>
		sei();
    1c2a:	78 94       	sei
	}
	return 0;
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	05 c0       	rjmp	.+10     	; 0x1c3c <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
}
    1c3c:	cf 91       	pop	r28
    1c3e:	08 95       	ret

00001c40 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1c40:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1c44:	88 23       	and	r24, r24
    1c46:	e1 f3       	breq	.-8      	; 0x1c40 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1c48:	2f b7       	in	r18, 0x3f	; 63
    1c4a:	20 78       	andi	r18, 0x80	; 128
	cli();
    1c4c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1c4e:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <input_insert_pos>
    1c52:	30 91 1e 04 	lds	r19, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	83 1b       	sub	r24, r19
    1c5a:	91 09       	sbc	r25, r1
    1c5c:	5a f4       	brpl	.+22     	; 0x1c74 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c5e:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <input_insert_pos>
    1c62:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	e8 1b       	sub	r30, r24
    1c6a:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c6c:	e3 5e       	subi	r30, 0xE3	; 227
    1c6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1c70:	80 81       	ld	r24, Z
    1c72:	0a c0       	rjmp	.+20     	; 0x1c88 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1c74:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <input_insert_pos>
    1c78:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	e8 1b       	sub	r30, r24
    1c80:	f1 09       	sbc	r31, r1
    1c82:	e3 5f       	subi	r30, 0xF3	; 243
    1c84:	fb 4f       	sbci	r31, 0xFB	; 251
    1c86:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1c88:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1c8c:	91 50       	subi	r25, 0x01	; 1
    1c8e:	90 93 1e 04 	sts	0x041E, r25	; 0x80041e <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1c92:	22 23       	and	r18, r18
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <uart_get_char+0x58>
		sei();
    1c96:	78 94       	sei
	}	
	return c;
}
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	08 95       	ret

00001c9c <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1c9c:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <out_insert_pos>
	bytes_in_out_buffer = 0;
    1ca0:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <bytes_in_out_buffer>
	input_insert_pos = 0;
    1ca4:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <input_insert_pos>
	bytes_in_input_buffer = 0;
    1ca8:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <bytes_in_input_buffer>
	input_overrun = 0;
    1cac:	10 92 1d 04 	sts	0x041D, r1	; 0x80041d <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1cb0:	40 93 bc 02 	sts	0x02BC, r20	; 0x8002bc <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	aa 1f       	adc	r26, r26
    1cbe:	bb 1f       	adc	r27, r27
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	aa 1f       	adc	r26, r26
    1cc6:	bb 1f       	adc	r27, r27
    1cc8:	9c 01       	movw	r18, r24
    1cca:	ad 01       	movw	r20, r26
    1ccc:	22 0f       	add	r18, r18
    1cce:	33 1f       	adc	r19, r19
    1cd0:	44 1f       	adc	r20, r20
    1cd2:	55 1f       	adc	r21, r21
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	72 e1       	ldi	r23, 0x12	; 18
    1cd8:	8a e7       	ldi	r24, 0x7A	; 122
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__divmodsi4>
    1ce0:	ba 01       	movw	r22, r20
    1ce2:	a9 01       	movw	r20, r18
    1ce4:	4f 5f       	subi	r20, 0xFF	; 255
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	6f 4f       	sbci	r22, 0xFF	; 255
    1cea:	7f 4f       	sbci	r23, 0xFF	; 255
    1cec:	db 01       	movw	r26, r22
    1cee:	ca 01       	movw	r24, r20
    1cf0:	1a f4       	brpl	.+6      	; 0x1cf8 <init_serial_stdio+0x5c>
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	b1 1d       	adc	r27, r1
    1cf8:	b5 95       	asr	r27
    1cfa:	a7 95       	ror	r26
    1cfc:	97 95       	ror	r25
    1cfe:	87 95       	ror	r24
    1d00:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1d02:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1d06:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1d0a:	e1 ec       	ldi	r30, 0xC1	; 193
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	88 e1       	ldi	r24, 0x18	; 24
    1d10:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1d12:	80 81       	ld	r24, Z
    1d14:	80 68       	ori	r24, 0x80	; 128
    1d16:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1d18:	e1 e2       	ldi	r30, 0x21	; 33
    1d1a:	f4 e0       	ldi	r31, 0x04	; 4
    1d1c:	8f e0       	ldi	r24, 0x0F	; 15
    1d1e:	91 e0       	ldi	r25, 0x01	; 1
    1d20:	93 83       	std	Z+3, r25	; 0x03
    1d22:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
    1d28:	08 95       	ret

00001d2a <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1d2a:	90 91 1e 04 	lds	r25, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	91 11       	cpse	r25, r1
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <serial_input_available+0xc>
    1d34:	80 e0       	ldi	r24, 0x00	; 0
}
    1d36:	08 95       	ret

00001d38 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1d38:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <input_insert_pos>
	bytes_in_input_buffer = 0;
    1d3c:	10 92 1e 04 	sts	0x041E, r1	; 0x80041e <bytes_in_input_buffer>
    1d40:	08 95       	ret

00001d42 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1d42:	1f 92       	push	r1
    1d44:	0f 92       	push	r0
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	0f 92       	push	r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	2f 93       	push	r18
    1d4e:	8f 93       	push	r24
    1d50:	9f 93       	push	r25
    1d52:	ef 93       	push	r30
    1d54:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1d56:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1d5a:	88 23       	and	r24, r24
    1d5c:	29 f1       	breq	.+74     	; 0x1da8 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1d5e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <out_insert_pos>
    1d62:	20 91 0c 03 	lds	r18, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	82 1b       	sub	r24, r18
    1d6a:	91 09       	sbc	r25, r1
    1d6c:	5a f4       	brpl	.+22     	; 0x1d84 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d6e:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <out_insert_pos>
    1d72:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	e8 1b       	sub	r30, r24
    1d7a:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d7c:	e4 5f       	subi	r30, 0xF4	; 244
    1d7e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d80:	90 81       	ld	r25, Z
    1d82:	0a c0       	rjmp	.+20     	; 0x1d98 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1d84:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <out_insert_pos>
    1d88:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	e8 1b       	sub	r30, r24
    1d90:	f1 09       	sbc	r31, r1
    1d92:	e3 5f       	subi	r30, 0xF3	; 243
    1d94:	fc 4f       	sbci	r31, 0xFC	; 252
    1d96:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1d98:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1d9c:	81 50       	subi	r24, 0x01	; 1
    1d9e:	80 93 0c 03 	sts	0x030C, r24	; 0x80030c <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1da2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1da6:	05 c0       	rjmp	.+10     	; 0x1db2 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1da8:	e1 ec       	ldi	r30, 0xC1	; 193
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	8f 7d       	andi	r24, 0xDF	; 223
    1db0:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1db2:	ff 91       	pop	r31
    1db4:	ef 91       	pop	r30
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1dc6:	1f 92       	push	r1
    1dc8:	0f 92       	push	r0
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	0f 92       	push	r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	2f 93       	push	r18
    1dd2:	3f 93       	push	r19
    1dd4:	4f 93       	push	r20
    1dd6:	5f 93       	push	r21
    1dd8:	6f 93       	push	r22
    1dda:	7f 93       	push	r23
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	af 93       	push	r26
    1de2:	bf 93       	push	r27
    1de4:	cf 93       	push	r28
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1dea:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1dee:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <do_echo>
    1df2:	88 23       	and	r24, r24
    1df4:	49 f0       	breq	.+18     	; 0x1e08 <__vector_20+0x42>
    1df6:	80 91 0c 03 	lds	r24, 0x030C	; 0x80030c <bytes_in_out_buffer>
    1dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    1dfc:	29 f0       	breq	.+10     	; 0x1e08 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	8c 2f       	mov	r24, r28
    1e04:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1e08:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1e0c:	80 31       	cpi	r24, 0x10	; 16
    1e0e:	20 f0       	brcs	.+8      	; 0x1e18 <__vector_20+0x52>
		input_overrun = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	80 93 1d 04 	sts	0x041D, r24	; 0x80041d <input_overrun>
    1e16:	18 c0       	rjmp	.+48     	; 0x1e48 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1e18:	cd 30       	cpi	r28, 0x0D	; 13
    1e1a:	09 f4       	brne	.+2      	; 0x1e1e <__vector_20+0x58>
			c = '\n';
    1e1c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1e1e:	e0 91 0c 04 	lds	r30, 0x040C	; 0x80040c <input_insert_pos>
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	8e 0f       	add	r24, r30
    1e26:	80 93 0c 04 	sts	0x040C, r24	; 0x80040c <input_insert_pos>
    1e2a:	f0 e0       	ldi	r31, 0x00	; 0
    1e2c:	e3 5f       	subi	r30, 0xF3	; 243
    1e2e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e30:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1e32:	80 91 1e 04 	lds	r24, 0x041E	; 0x80041e <bytes_in_input_buffer>
    1e36:	8f 5f       	subi	r24, 0xFF	; 255
    1e38:	80 93 1e 04 	sts	0x041E, r24	; 0x80041e <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1e3c:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <input_insert_pos>
    1e40:	80 31       	cpi	r24, 0x10	; 16
    1e42:	11 f4       	brne	.+4      	; 0x1e48 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1e44:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <input_insert_pos>
		}
	}
}
    1e48:	ff 91       	pop	r31
    1e4a:	ef 91       	pop	r30
    1e4c:	cf 91       	pop	r28
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti

00001e6c <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <snakeLength>
	snakeTailIndex = 0;
    1e78:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <snakeTailIndex>
	snakeHeadIndex = 1;
    1e7c:	c1 e0       	ldi	r28, 0x01	; 1
    1e7e:	c0 93 c0 02 	sts	0x02C0, r28	; 0x8002c0 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    1e8a:	02 ec       	ldi	r16, 0xC2	; 194
    1e8c:	12 e0       	ldi	r17, 0x02	; 2
    1e8e:	f8 01       	movw	r30, r16
    1e90:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1e92:	61 e0       	ldi	r22, 0x01	; 1
    1e94:	82 e0       	ldi	r24, 0x02	; 2
    1e96:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    1e9a:	f8 01       	movw	r30, r16
    1e9c:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1e9e:	c0 93 be 02 	sts	0x02BE, r28	; 0x8002be <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1ea2:	c0 93 bd 02 	sts	0x02BD, r28	; 0x8002bd <nextSnakeDirn>
}
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	08 95       	ret

00001eae <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1eae:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <snakeHeadIndex>
    1eb2:	0e 2e       	mov	r0, r30
    1eb4:	00 0c       	add	r0, r0
    1eb6:	ff 0b       	sbc	r31, r31
    1eb8:	ee 53       	subi	r30, 0x3E	; 62
    1eba:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ebc:	80 81       	ld	r24, Z
    1ebe:	08 95       	ret

00001ec0 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1ec0:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <curSnakeDirn>
	nextSnakeDirn = dirn;
    1ec4:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <nextSnakeDirn>
    1ec8:	08 95       	ret

00001eca <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1eca:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <snakeTailIndex>
    1ece:	0e 2e       	mov	r0, r30
    1ed0:	00 0c       	add	r0, r0
    1ed2:	ff 0b       	sbc	r31, r31
    1ed4:	ee 53       	subi	r30, 0x3E	; 62
    1ed6:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ed8:	80 81       	ld	r24, Z
    1eda:	08 95       	ret

00001edc <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1edc:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <snakeLength>
    1ee0:	08 95       	ret

00001ee2 <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1ee2:	e8 2f       	mov	r30, r24
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	ee 53       	subi	r30, 0x3E	; 62
    1ee8:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1eea:	80 81       	ld	r24, Z
    1eec:	08 95       	ret

00001eee <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1eee:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <snakeLength>
    1ef2:	08 95       	ret

00001ef4 <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1ef4:	e6 2f       	mov	r30, r22
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	ee 53       	subi	r30, 0x3E	; 62
    1efa:	fd 4f       	sbci	r31, 0xFD	; 253
    1efc:	80 83       	st	Z, r24
    1efe:	08 95       	ret

00001f00 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1f00:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <snakeHeadIndex>
    1f04:	08 95       	ret

00001f06 <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1f06:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <snakeTailIndex>
    1f0a:	08 95       	ret

00001f0c <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1f0c:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <snakeHeadIndex>
    1f10:	08 95       	ret

00001f12 <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1f12:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <snakeTailIndex>
    1f16:	08 95       	ret

00001f18 <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1f18:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <curSnakeDirn>
    1f1c:	08 95       	ret

00001f1e <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1f1e:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <snakeTailIndex>
    1f22:	e9 2f       	mov	r30, r25
    1f24:	09 2e       	mov	r0, r25
    1f26:	00 0c       	add	r0, r0
    1f28:	ff 0b       	sbc	r31, r31
    1f2a:	ee 53       	subi	r30, 0x3E	; 62
    1f2c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f2e:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1f30:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1f32:	91 32       	cpi	r25, 0x21	; 33
    1f34:	19 f0       	breq	.+6      	; 0x1f3c <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1f36:	90 93 bf 02 	sts	0x02BF, r25	; 0x8002bf <snakeTailIndex>
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1f3c:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <snakeTailIndex>
	}
	snakeLength--;
    1f40:	90 91 c1 02 	lds	r25, 0x02C1	; 0x8002c1 <snakeLength>
    1f44:	91 50       	subi	r25, 0x01	; 1
    1f46:	90 93 c1 02 	sts	0x02C1, r25	; 0x8002c1 <snakeLength>
	
	return prev_tail_position;
}
    1f4a:	08 95       	ret

00001f4c <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1f4c:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <curSnakeDirn>
    1f50:	91 30       	cpi	r25, 0x01	; 1
    1f52:	a9 f0       	breq	.+42     	; 0x1f7e <set_snake_dirn+0x32>
    1f54:	28 f0       	brcs	.+10     	; 0x1f60 <set_snake_dirn+0x14>
    1f56:	92 30       	cpi	r25, 0x02	; 2
    1f58:	41 f0       	breq	.+16     	; 0x1f6a <set_snake_dirn+0x1e>
    1f5a:	93 30       	cpi	r25, 0x03	; 3
    1f5c:	59 f0       	breq	.+22     	; 0x1f74 <set_snake_dirn+0x28>
    1f5e:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1f60:	82 30       	cpi	r24, 0x02	; 2
    1f62:	89 f0       	breq	.+34     	; 0x1f86 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f64:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <nextSnakeDirn>
    1f68:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1f6a:	88 23       	and	r24, r24
    1f6c:	61 f0       	breq	.+24     	; 0x1f86 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f6e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <nextSnakeDirn>
    1f72:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	39 f0       	breq	.+14     	; 0x1f86 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f78:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <nextSnakeDirn>
    1f7c:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1f7e:	83 30       	cpi	r24, 0x03	; 3
    1f80:	11 f0       	breq	.+4      	; 0x1f86 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f82:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <nextSnakeDirn>
    1f86:	08 95       	ret

00001f88 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1f88:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1f8c:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1f90:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1f92:	0d c0       	rjmp	.+26     	; 0x1fae <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1f94:	e9 2f       	mov	r30, r25
    1f96:	09 2e       	mov	r0, r25
    1f98:	00 0c       	add	r0, r0
    1f9a:	ff 0b       	sbc	r31, r31
    1f9c:	ee 53       	subi	r30, 0x3E	; 62
    1f9e:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa0:	20 81       	ld	r18, Z
    1fa2:	28 17       	cp	r18, r24
    1fa4:	89 f0       	breq	.+34     	; 0x1fc8 <is_snake_at+0x40>
    1fa6:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1fa8:	91 32       	cpi	r25, 0x21	; 33
    1faa:	0c f0       	brlt	.+2      	; 0x1fae <is_snake_at+0x26>
			index = 0;
    1fac:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1fae:	93 13       	cpse	r25, r19
    1fb0:	f1 cf       	rjmp	.-30     	; 0x1f94 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1fb2:	e3 2f       	mov	r30, r19
    1fb4:	33 0f       	add	r19, r19
    1fb6:	ff 0b       	sbc	r31, r31
    1fb8:	ee 53       	subi	r30, 0x3E	; 62
    1fba:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	20 81       	ld	r18, Z
    1fc0:	28 17       	cp	r18, r24
    1fc2:	19 f0       	breq	.+6      	; 0x1fca <is_snake_at+0x42>
    1fc4:	90 e0       	ldi	r25, 0x00	; 0
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <is_snake_at+0x42>
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1fca:	89 2f       	mov	r24, r25
    1fcc:	08 95       	ret

00001fce <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1fd2:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <snakeLength>
    1fd6:	81 32       	cpi	r24, 0x21	; 33
    1fd8:	08 f0       	brcs	.+2      	; 0x1fdc <advance_snake_head+0xe>
    1fda:	96 c0       	rjmp	.+300    	; 0x2108 <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1fdc:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <snakeHeadIndex>
    1fe0:	0e 2e       	mov	r0, r30
    1fe2:	00 0c       	add	r0, r0
    1fe4:	ff 0b       	sbc	r31, r31
    1fe6:	ee 53       	subi	r30, 0x3E	; 62
    1fe8:	fd 4f       	sbci	r31, 0xFD	; 253
    1fea:	80 81       	ld	r24, Z
    1fec:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    1ff0:	d8 2f       	mov	r29, r24
    1ff2:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1ff4:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <snakeHeadIndex>
    1ff8:	0e 2e       	mov	r0, r30
    1ffa:	00 0c       	add	r0, r0
    1ffc:	ff 0b       	sbc	r31, r31
    1ffe:	ee 53       	subi	r30, 0x3E	; 62
    2000:	fd 4f       	sbci	r31, 0xFD	; 253
    2002:	80 81       	ld	r24, Z
    2004:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    2008:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    200a:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <nextSnakeDirn>
    200e:	91 30       	cpi	r25, 0x01	; 1
    2010:	59 f0       	breq	.+22     	; 0x2028 <advance_snake_head+0x5a>
    2012:	28 f0       	brcs	.+10     	; 0x201e <advance_snake_head+0x50>
    2014:	92 30       	cpi	r25, 0x02	; 2
    2016:	69 f0       	breq	.+26     	; 0x2032 <advance_snake_head+0x64>
    2018:	93 30       	cpi	r25, 0x03	; 3
    201a:	81 f0       	breq	.+32     	; 0x203c <advance_snake_head+0x6e>
    201c:	1b c0       	rjmp	.+54     	; 0x2054 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    201e:	87 30       	cpi	r24, 0x07	; 7
    2020:	91 f0       	breq	.+36     	; 0x2046 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    2022:	61 e0       	ldi	r22, 0x01	; 1
    2024:	68 0f       	add	r22, r24
    2026:	16 c0       	rjmp	.+44     	; 0x2054 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    2028:	df 30       	cpi	r29, 0x0F	; 15
    202a:	79 f0       	breq	.+30     	; 0x204a <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    202c:	c1 e0       	ldi	r28, 0x01	; 1
    202e:	cd 0f       	add	r28, r29
    2030:	11 c0       	rjmp	.+34     	; 0x2054 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    2032:	88 23       	and	r24, r24
    2034:	61 f0       	breq	.+24     	; 0x204e <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    2036:	6f ef       	ldi	r22, 0xFF	; 255
    2038:	68 0f       	add	r22, r24
    203a:	0c c0       	rjmp	.+24     	; 0x2054 <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    203c:	dd 23       	and	r29, r29
    203e:	49 f0       	breq	.+18     	; 0x2052 <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    2040:	cf ef       	ldi	r28, 0xFF	; 255
    2042:	cd 0f       	add	r28, r29
    2044:	07 c0       	rjmp	.+14     	; 0x2054 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	05 c0       	rjmp	.+10     	; 0x2054 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    204a:	c0 e0       	ldi	r28, 0x00	; 0
    204c:	03 c0       	rjmp	.+6      	; 0x2054 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    204e:	67 e0       	ldi	r22, 0x07	; 7
    2050:	01 c0       	rjmp	.+2      	; 0x2054 <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    2052:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    2054:	8c 2f       	mov	r24, r28
    2056:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    205a:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    205c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <nextSnakeDirn>
    2060:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <curSnakeDirn>
    2064:	98 17       	cp	r25, r24
    2066:	41 f0       	breq	.+16     	; 0x2078 <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    2068:	80 93 be 02 	sts	0x02BE, r24	; 0x8002be <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    206c:	0e 94 cf 01 	call	0x39e	; 0x39e <sound_effects_on_mode>
    2070:	89 2b       	or	r24, r25
    2072:	11 f0       	breq	.+4      	; 0x2078 <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    2074:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    2078:	8c 2f       	mov	r24, r28
    207a:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <is_snake_at>
    207e:	88 23       	and	r24, r24
    2080:	51 f0       	breq	.+20     	; 0x2096 <advance_snake_head+0xc8>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    2082:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <snakeTailIndex>
    2086:	0e 2e       	mov	r0, r30
    2088:	00 0c       	add	r0, r0
    208a:	ff 0b       	sbc	r31, r31
    208c:	ee 53       	subi	r30, 0x3E	; 62
    208e:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    2090:	80 81       	ld	r24, Z
    2092:	c8 13       	cpse	r28, r24
    2094:	3b c0       	rjmp	.+118    	; 0x210c <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    2096:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <snakeHeadIndex>
    209a:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    209c:	81 32       	cpi	r24, 0x21	; 33
    209e:	19 f0       	breq	.+6      	; 0x20a6 <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    20a0:	80 93 c0 02 	sts	0x02C0, r24	; 0x8002c0 <snakeHeadIndex>
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    20a6:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    20aa:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <snakeHeadIndex>
    20ae:	0e 2e       	mov	r0, r30
    20b0:	00 0c       	add	r0, r0
    20b2:	ff 0b       	sbc	r31, r31
    20b4:	ee 53       	subi	r30, 0x3E	; 62
    20b6:	fd 4f       	sbci	r31, 0xFD	; 253
    20b8:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    20ba:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <snakeLength>
    20be:	8f 5f       	subi	r24, 0xFF	; 255
    20c0:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    20c4:	8c 2f       	mov	r24, r28
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	0e 94 4e 0c 	call	0x189c	; 0x189c <is_rat_at>
    20cc:	89 2b       	or	r24, r25
    20ce:	31 f0       	breq	.+12     	; 0x20dc <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20d0:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <snakeLength>
    20d4:	81 32       	cpi	r24, 0x21	; 33
    20d6:	e0 f0       	brcs	.+56     	; 0x2110 <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    20d8:	87 e0       	ldi	r24, 0x07	; 7
    20da:	21 c0       	rjmp	.+66     	; 0x211e <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    20dc:	8c 2f       	mov	r24, r28
    20de:	0e 94 13 11 	call	0x2226	; 0x2226 <is_superfood_at>
    20e2:	88 23       	and	r24, r24
    20e4:	31 f0       	breq	.+12     	; 0x20f2 <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20e6:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <snakeLength>
    20ea:	81 32       	cpi	r24, 0x21	; 33
    20ec:	98 f0       	brcs	.+38     	; 0x2114 <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    20ee:	85 e0       	ldi	r24, 0x05	; 5
    20f0:	16 c0       	rjmp	.+44     	; 0x211e <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    20f2:	8c 2f       	mov	r24, r28
    20f4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <is_food_at>
    20f8:	88 23       	and	r24, r24
    20fa:	71 f0       	breq	.+28     	; 0x2118 <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20fc:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <snakeLength>
    2100:	81 32       	cpi	r24, 0x21	; 33
    2102:	60 f0       	brcs	.+24     	; 0x211c <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    2104:	83 e0       	ldi	r24, 0x03	; 3
    2106:	0b c0       	rjmp	.+22     	; 0x211e <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    2108:	8d ef       	ldi	r24, 0xFD	; 253
    210a:	09 c0       	rjmp	.+18     	; 0x211e <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    210c:	8e ef       	ldi	r24, 0xFE	; 254
    210e:	07 c0       	rjmp	.+14     	; 0x211e <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    2110:	86 e0       	ldi	r24, 0x06	; 6
    2112:	05 c0       	rjmp	.+10     	; 0x211e <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    2114:	84 e0       	ldi	r24, 0x04	; 4
    2116:	03 c0       	rjmp	.+6      	; 0x211e <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	01 c0       	rjmp	.+2      	; 0x211e <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    211c:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	08 95       	ret

00002124 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2124:	94 b1       	in	r25, 0x04	; 4
    2126:	90 6b       	ori	r25, 0xB0	; 176
    2128:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    212a:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    212c:	90 e5       	ldi	r25, 0x50	; 80
    212e:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2130:	88 30       	cpi	r24, 0x08	; 8
    2132:	21 f0       	breq	.+8      	; 0x213c <spi_setup_master+0x18>
    2134:	80 32       	cpi	r24, 0x20	; 32
    2136:	11 f0       	breq	.+4      	; 0x213c <spi_setup_master+0x18>
    2138:	82 30       	cpi	r24, 0x02	; 2
    213a:	19 f4       	brne	.+6      	; 0x2142 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    213c:	91 e0       	ldi	r25, 0x01	; 1
    213e:	9d bd       	out	0x2d, r25	; 45
			break;
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2142:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2144:	80 32       	cpi	r24, 0x20	; 32
    2146:	69 f0       	breq	.+26     	; 0x2162 <spi_setup_master+0x3e>
    2148:	28 f4       	brcc	.+10     	; 0x2154 <spi_setup_master+0x30>
    214a:	88 30       	cpi	r24, 0x08	; 8
    214c:	71 f0       	breq	.+28     	; 0x216a <spi_setup_master+0x46>
    214e:	80 31       	cpi	r24, 0x10	; 16
    2150:	61 f0       	breq	.+24     	; 0x216a <spi_setup_master+0x46>
    2152:	0e c0       	rjmp	.+28     	; 0x2170 <spi_setup_master+0x4c>
    2154:	80 34       	cpi	r24, 0x40	; 64
    2156:	29 f0       	breq	.+10     	; 0x2162 <spi_setup_master+0x3e>
    2158:	80 38       	cpi	r24, 0x80	; 128
    215a:	51 f4       	brne	.+20     	; 0x2170 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    215c:	8c b5       	in	r24, 0x2c	; 44
    215e:	81 60       	ori	r24, 0x01	; 1
    2160:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    2162:	8c b5       	in	r24, 0x2c	; 44
    2164:	82 60       	ori	r24, 0x02	; 2
    2166:	8c bd       	out	0x2c, r24	; 44
			break;
    2168:	03 c0       	rjmp	.+6      	; 0x2170 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    216a:	8c b5       	in	r24, 0x2c	; 44
    216c:	81 60       	ori	r24, 0x01	; 1
    216e:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2170:	2c 98       	cbi	0x05, 4	; 5
    2172:	08 95       	ret

00002174 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    2174:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2176:	0d b4       	in	r0, 0x2d	; 45
    2178:	07 fe       	sbrs	r0, 7
    217a:	fd cf       	rjmp	.-6      	; 0x2176 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    217c:	8e b5       	in	r24, 0x2e	; 46
    217e:	08 95       	ret

00002180 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    2180:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <superfood_position>
	superfood_on_board = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <superfood_on_board>
}
    218a:	08 95       	ret

0000218c <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    218c:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <superfood_on_board>
    2190:	08 95       	ret

00002192 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    2192:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    2196:	68 59       	subi	r22, 0x98	; 152
    2198:	7a 43       	sbci	r23, 0x3A	; 58
    219a:	81 09       	sbc	r24, r1
    219c:	91 09       	sbc	r25, r1
    219e:	20 e2       	ldi	r18, 0x20	; 32
    21a0:	3e e4       	ldi	r19, 0x4E	; 78
    21a2:	40 e0       	ldi	r20, 0x00	; 0
    21a4:	50 e0       	ldi	r21, 0x00	; 0
    21a6:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__udivmodsi4>
    21aa:	67 2b       	or	r22, r23
    21ac:	68 2b       	or	r22, r24
    21ae:	69 2b       	or	r22, r25
    21b0:	21 f4       	brne	.+8      	; 0x21ba <time_to_add_superfood+0x28>
    21b2:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	08 95       	ret
    21ba:	80 e0       	ldi	r24, 0x00	; 0
}
    21bc:	08 95       	ret

000021be <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    21be:	0e 94 6e 12 	call	0x24dc	; 0x24dc <get_clock_ticks>
    21c2:	20 e2       	ldi	r18, 0x20	; 32
    21c4:	3e e4       	ldi	r19, 0x4E	; 78
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	50 e0       	ldi	r21, 0x00	; 0
    21ca:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__udivmodsi4>
    21ce:	21 e0       	ldi	r18, 0x01	; 1
    21d0:	67 2b       	or	r22, r23
    21d2:	68 2b       	or	r22, r24
    21d4:	69 2b       	or	r22, r25
    21d6:	09 f0       	breq	.+2      	; 0x21da <time_to_remove_superfood+0x1c>
    21d8:	20 e0       	ldi	r18, 0x00	; 0
}
    21da:	82 2f       	mov	r24, r18
    21dc:	08 95       	ret

000021de <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    21de:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    21e0:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <superfood_position>
    21e4:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    21e8:	c8 2f       	mov	r28, r24
    21ea:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <superfood_position>
    21ee:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    21f2:	40 e0       	ldi	r20, 0x00	; 0
    21f4:	6c 2f       	mov	r22, r28
    21f6:	0e 94 19 09 	call	0x1232	; 0x1232 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    2202:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <superfood_position>
	superfood_on_board = 0; 
    2206:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <superfood_on_board>
}
    220a:	cf 91       	pop	r28
    220c:	08 95       	ret

0000220e <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    2216:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <superfood_position>
	superfood_on_board = 0;
    221a:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <superfood_on_board>
    221e:	08 95       	ret

00002220 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    2220:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <superfood_position>
    2224:	08 95       	ret

00002226 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    2226:	90 91 20 04 	lds	r25, 0x0420	; 0x800420 <superfood_on_board>
    222a:	99 23       	and	r25, r25
    222c:	39 f0       	breq	.+14     	; 0x223c <is_superfood_at+0x16>
    222e:	91 e0       	ldi	r25, 0x01	; 1
    2230:	20 91 1f 04 	lds	r18, 0x041F	; 0x80041f <superfood_position>
    2234:	28 13       	cpse	r18, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	89 2f       	mov	r24, r25
    223a:	08 95       	ret
    223c:	80 e0       	ldi	r24, 0x00	; 0
}
    223e:	08 95       	ret

00002240 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    2246:	0e 94 ef 10 	call	0x21de	; 0x21de <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    224a:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
    224e:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    2250:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
		test_position = position(x,y);
    2254:	bc 01       	movw	r22, r24
    2256:	67 70       	andi	r22, 0x07	; 7
    2258:	70 78       	andi	r23, 0x80	; 128
    225a:	77 23       	and	r23, r23
    225c:	34 f4       	brge	.+12     	; 0x226a <add_superfood_to_board+0x2a>
    225e:	61 50       	subi	r22, 0x01	; 1
    2260:	71 09       	sbc	r23, r1
    2262:	68 6f       	ori	r22, 0xF8	; 248
    2264:	7f 6f       	ori	r23, 0xFF	; 255
    2266:	6f 5f       	subi	r22, 0xFF	; 255
    2268:	7f 4f       	sbci	r23, 0xFF	; 255
    226a:	ce 01       	movw	r24, r28
    226c:	8f 70       	andi	r24, 0x0F	; 15
    226e:	90 78       	andi	r25, 0x80	; 128
    2270:	99 23       	and	r25, r25
    2272:	24 f4       	brge	.+8      	; 0x227c <add_superfood_to_board+0x3c>
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	80 6f       	ori	r24, 0xF0	; 240
    2278:	9f 6f       	ori	r25, 0xFF	; 255
    227a:	01 96       	adiw	r24, 0x01	; 1
    227c:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    2280:	c8 2f       	mov	r28, r24
    2282:	13 e6       	ldi	r17, 0x63	; 99
    2284:	1e c0       	rjmp	.+60     	; 0x22c2 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    2286:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
    228a:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    228c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <rand>
		test_position = position(x,y);
    2290:	bc 01       	movw	r22, r24
    2292:	67 70       	andi	r22, 0x07	; 7
    2294:	70 78       	andi	r23, 0x80	; 128
    2296:	77 23       	and	r23, r23
    2298:	34 f4       	brge	.+12     	; 0x22a6 <add_superfood_to_board+0x66>
    229a:	61 50       	subi	r22, 0x01	; 1
    229c:	71 09       	sbc	r23, r1
    229e:	68 6f       	ori	r22, 0xF8	; 248
    22a0:	7f 6f       	ori	r23, 0xFF	; 255
    22a2:	6f 5f       	subi	r22, 0xFF	; 255
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255
    22a6:	ce 01       	movw	r24, r28
    22a8:	8f 70       	andi	r24, 0x0F	; 15
    22aa:	90 78       	andi	r25, 0x80	; 128
    22ac:	99 23       	and	r25, r25
    22ae:	24 f4       	brge	.+8      	; 0x22b8 <add_superfood_to_board+0x78>
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	80 6f       	ori	r24, 0xF0	; 240
    22b4:	9f 6f       	ori	r25, 0xFF	; 255
    22b6:	01 96       	adiw	r24, 0x01	; 1
    22b8:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <position>
    22bc:	c8 2f       	mov	r28, r24
    22be:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22c0:	a1 f0       	breq	.+40     	; 0x22ea <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    22c2:	8c 2f       	mov	r24, r28
    22c4:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    22c8:	81 11       	cpse	r24, r1
    22ca:	dd cf       	rjmp	.-70     	; 0x2286 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    22cc:	8c 2f       	mov	r24, r28
    22ce:	0e 94 b6 07 	call	0xf6c	; 0xf6c <is_food_at>
    22d2:	81 11       	cpse	r24, r1
    22d4:	d8 cf       	rjmp	.-80     	; 0x2286 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22d6:	8c 2f       	mov	r24, r28
    22d8:	0e 94 13 11 	call	0x2226	; 0x2226 <is_superfood_at>
    22dc:	81 11       	cpse	r24, r1
    22de:	d3 cf       	rjmp	.-90     	; 0x2286 <add_superfood_to_board+0x46>
    22e0:	8c 2f       	mov	r24, r28
    22e2:	0e 94 4e 0c 	call	0x189c	; 0x189c <is_rat_at>
    22e6:	81 11       	cpse	r24, r1
    22e8:	ce cf       	rjmp	.-100    	; 0x2286 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    22ea:	c0 93 1f 04 	sts	0x041F, r28	; 0x80041f <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    22ee:	8c 2f       	mov	r24, r28
    22f0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <y_position>
    22f4:	c8 2f       	mov	r28, r24
    22f6:	80 91 1f 04 	lds	r24, 0x041F	; 0x80041f <superfood_position>
    22fa:	0e 94 60 09 	call	0x12c0	; 0x12c0 <x_position>
    22fe:	4c e3       	ldi	r20, 0x3C	; 60
    2300:	6c 2f       	mov	r22, r28
    2302:	0e 94 19 09 	call	0x1232	; 0x1232 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <superfood_on_board>
}
    230c:	df 91       	pop	r29
    230e:	cf 91       	pop	r28
    2310:	1f 91       	pop	r17
    2312:	08 95       	ret

00002314 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    2314:	28 2f       	mov	r18, r24
    2316:	08 2e       	mov	r0, r24
    2318:	00 0c       	add	r0, r0
    231a:	33 0b       	sbc	r19, r19
    231c:	3f 93       	push	r19
    231e:	8f 93       	push	r24
    2320:	86 2f       	mov	r24, r22
    2322:	06 2e       	mov	r0, r22
    2324:	00 0c       	add	r0, r0
    2326:	99 0b       	sbc	r25, r25
    2328:	9f 93       	push	r25
    232a:	6f 93       	push	r22
    232c:	87 e3       	ldi	r24, 0x37	; 55
    232e:	92 e0       	ldi	r25, 0x02	; 2
    2330:	9f 93       	push	r25
    2332:	8f 93       	push	r24
    2334:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	08 95       	ret

00002346 <clear_terminal>:
    2346:	82 e3       	ldi	r24, 0x32	; 50
    2348:	92 e0       	ldi	r25, 0x02	; 2
    234a:	9f 93       	push	r25
    234c:	8f 93       	push	r24
    234e:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	08 95       	ret

00002358 <set_display_attribute>:
    2358:	1f 92       	push	r1
    235a:	8f 93       	push	r24
    235c:	8c e2       	ldi	r24, 0x2C	; 44
    235e:	92 e0       	ldi	r25, 0x02	; 2
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
    2368:	0f 90       	pop	r0
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	08 95       	ret

00002372 <hide_cursor>:
    2372:	85 e2       	ldi	r24, 0x25	; 37
    2374:	92 e0       	ldi	r25, 0x02	; 2
    2376:	9f 93       	push	r25
    2378:	8f 93       	push	r24
    237a:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	08 95       	ret

00002384 <show_cursor>:
    2384:	8e e1       	ldi	r24, 0x1E	; 30
    2386:	92 e0       	ldi	r25, 0x02	; 2
    2388:	9f 93       	push	r25
    238a:	8f 93       	push	r24
    238c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
    2390:	0f 90       	pop	r0
    2392:	0f 90       	pop	r0
    2394:	08 95       	ret

00002396 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    2396:	63 e0       	ldi	r22, 0x03	; 3
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf_P(PSTR("Snake"));
    239e:	88 e1       	ldi	r24, 0x18	; 24
    23a0:	92 e0       	ldi	r25, 0x02	; 2
    23a2:	9f 93       	push	r25
    23a4:	8f 93       	push	r24
    23a6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>

	move_cursor(3,5);
    23aa:	65 e0       	ldi	r22, 0x05	; 5
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    23b2:	80 e2       	ldi	r24, 0x20	; 32
    23b4:	0e 94 ac 11 	call	0x2358	; 0x2358 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    23b8:	8e ee       	ldi	r24, 0xEE	; 238
    23ba:	91 e0       	ldi	r25, 0x01	; 1
    23bc:	9f 93       	push	r25
    23be:	8f 93       	push	r24
    23c0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    23c4:	85 e2       	ldi	r24, 0x25	; 37
    23c6:	0e 94 ac 11 	call	0x2358	; 0x2358 <set_display_attribute>
	display_EEPROM_high_score();
    23ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <display_EEPROM_high_score>
}
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	08 95       	ret

000023d8 <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    23d8:	0e 94 b9 11 	call	0x2372	; 0x2372 <hide_cursor>
	
	move_cursor(10,1);
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	8a e0       	ldi	r24, 0x0A	; 10
    23e0:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf("Snake");
    23e4:	85 e8       	ldi	r24, 0x85	; 133
    23e6:	92 e0       	ldi	r25, 0x02	; 2
    23e8:	9f 93       	push	r25
    23ea:	8f 93       	push	r24
    23ec:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>

	move_cursor(1,3);
    23f0:	63 e0       	ldi	r22, 0x03	; 3
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf("Score:						       ", get_score());
    23f8:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
    23fc:	9f 93       	push	r25
    23fe:	8f 93       	push	r24
    2400:	7f 93       	push	r23
    2402:	6f 93       	push	r22
    2404:	8b e8       	ldi	r24, 0x8B	; 139
    2406:	92 e0       	ldi	r25, 0x02	; 2
    2408:	9f 93       	push	r25
    240a:	8f 93       	push	r24
    240c:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
	
	move_cursor(20-score_length(), 3);
    2410:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <score_length>
    2414:	63 e0       	ldi	r22, 0x03	; 3
    2416:	94 e1       	ldi	r25, 0x14	; 20
    2418:	98 1b       	sub	r25, r24
    241a:	89 2f       	mov	r24, r25
    241c:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf("%u", get_score()); 
    2420:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
    2424:	9f 93       	push	r25
    2426:	8f 93       	push	r24
    2428:	7f 93       	push	r23
    242a:	6f 93       	push	r22
    242c:	82 e8       	ldi	r24, 0x82	; 130
    242e:	92 e0       	ldi	r25, 0x02	; 2
    2430:	9f 93       	push	r25
    2432:	8f 93       	push	r24
    2434:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
	move_cursor(10,3);
    2438:	63 e0       	ldi	r22, 0x03	; 3
    243a:	8a e0       	ldi	r24, 0x0A	; 10
    243c:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
}
    2440:	8d b7       	in	r24, 0x3d	; 61
    2442:	9e b7       	in	r25, 0x3e	; 62
    2444:	0e 96       	adiw	r24, 0x0e	; 14
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	f8 94       	cli
    244a:	9e bf       	out	0x3e, r25	; 62
    244c:	0f be       	out	0x3f, r0	; 63
    244e:	8d bf       	out	0x3d, r24	; 61
    2450:	08 95       	ret

00002452 <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    2452:	0e 94 b9 11 	call	0x2372	; 0x2372 <hide_cursor>
	move_cursor(20-score_length(), 3);
    2456:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <score_length>
    245a:	63 e0       	ldi	r22, 0x03	; 3
    245c:	94 e1       	ldi	r25, 0x14	; 20
    245e:	98 1b       	sub	r25, r24
    2460:	89 2f       	mov	r24, r25
    2462:	0e 94 8a 11 	call	0x2314	; 0x2314 <move_cursor>
	printf("%u", get_score());
    2466:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <get_score>
    246a:	9f 93       	push	r25
    246c:	8f 93       	push	r24
    246e:	7f 93       	push	r23
    2470:	6f 93       	push	r22
    2472:	82 e8       	ldi	r24, 0x82	; 130
    2474:	92 e0       	ldi	r25, 0x02	; 2
    2476:	9f 93       	push	r25
    2478:	8f 93       	push	r24
    247a:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <printf>
}
    247e:	0f 90       	pop	r0
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	0f 90       	pop	r0
    2486:	0f 90       	pop	r0
    2488:	0f 90       	pop	r0
    248a:	08 95       	ret

0000248c <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    248c:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <clock_ticks>
    2490:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <clock_ticks+0x1>
    2494:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <clock_ticks+0x2>
    2498:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    249c:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    249e:	8c e7       	ldi	r24, 0x7C	; 124
    24a0:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    24a6:	83 e0       	ldi	r24, 0x03	; 3
    24a8:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    24aa:	ee e6       	ldi	r30, 0x6E	; 110
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	82 60       	ori	r24, 0x02	; 2
    24b2:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    24b4:	85 b3       	in	r24, 0x15	; 21
    24b6:	82 70       	andi	r24, 0x02	; 2
    24b8:	85 bb       	out	0x15, r24	; 21
    24ba:	08 95       	ret

000024bc <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    24bc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <unpaused_game>
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	89 1b       	sub	r24, r25
    24c4:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <unpaused_game>
    24c8:	08 95       	ret

000024ca <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    24ca:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <unpaused_game>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	22 23       	and	r18, r18
    24d4:	11 f0       	breq	.+4      	; 0x24da <timer_is_paused+0x10>
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    24da:	08 95       	ret

000024dc <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    24dc:	2f b7       	in	r18, 0x3f	; 63
	cli();
    24de:	f8 94       	cli
	return_value = clock_ticks;
    24e0:	60 91 e3 02 	lds	r22, 0x02E3	; 0x8002e3 <clock_ticks>
    24e4:	70 91 e4 02 	lds	r23, 0x02E4	; 0x8002e4 <clock_ticks+0x1>
    24e8:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <clock_ticks+0x2>
    24ec:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <clock_ticks+0x3>
	if(interrupts_were_on) {
    24f0:	22 23       	and	r18, r18
    24f2:	0c f4       	brge	.+2      	; 0x24f6 <get_clock_ticks+0x1a>
		sei();
    24f4:	78 94       	sei
	}
	return return_value;
}
    24f6:	08 95       	ret

000024f8 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    24f8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    24fa:	f8 94       	cli
	clock_ticks =clock;
    24fc:	60 93 e3 02 	sts	0x02E3, r22	; 0x8002e3 <clock_ticks>
    2500:	70 93 e4 02 	sts	0x02E4, r23	; 0x8002e4 <clock_ticks+0x1>
    2504:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <clock_ticks+0x2>
    2508:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <clock_ticks+0x3>
	if(interrupts_were_on) {
    250c:	22 23       	and	r18, r18
    250e:	0c f4       	brge	.+2      	; 0x2512 <set_clock_ticks+0x1a>
		sei();
    2510:	78 94       	sei
    2512:	08 95       	ret

00002514 <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    2514:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SSD_CC_value>
    2518:	88 23       	and	r24, r24
    251a:	81 f0       	breq	.+32     	; 0x253c <display_SSD_value+0x28>
		PORTD |= (1<<2);
    251c:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    251e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_length>
    2522:	ed ec       	ldi	r30, 0xCD	; 205
    2524:	8e 9f       	mul	r24, r30
    2526:	e1 2d       	mov	r30, r1
    2528:	11 24       	eor	r1, r1
    252a:	e6 95       	lsr	r30
    252c:	e6 95       	lsr	r30
    252e:	e6 95       	lsr	r30
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	e8 5d       	subi	r30, 0xD8	; 216
    2534:	fe 4f       	sbci	r31, 0xFE	; 254
    2536:	80 81       	ld	r24, Z
    2538:	82 b9       	out	0x02, r24	; 2
    253a:	16 c0       	rjmp	.+44     	; 0x2568 <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    253c:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    253e:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_length>
    2542:	9d ec       	ldi	r25, 0xCD	; 205
    2544:	89 9f       	mul	r24, r25
    2546:	91 2d       	mov	r25, r1
    2548:	11 24       	eor	r1, r1
    254a:	96 95       	lsr	r25
    254c:	96 95       	lsr	r25
    254e:	96 95       	lsr	r25
    2550:	99 0f       	add	r25, r25
    2552:	29 2f       	mov	r18, r25
    2554:	22 0f       	add	r18, r18
    2556:	22 0f       	add	r18, r18
    2558:	92 0f       	add	r25, r18
    255a:	89 1b       	sub	r24, r25
    255c:	e8 2f       	mov	r30, r24
    255e:	f0 e0       	ldi	r31, 0x00	; 0
    2560:	e2 5e       	subi	r30, 0xE2	; 226
    2562:	fe 4f       	sbci	r31, 0xFE	; 254
    2564:	80 81       	ld	r24, Z
    2566:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    2568:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <SSD_CC_value>
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	89 1b       	sub	r24, r25
    2570:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <SSD_CC_value>
    2574:	08 95       	ret

00002576 <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    2576:	1f 92       	push	r1
    2578:	0f 92       	push	r0
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	0f 92       	push	r0
    257e:	11 24       	eor	r1, r1
    2580:	2f 93       	push	r18
    2582:	3f 93       	push	r19
    2584:	4f 93       	push	r20
    2586:	5f 93       	push	r21
    2588:	6f 93       	push	r22
    258a:	7f 93       	push	r23
    258c:	8f 93       	push	r24
    258e:	9f 93       	push	r25
    2590:	af 93       	push	r26
    2592:	bf 93       	push	r27
    2594:	ef 93       	push	r30
    2596:	ff 93       	push	r31
	if(unpaused_game){
    2598:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <unpaused_game>
    259c:	88 23       	and	r24, r24
    259e:	99 f0       	breq	.+38     	; 0x25c6 <__vector_16+0x50>
		clock_ticks++;
    25a0:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <clock_ticks>
    25a4:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <clock_ticks+0x1>
    25a8:	a0 91 e5 02 	lds	r26, 0x02E5	; 0x8002e5 <clock_ticks+0x2>
    25ac:	b0 91 e6 02 	lds	r27, 0x02E6	; 0x8002e6 <clock_ticks+0x3>
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	a1 1d       	adc	r26, r1
    25b4:	b1 1d       	adc	r27, r1
    25b6:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <clock_ticks>
    25ba:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <clock_ticks+0x1>
    25be:	a0 93 e5 02 	sts	0x02E5, r26	; 0x8002e5 <clock_ticks+0x2>
    25c2:	b0 93 e6 02 	sts	0x02E6, r27	; 0x8002e6 <clock_ticks+0x3>
	}
	display_SSD_value();
    25c6:	0e 94 8a 12 	call	0x2514	; 0x2514 <display_SSD_value>
}
    25ca:	ff 91       	pop	r31
    25cc:	ef 91       	pop	r30
    25ce:	bf 91       	pop	r27
    25d0:	af 91       	pop	r26
    25d2:	9f 91       	pop	r25
    25d4:	8f 91       	pop	r24
    25d6:	7f 91       	pop	r23
    25d8:	6f 91       	pop	r22
    25da:	5f 91       	pop	r21
    25dc:	4f 91       	pop	r20
    25de:	3f 91       	pop	r19
    25e0:	2f 91       	pop	r18
    25e2:	0f 90       	pop	r0
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	0f 90       	pop	r0
    25e8:	1f 90       	pop	r1
    25ea:	18 95       	reti

000025ec <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    25ec:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    25f0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    25f4:	e1 e8       	ldi	r30, 0x81	; 129
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8a 60       	ori	r24, 0x0A	; 10
    25fc:	80 83       	st	Z, r24
    25fe:	80 e4       	ldi	r24, 0x40	; 64
    2600:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2604:	88 ee       	ldi	r24, 0xE8	; 232
    2606:	93 e0       	ldi	r25, 0x03	; 3
    2608:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    260c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2610:	55 98       	cbi	0x0a, 5	; 10
    2612:	53 98       	cbi	0x0a, 3	; 10
    2614:	08 95       	ret

00002616 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    2616:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    261a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    261e:	08 95       	ret

00002620 <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    2620:	55 9a       	sbi	0x0a, 5	; 10
    2622:	08 95       	ret

00002624 <__subsf3>:
    2624:	50 58       	subi	r21, 0x80	; 128

00002626 <__addsf3>:
    2626:	bb 27       	eor	r27, r27
    2628:	aa 27       	eor	r26, r26
    262a:	0e 94 2a 13 	call	0x2654	; 0x2654 <__addsf3x>
    262e:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_round>
    2632:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__fp_pscA>
    2636:	38 f0       	brcs	.+14     	; 0x2646 <__addsf3+0x20>
    2638:	0e 94 02 14 	call	0x2804	; 0x2804 <__fp_pscB>
    263c:	20 f0       	brcs	.+8      	; 0x2646 <__addsf3+0x20>
    263e:	39 f4       	brne	.+14     	; 0x264e <__addsf3+0x28>
    2640:	9f 3f       	cpi	r25, 0xFF	; 255
    2642:	19 f4       	brne	.+6      	; 0x264a <__addsf3+0x24>
    2644:	26 f4       	brtc	.+8      	; 0x264e <__addsf3+0x28>
    2646:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    264a:	0e f4       	brtc	.+2      	; 0x264e <__addsf3+0x28>
    264c:	e0 95       	com	r30
    264e:	e7 fb       	bst	r30, 7
    2650:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>

00002654 <__addsf3x>:
    2654:	e9 2f       	mov	r30, r25
    2656:	0e 94 1a 14 	call	0x2834	; 0x2834 <__fp_split3>
    265a:	58 f3       	brcs	.-42     	; 0x2632 <__addsf3+0xc>
    265c:	ba 17       	cp	r27, r26
    265e:	62 07       	cpc	r22, r18
    2660:	73 07       	cpc	r23, r19
    2662:	84 07       	cpc	r24, r20
    2664:	95 07       	cpc	r25, r21
    2666:	20 f0       	brcs	.+8      	; 0x2670 <__addsf3x+0x1c>
    2668:	79 f4       	brne	.+30     	; 0x2688 <__addsf3x+0x34>
    266a:	a6 f5       	brtc	.+104    	; 0x26d4 <__addsf3x+0x80>
    266c:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__fp_zero>
    2670:	0e f4       	brtc	.+2      	; 0x2674 <__addsf3x+0x20>
    2672:	e0 95       	com	r30
    2674:	0b 2e       	mov	r0, r27
    2676:	ba 2f       	mov	r27, r26
    2678:	a0 2d       	mov	r26, r0
    267a:	0b 01       	movw	r0, r22
    267c:	b9 01       	movw	r22, r18
    267e:	90 01       	movw	r18, r0
    2680:	0c 01       	movw	r0, r24
    2682:	ca 01       	movw	r24, r20
    2684:	a0 01       	movw	r20, r0
    2686:	11 24       	eor	r1, r1
    2688:	ff 27       	eor	r31, r31
    268a:	59 1b       	sub	r21, r25
    268c:	99 f0       	breq	.+38     	; 0x26b4 <__addsf3x+0x60>
    268e:	59 3f       	cpi	r21, 0xF9	; 249
    2690:	50 f4       	brcc	.+20     	; 0x26a6 <__addsf3x+0x52>
    2692:	50 3e       	cpi	r21, 0xE0	; 224
    2694:	68 f1       	brcs	.+90     	; 0x26f0 <__addsf3x+0x9c>
    2696:	1a 16       	cp	r1, r26
    2698:	f0 40       	sbci	r31, 0x00	; 0
    269a:	a2 2f       	mov	r26, r18
    269c:	23 2f       	mov	r18, r19
    269e:	34 2f       	mov	r19, r20
    26a0:	44 27       	eor	r20, r20
    26a2:	58 5f       	subi	r21, 0xF8	; 248
    26a4:	f3 cf       	rjmp	.-26     	; 0x268c <__addsf3x+0x38>
    26a6:	46 95       	lsr	r20
    26a8:	37 95       	ror	r19
    26aa:	27 95       	ror	r18
    26ac:	a7 95       	ror	r26
    26ae:	f0 40       	sbci	r31, 0x00	; 0
    26b0:	53 95       	inc	r21
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <__addsf3x+0x52>
    26b4:	7e f4       	brtc	.+30     	; 0x26d4 <__addsf3x+0x80>
    26b6:	1f 16       	cp	r1, r31
    26b8:	ba 0b       	sbc	r27, r26
    26ba:	62 0b       	sbc	r22, r18
    26bc:	73 0b       	sbc	r23, r19
    26be:	84 0b       	sbc	r24, r20
    26c0:	ba f0       	brmi	.+46     	; 0x26f0 <__addsf3x+0x9c>
    26c2:	91 50       	subi	r25, 0x01	; 1
    26c4:	a1 f0       	breq	.+40     	; 0x26ee <__addsf3x+0x9a>
    26c6:	ff 0f       	add	r31, r31
    26c8:	bb 1f       	adc	r27, r27
    26ca:	66 1f       	adc	r22, r22
    26cc:	77 1f       	adc	r23, r23
    26ce:	88 1f       	adc	r24, r24
    26d0:	c2 f7       	brpl	.-16     	; 0x26c2 <__addsf3x+0x6e>
    26d2:	0e c0       	rjmp	.+28     	; 0x26f0 <__addsf3x+0x9c>
    26d4:	ba 0f       	add	r27, r26
    26d6:	62 1f       	adc	r22, r18
    26d8:	73 1f       	adc	r23, r19
    26da:	84 1f       	adc	r24, r20
    26dc:	48 f4       	brcc	.+18     	; 0x26f0 <__addsf3x+0x9c>
    26de:	87 95       	ror	r24
    26e0:	77 95       	ror	r23
    26e2:	67 95       	ror	r22
    26e4:	b7 95       	ror	r27
    26e6:	f7 95       	ror	r31
    26e8:	9e 3f       	cpi	r25, 0xFE	; 254
    26ea:	08 f0       	brcs	.+2      	; 0x26ee <__addsf3x+0x9a>
    26ec:	b0 cf       	rjmp	.-160    	; 0x264e <__addsf3+0x28>
    26ee:	93 95       	inc	r25
    26f0:	88 0f       	add	r24, r24
    26f2:	08 f0       	brcs	.+2      	; 0x26f6 <__addsf3x+0xa2>
    26f4:	99 27       	eor	r25, r25
    26f6:	ee 0f       	add	r30, r30
    26f8:	97 95       	ror	r25
    26fa:	87 95       	ror	r24
    26fc:	08 95       	ret

000026fe <__fixsfsi>:
    26fe:	0e 94 86 13 	call	0x270c	; 0x270c <__fixunssfsi>
    2702:	68 94       	set
    2704:	b1 11       	cpse	r27, r1
    2706:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_szero>
    270a:	08 95       	ret

0000270c <__fixunssfsi>:
    270c:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_splitA>
    2710:	88 f0       	brcs	.+34     	; 0x2734 <__fixunssfsi+0x28>
    2712:	9f 57       	subi	r25, 0x7F	; 127
    2714:	98 f0       	brcs	.+38     	; 0x273c <__fixunssfsi+0x30>
    2716:	b9 2f       	mov	r27, r25
    2718:	99 27       	eor	r25, r25
    271a:	b7 51       	subi	r27, 0x17	; 23
    271c:	b0 f0       	brcs	.+44     	; 0x274a <__fixunssfsi+0x3e>
    271e:	e1 f0       	breq	.+56     	; 0x2758 <__fixunssfsi+0x4c>
    2720:	66 0f       	add	r22, r22
    2722:	77 1f       	adc	r23, r23
    2724:	88 1f       	adc	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	1a f0       	brmi	.+6      	; 0x2730 <__fixunssfsi+0x24>
    272a:	ba 95       	dec	r27
    272c:	c9 f7       	brne	.-14     	; 0x2720 <__fixunssfsi+0x14>
    272e:	14 c0       	rjmp	.+40     	; 0x2758 <__fixunssfsi+0x4c>
    2730:	b1 30       	cpi	r27, 0x01	; 1
    2732:	91 f0       	breq	.+36     	; 0x2758 <__fixunssfsi+0x4c>
    2734:	0e 94 3c 14 	call	0x2878	; 0x2878 <__fp_zero>
    2738:	b1 e0       	ldi	r27, 0x01	; 1
    273a:	08 95       	ret
    273c:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__fp_zero>
    2740:	67 2f       	mov	r22, r23
    2742:	78 2f       	mov	r23, r24
    2744:	88 27       	eor	r24, r24
    2746:	b8 5f       	subi	r27, 0xF8	; 248
    2748:	39 f0       	breq	.+14     	; 0x2758 <__fixunssfsi+0x4c>
    274a:	b9 3f       	cpi	r27, 0xF9	; 249
    274c:	cc f3       	brlt	.-14     	; 0x2740 <__fixunssfsi+0x34>
    274e:	86 95       	lsr	r24
    2750:	77 95       	ror	r23
    2752:	67 95       	ror	r22
    2754:	b3 95       	inc	r27
    2756:	d9 f7       	brne	.-10     	; 0x274e <__fixunssfsi+0x42>
    2758:	3e f4       	brtc	.+14     	; 0x2768 <__fixunssfsi+0x5c>
    275a:	90 95       	com	r25
    275c:	80 95       	com	r24
    275e:	70 95       	com	r23
    2760:	61 95       	neg	r22
    2762:	7f 4f       	sbci	r23, 0xFF	; 255
    2764:	8f 4f       	sbci	r24, 0xFF	; 255
    2766:	9f 4f       	sbci	r25, 0xFF	; 255
    2768:	08 95       	ret

0000276a <__floatunsisf>:
    276a:	e8 94       	clt
    276c:	09 c0       	rjmp	.+18     	; 0x2780 <__floatsisf+0x12>

0000276e <__floatsisf>:
    276e:	97 fb       	bst	r25, 7
    2770:	3e f4       	brtc	.+14     	; 0x2780 <__floatsisf+0x12>
    2772:	90 95       	com	r25
    2774:	80 95       	com	r24
    2776:	70 95       	com	r23
    2778:	61 95       	neg	r22
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	8f 4f       	sbci	r24, 0xFF	; 255
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	99 23       	and	r25, r25
    2782:	a9 f0       	breq	.+42     	; 0x27ae <__floatsisf+0x40>
    2784:	f9 2f       	mov	r31, r25
    2786:	96 e9       	ldi	r25, 0x96	; 150
    2788:	bb 27       	eor	r27, r27
    278a:	93 95       	inc	r25
    278c:	f6 95       	lsr	r31
    278e:	87 95       	ror	r24
    2790:	77 95       	ror	r23
    2792:	67 95       	ror	r22
    2794:	b7 95       	ror	r27
    2796:	f1 11       	cpse	r31, r1
    2798:	f8 cf       	rjmp	.-16     	; 0x278a <__floatsisf+0x1c>
    279a:	fa f4       	brpl	.+62     	; 0x27da <__floatsisf+0x6c>
    279c:	bb 0f       	add	r27, r27
    279e:	11 f4       	brne	.+4      	; 0x27a4 <__floatsisf+0x36>
    27a0:	60 ff       	sbrs	r22, 0
    27a2:	1b c0       	rjmp	.+54     	; 0x27da <__floatsisf+0x6c>
    27a4:	6f 5f       	subi	r22, 0xFF	; 255
    27a6:	7f 4f       	sbci	r23, 0xFF	; 255
    27a8:	8f 4f       	sbci	r24, 0xFF	; 255
    27aa:	9f 4f       	sbci	r25, 0xFF	; 255
    27ac:	16 c0       	rjmp	.+44     	; 0x27da <__floatsisf+0x6c>
    27ae:	88 23       	and	r24, r24
    27b0:	11 f0       	breq	.+4      	; 0x27b6 <__floatsisf+0x48>
    27b2:	96 e9       	ldi	r25, 0x96	; 150
    27b4:	11 c0       	rjmp	.+34     	; 0x27d8 <__floatsisf+0x6a>
    27b6:	77 23       	and	r23, r23
    27b8:	21 f0       	breq	.+8      	; 0x27c2 <__floatsisf+0x54>
    27ba:	9e e8       	ldi	r25, 0x8E	; 142
    27bc:	87 2f       	mov	r24, r23
    27be:	76 2f       	mov	r23, r22
    27c0:	05 c0       	rjmp	.+10     	; 0x27cc <__floatsisf+0x5e>
    27c2:	66 23       	and	r22, r22
    27c4:	71 f0       	breq	.+28     	; 0x27e2 <__floatsisf+0x74>
    27c6:	96 e8       	ldi	r25, 0x86	; 134
    27c8:	86 2f       	mov	r24, r22
    27ca:	70 e0       	ldi	r23, 0x00	; 0
    27cc:	60 e0       	ldi	r22, 0x00	; 0
    27ce:	2a f0       	brmi	.+10     	; 0x27da <__floatsisf+0x6c>
    27d0:	9a 95       	dec	r25
    27d2:	66 0f       	add	r22, r22
    27d4:	77 1f       	adc	r23, r23
    27d6:	88 1f       	adc	r24, r24
    27d8:	da f7       	brpl	.-10     	; 0x27d0 <__floatsisf+0x62>
    27da:	88 0f       	add	r24, r24
    27dc:	96 95       	lsr	r25
    27de:	87 95       	ror	r24
    27e0:	97 f9       	bld	r25, 7
    27e2:	08 95       	ret

000027e4 <__fp_inf>:
    27e4:	97 f9       	bld	r25, 7
    27e6:	9f 67       	ori	r25, 0x7F	; 127
    27e8:	80 e8       	ldi	r24, 0x80	; 128
    27ea:	70 e0       	ldi	r23, 0x00	; 0
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	08 95       	ret

000027f0 <__fp_nan>:
    27f0:	9f ef       	ldi	r25, 0xFF	; 255
    27f2:	80 ec       	ldi	r24, 0xC0	; 192
    27f4:	08 95       	ret

000027f6 <__fp_pscA>:
    27f6:	00 24       	eor	r0, r0
    27f8:	0a 94       	dec	r0
    27fa:	16 16       	cp	r1, r22
    27fc:	17 06       	cpc	r1, r23
    27fe:	18 06       	cpc	r1, r24
    2800:	09 06       	cpc	r0, r25
    2802:	08 95       	ret

00002804 <__fp_pscB>:
    2804:	00 24       	eor	r0, r0
    2806:	0a 94       	dec	r0
    2808:	12 16       	cp	r1, r18
    280a:	13 06       	cpc	r1, r19
    280c:	14 06       	cpc	r1, r20
    280e:	05 06       	cpc	r0, r21
    2810:	08 95       	ret

00002812 <__fp_round>:
    2812:	09 2e       	mov	r0, r25
    2814:	03 94       	inc	r0
    2816:	00 0c       	add	r0, r0
    2818:	11 f4       	brne	.+4      	; 0x281e <__fp_round+0xc>
    281a:	88 23       	and	r24, r24
    281c:	52 f0       	brmi	.+20     	; 0x2832 <__fp_round+0x20>
    281e:	bb 0f       	add	r27, r27
    2820:	40 f4       	brcc	.+16     	; 0x2832 <__fp_round+0x20>
    2822:	bf 2b       	or	r27, r31
    2824:	11 f4       	brne	.+4      	; 0x282a <__fp_round+0x18>
    2826:	60 ff       	sbrs	r22, 0
    2828:	04 c0       	rjmp	.+8      	; 0x2832 <__fp_round+0x20>
    282a:	6f 5f       	subi	r22, 0xFF	; 255
    282c:	7f 4f       	sbci	r23, 0xFF	; 255
    282e:	8f 4f       	sbci	r24, 0xFF	; 255
    2830:	9f 4f       	sbci	r25, 0xFF	; 255
    2832:	08 95       	ret

00002834 <__fp_split3>:
    2834:	57 fd       	sbrc	r21, 7
    2836:	90 58       	subi	r25, 0x80	; 128
    2838:	44 0f       	add	r20, r20
    283a:	55 1f       	adc	r21, r21
    283c:	59 f0       	breq	.+22     	; 0x2854 <__fp_splitA+0x10>
    283e:	5f 3f       	cpi	r21, 0xFF	; 255
    2840:	71 f0       	breq	.+28     	; 0x285e <__fp_splitA+0x1a>
    2842:	47 95       	ror	r20

00002844 <__fp_splitA>:
    2844:	88 0f       	add	r24, r24
    2846:	97 fb       	bst	r25, 7
    2848:	99 1f       	adc	r25, r25
    284a:	61 f0       	breq	.+24     	; 0x2864 <__fp_splitA+0x20>
    284c:	9f 3f       	cpi	r25, 0xFF	; 255
    284e:	79 f0       	breq	.+30     	; 0x286e <__fp_splitA+0x2a>
    2850:	87 95       	ror	r24
    2852:	08 95       	ret
    2854:	12 16       	cp	r1, r18
    2856:	13 06       	cpc	r1, r19
    2858:	14 06       	cpc	r1, r20
    285a:	55 1f       	adc	r21, r21
    285c:	f2 cf       	rjmp	.-28     	; 0x2842 <__fp_split3+0xe>
    285e:	46 95       	lsr	r20
    2860:	f1 df       	rcall	.-30     	; 0x2844 <__fp_splitA>
    2862:	08 c0       	rjmp	.+16     	; 0x2874 <__fp_splitA+0x30>
    2864:	16 16       	cp	r1, r22
    2866:	17 06       	cpc	r1, r23
    2868:	18 06       	cpc	r1, r24
    286a:	99 1f       	adc	r25, r25
    286c:	f1 cf       	rjmp	.-30     	; 0x2850 <__fp_splitA+0xc>
    286e:	86 95       	lsr	r24
    2870:	71 05       	cpc	r23, r1
    2872:	61 05       	cpc	r22, r1
    2874:	08 94       	sec
    2876:	08 95       	ret

00002878 <__fp_zero>:
    2878:	e8 94       	clt

0000287a <__fp_szero>:
    287a:	bb 27       	eor	r27, r27
    287c:	66 27       	eor	r22, r22
    287e:	77 27       	eor	r23, r23
    2880:	cb 01       	movw	r24, r22
    2882:	97 f9       	bld	r25, 7
    2884:	08 95       	ret

00002886 <log10>:
    2886:	0e 94 53 14 	call	0x28a6	; 0x28a6 <log>
    288a:	29 ed       	ldi	r18, 0xD9	; 217
    288c:	3b e5       	ldi	r19, 0x5B	; 91
    288e:	4e ed       	ldi	r20, 0xDE	; 222
    2890:	5e e3       	ldi	r21, 0x3E	; 62
    2892:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__mulsf3>
    2896:	16 f0       	brts	.+4      	; 0x289c <log10+0x16>
    2898:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__fp_mpack>
    289c:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    28a0:	68 94       	set
    28a2:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>

000028a6 <log>:
    28a6:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_splitA>
    28aa:	a8 f3       	brcs	.-22     	; 0x2896 <log10+0x10>
    28ac:	99 23       	and	r25, r25
    28ae:	c1 f3       	breq	.-16     	; 0x28a0 <log10+0x1a>
    28b0:	ae f3       	brts	.-22     	; 0x289c <log10+0x16>
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	1f 93       	push	r17
    28b8:	0f 93       	push	r16
    28ba:	ff 92       	push	r15
    28bc:	c9 2f       	mov	r28, r25
    28be:	dd 27       	eor	r29, r29
    28c0:	88 23       	and	r24, r24
    28c2:	2a f0       	brmi	.+10     	; 0x28ce <log+0x28>
    28c4:	21 97       	sbiw	r28, 0x01	; 1
    28c6:	66 0f       	add	r22, r22
    28c8:	77 1f       	adc	r23, r23
    28ca:	88 1f       	adc	r24, r24
    28cc:	da f7       	brpl	.-10     	; 0x28c4 <log+0x1e>
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f eb       	ldi	r21, 0xBF	; 191
    28d6:	9f e3       	ldi	r25, 0x3F	; 63
    28d8:	88 39       	cpi	r24, 0x98	; 152
    28da:	20 f0       	brcs	.+8      	; 0x28e4 <log+0x3e>
    28dc:	80 3e       	cpi	r24, 0xE0	; 224
    28de:	38 f0       	brcs	.+14     	; 0x28ee <log+0x48>
    28e0:	21 96       	adiw	r28, 0x01	; 1
    28e2:	8f 77       	andi	r24, 0x7F	; 127
    28e4:	0e 94 13 13 	call	0x2626	; 0x2626 <__addsf3>
    28e8:	ec e7       	ldi	r30, 0x7C	; 124
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	04 c0       	rjmp	.+8      	; 0x28f6 <log+0x50>
    28ee:	0e 94 13 13 	call	0x2626	; 0x2626 <__addsf3>
    28f2:	e9 ea       	ldi	r30, 0xA9	; 169
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__fp_powser>
    28fa:	8b 01       	movw	r16, r22
    28fc:	be 01       	movw	r22, r28
    28fe:	ec 01       	movw	r28, r24
    2900:	fb 2e       	mov	r15, r27
    2902:	6f 57       	subi	r22, 0x7F	; 127
    2904:	71 09       	sbc	r23, r1
    2906:	75 95       	asr	r23
    2908:	77 1f       	adc	r23, r23
    290a:	88 0b       	sbc	r24, r24
    290c:	99 0b       	sbc	r25, r25
    290e:	0e 94 b7 13 	call	0x276e	; 0x276e <__floatsisf>
    2912:	28 e1       	ldi	r18, 0x18	; 24
    2914:	32 e7       	ldi	r19, 0x72	; 114
    2916:	41 e3       	ldi	r20, 0x31	; 49
    2918:	5f e3       	ldi	r21, 0x3F	; 63
    291a:	0e 94 ae 14 	call	0x295c	; 0x295c <__mulsf3x>
    291e:	af 2d       	mov	r26, r15
    2920:	98 01       	movw	r18, r16
    2922:	ae 01       	movw	r20, r28
    2924:	ff 90       	pop	r15
    2926:	0f 91       	pop	r16
    2928:	1f 91       	pop	r17
    292a:	cf 91       	pop	r28
    292c:	df 91       	pop	r29
    292e:	0e 94 2a 13 	call	0x2654	; 0x2654 <__addsf3x>
    2932:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_round>

00002936 <__mulsf3>:
    2936:	0e 94 ae 14 	call	0x295c	; 0x295c <__mulsf3x>
    293a:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_round>
    293e:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__fp_pscA>
    2942:	38 f0       	brcs	.+14     	; 0x2952 <__mulsf3+0x1c>
    2944:	0e 94 02 14 	call	0x2804	; 0x2804 <__fp_pscB>
    2948:	20 f0       	brcs	.+8      	; 0x2952 <__mulsf3+0x1c>
    294a:	95 23       	and	r25, r21
    294c:	11 f0       	breq	.+4      	; 0x2952 <__mulsf3+0x1c>
    294e:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    2952:	0c 94 f8 13 	jmp	0x27f0	; 0x27f0 <__fp_nan>
    2956:	11 24       	eor	r1, r1
    2958:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_szero>

0000295c <__mulsf3x>:
    295c:	0e 94 1a 14 	call	0x2834	; 0x2834 <__fp_split3>
    2960:	70 f3       	brcs	.-36     	; 0x293e <__mulsf3+0x8>

00002962 <__mulsf3_pse>:
    2962:	95 9f       	mul	r25, r21
    2964:	c1 f3       	breq	.-16     	; 0x2956 <__mulsf3+0x20>
    2966:	95 0f       	add	r25, r21
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	55 1f       	adc	r21, r21
    296c:	62 9f       	mul	r22, r18
    296e:	f0 01       	movw	r30, r0
    2970:	72 9f       	mul	r23, r18
    2972:	bb 27       	eor	r27, r27
    2974:	f0 0d       	add	r31, r0
    2976:	b1 1d       	adc	r27, r1
    2978:	63 9f       	mul	r22, r19
    297a:	aa 27       	eor	r26, r26
    297c:	f0 0d       	add	r31, r0
    297e:	b1 1d       	adc	r27, r1
    2980:	aa 1f       	adc	r26, r26
    2982:	64 9f       	mul	r22, r20
    2984:	66 27       	eor	r22, r22
    2986:	b0 0d       	add	r27, r0
    2988:	a1 1d       	adc	r26, r1
    298a:	66 1f       	adc	r22, r22
    298c:	82 9f       	mul	r24, r18
    298e:	22 27       	eor	r18, r18
    2990:	b0 0d       	add	r27, r0
    2992:	a1 1d       	adc	r26, r1
    2994:	62 1f       	adc	r22, r18
    2996:	73 9f       	mul	r23, r19
    2998:	b0 0d       	add	r27, r0
    299a:	a1 1d       	adc	r26, r1
    299c:	62 1f       	adc	r22, r18
    299e:	83 9f       	mul	r24, r19
    29a0:	a0 0d       	add	r26, r0
    29a2:	61 1d       	adc	r22, r1
    29a4:	22 1f       	adc	r18, r18
    29a6:	74 9f       	mul	r23, r20
    29a8:	33 27       	eor	r19, r19
    29aa:	a0 0d       	add	r26, r0
    29ac:	61 1d       	adc	r22, r1
    29ae:	23 1f       	adc	r18, r19
    29b0:	84 9f       	mul	r24, r20
    29b2:	60 0d       	add	r22, r0
    29b4:	21 1d       	adc	r18, r1
    29b6:	82 2f       	mov	r24, r18
    29b8:	76 2f       	mov	r23, r22
    29ba:	6a 2f       	mov	r22, r26
    29bc:	11 24       	eor	r1, r1
    29be:	9f 57       	subi	r25, 0x7F	; 127
    29c0:	50 40       	sbci	r21, 0x00	; 0
    29c2:	9a f0       	brmi	.+38     	; 0x29ea <__mulsf3_pse+0x88>
    29c4:	f1 f0       	breq	.+60     	; 0x2a02 <__mulsf3_pse+0xa0>
    29c6:	88 23       	and	r24, r24
    29c8:	4a f0       	brmi	.+18     	; 0x29dc <__mulsf3_pse+0x7a>
    29ca:	ee 0f       	add	r30, r30
    29cc:	ff 1f       	adc	r31, r31
    29ce:	bb 1f       	adc	r27, r27
    29d0:	66 1f       	adc	r22, r22
    29d2:	77 1f       	adc	r23, r23
    29d4:	88 1f       	adc	r24, r24
    29d6:	91 50       	subi	r25, 0x01	; 1
    29d8:	50 40       	sbci	r21, 0x00	; 0
    29da:	a9 f7       	brne	.-22     	; 0x29c6 <__mulsf3_pse+0x64>
    29dc:	9e 3f       	cpi	r25, 0xFE	; 254
    29de:	51 05       	cpc	r21, r1
    29e0:	80 f0       	brcs	.+32     	; 0x2a02 <__mulsf3_pse+0xa0>
    29e2:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__fp_inf>
    29e6:	0c 94 3d 14 	jmp	0x287a	; 0x287a <__fp_szero>
    29ea:	5f 3f       	cpi	r21, 0xFF	; 255
    29ec:	e4 f3       	brlt	.-8      	; 0x29e6 <__mulsf3_pse+0x84>
    29ee:	98 3e       	cpi	r25, 0xE8	; 232
    29f0:	d4 f3       	brlt	.-12     	; 0x29e6 <__mulsf3_pse+0x84>
    29f2:	86 95       	lsr	r24
    29f4:	77 95       	ror	r23
    29f6:	67 95       	ror	r22
    29f8:	b7 95       	ror	r27
    29fa:	f7 95       	ror	r31
    29fc:	e7 95       	ror	r30
    29fe:	9f 5f       	subi	r25, 0xFF	; 255
    2a00:	c1 f7       	brne	.-16     	; 0x29f2 <__mulsf3_pse+0x90>
    2a02:	fe 2b       	or	r31, r30
    2a04:	88 0f       	add	r24, r24
    2a06:	91 1d       	adc	r25, r1
    2a08:	96 95       	lsr	r25
    2a0a:	87 95       	ror	r24
    2a0c:	97 f9       	bld	r25, 7
    2a0e:	08 95       	ret

00002a10 <__fp_mpack>:
    2a10:	9f 3f       	cpi	r25, 0xFF	; 255
    2a12:	31 f0       	breq	.+12     	; 0x2a20 <__fp_mpack_finite+0xc>

00002a14 <__fp_mpack_finite>:
    2a14:	91 50       	subi	r25, 0x01	; 1
    2a16:	20 f4       	brcc	.+8      	; 0x2a20 <__fp_mpack_finite+0xc>
    2a18:	87 95       	ror	r24
    2a1a:	77 95       	ror	r23
    2a1c:	67 95       	ror	r22
    2a1e:	b7 95       	ror	r27
    2a20:	88 0f       	add	r24, r24
    2a22:	91 1d       	adc	r25, r1
    2a24:	96 95       	lsr	r25
    2a26:	87 95       	ror	r24
    2a28:	97 f9       	bld	r25, 7
    2a2a:	08 95       	ret

00002a2c <__fp_powser>:
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	1f 93       	push	r17
    2a32:	0f 93       	push	r16
    2a34:	ff 92       	push	r15
    2a36:	ef 92       	push	r14
    2a38:	df 92       	push	r13
    2a3a:	7b 01       	movw	r14, r22
    2a3c:	8c 01       	movw	r16, r24
    2a3e:	68 94       	set
    2a40:	06 c0       	rjmp	.+12     	; 0x2a4e <__fp_powser+0x22>
    2a42:	da 2e       	mov	r13, r26
    2a44:	ef 01       	movw	r28, r30
    2a46:	0e 94 ae 14 	call	0x295c	; 0x295c <__mulsf3x>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e8 94       	clt
    2a4e:	a5 91       	lpm	r26, Z+
    2a50:	25 91       	lpm	r18, Z+
    2a52:	35 91       	lpm	r19, Z+
    2a54:	45 91       	lpm	r20, Z+
    2a56:	55 91       	lpm	r21, Z+
    2a58:	a6 f3       	brts	.-24     	; 0x2a42 <__fp_powser+0x16>
    2a5a:	ef 01       	movw	r28, r30
    2a5c:	0e 94 2a 13 	call	0x2654	; 0x2654 <__addsf3x>
    2a60:	fe 01       	movw	r30, r28
    2a62:	97 01       	movw	r18, r14
    2a64:	a8 01       	movw	r20, r16
    2a66:	da 94       	dec	r13
    2a68:	69 f7       	brne	.-38     	; 0x2a44 <__fp_powser+0x18>
    2a6a:	df 90       	pop	r13
    2a6c:	ef 90       	pop	r14
    2a6e:	ff 90       	pop	r15
    2a70:	0f 91       	pop	r16
    2a72:	1f 91       	pop	r17
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <__udivmodsi4>:
    2a7a:	a1 e2       	ldi	r26, 0x21	; 33
    2a7c:	1a 2e       	mov	r1, r26
    2a7e:	aa 1b       	sub	r26, r26
    2a80:	bb 1b       	sub	r27, r27
    2a82:	fd 01       	movw	r30, r26
    2a84:	0d c0       	rjmp	.+26     	; 0x2aa0 <__udivmodsi4_ep>

00002a86 <__udivmodsi4_loop>:
    2a86:	aa 1f       	adc	r26, r26
    2a88:	bb 1f       	adc	r27, r27
    2a8a:	ee 1f       	adc	r30, r30
    2a8c:	ff 1f       	adc	r31, r31
    2a8e:	a2 17       	cp	r26, r18
    2a90:	b3 07       	cpc	r27, r19
    2a92:	e4 07       	cpc	r30, r20
    2a94:	f5 07       	cpc	r31, r21
    2a96:	20 f0       	brcs	.+8      	; 0x2aa0 <__udivmodsi4_ep>
    2a98:	a2 1b       	sub	r26, r18
    2a9a:	b3 0b       	sbc	r27, r19
    2a9c:	e4 0b       	sbc	r30, r20
    2a9e:	f5 0b       	sbc	r31, r21

00002aa0 <__udivmodsi4_ep>:
    2aa0:	66 1f       	adc	r22, r22
    2aa2:	77 1f       	adc	r23, r23
    2aa4:	88 1f       	adc	r24, r24
    2aa6:	99 1f       	adc	r25, r25
    2aa8:	1a 94       	dec	r1
    2aaa:	69 f7       	brne	.-38     	; 0x2a86 <__udivmodsi4_loop>
    2aac:	60 95       	com	r22
    2aae:	70 95       	com	r23
    2ab0:	80 95       	com	r24
    2ab2:	90 95       	com	r25
    2ab4:	9b 01       	movw	r18, r22
    2ab6:	ac 01       	movw	r20, r24
    2ab8:	bd 01       	movw	r22, r26
    2aba:	cf 01       	movw	r24, r30
    2abc:	08 95       	ret

00002abe <__divmodsi4>:
    2abe:	05 2e       	mov	r0, r21
    2ac0:	97 fb       	bst	r25, 7
    2ac2:	1e f4       	brtc	.+6      	; 0x2aca <__divmodsi4+0xc>
    2ac4:	00 94       	com	r0
    2ac6:	0e 94 76 15 	call	0x2aec	; 0x2aec <__negsi2>
    2aca:	57 fd       	sbrc	r21, 7
    2acc:	07 d0       	rcall	.+14     	; 0x2adc <__divmodsi4_neg2>
    2ace:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <__udivmodsi4>
    2ad2:	07 fc       	sbrc	r0, 7
    2ad4:	03 d0       	rcall	.+6      	; 0x2adc <__divmodsi4_neg2>
    2ad6:	4e f4       	brtc	.+18     	; 0x2aea <__divmodsi4_exit>
    2ad8:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__negsi2>

00002adc <__divmodsi4_neg2>:
    2adc:	50 95       	com	r21
    2ade:	40 95       	com	r20
    2ae0:	30 95       	com	r19
    2ae2:	21 95       	neg	r18
    2ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae6:	4f 4f       	sbci	r20, 0xFF	; 255
    2ae8:	5f 4f       	sbci	r21, 0xFF	; 255

00002aea <__divmodsi4_exit>:
    2aea:	08 95       	ret

00002aec <__negsi2>:
    2aec:	90 95       	com	r25
    2aee:	80 95       	com	r24
    2af0:	70 95       	com	r23
    2af2:	61 95       	neg	r22
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	8f 4f       	sbci	r24, 0xFF	; 255
    2af8:	9f 4f       	sbci	r25, 0xFF	; 255
    2afa:	08 95       	ret

00002afc <do_rand>:
    2afc:	8f 92       	push	r8
    2afe:	9f 92       	push	r9
    2b00:	af 92       	push	r10
    2b02:	bf 92       	push	r11
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	cf 93       	push	r28
    2b0e:	df 93       	push	r29
    2b10:	ec 01       	movw	r28, r24
    2b12:	68 81       	ld	r22, Y
    2b14:	79 81       	ldd	r23, Y+1	; 0x01
    2b16:	8a 81       	ldd	r24, Y+2	; 0x02
    2b18:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1a:	61 15       	cp	r22, r1
    2b1c:	71 05       	cpc	r23, r1
    2b1e:	81 05       	cpc	r24, r1
    2b20:	91 05       	cpc	r25, r1
    2b22:	21 f4       	brne	.+8      	; 0x2b2c <do_rand+0x30>
    2b24:	64 e2       	ldi	r22, 0x24	; 36
    2b26:	79 ed       	ldi	r23, 0xD9	; 217
    2b28:	8b e5       	ldi	r24, 0x5B	; 91
    2b2a:	97 e0       	ldi	r25, 0x07	; 7
    2b2c:	2d e1       	ldi	r18, 0x1D	; 29
    2b2e:	33 ef       	ldi	r19, 0xF3	; 243
    2b30:	41 e0       	ldi	r20, 0x01	; 1
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__divmodsi4>
    2b38:	49 01       	movw	r8, r18
    2b3a:	5a 01       	movw	r10, r20
    2b3c:	9b 01       	movw	r18, r22
    2b3e:	ac 01       	movw	r20, r24
    2b40:	a7 ea       	ldi	r26, 0xA7	; 167
    2b42:	b1 e4       	ldi	r27, 0x41	; 65
    2b44:	0e 94 cd 19 	call	0x339a	; 0x339a <__muluhisi3>
    2b48:	6b 01       	movw	r12, r22
    2b4a:	7c 01       	movw	r14, r24
    2b4c:	ac ee       	ldi	r26, 0xEC	; 236
    2b4e:	b4 ef       	ldi	r27, 0xF4	; 244
    2b50:	a5 01       	movw	r20, r10
    2b52:	94 01       	movw	r18, r8
    2b54:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__mulohisi3>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	8c 0d       	add	r24, r12
    2b5e:	9d 1d       	adc	r25, r13
    2b60:	ae 1d       	adc	r26, r14
    2b62:	bf 1d       	adc	r27, r15
    2b64:	b7 ff       	sbrs	r27, 7
    2b66:	03 c0       	rjmp	.+6      	; 0x2b6e <do_rand+0x72>
    2b68:	01 97       	sbiw	r24, 0x01	; 1
    2b6a:	a1 09       	sbc	r26, r1
    2b6c:	b0 48       	sbci	r27, 0x80	; 128
    2b6e:	88 83       	st	Y, r24
    2b70:	99 83       	std	Y+1, r25	; 0x01
    2b72:	aa 83       	std	Y+2, r26	; 0x02
    2b74:	bb 83       	std	Y+3, r27	; 0x03
    2b76:	9f 77       	andi	r25, 0x7F	; 127
    2b78:	df 91       	pop	r29
    2b7a:	cf 91       	pop	r28
    2b7c:	ff 90       	pop	r15
    2b7e:	ef 90       	pop	r14
    2b80:	df 90       	pop	r13
    2b82:	cf 90       	pop	r12
    2b84:	bf 90       	pop	r11
    2b86:	af 90       	pop	r10
    2b88:	9f 90       	pop	r9
    2b8a:	8f 90       	pop	r8
    2b8c:	08 95       	ret

00002b8e <rand_r>:
    2b8e:	0e 94 7e 15 	call	0x2afc	; 0x2afc <do_rand>
    2b92:	08 95       	ret

00002b94 <rand>:
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	91 e0       	ldi	r25, 0x01	; 1
    2b98:	0e 94 7e 15 	call	0x2afc	; 0x2afc <do_rand>
    2b9c:	08 95       	ret

00002b9e <srand>:
    2b9e:	a0 e0       	ldi	r26, 0x00	; 0
    2ba0:	b0 e0       	ldi	r27, 0x00	; 0
    2ba2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2ba6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2baa:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2bae:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2bb2:	08 95       	ret

00002bb4 <random_r>:
    2bb4:	8f 92       	push	r8
    2bb6:	9f 92       	push	r9
    2bb8:	af 92       	push	r10
    2bba:	bf 92       	push	r11
    2bbc:	cf 92       	push	r12
    2bbe:	df 92       	push	r13
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	ec 01       	movw	r28, r24
    2bca:	68 81       	ld	r22, Y
    2bcc:	79 81       	ldd	r23, Y+1	; 0x01
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	61 15       	cp	r22, r1
    2bd4:	71 05       	cpc	r23, r1
    2bd6:	81 05       	cpc	r24, r1
    2bd8:	91 05       	cpc	r25, r1
    2bda:	21 f4       	brne	.+8      	; 0x2be4 <random_r+0x30>
    2bdc:	64 e2       	ldi	r22, 0x24	; 36
    2bde:	79 ed       	ldi	r23, 0xD9	; 217
    2be0:	8b e5       	ldi	r24, 0x5B	; 91
    2be2:	97 e0       	ldi	r25, 0x07	; 7
    2be4:	2d e1       	ldi	r18, 0x1D	; 29
    2be6:	33 ef       	ldi	r19, 0xF3	; 243
    2be8:	41 e0       	ldi	r20, 0x01	; 1
    2bea:	50 e0       	ldi	r21, 0x00	; 0
    2bec:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__divmodsi4>
    2bf0:	49 01       	movw	r8, r18
    2bf2:	5a 01       	movw	r10, r20
    2bf4:	9b 01       	movw	r18, r22
    2bf6:	ac 01       	movw	r20, r24
    2bf8:	a7 ea       	ldi	r26, 0xA7	; 167
    2bfa:	b1 e4       	ldi	r27, 0x41	; 65
    2bfc:	0e 94 cd 19 	call	0x339a	; 0x339a <__muluhisi3>
    2c00:	6b 01       	movw	r12, r22
    2c02:	7c 01       	movw	r14, r24
    2c04:	ac ee       	ldi	r26, 0xEC	; 236
    2c06:	b4 ef       	ldi	r27, 0xF4	; 244
    2c08:	a5 01       	movw	r20, r10
    2c0a:	94 01       	movw	r18, r8
    2c0c:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__mulohisi3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	8c 0d       	add	r24, r12
    2c16:	9d 1d       	adc	r25, r13
    2c18:	ae 1d       	adc	r26, r14
    2c1a:	bf 1d       	adc	r27, r15
    2c1c:	b7 ff       	sbrs	r27, 7
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <random_r+0x72>
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	a1 09       	sbc	r26, r1
    2c24:	b0 48       	sbci	r27, 0x80	; 128
    2c26:	88 83       	st	Y, r24
    2c28:	99 83       	std	Y+1, r25	; 0x01
    2c2a:	aa 83       	std	Y+2, r26	; 0x02
    2c2c:	bb 83       	std	Y+3, r27	; 0x03
    2c2e:	bc 01       	movw	r22, r24
    2c30:	cd 01       	movw	r24, r26
    2c32:	9f 77       	andi	r25, 0x7F	; 127
    2c34:	df 91       	pop	r29
    2c36:	cf 91       	pop	r28
    2c38:	ff 90       	pop	r15
    2c3a:	ef 90       	pop	r14
    2c3c:	df 90       	pop	r13
    2c3e:	cf 90       	pop	r12
    2c40:	bf 90       	pop	r11
    2c42:	af 90       	pop	r10
    2c44:	9f 90       	pop	r9
    2c46:	8f 90       	pop	r8
    2c48:	08 95       	ret

00002c4a <random>:
    2c4a:	8f 92       	push	r8
    2c4c:	9f 92       	push	r9
    2c4e:	af 92       	push	r10
    2c50:	bf 92       	push	r11
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2c5e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    2c62:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    2c66:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    2c6a:	61 15       	cp	r22, r1
    2c6c:	71 05       	cpc	r23, r1
    2c6e:	81 05       	cpc	r24, r1
    2c70:	91 05       	cpc	r25, r1
    2c72:	21 f4       	brne	.+8      	; 0x2c7c <random+0x32>
    2c74:	64 e2       	ldi	r22, 0x24	; 36
    2c76:	79 ed       	ldi	r23, 0xD9	; 217
    2c78:	8b e5       	ldi	r24, 0x5B	; 91
    2c7a:	97 e0       	ldi	r25, 0x07	; 7
    2c7c:	2d e1       	ldi	r18, 0x1D	; 29
    2c7e:	33 ef       	ldi	r19, 0xF3	; 243
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	50 e0       	ldi	r21, 0x00	; 0
    2c84:	0e 94 5f 15 	call	0x2abe	; 0x2abe <__divmodsi4>
    2c88:	49 01       	movw	r8, r18
    2c8a:	5a 01       	movw	r10, r20
    2c8c:	9b 01       	movw	r18, r22
    2c8e:	ac 01       	movw	r20, r24
    2c90:	a7 ea       	ldi	r26, 0xA7	; 167
    2c92:	b1 e4       	ldi	r27, 0x41	; 65
    2c94:	0e 94 cd 19 	call	0x339a	; 0x339a <__muluhisi3>
    2c98:	6b 01       	movw	r12, r22
    2c9a:	7c 01       	movw	r14, r24
    2c9c:	ac ee       	ldi	r26, 0xEC	; 236
    2c9e:	b4 ef       	ldi	r27, 0xF4	; 244
    2ca0:	a5 01       	movw	r20, r10
    2ca2:	94 01       	movw	r18, r8
    2ca4:	0e 94 db 19 	call	0x33b6	; 0x33b6 <__mulohisi3>
    2ca8:	dc 01       	movw	r26, r24
    2caa:	cb 01       	movw	r24, r22
    2cac:	8c 0d       	add	r24, r12
    2cae:	9d 1d       	adc	r25, r13
    2cb0:	ae 1d       	adc	r26, r14
    2cb2:	bf 1d       	adc	r27, r15
    2cb4:	b7 ff       	sbrs	r27, 7
    2cb6:	03 c0       	rjmp	.+6      	; 0x2cbe <random+0x74>
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	a1 09       	sbc	r26, r1
    2cbc:	b0 48       	sbci	r27, 0x80	; 128
    2cbe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2cc2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2cc6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2cca:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	9f 77       	andi	r25, 0x7F	; 127
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	df 90       	pop	r13
    2cda:	cf 90       	pop	r12
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	08 95       	ret

00002ce6 <srandom>:
    2ce6:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2cea:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2cee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2cf2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2cf6:	08 95       	ret

00002cf8 <fgetc>:
    2cf8:	cf 93       	push	r28
    2cfa:	df 93       	push	r29
    2cfc:	ec 01       	movw	r28, r24
    2cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    2d00:	20 ff       	sbrs	r18, 0
    2d02:	33 c0       	rjmp	.+102    	; 0x2d6a <fgetc+0x72>
    2d04:	26 ff       	sbrs	r18, 6
    2d06:	0a c0       	rjmp	.+20     	; 0x2d1c <fgetc+0x24>
    2d08:	2f 7b       	andi	r18, 0xBF	; 191
    2d0a:	2b 83       	std	Y+3, r18	; 0x03
    2d0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2d10:	01 96       	adiw	r24, 0x01	; 1
    2d12:	9f 83       	std	Y+7, r25	; 0x07
    2d14:	8e 83       	std	Y+6, r24	; 0x06
    2d16:	8a 81       	ldd	r24, Y+2	; 0x02
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	29 c0       	rjmp	.+82     	; 0x2d6e <fgetc+0x76>
    2d1c:	22 ff       	sbrs	r18, 2
    2d1e:	0f c0       	rjmp	.+30     	; 0x2d3e <fgetc+0x46>
    2d20:	e8 81       	ld	r30, Y
    2d22:	f9 81       	ldd	r31, Y+1	; 0x01
    2d24:	80 81       	ld	r24, Z
    2d26:	08 2e       	mov	r0, r24
    2d28:	00 0c       	add	r0, r0
    2d2a:	99 0b       	sbc	r25, r25
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	19 f4       	brne	.+6      	; 0x2d36 <fgetc+0x3e>
    2d30:	20 62       	ori	r18, 0x20	; 32
    2d32:	2b 83       	std	Y+3, r18	; 0x03
    2d34:	1a c0       	rjmp	.+52     	; 0x2d6a <fgetc+0x72>
    2d36:	31 96       	adiw	r30, 0x01	; 1
    2d38:	f9 83       	std	Y+1, r31	; 0x01
    2d3a:	e8 83       	st	Y, r30
    2d3c:	0e c0       	rjmp	.+28     	; 0x2d5a <fgetc+0x62>
    2d3e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d40:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d42:	09 95       	icall
    2d44:	97 ff       	sbrs	r25, 7
    2d46:	09 c0       	rjmp	.+18     	; 0x2d5a <fgetc+0x62>
    2d48:	2b 81       	ldd	r18, Y+3	; 0x03
    2d4a:	01 96       	adiw	r24, 0x01	; 1
    2d4c:	11 f0       	breq	.+4      	; 0x2d52 <fgetc+0x5a>
    2d4e:	80 e2       	ldi	r24, 0x20	; 32
    2d50:	01 c0       	rjmp	.+2      	; 0x2d54 <fgetc+0x5c>
    2d52:	80 e1       	ldi	r24, 0x10	; 16
    2d54:	82 2b       	or	r24, r18
    2d56:	8b 83       	std	Y+3, r24	; 0x03
    2d58:	08 c0       	rjmp	.+16     	; 0x2d6a <fgetc+0x72>
    2d5a:	2e 81       	ldd	r18, Y+6	; 0x06
    2d5c:	3f 81       	ldd	r19, Y+7	; 0x07
    2d5e:	2f 5f       	subi	r18, 0xFF	; 255
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	3f 83       	std	Y+7, r19	; 0x07
    2d64:	2e 83       	std	Y+6, r18	; 0x06
    2d66:	99 27       	eor	r25, r25
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <fgetc+0x76>
    2d6a:	8f ef       	ldi	r24, 0xFF	; 255
    2d6c:	9f ef       	ldi	r25, 0xFF	; 255
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	08 95       	ret

00002d74 <printf>:
    2d74:	a0 e0       	ldi	r26, 0x00	; 0
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	e0 ec       	ldi	r30, 0xC0	; 192
    2d7a:	f6 e1       	ldi	r31, 0x16	; 22
    2d7c:	0c 94 f0 19 	jmp	0x33e0	; 0x33e0 <__prologue_saves__+0x20>
    2d80:	ae 01       	movw	r20, r28
    2d82:	4b 5f       	subi	r20, 0xFB	; 251
    2d84:	5f 4f       	sbci	r21, 0xFF	; 255
    2d86:	fa 01       	movw	r30, r20
    2d88:	61 91       	ld	r22, Z+
    2d8a:	71 91       	ld	r23, Z+
    2d8c:	af 01       	movw	r20, r30
    2d8e:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <__iob+0x2>
    2d92:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <__iob+0x3>
    2d96:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <vfprintf>
    2d9a:	e2 e0       	ldi	r30, 0x02	; 2
    2d9c:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__epilogue_restores__+0x20>

00002da0 <printf_P>:
    2da0:	a0 e0       	ldi	r26, 0x00	; 0
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e6 ed       	ldi	r30, 0xD6	; 214
    2da6:	f6 e1       	ldi	r31, 0x16	; 22
    2da8:	0c 94 ee 19 	jmp	0x33dc	; 0x33dc <__prologue_saves__+0x1c>
    2dac:	ae 01       	movw	r20, r28
    2dae:	49 5f       	subi	r20, 0xF9	; 249
    2db0:	5f 4f       	sbci	r21, 0xFF	; 255
    2db2:	da 01       	movw	r26, r20
    2db4:	6d 91       	ld	r22, X+
    2db6:	7d 91       	ld	r23, X+
    2db8:	ad 01       	movw	r20, r26
    2dba:	01 e2       	ldi	r16, 0x21	; 33
    2dbc:	14 e0       	ldi	r17, 0x04	; 4
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	82 81       	ldd	r24, Z+2	; 0x02
    2dc2:	93 81       	ldd	r25, Z+3	; 0x03
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	13 96       	adiw	r26, 0x03	; 3
    2dc8:	2c 91       	ld	r18, X
    2dca:	13 97       	sbiw	r26, 0x03	; 3
    2dcc:	28 60       	ori	r18, 0x08	; 8
    2dce:	13 96       	adiw	r26, 0x03	; 3
    2dd0:	2c 93       	st	X, r18
    2dd2:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <vfprintf>
    2dd6:	d8 01       	movw	r26, r16
    2dd8:	12 96       	adiw	r26, 0x02	; 2
    2dda:	ed 91       	ld	r30, X+
    2ddc:	fc 91       	ld	r31, X
    2dde:	13 97       	sbiw	r26, 0x03	; 3
    2de0:	23 81       	ldd	r18, Z+3	; 0x03
    2de2:	27 7f       	andi	r18, 0xF7	; 247
    2de4:	23 83       	std	Z+3, r18	; 0x03
    2de6:	e4 e0       	ldi	r30, 0x04	; 4
    2de8:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <__epilogue_restores__+0x1c>

00002dec <putchar>:
    2dec:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <__iob+0x2>
    2df0:	70 91 24 04 	lds	r23, 0x0424	; 0x800424 <__iob+0x3>
    2df4:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    2df8:	08 95       	ret

00002dfa <vfprintf>:
    2dfa:	ab e0       	ldi	r26, 0x0B	; 11
    2dfc:	b0 e0       	ldi	r27, 0x00	; 0
    2dfe:	e3 e0       	ldi	r30, 0x03	; 3
    2e00:	f7 e1       	ldi	r31, 0x17	; 23
    2e02:	0c 94 e0 19 	jmp	0x33c0	; 0x33c0 <__prologue_saves__>
    2e06:	6c 01       	movw	r12, r24
    2e08:	7b 01       	movw	r14, r22
    2e0a:	8a 01       	movw	r16, r20
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	17 82       	std	Z+7, r1	; 0x07
    2e10:	16 82       	std	Z+6, r1	; 0x06
    2e12:	83 81       	ldd	r24, Z+3	; 0x03
    2e14:	81 ff       	sbrs	r24, 1
    2e16:	cc c1       	rjmp	.+920    	; 0x31b0 <vfprintf+0x3b6>
    2e18:	ce 01       	movw	r24, r28
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	3c 01       	movw	r6, r24
    2e1e:	f6 01       	movw	r30, r12
    2e20:	93 81       	ldd	r25, Z+3	; 0x03
    2e22:	f7 01       	movw	r30, r14
    2e24:	93 fd       	sbrc	r25, 3
    2e26:	85 91       	lpm	r24, Z+
    2e28:	93 ff       	sbrs	r25, 3
    2e2a:	81 91       	ld	r24, Z+
    2e2c:	7f 01       	movw	r14, r30
    2e2e:	88 23       	and	r24, r24
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <vfprintf+0x3a>
    2e32:	ba c1       	rjmp	.+884    	; 0x31a8 <vfprintf+0x3ae>
    2e34:	85 32       	cpi	r24, 0x25	; 37
    2e36:	39 f4       	brne	.+14     	; 0x2e46 <vfprintf+0x4c>
    2e38:	93 fd       	sbrc	r25, 3
    2e3a:	85 91       	lpm	r24, Z+
    2e3c:	93 ff       	sbrs	r25, 3
    2e3e:	81 91       	ld	r24, Z+
    2e40:	7f 01       	movw	r14, r30
    2e42:	85 32       	cpi	r24, 0x25	; 37
    2e44:	29 f4       	brne	.+10     	; 0x2e50 <vfprintf+0x56>
    2e46:	b6 01       	movw	r22, r12
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    2e4e:	e7 cf       	rjmp	.-50     	; 0x2e1e <vfprintf+0x24>
    2e50:	91 2c       	mov	r9, r1
    2e52:	21 2c       	mov	r2, r1
    2e54:	31 2c       	mov	r3, r1
    2e56:	ff e1       	ldi	r31, 0x1F	; 31
    2e58:	f3 15       	cp	r31, r3
    2e5a:	d8 f0       	brcs	.+54     	; 0x2e92 <vfprintf+0x98>
    2e5c:	8b 32       	cpi	r24, 0x2B	; 43
    2e5e:	79 f0       	breq	.+30     	; 0x2e7e <vfprintf+0x84>
    2e60:	38 f4       	brcc	.+14     	; 0x2e70 <vfprintf+0x76>
    2e62:	80 32       	cpi	r24, 0x20	; 32
    2e64:	79 f0       	breq	.+30     	; 0x2e84 <vfprintf+0x8a>
    2e66:	83 32       	cpi	r24, 0x23	; 35
    2e68:	a1 f4       	brne	.+40     	; 0x2e92 <vfprintf+0x98>
    2e6a:	23 2d       	mov	r18, r3
    2e6c:	20 61       	ori	r18, 0x10	; 16
    2e6e:	1d c0       	rjmp	.+58     	; 0x2eaa <vfprintf+0xb0>
    2e70:	8d 32       	cpi	r24, 0x2D	; 45
    2e72:	61 f0       	breq	.+24     	; 0x2e8c <vfprintf+0x92>
    2e74:	80 33       	cpi	r24, 0x30	; 48
    2e76:	69 f4       	brne	.+26     	; 0x2e92 <vfprintf+0x98>
    2e78:	23 2d       	mov	r18, r3
    2e7a:	21 60       	ori	r18, 0x01	; 1
    2e7c:	16 c0       	rjmp	.+44     	; 0x2eaa <vfprintf+0xb0>
    2e7e:	83 2d       	mov	r24, r3
    2e80:	82 60       	ori	r24, 0x02	; 2
    2e82:	38 2e       	mov	r3, r24
    2e84:	e3 2d       	mov	r30, r3
    2e86:	e4 60       	ori	r30, 0x04	; 4
    2e88:	3e 2e       	mov	r3, r30
    2e8a:	2a c0       	rjmp	.+84     	; 0x2ee0 <vfprintf+0xe6>
    2e8c:	f3 2d       	mov	r31, r3
    2e8e:	f8 60       	ori	r31, 0x08	; 8
    2e90:	1d c0       	rjmp	.+58     	; 0x2ecc <vfprintf+0xd2>
    2e92:	37 fc       	sbrc	r3, 7
    2e94:	2d c0       	rjmp	.+90     	; 0x2ef0 <vfprintf+0xf6>
    2e96:	20 ed       	ldi	r18, 0xD0	; 208
    2e98:	28 0f       	add	r18, r24
    2e9a:	2a 30       	cpi	r18, 0x0A	; 10
    2e9c:	40 f0       	brcs	.+16     	; 0x2eae <vfprintf+0xb4>
    2e9e:	8e 32       	cpi	r24, 0x2E	; 46
    2ea0:	b9 f4       	brne	.+46     	; 0x2ed0 <vfprintf+0xd6>
    2ea2:	36 fc       	sbrc	r3, 6
    2ea4:	81 c1       	rjmp	.+770    	; 0x31a8 <vfprintf+0x3ae>
    2ea6:	23 2d       	mov	r18, r3
    2ea8:	20 64       	ori	r18, 0x40	; 64
    2eaa:	32 2e       	mov	r3, r18
    2eac:	19 c0       	rjmp	.+50     	; 0x2ee0 <vfprintf+0xe6>
    2eae:	36 fe       	sbrs	r3, 6
    2eb0:	06 c0       	rjmp	.+12     	; 0x2ebe <vfprintf+0xc4>
    2eb2:	8a e0       	ldi	r24, 0x0A	; 10
    2eb4:	98 9e       	mul	r9, r24
    2eb6:	20 0d       	add	r18, r0
    2eb8:	11 24       	eor	r1, r1
    2eba:	92 2e       	mov	r9, r18
    2ebc:	11 c0       	rjmp	.+34     	; 0x2ee0 <vfprintf+0xe6>
    2ebe:	ea e0       	ldi	r30, 0x0A	; 10
    2ec0:	2e 9e       	mul	r2, r30
    2ec2:	20 0d       	add	r18, r0
    2ec4:	11 24       	eor	r1, r1
    2ec6:	22 2e       	mov	r2, r18
    2ec8:	f3 2d       	mov	r31, r3
    2eca:	f0 62       	ori	r31, 0x20	; 32
    2ecc:	3f 2e       	mov	r3, r31
    2ece:	08 c0       	rjmp	.+16     	; 0x2ee0 <vfprintf+0xe6>
    2ed0:	8c 36       	cpi	r24, 0x6C	; 108
    2ed2:	21 f4       	brne	.+8      	; 0x2edc <vfprintf+0xe2>
    2ed4:	83 2d       	mov	r24, r3
    2ed6:	80 68       	ori	r24, 0x80	; 128
    2ed8:	38 2e       	mov	r3, r24
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <vfprintf+0xe6>
    2edc:	88 36       	cpi	r24, 0x68	; 104
    2ede:	41 f4       	brne	.+16     	; 0x2ef0 <vfprintf+0xf6>
    2ee0:	f7 01       	movw	r30, r14
    2ee2:	93 fd       	sbrc	r25, 3
    2ee4:	85 91       	lpm	r24, Z+
    2ee6:	93 ff       	sbrs	r25, 3
    2ee8:	81 91       	ld	r24, Z+
    2eea:	7f 01       	movw	r14, r30
    2eec:	81 11       	cpse	r24, r1
    2eee:	b3 cf       	rjmp	.-154    	; 0x2e56 <vfprintf+0x5c>
    2ef0:	98 2f       	mov	r25, r24
    2ef2:	9f 7d       	andi	r25, 0xDF	; 223
    2ef4:	95 54       	subi	r25, 0x45	; 69
    2ef6:	93 30       	cpi	r25, 0x03	; 3
    2ef8:	28 f4       	brcc	.+10     	; 0x2f04 <vfprintf+0x10a>
    2efa:	0c 5f       	subi	r16, 0xFC	; 252
    2efc:	1f 4f       	sbci	r17, 0xFF	; 255
    2efe:	9f e3       	ldi	r25, 0x3F	; 63
    2f00:	99 83       	std	Y+1, r25	; 0x01
    2f02:	0d c0       	rjmp	.+26     	; 0x2f1e <vfprintf+0x124>
    2f04:	83 36       	cpi	r24, 0x63	; 99
    2f06:	31 f0       	breq	.+12     	; 0x2f14 <vfprintf+0x11a>
    2f08:	83 37       	cpi	r24, 0x73	; 115
    2f0a:	71 f0       	breq	.+28     	; 0x2f28 <vfprintf+0x12e>
    2f0c:	83 35       	cpi	r24, 0x53	; 83
    2f0e:	09 f0       	breq	.+2      	; 0x2f12 <vfprintf+0x118>
    2f10:	59 c0       	rjmp	.+178    	; 0x2fc4 <vfprintf+0x1ca>
    2f12:	21 c0       	rjmp	.+66     	; 0x2f56 <vfprintf+0x15c>
    2f14:	f8 01       	movw	r30, r16
    2f16:	80 81       	ld	r24, Z
    2f18:	89 83       	std	Y+1, r24	; 0x01
    2f1a:	0e 5f       	subi	r16, 0xFE	; 254
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1e:	88 24       	eor	r8, r8
    2f20:	83 94       	inc	r8
    2f22:	91 2c       	mov	r9, r1
    2f24:	53 01       	movw	r10, r6
    2f26:	13 c0       	rjmp	.+38     	; 0x2f4e <vfprintf+0x154>
    2f28:	28 01       	movw	r4, r16
    2f2a:	f2 e0       	ldi	r31, 0x02	; 2
    2f2c:	4f 0e       	add	r4, r31
    2f2e:	51 1c       	adc	r5, r1
    2f30:	f8 01       	movw	r30, r16
    2f32:	a0 80       	ld	r10, Z
    2f34:	b1 80       	ldd	r11, Z+1	; 0x01
    2f36:	36 fe       	sbrs	r3, 6
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <vfprintf+0x146>
    2f3a:	69 2d       	mov	r22, r9
    2f3c:	70 e0       	ldi	r23, 0x00	; 0
    2f3e:	02 c0       	rjmp	.+4      	; 0x2f44 <vfprintf+0x14a>
    2f40:	6f ef       	ldi	r22, 0xFF	; 255
    2f42:	7f ef       	ldi	r23, 0xFF	; 255
    2f44:	c5 01       	movw	r24, r10
    2f46:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <strnlen>
    2f4a:	4c 01       	movw	r8, r24
    2f4c:	82 01       	movw	r16, r4
    2f4e:	f3 2d       	mov	r31, r3
    2f50:	ff 77       	andi	r31, 0x7F	; 127
    2f52:	3f 2e       	mov	r3, r31
    2f54:	16 c0       	rjmp	.+44     	; 0x2f82 <vfprintf+0x188>
    2f56:	28 01       	movw	r4, r16
    2f58:	22 e0       	ldi	r18, 0x02	; 2
    2f5a:	42 0e       	add	r4, r18
    2f5c:	51 1c       	adc	r5, r1
    2f5e:	f8 01       	movw	r30, r16
    2f60:	a0 80       	ld	r10, Z
    2f62:	b1 80       	ldd	r11, Z+1	; 0x01
    2f64:	36 fe       	sbrs	r3, 6
    2f66:	03 c0       	rjmp	.+6      	; 0x2f6e <vfprintf+0x174>
    2f68:	69 2d       	mov	r22, r9
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <vfprintf+0x178>
    2f6e:	6f ef       	ldi	r22, 0xFF	; 255
    2f70:	7f ef       	ldi	r23, 0xFF	; 255
    2f72:	c5 01       	movw	r24, r10
    2f74:	0e 94 de 18 	call	0x31bc	; 0x31bc <strnlen_P>
    2f78:	4c 01       	movw	r8, r24
    2f7a:	f3 2d       	mov	r31, r3
    2f7c:	f0 68       	ori	r31, 0x80	; 128
    2f7e:	3f 2e       	mov	r3, r31
    2f80:	82 01       	movw	r16, r4
    2f82:	33 fc       	sbrc	r3, 3
    2f84:	1b c0       	rjmp	.+54     	; 0x2fbc <vfprintf+0x1c2>
    2f86:	82 2d       	mov	r24, r2
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	88 16       	cp	r8, r24
    2f8c:	99 06       	cpc	r9, r25
    2f8e:	b0 f4       	brcc	.+44     	; 0x2fbc <vfprintf+0x1c2>
    2f90:	b6 01       	movw	r22, r12
    2f92:	80 e2       	ldi	r24, 0x20	; 32
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    2f9a:	2a 94       	dec	r2
    2f9c:	f4 cf       	rjmp	.-24     	; 0x2f86 <vfprintf+0x18c>
    2f9e:	f5 01       	movw	r30, r10
    2fa0:	37 fc       	sbrc	r3, 7
    2fa2:	85 91       	lpm	r24, Z+
    2fa4:	37 fe       	sbrs	r3, 7
    2fa6:	81 91       	ld	r24, Z+
    2fa8:	5f 01       	movw	r10, r30
    2faa:	b6 01       	movw	r22, r12
    2fac:	90 e0       	ldi	r25, 0x00	; 0
    2fae:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    2fb2:	21 10       	cpse	r2, r1
    2fb4:	2a 94       	dec	r2
    2fb6:	21 e0       	ldi	r18, 0x01	; 1
    2fb8:	82 1a       	sub	r8, r18
    2fba:	91 08       	sbc	r9, r1
    2fbc:	81 14       	cp	r8, r1
    2fbe:	91 04       	cpc	r9, r1
    2fc0:	71 f7       	brne	.-36     	; 0x2f9e <vfprintf+0x1a4>
    2fc2:	e8 c0       	rjmp	.+464    	; 0x3194 <vfprintf+0x39a>
    2fc4:	84 36       	cpi	r24, 0x64	; 100
    2fc6:	11 f0       	breq	.+4      	; 0x2fcc <vfprintf+0x1d2>
    2fc8:	89 36       	cpi	r24, 0x69	; 105
    2fca:	41 f5       	brne	.+80     	; 0x301c <vfprintf+0x222>
    2fcc:	f8 01       	movw	r30, r16
    2fce:	37 fe       	sbrs	r3, 7
    2fd0:	07 c0       	rjmp	.+14     	; 0x2fe0 <vfprintf+0x1e6>
    2fd2:	60 81       	ld	r22, Z
    2fd4:	71 81       	ldd	r23, Z+1	; 0x01
    2fd6:	82 81       	ldd	r24, Z+2	; 0x02
    2fd8:	93 81       	ldd	r25, Z+3	; 0x03
    2fda:	0c 5f       	subi	r16, 0xFC	; 252
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	08 c0       	rjmp	.+16     	; 0x2ff0 <vfprintf+0x1f6>
    2fe0:	60 81       	ld	r22, Z
    2fe2:	71 81       	ldd	r23, Z+1	; 0x01
    2fe4:	07 2e       	mov	r0, r23
    2fe6:	00 0c       	add	r0, r0
    2fe8:	88 0b       	sbc	r24, r24
    2fea:	99 0b       	sbc	r25, r25
    2fec:	0e 5f       	subi	r16, 0xFE	; 254
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	f3 2d       	mov	r31, r3
    2ff2:	ff 76       	andi	r31, 0x6F	; 111
    2ff4:	3f 2e       	mov	r3, r31
    2ff6:	97 ff       	sbrs	r25, 7
    2ff8:	09 c0       	rjmp	.+18     	; 0x300c <vfprintf+0x212>
    2ffa:	90 95       	com	r25
    2ffc:	80 95       	com	r24
    2ffe:	70 95       	com	r23
    3000:	61 95       	neg	r22
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	8f 4f       	sbci	r24, 0xFF	; 255
    3006:	9f 4f       	sbci	r25, 0xFF	; 255
    3008:	f0 68       	ori	r31, 0x80	; 128
    300a:	3f 2e       	mov	r3, r31
    300c:	2a e0       	ldi	r18, 0x0A	; 10
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	a3 01       	movw	r20, r6
    3012:	0e 94 30 19 	call	0x3260	; 0x3260 <__ultoa_invert>
    3016:	88 2e       	mov	r8, r24
    3018:	86 18       	sub	r8, r6
    301a:	45 c0       	rjmp	.+138    	; 0x30a6 <vfprintf+0x2ac>
    301c:	85 37       	cpi	r24, 0x75	; 117
    301e:	31 f4       	brne	.+12     	; 0x302c <vfprintf+0x232>
    3020:	23 2d       	mov	r18, r3
    3022:	2f 7e       	andi	r18, 0xEF	; 239
    3024:	b2 2e       	mov	r11, r18
    3026:	2a e0       	ldi	r18, 0x0A	; 10
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	25 c0       	rjmp	.+74     	; 0x3076 <vfprintf+0x27c>
    302c:	93 2d       	mov	r25, r3
    302e:	99 7f       	andi	r25, 0xF9	; 249
    3030:	b9 2e       	mov	r11, r25
    3032:	8f 36       	cpi	r24, 0x6F	; 111
    3034:	c1 f0       	breq	.+48     	; 0x3066 <vfprintf+0x26c>
    3036:	18 f4       	brcc	.+6      	; 0x303e <vfprintf+0x244>
    3038:	88 35       	cpi	r24, 0x58	; 88
    303a:	79 f0       	breq	.+30     	; 0x305a <vfprintf+0x260>
    303c:	b5 c0       	rjmp	.+362    	; 0x31a8 <vfprintf+0x3ae>
    303e:	80 37       	cpi	r24, 0x70	; 112
    3040:	19 f0       	breq	.+6      	; 0x3048 <vfprintf+0x24e>
    3042:	88 37       	cpi	r24, 0x78	; 120
    3044:	21 f0       	breq	.+8      	; 0x304e <vfprintf+0x254>
    3046:	b0 c0       	rjmp	.+352    	; 0x31a8 <vfprintf+0x3ae>
    3048:	e9 2f       	mov	r30, r25
    304a:	e0 61       	ori	r30, 0x10	; 16
    304c:	be 2e       	mov	r11, r30
    304e:	b4 fe       	sbrs	r11, 4
    3050:	0d c0       	rjmp	.+26     	; 0x306c <vfprintf+0x272>
    3052:	fb 2d       	mov	r31, r11
    3054:	f4 60       	ori	r31, 0x04	; 4
    3056:	bf 2e       	mov	r11, r31
    3058:	09 c0       	rjmp	.+18     	; 0x306c <vfprintf+0x272>
    305a:	34 fe       	sbrs	r3, 4
    305c:	0a c0       	rjmp	.+20     	; 0x3072 <vfprintf+0x278>
    305e:	29 2f       	mov	r18, r25
    3060:	26 60       	ori	r18, 0x06	; 6
    3062:	b2 2e       	mov	r11, r18
    3064:	06 c0       	rjmp	.+12     	; 0x3072 <vfprintf+0x278>
    3066:	28 e0       	ldi	r18, 0x08	; 8
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	05 c0       	rjmp	.+10     	; 0x3076 <vfprintf+0x27c>
    306c:	20 e1       	ldi	r18, 0x10	; 16
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	02 c0       	rjmp	.+4      	; 0x3076 <vfprintf+0x27c>
    3072:	20 e1       	ldi	r18, 0x10	; 16
    3074:	32 e0       	ldi	r19, 0x02	; 2
    3076:	f8 01       	movw	r30, r16
    3078:	b7 fe       	sbrs	r11, 7
    307a:	07 c0       	rjmp	.+14     	; 0x308a <vfprintf+0x290>
    307c:	60 81       	ld	r22, Z
    307e:	71 81       	ldd	r23, Z+1	; 0x01
    3080:	82 81       	ldd	r24, Z+2	; 0x02
    3082:	93 81       	ldd	r25, Z+3	; 0x03
    3084:	0c 5f       	subi	r16, 0xFC	; 252
    3086:	1f 4f       	sbci	r17, 0xFF	; 255
    3088:	06 c0       	rjmp	.+12     	; 0x3096 <vfprintf+0x29c>
    308a:	60 81       	ld	r22, Z
    308c:	71 81       	ldd	r23, Z+1	; 0x01
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	90 e0       	ldi	r25, 0x00	; 0
    3092:	0e 5f       	subi	r16, 0xFE	; 254
    3094:	1f 4f       	sbci	r17, 0xFF	; 255
    3096:	a3 01       	movw	r20, r6
    3098:	0e 94 30 19 	call	0x3260	; 0x3260 <__ultoa_invert>
    309c:	88 2e       	mov	r8, r24
    309e:	86 18       	sub	r8, r6
    30a0:	fb 2d       	mov	r31, r11
    30a2:	ff 77       	andi	r31, 0x7F	; 127
    30a4:	3f 2e       	mov	r3, r31
    30a6:	36 fe       	sbrs	r3, 6
    30a8:	0d c0       	rjmp	.+26     	; 0x30c4 <vfprintf+0x2ca>
    30aa:	23 2d       	mov	r18, r3
    30ac:	2e 7f       	andi	r18, 0xFE	; 254
    30ae:	a2 2e       	mov	r10, r18
    30b0:	89 14       	cp	r8, r9
    30b2:	58 f4       	brcc	.+22     	; 0x30ca <vfprintf+0x2d0>
    30b4:	34 fe       	sbrs	r3, 4
    30b6:	0b c0       	rjmp	.+22     	; 0x30ce <vfprintf+0x2d4>
    30b8:	32 fc       	sbrc	r3, 2
    30ba:	09 c0       	rjmp	.+18     	; 0x30ce <vfprintf+0x2d4>
    30bc:	83 2d       	mov	r24, r3
    30be:	8e 7e       	andi	r24, 0xEE	; 238
    30c0:	a8 2e       	mov	r10, r24
    30c2:	05 c0       	rjmp	.+10     	; 0x30ce <vfprintf+0x2d4>
    30c4:	b8 2c       	mov	r11, r8
    30c6:	a3 2c       	mov	r10, r3
    30c8:	03 c0       	rjmp	.+6      	; 0x30d0 <vfprintf+0x2d6>
    30ca:	b8 2c       	mov	r11, r8
    30cc:	01 c0       	rjmp	.+2      	; 0x30d0 <vfprintf+0x2d6>
    30ce:	b9 2c       	mov	r11, r9
    30d0:	a4 fe       	sbrs	r10, 4
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <vfprintf+0x2f8>
    30d4:	fe 01       	movw	r30, r28
    30d6:	e8 0d       	add	r30, r8
    30d8:	f1 1d       	adc	r31, r1
    30da:	80 81       	ld	r24, Z
    30dc:	80 33       	cpi	r24, 0x30	; 48
    30de:	21 f4       	brne	.+8      	; 0x30e8 <vfprintf+0x2ee>
    30e0:	9a 2d       	mov	r25, r10
    30e2:	99 7e       	andi	r25, 0xE9	; 233
    30e4:	a9 2e       	mov	r10, r25
    30e6:	09 c0       	rjmp	.+18     	; 0x30fa <vfprintf+0x300>
    30e8:	a2 fe       	sbrs	r10, 2
    30ea:	06 c0       	rjmp	.+12     	; 0x30f8 <vfprintf+0x2fe>
    30ec:	b3 94       	inc	r11
    30ee:	b3 94       	inc	r11
    30f0:	04 c0       	rjmp	.+8      	; 0x30fa <vfprintf+0x300>
    30f2:	8a 2d       	mov	r24, r10
    30f4:	86 78       	andi	r24, 0x86	; 134
    30f6:	09 f0       	breq	.+2      	; 0x30fa <vfprintf+0x300>
    30f8:	b3 94       	inc	r11
    30fa:	a3 fc       	sbrc	r10, 3
    30fc:	11 c0       	rjmp	.+34     	; 0x3120 <vfprintf+0x326>
    30fe:	a0 fe       	sbrs	r10, 0
    3100:	06 c0       	rjmp	.+12     	; 0x310e <vfprintf+0x314>
    3102:	b2 14       	cp	r11, r2
    3104:	88 f4       	brcc	.+34     	; 0x3128 <vfprintf+0x32e>
    3106:	28 0c       	add	r2, r8
    3108:	92 2c       	mov	r9, r2
    310a:	9b 18       	sub	r9, r11
    310c:	0e c0       	rjmp	.+28     	; 0x312a <vfprintf+0x330>
    310e:	b2 14       	cp	r11, r2
    3110:	60 f4       	brcc	.+24     	; 0x312a <vfprintf+0x330>
    3112:	b6 01       	movw	r22, r12
    3114:	80 e2       	ldi	r24, 0x20	; 32
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    311c:	b3 94       	inc	r11
    311e:	f7 cf       	rjmp	.-18     	; 0x310e <vfprintf+0x314>
    3120:	b2 14       	cp	r11, r2
    3122:	18 f4       	brcc	.+6      	; 0x312a <vfprintf+0x330>
    3124:	2b 18       	sub	r2, r11
    3126:	02 c0       	rjmp	.+4      	; 0x312c <vfprintf+0x332>
    3128:	98 2c       	mov	r9, r8
    312a:	21 2c       	mov	r2, r1
    312c:	a4 fe       	sbrs	r10, 4
    312e:	10 c0       	rjmp	.+32     	; 0x3150 <vfprintf+0x356>
    3130:	b6 01       	movw	r22, r12
    3132:	80 e3       	ldi	r24, 0x30	; 48
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    313a:	a2 fe       	sbrs	r10, 2
    313c:	17 c0       	rjmp	.+46     	; 0x316c <vfprintf+0x372>
    313e:	a1 fc       	sbrc	r10, 1
    3140:	03 c0       	rjmp	.+6      	; 0x3148 <vfprintf+0x34e>
    3142:	88 e7       	ldi	r24, 0x78	; 120
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	02 c0       	rjmp	.+4      	; 0x314c <vfprintf+0x352>
    3148:	88 e5       	ldi	r24, 0x58	; 88
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	b6 01       	movw	r22, r12
    314e:	0c c0       	rjmp	.+24     	; 0x3168 <vfprintf+0x36e>
    3150:	8a 2d       	mov	r24, r10
    3152:	86 78       	andi	r24, 0x86	; 134
    3154:	59 f0       	breq	.+22     	; 0x316c <vfprintf+0x372>
    3156:	a1 fe       	sbrs	r10, 1
    3158:	02 c0       	rjmp	.+4      	; 0x315e <vfprintf+0x364>
    315a:	8b e2       	ldi	r24, 0x2B	; 43
    315c:	01 c0       	rjmp	.+2      	; 0x3160 <vfprintf+0x366>
    315e:	80 e2       	ldi	r24, 0x20	; 32
    3160:	a7 fc       	sbrc	r10, 7
    3162:	8d e2       	ldi	r24, 0x2D	; 45
    3164:	b6 01       	movw	r22, r12
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    316c:	89 14       	cp	r8, r9
    316e:	38 f4       	brcc	.+14     	; 0x317e <vfprintf+0x384>
    3170:	b6 01       	movw	r22, r12
    3172:	80 e3       	ldi	r24, 0x30	; 48
    3174:	90 e0       	ldi	r25, 0x00	; 0
    3176:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    317a:	9a 94       	dec	r9
    317c:	f7 cf       	rjmp	.-18     	; 0x316c <vfprintf+0x372>
    317e:	8a 94       	dec	r8
    3180:	f3 01       	movw	r30, r6
    3182:	e8 0d       	add	r30, r8
    3184:	f1 1d       	adc	r31, r1
    3186:	80 81       	ld	r24, Z
    3188:	b6 01       	movw	r22, r12
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    3190:	81 10       	cpse	r8, r1
    3192:	f5 cf       	rjmp	.-22     	; 0x317e <vfprintf+0x384>
    3194:	22 20       	and	r2, r2
    3196:	09 f4       	brne	.+2      	; 0x319a <vfprintf+0x3a0>
    3198:	42 ce       	rjmp	.-892    	; 0x2e1e <vfprintf+0x24>
    319a:	b6 01       	movw	r22, r12
    319c:	80 e2       	ldi	r24, 0x20	; 32
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <fputc>
    31a4:	2a 94       	dec	r2
    31a6:	f6 cf       	rjmp	.-20     	; 0x3194 <vfprintf+0x39a>
    31a8:	f6 01       	movw	r30, r12
    31aa:	86 81       	ldd	r24, Z+6	; 0x06
    31ac:	97 81       	ldd	r25, Z+7	; 0x07
    31ae:	02 c0       	rjmp	.+4      	; 0x31b4 <vfprintf+0x3ba>
    31b0:	8f ef       	ldi	r24, 0xFF	; 255
    31b2:	9f ef       	ldi	r25, 0xFF	; 255
    31b4:	2b 96       	adiw	r28, 0x0b	; 11
    31b6:	e2 e1       	ldi	r30, 0x12	; 18
    31b8:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__epilogue_restores__>

000031bc <strnlen_P>:
    31bc:	fc 01       	movw	r30, r24
    31be:	05 90       	lpm	r0, Z+
    31c0:	61 50       	subi	r22, 0x01	; 1
    31c2:	70 40       	sbci	r23, 0x00	; 0
    31c4:	01 10       	cpse	r0, r1
    31c6:	d8 f7       	brcc	.-10     	; 0x31be <strnlen_P+0x2>
    31c8:	80 95       	com	r24
    31ca:	90 95       	com	r25
    31cc:	8e 0f       	add	r24, r30
    31ce:	9f 1f       	adc	r25, r31
    31d0:	08 95       	ret

000031d2 <strnlen>:
    31d2:	fc 01       	movw	r30, r24
    31d4:	61 50       	subi	r22, 0x01	; 1
    31d6:	70 40       	sbci	r23, 0x00	; 0
    31d8:	01 90       	ld	r0, Z+
    31da:	01 10       	cpse	r0, r1
    31dc:	d8 f7       	brcc	.-10     	; 0x31d4 <strnlen+0x2>
    31de:	80 95       	com	r24
    31e0:	90 95       	com	r25
    31e2:	8e 0f       	add	r24, r30
    31e4:	9f 1f       	adc	r25, r31
    31e6:	08 95       	ret

000031e8 <fputc>:
    31e8:	0f 93       	push	r16
    31ea:	1f 93       	push	r17
    31ec:	cf 93       	push	r28
    31ee:	df 93       	push	r29
    31f0:	fb 01       	movw	r30, r22
    31f2:	23 81       	ldd	r18, Z+3	; 0x03
    31f4:	21 fd       	sbrc	r18, 1
    31f6:	03 c0       	rjmp	.+6      	; 0x31fe <fputc+0x16>
    31f8:	8f ef       	ldi	r24, 0xFF	; 255
    31fa:	9f ef       	ldi	r25, 0xFF	; 255
    31fc:	2c c0       	rjmp	.+88     	; 0x3256 <fputc+0x6e>
    31fe:	22 ff       	sbrs	r18, 2
    3200:	16 c0       	rjmp	.+44     	; 0x322e <fputc+0x46>
    3202:	46 81       	ldd	r20, Z+6	; 0x06
    3204:	57 81       	ldd	r21, Z+7	; 0x07
    3206:	24 81       	ldd	r18, Z+4	; 0x04
    3208:	35 81       	ldd	r19, Z+5	; 0x05
    320a:	42 17       	cp	r20, r18
    320c:	53 07       	cpc	r21, r19
    320e:	44 f4       	brge	.+16     	; 0x3220 <fputc+0x38>
    3210:	a0 81       	ld	r26, Z
    3212:	b1 81       	ldd	r27, Z+1	; 0x01
    3214:	9d 01       	movw	r18, r26
    3216:	2f 5f       	subi	r18, 0xFF	; 255
    3218:	3f 4f       	sbci	r19, 0xFF	; 255
    321a:	31 83       	std	Z+1, r19	; 0x01
    321c:	20 83       	st	Z, r18
    321e:	8c 93       	st	X, r24
    3220:	26 81       	ldd	r18, Z+6	; 0x06
    3222:	37 81       	ldd	r19, Z+7	; 0x07
    3224:	2f 5f       	subi	r18, 0xFF	; 255
    3226:	3f 4f       	sbci	r19, 0xFF	; 255
    3228:	37 83       	std	Z+7, r19	; 0x07
    322a:	26 83       	std	Z+6, r18	; 0x06
    322c:	14 c0       	rjmp	.+40     	; 0x3256 <fputc+0x6e>
    322e:	8b 01       	movw	r16, r22
    3230:	ec 01       	movw	r28, r24
    3232:	fb 01       	movw	r30, r22
    3234:	00 84       	ldd	r0, Z+8	; 0x08
    3236:	f1 85       	ldd	r31, Z+9	; 0x09
    3238:	e0 2d       	mov	r30, r0
    323a:	09 95       	icall
    323c:	89 2b       	or	r24, r25
    323e:	e1 f6       	brne	.-72     	; 0x31f8 <fputc+0x10>
    3240:	d8 01       	movw	r26, r16
    3242:	16 96       	adiw	r26, 0x06	; 6
    3244:	8d 91       	ld	r24, X+
    3246:	9c 91       	ld	r25, X
    3248:	17 97       	sbiw	r26, 0x07	; 7
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	17 96       	adiw	r26, 0x07	; 7
    324e:	9c 93       	st	X, r25
    3250:	8e 93       	st	-X, r24
    3252:	16 97       	sbiw	r26, 0x06	; 6
    3254:	ce 01       	movw	r24, r28
    3256:	df 91       	pop	r29
    3258:	cf 91       	pop	r28
    325a:	1f 91       	pop	r17
    325c:	0f 91       	pop	r16
    325e:	08 95       	ret

00003260 <__ultoa_invert>:
    3260:	fa 01       	movw	r30, r20
    3262:	aa 27       	eor	r26, r26
    3264:	28 30       	cpi	r18, 0x08	; 8
    3266:	51 f1       	breq	.+84     	; 0x32bc <__ultoa_invert+0x5c>
    3268:	20 31       	cpi	r18, 0x10	; 16
    326a:	81 f1       	breq	.+96     	; 0x32cc <__ultoa_invert+0x6c>
    326c:	e8 94       	clt
    326e:	6f 93       	push	r22
    3270:	6e 7f       	andi	r22, 0xFE	; 254
    3272:	6e 5f       	subi	r22, 0xFE	; 254
    3274:	7f 4f       	sbci	r23, 0xFF	; 255
    3276:	8f 4f       	sbci	r24, 0xFF	; 255
    3278:	9f 4f       	sbci	r25, 0xFF	; 255
    327a:	af 4f       	sbci	r26, 0xFF	; 255
    327c:	b1 e0       	ldi	r27, 0x01	; 1
    327e:	3e d0       	rcall	.+124    	; 0x32fc <__ultoa_invert+0x9c>
    3280:	b4 e0       	ldi	r27, 0x04	; 4
    3282:	3c d0       	rcall	.+120    	; 0x32fc <__ultoa_invert+0x9c>
    3284:	67 0f       	add	r22, r23
    3286:	78 1f       	adc	r23, r24
    3288:	89 1f       	adc	r24, r25
    328a:	9a 1f       	adc	r25, r26
    328c:	a1 1d       	adc	r26, r1
    328e:	68 0f       	add	r22, r24
    3290:	79 1f       	adc	r23, r25
    3292:	8a 1f       	adc	r24, r26
    3294:	91 1d       	adc	r25, r1
    3296:	a1 1d       	adc	r26, r1
    3298:	6a 0f       	add	r22, r26
    329a:	71 1d       	adc	r23, r1
    329c:	81 1d       	adc	r24, r1
    329e:	91 1d       	adc	r25, r1
    32a0:	a1 1d       	adc	r26, r1
    32a2:	20 d0       	rcall	.+64     	; 0x32e4 <__ultoa_invert+0x84>
    32a4:	09 f4       	brne	.+2      	; 0x32a8 <__ultoa_invert+0x48>
    32a6:	68 94       	set
    32a8:	3f 91       	pop	r19
    32aa:	2a e0       	ldi	r18, 0x0A	; 10
    32ac:	26 9f       	mul	r18, r22
    32ae:	11 24       	eor	r1, r1
    32b0:	30 19       	sub	r19, r0
    32b2:	30 5d       	subi	r19, 0xD0	; 208
    32b4:	31 93       	st	Z+, r19
    32b6:	de f6       	brtc	.-74     	; 0x326e <__ultoa_invert+0xe>
    32b8:	cf 01       	movw	r24, r30
    32ba:	08 95       	ret
    32bc:	46 2f       	mov	r20, r22
    32be:	47 70       	andi	r20, 0x07	; 7
    32c0:	40 5d       	subi	r20, 0xD0	; 208
    32c2:	41 93       	st	Z+, r20
    32c4:	b3 e0       	ldi	r27, 0x03	; 3
    32c6:	0f d0       	rcall	.+30     	; 0x32e6 <__ultoa_invert+0x86>
    32c8:	c9 f7       	brne	.-14     	; 0x32bc <__ultoa_invert+0x5c>
    32ca:	f6 cf       	rjmp	.-20     	; 0x32b8 <__ultoa_invert+0x58>
    32cc:	46 2f       	mov	r20, r22
    32ce:	4f 70       	andi	r20, 0x0F	; 15
    32d0:	40 5d       	subi	r20, 0xD0	; 208
    32d2:	4a 33       	cpi	r20, 0x3A	; 58
    32d4:	18 f0       	brcs	.+6      	; 0x32dc <__ultoa_invert+0x7c>
    32d6:	49 5d       	subi	r20, 0xD9	; 217
    32d8:	31 fd       	sbrc	r19, 1
    32da:	40 52       	subi	r20, 0x20	; 32
    32dc:	41 93       	st	Z+, r20
    32de:	02 d0       	rcall	.+4      	; 0x32e4 <__ultoa_invert+0x84>
    32e0:	a9 f7       	brne	.-22     	; 0x32cc <__ultoa_invert+0x6c>
    32e2:	ea cf       	rjmp	.-44     	; 0x32b8 <__ultoa_invert+0x58>
    32e4:	b4 e0       	ldi	r27, 0x04	; 4
    32e6:	a6 95       	lsr	r26
    32e8:	97 95       	ror	r25
    32ea:	87 95       	ror	r24
    32ec:	77 95       	ror	r23
    32ee:	67 95       	ror	r22
    32f0:	ba 95       	dec	r27
    32f2:	c9 f7       	brne	.-14     	; 0x32e6 <__ultoa_invert+0x86>
    32f4:	00 97       	sbiw	r24, 0x00	; 0
    32f6:	61 05       	cpc	r22, r1
    32f8:	71 05       	cpc	r23, r1
    32fa:	08 95       	ret
    32fc:	9b 01       	movw	r18, r22
    32fe:	ac 01       	movw	r20, r24
    3300:	0a 2e       	mov	r0, r26
    3302:	06 94       	lsr	r0
    3304:	57 95       	ror	r21
    3306:	47 95       	ror	r20
    3308:	37 95       	ror	r19
    330a:	27 95       	ror	r18
    330c:	ba 95       	dec	r27
    330e:	c9 f7       	brne	.-14     	; 0x3302 <__ultoa_invert+0xa2>
    3310:	62 0f       	add	r22, r18
    3312:	73 1f       	adc	r23, r19
    3314:	84 1f       	adc	r24, r20
    3316:	95 1f       	adc	r25, r21
    3318:	a0 1d       	adc	r26, r0
    331a:	08 95       	ret

0000331c <eeprom_read_byte>:
    331c:	f9 99       	sbic	0x1f, 1	; 31
    331e:	fe cf       	rjmp	.-4      	; 0x331c <eeprom_read_byte>
    3320:	92 bd       	out	0x22, r25	; 34
    3322:	81 bd       	out	0x21, r24	; 33
    3324:	f8 9a       	sbi	0x1f, 0	; 31
    3326:	99 27       	eor	r25, r25
    3328:	80 b5       	in	r24, 0x20	; 32
    332a:	08 95       	ret

0000332c <eeprom_read_dword>:
    332c:	a6 e1       	ldi	r26, 0x16	; 22
    332e:	b0 e0       	ldi	r27, 0x00	; 0
    3330:	44 e0       	ldi	r20, 0x04	; 4
    3332:	50 e0       	ldi	r21, 0x00	; 0
    3334:	0c 94 bf 19 	jmp	0x337e	; 0x337e <eeprom_read_blraw>

00003338 <eeprom_read_word>:
    3338:	a8 e1       	ldi	r26, 0x18	; 24
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	42 e0       	ldi	r20, 0x02	; 2
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	0c 94 bf 19 	jmp	0x337e	; 0x337e <eeprom_read_blraw>

00003344 <eeprom_write_byte>:
    3344:	26 2f       	mov	r18, r22

00003346 <eeprom_write_r18>:
    3346:	f9 99       	sbic	0x1f, 1	; 31
    3348:	fe cf       	rjmp	.-4      	; 0x3346 <eeprom_write_r18>
    334a:	1f ba       	out	0x1f, r1	; 31
    334c:	92 bd       	out	0x22, r25	; 34
    334e:	81 bd       	out	0x21, r24	; 33
    3350:	20 bd       	out	0x20, r18	; 32
    3352:	0f b6       	in	r0, 0x3f	; 63
    3354:	f8 94       	cli
    3356:	fa 9a       	sbi	0x1f, 2	; 31
    3358:	f9 9a       	sbi	0x1f, 1	; 31
    335a:	0f be       	out	0x3f, r0	; 63
    335c:	01 96       	adiw	r24, 0x01	; 1
    335e:	08 95       	ret

00003360 <eeprom_write_dword>:
    3360:	24 2f       	mov	r18, r20
    3362:	0e 94 a3 19 	call	0x3346	; 0x3346 <eeprom_write_r18>
    3366:	25 2f       	mov	r18, r21
    3368:	0e 94 a3 19 	call	0x3346	; 0x3346 <eeprom_write_r18>
    336c:	0c 94 b8 19 	jmp	0x3370	; 0x3370 <eeprom_write_word>

00003370 <eeprom_write_word>:
    3370:	0e 94 a2 19 	call	0x3344	; 0x3344 <eeprom_write_byte>
    3374:	27 2f       	mov	r18, r23
    3376:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <eeprom_write_r18>

0000337a <eeprom_read_block>:
    337a:	dc 01       	movw	r26, r24
    337c:	cb 01       	movw	r24, r22

0000337e <eeprom_read_blraw>:
    337e:	fc 01       	movw	r30, r24
    3380:	f9 99       	sbic	0x1f, 1	; 31
    3382:	fe cf       	rjmp	.-4      	; 0x3380 <eeprom_read_blraw+0x2>
    3384:	06 c0       	rjmp	.+12     	; 0x3392 <eeprom_read_blraw+0x14>
    3386:	f2 bd       	out	0x22, r31	; 34
    3388:	e1 bd       	out	0x21, r30	; 33
    338a:	f8 9a       	sbi	0x1f, 0	; 31
    338c:	31 96       	adiw	r30, 0x01	; 1
    338e:	00 b4       	in	r0, 0x20	; 32
    3390:	0d 92       	st	X+, r0
    3392:	41 50       	subi	r20, 0x01	; 1
    3394:	50 40       	sbci	r21, 0x00	; 0
    3396:	b8 f7       	brcc	.-18     	; 0x3386 <eeprom_read_blraw+0x8>
    3398:	08 95       	ret

0000339a <__muluhisi3>:
    339a:	0e 94 17 1a 	call	0x342e	; 0x342e <__umulhisi3>
    339e:	a5 9f       	mul	r26, r21
    33a0:	90 0d       	add	r25, r0
    33a2:	b4 9f       	mul	r27, r20
    33a4:	90 0d       	add	r25, r0
    33a6:	a4 9f       	mul	r26, r20
    33a8:	80 0d       	add	r24, r0
    33aa:	91 1d       	adc	r25, r1
    33ac:	11 24       	eor	r1, r1
    33ae:	08 95       	ret

000033b0 <__mulshisi3>:
    33b0:	b7 ff       	sbrs	r27, 7
    33b2:	0c 94 cd 19 	jmp	0x339a	; 0x339a <__muluhisi3>

000033b6 <__mulohisi3>:
    33b6:	0e 94 cd 19 	call	0x339a	; 0x339a <__muluhisi3>
    33ba:	82 1b       	sub	r24, r18
    33bc:	93 0b       	sbc	r25, r19
    33be:	08 95       	ret

000033c0 <__prologue_saves__>:
    33c0:	2f 92       	push	r2
    33c2:	3f 92       	push	r3
    33c4:	4f 92       	push	r4
    33c6:	5f 92       	push	r5
    33c8:	6f 92       	push	r6
    33ca:	7f 92       	push	r7
    33cc:	8f 92       	push	r8
    33ce:	9f 92       	push	r9
    33d0:	af 92       	push	r10
    33d2:	bf 92       	push	r11
    33d4:	cf 92       	push	r12
    33d6:	df 92       	push	r13
    33d8:	ef 92       	push	r14
    33da:	ff 92       	push	r15
    33dc:	0f 93       	push	r16
    33de:	1f 93       	push	r17
    33e0:	cf 93       	push	r28
    33e2:	df 93       	push	r29
    33e4:	cd b7       	in	r28, 0x3d	; 61
    33e6:	de b7       	in	r29, 0x3e	; 62
    33e8:	ca 1b       	sub	r28, r26
    33ea:	db 0b       	sbc	r29, r27
    33ec:	0f b6       	in	r0, 0x3f	; 63
    33ee:	f8 94       	cli
    33f0:	de bf       	out	0x3e, r29	; 62
    33f2:	0f be       	out	0x3f, r0	; 63
    33f4:	cd bf       	out	0x3d, r28	; 61
    33f6:	09 94       	ijmp

000033f8 <__epilogue_restores__>:
    33f8:	2a 88       	ldd	r2, Y+18	; 0x12
    33fa:	39 88       	ldd	r3, Y+17	; 0x11
    33fc:	48 88       	ldd	r4, Y+16	; 0x10
    33fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    3400:	6e 84       	ldd	r6, Y+14	; 0x0e
    3402:	7d 84       	ldd	r7, Y+13	; 0x0d
    3404:	8c 84       	ldd	r8, Y+12	; 0x0c
    3406:	9b 84       	ldd	r9, Y+11	; 0x0b
    3408:	aa 84       	ldd	r10, Y+10	; 0x0a
    340a:	b9 84       	ldd	r11, Y+9	; 0x09
    340c:	c8 84       	ldd	r12, Y+8	; 0x08
    340e:	df 80       	ldd	r13, Y+7	; 0x07
    3410:	ee 80       	ldd	r14, Y+6	; 0x06
    3412:	fd 80       	ldd	r15, Y+5	; 0x05
    3414:	0c 81       	ldd	r16, Y+4	; 0x04
    3416:	1b 81       	ldd	r17, Y+3	; 0x03
    3418:	aa 81       	ldd	r26, Y+2	; 0x02
    341a:	b9 81       	ldd	r27, Y+1	; 0x01
    341c:	ce 0f       	add	r28, r30
    341e:	d1 1d       	adc	r29, r1
    3420:	0f b6       	in	r0, 0x3f	; 63
    3422:	f8 94       	cli
    3424:	de bf       	out	0x3e, r29	; 62
    3426:	0f be       	out	0x3f, r0	; 63
    3428:	cd bf       	out	0x3d, r28	; 61
    342a:	ed 01       	movw	r28, r26
    342c:	08 95       	ret

0000342e <__umulhisi3>:
    342e:	a2 9f       	mul	r26, r18
    3430:	b0 01       	movw	r22, r0
    3432:	b3 9f       	mul	r27, r19
    3434:	c0 01       	movw	r24, r0
    3436:	a3 9f       	mul	r26, r19
    3438:	70 0d       	add	r23, r0
    343a:	81 1d       	adc	r24, r1
    343c:	11 24       	eor	r1, r1
    343e:	91 1d       	adc	r25, r1
    3440:	b2 9f       	mul	r27, r18
    3442:	70 0d       	add	r23, r0
    3444:	81 1d       	adc	r24, r1
    3446:	11 24       	eor	r1, r1
    3448:	91 1d       	adc	r25, r1
    344a:	08 95       	ret

0000344c <_exit>:
    344c:	f8 94       	cli

0000344e <__stop_program>:
    344e:	ff cf       	rjmp	.-2      	; 0x344e <__stop_program>
