
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000112  00800100  00002e18  00002eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000183  00800212  00800212  00002fbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002fbe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000301c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000698  00000000  00000000  00003060  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005b0a  00000000  00000000  000036f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001fc6  00000000  00000000  00009202  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003298  00000000  00000000  0000b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ed0  00000000  00000000  0000e460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001686  00000000  00000000  0000f330  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002bd5  00000000  00000000  000109b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004f0  00000000  00000000  0001358b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__ctors_end>
       4:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       8:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
       c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      10:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      14:	0c 94 47 01 	jmp	0x28e	; 0x28e <__vector_5>
      18:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      1c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      20:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      24:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      28:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      2c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      30:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      34:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      38:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      40:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <__vector_16>
      44:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      48:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      4c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      50:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__vector_20>
      54:	0c 94 11 0d 	jmp	0x1a22	; 0x1a22 <__vector_21>
      58:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      5c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      60:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      64:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      68:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      6c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      70:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      74:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>
      78:	0c 94 07 01 	jmp	0x20e	; 0x20e <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	50 72       	andi	r21, 0x20	; 32
      7e:	65 73       	andi	r22, 0x35	; 53
      80:	73 20       	and	r7, r3
      82:	61 20       	and	r6, r1
      84:	62 75       	andi	r22, 0x52	; 82
      86:	74 74       	andi	r23, 0x44	; 68
      88:	6f 6e       	ori	r22, 0xEF	; 239
      8a:	20 74       	andi	r18, 0x40	; 64
      8c:	6f 20       	and	r6, r15
      8e:	73 74       	andi	r23, 0x43	; 67
      90:	61 72       	andi	r22, 0x21	; 33
      92:	74 20       	and	r7, r4
      94:	61 67       	ori	r22, 0x71	; 113
      96:	61 69       	ori	r22, 0x91	; 145
      98:	6e 00       	.word	0x006e	; ????

0000009a <__c.2544>:
      9a:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000a4 <__c.2515>:
      a4:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
      b4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
      c4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000000ce <__c.2513>:
      ce:	53 6e 61 6b 65 00                                   Snake.

000000d4 <numbers>:
      d4:	3f 01 3c 01 38 01 34 01 30 01 2c 01 28 01 24 01     ?.<.8.4.0.,.(.$.
      e4:	20 01 1c 01                                          ...

000000e8 <letters>:
      e8:	ae 01 aa 01 a6 01 a2 01 9e 01 9a 01 96 01 92 01     ................
      f8:	8f 01 8b 01 87 01 83 01 7e 01 7a 01 76 01 72 01     ........~.z.v.r.
     108:	6d 01 69 01 65 01 60 01 5c 01 57 01 52 01 4d 01     m.i.e.`.\.W.R.M.
     118:	48 01 43 01                                         H.C.

0000011c <cols_9>:
     11c:	64 92 92 7d                                         d..}

00000120 <cols_8>:
     120:	6c 92 92 6d                                         l..m

00000124 <cols_7>:
     124:	80 9e a0 c1                                         ....

00000128 <cols_6>:
     128:	7c 92 92 4d                                         |..M

0000012c <cols_5>:
     12c:	e4 a2 a2 9d                                         ....

00000130 <cols_4>:
     130:	18 28 48 ff                                         .(H.

00000134 <cols_3>:
     134:	44 92 92 6d                                         D..m

00000138 <cols_2>:
     138:	46 8a 92 63                                         F..c

0000013c <cols_1>:
     13c:	42 fe 03                                            B..

0000013f <cols_0>:
     13f:	7c 92 a2 7d                                         |..}

00000143 <cols_Z>:
     143:	86 8a 92 a2 c3                                      .....

00000148 <cols_Y>:
     148:	e0 10 0e 10 e1                                      .....

0000014d <cols_X>:
     14d:	c6 28 10 28 c7                                      .(.(.

00000152 <cols_W>:
     152:	fc 02 1c 02 fd                                      .....

00000157 <cols_V>:
     157:	f8 04 02 04 f9                                      .....

0000015c <cols_U>:
     15c:	fc 02 02 fd                                         ....

00000160 <cols_T>:
     160:	80 80 fe 80 81                                      .....

00000165 <cols_S>:
     165:	64 92 92 4d                                         d..M

00000169 <cols_R>:
     169:	fe 90 98 67                                         ...g

0000016d <cols_Q>:
     16d:	7c 82 8a 7c 03                                      |..|.

00000172 <cols_P>:
     172:	fe 90 90 61                                         ...a

00000176 <cols_O>:
     176:	7c 82 82 7d                                         |..}

0000017a <cols_N>:
     17a:	fe 20 10 ff                                         . ..

0000017e <cols_M>:
     17e:	fe 40 30 40 ff                                      .@0@.

00000183 <cols_L>:
     183:	fe 02 02 03                                         ....

00000187 <cols_K>:
     187:	fe 10 28 c7                                         ..(.

0000018b <cols_J>:
     18b:	04 02 02 fd                                         ....

0000018f <cols_I>:
     18f:	82 fe 83                                            ...

00000192 <cols_H>:
     192:	fe 10 10 ff                                         ....

00000196 <cols_G>:
     196:	7c 82 92 5d                                         |..]

0000019a <cols_F>:
     19a:	fe 90 90 81                                         ....

0000019e <cols_E>:
     19e:	fe 92 92 83                                         ....

000001a2 <cols_D>:
     1a2:	fe 82 82 7d                                         ...}

000001a6 <cols_C>:
     1a6:	7c 82 82 45                                         |..E

000001aa <cols_B>:
     1aa:	fe 92 92 6d                                         ...m

000001ae <cols_A>:
     1ae:	7e 90 90 7f                                         ~...

000001b2 <__c.2058>:
     1b2:	1b 5b 3f 32 35 68 00                                .[?25h.

000001b9 <__c.2054>:
     1b9:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001c0 <__c.2050>:
     1c0:	1b 5b 25 64 6d 00                                   .[%dm.

000001c6 <__c.2040>:
     1c6:	1b 5b 32 4a 00                                      .[2J.

000001cb <__c.2025>:
     1cb:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001d4 <__ctors_end>:
     1d4:	11 24       	eor	r1, r1
     1d6:	1f be       	out	0x3f, r1	; 63
     1d8:	cf ef       	ldi	r28, 0xFF	; 255
     1da:	d8 e0       	ldi	r29, 0x08	; 8
     1dc:	de bf       	out	0x3e, r29	; 62
     1de:	cd bf       	out	0x3d, r28	; 61

000001e0 <__do_copy_data>:
     1e0:	12 e0       	ldi	r17, 0x02	; 2
     1e2:	a0 e0       	ldi	r26, 0x00	; 0
     1e4:	b1 e0       	ldi	r27, 0x01	; 1
     1e6:	e8 e1       	ldi	r30, 0x18	; 24
     1e8:	fe e2       	ldi	r31, 0x2E	; 46
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <__do_copy_data+0x10>
     1ec:	05 90       	lpm	r0, Z+
     1ee:	0d 92       	st	X+, r0
     1f0:	a2 31       	cpi	r26, 0x12	; 18
     1f2:	b1 07       	cpc	r27, r17
     1f4:	d9 f7       	brne	.-10     	; 0x1ec <__do_copy_data+0xc>

000001f6 <__do_clear_bss>:
     1f6:	23 e0       	ldi	r18, 0x03	; 3
     1f8:	a2 e1       	ldi	r26, 0x12	; 18
     1fa:	b2 e0       	ldi	r27, 0x02	; 2
     1fc:	01 c0       	rjmp	.+2      	; 0x200 <.do_clear_bss_start>

000001fe <.do_clear_bss_loop>:
     1fe:	1d 92       	st	X+, r1

00000200 <.do_clear_bss_start>:
     200:	a5 39       	cpi	r26, 0x95	; 149
     202:	b2 07       	cpc	r27, r18
     204:	e1 f7       	brne	.-8      	; 0x1fe <.do_clear_bss_loop>
     206:	0e 94 db 09 	call	0x13b6	; 0x13b6 <main>
     20a:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <_exit>

0000020e <__bad_interrupt>:
     20e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000212 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     212:	e8 e6       	ldi	r30, 0x68	; 104
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	82 60       	ori	r24, 0x02	; 2
     21a:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     21c:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     21e:	ec e6       	ldi	r30, 0x6C	; 108
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	8f 60       	ori	r24, 0x0F	; 15
     226:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     228:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
     22c:	08 95       	ret

0000022e <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     22e:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__data_end>
     232:	08 95       	ret

00000234 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     234:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     238:	18 16       	cp	r1, r24
     23a:	3c f5       	brge	.+78     	; 0x28a <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     23c:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     240:	6f b7       	in	r22, 0x3f	; 63
		cli();
     242:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     244:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <__data_end>
     248:	92 30       	cpi	r25, 0x02	; 2
     24a:	b4 f0       	brlt	.+44     	; 0x278 <button_pushed+0x44>
     24c:	21 e0       	ldi	r18, 0x01	; 1
     24e:	30 e0       	ldi	r19, 0x00	; 0
     250:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     252:	f9 01       	movw	r30, r18
     254:	ed 5e       	subi	r30, 0xED	; 237
     256:	fd 4f       	sbci	r31, 0xFD	; 253
     258:	40 81       	ld	r20, Z
     25a:	f9 01       	movw	r30, r18
     25c:	ee 5e       	subi	r30, 0xEE	; 238
     25e:	fd 4f       	sbci	r31, 0xFD	; 253
     260:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     262:	9f 5f       	subi	r25, 0xFF	; 255
     264:	29 2f       	mov	r18, r25
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 91 12 02 	lds	r20, 0x0212	; 0x800212 <__data_end>
     26c:	04 2e       	mov	r0, r20
     26e:	00 0c       	add	r0, r0
     270:	55 0b       	sbc	r21, r21
     272:	24 17       	cp	r18, r20
     274:	35 07       	cpc	r19, r21
     276:	6c f3       	brlt	.-38     	; 0x252 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     278:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <__data_end>
     27c:	91 50       	subi	r25, 0x01	; 1
     27e:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <__data_end>
		
		if(interrupts_were_enabled) {
     282:	66 23       	and	r22, r22
     284:	1c f4       	brge	.+6      	; 0x28c <button_pushed+0x58>
			// Turn them back on again
			sei();
     286:	78 94       	sei
     288:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     28a:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     28c:	08 95       	ret

0000028e <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     28e:	1f 92       	push	r1
     290:	0f 92       	push	r0
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	0f 92       	push	r0
     296:	11 24       	eor	r1, r1
     298:	2f 93       	push	r18
     29a:	3f 93       	push	r19
     29c:	4f 93       	push	r20
     29e:	5f 93       	push	r21
     2a0:	6f 93       	push	r22
     2a2:	7f 93       	push	r23
     2a4:	8f 93       	push	r24
     2a6:	9f 93       	push	r25
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2ac:	43 b1       	in	r20, 0x03	; 3
     2ae:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2b0:	80 91 12 02 	lds	r24, 0x0212	; 0x800212 <__data_end>
     2b4:	88 30       	cpi	r24, 0x08	; 8
     2b6:	64 f5       	brge	.+88     	; 0x310 <__vector_5+0x82>
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2bc:	64 2f       	mov	r22, r20
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	9b 01       	movw	r18, r22
     2c2:	08 2e       	mov	r0, r24
     2c4:	02 c0       	rjmp	.+4      	; 0x2ca <__vector_5+0x3c>
     2c6:	35 95       	asr	r19
     2c8:	27 95       	ror	r18
     2ca:	0a 94       	dec	r0
     2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <__vector_5+0x38>
     2ce:	20 ff       	sbrs	r18, 0
     2d0:	1b c0       	rjmp	.+54     	; 0x308 <__vector_5+0x7a>
     2d2:	20 91 1b 02 	lds	r18, 0x021B	; 0x80021b <last_button_state>
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	08 2e       	mov	r0, r24
     2da:	02 c0       	rjmp	.+4      	; 0x2e0 <__vector_5+0x52>
     2dc:	35 95       	asr	r19
     2de:	27 95       	ror	r18
     2e0:	0a 94       	dec	r0
     2e2:	e2 f7       	brpl	.-8      	; 0x2dc <__vector_5+0x4e>
     2e4:	20 fd       	sbrc	r18, 0
     2e6:	10 c0       	rjmp	.+32     	; 0x308 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2e8:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__data_end>
     2ec:	21 e0       	ldi	r18, 0x01	; 1
     2ee:	2e 0f       	add	r18, r30
     2f0:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <__data_end>
     2f4:	0e 2e       	mov	r0, r30
     2f6:	00 0c       	add	r0, r0
     2f8:	ff 0b       	sbc	r31, r31
     2fa:	ed 5e       	subi	r30, 0xED	; 237
     2fc:	fd 4f       	sbci	r31, 0xFD	; 253
     2fe:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     300:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <__data_end>
     304:	28 30       	cpi	r18, 0x08	; 8
     306:	24 f4       	brge	.+8      	; 0x310 <__vector_5+0x82>
     308:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     30a:	84 30       	cpi	r24, 0x04	; 4
     30c:	91 05       	cpc	r25, r1
     30e:	c1 f6       	brne	.-80     	; 0x2c0 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     310:	40 93 1b 02 	sts	0x021B, r20	; 0x80021b <last_button_state>
}
     314:	ff 91       	pop	r31
     316:	ef 91       	pop	r30
     318:	9f 91       	pop	r25
     31a:	8f 91       	pop	r24
     31c:	7f 91       	pop	r23
     31e:	6f 91       	pop	r22
     320:	5f 91       	pop	r21
     322:	4f 91       	pop	r20
     324:	3f 91       	pop	r19
     326:	2f 91       	pop	r18
     328:	0f 90       	pop	r0
     32a:	0f be       	out	0x3f, r0	; 63
     32c:	0f 90       	pop	r0
     32e:	1f 90       	pop	r1
     330:	18 95       	reti

00000332 <buzzer_time_left>:
void play_snake_move_sound_effect(void){
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		enable_timer_one();
     332:	cf 92       	push	r12
     334:	df 92       	push	r13
     336:	ef 92       	push	r14
     338:	ff 92       	push	r15
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
     342:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <buzzer_time>
     346:	50 91 1d 02 	lds	r21, 0x021D	; 0x80021d <buzzer_time+0x1>
     34a:	6a 01       	movw	r12, r20
     34c:	55 0f       	add	r21, r21
     34e:	ee 08       	sbc	r14, r14
     350:	ff 08       	sbc	r15, r15
     352:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <clock_at_tone_start>
     356:	10 91 6c 02 	lds	r17, 0x026C	; 0x80026c <clock_at_tone_start+0x1>
     35a:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <clock_at_tone_start+0x2>
     35e:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <clock_at_tone_start+0x3>
     362:	c0 0e       	add	r12, r16
     364:	d1 1e       	adc	r13, r17
     366:	e2 1e       	adc	r14, r18
     368:	f3 1e       	adc	r15, r19
     36a:	21 e0       	ldi	r18, 0x01	; 1
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	6c 15       	cp	r22, r12
     370:	7d 05       	cpc	r23, r13
     372:	8e 05       	cpc	r24, r14
     374:	9f 05       	cpc	r25, r15
     376:	10 f0       	brcs	.+4      	; 0x37c <buzzer_time_left+0x4a>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	c9 01       	movw	r24, r18
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	ff 90       	pop	r15
     384:	ef 90       	pop	r14
     386:	df 90       	pop	r13
     388:	cf 90       	pop	r12
     38a:	08 95       	ret

0000038c <next_buzzer_tone>:
     38c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     390:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     394:	01 96       	adiw	r24, 0x01	; 1
     396:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     39a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	fc 01       	movw	r30, r24
     3a4:	e9 5a       	subi	r30, 0xA9	; 169
     3a6:	fd 4f       	sbci	r31, 0xFD	; 253
     3a8:	80 81       	ld	r24, Z
     3aa:	91 81       	ldd	r25, Z+1	; 0x01
     3ac:	0e 94 a4 10 	call	0x2148	; 0x2148 <change_OCR1A>
     3b0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
     3b4:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <clock_at_tone_start>
     3b8:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <clock_at_tone_start+0x1>
     3bc:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <clock_at_tone_start+0x2>
     3c0:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <clock_at_tone_start+0x3>
     3c4:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     3c8:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3cc:	ee 0f       	add	r30, r30
     3ce:	ff 1f       	adc	r31, r31
     3d0:	ef 59       	subi	r30, 0x9F	; 159
     3d2:	fd 4f       	sbci	r31, 0xFD	; 253
     3d4:	80 81       	ld	r24, Z
     3d6:	91 81       	ldd	r25, Z+1	; 0x01
     3d8:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <buzzer_time+0x1>
     3dc:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <buzzer_time>
     3e0:	08 95       	ret

000003e2 <reset_buzzer>:
     3e2:	55 98       	cbi	0x0a, 5	; 10
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	9f ef       	ldi	r25, 0xFF	; 255
     3e8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     3ec:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     3f0:	08 95       	ret

000003f2 <play_start_game_sound_effect>:
     3f2:	83 e0       	ldi	r24, 0x03	; 3
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <number_of_tones+0x1>
     3fa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <number_of_tones>
     3fe:	e1 e6       	ldi	r30, 0x61	; 97
     400:	f2 e0       	ldi	r31, 0x02	; 2
     402:	84 ef       	ldi	r24, 0xF4	; 244
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	91 83       	std	Z+1, r25	; 0x01
     408:	80 83       	st	Z, r24
     40a:	28 ec       	ldi	r18, 0xC8	; 200
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	33 83       	std	Z+3, r19	; 0x03
     410:	22 83       	std	Z+2, r18	; 0x02
     412:	95 83       	std	Z+5, r25	; 0x05
     414:	84 83       	std	Z+4, r24	; 0x04
     416:	e7 e5       	ldi	r30, 0x57	; 87
     418:	f2 e0       	ldi	r31, 0x02	; 2
     41a:	80 ed       	ldi	r24, 0xD0	; 208
     41c:	97 e0       	ldi	r25, 0x07	; 7
     41e:	91 83       	std	Z+1, r25	; 0x01
     420:	80 83       	st	Z, r24
     422:	28 ee       	ldi	r18, 0xE8	; 232
     424:	33 e0       	ldi	r19, 0x03	; 3
     426:	33 83       	std	Z+3, r19	; 0x03
     428:	22 83       	std	Z+2, r18	; 0x02
     42a:	95 83       	std	Z+5, r25	; 0x05
     42c:	84 83       	std	Z+4, r24	; 0x04
     42e:	8f ef       	ldi	r24, 0xFF	; 255
     430:	9f ef       	ldi	r25, 0xFF	; 255
     432:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     436:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     43a:	0e 94 c6 01 	call	0x38c	; 0x38c <next_buzzer_tone>
     43e:	0e 94 a9 10 	call	0x2152	; 0x2152 <enable_timer_one>
     442:	08 95       	ret

00000444 <play_eating_food_sound_effect>:
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     444:	82 e0       	ldi	r24, 0x02	; 2
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <number_of_tones+0x1>
     44c:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <number_of_tones>
		buzzer_durations[0] = 50;
     450:	e1 e6       	ldi	r30, 0x61	; 97
     452:	f2 e0       	ldi	r31, 0x02	; 2
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	91 83       	std	Z+1, r25	; 0x01
     45a:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     45c:	84 e6       	ldi	r24, 0x64	; 100
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	93 83       	std	Z+3, r25	; 0x03
     462:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     464:	e7 e5       	ldi	r30, 0x57	; 87
     466:	f2 e0       	ldi	r31, 0x02	; 2
     468:	80 ed       	ldi	r24, 0xD0	; 208
     46a:	97 e0       	ldi	r25, 0x07	; 7
     46c:	91 83       	std	Z+1, r25	; 0x01
     46e:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     470:	88 ee       	ldi	r24, 0xE8	; 232
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	93 83       	std	Z+3, r25	; 0x03
     476:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     478:	8f ef       	ldi	r24, 0xFF	; 255
     47a:	9f ef       	ldi	r25, 0xFF	; 255
     47c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     480:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     484:	0e 94 c6 01 	call	0x38c	; 0x38c <next_buzzer_tone>
		enable_timer_one();
     488:	0e 94 a9 10 	call	0x2152	; 0x2152 <enable_timer_one>
     48c:	08 95       	ret

0000048e <last_tone_in_sequence>:
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     48e:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <number_of_tones>
     492:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <number_of_tones+0x1>
     496:	21 50       	subi	r18, 0x01	; 1
     498:	31 09       	sbc	r19, r1
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     4a2:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     4a6:	42 17       	cp	r20, r18
     4a8:	53 07       	cpc	r21, r19
     4aa:	14 f4       	brge	.+4      	; 0x4b0 <last_tone_in_sequence+0x22>
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
	}
     4b0:	08 95       	ret

000004b2 <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4b2:	0e 94 99 01 	call	0x332	; 0x332 <buzzer_time_left>
     4b6:	89 2b       	or	r24, r25
     4b8:	59 f4       	brne	.+22     	; 0x4d0 <handle_buzzer_loop+0x1e>
     4ba:	0e 94 47 02 	call	0x48e	; 0x48e <last_tone_in_sequence>
     4be:	89 2b       	or	r24, r25
     4c0:	39 f0       	breq	.+14     	; 0x4d0 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     4c2:	67 e0       	ldi	r22, 0x07	; 7
     4c4:	8a e0       	ldi	r24, 0x0A	; 10
     4c6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     4ca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <reset_buzzer>
     4ce:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4d0:	0e 94 99 01 	call	0x332	; 0x332 <buzzer_time_left>
     4d4:	89 2b       	or	r24, r25
     4d6:	11 f4       	brne	.+4      	; 0x4dc <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     4d8:	0e 94 c6 01 	call	0x38c	; 0x38c <next_buzzer_tone>
     4dc:	08 95       	ret

000004de <save_game_to_EPPROM>:
	if(is_position_valid(super_food)){
		load_superfood(super_food);
	}else{
		remove_superfood_from_board(); 
	}
}
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
     4e6:	f8 94       	cli
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	88 e4       	ldi	r24, 0x48	; 72
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     4f2:	80 e0       	ldi	r24, 0x00	; 0
     4f4:	0e 94 14 06 	call	0xc28	; 0xc28 <get_position_of_food>
     4f8:	68 2f       	mov	r22, r24
     4fa:	80 e5       	ldi	r24, 0x50	; 80
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	0e 94 14 06 	call	0xc28	; 0xc28 <get_position_of_food>
     508:	68 2f       	mov	r22, r24
     50a:	88 e5       	ldi	r24, 0x58	; 88
     50c:	91 e0       	ldi	r25, 0x01	; 1
     50e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	0e 94 14 06 	call	0xc28	; 0xc28 <get_position_of_food>
     518:	68 2f       	mov	r22, r24
     51a:	80 e6       	ldi	r24, 0x60	; 96
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     522:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <get_rat_position>
     526:	68 2f       	mov	r22, r24
     528:	88 e6       	ldi	r24, 0x68	; 104
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     530:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <superfood_is_on_board>
     534:	88 23       	and	r24, r24
     536:	41 f0       	breq	.+16     	; 0x548 <save_game_to_EPPROM+0x6a>
     538:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <get_superfood_position>
     53c:	68 2f       	mov	r22, r24
     53e:	80 e7       	ldi	r24, 0x70	; 112
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     546:	05 c0       	rjmp	.+10     	; 0x552 <save_game_to_EPPROM+0x74>
     548:	68 e0       	ldi	r22, 0x08	; 8
     54a:	80 e7       	ldi	r24, 0x70	; 112
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     552:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <get_current_game_speed>
     556:	bc 01       	movw	r22, r24
     558:	88 e7       	ldi	r24, 0x78	; 120
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <eeprom_write_word>
     560:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     564:	ac 01       	movw	r20, r24
     566:	99 0f       	add	r25, r25
     568:	66 0b       	sbc	r22, r22
     56a:	77 0b       	sbc	r23, r23
     56c:	88 e8       	ldi	r24, 0x88	; 136
     56e:	91 e0       	ldi	r25, 0x01	; 1
     570:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
     574:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <get_snake_length>
     578:	68 2f       	mov	r22, r24
     57a:	88 ea       	ldi	r24, 0xA8	; 168
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     582:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
     586:	ac 01       	movw	r20, r24
     588:	99 0f       	add	r25, r25
     58a:	66 0b       	sbc	r22, r22
     58c:	77 0b       	sbc	r23, r23
     58e:	80 eb       	ldi	r24, 0xB0	; 176
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
     596:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <get_snake_in_order>
     59a:	8c 01       	movw	r16, r24
     59c:	c0 e0       	ldi	r28, 0x00	; 0
     59e:	d0 e0       	ldi	r29, 0x00	; 0
     5a0:	09 c0       	rjmp	.+18     	; 0x5b4 <save_game_to_EPPROM+0xd6>
     5a2:	f8 01       	movw	r30, r16
     5a4:	60 81       	ld	r22, Z
     5a6:	80 ec       	ldi	r24, 0xC0	; 192
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     5ae:	29 96       	adiw	r28, 0x09	; 9
     5b0:	07 5f       	subi	r16, 0xF7	; 247
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <get_snake_length>
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	c8 17       	cp	r28, r24
     5bc:	d9 07       	cpc	r29, r25
     5be:	8c f3       	brlt	.-30     	; 0x5a2 <save_game_to_EPPROM+0xc4>
     5c0:	68 e0       	ldi	r22, 0x08	; 8
     5c2:	80 ec       	ldi	r24, 0xC0	; 192
     5c4:	91 e0       	ldi	r25, 0x01	; 1
     5c6:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     5ca:	78 94       	sei
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	08 95       	ret

000005d6 <new_game_from_EEPROM>:
	
		sei();

}

void new_game_from_EEPROM(void){
     5d6:	08 95       	ret

000005d8 <initialise_EEPFROM>:
			}
		}
	}

void initialise_EEPFROM(void){
	eeprom_write_dword(SCORE_ONE, 0x00 );
     5d8:	40 e0       	ldi	r20, 0x00	; 0
     5da:	50 e0       	ldi	r21, 0x00	; 0
     5dc:	ba 01       	movw	r22, r20
     5de:	80 ea       	ldi	r24, 0xA0	; 160
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
	eeprom_write_dword(SCORE_TWO, 0x00);
     5e6:	40 e0       	ldi	r20, 0x00	; 0
     5e8:	50 e0       	ldi	r21, 0x00	; 0
     5ea:	ba 01       	movw	r22, r20
     5ec:	80 ec       	ldi	r24, 0xC0	; 192
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
	eeprom_write_dword(SCORE_THREE, 0x00);
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	ba 01       	movw	r22, r20
     5fa:	80 ee       	ldi	r24, 0xE0	; 224
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
	eeprom_write_dword(SCORE_FOUR, 0x00);
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	ba 01       	movw	r22, r20
     608:	80 e0       	ldi	r24, 0x00	; 0
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
	eeprom_write_dword(SCORE_FIVE, 0x00);
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	50 e0       	ldi	r21, 0x00	; 0
     614:	ba 01       	movw	r22, r20
     616:	80 e2       	ldi	r24, 0x20	; 32
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
	eeprom_write_byte(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     61e:	67 ee       	ldi	r22, 0xE7	; 231
     620:	80 e4       	ldi	r24, 0x40	; 64
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
     628:	08 95       	ret

0000062a <EEPROM_High_Score_has_been_initialised>:
	}


int EEPROM_High_Score_has_been_initialised(void){
	uint8_t current_signature = eeprom_read_byte(HIGHSCORE_SIGNATURE_MEMORY);
     62a:	80 e4       	ldi	r24, 0x40	; 64
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <eeprom_read_byte>
	return (current_signature == HIGHSCORE_SIGNATURE);
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	87 3e       	cpi	r24, 0xE7	; 231
     638:	11 f0       	breq	.+4      	; 0x63e <EEPROM_High_Score_has_been_initialised+0x14>
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
}
     63e:	c9 01       	movw	r24, r18
     640:	08 95       	ret

00000642 <is_high_score>:
#include <stdint.h>
#include "score.h"
#include <avr/eeprom.h>


uint8_t is_high_score(void){
     642:	cf 92       	push	r12
     644:	df 92       	push	r13
     646:	ef 92       	push	r14
     648:	ff 92       	push	r15
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
     64a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     64e:	6b 01       	movw	r12, r22
     650:	7c 01       	movw	r14, r24
     652:	80 e2       	ldi	r24, 0x20	; 32
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     65a:	c6 16       	cp	r12, r22
     65c:	d7 06       	cpc	r13, r23
     65e:	e8 06       	cpc	r14, r24
     660:	f9 06       	cpc	r15, r25
     662:	40 f4       	brcc	.+16     	; 0x674 <is_high_score+0x32>
     664:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_High_Score_has_been_initialised>
     668:	21 e0       	ldi	r18, 0x01	; 1
     66a:	89 2b       	or	r24, r25
     66c:	09 f0       	breq	.+2      	; 0x670 <is_high_score+0x2e>
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	82 2f       	mov	r24, r18
     672:	01 c0       	rjmp	.+2      	; 0x676 <is_high_score+0x34>
     674:	81 e0       	ldi	r24, 0x01	; 1
}
     676:	ff 90       	pop	r15
     678:	ef 90       	pop	r14
     67a:	df 90       	pop	r13
     67c:	cf 90       	pop	r12
     67e:	08 95       	ret

00000680 <high_score_name_position>:

uint16_t high_score_name_position(void){
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     688:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_High_Score_has_been_initialised>
     68c:	89 2b       	or	r24, r25
     68e:	09 f4       	brne	.+2      	; 0x692 <high_score_name_position+0x12>
     690:	42 c0       	rjmp	.+132    	; 0x716 <high_score_name_position+0x96>
		return NAME_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     692:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     696:	6b 01       	movw	r12, r22
     698:	7c 01       	movw	r14, r24
     69a:	80 ea       	ldi	r24, 0xA0	; 160
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     6a2:	6c 15       	cp	r22, r12
     6a4:	7d 05       	cpc	r23, r13
     6a6:	8e 05       	cpc	r24, r14
     6a8:	9f 05       	cpc	r25, r15
     6aa:	c0 f1       	brcs	.+112    	; 0x71c <high_score_name_position+0x9c>
		return NAME_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     6ac:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     6b0:	6b 01       	movw	r12, r22
     6b2:	7c 01       	movw	r14, r24
     6b4:	80 ec       	ldi	r24, 0xC0	; 192
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     6bc:	6c 15       	cp	r22, r12
     6be:	7d 05       	cpc	r23, r13
     6c0:	8e 05       	cpc	r24, r14
     6c2:	9f 05       	cpc	r25, r15
     6c4:	70 f1       	brcs	.+92     	; 0x722 <high_score_name_position+0xa2>
		return NAME_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     6c6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     6ca:	6b 01       	movw	r12, r22
     6cc:	7c 01       	movw	r14, r24
     6ce:	80 ee       	ldi	r24, 0xE0	; 224
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     6d6:	6c 15       	cp	r22, r12
     6d8:	7d 05       	cpc	r23, r13
     6da:	8e 05       	cpc	r24, r14
     6dc:	9f 05       	cpc	r25, r15
     6de:	20 f1       	brcs	.+72     	; 0x728 <high_score_name_position+0xa8>
		return NAME_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     6e0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     6e4:	6b 01       	movw	r12, r22
     6e6:	7c 01       	movw	r14, r24
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     6f0:	6c 15       	cp	r22, r12
     6f2:	7d 05       	cpc	r23, r13
     6f4:	8e 05       	cpc	r24, r14
     6f6:	9f 05       	cpc	r25, r15
     6f8:	d0 f0       	brcs	.+52     	; 0x72e <high_score_name_position+0xae>
		return NAME_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     6fa:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     6fe:	6b 01       	movw	r12, r22
     700:	7c 01       	movw	r14, r24
     702:	80 e2       	ldi	r24, 0x20	; 32
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     70a:	6c 15       	cp	r22, r12
     70c:	7d 05       	cpc	r23, r13
     70e:	8e 05       	cpc	r24, r14
     710:	9f 05       	cpc	r25, r15
     712:	80 f0       	brcs	.+32     	; 0x734 <high_score_name_position+0xb4>
		return NAME_FIVE;
	}
}
     714:	11 c0       	rjmp	.+34     	; 0x738 <high_score_name_position+0xb8>
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
}

uint16_t high_score_name_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return NAME_ONE;
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e c0       	rjmp	.+28     	; 0x738 <high_score_name_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return NAME_ONE;
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0b c0       	rjmp	.+22     	; 0x738 <high_score_name_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return NAME_TWO;
     722:	80 e2       	ldi	r24, 0x20	; 32
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	08 c0       	rjmp	.+16     	; 0x738 <high_score_name_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return NAME_THREE;
     728:	80 e4       	ldi	r24, 0x40	; 64
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	05 c0       	rjmp	.+10     	; 0x738 <high_score_name_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return NAME_FOUR;
     72e:	80 e6       	ldi	r24, 0x60	; 96
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	02 c0       	rjmp	.+4      	; 0x738 <high_score_name_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return NAME_FIVE;
     734:	80 e8       	ldi	r24, 0x80	; 128
     736:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     738:	ff 90       	pop	r15
     73a:	ef 90       	pop	r14
     73c:	df 90       	pop	r13
     73e:	cf 90       	pop	r12
     740:	08 95       	ret

00000742 <high_score_position>:

uint16_t high_score_position(void){
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     74a:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_High_Score_has_been_initialised>
     74e:	89 2b       	or	r24, r25
     750:	09 f4       	brne	.+2      	; 0x754 <high_score_position+0x12>
     752:	42 c0       	rjmp	.+132    	; 0x7d8 <high_score_position+0x96>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     754:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     758:	6b 01       	movw	r12, r22
     75a:	7c 01       	movw	r14, r24
     75c:	80 ea       	ldi	r24, 0xA0	; 160
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     764:	6c 15       	cp	r22, r12
     766:	7d 05       	cpc	r23, r13
     768:	8e 05       	cpc	r24, r14
     76a:	9f 05       	cpc	r25, r15
     76c:	c0 f1       	brcs	.+112    	; 0x7de <high_score_position+0x9c>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     76e:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     772:	6b 01       	movw	r12, r22
     774:	7c 01       	movw	r14, r24
     776:	80 ec       	ldi	r24, 0xC0	; 192
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     77e:	6c 15       	cp	r22, r12
     780:	7d 05       	cpc	r23, r13
     782:	8e 05       	cpc	r24, r14
     784:	9f 05       	cpc	r25, r15
     786:	70 f1       	brcs	.+92     	; 0x7e4 <high_score_position+0xa2>
		return SCORE_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     788:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     78c:	6b 01       	movw	r12, r22
     78e:	7c 01       	movw	r14, r24
     790:	80 ee       	ldi	r24, 0xE0	; 224
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     798:	6c 15       	cp	r22, r12
     79a:	7d 05       	cpc	r23, r13
     79c:	8e 05       	cpc	r24, r14
     79e:	9f 05       	cpc	r25, r15
     7a0:	20 f1       	brcs	.+72     	; 0x7ea <high_score_position+0xa8>
		return SCORE_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     7a2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     7a6:	6b 01       	movw	r12, r22
     7a8:	7c 01       	movw	r14, r24
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     7b2:	6c 15       	cp	r22, r12
     7b4:	7d 05       	cpc	r23, r13
     7b6:	8e 05       	cpc	r24, r14
     7b8:	9f 05       	cpc	r25, r15
     7ba:	d0 f0       	brcs	.+52     	; 0x7f0 <high_score_position+0xae>
		return SCORE_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     7bc:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     7c0:	6b 01       	movw	r12, r22
     7c2:	7c 01       	movw	r14, r24
     7c4:	80 e2       	ldi	r24, 0x20	; 32
     7c6:	91 e0       	ldi	r25, 0x01	; 1
     7c8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     7cc:	6c 15       	cp	r22, r12
     7ce:	7d 05       	cpc	r23, r13
     7d0:	8e 05       	cpc	r24, r14
     7d2:	9f 05       	cpc	r25, r15
     7d4:	80 f0       	brcs	.+32     	; 0x7f6 <high_score_position+0xb4>
		return SCORE_FIVE;
	}
}
     7d6:	11 c0       	rjmp	.+34     	; 0x7fa <high_score_position+0xb8>
	}
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return SCORE_ONE;
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	0e c0       	rjmp	.+28     	; 0x7fa <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return SCORE_ONE;
     7de:	80 ea       	ldi	r24, 0xA0	; 160
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0b c0       	rjmp	.+22     	; 0x7fa <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return SCORE_TWO;
     7e4:	80 ec       	ldi	r24, 0xC0	; 192
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 c0       	rjmp	.+16     	; 0x7fa <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return SCORE_THREE;
     7ea:	80 ee       	ldi	r24, 0xE0	; 224
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	05 c0       	rjmp	.+10     	; 0x7fa <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return SCORE_FOUR;
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
     7f6:	80 e2       	ldi	r24, 0x20	; 32
     7f8:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     7fa:	ff 90       	pop	r15
     7fc:	ef 90       	pop	r14
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	08 95       	ret

00000804 <set_high_score_name>:

void set_high_score_name(void){
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	00 d0       	rcall	.+0      	; 0x816 <set_high_score_name+0x12>
     816:	00 d0       	rcall	.+0      	; 0x818 <set_high_score_name+0x14>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
	char score_name[4];
	move_cursor(10,8);
     81c:	68 e0       	ldi	r22, 0x08	; 8
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     828:	81 e3       	ldi	r24, 0x31	; 49
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     838:	e1 2c       	mov	r14, r1
     83a:	f1 2c       	mov	r15, r1
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     83c:	0f 2e       	mov	r0, r31
     83e:	ff e8       	ldi	r31, 0x8F	; 143
     840:	cf 2e       	mov	r12, r31
     842:	f3 e0       	ldi	r31, 0x03	; 3
     844:	df 2e       	mov	r13, r31
     846:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     848:	0e 94 2d 10 	call	0x205a	; 0x205a <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     84c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <serial_input_available>
     850:	88 23       	and	r24, r24
     852:	d1 f3       	breq	.-12     	; 0x848 <set_high_score_name+0x44>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     854:	f6 01       	movw	r30, r12
     856:	80 81       	ld	r24, Z
     858:	91 81       	ldd	r25, Z+1	; 0x01
     85a:	0e 94 14 13 	call	0x2628	; 0x2628 <fgetc>
     85e:	8c 01       	movw	r16, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=3){
     860:	9f eb       	ldi	r25, 0xBF	; 191
     862:	90 0f       	add	r25, r16
     864:	9a 33       	cpi	r25, 0x3A	; 58
     866:	c8 f4       	brcc	.+50     	; 0x89a <set_high_score_name+0x96>
     868:	f4 e0       	ldi	r31, 0x04	; 4
     86a:	ef 16       	cp	r14, r31
     86c:	f1 04       	cpc	r15, r1
     86e:	ac f4       	brge	.+42     	; 0x89a <set_high_score_name+0x96>
				move_cursor(10 + score_name_pointer, 9);
     870:	69 e0       	ldi	r22, 0x09	; 9
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	c7 01       	movw	r24, r14
     876:	0a 96       	adiw	r24, 0x0a	; 10
     878:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
				score_name[score_name_pointer] = serial_input;
     87c:	e1 e0       	ldi	r30, 0x01	; 1
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	ec 0f       	add	r30, r28
     882:	fd 1f       	adc	r31, r29
     884:	ee 0d       	add	r30, r14
     886:	ff 1d       	adc	r31, r15
     888:	00 83       	st	Z, r16
				printf("%c", serial_input);
     88a:	c8 01       	movw	r24, r16
     88c:	99 27       	eor	r25, r25
     88e:	0e 94 8e 13 	call	0x271c	; 0x271c <putchar>
				score_name_pointer++;
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	e8 1a       	sub	r14, r24
     896:	f8 0a       	sbc	r15, r24
     898:	d7 cf       	rjmp	.-82     	; 0x848 <set_high_score_name+0x44>
			}else if(serial_input =='\n'){
     89a:	8a 30       	cpi	r24, 0x0A	; 10
     89c:	99 f0       	breq	.+38     	; 0x8c4 <set_high_score_name+0xc0>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     89e:	8f 37       	cpi	r24, 0x7F	; 127
     8a0:	99 f6       	brne	.-90     	; 0x848 <set_high_score_name+0x44>
				printf("%c", ' ');
     8a2:	80 e2       	ldi	r24, 0x20	; 32
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	0e 94 8e 13 	call	0x271c	; 0x271c <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     8aa:	1e 14       	cp	r1, r14
     8ac:	1f 04       	cpc	r1, r15
     8ae:	1c f4       	brge	.+6      	; 0x8b6 <set_high_score_name+0xb2>
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	e9 1a       	sub	r14, r25
     8b4:	f1 08       	sbc	r15, r1
				move_cursor(10 + score_name_pointer, 9);
     8b6:	69 e0       	ldi	r22, 0x09	; 9
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	c7 01       	movw	r24, r14
     8bc:	0a 96       	adiw	r24, 0x0a	; 10
     8be:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
     8c2:	c2 cf       	rjmp	.-124    	; 0x848 <set_high_score_name+0x44>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     8c4:	f9 99       	sbic	0x1f, 1	; 31
     8c6:	fe cf       	rjmp	.-4      	; 0x8c4 <set_high_score_name+0xc0>
				eeprom_write_byte(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     8c8:	67 ee       	ldi	r22, 0xE7	; 231
     8ca:	80 e4       	ldi	r24, 0x40	; 64
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>

				eeprom_write_dword(high_score_position(), get_score());
     8d2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     8d6:	6b 01       	movw	r12, r22
     8d8:	7c 01       	movw	r14, r24
     8da:	0e 94 a1 03 	call	0x742	; 0x742 <high_score_position>
     8de:	b7 01       	movw	r22, r14
     8e0:	a6 01       	movw	r20, r12
     8e2:	0e 94 94 16 	call	0x2d28	; 0x2d28 <eeprom_write_dword>
				eeprom_write_byte(high_score_name_position(), score_name[0]);
     8e6:	19 81       	ldd	r17, Y+1	; 0x01
     8e8:	0e 94 40 03 	call	0x680	; 0x680 <high_score_name_position>
     8ec:	61 2f       	mov	r22, r17
     8ee:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
				eeprom_write_byte(high_score_name_position() +8, score_name[1]); 
     8f2:	1a 81       	ldd	r17, Y+2	; 0x02
     8f4:	0e 94 40 03 	call	0x680	; 0x680 <high_score_name_position>
     8f8:	61 2f       	mov	r22, r17
     8fa:	08 96       	adiw	r24, 0x08	; 8
     8fc:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
				eeprom_write_byte(high_score_name_position() +16, score_name[2]);
     900:	1b 81       	ldd	r17, Y+3	; 0x03
     902:	0e 94 40 03 	call	0x680	; 0x680 <high_score_name_position>
     906:	61 2f       	mov	r22, r17
     908:	40 96       	adiw	r24, 0x10	; 16
     90a:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
				
				clear_terminal();
     90e:	0e 94 0e 10 	call	0x201c	; 0x201c <clear_terminal>
				printf("a: %u", get_score());
     912:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	7f 93       	push	r23
     91c:	6f 93       	push	r22
     91e:	8a e6       	ldi	r24, 0x6A	; 106
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
				printf("b: %u ", eeprom_read_dword(high_score_position()));
     92a:	0e 94 a1 03 	call	0x742	; 0x742 <high_score_position>
     92e:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     932:	9f 93       	push	r25
     934:	8f 93       	push	r24
     936:	7f 93       	push	r23
     938:	6f 93       	push	r22
     93a:	80 e7       	ldi	r24, 0x70	; 112
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	9f 93       	push	r25
     940:	8f 93       	push	r24
     942:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
				printf("c: %c", eeprom_read_byte(high_score_name_position()));
     946:	0e 94 40 03 	call	0x680	; 0x680 <high_score_name_position>
     94a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <eeprom_read_byte>
     94e:	1f 92       	push	r1
     950:	8f 93       	push	r24
     952:	87 e7       	ldi	r24, 0x77	; 119
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	9f 93       	push	r25
     958:	8f 93       	push	r24
     95a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
				break;
			}
		}
	}
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	de bf       	out	0x3e, r29	; 62
     964:	0f be       	out	0x3f, r0	; 63
     966:	cd bf       	out	0x3d, r28	; 61
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	ff 90       	pop	r15
     97a:	ef 90       	pop	r14
     97c:	df 90       	pop	r13
     97e:	cf 90       	pop	r12
     980:	08 95       	ret

00000982 <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint8_t current_signature = eeprom_read_byte(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
	move_cursor(10,17);
     98a:	61 e1       	ldi	r22, 0x11	; 17
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	8a e0       	ldi	r24, 0x0A	; 10
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	initialise_EEPFROM();
     996:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <initialise_EEPFROM>
	if(EEPROM_High_Score_has_been_initialised()){
     99a:	0e 94 15 03 	call	0x62a	; 0x62a <EEPROM_High_Score_has_been_initialised>
     99e:	89 2b       	or	r24, r25
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <display_EEPROM_high_score+0x22>
     9a2:	ab c0       	rjmp	.+342    	; 0xafa <display_EEPROM_high_score+0x178>

		printf("First: %s: %d", eeprom_read_dword(NAME_ONE), eeprom_read_dword(SCORE_ONE));
     9a4:	80 ea       	ldi	r24, 0xA0	; 160
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     9ac:	c6 2f       	mov	r28, r22
     9ae:	d7 2f       	mov	r29, r23
     9b0:	18 2f       	mov	r17, r24
     9b2:	09 2f       	mov	r16, r25
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	7f 93       	push	r23
     9ca:	6f 93       	push	r22
     9cc:	8d e7       	ldi	r24, 0x7D	; 125
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	9f 93       	push	r25
     9d2:	8f 93       	push	r24
     9d4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
		move_cursor(10,18);
     9d8:	62 e1       	ldi	r22, 0x12	; 18
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	8a e0       	ldi	r24, 0x0A	; 10
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		printf("Second: %s: %d", eeprom_read_dword(NAME_TWO), eeprom_read_dword(SCORE_TWO));
     9e4:	80 ec       	ldi	r24, 0xC0	; 192
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     9ec:	c6 2f       	mov	r28, r22
     9ee:	d7 2f       	mov	r29, r23
     9f0:	18 2f       	mov	r17, r24
     9f2:	09 2f       	mov	r16, r25
     9f4:	80 e2       	ldi	r24, 0x20	; 32
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	df 93       	push	r29
     a02:	cf 93       	push	r28
     a04:	9f 93       	push	r25
     a06:	8f 93       	push	r24
     a08:	7f 93       	push	r23
     a0a:	6f 93       	push	r22
     a0c:	8b e8       	ldi	r24, 0x8B	; 139
     a0e:	91 e0       	ldi	r25, 0x01	; 1
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
		move_cursor(10,19);
     a18:	63 e1       	ldi	r22, 0x13	; 19
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	8a e0       	ldi	r24, 0x0A	; 10
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		printf("Third: %s: %d", eeprom_read_dword(NAME_THREE), eeprom_read_dword(SCORE_THREE));
     a24:	80 ee       	ldi	r24, 0xE0	; 224
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     a2c:	c6 2f       	mov	r28, r22
     a2e:	d7 2f       	mov	r29, r23
     a30:	18 2f       	mov	r17, r24
     a32:	09 2f       	mov	r16, r25
     a34:	80 e4       	ldi	r24, 0x40	; 64
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	df 93       	push	r29
     a42:	cf 93       	push	r28
     a44:	9f 93       	push	r25
     a46:	8f 93       	push	r24
     a48:	7f 93       	push	r23
     a4a:	6f 93       	push	r22
     a4c:	8a e9       	ldi	r24, 0x9A	; 154
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
		move_cursor(10,20);
     a58:	64 e1       	ldi	r22, 0x14	; 20
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	8a e0       	ldi	r24, 0x0A	; 10
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		printf("Fourth: %s: %d", eeprom_read_dword(NAME_FOUR), eeprom_read_dword(SCORE_FOUR));
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     a6c:	c6 2f       	mov	r28, r22
     a6e:	d7 2f       	mov	r29, r23
     a70:	18 2f       	mov	r17, r24
     a72:	09 2f       	mov	r16, r25
     a74:	80 e6       	ldi	r24, 0x60	; 96
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	7f 93       	push	r23
     a8a:	6f 93       	push	r22
     a8c:	88 ea       	ldi	r24, 0xA8	; 168
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
		move_cursor(10,21);
     a98:	8d b7       	in	r24, 0x3d	; 61
     a9a:	9e b7       	in	r25, 0x3e	; 62
     a9c:	88 96       	adiw	r24, 0x28	; 40
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	9e bf       	out	0x3e, r25	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	8d bf       	out	0x3d, r24	; 61
     aa8:	65 e1       	ldi	r22, 0x15	; 21
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	8a e0       	ldi	r24, 0x0A	; 10
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		printf("Fifth: %s: %d", eeprom_read_dword(NAME_FIVE), eeprom_read_dword(SCORE_FIVE));
     ab4:	80 e2       	ldi	r24, 0x20	; 32
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     abc:	c6 2f       	mov	r28, r22
     abe:	d7 2f       	mov	r29, r23
     ac0:	18 2f       	mov	r17, r24
     ac2:	09 2f       	mov	r16, r25
     ac4:	80 e8       	ldi	r24, 0x80	; 128
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 80 16 	call	0x2d00	; 0x2d00 <eeprom_read_dword>
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	9f 93       	push	r25
     ad6:	8f 93       	push	r24
     ad8:	7f 93       	push	r23
     ada:	6f 93       	push	r22
     adc:	87 eb       	ldi	r24, 0xB7	; 183
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	9f 93       	push	r25
     ae2:	8f 93       	push	r24
     ae4:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
     ae8:	8d b7       	in	r24, 0x3d	; 61
     aea:	9e b7       	in	r25, 0x3e	; 62
     aec:	0a 96       	adiw	r24, 0x0a	; 10
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	9e bf       	out	0x3e, r25	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	8d bf       	out	0x3d, r24	; 61
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <display_EEPROM_high_score+0x188>
	}
	else{
		printf("There Are Currently No HighScores");
     afa:	85 ec       	ldi	r24, 0xC5	; 197
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
	}
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	08 95       	ret

00000b14 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     b14:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <numFoodItems>
     b18:	08 95       	ret

00000b1a <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     b1a:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <numFoodItems>
     b1e:	13 16       	cp	r1, r19
     b20:	84 f4       	brge	.+32     	; 0xb42 <food_at+0x28>
        if(foodPositions[id] == posn) {
     b22:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <foodPositions>
     b26:	89 17       	cp	r24, r25
     b28:	71 f0       	breq	.+28     	; 0xb46 <food_at+0x2c>
     b2a:	e1 e7       	ldi	r30, 0x71	; 113
     b2c:	f2 e0       	ldi	r31, 0x02	; 2
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	03 c0       	rjmp	.+6      	; 0xb38 <food_at+0x1e>
     b32:	21 91       	ld	r18, Z+
     b34:	28 17       	cp	r18, r24
     b36:	49 f0       	breq	.+18     	; 0xb4a <food_at+0x30>
     b38:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     b3a:	39 13       	cpse	r19, r25
     b3c:	fa cf       	rjmp	.-12     	; 0xb32 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     b3e:	8f ef       	ldi	r24, 0xFF	; 255
     b40:	08 95       	ret
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret
     b4a:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     b4c:	08 95       	ret

00000b4e <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     b4e:	0e 94 8d 05 	call	0xb1a	; 0xb1a <food_at>
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	8f 3f       	cpi	r24, 0xFF	; 255
     b56:	09 f4       	brne	.+2      	; 0xb5a <is_food_at+0xc>
     b58:	90 e0       	ldi	r25, 0x00	; 0
}
     b5a:	89 2f       	mov	r24, r25
     b5c:	08 95       	ret

00000b5e <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     b5e:	ff 92       	push	r15
     b60:	0f 93       	push	r16
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     b68:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <numFoodItems>
     b6c:	88 30       	cpi	r24, 0x08	; 8
     b6e:	0c f0       	brlt	.+2      	; 0xb72 <add_food_item+0x14>
     b70:	44 c0       	rjmp	.+136    	; 0xbfa <add_food_item+0x9c>
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	10 e0       	ldi	r17, 0x00	; 0
     b76:	d0 e0       	ldi	r29, 0x00	; 0
     b78:	c0 e0       	ldi	r28, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <add_food_item+0x22>
     b7c:	0f 5f       	subi	r16, 0xFF	; 255
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     b80:	2c 2f       	mov	r18, r28
     b82:	cc 0f       	add	r28, r28
     b84:	33 0b       	sbc	r19, r19
     b86:	2d 5f       	subi	r18, 0xFD	; 253
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	20 0f       	add	r18, r16
     b8c:	31 1f       	adc	r19, r17
     b8e:	2f 70       	andi	r18, 0x0F	; 15
     b90:	30 78       	andi	r19, 0x80	; 128
     b92:	33 23       	and	r19, r19
     b94:	34 f4       	brge	.+12     	; 0xba2 <add_food_item+0x44>
     b96:	21 50       	subi	r18, 0x01	; 1
     b98:	31 09       	sbc	r19, r1
     b9a:	20 6f       	ori	r18, 0xF0	; 240
     b9c:	3f 6f       	ori	r19, 0xFF	; 255
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
     ba2:	82 2f       	mov	r24, r18
     ba4:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     ba6:	6d 2f       	mov	r22, r29
     ba8:	dd 0f       	add	r29, r29
     baa:	77 0b       	sbc	r23, r23
     bac:	6b 5f       	subi	r22, 0xFB	; 251
     bae:	7f 4f       	sbci	r23, 0xFF	; 255
     bb0:	67 70       	andi	r22, 0x07	; 7
     bb2:	70 78       	andi	r23, 0x80	; 128
     bb4:	77 23       	and	r23, r23
     bb6:	34 f4       	brge	.+12     	; 0xbc4 <add_food_item+0x66>
     bb8:	61 50       	subi	r22, 0x01	; 1
     bba:	71 09       	sbc	r23, r1
     bbc:	68 6f       	ori	r22, 0xF8	; 248
     bbe:	7f 6f       	ori	r23, 0xFF	; 255
     bc0:	6f 5f       	subi	r22, 0xFF	; 255
     bc2:	7f 4f       	sbci	r23, 0xFF	; 255
     bc4:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     bc6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
     bca:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     bcc:	03 36       	cpi	r16, 0x63	; 99
     bce:	11 05       	cpc	r17, r1
     bd0:	b1 f0       	breq	.+44     	; 0xbfe <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     bd2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     bd6:	81 11       	cpse	r24, r1
     bd8:	d1 cf       	rjmp	.-94     	; 0xb7c <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     bda:	8f 2d       	mov	r24, r15
     bdc:	0e 94 a7 05 	call	0xb4e	; 0xb4e <is_food_at>
     be0:	81 11       	cpse	r24, r1
     be2:	cc cf       	rjmp	.-104    	; 0xb7c <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     be4:	8f 2d       	mov	r24, r15
     be6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <is_superfood_at>
     bea:	81 11       	cpse	r24, r1
     bec:	c7 cf       	rjmp	.-114    	; 0xb7c <add_food_item+0x1e>
     bee:	8f 2d       	mov	r24, r15
     bf0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <is_rat_at>
     bf4:	81 11       	cpse	r24, r1
     bf6:	c2 cf       	rjmp	.-124    	; 0xb7c <add_food_item+0x1e>
     bf8:	04 c0       	rjmp	.+8      	; 0xc02 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     bfa:	88 e0       	ldi	r24, 0x08	; 8
     bfc:	0f c0       	rjmp	.+30     	; 0xc1c <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     bfe:	88 e0       	ldi	r24, 0x08	; 8
     c00:	0d c0       	rjmp	.+26     	; 0xc1c <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     c02:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <numFoodItems>
	foodPositions[newFoodID] = test_position;
     c06:	e8 2f       	mov	r30, r24
     c08:	08 2e       	mov	r0, r24
     c0a:	00 0c       	add	r0, r0
     c0c:	ff 0b       	sbc	r31, r31
     c0e:	e0 59       	subi	r30, 0x90	; 144
     c10:	fd 4f       	sbci	r31, 0xFD	; 253
     c12:	f0 82       	st	Z, r15
	numFoodItems++;
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     c1a:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	08 95       	ret

00000c28 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     c28:	e8 2f       	mov	r30, r24
     c2a:	88 0f       	add	r24, r24
     c2c:	ff 0b       	sbc	r31, r31
     c2e:	e0 59       	subi	r30, 0x90	; 144
     c30:	fd 4f       	sbci	r31, 0xFD	; 253
}
     c32:	80 81       	ld	r24, Z
     c34:	08 95       	ret

00000c36 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     c36:	88 23       	and	r24, r24
     c38:	b4 f0       	brlt	.+44     	; 0xc66 <remove_food+0x30>
     c3a:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <numFoodItems>
     c3e:	82 17       	cp	r24, r18
     c40:	94 f4       	brge	.+36     	; 0xc66 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     c42:	8f 5f       	subi	r24, 0xFF	; 255
     c44:	82 17       	cp	r24, r18
     c46:	64 f4       	brge	.+24     	; 0xc60 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     c48:	e8 2f       	mov	r30, r24
     c4a:	08 2e       	mov	r0, r24
     c4c:	00 0c       	add	r0, r0
     c4e:	ff 0b       	sbc	r31, r31
     c50:	e0 59       	subi	r30, 0x90	; 144
     c52:	fd 4f       	sbci	r31, 0xFD	; 253
     c54:	90 81       	ld	r25, Z
     c56:	31 97       	sbiw	r30, 0x01	; 1
     c58:	90 83       	st	Z, r25
     c5a:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     c5c:	82 17       	cp	r24, r18
     c5e:	a4 f3       	brlt	.-24     	; 0xc48 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     c60:	21 50       	subi	r18, 0x01	; 1
     c62:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <numFoodItems>
     c66:	08 95       	ret

00000c68 <update_display_at_position>:
	
	int get_current_game_speed(void){
		return current_speed;
	}
	void reset_game_speed(void){
		current_speed = 600; 
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	c8 2f       	mov	r28, r24
     c70:	16 2f       	mov	r17, r22
     c72:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
     c76:	d8 2f       	mov	r29, r24
     c78:	8c 2f       	mov	r24, r28
     c7a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
     c7e:	41 2f       	mov	r20, r17
     c80:	6d 2f       	mov	r22, r29
     c82:	0e 94 80 07 	call	0xf00	; 0xf00 <ledmatrix_update_pixel>
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <increase_game_speed>:
     c8e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
     c92:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
     c96:	80 e0       	ldi	r24, 0x00	; 0
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 da 10 	call	0x21b4	; 0x21b4 <__floatunsisf>
     c9e:	26 e6       	ldi	r18, 0x66	; 102
     ca0:	36 e6       	ldi	r19, 0x66	; 102
     ca2:	46 e6       	ldi	r20, 0x66	; 102
     ca4:	5f e3       	ldi	r21, 0x3F	; 63
     ca6:	0e 94 40 11 	call	0x2280	; 0x2280 <__mulsf3>
     caa:	0e 94 ab 10 	call	0x2156	; 0x2156 <__fixunssfsi>
     cae:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
     cb2:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
     cb6:	08 95       	ret

00000cb8 <get_current_game_speed>:
     cb8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
     cbc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
     cc0:	08 95       	ret

00000cc2 <update_terminal_score>:
	}
	
	void update_terminal_score(void){
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	cd b7       	in	r28, 0x3d	; 61
     ccc:	de b7       	in	r29, 0x3e	; 62
     cce:	c0 55       	subi	r28, 0x50	; 80
     cd0:	d1 09       	sbc	r29, r1
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
		move_cursor(10,3);
     cdc:	63 e0       	ldi	r22, 0x03	; 3
     cde:	8a e0       	ldi	r24, 0x0A	; 10
     ce0:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		char str[80];
		
		sprintf(str, "%u", get_score());
     ce4:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     ce8:	9f 93       	push	r25
     cea:	8f 93       	push	r24
     cec:	7f 93       	push	r23
     cee:	6f 93       	push	r22
     cf0:	8d e6       	ldi	r24, 0x6D	; 109
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	9f 93       	push	r25
     cf6:	8f 93       	push	r24
     cf8:	8e 01       	movw	r16, r28
     cfa:	0f 5f       	subi	r16, 0xFF	; 255
     cfc:	1f 4f       	sbci	r17, 0xFF	; 255
     cfe:	1f 93       	push	r17
     d00:	0f 93       	push	r16
     d02:	0e 94 c5 13 	call	0x278a	; 0x278a <sprintf>
		puts(str);
     d06:	c8 01       	movw	r24, r16
     d08:	0e 94 95 13 	call	0x272a	; 0x272a <puts>

	}
     d0c:	0f b6       	in	r0, 0x3f	; 63
     d0e:	f8 94       	cli
     d10:	de bf       	out	0x3e, r29	; 62
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	cd bf       	out	0x3d, r28	; 61
     d16:	c0 5b       	subi	r28, 0xB0	; 176
     d18:	df 4f       	sbci	r29, 0xFF	; 255
     d1a:	0f b6       	in	r0, 0x3f	; 63
     d1c:	f8 94       	cli
     d1e:	de bf       	out	0x3e, r29	; 62
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	cd bf       	out	0x3d, r28	; 61
     d24:	df 91       	pop	r29
     d26:	cf 91       	pop	r28
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	08 95       	ret

00000d2e <attempt_to_move_snake_forward>:
		}
	}	
}

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     d36:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <get_snake_head_position>
     d3a:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     d3c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <advance_snake_head>
     d40:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     d42:	88 23       	and	r24, r24
     d44:	0c f4       	brge	.+2      	; 0xd48 <attempt_to_move_snake_forward+0x1a>
     d46:	55 c0       	rjmp	.+170    	; 0xdf2 <attempt_to_move_snake_forward+0xc4>
	}
// 	if(move_result ==1){
// 		play_snake_move_sound_effect(); 
// 	}

	add_to_score(1);
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <add_to_score>
	PosnType new_head_position = get_snake_head_position();
     d50:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <get_snake_head_position>
     d54:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     d56:	8e ef       	ldi	r24, 0xFE	; 254
     d58:	8c 0f       	add	r24, r28
     d5a:	82 30       	cpi	r24, 0x02	; 2
     d5c:	c0 f4       	brcc	.+48     	; 0xd8e <attempt_to_move_snake_forward+0x60>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     d5e:	81 2f       	mov	r24, r17
     d60:	0e 94 8d 05 	call	0xb1a	; 0xb1a <food_at>
		remove_food(foodID);
     d64:	0e 94 1b 06 	call	0xc36	; 0xc36 <remove_food>
		play_eating_food_sound_effect();
     d68:	0e 94 22 02 	call	0x444	; 0x444 <play_eating_food_sound_effect>

		//  Account for additional two points for eating food. 
		add_to_score(2);
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <add_to_score>
		increase_game_speed();
     d74:	0e 94 47 06 	call	0xc8e	; 0xc8e <increase_game_speed>
		
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     d78:	0e 94 af 05 	call	0xb5e	; 0xb5e <add_food_item>
     d7c:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     d7e:	0e 94 cc 07 	call	0xf98	; 0xf98 <is_position_valid>
     d82:	88 23       	and	r24, r24
     d84:	21 f0       	breq	.+8      	; 0xd8e <attempt_to_move_snake_forward+0x60>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     d86:	63 e3       	ldi	r22, 0x33	; 51
     d88:	80 2f       	mov	r24, r16
     d8a:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
		}
	}
	if(move_result == ATE_SUPERFOOD || move_result == ATE_SUPERFOOD_BUT_CANT_GROW){
     d8e:	8c ef       	ldi	r24, 0xFC	; 252
     d90:	8c 0f       	add	r24, r28
     d92:	82 30       	cpi	r24, 0x02	; 2
     d94:	50 f4       	brcc	.+20     	; 0xdaa <attempt_to_move_snake_forward+0x7c>
		eat_superfood_from_board();
     d96:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <eat_superfood_from_board>
		add_to_score(9);
     d9a:	89 e0       	ldi	r24, 0x09	; 9
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <add_to_score>
		increase_game_speed();
     da2:	0e 94 47 06 	call	0xc8e	; 0xc8e <increase_game_speed>
		play_eating_food_sound_effect();	
     da6:	0e 94 22 02 	call	0x444	; 0x444 <play_eating_food_sound_effect>
	}
	
	if(move_result == ATE_RAT || move_result == ATE_RAT_BUT_CANT_GROW){
     daa:	8a ef       	ldi	r24, 0xFA	; 250
     dac:	8c 0f       	add	r24, r28
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	50 f4       	brcc	.+20     	; 0xdc6 <attempt_to_move_snake_forward+0x98>
		add_new_rat_position();
     db2:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <add_new_rat_position>
		add_to_score(4);
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <add_to_score>
		increase_game_speed();
     dbe:	0e 94 47 06 	call	0xc8e	; 0xc8e <increase_game_speed>
		play_eating_food_sound_effect();
     dc2:	0e 94 22 02 	call	0x444	; 0x444 <play_eating_food_sound_effect>
	// display the snake head at that position.
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW ||
     dc6:	cd 7f       	andi	r28, 0xFD	; 253
     dc8:	c1 30       	cpi	r28, 0x01	; 1
     dca:	11 f0       	breq	.+4      	; 0xdd0 <attempt_to_move_snake_forward+0xa2>
     dcc:	c5 30       	cpi	r28, 0x05	; 5
     dce:	29 f4       	brne	.+10     	; 0xdda <attempt_to_move_snake_forward+0xac>
		 move_result == ATE_SUPERFOOD_BUT_CANT_GROW || move_result == ATE_RAT_BUT_CANT_GROW) {

		//  Because Score has changed, update Score on Terminal
		PosnType prev_tail_posn = advance_snake_tail();
     dd0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
	}

	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     dda:	60 ef       	ldi	r22, 0xF0	; 240
     ddc:	8d 2f       	mov	r24, r29
     dde:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     de2:	6f e0       	ldi	r22, 0x0F	; 15
     de4:	81 2f       	mov	r24, r17
     de6:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
	update_terminal_score();	
     dea:	0e 94 61 06 	call	0xcc2	; 0xcc2 <update_terminal_score>

	return 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <attempt_to_move_snake_forward+0xc6>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     df2:	80 e0       	ldi	r24, 0x00	; 0
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	update_terminal_score();	

	return 1;
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	08 95       	ret

00000dfe <init_score_on_terminal>:
		sprintf(str, "%u", get_score());
		puts(str);

	}
	
void init_score_on_terminal(void){
     dfe:	0f 93       	push	r16
     e00:	1f 93       	push	r17
     e02:	cf 93       	push	r28
     e04:	df 93       	push	r29
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	c0 55       	subi	r28, 0x50	; 80
     e0c:	d1 09       	sbc	r29, r1
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
		
		hide_cursor();
     e18:	0e 94 24 10 	call	0x2048	; 0x2048 <hide_cursor>
		
		move_cursor(10,1);
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		printf("Snake");
     e24:	87 ee       	ldi	r24, 0xE7	; 231
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	9f 93       	push	r25
     e2a:	8f 93       	push	r24
     e2c:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>

		move_cursor(1,3);
     e30:	63 e0       	ldi	r22, 0x03	; 3
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
		printf("Score: ");
     e38:	8d ee       	ldi	r24, 0xED	; 237
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
		move_cursor(10,3);
     e44:	63 e0       	ldi	r22, 0x03	; 3
     e46:	8a e0       	ldi	r24, 0x0A	; 10
     e48:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	
		char str[80];
		
		sprintf(str, "%u", get_score());
     e4c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
     e50:	9f 93       	push	r25
     e52:	8f 93       	push	r24
     e54:	7f 93       	push	r23
     e56:	6f 93       	push	r22
     e58:	8d e6       	ldi	r24, 0x6D	; 109
     e5a:	91 e0       	ldi	r25, 0x01	; 1
     e5c:	9f 93       	push	r25
     e5e:	8f 93       	push	r24
     e60:	8e 01       	movw	r16, r28
     e62:	0f 5f       	subi	r16, 0xFF	; 255
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	1f 93       	push	r17
     e68:	0f 93       	push	r16
     e6a:	0e 94 c5 13 	call	0x278a	; 0x278a <sprintf>
		puts(str);
     e6e:	c8 01       	movw	r24, r16
     e70:	0e 94 95 13 	call	0x272a	; 0x272a <puts>

	}
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	c0 5b       	subi	r28, 0xB0	; 176
     e80:	df 4f       	sbci	r29, 0xFF	; 255
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	08 95       	ret

00000e96 <init_game>:
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
}

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     e9a:	0e 94 c3 07 	call	0xf86	; 0xf86 <ledmatrix_clear>
	init_score_on_terminal();
     e9e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <init_score_on_terminal>
	
	int get_current_game_speed(void){
		return current_speed;
	}
	void reset_game_speed(void){
		current_speed = 600; 
     ea2:	88 e5       	ldi	r24, 0x58	; 88
     ea4:	92 e0       	ldi	r25, 0x02	; 2
     ea6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
     eaa:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
void init_game(void) {
	// Clear display
	ledmatrix_clear();
	init_score_on_terminal();
	reset_game_speed();
	add_new_rat_position();
     eae:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <add_new_rat_position>
	initialise_timer_one();
     eb2:	0e 94 90 10 	call	0x2120	; 0x2120 <initialise_timer_one>
	play_start_game_sound_effect();
     eb6:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <play_start_game_sound_effect>
	
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     eba:	0e 94 a6 0d 	call	0x1b4c	; 0x1b4c <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     ebe:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <get_snake_head_position>
     ec2:	6f e0       	ldi	r22, 0x0F	; 15
     ec4:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     ec8:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <get_snake_tail_position>
     ecc:	60 ef       	ldi	r22, 0xF0	; 240
     ece:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     ed2:	0e 94 8a 05 	call	0xb14	; 0xb14 <init_food>
     ed6:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     ed8:	0e 94 af 05 	call	0xb5e	; 0xb5e <add_food_item>
     edc:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     ede:	0e 94 cc 07 	call	0xf98	; 0xf98 <is_position_valid>
     ee2:	88 23       	and	r24, r24
     ee4:	21 f0       	breq	.+8      	; 0xeee <init_game+0x58>
			update_display_at_position(food_position, FOOD_COLOUR);
     ee6:	63 e3       	ldi	r22, 0x33	; 51
     ee8:	8d 2f       	mov	r24, r29
     eea:	0e 94 34 06 	call	0xc68	; 0xc68 <update_display_at_position>
     eee:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
     ef0:	99 f7       	brne	.-26     	; 0xed8 <init_game+0x42>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	08 95       	ret

00000ef8 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     ef8:	80 e8       	ldi	r24, 0x80	; 128
     efa:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <spi_setup_master>
     efe:	08 95       	ret

00000f00 <ledmatrix_update_pixel>:
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	80 31       	cpi	r24, 0x10	; 16
     f08:	b0 f4       	brcc	.+44     	; 0xf36 <ledmatrix_update_pixel+0x36>
     f0a:	68 30       	cpi	r22, 0x08	; 8
     f0c:	a0 f4       	brcc	.+40     	; 0xf36 <ledmatrix_update_pixel+0x36>
     f0e:	14 2f       	mov	r17, r20
     f10:	c6 2f       	mov	r28, r22
     f12:	d8 2f       	mov	r29, r24
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f1a:	6c 2f       	mov	r22, r28
     f1c:	67 70       	andi	r22, 0x07	; 7
     f1e:	80 e1       	ldi	r24, 0x10	; 16
     f20:	68 9f       	mul	r22, r24
     f22:	90 01       	movw	r18, r0
     f24:	11 24       	eor	r1, r1
     f26:	8d 2f       	mov	r24, r29
     f28:	8f 70       	andi	r24, 0x0F	; 15
     f2a:	82 2b       	or	r24, r18
     f2c:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f30:	81 2f       	mov	r24, r17
     f32:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	08 95       	ret

00000f3e <ledmatrix_update_column>:
     f3e:	0f 93       	push	r16
     f40:	1f 93       	push	r17
     f42:	cf 93       	push	r28
     f44:	df 93       	push	r29
     f46:	80 31       	cpi	r24, 0x10	; 16
     f48:	90 f4       	brcc	.+36     	; 0xf6e <ledmatrix_update_column+0x30>
     f4a:	8b 01       	movw	r16, r22
     f4c:	c8 2f       	mov	r28, r24
     f4e:	83 e0       	ldi	r24, 0x03	; 3
     f50:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f54:	8c 2f       	mov	r24, r28
     f56:	8f 70       	andi	r24, 0x0F	; 15
     f58:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f5c:	e8 01       	movw	r28, r16
     f5e:	08 5f       	subi	r16, 0xF8	; 248
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	89 91       	ld	r24, Y+
     f64:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f68:	c0 17       	cp	r28, r16
     f6a:	d1 07       	cpc	r29, r17
     f6c:	d1 f7       	brne	.-12     	; 0xf62 <ledmatrix_update_column+0x24>
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	1f 91       	pop	r17
     f74:	0f 91       	pop	r16
     f76:	08 95       	ret

00000f78 <ledmatrix_shift_display_left>:
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f84:	08 95       	ret

00000f86 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     f86:	8f e0       	ldi	r24, 0x0F	; 15
     f88:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <spi_send_byte>
     f8c:	08 95       	ret

00000f8e <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     f8e:	82 95       	swap	r24
     f90:	8f 70       	andi	r24, 0x0F	; 15
     f92:	08 95       	ret

00000f94 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     f94:	8f 70       	andi	r24, 0x0F	; 15
     f96:	08 95       	ret

00000f98 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     f98:	83 fb       	bst	r24, 3
     f9a:	88 27       	eor	r24, r24
     f9c:	80 f9       	bld	r24, 0
}
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	89 27       	eor	r24, r25
     fa2:	08 95       	ret

00000fa4 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     fa4:	20 e1       	ldi	r18, 0x10	; 16
     fa6:	82 9f       	mul	r24, r18
     fa8:	c0 01       	movw	r24, r0
     faa:	11 24       	eor	r1, r1
     fac:	67 70       	andi	r22, 0x07	; 7
}
     fae:	86 2b       	or	r24, r22
     fb0:	08 95       	ret

00000fb2 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     fb2:	0e 94 7c 07 	call	0xef8	; 0xef8 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     fb6:	0e 94 09 01 	call	0x212	; 0x212 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	60 e0       	ldi	r22, 0x00	; 0
     fbe:	7b e4       	ldi	r23, 0x4B	; 75
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	0e 94 be 0c 	call	0x197c	; 0x197c <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     fc8:	0e 94 36 10 	call	0x206c	; 0x206c <init_timer0>
	
	// Turn on global interrupts
	sei();
     fcc:	78 94       	sei
     fce:	08 95       	ret

00000fd0 <splash_screen>:
}

void splash_screen(void) {
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	0e 94 17 10 	call	0x202e	; 0x202e <set_display_attribute>
	clear_terminal();
     fe0:	0e 94 0e 10 	call	0x201c	; 0x201c <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
     fe4:	0e 94 24 10 	call	0x2048	; 0x2048 <hide_cursor>
	move_cursor(3,3);
     fe8:	63 e0       	ldi	r22, 0x03	; 3
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	printf_P(PSTR("Snake"));
     ff0:	8e ec       	ldi	r24, 0xCE	; 206
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	9f 93       	push	r25
     ff6:	8f 93       	push	r24
     ff8:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
	
	move_cursor(3,5);
     ffc:	65 e0       	ldi	r22, 0x05	; 5
     ffe:	83 e0       	ldi	r24, 0x03	; 3
    1000:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	0e 94 17 10 	call	0x202e	; 0x202e <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    100a:	84 ea       	ldi	r24, 0xA4	; 164
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	9f 93       	push	r25
    1010:	8f 93       	push	r24
    1012:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    1016:	85 e2       	ldi	r24, 0x25	; 37
    1018:	0e 94 17 10 	call	0x202e	; 0x202e <set_display_attribute>
	display_EEPROM_high_score();
    101c:	0e 94 c1 04 	call	0x982	; 0x982 <display_EEPROM_high_score>

	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1020:	0e 94 c3 07 	call	0xf86	; 0xf86 <ledmatrix_clear>
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    102c:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    102e:	0f 2e       	mov	r0, r31
    1030:	ff e0       	ldi	r31, 0x0F	; 15
    1032:	ff 2e       	mov	r15, r31
    1034:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    1036:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1038:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    103a:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    103c:	6c 2f       	mov	r22, r28
    103e:	85 ef       	ldi	r24, 0xF5	; 245
    1040:	91 e0       	ldi	r25, 0x01	; 1
    1042:	0e 94 87 0b 	call	0x170e	; 0x170e <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <splash_screen+0x92>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1048:	2f e7       	ldi	r18, 0x7F	; 127
    104a:	8c e2       	ldi	r24, 0x2C	; 44
    104c:	93 e0       	ldi	r25, 0x03	; 3
    104e:	21 50       	subi	r18, 0x01	; 1
    1050:	80 40       	sbci	r24, 0x00	; 0
    1052:	90 40       	sbci	r25, 0x00	; 0
    1054:	e1 f7       	brne	.-8      	; 0x104e <splash_screen+0x7e>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <splash_screen+0x88>
    1058:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    105a:	0e 94 1a 01 	call	0x234	; 0x234 <button_pushed>
    105e:	8f 3f       	cpi	r24, 0xFF	; 255
    1060:	a9 f5       	brne	.+106    	; 0x10cc <splash_screen+0xfc>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1062:	0e 94 96 0b 	call	0x172c	; 0x172c <scroll_display>
    1066:	81 11       	cpse	r24, r1
    1068:	ef cf       	rjmp	.-34     	; 0x1048 <splash_screen+0x78>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    106a:	0e 94 bd 12 	call	0x257a	; 0x257a <random>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	83 70       	andi	r24, 0x03	; 3
    1074:	99 27       	eor	r25, r25
    1076:	aa 27       	eor	r26, r26
    1078:	b0 78       	andi	r27, 0x80	; 128
    107a:	bb 23       	and	r27, r27
    107c:	54 f4       	brge	.+20     	; 0x1092 <splash_screen+0xc2>
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	a1 09       	sbc	r26, r1
    1082:	b1 09       	sbc	r27, r1
    1084:	8c 6f       	ori	r24, 0xFC	; 252
    1086:	9f 6f       	ori	r25, 0xFF	; 255
    1088:	af 6f       	ori	r26, 0xFF	; 255
    108a:	bf 6f       	ori	r27, 0xFF	; 255
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	a1 1d       	adc	r26, r1
    1090:	b1 1d       	adc	r27, r1
    1092:	81 30       	cpi	r24, 0x01	; 1
    1094:	91 05       	cpc	r25, r1
    1096:	a1 05       	cpc	r26, r1
    1098:	b1 05       	cpc	r27, r1
    109a:	91 f0       	breq	.+36     	; 0x10c0 <splash_screen+0xf0>
    109c:	2c f4       	brge	.+10     	; 0x10a8 <splash_screen+0xd8>
    109e:	89 2b       	or	r24, r25
    10a0:	8a 2b       	or	r24, r26
    10a2:	8b 2b       	or	r24, r27
    10a4:	59 f0       	breq	.+22     	; 0x10bc <splash_screen+0xec>
    10a6:	ca cf       	rjmp	.-108    	; 0x103c <splash_screen+0x6c>
    10a8:	82 30       	cpi	r24, 0x02	; 2
    10aa:	91 05       	cpc	r25, r1
    10ac:	a1 05       	cpc	r26, r1
    10ae:	b1 05       	cpc	r27, r1
    10b0:	49 f0       	breq	.+18     	; 0x10c4 <splash_screen+0xf4>
    10b2:	03 97       	sbiw	r24, 0x03	; 3
    10b4:	a1 05       	cpc	r26, r1
    10b6:	b1 05       	cpc	r27, r1
    10b8:	39 f0       	breq	.+14     	; 0x10c8 <splash_screen+0xf8>
    10ba:	c0 cf       	rjmp	.-128    	; 0x103c <splash_screen+0x6c>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    10bc:	cd 2f       	mov	r28, r29
    10be:	be cf       	rjmp	.-132    	; 0x103c <splash_screen+0x6c>
			case 1: colour = COLOUR_RED; break;
    10c0:	cf 2d       	mov	r28, r15
    10c2:	bc cf       	rjmp	.-136    	; 0x103c <splash_screen+0x6c>
			case 2: colour = COLOUR_YELLOW; break;
    10c4:	c0 2f       	mov	r28, r16
    10c6:	ba cf       	rjmp	.-140    	; 0x103c <splash_screen+0x6c>
			case 3: colour = COLOUR_GREEN; break;
    10c8:	c1 2f       	mov	r28, r17
    10ca:	b8 cf       	rjmp	.-144    	; 0x103c <splash_screen+0x6c>
		}
	}
}
    10cc:	df 91       	pop	r29
    10ce:	cf 91       	pop	r28
    10d0:	1f 91       	pop	r17
    10d2:	0f 91       	pop	r16
    10d4:	ff 90       	pop	r15
    10d6:	08 95       	ret

000010d8 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    10d8:	0e 94 0e 10 	call	0x201c	; 0x201c <clear_terminal>
	
	// Initialise the game and display
	init_game();
    10dc:	0e 94 4b 07 	call	0xe96	; 0xe96 <init_game>
		
	// Initialise the score
	init_score();
    10e0:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    10e4:	0e 94 17 01 	call	0x22e	; 0x22e <empty_button_queue>
	clear_serial_input_buffer();
    10e8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <clear_serial_input_buffer>
    10ec:	08 95       	ret

000010ee <handle_game_over>:
	}
	// If we get here the game is over. 
}

void handle_game_over() {
	move_cursor(10,6);
    10ee:	66 e0       	ldi	r22, 0x06	; 6
    10f0:	8a e0       	ldi	r24, 0x0A	; 10
    10f2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	// Print a message to the terminal. 
	printf_P(PSTR("GAME OVER"));
    10f6:	8a e9       	ldi	r24, 0x9A	; 154
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9f 93       	push	r25
    10fc:	8f 93       	push	r24
    10fe:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
	printf("Score: %u", get_score());
    1102:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <get_score>
    1106:	9f 93       	push	r25
    1108:	8f 93       	push	r24
    110a:	7f 93       	push	r23
    110c:	6f 93       	push	r22
    110e:	87 e0       	ldi	r24, 0x07	; 7
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	9f 93       	push	r25
    1114:	8f 93       	push	r24
    1116:	0e 94 52 13 	call	0x26a4	; 0x26a4 <printf>
	display_EEPROM_high_score();
    111a:	0e 94 c1 04 	call	0x982	; 0x982 <display_EEPROM_high_score>

	if (is_high_score()){
    111e:	0e 94 21 03 	call	0x642	; 0x642 <is_high_score>
    1122:	2d b7       	in	r18, 0x3d	; 61
    1124:	3e b7       	in	r19, 0x3e	; 62
    1126:	28 5f       	subi	r18, 0xF8	; 248
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	3e bf       	out	0x3e, r19	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	2d bf       	out	0x3d, r18	; 61
    1134:	81 11       	cpse	r24, r1
		set_high_score_name();	
    1136:	0e 94 02 04 	call	0x804	; 0x804 <set_high_score_name>
	}
	move_cursor(10,7);
    113a:	67 e0       	ldi	r22, 0x07	; 7
    113c:	8a e0       	ldi	r24, 0x0A	; 10
    113e:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1142:	8c e7       	ldi	r24, 0x7C	; 124
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
	while(button_pushed() == -1) {		
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0e 94 1a 01 	call	0x234	; 0x234 <button_pushed>
    1156:	8f 3f       	cpi	r24, 0xFF	; 255
    1158:	e1 f3       	breq	.-8      	; 0x1152 <handle_game_over+0x64>
		; // wait until a button has been pushed
	}
	
}
    115a:	08 95       	ret

0000115c <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if ((get_clock_ticks()%2) == 1) {
    115c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1160:	60 ff       	sbrs	r22, 0
    1162:	10 c0       	rjmp	.+32     	; 0x1184 <display_SSD_value+0x28>
		PORTD |= (1<<2);
    1164:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    1166:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <get_snake_length>
    116a:	ed ec       	ldi	r30, 0xCD	; 205
    116c:	8e 9f       	mul	r24, r30
    116e:	e1 2d       	mov	r30, r1
    1170:	11 24       	eor	r1, r1
    1172:	e6 95       	lsr	r30
    1174:	e6 95       	lsr	r30
    1176:	e6 95       	lsr	r30
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	ea 5e       	subi	r30, 0xEA	; 234
    117c:	fe 4f       	sbci	r31, 0xFE	; 254
    117e:	80 81       	ld	r24, Z
    1180:	82 b9       	out	0x02, r24	; 2
    1182:	1a c0       	rjmp	.+52     	; 0x11b8 <display_SSD_value+0x5c>
	}
	else if ((get_clock_ticks()%2) ==0){
    1184:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1188:	60 fd       	sbrc	r22, 0
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <display_SSD_value+0x5c>
		PORTD &= ~(1<<2);
    118c:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    118e:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <get_snake_length>
    1192:	9d ec       	ldi	r25, 0xCD	; 205
    1194:	89 9f       	mul	r24, r25
    1196:	91 2d       	mov	r25, r1
    1198:	11 24       	eor	r1, r1
    119a:	96 95       	lsr	r25
    119c:	96 95       	lsr	r25
    119e:	96 95       	lsr	r25
    11a0:	99 0f       	add	r25, r25
    11a2:	29 2f       	mov	r18, r25
    11a4:	22 0f       	add	r18, r18
    11a6:	22 0f       	add	r18, r18
    11a8:	92 0f       	add	r25, r18
    11aa:	89 1b       	sub	r24, r25
    11ac:	e8 2f       	mov	r30, r24
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	e4 5f       	subi	r30, 0xF4	; 244
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	80 81       	ld	r24, Z
    11b6:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	8a 95       	dec	r24
    11bc:	f1 f7       	brne	.-4      	; 0x11ba <display_SSD_value+0x5e>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <display_SSD_value+0x64>
    11c0:	08 95       	ret

000011c2 <play_game>:
	// Delete any pending button pushes or serial input
	empty_button_queue();
	clear_serial_input_buffer();
}

void play_game(void) {
    11c2:	4f 92       	push	r4
    11c4:	5f 92       	push	r5
    11c6:	7f 92       	push	r7
    11c8:	8f 92       	push	r8
    11ca:	9f 92       	push	r9
    11cc:	af 92       	push	r10
    11ce:	bf 92       	push	r11
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    11e0:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    11e4:	4b 01       	movw	r8, r22
    11e6:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	0f ef       	ldi	r16, 0xFF	; 255
		}else if(serial_input == 'o' || serial_input == 'O'){
			handle_game_over(); 
// 			load_EEPROM_data_on_next_game = 1;
// 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    11ec:	0f 2e       	mov	r0, r31
    11ee:	ff ed       	ldi	r31, 0xDF	; 223
    11f0:	7f 2e       	mov	r7, r31
    11f2:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    11f4:	0f 2e       	mov	r0, r31
    11f6:	ff e8       	ldi	r31, 0x8F	; 143
    11f8:	4f 2e       	mov	r4, r31
    11fa:	f3 e0       	ldi	r31, 0x03	; 3
    11fc:	5f 2e       	mov	r5, r31
    11fe:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			display_SSD_value();
    1200:	0e 94 ae 08 	call	0x115c	; 0x115c <display_SSD_value>
			if(time_to_add_superfood()){
    1204:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <time_to_add_superfood>
    1208:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    120a:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    120e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <time_to_remove_superfood>
    1212:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    1214:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    1218:	0e 94 4e 0b 	call	0x169c	; 0x169c <is_time_to_move_rat>
    121c:	81 11       	cpse	r24, r1
    121e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <move_rat>
			handle_buzzer_loop();
    1222:	0e 94 59 02 	call	0x4b2	; 0x4b2 <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    1226:	0e 94 55 10 	call	0x20aa	; 0x20aa <timer_is_paused>
    122a:	89 2b       	or	r24, r25
    122c:	19 f0       	breq	.+6      	; 0x1234 <play_game+0x72>
			button = -1;
			empty_button_queue();
    122e:	0e 94 17 01 	call	0x22e	; 0x22e <empty_button_queue>
    1232:	06 c0       	rjmp	.+12     	; 0x1240 <play_game+0x7e>
			}else{
		button = button_pushed();}
    1234:	0e 94 1a 01 	call	0x234	; 0x234 <button_pushed>
    1238:	c8 2f       	mov	r28, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    123a:	8f 3f       	cpi	r24, 0xFF	; 255
    123c:	09 f0       	breq	.+2      	; 0x1240 <play_game+0x7e>
    123e:	8d c0       	rjmp	.+282    	; 0x135a <play_game+0x198>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    1240:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <serial_input_available>
    1244:	88 23       	and	r24, r24
    1246:	09 f4       	brne	.+2      	; 0x124a <play_game+0x88>
    1248:	97 c0       	rjmp	.+302    	; 0x1378 <play_game+0x1b6>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    124a:	f2 01       	movw	r30, r4
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	0e 94 14 13 	call	0x2628	; 0x2628 <fgetc>
    1254:	d8 2f       	mov	r29, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1256:	11 11       	cpse	r17, r1
    1258:	03 c0       	rjmp	.+6      	; 0x1260 <play_game+0x9e>
    125a:	8b 31       	cpi	r24, 0x1B	; 27
    125c:	51 f4       	brne	.+20     	; 0x1272 <play_game+0xb0>
    125e:	89 c0       	rjmp	.+274    	; 0x1372 <play_game+0x1b0>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1260:	11 30       	cpi	r17, 0x01	; 1
    1262:	19 f4       	brne	.+6      	; 0x126a <play_game+0xa8>
    1264:	8b 35       	cpi	r24, 0x5B	; 91
    1266:	29 f4       	brne	.+10     	; 0x1272 <play_game+0xb0>
    1268:	86 c0       	rjmp	.+268    	; 0x1376 <play_game+0x1b4>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    126a:	12 30       	cpi	r17, 0x02	; 2
    126c:	09 f4       	brne	.+2      	; 0x1270 <play_game+0xae>
    126e:	7b c0       	rjmp	.+246    	; 0x1366 <play_game+0x1a4>
    1270:	6e c0       	rjmp	.+220    	; 0x134e <play_game+0x18c>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1272:	0e 94 55 10 	call	0x20aa	; 0x20aa <timer_is_paused>
    1276:	89 2b       	or	r24, r25
    1278:	49 f0       	breq	.+18     	; 0x128c <play_game+0xca>
    127a:	37 c0       	rjmp	.+110    	; 0x12ea <play_game+0x128>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    127c:	cc 23       	and	r28, r28
    127e:	11 f0       	breq	.+4      	; 0x1284 <play_game+0xc2>
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <play_game+0xd0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1282:	10 e0       	ldi	r17, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <set_snake_dirn>
    128a:	44 c0       	rjmp	.+136    	; 0x1314 <play_game+0x152>
    128c:	10 e0       	ldi	r17, 0x00	; 0
    128e:	c0 2f       	mov	r28, r16
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <play_game+0xd2>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1292:	d0 2f       	mov	r29, r16
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    1294:	c2 30       	cpi	r28, 0x02	; 2
    1296:	19 f0       	breq	.+6      	; 0x129e <play_game+0xdc>
    1298:	80 2f       	mov	r24, r16
    129a:	81 34       	cpi	r24, 0x41	; 65
    129c:	21 f4       	brne	.+8      	; 0x12a6 <play_game+0xe4>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <set_snake_dirn>
    12a4:	37 c0       	rjmp	.+110    	; 0x1314 <play_game+0x152>
		} else if(button==3 || escape_sequence_char=='D') {
    12a6:	c3 30       	cpi	r28, 0x03	; 3
    12a8:	11 f0       	breq	.+4      	; 0x12ae <play_game+0xec>
    12aa:	84 34       	cpi	r24, 0x44	; 68
    12ac:	21 f4       	brne	.+8      	; 0x12b6 <play_game+0xf4>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    12ae:	83 e0       	ldi	r24, 0x03	; 3
    12b0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <set_snake_dirn>
    12b4:	2f c0       	rjmp	.+94     	; 0x1314 <play_game+0x152>
		} else if (button==1 || escape_sequence_char == 'B') {
    12b6:	c1 30       	cpi	r28, 0x01	; 1
    12b8:	11 f0       	breq	.+4      	; 0x12be <play_game+0xfc>
    12ba:	82 34       	cpi	r24, 0x42	; 66
    12bc:	29 f4       	brne	.+10     	; 0x12c8 <play_game+0x106>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <set_snake_dirn>
    12c4:	27 c0       	rjmp	.+78     	; 0x1314 <play_game+0x152>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    12c6:	10 e0       	ldi	r17, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    12c8:	8d 2f       	mov	r24, r29
    12ca:	8f 7d       	andi	r24, 0xDF	; 223
    12cc:	80 35       	cpi	r24, 0x50	; 80
    12ce:	19 f4       	brne	.+6      	; 0x12d6 <play_game+0x114>
			toggle_timer_clock();
    12d0:	0e 94 4e 10 	call	0x209c	; 0x209c <toggle_timer_clock>
    12d4:	1f c0       	rjmp	.+62     	; 0x1314 <play_game+0x152>
		}else if(serial_input == 's'|| serial_input == 's'){
    12d6:	d3 37       	cpi	r29, 0x73	; 115
    12d8:	19 f4       	brne	.+6      	; 0x12e0 <play_game+0x11e>
			save_game_to_EPPROM();
    12da:	0e 94 6f 02 	call	0x4de	; 0x4de <save_game_to_EPPROM>
    12de:	1a c0       	rjmp	.+52     	; 0x1314 <play_game+0x152>
		}else if(serial_input == 'o' || serial_input == 'O'){
    12e0:	8f 34       	cpi	r24, 0x4F	; 79
    12e2:	c1 f4       	brne	.+48     	; 0x1314 <play_game+0x152>
			handle_game_over(); 
    12e4:	0e 94 77 08 	call	0x10ee	; 0x10ee <handle_game_over>
    12e8:	15 c0       	rjmp	.+42     	; 0x1314 <play_game+0x152>
// 			load_EEPROM_data_on_next_game = 1;
// 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    12ea:	8d 2f       	mov	r24, r29
    12ec:	8f 7d       	andi	r24, 0xDF	; 223
    12ee:	80 35       	cpi	r24, 0x50	; 80
    12f0:	21 f4       	brne	.+8      	; 0x12fa <play_game+0x138>
			toggle_timer_clock();
    12f2:	0e 94 4e 10 	call	0x209c	; 0x209c <toggle_timer_clock>
    12f6:	10 e0       	ldi	r17, 0x00	; 0
    12f8:	0d c0       	rjmp	.+26     	; 0x1314 <play_game+0x152>
		}else if(serial_input == 's'|| serial_input == 's'){
    12fa:	d3 37       	cpi	r29, 0x73	; 115
    12fc:	21 f4       	brne	.+8      	; 0x1306 <play_game+0x144>
			save_game_to_EPPROM();
    12fe:	0e 94 6f 02 	call	0x4de	; 0x4de <save_game_to_EPPROM>
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <play_game+0x152>
    1306:	10 e0       	ldi	r17, 0x00	; 0
		}else if(serial_input == 'o' || serial_input == 'O'){
    1308:	8f 34       	cpi	r24, 0x4F	; 79
    130a:	21 f4       	brne	.+8      	; 0x1314 <play_game+0x152>
			load_EEPROM_data_on_next_game = 1;
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <load_EEPROM_data_on_next_game>
		break;
    1312:	41 c0       	rjmp	.+130    	; 0x1396 <play_game+0x1d4>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    1314:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1318:	6b 01       	movw	r12, r22
    131a:	7c 01       	movw	r14, r24
    131c:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <get_current_game_speed>
    1320:	09 2e       	mov	r0, r25
    1322:	00 0c       	add	r0, r0
    1324:	aa 0b       	sbc	r26, r26
    1326:	bb 0b       	sbc	r27, r27
    1328:	88 0d       	add	r24, r8
    132a:	99 1d       	adc	r25, r9
    132c:	aa 1d       	adc	r26, r10
    132e:	bb 1d       	adc	r27, r11
    1330:	c8 16       	cp	r12, r24
    1332:	d9 06       	cpc	r13, r25
    1334:	ea 06       	cpc	r14, r26
    1336:	fb 06       	cpc	r15, r27
    1338:	08 f4       	brcc	.+2      	; 0x133c <play_game+0x17a>
    133a:	62 cf       	rjmp	.-316    	; 0x1200 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    133c:	0e 94 97 06 	call	0xd2e	; 0xd2e <attempt_to_move_snake_forward>
    1340:	88 23       	and	r24, r24
    1342:	49 f1       	breq	.+82     	; 0x1396 <play_game+0x1d4>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    1344:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1348:	4b 01       	movw	r8, r22
    134a:	5c 01       	movw	r10, r24
    134c:	59 cf       	rjmp	.-334    	; 0x1200 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    134e:	0e 94 55 10 	call	0x20aa	; 0x20aa <timer_is_paused>
    1352:	89 2b       	or	r24, r25
    1354:	09 f4       	brne	.+2      	; 0x1358 <play_game+0x196>
    1356:	b7 cf       	rjmp	.-146    	; 0x12c6 <play_game+0x104>
    1358:	c8 cf       	rjmp	.-112    	; 0x12ea <play_game+0x128>
    135a:	0e 94 55 10 	call	0x20aa	; 0x20aa <timer_is_paused>
    135e:	89 2b       	or	r24, r25
    1360:	09 f4       	brne	.+2      	; 0x1364 <play_game+0x1a2>
    1362:	8c cf       	rjmp	.-232    	; 0x127c <play_game+0xba>
    1364:	d7 cf       	rjmp	.-82     	; 0x1314 <play_game+0x152>
    1366:	0e 94 55 10 	call	0x20aa	; 0x20aa <timer_is_paused>
    136a:	89 2b       	or	r24, r25
    136c:	51 f0       	breq	.+20     	; 0x1382 <play_game+0x1c0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    136e:	10 e0       	ldi	r17, 0x00	; 0
    1370:	10 c0       	rjmp	.+32     	; 0x1392 <play_game+0x1d0>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1372:	11 e0       	ldi	r17, 0x01	; 1
    1374:	01 c0       	rjmp	.+2      	; 0x1378 <play_game+0x1b6>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1376:	12 e0       	ldi	r17, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1378:	0e 94 55 10 	call	0x20aa	; 0x20aa <timer_is_paused>
    137c:	89 2b       	or	r24, r25
    137e:	49 f4       	brne	.+18     	; 0x1392 <play_game+0x1d0>
    1380:	c9 cf       	rjmp	.-110    	; 0x1314 <play_game+0x152>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1382:	d3 34       	cpi	r29, 0x43	; 67
    1384:	09 f4       	brne	.+2      	; 0x1388 <play_game+0x1c6>
    1386:	7d cf       	rjmp	.-262    	; 0x1282 <play_game+0xc0>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1388:	8d 2f       	mov	r24, r29
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    138a:	10 e0       	ldi	r17, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    138c:	d0 2f       	mov	r29, r16
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    138e:	c0 2f       	mov	r28, r16
    1390:	84 cf       	rjmp	.-248    	; 0x129a <play_game+0xd8>
		}else if(serial_input == 'o' || serial_input == 'O'){
			handle_game_over(); 
// 			load_EEPROM_data_on_next_game = 1;
// 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1392:	87 2d       	mov	r24, r7
    1394:	b9 cf       	rjmp	.-142    	; 0x1308 <play_game+0x146>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	1f 91       	pop	r17
    139c:	0f 91       	pop	r16
    139e:	ff 90       	pop	r15
    13a0:	ef 90       	pop	r14
    13a2:	df 90       	pop	r13
    13a4:	cf 90       	pop	r12
    13a6:	bf 90       	pop	r11
    13a8:	af 90       	pop	r10
    13aa:	9f 90       	pop	r9
    13ac:	8f 90       	pop	r8
    13ae:	7f 90       	pop	r7
    13b0:	5f 90       	pop	r5
    13b2:	4f 90       	pop	r4
    13b4:	08 95       	ret

000013b6 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    13b6:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <initialise_hardware>
	DDRA = 0xff;
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    13be:	52 9a       	sbi	0x0a, 2	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    13c0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    13c4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <load_EEPROM_data_on_next_game>
    13c8:	88 23       	and	r24, r24
    13ca:	19 f0       	breq	.+6      	; 0x13d2 <main+0x1c>
    13cc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <new_game_from_EEPROM>
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <main+0x20>
			else{new_game();}
    13d2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <new_game>
		play_game();
    13d6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    13da:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <load_EEPROM_data_on_next_game>
    13de:	81 11       	cpse	r24, r1
    13e0:	f1 cf       	rjmp	.-30     	; 0x13c4 <main+0xe>
    13e2:	0e 94 77 08 	call	0x10ee	; 0x10ee <handle_game_over>
    13e6:	ee cf       	rjmp	.-36     	; 0x13c4 <main+0xe>

000013e8 <get_rat_position>:

uint16_t RAT_WAIT_TIME = 1200;

PosnType get_rat_position(void){
	return rat_position;
}
    13e8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    13ec:	08 95       	ret

000013ee <set_rat_at_pos>:

void set_rat_at_pos(PosnType new_pos){
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
    13f2:	c8 2f       	mov	r28, r24
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_BLACK);
    13f4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    13f8:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    13fc:	d8 2f       	mov	r29, r24
    13fe:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1402:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	6d 2f       	mov	r22, r29
    140a:	0e 94 80 07 	call	0xf00	; 0xf00 <ledmatrix_update_pixel>
	rat_position = new_pos;
    140e:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <rat_position>
	ledmatrix_update_pixel(x_position(new_pos), y_position(new_pos), COLOUR_ORANGE);
    1412:	8c 2f       	mov	r24, r28
    1414:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1418:	d8 2f       	mov	r29, r24
    141a:	8c 2f       	mov	r24, r28
    141c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1420:	4c e3       	ldi	r20, 0x3C	; 60
    1422:	6d 2f       	mov	r22, r29
    1424:	0e 94 80 07 	call	0xf00	; 0xf00 <ledmatrix_update_pixel>

}
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <is_item_at>:

uint8_t is_item_at(PosnType position){
    142e:	cf 93       	push	r28
    1430:	c8 2f       	mov	r28, r24
	if (is_snake_at(position) || is_food_at(position)
    1432:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <is_snake_at>
    1436:	81 11       	cpse	r24, r1
    1438:	0d c0       	rjmp	.+26     	; 0x1454 <is_item_at+0x26>
    143a:	8c 2f       	mov	r24, r28
    143c:	0e 94 a7 05 	call	0xb4e	; 0xb4e <is_food_at>
    1440:	81 11       	cpse	r24, r1
    1442:	0a c0       	rjmp	.+20     	; 0x1458 <is_item_at+0x2a>
	|| is_superfood_at(position)){
    1444:	8c 2f       	mov	r24, r28
    1446:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <is_superfood_at>
		return 1;
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	81 11       	cpse	r24, r1
    144e:	05 c0       	rjmp	.+10     	; 0x145a <is_item_at+0x2c>
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	03 c0       	rjmp	.+6      	; 0x145a <is_item_at+0x2c>
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	01 c0       	rjmp	.+2      	; 0x145a <is_item_at+0x2c>
    1458:	91 e0       	ldi	r25, 0x01	; 1
	}
	return 0;
}
    145a:	89 2f       	mov	r24, r25
    145c:	cf 91       	pop	r28
    145e:	08 95       	ret

00001460 <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    1468:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    146c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1470:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    1472:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1476:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    147a:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	8c 0f       	add	r24, r28
    1480:	8e 30       	cpi	r24, 0x0E	; 14
    1482:	20 f4       	brcc	.+8      	; 0x148c <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    1484:	8f ef       	ldi	r24, 0xFF	; 255
    1486:	8d 0f       	add	r24, r29
    1488:	86 30       	cpi	r24, 0x06	; 6
    148a:	e8 f0       	brcs	.+58     	; 0x14c6 <rat_jumped_the_board+0x66>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && x_position(new_pos) == BOARD_WIDTH-1) ||
    148c:	c1 11       	cpse	r28, r1
    148e:	06 c0       	rjmp	.+12     	; 0x149c <rat_jumped_the_board+0x3c>
    1490:	81 2f       	mov	r24, r17
    1492:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1496:	8f 30       	cpi	r24, 0x0F	; 15
    1498:	41 f4       	brne	.+16     	; 0x14aa <rat_jumped_the_board+0x4a>
    149a:	17 c0       	rjmp	.+46     	; 0x14ca <rat_jumped_the_board+0x6a>
    149c:	cf 30       	cpi	r28, 0x0F	; 15
    149e:	29 f4       	brne	.+10     	; 0x14aa <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && x_position(new_pos) == 0) ||
    14a0:	81 2f       	mov	r24, r17
    14a2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    14a6:	88 23       	and	r24, r24
    14a8:	91 f0       	breq	.+36     	; 0x14ce <rat_jumped_the_board+0x6e>
    14aa:	d1 11       	cpse	r29, r1
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <rat_jumped_the_board+0x58>
		(rat_y==0 && y_position(new_pos) == BOARD_HEIGHT-1) ||
    14ae:	81 2f       	mov	r24, r17
    14b0:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
		(rat_y == BOARD_HEIGHT-1 && y_position(new_pos) == 0)){
			return 1; 
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	0e c0       	rjmp	.+28     	; 0x14d4 <rat_jumped_the_board+0x74>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && x_position(new_pos) == BOARD_WIDTH-1) ||
		(rat_x == BOARD_WIDTH-1 && x_position(new_pos) == 0) ||
		(rat_y==0 && y_position(new_pos) == BOARD_HEIGHT-1) ||
    14b8:	d7 30       	cpi	r29, 0x07	; 7
    14ba:	59 f4       	brne	.+22     	; 0x14d2 <rat_jumped_the_board+0x72>
		(rat_y == BOARD_HEIGHT-1 && y_position(new_pos) == 0)){
    14bc:	81 2f       	mov	r24, r17
    14be:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
			return 1; 
		}
	return 1; 
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	07 c0       	rjmp	.+14     	; 0x14d4 <rat_jumped_the_board+0x74>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	05 c0       	rjmp	.+10     	; 0x14d4 <rat_jumped_the_board+0x74>
	// All four possible jumps
	if ((rat_x ==0 && x_position(new_pos) == BOARD_WIDTH-1) ||
		(rat_x == BOARD_WIDTH-1 && x_position(new_pos) == 0) ||
		(rat_y==0 && y_position(new_pos) == BOARD_HEIGHT-1) ||
		(rat_y == BOARD_HEIGHT-1 && y_position(new_pos) == 0)){
			return 1; 
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <rat_jumped_the_board+0x74>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	01 c0       	rjmp	.+2      	; 0x14d4 <rat_jumped_the_board+0x74>
		}
	return 1; 
    14d2:	81 e0       	ldi	r24, 0x01	; 1
}
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	08 95       	ret

000014dc <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    14dc:	0f 93       	push	r16
    14de:	1f 93       	push	r17
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    14e4:	60 e0       	ldi	r22, 0x00	; 0
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    14ec:	08 2f       	mov	r16, r24
	uint8_t move_option = rand()%4; 
    14ee:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
    14f2:	83 70       	andi	r24, 0x03	; 3
    14f4:	90 78       	andi	r25, 0x80	; 128
    14f6:	99 23       	and	r25, r25
    14f8:	24 f4       	brge	.+8      	; 0x1502 <move_rat+0x26>
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	8c 6f       	ori	r24, 0xFC	; 252
    14fe:	9f 6f       	ori	r25, 0xFF	; 255
    1500:	01 96       	adiw	r24, 0x01	; 1
	return 0;
}

void move_rat(void){
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
    1502:	10 e0       	ldi	r17, 0x00	; 0
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    1504:	c8 2f       	mov	r28, r24
    1506:	d0 e0       	ldi	r29, 0x00	; 0
    1508:	c1 30       	cpi	r28, 0x01	; 1
    150a:	d1 05       	cpc	r29, r1
    150c:	d1 f0       	breq	.+52     	; 0x1542 <move_rat+0x66>
    150e:	1c f4       	brge	.+6      	; 0x1516 <move_rat+0x3a>
    1510:	20 97       	sbiw	r28, 0x00	; 0
    1512:	41 f0       	breq	.+16     	; 0x1524 <move_rat+0x48>
    1514:	42 c0       	rjmp	.+132    	; 0x159a <move_rat+0xbe>
    1516:	c2 30       	cpi	r28, 0x02	; 2
    1518:	d1 05       	cpc	r29, r1
    151a:	11 f1       	breq	.+68     	; 0x1560 <move_rat+0x84>
    151c:	c3 30       	cpi	r28, 0x03	; 3
    151e:	d1 05       	cpc	r29, r1
    1520:	71 f1       	breq	.+92     	; 0x157e <move_rat+0xa2>
    1522:	3b c0       	rjmp	.+118    	; 0x159a <move_rat+0xbe>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    1524:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1528:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    152c:	08 2f       	mov	r16, r24
    152e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1532:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	60 0f       	add	r22, r16
    153a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    153e:	08 2f       	mov	r16, r24
			break; 
    1540:	2c c0       	rjmp	.+88     	; 0x159a <move_rat+0xbe>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    1542:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1546:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    154a:	08 2f       	mov	r16, r24
    154c:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1550:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1554:	6f ef       	ldi	r22, 0xFF	; 255
    1556:	60 0f       	add	r22, r16
    1558:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    155c:	08 2f       	mov	r16, r24
			break;
    155e:	1d c0       	rjmp	.+58     	; 0x159a <move_rat+0xbe>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    1560:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1564:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1568:	08 2f       	mov	r16, r24
    156a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    156e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1572:	60 2f       	mov	r22, r16
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    157a:	08 2f       	mov	r16, r24
			break;
    157c:	0e c0       	rjmp	.+28     	; 0x159a <move_rat+0xbe>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    157e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1582:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1586:	08 2f       	mov	r16, r24
    1588:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    158c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1590:	60 2f       	mov	r22, r16
    1592:	81 50       	subi	r24, 0x01	; 1
    1594:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1598:	08 2f       	mov	r16, r24
			break;
			
		}
		attempts ++;
    159a:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_item_at(new_rat_pos) && attempts <4 && (rat_jumped_the_board(new_rat_pos)));
    159c:	80 2f       	mov	r24, r16
    159e:	0e 94 17 0a 	call	0x142e	; 0x142e <is_item_at>
    15a2:	88 23       	and	r24, r24
    15a4:	39 f0       	breq	.+14     	; 0x15b4 <move_rat+0xd8>
    15a6:	14 30       	cpi	r17, 0x04	; 4
    15a8:	39 f0       	breq	.+14     	; 0x15b8 <move_rat+0xdc>
    15aa:	80 2f       	mov	r24, r16
    15ac:	0e 94 30 0a 	call	0x1460	; 0x1460 <rat_jumped_the_board>
    15b0:	81 11       	cpse	r24, r1
    15b2:	aa cf       	rjmp	.-172    	; 0x1508 <move_rat+0x2c>
	
	if (attempts<=4){
    15b4:	15 30       	cpi	r17, 0x05	; 5
    15b6:	18 f4       	brcc	.+6      	; 0x15be <move_rat+0xe2>
		set_rat_at_pos(new_rat_pos); 
    15b8:	80 2f       	mov	r24, r16
    15ba:	0e 94 f7 09 	call	0x13ee	; 0x13ee <set_rat_at_pos>
	}
	}
    15be:	df 91       	pop	r29
    15c0:	cf 91       	pop	r28
    15c2:	1f 91       	pop	r17
    15c4:	0f 91       	pop	r16
    15c6:	08 95       	ret

000015c8 <is_rat_at>:
		}
	return 1; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    15c8:	91 e0       	ldi	r25, 0x01	; 1
    15ca:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <rat_position>
    15ce:	28 13       	cpse	r18, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
}
    15d2:	89 2f       	mov	r24, r25
    15d4:	08 95       	ret

000015d6 <add_new_rat_position>:

void add_new_rat_position(void){
    15d6:	1f 93       	push	r17
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    15dc:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
    15e0:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    15e2:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
        test_position = position(x,y);
    15e6:	bc 01       	movw	r22, r24
    15e8:	67 70       	andi	r22, 0x07	; 7
    15ea:	70 78       	andi	r23, 0x80	; 128
    15ec:	77 23       	and	r23, r23
    15ee:	34 f4       	brge	.+12     	; 0x15fc <add_new_rat_position+0x26>
    15f0:	61 50       	subi	r22, 0x01	; 1
    15f2:	71 09       	sbc	r23, r1
    15f4:	68 6f       	ori	r22, 0xF8	; 248
    15f6:	7f 6f       	ori	r23, 0xFF	; 255
    15f8:	6f 5f       	subi	r22, 0xFF	; 255
    15fa:	7f 4f       	sbci	r23, 0xFF	; 255
    15fc:	ce 01       	movw	r24, r28
    15fe:	8f 70       	andi	r24, 0x0F	; 15
    1600:	90 78       	andi	r25, 0x80	; 128
    1602:	99 23       	and	r25, r25
    1604:	24 f4       	brge	.+8      	; 0x160e <add_new_rat_position+0x38>
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	80 6f       	ori	r24, 0xF0	; 240
    160a:	9f 6f       	ori	r25, 0xFF	; 255
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1612:	c8 2f       	mov	r28, r24
    1614:	13 e6       	ldi	r17, 0x63	; 99
    1616:	1e c0       	rjmp	.+60     	; 0x1654 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1618:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
    161c:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    161e:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
        test_position = position(x,y);
    1622:	bc 01       	movw	r22, r24
    1624:	67 70       	andi	r22, 0x07	; 7
    1626:	70 78       	andi	r23, 0x80	; 128
    1628:	77 23       	and	r23, r23
    162a:	34 f4       	brge	.+12     	; 0x1638 <add_new_rat_position+0x62>
    162c:	61 50       	subi	r22, 0x01	; 1
    162e:	71 09       	sbc	r23, r1
    1630:	68 6f       	ori	r22, 0xF8	; 248
    1632:	7f 6f       	ori	r23, 0xFF	; 255
    1634:	6f 5f       	subi	r22, 0xFF	; 255
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	ce 01       	movw	r24, r28
    163a:	8f 70       	andi	r24, 0x0F	; 15
    163c:	90 78       	andi	r25, 0x80	; 128
    163e:	99 23       	and	r25, r25
    1640:	24 f4       	brge	.+8      	; 0x164a <add_new_rat_position+0x74>
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	80 6f       	ori	r24, 0xF0	; 240
    1646:	9f 6f       	ori	r25, 0xFF	; 255
    1648:	01 96       	adiw	r24, 0x01	; 1
    164a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    164e:	c8 2f       	mov	r28, r24
    1650:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1652:	91 f0       	breq	.+36     	; 0x1678 <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1654:	8c 2f       	mov	r24, r28
    1656:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    165a:	81 11       	cpse	r24, r1
    165c:	dd cf       	rjmp	.-70     	; 0x1618 <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    165e:	8c 2f       	mov	r24, r28
    1660:	0e 94 a7 05 	call	0xb4e	; 0xb4e <is_food_at>
    1664:	81 11       	cpse	r24, r1
    1666:	d8 cf       	rjmp	.-80     	; 0x1618 <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1668:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <get_superfood_position>
    166c:	8c 17       	cp	r24, r28
    166e:	a1 f2       	breq	.-88     	; 0x1618 <add_new_rat_position+0x42>
    1670:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1674:	8c 17       	cp	r24, r28
    1676:	81 f2       	breq	.-96     	; 0x1618 <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    1678:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    167c:	8c 2f       	mov	r24, r28
    167e:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1682:	c8 2f       	mov	r28, r24
    1684:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1688:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    168c:	4c e3       	ldi	r20, 0x3C	; 60
    168e:	6c 2f       	mov	r22, r28
    1690:	0e 94 80 07 	call	0xf00	; 0xf00 <ledmatrix_update_pixel>
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	08 95       	ret

0000169c <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    169c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    16a0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <RAT_WAIT_TIME>
    16a4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <RAT_WAIT_TIME+0x1>
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	50 e0       	ldi	r21, 0x00	; 0
    16ac:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__udivmodsi4>
    16b0:	21 e0       	ldi	r18, 0x01	; 1
    16b2:	67 2b       	or	r22, r23
    16b4:	68 2b       	or	r22, r24
    16b6:	69 2b       	or	r22, r25
    16b8:	09 f0       	breq	.+2      	; 0x16bc <is_time_to_move_rat+0x20>
    16ba:	20 e0       	ldi	r18, 0x00	; 0
}
    16bc:	82 2f       	mov	r24, r18
    16be:	08 95       	ret

000016c0 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    16c0:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <score>
    16c4:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <score+0x1>
    16c8:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <score+0x2>
    16cc:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <score+0x3>
    16d0:	08 95       	ret

000016d2 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    16d2:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <score>
    16d6:	50 91 20 02 	lds	r21, 0x0220	; 0x800220 <score+0x1>
    16da:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <score+0x2>
    16de:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <score+0x3>
    16e2:	48 0f       	add	r20, r24
    16e4:	59 1f       	adc	r21, r25
    16e6:	61 1d       	adc	r22, r1
    16e8:	71 1d       	adc	r23, r1
    16ea:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <score>
    16ee:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <score+0x1>
    16f2:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <score+0x2>
    16f6:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <score+0x3>
    16fa:	08 95       	ret

000016fc <get_score>:
}

uint32_t get_score(void) {
	return score;
    16fc:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <score>
    1700:	70 91 20 02 	lds	r23, 0x0220	; 0x800220 <score+0x1>
    1704:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <score+0x2>
    1708:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <score+0x3>
}
    170c:	08 95       	ret

0000170e <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    170e:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <colour>
	display_string = string_to_display;
    1712:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <display_string+0x1>
    1716:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <display_string>
	next_col_ptr = 0;
    171a:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <next_col_ptr+0x1>
    171e:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <next_col_ptr>
	next_char_to_display = 0;
    1722:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <next_char_to_display+0x1>
    1726:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <next_char_to_display>
    172a:	08 95       	ret

0000172c <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    172c:	0f 93       	push	r16
    172e:	1f 93       	push	r17
    1730:	cf 93       	push	r28
    1732:	df 93       	push	r29
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	28 97       	sbiw	r28, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1744:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <next_col_ptr>
    1748:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <next_col_ptr+0x1>
    174c:	30 97       	sbiw	r30, 0x00	; 0
    174e:	81 f0       	breq	.+32     	; 0x1770 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1750:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1752:	10 ff       	sbrs	r17, 0
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1756:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <next_col_ptr+0x1>
    175a:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    175e:	00 e0       	ldi	r16, 0x00	; 0
    1760:	6b c0       	rjmp	.+214    	; 0x1838 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1762:	31 96       	adiw	r30, 0x01	; 1
    1764:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <next_col_ptr+0x1>
    1768:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    176c:	00 e0       	ldi	r16, 0x00	; 0
    176e:	64 c0       	rjmp	.+200    	; 0x1838 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1770:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <next_char_to_display>
    1774:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <next_char_to_display+0x1>
    1778:	30 97       	sbiw	r30, 0x00	; 0
    177a:	09 f4       	brne	.+2      	; 0x177e <scroll_display+0x52>
    177c:	49 c0       	rjmp	.+146    	; 0x1810 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    177e:	cf 01       	movw	r24, r30
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <next_char_to_display+0x1>
    1786:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <next_char_to_display>
    178a:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    178c:	e1 11       	cpse	r30, r1
    178e:	0a c0       	rjmp	.+20     	; 0x17a4 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1790:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <next_char_to_display+0x1>
    1794:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <next_char_to_display>
			shift_countdown = 16;
    1798:	80 e1       	ldi	r24, 0x10	; 16
    179a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    179e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17a0:	10 e0       	ldi	r17, 0x00	; 0
    17a2:	4a c0       	rjmp	.+148    	; 0x1838 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    17a4:	8f e9       	ldi	r24, 0x9F	; 159
    17a6:	8e 0f       	add	r24, r30
    17a8:	8a 31       	cpi	r24, 0x1A	; 26
    17aa:	70 f4       	brcc	.+28     	; 0x17c8 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	ee 0f       	add	r30, r30
    17b0:	ff 1f       	adc	r31, r31
    17b2:	ea 5d       	subi	r30, 0xDA	; 218
    17b4:	ff 4f       	sbci	r31, 0xFF	; 255
    17b6:	85 91       	lpm	r24, Z+
    17b8:	94 91       	lpm	r25, Z
    17ba:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <next_col_ptr+0x1>
    17be:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17c2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	38 c0       	rjmp	.+112    	; 0x1838 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    17c8:	8f eb       	ldi	r24, 0xBF	; 191
    17ca:	8e 0f       	add	r24, r30
    17cc:	8a 31       	cpi	r24, 0x1A	; 26
    17ce:	70 f4       	brcc	.+28     	; 0x17ec <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	ee 0f       	add	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	ea 59       	subi	r30, 0x9A	; 154
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	85 91       	lpm	r24, Z+
    17dc:	94 91       	lpm	r25, Z
    17de:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <next_col_ptr+0x1>
    17e2:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17e6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17e8:	10 e0       	ldi	r17, 0x00	; 0
    17ea:	26 c0       	rjmp	.+76     	; 0x1838 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    17ec:	80 ed       	ldi	r24, 0xD0	; 208
    17ee:	8e 0f       	add	r24, r30
    17f0:	8a 30       	cpi	r24, 0x0A	; 10
    17f2:	00 f5       	brcc	.+64     	; 0x1834 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    17f4:	f0 e0       	ldi	r31, 0x00	; 0
    17f6:	ee 0f       	add	r30, r30
    17f8:	ff 1f       	adc	r31, r31
    17fa:	ec 58       	subi	r30, 0x8C	; 140
    17fc:	ff 4f       	sbci	r31, 0xFF	; 255
    17fe:	85 91       	lpm	r24, Z+
    1800:	94 91       	lpm	r25, Z
    1802:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <next_col_ptr+0x1>
    1806:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    180a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    180c:	10 e0       	ldi	r17, 0x00	; 0
    180e:	14 c0       	rjmp	.+40     	; 0x1838 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1810:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <display_string>
    1814:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1818:	01 e0       	ldi	r16, 0x01	; 1
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	09 f0       	breq	.+2      	; 0x1820 <scroll_display+0xf4>
    181e:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1820:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <next_char_to_display+0x1>
    1824:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <next_char_to_display>
		display_string = 0;
    1828:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <display_string+0x1>
    182c:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1830:	10 e0       	ldi	r17, 0x00	; 0
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1834:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1836:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1838:	0e 94 bc 07 	call	0xf78	; 0xf78 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    183c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <colour>
    1840:	fe 01       	movw	r30, r28
    1842:	38 96       	adiw	r30, 0x08	; 8
    1844:	ce 01       	movw	r24, r28
    1846:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1848:	11 23       	and	r17, r17
    184a:	14 f4       	brge	.+4      	; 0x1850 <scroll_display+0x124>
			column_colour_data[i] = colour;
    184c:	20 83       	st	Z, r18
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1850:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1852:	11 0f       	add	r17, r17
    1854:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1856:	e8 17       	cp	r30, r24
    1858:	f9 07       	cpc	r31, r25
    185a:	b1 f7       	brne	.-20     	; 0x1848 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    185c:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    185e:	be 01       	movw	r22, r28
    1860:	6f 5f       	subi	r22, 0xFF	; 255
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	8f e0       	ldi	r24, 0x0F	; 15
    1866:	0e 94 9f 07 	call	0xf3e	; 0xf3e <ledmatrix_update_column>
	if(shift_countdown > 0) {
    186a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <shift_countdown.1854>
    186e:	88 23       	and	r24, r24
    1870:	89 f0       	breq	.+34     	; 0x1894 <scroll_display+0x168>
		shift_countdown--;
    1872:	81 50       	subi	r24, 0x01	; 1
    1874:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1878:	00 23       	and	r16, r16
    187a:	11 f0       	breq	.+4      	; 0x1880 <scroll_display+0x154>
    187c:	88 23       	and	r24, r24
    187e:	11 f0       	breq	.+4      	; 0x1884 <scroll_display+0x158>
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	03 c0       	rjmp	.+6      	; 0x188a <scroll_display+0x15e>
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	01 c0       	rjmp	.+2      	; 0x188a <scroll_display+0x15e>
    1888:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	99 23       	and	r25, r25
    188e:	29 f0       	breq	.+10     	; 0x189a <scroll_display+0x16e>
    1890:	80 e0       	ldi	r24, 0x00	; 0
    1892:	03 c0       	rjmp	.+6      	; 0x189a <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1894:	00 23       	and	r16, r16
    1896:	a1 f3       	breq	.-24     	; 0x1880 <scroll_display+0x154>
    1898:	f7 cf       	rjmp	.-18     	; 0x1888 <scroll_display+0x15c>
	return !finished;
}
    189a:	28 96       	adiw	r28, 0x08	; 8
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    18b0:	cf 93       	push	r28
    18b2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    18b4:	8a 30       	cpi	r24, 0x0A	; 10
    18b6:	19 f4       	brne	.+6      	; 0x18be <uart_put_char+0xe>
		uart_put_char('\r', stream);
    18b8:	8d e0       	ldi	r24, 0x0D	; 13
    18ba:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    18be:	9f b7       	in	r25, 0x3f	; 63
    18c0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    18c4:	99 23       	and	r25, r25
    18c6:	29 f1       	breq	.+74     	; 0x1912 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    18c8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    18cc:	8f 3f       	cpi	r24, 0xFF	; 255
    18ce:	d1 f3       	breq	.-12     	; 0x18c4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    18d0:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    18d2:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <out_insert_pos>
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	8e 0f       	add	r24, r30
    18da:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <out_insert_pos>
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	e5 58       	subi	r30, 0x85	; 133
    18e2:	fd 4f       	sbci	r31, 0xFD	; 253
    18e4:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    18e6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    18f0:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <out_insert_pos>
    18f4:	8f 3f       	cpi	r24, 0xFF	; 255
    18f6:	11 f4       	brne	.+4      	; 0x18fc <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    18f8:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    18fc:	e1 ec       	ldi	r30, 0xC1	; 193
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	80 62       	ori	r24, 0x20	; 32
    1904:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1906:	99 23       	and	r25, r25
    1908:	39 f0       	breq	.+14     	; 0x1918 <uart_put_char+0x68>
		sei();
    190a:	78 94       	sei
	}
	return 0;
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	05 c0       	rjmp	.+10     	; 0x191c <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
}
    191c:	cf 91       	pop	r28
    191e:	08 95       	ret

00001920 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1920:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1924:	88 23       	and	r24, r24
    1926:	e1 f3       	breq	.-8      	; 0x1920 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1928:	2f b7       	in	r18, 0x3f	; 63
    192a:	20 78       	andi	r18, 0x80	; 128
	cli();
    192c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    192e:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <input_insert_pos>
    1932:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	83 1b       	sub	r24, r19
    193a:	91 09       	sbc	r25, r1
    193c:	5a f4       	brpl	.+22     	; 0x1954 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    193e:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <input_insert_pos>
    1942:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	e8 1b       	sub	r30, r24
    194a:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    194c:	e5 57       	subi	r30, 0x75	; 117
    194e:	fc 4f       	sbci	r31, 0xFC	; 252
    1950:	80 81       	ld	r24, Z
    1952:	0a c0       	rjmp	.+20     	; 0x1968 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1954:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <input_insert_pos>
    1958:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	e8 1b       	sub	r30, r24
    1960:	f1 09       	sbc	r31, r1
    1962:	e5 58       	subi	r30, 0x85	; 133
    1964:	fc 4f       	sbci	r31, 0xFC	; 252
    1966:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1968:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <bytes_in_input_buffer>
    196c:	91 50       	subi	r25, 0x01	; 1
    196e:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1972:	22 23       	and	r18, r18
    1974:	09 f0       	breq	.+2      	; 0x1978 <uart_get_char+0x58>
		sei();
    1976:	78 94       	sei
	}	
	return c;
}
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	08 95       	ret

0000197c <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    197c:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1980:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <bytes_in_out_buffer>
	input_insert_pos = 0;
    1984:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <input_insert_pos>
	bytes_in_input_buffer = 0;
    1988:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <bytes_in_input_buffer>
	input_overrun = 0;
    198c:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1990:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	aa 1f       	adc	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	aa 1f       	adc	r26, r26
    19a6:	bb 1f       	adc	r27, r27
    19a8:	9c 01       	movw	r18, r24
    19aa:	ad 01       	movw	r20, r26
    19ac:	22 0f       	add	r18, r18
    19ae:	33 1f       	adc	r19, r19
    19b0:	44 1f       	adc	r20, r20
    19b2:	55 1f       	adc	r21, r21
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	72 e1       	ldi	r23, 0x12	; 18
    19b8:	8a e7       	ldi	r24, 0x7A	; 122
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodsi4>
    19c0:	ba 01       	movw	r22, r20
    19c2:	a9 01       	movw	r20, r18
    19c4:	4f 5f       	subi	r20, 0xFF	; 255
    19c6:	5f 4f       	sbci	r21, 0xFF	; 255
    19c8:	6f 4f       	sbci	r22, 0xFF	; 255
    19ca:	7f 4f       	sbci	r23, 0xFF	; 255
    19cc:	db 01       	movw	r26, r22
    19ce:	ca 01       	movw	r24, r20
    19d0:	1a f4       	brpl	.+6      	; 0x19d8 <init_serial_stdio+0x5c>
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	a1 1d       	adc	r26, r1
    19d6:	b1 1d       	adc	r27, r1
    19d8:	b5 95       	asr	r27
    19da:	a7 95       	ror	r26
    19dc:	97 95       	ror	r25
    19de:	87 95       	ror	r24
    19e0:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    19e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    19e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    19ea:	e1 ec       	ldi	r30, 0xC1	; 193
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	88 e1       	ldi	r24, 0x18	; 24
    19f0:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    19f2:	80 81       	ld	r24, Z
    19f4:	80 68       	ori	r24, 0x80	; 128
    19f6:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    19f8:	ef e8       	ldi	r30, 0x8F	; 143
    19fa:	f3 e0       	ldi	r31, 0x03	; 3
    19fc:	83 e2       	ldi	r24, 0x23	; 35
    19fe:	91 e0       	ldi	r25, 0x01	; 1
    1a00:	93 83       	std	Z+3, r25	; 0x03
    1a02:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	08 95       	ret

00001a0a <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1a0a:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	91 11       	cpse	r25, r1
    1a12:	01 c0       	rjmp	.+2      	; 0x1a16 <serial_input_available+0xc>
    1a14:	80 e0       	ldi	r24, 0x00	; 0
}
    1a16:	08 95       	ret

00001a18 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1a18:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <input_insert_pos>
	bytes_in_input_buffer = 0;
    1a1c:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <bytes_in_input_buffer>
    1a20:	08 95       	ret

00001a22 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1a22:	1f 92       	push	r1
    1a24:	0f 92       	push	r0
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	0f 92       	push	r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	2f 93       	push	r18
    1a2e:	8f 93       	push	r24
    1a30:	9f 93       	push	r25
    1a32:	ef 93       	push	r30
    1a34:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1a36:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a3a:	88 23       	and	r24, r24
    1a3c:	29 f1       	breq	.+74     	; 0x1a88 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1a3e:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <out_insert_pos>
    1a42:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	82 1b       	sub	r24, r18
    1a4a:	91 09       	sbc	r25, r1
    1a4c:	5a f4       	brpl	.+22     	; 0x1a64 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a4e:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <out_insert_pos>
    1a52:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	e8 1b       	sub	r30, r24
    1a5a:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a5c:	e6 58       	subi	r30, 0x86	; 134
    1a5e:	fc 4f       	sbci	r31, 0xFC	; 252
    1a60:	90 81       	ld	r25, Z
    1a62:	0a c0       	rjmp	.+20     	; 0x1a78 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1a64:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <out_insert_pos>
    1a68:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	e8 1b       	sub	r30, r24
    1a70:	f1 09       	sbc	r31, r1
    1a72:	e5 58       	subi	r30, 0x85	; 133
    1a74:	fd 4f       	sbci	r31, 0xFD	; 253
    1a76:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1a78:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a7c:	81 50       	subi	r24, 0x01	; 1
    1a7e:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1a82:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1a88:	e1 ec       	ldi	r30, 0xC1	; 193
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	8f 7d       	andi	r24, 0xDF	; 223
    1a90:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	9f 91       	pop	r25
    1a98:	8f 91       	pop	r24
    1a9a:	2f 91       	pop	r18
    1a9c:	0f 90       	pop	r0
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	0f 90       	pop	r0
    1aa2:	1f 90       	pop	r1
    1aa4:	18 95       	reti

00001aa6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1aa6:	1f 92       	push	r1
    1aa8:	0f 92       	push	r0
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	0f 92       	push	r0
    1aae:	11 24       	eor	r1, r1
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	cf 93       	push	r28
    1ac6:	ef 93       	push	r30
    1ac8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1aca:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1ace:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <do_echo>
    1ad2:	88 23       	and	r24, r24
    1ad4:	49 f0       	breq	.+18     	; 0x1ae8 <__vector_20+0x42>
    1ad6:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1ada:	8f 3f       	cpi	r24, 0xFF	; 255
    1adc:	29 f0       	breq	.+10     	; 0x1ae8 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	8c 2f       	mov	r24, r28
    1ae4:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1ae8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1aec:	80 31       	cpi	r24, 0x10	; 16
    1aee:	20 f0       	brcs	.+8      	; 0x1af8 <__vector_20+0x52>
		input_overrun = 1;
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <input_overrun>
    1af6:	18 c0       	rjmp	.+48     	; 0x1b28 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1af8:	cd 30       	cpi	r28, 0x0D	; 13
    1afa:	09 f4       	brne	.+2      	; 0x1afe <__vector_20+0x58>
			c = '\n';
    1afc:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1afe:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <input_insert_pos>
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	8e 0f       	add	r24, r30
    1b06:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <input_insert_pos>
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	e5 58       	subi	r30, 0x85	; 133
    1b0e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b10:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1b12:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1b16:	8f 5f       	subi	r24, 0xFF	; 255
    1b18:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1b1c:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <input_insert_pos>
    1b20:	80 31       	cpi	r24, 0x10	; 16
    1b22:	11 f4       	brne	.+4      	; 0x1b28 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1b24:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <input_insert_pos>
		}
	}
}
    1b28:	ff 91       	pop	r31
    1b2a:	ef 91       	pop	r30
    1b2c:	cf 91       	pop	r28
    1b2e:	bf 91       	pop	r27
    1b30:	af 91       	pop	r26
    1b32:	9f 91       	pop	r25
    1b34:	8f 91       	pop	r24
    1b36:	7f 91       	pop	r23
    1b38:	6f 91       	pop	r22
    1b3a:	5f 91       	pop	r21
    1b3c:	4f 91       	pop	r20
    1b3e:	3f 91       	pop	r19
    1b40:	2f 91       	pop	r18
    1b42:	0f 90       	pop	r0
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	0f 90       	pop	r0
    1b48:	1f 90       	pop	r1
    1b4a:	18 95       	reti

00001b4c <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <snakeLength>
	snakeTailIndex = 0;
    1b58:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <snakeTailIndex>
	snakeHeadIndex = 1;
    1b5c:	c1 e0       	ldi	r28, 0x01	; 1
    1b5e:	c0 93 2e 02 	sts	0x022E, r28	; 0x80022e <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1b62:	61 e0       	ldi	r22, 0x01	; 1
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1b6a:	00 e3       	ldi	r16, 0x30	; 48
    1b6c:	12 e0       	ldi	r17, 0x02	; 2
    1b6e:	f8 01       	movw	r30, r16
    1b70:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1b7e:	c0 93 2c 02 	sts	0x022C, r28	; 0x80022c <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1b82:	c0 93 2b 02 	sts	0x022B, r28	; 0x80022b <nextSnakeDirn>
}
    1b86:	cf 91       	pop	r28
    1b88:	1f 91       	pop	r17
    1b8a:	0f 91       	pop	r16
    1b8c:	08 95       	ret

00001b8e <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1b8e:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1b92:	0e 2e       	mov	r0, r30
    1b94:	00 0c       	add	r0, r0
    1b96:	ff 0b       	sbc	r31, r31
    1b98:	e0 5d       	subi	r30, 0xD0	; 208
    1b9a:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1b9c:	80 81       	ld	r24, Z
    1b9e:	08 95       	ret

00001ba0 <get_snake_tail_position>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1ba0:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <snakeTailIndex>
    1ba4:	0e 2e       	mov	r0, r30
    1ba6:	00 0c       	add	r0, r0
    1ba8:	ff 0b       	sbc	r31, r31
    1baa:	e0 5d       	subi	r30, 0xD0	; 208
    1bac:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1bae:	80 81       	ld	r24, Z
    1bb0:	08 95       	ret

00001bb2 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1bb2:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1bb6:	08 95       	ret

00001bb8 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1bb8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <snakeTailIndex>
    1bbc:	e9 2f       	mov	r30, r25
    1bbe:	09 2e       	mov	r0, r25
    1bc0:	00 0c       	add	r0, r0
    1bc2:	ff 0b       	sbc	r31, r31
    1bc4:	e0 5d       	subi	r30, 0xD0	; 208
    1bc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc8:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1bca:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1bcc:	91 32       	cpi	r25, 0x21	; 33
    1bce:	19 f0       	breq	.+6      	; 0x1bd6 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1bd0:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <snakeTailIndex>
    1bd4:	02 c0       	rjmp	.+4      	; 0x1bda <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1bd6:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <snakeTailIndex>
	}
	snakeLength--;
    1bda:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <snakeLength>
    1bde:	91 50       	subi	r25, 0x01	; 1
    1be0:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <snakeLength>
	
	return prev_tail_position;
}
    1be4:	08 95       	ret

00001be6 <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1be6:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <curSnakeDirn>
    1bea:	91 30       	cpi	r25, 0x01	; 1
    1bec:	a9 f0       	breq	.+42     	; 0x1c18 <set_snake_dirn+0x32>
    1bee:	28 f0       	brcs	.+10     	; 0x1bfa <set_snake_dirn+0x14>
    1bf0:	92 30       	cpi	r25, 0x02	; 2
    1bf2:	41 f0       	breq	.+16     	; 0x1c04 <set_snake_dirn+0x1e>
    1bf4:	93 30       	cpi	r25, 0x03	; 3
    1bf6:	59 f0       	breq	.+22     	; 0x1c0e <set_snake_dirn+0x28>
    1bf8:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	89 f0       	breq	.+34     	; 0x1c20 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1bfe:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1c02:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1c04:	88 23       	and	r24, r24
    1c06:	61 f0       	breq	.+24     	; 0x1c20 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1c08:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1c0c:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1c0e:	81 30       	cpi	r24, 0x01	; 1
    1c10:	39 f0       	breq	.+14     	; 0x1c20 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1c12:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1c16:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1c18:	83 30       	cpi	r24, 0x03	; 3
    1c1a:	11 f0       	breq	.+4      	; 0x1c20 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1c1c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1c20:	08 95       	ret

00001c22 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1c22:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1c26:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1c2c:	0d c0       	rjmp	.+26     	; 0x1c48 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1c2e:	e9 2f       	mov	r30, r25
    1c30:	09 2e       	mov	r0, r25
    1c32:	00 0c       	add	r0, r0
    1c34:	ff 0b       	sbc	r31, r31
    1c36:	e0 5d       	subi	r30, 0xD0	; 208
    1c38:	fd 4f       	sbci	r31, 0xFD	; 253
    1c3a:	20 81       	ld	r18, Z
    1c3c:	28 17       	cp	r18, r24
    1c3e:	89 f0       	breq	.+34     	; 0x1c62 <is_snake_at+0x40>
    1c40:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1c42:	91 32       	cpi	r25, 0x21	; 33
    1c44:	0c f0       	brlt	.+2      	; 0x1c48 <is_snake_at+0x26>
			index = 0;
    1c46:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1c48:	93 13       	cpse	r25, r19
    1c4a:	f1 cf       	rjmp	.-30     	; 0x1c2e <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1c4c:	e3 2f       	mov	r30, r19
    1c4e:	33 0f       	add	r19, r19
    1c50:	ff 0b       	sbc	r31, r31
    1c52:	e0 5d       	subi	r30, 0xD0	; 208
    1c54:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	20 81       	ld	r18, Z
    1c5a:	28 17       	cp	r18, r24
    1c5c:	19 f0       	breq	.+6      	; 0x1c64 <is_snake_at+0x42>
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	01 c0       	rjmp	.+2      	; 0x1c64 <is_snake_at+0x42>
    1c62:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1c64:	89 2f       	mov	r24, r25
    1c66:	08 95       	ret

00001c68 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1c68:	cf 93       	push	r28
    1c6a:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1c6c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1c70:	81 32       	cpi	r24, 0x21	; 33
    1c72:	08 f0       	brcs	.+2      	; 0x1c76 <advance_snake_head+0xe>
    1c74:	8c c0       	rjmp	.+280    	; 0x1d8e <advance_snake_head+0x126>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1c76:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1c7a:	0e 2e       	mov	r0, r30
    1c7c:	00 0c       	add	r0, r0
    1c7e:	ff 0b       	sbc	r31, r31
    1c80:	e0 5d       	subi	r30, 0xD0	; 208
    1c82:	fd 4f       	sbci	r31, 0xFD	; 253
    1c84:	80 81       	ld	r24, Z
    1c86:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1c8a:	d8 2f       	mov	r29, r24
    1c8c:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1c8e:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1c92:	0e 2e       	mov	r0, r30
    1c94:	00 0c       	add	r0, r0
    1c96:	ff 0b       	sbc	r31, r31
    1c98:	e0 5d       	subi	r30, 0xD0	; 208
    1c9a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c9c:	80 81       	ld	r24, Z
    1c9e:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1ca2:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1ca4:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <nextSnakeDirn>
    1ca8:	91 30       	cpi	r25, 0x01	; 1
    1caa:	59 f0       	breq	.+22     	; 0x1cc2 <advance_snake_head+0x5a>
    1cac:	28 f0       	brcs	.+10     	; 0x1cb8 <advance_snake_head+0x50>
    1cae:	92 30       	cpi	r25, 0x02	; 2
    1cb0:	69 f0       	breq	.+26     	; 0x1ccc <advance_snake_head+0x64>
    1cb2:	93 30       	cpi	r25, 0x03	; 3
    1cb4:	81 f0       	breq	.+32     	; 0x1cd6 <advance_snake_head+0x6e>
    1cb6:	1b c0       	rjmp	.+54     	; 0x1cee <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1cb8:	87 30       	cpi	r24, 0x07	; 7
    1cba:	91 f0       	breq	.+36     	; 0x1ce0 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	68 0f       	add	r22, r24
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1cc2:	df 30       	cpi	r29, 0x0F	; 15
    1cc4:	79 f0       	breq	.+30     	; 0x1ce4 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1cc6:	c1 e0       	ldi	r28, 0x01	; 1
    1cc8:	cd 0f       	add	r28, r29
    1cca:	11 c0       	rjmp	.+34     	; 0x1cee <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    1ccc:	88 23       	and	r24, r24
    1cce:	61 f0       	breq	.+24     	; 0x1ce8 <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    1cd0:	6f ef       	ldi	r22, 0xFF	; 255
    1cd2:	68 0f       	add	r22, r24
    1cd4:	0c c0       	rjmp	.+24     	; 0x1cee <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    1cd6:	dd 23       	and	r29, r29
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    1cda:	cf ef       	ldi	r28, 0xFF	; 255
    1cdc:	cd 0f       	add	r28, r29
    1cde:	07 c0       	rjmp	.+14     	; 0x1cee <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1ce0:	60 e0       	ldi	r22, 0x00	; 0
    1ce2:	05 c0       	rjmp	.+10     	; 0x1cee <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1ce4:	c0 e0       	ldi	r28, 0x00	; 0
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    1ce8:	67 e0       	ldi	r22, 0x07	; 7
    1cea:	01 c0       	rjmp	.+2      	; 0x1cee <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    1cec:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    1cee:	8c 2f       	mov	r24, r28
    1cf0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1cf4:	c8 2f       	mov	r28, r24

	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1cf6:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <nextSnakeDirn>
    1cfa:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <curSnakeDirn>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1cfe:	8c 2f       	mov	r24, r28
    1d00:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <is_snake_at>
    1d04:	88 23       	and	r24, r24
    1d06:	51 f0       	breq	.+20     	; 0x1d1c <advance_snake_head+0xb4>
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1d08:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <snakeTailIndex>
    1d0c:	0e 2e       	mov	r0, r30
    1d0e:	00 0c       	add	r0, r0
    1d10:	ff 0b       	sbc	r31, r31
    1d12:	e0 5d       	subi	r30, 0xD0	; 208
    1d14:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1d16:	80 81       	ld	r24, Z
    1d18:	c8 13       	cpse	r28, r24
    1d1a:	3b c0       	rjmp	.+118    	; 0x1d92 <advance_snake_head+0x12a>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1d1c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <snakeHeadIndex>
    1d20:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1d22:	81 32       	cpi	r24, 0x21	; 33
    1d24:	19 f0       	breq	.+6      	; 0x1d2c <advance_snake_head+0xc4>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1d26:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <snakeHeadIndex>
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <advance_snake_head+0xc8>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1d2c:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1d30:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1d34:	0e 2e       	mov	r0, r30
    1d36:	00 0c       	add	r0, r0
    1d38:	ff 0b       	sbc	r31, r31
    1d3a:	e0 5d       	subi	r30, 0xD0	; 208
    1d3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d3e:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1d40:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d44:	8f 5f       	subi	r24, 0xFF	; 255
    1d46:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    1d4a:	8c 2f       	mov	r24, r28
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <is_rat_at>
    1d52:	89 2b       	or	r24, r25
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <advance_snake_head+0xfa>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1d56:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d5a:	81 32       	cpi	r24, 0x21	; 33
    1d5c:	e0 f0       	brcs	.+56     	; 0x1d96 <advance_snake_head+0x12e>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    1d5e:	87 e0       	ldi	r24, 0x07	; 7
    1d60:	21 c0       	rjmp	.+66     	; 0x1da4 <advance_snake_head+0x13c>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    1d62:	8c 2f       	mov	r24, r28
    1d64:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <is_superfood_at>
    1d68:	88 23       	and	r24, r24
    1d6a:	31 f0       	breq	.+12     	; 0x1d78 <advance_snake_head+0x110>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1d6c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d70:	81 32       	cpi	r24, 0x21	; 33
    1d72:	98 f0       	brcs	.+38     	; 0x1d9a <advance_snake_head+0x132>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    1d74:	85 e0       	ldi	r24, 0x05	; 5
    1d76:	16 c0       	rjmp	.+44     	; 0x1da4 <advance_snake_head+0x13c>
		}
	}
	if(is_food_at(newHeadPosn)) {
    1d78:	8c 2f       	mov	r24, r28
    1d7a:	0e 94 a7 05 	call	0xb4e	; 0xb4e <is_food_at>
    1d7e:	88 23       	and	r24, r24
    1d80:	71 f0       	breq	.+28     	; 0x1d9e <advance_snake_head+0x136>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1d82:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d86:	81 32       	cpi	r24, 0x21	; 33
    1d88:	60 f0       	brcs	.+24     	; 0x1da2 <advance_snake_head+0x13a>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    1d8a:	83 e0       	ldi	r24, 0x03	; 3
    1d8c:	0b c0       	rjmp	.+22     	; 0x1da4 <advance_snake_head+0x13c>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    1d8e:	8d ef       	ldi	r24, 0xFD	; 253
    1d90:	09 c0       	rjmp	.+18     	; 0x1da4 <advance_snake_head+0x13c>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1d92:	8e ef       	ldi	r24, 0xFE	; 254
    1d94:	07 c0       	rjmp	.+14     	; 0x1da4 <advance_snake_head+0x13c>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    1d96:	86 e0       	ldi	r24, 0x06	; 6
    1d98:	05 c0       	rjmp	.+10     	; 0x1da4 <advance_snake_head+0x13c>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    1d9a:	84 e0       	ldi	r24, 0x04	; 4
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <advance_snake_head+0x13c>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <advance_snake_head+0x13c>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    1da2:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <get_snake_in_order>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1daa:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <snakeTailIndex>
    1dae:	0e 2e       	mov	r0, r30
    1db0:	00 0c       	add	r0, r0
    1db2:	ff 0b       	sbc	r31, r31
    1db4:	e0 5d       	subi	r30, 0xD0	; 208
    1db6:	fd 4f       	sbci	r31, 0xFD	; 253
    1db8:	20 81       	ld	r18, Z
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1dba:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1dbe:	0e 2e       	mov	r0, r30
    1dc0:	00 0c       	add	r0, r0
    1dc2:	ff 0b       	sbc	r31, r31
    1dc4:	e0 5d       	subi	r30, 0xD0	; 208
    1dc6:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc8:	80 81       	ld	r24, Z
	/* Snake does not occupy the given position */
	return 0;
}
PosnType* get_snake_in_order(void){
	PosnType snake_order[get_snake_length()+1]; 
	if (get_snake_tail_position()> get_snake_head_position()){
    1dca:	82 17       	cp	r24, r18
    1dcc:	70 f4       	brcc	.+28     	; 0x1dea <get_snake_in_order+0x40>
		//SSSH-------------------------TSSS
		int a = 0; 
		for (int i = get_snake_head_position(); i>=0; i--){
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f2 f7       	brpl	.-4      	; 0x1dd0 <get_snake_in_order+0x26>
			snake_order[a] = snakePositions[i]; 
			a++;
		}
		for (int i = SNAKE_POSITION_ARRAY_SIZE-1; i>= get_snake_tail_position(); i--){
    1dd4:	30 e0       	ldi	r19, 0x00	; 0
    1dd6:	21 32       	cpi	r18, 0x21	; 33
    1dd8:	31 05       	cpc	r19, r1
    1dda:	94 f4       	brge	.+36     	; 0x1e00 <get_snake_in_order+0x56>
    1ddc:	80 e2       	ldi	r24, 0x20	; 32
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	01 97       	sbiw	r24, 0x01	; 1
    1de2:	82 17       	cp	r24, r18
    1de4:	93 07       	cpc	r25, r19
    1de6:	e4 f7       	brge	.-8      	; 0x1de0 <get_snake_in_order+0x36>
    1de8:	0b c0       	rjmp	.+22     	; 0x1e00 <get_snake_in_order+0x56>
			snake_order[a] = snakePositions[i];
			a++;
		}
	}else{
		for(int i =get_snake_tail_position(); i<get_snake_head_position()+1; i++){
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	01 96       	adiw	r24, 0x01	; 1
    1df0:	28 17       	cp	r18, r24
    1df2:	39 07       	cpc	r19, r25
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <get_snake_in_order+0x56>
    1df6:	2f 5f       	subi	r18, 0xFF	; 255
    1df8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfa:	28 17       	cp	r18, r24
    1dfc:	39 07       	cpc	r19, r25
    1dfe:	dc f3       	brlt	.-10     	; 0x1df6 <get_snake_in_order+0x4c>
			snake_order[i-get_snake_tail_position()] = snakePositions[i];
		}
	}
	return snake_order;
}
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	08 95       	ret

00001e06 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1e06:	94 b1       	in	r25, 0x04	; 4
    1e08:	90 6b       	ori	r25, 0xB0	; 176
    1e0a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1e0c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1e0e:	90 e5       	ldi	r25, 0x50	; 80
    1e10:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1e12:	88 30       	cpi	r24, 0x08	; 8
    1e14:	21 f0       	breq	.+8      	; 0x1e1e <spi_setup_master+0x18>
    1e16:	80 32       	cpi	r24, 0x20	; 32
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <spi_setup_master+0x18>
    1e1a:	82 30       	cpi	r24, 0x02	; 2
    1e1c:	19 f4       	brne	.+6      	; 0x1e24 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
    1e20:	9d bd       	out	0x2d, r25	; 45
			break;
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1e24:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1e26:	80 32       	cpi	r24, 0x20	; 32
    1e28:	69 f0       	breq	.+26     	; 0x1e44 <spi_setup_master+0x3e>
    1e2a:	28 f4       	brcc	.+10     	; 0x1e36 <spi_setup_master+0x30>
    1e2c:	88 30       	cpi	r24, 0x08	; 8
    1e2e:	71 f0       	breq	.+28     	; 0x1e4c <spi_setup_master+0x46>
    1e30:	80 31       	cpi	r24, 0x10	; 16
    1e32:	61 f0       	breq	.+24     	; 0x1e4c <spi_setup_master+0x46>
    1e34:	0e c0       	rjmp	.+28     	; 0x1e52 <spi_setup_master+0x4c>
    1e36:	80 34       	cpi	r24, 0x40	; 64
    1e38:	29 f0       	breq	.+10     	; 0x1e44 <spi_setup_master+0x3e>
    1e3a:	80 38       	cpi	r24, 0x80	; 128
    1e3c:	51 f4       	brne	.+20     	; 0x1e52 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1e3e:	8c b5       	in	r24, 0x2c	; 44
    1e40:	81 60       	ori	r24, 0x01	; 1
    1e42:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1e44:	8c b5       	in	r24, 0x2c	; 44
    1e46:	82 60       	ori	r24, 0x02	; 2
    1e48:	8c bd       	out	0x2c, r24	; 44
			break;
    1e4a:	03 c0       	rjmp	.+6      	; 0x1e52 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1e4c:	8c b5       	in	r24, 0x2c	; 44
    1e4e:	81 60       	ori	r24, 0x01	; 1
    1e50:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1e52:	2c 98       	cbi	0x05, 4	; 5
    1e54:	08 95       	ret

00001e56 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    1e56:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1e58:	0d b4       	in	r0, 0x2d	; 45
    1e5a:	07 fe       	sbrs	r0, 7
    1e5c:	fd cf       	rjmp	.-6      	; 0x1e58 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1e5e:	8e b5       	in	r24, 0x2e	; 46
    1e60:	08 95       	ret

00001e62 <superfood_is_on_board>:
	superfood_on_board = 1;
}

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    1e62:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <superfood_on_board>
    1e66:	08 95       	ret

00001e68 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    1e68:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1e6c:	68 59       	subi	r22, 0x98	; 152
    1e6e:	7a 43       	sbci	r23, 0x3A	; 58
    1e70:	81 09       	sbc	r24, r1
    1e72:	91 09       	sbc	r25, r1
    1e74:	20 e2       	ldi	r18, 0x20	; 32
    1e76:	3e e4       	ldi	r19, 0x4E	; 78
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__udivmodsi4>
    1e80:	67 2b       	or	r22, r23
    1e82:	68 2b       	or	r22, r24
    1e84:	69 2b       	or	r22, r25
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <time_to_add_superfood+0x28>
    1e88:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	08 95       	ret
    1e90:	80 e0       	ldi	r24, 0x00	; 0
}
    1e92:	08 95       	ret

00001e94 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    1e94:	0e 94 5d 10 	call	0x20ba	; 0x20ba <get_clock_ticks>
    1e98:	20 e2       	ldi	r18, 0x20	; 32
    1e9a:	3e e4       	ldi	r19, 0x4E	; 78
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	50 e0       	ldi	r21, 0x00	; 0
    1ea0:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__udivmodsi4>
    1ea4:	21 e0       	ldi	r18, 0x01	; 1
    1ea6:	67 2b       	or	r22, r23
    1ea8:	68 2b       	or	r22, r24
    1eaa:	69 2b       	or	r22, r25
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <time_to_remove_superfood+0x1c>
    1eae:	20 e0       	ldi	r18, 0x00	; 0
}
    1eb0:	82 2f       	mov	r24, r18
    1eb2:	08 95       	ret

00001eb4 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_YELLOW);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    1eb4:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    1eb6:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1eba:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1ebe:	c8 2f       	mov	r28, r24
    1ec0:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1ec4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	6c 2f       	mov	r22, r28
    1ecc:	0e 94 80 07 	call	0xf00	; 0xf00 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    1ed0:	60 e0       	ldi	r22, 0x00	; 0
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1ed8:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <superfood_position>
	superfood_on_board = 0; 
    1edc:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <superfood_on_board>
}
    1ee0:	cf 91       	pop	r28
    1ee2:	08 95       	ret

00001ee4 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1eec:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <superfood_position>
	superfood_on_board = 0;
    1ef0:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <superfood_on_board>
    1ef4:	08 95       	ret

00001ef6 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    1ef6:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1efa:	08 95       	ret

00001efc <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    1efc:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <superfood_on_board>
    1f00:	99 23       	and	r25, r25
    1f02:	39 f0       	breq	.+14     	; 0x1f12 <is_superfood_at+0x16>
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <superfood_position>
    1f0a:	28 13       	cpse	r18, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	89 2f       	mov	r24, r25
    1f10:	08 95       	ret
    1f12:	80 e0       	ldi	r24, 0x00	; 0
}
    1f14:	08 95       	ret

00001f16 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    1f16:	1f 93       	push	r17
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    1f1c:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1f20:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
    1f24:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1f26:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
		test_position = position(x,y);
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	67 70       	andi	r22, 0x07	; 7
    1f2e:	70 78       	andi	r23, 0x80	; 128
    1f30:	77 23       	and	r23, r23
    1f32:	34 f4       	brge	.+12     	; 0x1f40 <add_superfood_to_board+0x2a>
    1f34:	61 50       	subi	r22, 0x01	; 1
    1f36:	71 09       	sbc	r23, r1
    1f38:	68 6f       	ori	r22, 0xF8	; 248
    1f3a:	7f 6f       	ori	r23, 0xFF	; 255
    1f3c:	6f 5f       	subi	r22, 0xFF	; 255
    1f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f40:	ce 01       	movw	r24, r28
    1f42:	8f 70       	andi	r24, 0x0F	; 15
    1f44:	90 78       	andi	r25, 0x80	; 128
    1f46:	99 23       	and	r25, r25
    1f48:	24 f4       	brge	.+8      	; 0x1f52 <add_superfood_to_board+0x3c>
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	80 6f       	ori	r24, 0xF0	; 240
    1f4e:	9f 6f       	ori	r25, 0xFF	; 255
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1f56:	c8 2f       	mov	r28, r24
    1f58:	13 e6       	ldi	r17, 0x63	; 99
    1f5a:	1e c0       	rjmp	.+60     	; 0x1f98 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1f5c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
    1f60:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1f62:	0e 94 62 12 	call	0x24c4	; 0x24c4 <rand>
		test_position = position(x,y);
    1f66:	bc 01       	movw	r22, r24
    1f68:	67 70       	andi	r22, 0x07	; 7
    1f6a:	70 78       	andi	r23, 0x80	; 128
    1f6c:	77 23       	and	r23, r23
    1f6e:	34 f4       	brge	.+12     	; 0x1f7c <add_superfood_to_board+0x66>
    1f70:	61 50       	subi	r22, 0x01	; 1
    1f72:	71 09       	sbc	r23, r1
    1f74:	68 6f       	ori	r22, 0xF8	; 248
    1f76:	7f 6f       	ori	r23, 0xFF	; 255
    1f78:	6f 5f       	subi	r22, 0xFF	; 255
    1f7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f7c:	ce 01       	movw	r24, r28
    1f7e:	8f 70       	andi	r24, 0x0F	; 15
    1f80:	90 78       	andi	r25, 0x80	; 128
    1f82:	99 23       	and	r25, r25
    1f84:	24 f4       	brge	.+8      	; 0x1f8e <add_superfood_to_board+0x78>
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	80 6f       	ori	r24, 0xF0	; 240
    1f8a:	9f 6f       	ori	r25, 0xFF	; 255
    1f8c:	01 96       	adiw	r24, 0x01	; 1
    1f8e:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <position>
    1f92:	c8 2f       	mov	r28, r24
    1f94:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1f96:	a1 f0       	breq	.+40     	; 0x1fc0 <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1f98:	8c 2f       	mov	r24, r28
    1f9a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    1f9e:	81 11       	cpse	r24, r1
    1fa0:	dd cf       	rjmp	.-70     	; 0x1f5c <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    1fa2:	8c 2f       	mov	r24, r28
    1fa4:	0e 94 a7 05 	call	0xb4e	; 0xb4e <is_food_at>
    1fa8:	81 11       	cpse	r24, r1
    1faa:	d8 cf       	rjmp	.-80     	; 0x1f5c <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1fac:	8c 2f       	mov	r24, r28
    1fae:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <is_superfood_at>
    1fb2:	81 11       	cpse	r24, r1
    1fb4:	d3 cf       	rjmp	.-90     	; 0x1f5c <add_superfood_to_board+0x46>
    1fb6:	8c 2f       	mov	r24, r28
    1fb8:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <is_rat_at>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	ce cf       	rjmp	.-100    	; 0x1f5c <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    1fc0:	c0 93 8d 03 	sts	0x038D, r28	; 0x80038d <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_YELLOW);
    1fc4:	8c 2f       	mov	r24, r28
    1fc6:	0e 94 ca 07 	call	0xf94	; 0xf94 <y_position>
    1fca:	c8 2f       	mov	r28, r24
    1fcc:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1fd0:	0e 94 c7 07 	call	0xf8e	; 0xf8e <x_position>
    1fd4:	4f ef       	ldi	r20, 0xFF	; 255
    1fd6:	6c 2f       	mov	r22, r28
    1fd8:	0e 94 80 07 	call	0xf00	; 0xf00 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <superfood_on_board>
}
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	08 95       	ret

00001fea <move_cursor>:
	printf_P(PSTR("\x1b[2J"));
}

void clear_to_end_of_line(void) {
	printf_P(PSTR("\x1b[K"));
}
    1fea:	28 2f       	mov	r18, r24
    1fec:	08 2e       	mov	r0, r24
    1fee:	00 0c       	add	r0, r0
    1ff0:	33 0b       	sbc	r19, r19
    1ff2:	3f 93       	push	r19
    1ff4:	8f 93       	push	r24
    1ff6:	86 2f       	mov	r24, r22
    1ff8:	06 2e       	mov	r0, r22
    1ffa:	00 0c       	add	r0, r0
    1ffc:	99 0b       	sbc	r25, r25
    1ffe:	9f 93       	push	r25
    2000:	6f 93       	push	r22
    2002:	8b ec       	ldi	r24, 0xCB	; 203
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	08 95       	ret

0000201c <clear_terminal>:
    201c:	86 ec       	ldi	r24, 0xC6	; 198
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	9f 93       	push	r25
    2022:	8f 93       	push	r24
    2024:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
    2028:	0f 90       	pop	r0
    202a:	0f 90       	pop	r0
    202c:	08 95       	ret

0000202e <set_display_attribute>:

void set_display_attribute(DisplayParameter parameter) {
	printf_P(PSTR("\x1b[%dm"), parameter);
    202e:	1f 92       	push	r1
    2030:	8f 93       	push	r24
    2032:	80 ec       	ldi	r24, 0xC0	; 192
    2034:	91 e0       	ldi	r25, 0x01	; 1
    2036:	9f 93       	push	r25
    2038:	8f 93       	push	r24
    203a:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	0f 90       	pop	r0
    2046:	08 95       	ret

00002048 <hide_cursor>:

void hide_cursor() {
	printf_P(PSTR("\x1b[?25l"));
    2048:	89 eb       	ldi	r24, 0xB9	; 185
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
}
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	08 95       	ret

0000205a <show_cursor>:

void show_cursor() {
	printf_P(PSTR("\x1b[?25h"));
    205a:	82 eb       	ldi	r24, 0xB2	; 178
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	9f 93       	push	r25
    2060:	8f 93       	push	r24
    2062:	0e 94 68 13 	call	0x26d0	; 0x26d0 <printf_P>
}
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	08 95       	ret

0000206c <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    206c:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <clock_ticks>
    2070:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <clock_ticks+0x1>
    2074:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <clock_ticks+0x2>
    2078:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    207c:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    207e:	8c e7       	ldi	r24, 0x7C	; 124
    2080:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    2082:	82 e0       	ldi	r24, 0x02	; 2
    2084:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    2086:	83 e0       	ldi	r24, 0x03	; 3
    2088:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    208a:	ee e6       	ldi	r30, 0x6E	; 110
    208c:	f0 e0       	ldi	r31, 0x00	; 0
    208e:	80 81       	ld	r24, Z
    2090:	82 60       	ori	r24, 0x02	; 2
    2092:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    2094:	85 b3       	in	r24, 0x15	; 21
    2096:	82 70       	andi	r24, 0x02	; 2
    2098:	85 bb       	out	0x15, r24	; 21
    209a:	08 95       	ret

0000209c <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	//unpaused_game = 1- unpaused_game;
	TIMSK0 ^= (1<<OCIE0A);
    209c:	ee e6       	ldi	r30, 0x6E	; 110
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	90 81       	ld	r25, Z
    20a2:	82 e0       	ldi	r24, 0x02	; 2
    20a4:	89 27       	eor	r24, r25
    20a6:	80 83       	st	Z, r24
    20a8:	08 95       	ret

000020aa <timer_is_paused>:
}
int timer_is_paused(void){
	//return !unpaused_game;
	return !(TIMSK0 & (1<<OCIE0A)); 
    20aa:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    20ae:	86 95       	lsr	r24
    20b0:	91 e0       	ldi	r25, 0x01	; 1
    20b2:	89 27       	eor	r24, r25
}
    20b4:	81 70       	andi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	08 95       	ret

000020ba <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    20ba:	2f b7       	in	r18, 0x3f	; 63
	cli();
    20bc:	f8 94       	cli
	return_value = clock_ticks;
    20be:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <clock_ticks>
    20c2:	70 91 52 02 	lds	r23, 0x0252	; 0x800252 <clock_ticks+0x1>
    20c6:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <clock_ticks+0x2>
    20ca:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <clock_ticks+0x3>
	if(interrupts_were_on) {
    20ce:	22 23       	and	r18, r18
    20d0:	0c f4       	brge	.+2      	; 0x20d4 <get_clock_ticks+0x1a>
		sei();
    20d2:	78 94       	sei
	}
	return return_value;
}
    20d4:	08 95       	ret

000020d6 <__vector_16>:

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    20d6:	1f 92       	push	r1
    20d8:	0f 92       	push	r0
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	0f 92       	push	r0
    20de:	11 24       	eor	r1, r1
    20e0:	8f 93       	push	r24
    20e2:	9f 93       	push	r25
    20e4:	af 93       	push	r26
    20e6:	bf 93       	push	r27
	// TODO: 
	clock_ticks++;
    20e8:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <clock_ticks>
    20ec:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <clock_ticks+0x1>
    20f0:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <clock_ticks+0x2>
    20f4:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <clock_ticks+0x3>
    20f8:	01 96       	adiw	r24, 0x01	; 1
    20fa:	a1 1d       	adc	r26, r1
    20fc:	b1 1d       	adc	r27, r1
    20fe:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <clock_ticks>
    2102:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <clock_ticks+0x1>
    2106:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <clock_ticks+0x2>
    210a:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <clock_ticks+0x3>
}
    210e:	bf 91       	pop	r27
    2110:	af 91       	pop	r26
    2112:	9f 91       	pop	r25
    2114:	8f 91       	pop	r24
    2116:	0f 90       	pop	r0
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	0f 90       	pop	r0
    211c:	1f 90       	pop	r1
    211e:	18 95       	reti

00002120 <initialise_timer_one>:

}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    2120:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2124:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2128:	e1 e8       	ldi	r30, 0x81	; 129
    212a:	f0 e0       	ldi	r31, 0x00	; 0
    212c:	80 81       	ld	r24, Z
    212e:	8a 60       	ori	r24, 0x0A	; 10
    2130:	80 83       	st	Z, r24
    2132:	80 e4       	ldi	r24, 0x40	; 64
    2134:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2138:	55 9a       	sbi	0x0a, 5	; 10
    213a:	88 ee       	ldi	r24, 0xE8	; 232
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2142:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2146:	08 95       	ret

00002148 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    2148:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    214c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2150:	08 95       	ret

00002152 <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    2152:	55 9a       	sbi	0x0a, 5	; 10
    2154:	08 95       	ret

00002156 <__fixunssfsi>:
    2156:	0e 94 1f 11 	call	0x223e	; 0x223e <__fp_splitA>
    215a:	88 f0       	brcs	.+34     	; 0x217e <__fixunssfsi+0x28>
    215c:	9f 57       	subi	r25, 0x7F	; 127
    215e:	98 f0       	brcs	.+38     	; 0x2186 <__fixunssfsi+0x30>
    2160:	b9 2f       	mov	r27, r25
    2162:	99 27       	eor	r25, r25
    2164:	b7 51       	subi	r27, 0x17	; 23
    2166:	b0 f0       	brcs	.+44     	; 0x2194 <__fixunssfsi+0x3e>
    2168:	e1 f0       	breq	.+56     	; 0x21a2 <__fixunssfsi+0x4c>
    216a:	66 0f       	add	r22, r22
    216c:	77 1f       	adc	r23, r23
    216e:	88 1f       	adc	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	1a f0       	brmi	.+6      	; 0x217a <__fixunssfsi+0x24>
    2174:	ba 95       	dec	r27
    2176:	c9 f7       	brne	.-14     	; 0x216a <__fixunssfsi+0x14>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <__fixunssfsi+0x4c>
    217a:	b1 30       	cpi	r27, 0x01	; 1
    217c:	91 f0       	breq	.+36     	; 0x21a2 <__fixunssfsi+0x4c>
    217e:	0e 94 39 11 	call	0x2272	; 0x2272 <__fp_zero>
    2182:	b1 e0       	ldi	r27, 0x01	; 1
    2184:	08 95       	ret
    2186:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__fp_zero>
    218a:	67 2f       	mov	r22, r23
    218c:	78 2f       	mov	r23, r24
    218e:	88 27       	eor	r24, r24
    2190:	b8 5f       	subi	r27, 0xF8	; 248
    2192:	39 f0       	breq	.+14     	; 0x21a2 <__fixunssfsi+0x4c>
    2194:	b9 3f       	cpi	r27, 0xF9	; 249
    2196:	cc f3       	brlt	.-14     	; 0x218a <__fixunssfsi+0x34>
    2198:	86 95       	lsr	r24
    219a:	77 95       	ror	r23
    219c:	67 95       	ror	r22
    219e:	b3 95       	inc	r27
    21a0:	d9 f7       	brne	.-10     	; 0x2198 <__fixunssfsi+0x42>
    21a2:	3e f4       	brtc	.+14     	; 0x21b2 <__fixunssfsi+0x5c>
    21a4:	90 95       	com	r25
    21a6:	80 95       	com	r24
    21a8:	70 95       	com	r23
    21aa:	61 95       	neg	r22
    21ac:	7f 4f       	sbci	r23, 0xFF	; 255
    21ae:	8f 4f       	sbci	r24, 0xFF	; 255
    21b0:	9f 4f       	sbci	r25, 0xFF	; 255
    21b2:	08 95       	ret

000021b4 <__floatunsisf>:
    21b4:	e8 94       	clt
    21b6:	09 c0       	rjmp	.+18     	; 0x21ca <__floatsisf+0x12>

000021b8 <__floatsisf>:
    21b8:	97 fb       	bst	r25, 7
    21ba:	3e f4       	brtc	.+14     	; 0x21ca <__floatsisf+0x12>
    21bc:	90 95       	com	r25
    21be:	80 95       	com	r24
    21c0:	70 95       	com	r23
    21c2:	61 95       	neg	r22
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	8f 4f       	sbci	r24, 0xFF	; 255
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	99 23       	and	r25, r25
    21cc:	a9 f0       	breq	.+42     	; 0x21f8 <__floatsisf+0x40>
    21ce:	f9 2f       	mov	r31, r25
    21d0:	96 e9       	ldi	r25, 0x96	; 150
    21d2:	bb 27       	eor	r27, r27
    21d4:	93 95       	inc	r25
    21d6:	f6 95       	lsr	r31
    21d8:	87 95       	ror	r24
    21da:	77 95       	ror	r23
    21dc:	67 95       	ror	r22
    21de:	b7 95       	ror	r27
    21e0:	f1 11       	cpse	r31, r1
    21e2:	f8 cf       	rjmp	.-16     	; 0x21d4 <__floatsisf+0x1c>
    21e4:	fa f4       	brpl	.+62     	; 0x2224 <__floatsisf+0x6c>
    21e6:	bb 0f       	add	r27, r27
    21e8:	11 f4       	brne	.+4      	; 0x21ee <__floatsisf+0x36>
    21ea:	60 ff       	sbrs	r22, 0
    21ec:	1b c0       	rjmp	.+54     	; 0x2224 <__floatsisf+0x6c>
    21ee:	6f 5f       	subi	r22, 0xFF	; 255
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	8f 4f       	sbci	r24, 0xFF	; 255
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	16 c0       	rjmp	.+44     	; 0x2224 <__floatsisf+0x6c>
    21f8:	88 23       	and	r24, r24
    21fa:	11 f0       	breq	.+4      	; 0x2200 <__floatsisf+0x48>
    21fc:	96 e9       	ldi	r25, 0x96	; 150
    21fe:	11 c0       	rjmp	.+34     	; 0x2222 <__floatsisf+0x6a>
    2200:	77 23       	and	r23, r23
    2202:	21 f0       	breq	.+8      	; 0x220c <__floatsisf+0x54>
    2204:	9e e8       	ldi	r25, 0x8E	; 142
    2206:	87 2f       	mov	r24, r23
    2208:	76 2f       	mov	r23, r22
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <__floatsisf+0x5e>
    220c:	66 23       	and	r22, r22
    220e:	71 f0       	breq	.+28     	; 0x222c <__floatsisf+0x74>
    2210:	96 e8       	ldi	r25, 0x86	; 134
    2212:	86 2f       	mov	r24, r22
    2214:	70 e0       	ldi	r23, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	2a f0       	brmi	.+10     	; 0x2224 <__floatsisf+0x6c>
    221a:	9a 95       	dec	r25
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	da f7       	brpl	.-10     	; 0x221a <__floatsisf+0x62>
    2224:	88 0f       	add	r24, r24
    2226:	96 95       	lsr	r25
    2228:	87 95       	ror	r24
    222a:	97 f9       	bld	r25, 7
    222c:	08 95       	ret

0000222e <__fp_split3>:
    222e:	57 fd       	sbrc	r21, 7
    2230:	90 58       	subi	r25, 0x80	; 128
    2232:	44 0f       	add	r20, r20
    2234:	55 1f       	adc	r21, r21
    2236:	59 f0       	breq	.+22     	; 0x224e <__fp_splitA+0x10>
    2238:	5f 3f       	cpi	r21, 0xFF	; 255
    223a:	71 f0       	breq	.+28     	; 0x2258 <__fp_splitA+0x1a>
    223c:	47 95       	ror	r20

0000223e <__fp_splitA>:
    223e:	88 0f       	add	r24, r24
    2240:	97 fb       	bst	r25, 7
    2242:	99 1f       	adc	r25, r25
    2244:	61 f0       	breq	.+24     	; 0x225e <__fp_splitA+0x20>
    2246:	9f 3f       	cpi	r25, 0xFF	; 255
    2248:	79 f0       	breq	.+30     	; 0x2268 <__fp_splitA+0x2a>
    224a:	87 95       	ror	r24
    224c:	08 95       	ret
    224e:	12 16       	cp	r1, r18
    2250:	13 06       	cpc	r1, r19
    2252:	14 06       	cpc	r1, r20
    2254:	55 1f       	adc	r21, r21
    2256:	f2 cf       	rjmp	.-28     	; 0x223c <__fp_split3+0xe>
    2258:	46 95       	lsr	r20
    225a:	f1 df       	rcall	.-30     	; 0x223e <__fp_splitA>
    225c:	08 c0       	rjmp	.+16     	; 0x226e <__fp_splitA+0x30>
    225e:	16 16       	cp	r1, r22
    2260:	17 06       	cpc	r1, r23
    2262:	18 06       	cpc	r1, r24
    2264:	99 1f       	adc	r25, r25
    2266:	f1 cf       	rjmp	.-30     	; 0x224a <__fp_splitA+0xc>
    2268:	86 95       	lsr	r24
    226a:	71 05       	cpc	r23, r1
    226c:	61 05       	cpc	r22, r1
    226e:	08 94       	sec
    2270:	08 95       	ret

00002272 <__fp_zero>:
    2272:	e8 94       	clt

00002274 <__fp_szero>:
    2274:	bb 27       	eor	r27, r27
    2276:	66 27       	eor	r22, r22
    2278:	77 27       	eor	r23, r23
    227a:	cb 01       	movw	r24, r22
    227c:	97 f9       	bld	r25, 7
    227e:	08 95       	ret

00002280 <__mulsf3>:
    2280:	0e 94 53 11 	call	0x22a6	; 0x22a6 <__mulsf3x>
    2284:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <__fp_round>
    2288:	0e 94 b6 11 	call	0x236c	; 0x236c <__fp_pscA>
    228c:	38 f0       	brcs	.+14     	; 0x229c <__mulsf3+0x1c>
    228e:	0e 94 bd 11 	call	0x237a	; 0x237a <__fp_pscB>
    2292:	20 f0       	brcs	.+8      	; 0x229c <__mulsf3+0x1c>
    2294:	95 23       	and	r25, r21
    2296:	11 f0       	breq	.+4      	; 0x229c <__mulsf3+0x1c>
    2298:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__fp_inf>
    229c:	0c 94 b3 11 	jmp	0x2366	; 0x2366 <__fp_nan>
    22a0:	11 24       	eor	r1, r1
    22a2:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__fp_szero>

000022a6 <__mulsf3x>:
    22a6:	0e 94 17 11 	call	0x222e	; 0x222e <__fp_split3>
    22aa:	70 f3       	brcs	.-36     	; 0x2288 <__mulsf3+0x8>

000022ac <__mulsf3_pse>:
    22ac:	95 9f       	mul	r25, r21
    22ae:	c1 f3       	breq	.-16     	; 0x22a0 <__mulsf3+0x20>
    22b0:	95 0f       	add	r25, r21
    22b2:	50 e0       	ldi	r21, 0x00	; 0
    22b4:	55 1f       	adc	r21, r21
    22b6:	62 9f       	mul	r22, r18
    22b8:	f0 01       	movw	r30, r0
    22ba:	72 9f       	mul	r23, r18
    22bc:	bb 27       	eor	r27, r27
    22be:	f0 0d       	add	r31, r0
    22c0:	b1 1d       	adc	r27, r1
    22c2:	63 9f       	mul	r22, r19
    22c4:	aa 27       	eor	r26, r26
    22c6:	f0 0d       	add	r31, r0
    22c8:	b1 1d       	adc	r27, r1
    22ca:	aa 1f       	adc	r26, r26
    22cc:	64 9f       	mul	r22, r20
    22ce:	66 27       	eor	r22, r22
    22d0:	b0 0d       	add	r27, r0
    22d2:	a1 1d       	adc	r26, r1
    22d4:	66 1f       	adc	r22, r22
    22d6:	82 9f       	mul	r24, r18
    22d8:	22 27       	eor	r18, r18
    22da:	b0 0d       	add	r27, r0
    22dc:	a1 1d       	adc	r26, r1
    22de:	62 1f       	adc	r22, r18
    22e0:	73 9f       	mul	r23, r19
    22e2:	b0 0d       	add	r27, r0
    22e4:	a1 1d       	adc	r26, r1
    22e6:	62 1f       	adc	r22, r18
    22e8:	83 9f       	mul	r24, r19
    22ea:	a0 0d       	add	r26, r0
    22ec:	61 1d       	adc	r22, r1
    22ee:	22 1f       	adc	r18, r18
    22f0:	74 9f       	mul	r23, r20
    22f2:	33 27       	eor	r19, r19
    22f4:	a0 0d       	add	r26, r0
    22f6:	61 1d       	adc	r22, r1
    22f8:	23 1f       	adc	r18, r19
    22fa:	84 9f       	mul	r24, r20
    22fc:	60 0d       	add	r22, r0
    22fe:	21 1d       	adc	r18, r1
    2300:	82 2f       	mov	r24, r18
    2302:	76 2f       	mov	r23, r22
    2304:	6a 2f       	mov	r22, r26
    2306:	11 24       	eor	r1, r1
    2308:	9f 57       	subi	r25, 0x7F	; 127
    230a:	50 40       	sbci	r21, 0x00	; 0
    230c:	9a f0       	brmi	.+38     	; 0x2334 <__mulsf3_pse+0x88>
    230e:	f1 f0       	breq	.+60     	; 0x234c <__mulsf3_pse+0xa0>
    2310:	88 23       	and	r24, r24
    2312:	4a f0       	brmi	.+18     	; 0x2326 <__mulsf3_pse+0x7a>
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	bb 1f       	adc	r27, r27
    231a:	66 1f       	adc	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	91 50       	subi	r25, 0x01	; 1
    2322:	50 40       	sbci	r21, 0x00	; 0
    2324:	a9 f7       	brne	.-22     	; 0x2310 <__mulsf3_pse+0x64>
    2326:	9e 3f       	cpi	r25, 0xFE	; 254
    2328:	51 05       	cpc	r21, r1
    232a:	80 f0       	brcs	.+32     	; 0x234c <__mulsf3_pse+0xa0>
    232c:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__fp_inf>
    2330:	0c 94 3a 11 	jmp	0x2274	; 0x2274 <__fp_szero>
    2334:	5f 3f       	cpi	r21, 0xFF	; 255
    2336:	e4 f3       	brlt	.-8      	; 0x2330 <__mulsf3_pse+0x84>
    2338:	98 3e       	cpi	r25, 0xE8	; 232
    233a:	d4 f3       	brlt	.-12     	; 0x2330 <__mulsf3_pse+0x84>
    233c:	86 95       	lsr	r24
    233e:	77 95       	ror	r23
    2340:	67 95       	ror	r22
    2342:	b7 95       	ror	r27
    2344:	f7 95       	ror	r31
    2346:	e7 95       	ror	r30
    2348:	9f 5f       	subi	r25, 0xFF	; 255
    234a:	c1 f7       	brne	.-16     	; 0x233c <__mulsf3_pse+0x90>
    234c:	fe 2b       	or	r31, r30
    234e:	88 0f       	add	r24, r24
    2350:	91 1d       	adc	r25, r1
    2352:	96 95       	lsr	r25
    2354:	87 95       	ror	r24
    2356:	97 f9       	bld	r25, 7
    2358:	08 95       	ret

0000235a <__fp_inf>:
    235a:	97 f9       	bld	r25, 7
    235c:	9f 67       	ori	r25, 0x7F	; 127
    235e:	80 e8       	ldi	r24, 0x80	; 128
    2360:	70 e0       	ldi	r23, 0x00	; 0
    2362:	60 e0       	ldi	r22, 0x00	; 0
    2364:	08 95       	ret

00002366 <__fp_nan>:
    2366:	9f ef       	ldi	r25, 0xFF	; 255
    2368:	80 ec       	ldi	r24, 0xC0	; 192
    236a:	08 95       	ret

0000236c <__fp_pscA>:
    236c:	00 24       	eor	r0, r0
    236e:	0a 94       	dec	r0
    2370:	16 16       	cp	r1, r22
    2372:	17 06       	cpc	r1, r23
    2374:	18 06       	cpc	r1, r24
    2376:	09 06       	cpc	r0, r25
    2378:	08 95       	ret

0000237a <__fp_pscB>:
    237a:	00 24       	eor	r0, r0
    237c:	0a 94       	dec	r0
    237e:	12 16       	cp	r1, r18
    2380:	13 06       	cpc	r1, r19
    2382:	14 06       	cpc	r1, r20
    2384:	05 06       	cpc	r0, r21
    2386:	08 95       	ret

00002388 <__fp_round>:
    2388:	09 2e       	mov	r0, r25
    238a:	03 94       	inc	r0
    238c:	00 0c       	add	r0, r0
    238e:	11 f4       	brne	.+4      	; 0x2394 <__fp_round+0xc>
    2390:	88 23       	and	r24, r24
    2392:	52 f0       	brmi	.+20     	; 0x23a8 <__fp_round+0x20>
    2394:	bb 0f       	add	r27, r27
    2396:	40 f4       	brcc	.+16     	; 0x23a8 <__fp_round+0x20>
    2398:	bf 2b       	or	r27, r31
    239a:	11 f4       	brne	.+4      	; 0x23a0 <__fp_round+0x18>
    239c:	60 ff       	sbrs	r22, 0
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <__fp_round+0x20>
    23a0:	6f 5f       	subi	r22, 0xFF	; 255
    23a2:	7f 4f       	sbci	r23, 0xFF	; 255
    23a4:	8f 4f       	sbci	r24, 0xFF	; 255
    23a6:	9f 4f       	sbci	r25, 0xFF	; 255
    23a8:	08 95       	ret

000023aa <__udivmodsi4>:
    23aa:	a1 e2       	ldi	r26, 0x21	; 33
    23ac:	1a 2e       	mov	r1, r26
    23ae:	aa 1b       	sub	r26, r26
    23b0:	bb 1b       	sub	r27, r27
    23b2:	fd 01       	movw	r30, r26
    23b4:	0d c0       	rjmp	.+26     	; 0x23d0 <__udivmodsi4_ep>

000023b6 <__udivmodsi4_loop>:
    23b6:	aa 1f       	adc	r26, r26
    23b8:	bb 1f       	adc	r27, r27
    23ba:	ee 1f       	adc	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	a2 17       	cp	r26, r18
    23c0:	b3 07       	cpc	r27, r19
    23c2:	e4 07       	cpc	r30, r20
    23c4:	f5 07       	cpc	r31, r21
    23c6:	20 f0       	brcs	.+8      	; 0x23d0 <__udivmodsi4_ep>
    23c8:	a2 1b       	sub	r26, r18
    23ca:	b3 0b       	sbc	r27, r19
    23cc:	e4 0b       	sbc	r30, r20
    23ce:	f5 0b       	sbc	r31, r21

000023d0 <__udivmodsi4_ep>:
    23d0:	66 1f       	adc	r22, r22
    23d2:	77 1f       	adc	r23, r23
    23d4:	88 1f       	adc	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	1a 94       	dec	r1
    23da:	69 f7       	brne	.-38     	; 0x23b6 <__udivmodsi4_loop>
    23dc:	60 95       	com	r22
    23de:	70 95       	com	r23
    23e0:	80 95       	com	r24
    23e2:	90 95       	com	r25
    23e4:	9b 01       	movw	r18, r22
    23e6:	ac 01       	movw	r20, r24
    23e8:	bd 01       	movw	r22, r26
    23ea:	cf 01       	movw	r24, r30
    23ec:	08 95       	ret

000023ee <__divmodsi4>:
    23ee:	05 2e       	mov	r0, r21
    23f0:	97 fb       	bst	r25, 7
    23f2:	1e f4       	brtc	.+6      	; 0x23fa <__divmodsi4+0xc>
    23f4:	00 94       	com	r0
    23f6:	0e 94 0e 12 	call	0x241c	; 0x241c <__negsi2>
    23fa:	57 fd       	sbrc	r21, 7
    23fc:	07 d0       	rcall	.+14     	; 0x240c <__divmodsi4_neg2>
    23fe:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__udivmodsi4>
    2402:	07 fc       	sbrc	r0, 7
    2404:	03 d0       	rcall	.+6      	; 0x240c <__divmodsi4_neg2>
    2406:	4e f4       	brtc	.+18     	; 0x241a <__divmodsi4_exit>
    2408:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__negsi2>

0000240c <__divmodsi4_neg2>:
    240c:	50 95       	com	r21
    240e:	40 95       	com	r20
    2410:	30 95       	com	r19
    2412:	21 95       	neg	r18
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	4f 4f       	sbci	r20, 0xFF	; 255
    2418:	5f 4f       	sbci	r21, 0xFF	; 255

0000241a <__divmodsi4_exit>:
    241a:	08 95       	ret

0000241c <__negsi2>:
    241c:	90 95       	com	r25
    241e:	80 95       	com	r24
    2420:	70 95       	com	r23
    2422:	61 95       	neg	r22
    2424:	7f 4f       	sbci	r23, 0xFF	; 255
    2426:	8f 4f       	sbci	r24, 0xFF	; 255
    2428:	9f 4f       	sbci	r25, 0xFF	; 255
    242a:	08 95       	ret

0000242c <do_rand>:
    242c:	8f 92       	push	r8
    242e:	9f 92       	push	r9
    2430:	af 92       	push	r10
    2432:	bf 92       	push	r11
    2434:	cf 92       	push	r12
    2436:	df 92       	push	r13
    2438:	ef 92       	push	r14
    243a:	ff 92       	push	r15
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	ec 01       	movw	r28, r24
    2442:	68 81       	ld	r22, Y
    2444:	79 81       	ldd	r23, Y+1	; 0x01
    2446:	8a 81       	ldd	r24, Y+2	; 0x02
    2448:	9b 81       	ldd	r25, Y+3	; 0x03
    244a:	61 15       	cp	r22, r1
    244c:	71 05       	cpc	r23, r1
    244e:	81 05       	cpc	r24, r1
    2450:	91 05       	cpc	r25, r1
    2452:	21 f4       	brne	.+8      	; 0x245c <do_rand+0x30>
    2454:	64 e2       	ldi	r22, 0x24	; 36
    2456:	79 ed       	ldi	r23, 0xD9	; 217
    2458:	8b e5       	ldi	r24, 0x5B	; 91
    245a:	97 e0       	ldi	r25, 0x07	; 7
    245c:	2d e1       	ldi	r18, 0x1D	; 29
    245e:	33 ef       	ldi	r19, 0xF3	; 243
    2460:	41 e0       	ldi	r20, 0x01	; 1
    2462:	50 e0       	ldi	r21, 0x00	; 0
    2464:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodsi4>
    2468:	49 01       	movw	r8, r18
    246a:	5a 01       	movw	r10, r20
    246c:	9b 01       	movw	r18, r22
    246e:	ac 01       	movw	r20, r24
    2470:	a7 ea       	ldi	r26, 0xA7	; 167
    2472:	b1 e4       	ldi	r27, 0x41	; 65
    2474:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__muluhisi3>
    2478:	6b 01       	movw	r12, r22
    247a:	7c 01       	movw	r14, r24
    247c:	ac ee       	ldi	r26, 0xEC	; 236
    247e:	b4 ef       	ldi	r27, 0xF4	; 244
    2480:	a5 01       	movw	r20, r10
    2482:	94 01       	movw	r18, r8
    2484:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__mulohisi3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8c 0d       	add	r24, r12
    248e:	9d 1d       	adc	r25, r13
    2490:	ae 1d       	adc	r26, r14
    2492:	bf 1d       	adc	r27, r15
    2494:	b7 ff       	sbrs	r27, 7
    2496:	03 c0       	rjmp	.+6      	; 0x249e <do_rand+0x72>
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	a1 09       	sbc	r26, r1
    249c:	b0 48       	sbci	r27, 0x80	; 128
    249e:	88 83       	st	Y, r24
    24a0:	99 83       	std	Y+1, r25	; 0x01
    24a2:	aa 83       	std	Y+2, r26	; 0x02
    24a4:	bb 83       	std	Y+3, r27	; 0x03
    24a6:	9f 77       	andi	r25, 0x7F	; 127
    24a8:	df 91       	pop	r29
    24aa:	cf 91       	pop	r28
    24ac:	ff 90       	pop	r15
    24ae:	ef 90       	pop	r14
    24b0:	df 90       	pop	r13
    24b2:	cf 90       	pop	r12
    24b4:	bf 90       	pop	r11
    24b6:	af 90       	pop	r10
    24b8:	9f 90       	pop	r9
    24ba:	8f 90       	pop	r8
    24bc:	08 95       	ret

000024be <rand_r>:
    24be:	0e 94 16 12 	call	0x242c	; 0x242c <do_rand>
    24c2:	08 95       	ret

000024c4 <rand>:
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	0e 94 16 12 	call	0x242c	; 0x242c <do_rand>
    24cc:	08 95       	ret

000024ce <srand>:
    24ce:	a0 e0       	ldi	r26, 0x00	; 0
    24d0:	b0 e0       	ldi	r27, 0x00	; 0
    24d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    24d6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    24da:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    24de:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    24e2:	08 95       	ret

000024e4 <random_r>:
    24e4:	8f 92       	push	r8
    24e6:	9f 92       	push	r9
    24e8:	af 92       	push	r10
    24ea:	bf 92       	push	r11
    24ec:	cf 92       	push	r12
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	ec 01       	movw	r28, r24
    24fa:	68 81       	ld	r22, Y
    24fc:	79 81       	ldd	r23, Y+1	; 0x01
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	61 15       	cp	r22, r1
    2504:	71 05       	cpc	r23, r1
    2506:	81 05       	cpc	r24, r1
    2508:	91 05       	cpc	r25, r1
    250a:	21 f4       	brne	.+8      	; 0x2514 <random_r+0x30>
    250c:	64 e2       	ldi	r22, 0x24	; 36
    250e:	79 ed       	ldi	r23, 0xD9	; 217
    2510:	8b e5       	ldi	r24, 0x5B	; 91
    2512:	97 e0       	ldi	r25, 0x07	; 7
    2514:	2d e1       	ldi	r18, 0x1D	; 29
    2516:	33 ef       	ldi	r19, 0xF3	; 243
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	50 e0       	ldi	r21, 0x00	; 0
    251c:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodsi4>
    2520:	49 01       	movw	r8, r18
    2522:	5a 01       	movw	r10, r20
    2524:	9b 01       	movw	r18, r22
    2526:	ac 01       	movw	r20, r24
    2528:	a7 ea       	ldi	r26, 0xA7	; 167
    252a:	b1 e4       	ldi	r27, 0x41	; 65
    252c:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__muluhisi3>
    2530:	6b 01       	movw	r12, r22
    2532:	7c 01       	movw	r14, r24
    2534:	ac ee       	ldi	r26, 0xEC	; 236
    2536:	b4 ef       	ldi	r27, 0xF4	; 244
    2538:	a5 01       	movw	r20, r10
    253a:	94 01       	movw	r18, r8
    253c:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__mulohisi3>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	8c 0d       	add	r24, r12
    2546:	9d 1d       	adc	r25, r13
    2548:	ae 1d       	adc	r26, r14
    254a:	bf 1d       	adc	r27, r15
    254c:	b7 ff       	sbrs	r27, 7
    254e:	03 c0       	rjmp	.+6      	; 0x2556 <random_r+0x72>
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	a1 09       	sbc	r26, r1
    2554:	b0 48       	sbci	r27, 0x80	; 128
    2556:	88 83       	st	Y, r24
    2558:	99 83       	std	Y+1, r25	; 0x01
    255a:	aa 83       	std	Y+2, r26	; 0x02
    255c:	bb 83       	std	Y+3, r27	; 0x03
    255e:	bc 01       	movw	r22, r24
    2560:	cd 01       	movw	r24, r26
    2562:	9f 77       	andi	r25, 0x7F	; 127
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	ff 90       	pop	r15
    256a:	ef 90       	pop	r14
    256c:	df 90       	pop	r13
    256e:	cf 90       	pop	r12
    2570:	bf 90       	pop	r11
    2572:	af 90       	pop	r10
    2574:	9f 90       	pop	r9
    2576:	8f 90       	pop	r8
    2578:	08 95       	ret

0000257a <random>:
    257a:	8f 92       	push	r8
    257c:	9f 92       	push	r9
    257e:	af 92       	push	r10
    2580:	bf 92       	push	r11
    2582:	cf 92       	push	r12
    2584:	df 92       	push	r13
    2586:	ef 92       	push	r14
    2588:	ff 92       	push	r15
    258a:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    258e:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    2592:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    2596:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    259a:	61 15       	cp	r22, r1
    259c:	71 05       	cpc	r23, r1
    259e:	81 05       	cpc	r24, r1
    25a0:	91 05       	cpc	r25, r1
    25a2:	21 f4       	brne	.+8      	; 0x25ac <random+0x32>
    25a4:	64 e2       	ldi	r22, 0x24	; 36
    25a6:	79 ed       	ldi	r23, 0xD9	; 217
    25a8:	8b e5       	ldi	r24, 0x5B	; 91
    25aa:	97 e0       	ldi	r25, 0x07	; 7
    25ac:	2d e1       	ldi	r18, 0x1D	; 29
    25ae:	33 ef       	ldi	r19, 0xF3	; 243
    25b0:	41 e0       	ldi	r20, 0x01	; 1
    25b2:	50 e0       	ldi	r21, 0x00	; 0
    25b4:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divmodsi4>
    25b8:	49 01       	movw	r8, r18
    25ba:	5a 01       	movw	r10, r20
    25bc:	9b 01       	movw	r18, r22
    25be:	ac 01       	movw	r20, r24
    25c0:	a7 ea       	ldi	r26, 0xA7	; 167
    25c2:	b1 e4       	ldi	r27, 0x41	; 65
    25c4:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__muluhisi3>
    25c8:	6b 01       	movw	r12, r22
    25ca:	7c 01       	movw	r14, r24
    25cc:	ac ee       	ldi	r26, 0xEC	; 236
    25ce:	b4 ef       	ldi	r27, 0xF4	; 244
    25d0:	a5 01       	movw	r20, r10
    25d2:	94 01       	movw	r18, r8
    25d4:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <__mulohisi3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8c 0d       	add	r24, r12
    25de:	9d 1d       	adc	r25, r13
    25e0:	ae 1d       	adc	r26, r14
    25e2:	bf 1d       	adc	r27, r15
    25e4:	b7 ff       	sbrs	r27, 7
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <random+0x74>
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	a1 09       	sbc	r26, r1
    25ec:	b0 48       	sbci	r27, 0x80	; 128
    25ee:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    25f2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    25f6:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    25fa:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    25fe:	bc 01       	movw	r22, r24
    2600:	cd 01       	movw	r24, r26
    2602:	9f 77       	andi	r25, 0x7F	; 127
    2604:	ff 90       	pop	r15
    2606:	ef 90       	pop	r14
    2608:	df 90       	pop	r13
    260a:	cf 90       	pop	r12
    260c:	bf 90       	pop	r11
    260e:	af 90       	pop	r10
    2610:	9f 90       	pop	r9
    2612:	8f 90       	pop	r8
    2614:	08 95       	ret

00002616 <srandom>:
    2616:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    261a:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    261e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2622:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2626:	08 95       	ret

00002628 <fgetc>:
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	ec 01       	movw	r28, r24
    262e:	2b 81       	ldd	r18, Y+3	; 0x03
    2630:	20 ff       	sbrs	r18, 0
    2632:	33 c0       	rjmp	.+102    	; 0x269a <fgetc+0x72>
    2634:	26 ff       	sbrs	r18, 6
    2636:	0a c0       	rjmp	.+20     	; 0x264c <fgetc+0x24>
    2638:	2f 7b       	andi	r18, 0xBF	; 191
    263a:	2b 83       	std	Y+3, r18	; 0x03
    263c:	8e 81       	ldd	r24, Y+6	; 0x06
    263e:	9f 81       	ldd	r25, Y+7	; 0x07
    2640:	01 96       	adiw	r24, 0x01	; 1
    2642:	9f 83       	std	Y+7, r25	; 0x07
    2644:	8e 83       	std	Y+6, r24	; 0x06
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	29 c0       	rjmp	.+82     	; 0x269e <fgetc+0x76>
    264c:	22 ff       	sbrs	r18, 2
    264e:	0f c0       	rjmp	.+30     	; 0x266e <fgetc+0x46>
    2650:	e8 81       	ld	r30, Y
    2652:	f9 81       	ldd	r31, Y+1	; 0x01
    2654:	80 81       	ld	r24, Z
    2656:	08 2e       	mov	r0, r24
    2658:	00 0c       	add	r0, r0
    265a:	99 0b       	sbc	r25, r25
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	19 f4       	brne	.+6      	; 0x2666 <fgetc+0x3e>
    2660:	20 62       	ori	r18, 0x20	; 32
    2662:	2b 83       	std	Y+3, r18	; 0x03
    2664:	1a c0       	rjmp	.+52     	; 0x269a <fgetc+0x72>
    2666:	31 96       	adiw	r30, 0x01	; 1
    2668:	f9 83       	std	Y+1, r31	; 0x01
    266a:	e8 83       	st	Y, r30
    266c:	0e c0       	rjmp	.+28     	; 0x268a <fgetc+0x62>
    266e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2670:	fb 85       	ldd	r31, Y+11	; 0x0b
    2672:	09 95       	icall
    2674:	97 ff       	sbrs	r25, 7
    2676:	09 c0       	rjmp	.+18     	; 0x268a <fgetc+0x62>
    2678:	2b 81       	ldd	r18, Y+3	; 0x03
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	11 f0       	breq	.+4      	; 0x2682 <fgetc+0x5a>
    267e:	80 e2       	ldi	r24, 0x20	; 32
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <fgetc+0x5c>
    2682:	80 e1       	ldi	r24, 0x10	; 16
    2684:	82 2b       	or	r24, r18
    2686:	8b 83       	std	Y+3, r24	; 0x03
    2688:	08 c0       	rjmp	.+16     	; 0x269a <fgetc+0x72>
    268a:	2e 81       	ldd	r18, Y+6	; 0x06
    268c:	3f 81       	ldd	r19, Y+7	; 0x07
    268e:	2f 5f       	subi	r18, 0xFF	; 255
    2690:	3f 4f       	sbci	r19, 0xFF	; 255
    2692:	3f 83       	std	Y+7, r19	; 0x07
    2694:	2e 83       	std	Y+6, r18	; 0x06
    2696:	99 27       	eor	r25, r25
    2698:	02 c0       	rjmp	.+4      	; 0x269e <fgetc+0x76>
    269a:	8f ef       	ldi	r24, 0xFF	; 255
    269c:	9f ef       	ldi	r25, 0xFF	; 255
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <printf>:
    26a4:	a0 e0       	ldi	r26, 0x00	; 0
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e8 e5       	ldi	r30, 0x58	; 88
    26aa:	f3 e1       	ldi	r31, 0x13	; 19
    26ac:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__prologue_saves__+0x20>
    26b0:	ae 01       	movw	r20, r28
    26b2:	4b 5f       	subi	r20, 0xFB	; 251
    26b4:	5f 4f       	sbci	r21, 0xFF	; 255
    26b6:	fa 01       	movw	r30, r20
    26b8:	61 91       	ld	r22, Z+
    26ba:	71 91       	ld	r23, Z+
    26bc:	af 01       	movw	r20, r30
    26be:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <__iob+0x2>
    26c2:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <__iob+0x3>
    26c6:	0e 94 e7 13 	call	0x27ce	; 0x27ce <vfprintf>
    26ca:	e2 e0       	ldi	r30, 0x02	; 2
    26cc:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <__epilogue_restores__+0x20>

000026d0 <printf_P>:
    26d0:	a0 e0       	ldi	r26, 0x00	; 0
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ee e6       	ldi	r30, 0x6E	; 110
    26d6:	f3 e1       	ldi	r31, 0x13	; 19
    26d8:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x1c>
    26dc:	ae 01       	movw	r20, r28
    26de:	49 5f       	subi	r20, 0xF9	; 249
    26e0:	5f 4f       	sbci	r21, 0xFF	; 255
    26e2:	da 01       	movw	r26, r20
    26e4:	6d 91       	ld	r22, X+
    26e6:	7d 91       	ld	r23, X+
    26e8:	ad 01       	movw	r20, r26
    26ea:	0f e8       	ldi	r16, 0x8F	; 143
    26ec:	13 e0       	ldi	r17, 0x03	; 3
    26ee:	f8 01       	movw	r30, r16
    26f0:	82 81       	ldd	r24, Z+2	; 0x02
    26f2:	93 81       	ldd	r25, Z+3	; 0x03
    26f4:	dc 01       	movw	r26, r24
    26f6:	13 96       	adiw	r26, 0x03	; 3
    26f8:	2c 91       	ld	r18, X
    26fa:	13 97       	sbiw	r26, 0x03	; 3
    26fc:	28 60       	ori	r18, 0x08	; 8
    26fe:	13 96       	adiw	r26, 0x03	; 3
    2700:	2c 93       	st	X, r18
    2702:	0e 94 e7 13 	call	0x27ce	; 0x27ce <vfprintf>
    2706:	d8 01       	movw	r26, r16
    2708:	12 96       	adiw	r26, 0x02	; 2
    270a:	ed 91       	ld	r30, X+
    270c:	fc 91       	ld	r31, X
    270e:	13 97       	sbiw	r26, 0x03	; 3
    2710:	23 81       	ldd	r18, Z+3	; 0x03
    2712:	27 7f       	andi	r18, 0xF7	; 247
    2714:	23 83       	std	Z+3, r18	; 0x03
    2716:	e4 e0       	ldi	r30, 0x04	; 4
    2718:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x1c>

0000271c <putchar>:
    271c:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <__iob+0x2>
    2720:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <__iob+0x3>
    2724:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2728:	08 95       	ret

0000272a <puts>:
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	e0 91 91 03 	lds	r30, 0x0391	; 0x800391 <__iob+0x2>
    2736:	f0 91 92 03 	lds	r31, 0x0392	; 0x800392 <__iob+0x3>
    273a:	23 81       	ldd	r18, Z+3	; 0x03
    273c:	21 ff       	sbrs	r18, 1
    273e:	1b c0       	rjmp	.+54     	; 0x2776 <puts+0x4c>
    2740:	8c 01       	movw	r16, r24
    2742:	d0 e0       	ldi	r29, 0x00	; 0
    2744:	c0 e0       	ldi	r28, 0x00	; 0
    2746:	f8 01       	movw	r30, r16
    2748:	81 91       	ld	r24, Z+
    274a:	8f 01       	movw	r16, r30
    274c:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <__iob+0x2>
    2750:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <__iob+0x3>
    2754:	db 01       	movw	r26, r22
    2756:	18 96       	adiw	r26, 0x08	; 8
    2758:	ed 91       	ld	r30, X+
    275a:	fc 91       	ld	r31, X
    275c:	19 97       	sbiw	r26, 0x09	; 9
    275e:	88 23       	and	r24, r24
    2760:	31 f0       	breq	.+12     	; 0x276e <puts+0x44>
    2762:	09 95       	icall
    2764:	89 2b       	or	r24, r25
    2766:	79 f3       	breq	.-34     	; 0x2746 <puts+0x1c>
    2768:	df ef       	ldi	r29, 0xFF	; 255
    276a:	cf ef       	ldi	r28, 0xFF	; 255
    276c:	ec cf       	rjmp	.-40     	; 0x2746 <puts+0x1c>
    276e:	8a e0       	ldi	r24, 0x0A	; 10
    2770:	09 95       	icall
    2772:	89 2b       	or	r24, r25
    2774:	19 f0       	breq	.+6      	; 0x277c <puts+0x52>
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	9f ef       	ldi	r25, 0xFF	; 255
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <puts+0x56>
    277c:	8d 2f       	mov	r24, r29
    277e:	9c 2f       	mov	r25, r28
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	08 95       	ret

0000278a <sprintf>:
    278a:	ae e0       	ldi	r26, 0x0E	; 14
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	eb ec       	ldi	r30, 0xCB	; 203
    2790:	f3 e1       	ldi	r31, 0x13	; 19
    2792:	0c 94 d2 16 	jmp	0x2da4	; 0x2da4 <__prologue_saves__+0x1c>
    2796:	0d 89       	ldd	r16, Y+21	; 0x15
    2798:	1e 89       	ldd	r17, Y+22	; 0x16
    279a:	86 e0       	ldi	r24, 0x06	; 6
    279c:	8c 83       	std	Y+4, r24	; 0x04
    279e:	1a 83       	std	Y+2, r17	; 0x02
    27a0:	09 83       	std	Y+1, r16	; 0x01
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	9f e7       	ldi	r25, 0x7F	; 127
    27a6:	9e 83       	std	Y+6, r25	; 0x06
    27a8:	8d 83       	std	Y+5, r24	; 0x05
    27aa:	ae 01       	movw	r20, r28
    27ac:	47 5e       	subi	r20, 0xE7	; 231
    27ae:	5f 4f       	sbci	r21, 0xFF	; 255
    27b0:	6f 89       	ldd	r22, Y+23	; 0x17
    27b2:	78 8d       	ldd	r23, Y+24	; 0x18
    27b4:	ce 01       	movw	r24, r28
    27b6:	01 96       	adiw	r24, 0x01	; 1
    27b8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <vfprintf>
    27bc:	ef 81       	ldd	r30, Y+7	; 0x07
    27be:	f8 85       	ldd	r31, Y+8	; 0x08
    27c0:	e0 0f       	add	r30, r16
    27c2:	f1 1f       	adc	r31, r17
    27c4:	10 82       	st	Z, r1
    27c6:	2e 96       	adiw	r28, 0x0e	; 14
    27c8:	e4 e0       	ldi	r30, 0x04	; 4
    27ca:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__epilogue_restores__+0x1c>

000027ce <vfprintf>:
    27ce:	ab e0       	ldi	r26, 0x0B	; 11
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ed ee       	ldi	r30, 0xED	; 237
    27d4:	f3 e1       	ldi	r31, 0x13	; 19
    27d6:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__prologue_saves__>
    27da:	6c 01       	movw	r12, r24
    27dc:	7b 01       	movw	r14, r22
    27de:	8a 01       	movw	r16, r20
    27e0:	fc 01       	movw	r30, r24
    27e2:	17 82       	std	Z+7, r1	; 0x07
    27e4:	16 82       	std	Z+6, r1	; 0x06
    27e6:	83 81       	ldd	r24, Z+3	; 0x03
    27e8:	81 ff       	sbrs	r24, 1
    27ea:	cc c1       	rjmp	.+920    	; 0x2b84 <vfprintf+0x3b6>
    27ec:	ce 01       	movw	r24, r28
    27ee:	01 96       	adiw	r24, 0x01	; 1
    27f0:	3c 01       	movw	r6, r24
    27f2:	f6 01       	movw	r30, r12
    27f4:	93 81       	ldd	r25, Z+3	; 0x03
    27f6:	f7 01       	movw	r30, r14
    27f8:	93 fd       	sbrc	r25, 3
    27fa:	85 91       	lpm	r24, Z+
    27fc:	93 ff       	sbrs	r25, 3
    27fe:	81 91       	ld	r24, Z+
    2800:	7f 01       	movw	r14, r30
    2802:	88 23       	and	r24, r24
    2804:	09 f4       	brne	.+2      	; 0x2808 <vfprintf+0x3a>
    2806:	ba c1       	rjmp	.+884    	; 0x2b7c <vfprintf+0x3ae>
    2808:	85 32       	cpi	r24, 0x25	; 37
    280a:	39 f4       	brne	.+14     	; 0x281a <vfprintf+0x4c>
    280c:	93 fd       	sbrc	r25, 3
    280e:	85 91       	lpm	r24, Z+
    2810:	93 ff       	sbrs	r25, 3
    2812:	81 91       	ld	r24, Z+
    2814:	7f 01       	movw	r14, r30
    2816:	85 32       	cpi	r24, 0x25	; 37
    2818:	29 f4       	brne	.+10     	; 0x2824 <vfprintf+0x56>
    281a:	b6 01       	movw	r22, r12
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2822:	e7 cf       	rjmp	.-50     	; 0x27f2 <vfprintf+0x24>
    2824:	91 2c       	mov	r9, r1
    2826:	21 2c       	mov	r2, r1
    2828:	31 2c       	mov	r3, r1
    282a:	ff e1       	ldi	r31, 0x1F	; 31
    282c:	f3 15       	cp	r31, r3
    282e:	d8 f0       	brcs	.+54     	; 0x2866 <vfprintf+0x98>
    2830:	8b 32       	cpi	r24, 0x2B	; 43
    2832:	79 f0       	breq	.+30     	; 0x2852 <vfprintf+0x84>
    2834:	38 f4       	brcc	.+14     	; 0x2844 <vfprintf+0x76>
    2836:	80 32       	cpi	r24, 0x20	; 32
    2838:	79 f0       	breq	.+30     	; 0x2858 <vfprintf+0x8a>
    283a:	83 32       	cpi	r24, 0x23	; 35
    283c:	a1 f4       	brne	.+40     	; 0x2866 <vfprintf+0x98>
    283e:	23 2d       	mov	r18, r3
    2840:	20 61       	ori	r18, 0x10	; 16
    2842:	1d c0       	rjmp	.+58     	; 0x287e <vfprintf+0xb0>
    2844:	8d 32       	cpi	r24, 0x2D	; 45
    2846:	61 f0       	breq	.+24     	; 0x2860 <vfprintf+0x92>
    2848:	80 33       	cpi	r24, 0x30	; 48
    284a:	69 f4       	brne	.+26     	; 0x2866 <vfprintf+0x98>
    284c:	23 2d       	mov	r18, r3
    284e:	21 60       	ori	r18, 0x01	; 1
    2850:	16 c0       	rjmp	.+44     	; 0x287e <vfprintf+0xb0>
    2852:	83 2d       	mov	r24, r3
    2854:	82 60       	ori	r24, 0x02	; 2
    2856:	38 2e       	mov	r3, r24
    2858:	e3 2d       	mov	r30, r3
    285a:	e4 60       	ori	r30, 0x04	; 4
    285c:	3e 2e       	mov	r3, r30
    285e:	2a c0       	rjmp	.+84     	; 0x28b4 <vfprintf+0xe6>
    2860:	f3 2d       	mov	r31, r3
    2862:	f8 60       	ori	r31, 0x08	; 8
    2864:	1d c0       	rjmp	.+58     	; 0x28a0 <vfprintf+0xd2>
    2866:	37 fc       	sbrc	r3, 7
    2868:	2d c0       	rjmp	.+90     	; 0x28c4 <vfprintf+0xf6>
    286a:	20 ed       	ldi	r18, 0xD0	; 208
    286c:	28 0f       	add	r18, r24
    286e:	2a 30       	cpi	r18, 0x0A	; 10
    2870:	40 f0       	brcs	.+16     	; 0x2882 <vfprintf+0xb4>
    2872:	8e 32       	cpi	r24, 0x2E	; 46
    2874:	b9 f4       	brne	.+46     	; 0x28a4 <vfprintf+0xd6>
    2876:	36 fc       	sbrc	r3, 6
    2878:	81 c1       	rjmp	.+770    	; 0x2b7c <vfprintf+0x3ae>
    287a:	23 2d       	mov	r18, r3
    287c:	20 64       	ori	r18, 0x40	; 64
    287e:	32 2e       	mov	r3, r18
    2880:	19 c0       	rjmp	.+50     	; 0x28b4 <vfprintf+0xe6>
    2882:	36 fe       	sbrs	r3, 6
    2884:	06 c0       	rjmp	.+12     	; 0x2892 <vfprintf+0xc4>
    2886:	8a e0       	ldi	r24, 0x0A	; 10
    2888:	98 9e       	mul	r9, r24
    288a:	20 0d       	add	r18, r0
    288c:	11 24       	eor	r1, r1
    288e:	92 2e       	mov	r9, r18
    2890:	11 c0       	rjmp	.+34     	; 0x28b4 <vfprintf+0xe6>
    2892:	ea e0       	ldi	r30, 0x0A	; 10
    2894:	2e 9e       	mul	r2, r30
    2896:	20 0d       	add	r18, r0
    2898:	11 24       	eor	r1, r1
    289a:	22 2e       	mov	r2, r18
    289c:	f3 2d       	mov	r31, r3
    289e:	f0 62       	ori	r31, 0x20	; 32
    28a0:	3f 2e       	mov	r3, r31
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <vfprintf+0xe6>
    28a4:	8c 36       	cpi	r24, 0x6C	; 108
    28a6:	21 f4       	brne	.+8      	; 0x28b0 <vfprintf+0xe2>
    28a8:	83 2d       	mov	r24, r3
    28aa:	80 68       	ori	r24, 0x80	; 128
    28ac:	38 2e       	mov	r3, r24
    28ae:	02 c0       	rjmp	.+4      	; 0x28b4 <vfprintf+0xe6>
    28b0:	88 36       	cpi	r24, 0x68	; 104
    28b2:	41 f4       	brne	.+16     	; 0x28c4 <vfprintf+0xf6>
    28b4:	f7 01       	movw	r30, r14
    28b6:	93 fd       	sbrc	r25, 3
    28b8:	85 91       	lpm	r24, Z+
    28ba:	93 ff       	sbrs	r25, 3
    28bc:	81 91       	ld	r24, Z+
    28be:	7f 01       	movw	r14, r30
    28c0:	81 11       	cpse	r24, r1
    28c2:	b3 cf       	rjmp	.-154    	; 0x282a <vfprintf+0x5c>
    28c4:	98 2f       	mov	r25, r24
    28c6:	9f 7d       	andi	r25, 0xDF	; 223
    28c8:	95 54       	subi	r25, 0x45	; 69
    28ca:	93 30       	cpi	r25, 0x03	; 3
    28cc:	28 f4       	brcc	.+10     	; 0x28d8 <vfprintf+0x10a>
    28ce:	0c 5f       	subi	r16, 0xFC	; 252
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	9f e3       	ldi	r25, 0x3F	; 63
    28d4:	99 83       	std	Y+1, r25	; 0x01
    28d6:	0d c0       	rjmp	.+26     	; 0x28f2 <vfprintf+0x124>
    28d8:	83 36       	cpi	r24, 0x63	; 99
    28da:	31 f0       	breq	.+12     	; 0x28e8 <vfprintf+0x11a>
    28dc:	83 37       	cpi	r24, 0x73	; 115
    28de:	71 f0       	breq	.+28     	; 0x28fc <vfprintf+0x12e>
    28e0:	83 35       	cpi	r24, 0x53	; 83
    28e2:	09 f0       	breq	.+2      	; 0x28e6 <vfprintf+0x118>
    28e4:	59 c0       	rjmp	.+178    	; 0x2998 <vfprintf+0x1ca>
    28e6:	21 c0       	rjmp	.+66     	; 0x292a <vfprintf+0x15c>
    28e8:	f8 01       	movw	r30, r16
    28ea:	80 81       	ld	r24, Z
    28ec:	89 83       	std	Y+1, r24	; 0x01
    28ee:	0e 5f       	subi	r16, 0xFE	; 254
    28f0:	1f 4f       	sbci	r17, 0xFF	; 255
    28f2:	88 24       	eor	r8, r8
    28f4:	83 94       	inc	r8
    28f6:	91 2c       	mov	r9, r1
    28f8:	53 01       	movw	r10, r6
    28fa:	13 c0       	rjmp	.+38     	; 0x2922 <vfprintf+0x154>
    28fc:	28 01       	movw	r4, r16
    28fe:	f2 e0       	ldi	r31, 0x02	; 2
    2900:	4f 0e       	add	r4, r31
    2902:	51 1c       	adc	r5, r1
    2904:	f8 01       	movw	r30, r16
    2906:	a0 80       	ld	r10, Z
    2908:	b1 80       	ldd	r11, Z+1	; 0x01
    290a:	36 fe       	sbrs	r3, 6
    290c:	03 c0       	rjmp	.+6      	; 0x2914 <vfprintf+0x146>
    290e:	69 2d       	mov	r22, r9
    2910:	70 e0       	ldi	r23, 0x00	; 0
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <vfprintf+0x14a>
    2914:	6f ef       	ldi	r22, 0xFF	; 255
    2916:	7f ef       	ldi	r23, 0xFF	; 255
    2918:	c5 01       	movw	r24, r10
    291a:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <strnlen>
    291e:	4c 01       	movw	r8, r24
    2920:	82 01       	movw	r16, r4
    2922:	f3 2d       	mov	r31, r3
    2924:	ff 77       	andi	r31, 0x7F	; 127
    2926:	3f 2e       	mov	r3, r31
    2928:	16 c0       	rjmp	.+44     	; 0x2956 <vfprintf+0x188>
    292a:	28 01       	movw	r4, r16
    292c:	22 e0       	ldi	r18, 0x02	; 2
    292e:	42 0e       	add	r4, r18
    2930:	51 1c       	adc	r5, r1
    2932:	f8 01       	movw	r30, r16
    2934:	a0 80       	ld	r10, Z
    2936:	b1 80       	ldd	r11, Z+1	; 0x01
    2938:	36 fe       	sbrs	r3, 6
    293a:	03 c0       	rjmp	.+6      	; 0x2942 <vfprintf+0x174>
    293c:	69 2d       	mov	r22, r9
    293e:	70 e0       	ldi	r23, 0x00	; 0
    2940:	02 c0       	rjmp	.+4      	; 0x2946 <vfprintf+0x178>
    2942:	6f ef       	ldi	r22, 0xFF	; 255
    2944:	7f ef       	ldi	r23, 0xFF	; 255
    2946:	c5 01       	movw	r24, r10
    2948:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <strnlen_P>
    294c:	4c 01       	movw	r8, r24
    294e:	f3 2d       	mov	r31, r3
    2950:	f0 68       	ori	r31, 0x80	; 128
    2952:	3f 2e       	mov	r3, r31
    2954:	82 01       	movw	r16, r4
    2956:	33 fc       	sbrc	r3, 3
    2958:	1b c0       	rjmp	.+54     	; 0x2990 <vfprintf+0x1c2>
    295a:	82 2d       	mov	r24, r2
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	88 16       	cp	r8, r24
    2960:	99 06       	cpc	r9, r25
    2962:	b0 f4       	brcc	.+44     	; 0x2990 <vfprintf+0x1c2>
    2964:	b6 01       	movw	r22, r12
    2966:	80 e2       	ldi	r24, 0x20	; 32
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    296e:	2a 94       	dec	r2
    2970:	f4 cf       	rjmp	.-24     	; 0x295a <vfprintf+0x18c>
    2972:	f5 01       	movw	r30, r10
    2974:	37 fc       	sbrc	r3, 7
    2976:	85 91       	lpm	r24, Z+
    2978:	37 fe       	sbrs	r3, 7
    297a:	81 91       	ld	r24, Z+
    297c:	5f 01       	movw	r10, r30
    297e:	b6 01       	movw	r22, r12
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2986:	21 10       	cpse	r2, r1
    2988:	2a 94       	dec	r2
    298a:	21 e0       	ldi	r18, 0x01	; 1
    298c:	82 1a       	sub	r8, r18
    298e:	91 08       	sbc	r9, r1
    2990:	81 14       	cp	r8, r1
    2992:	91 04       	cpc	r9, r1
    2994:	71 f7       	brne	.-36     	; 0x2972 <vfprintf+0x1a4>
    2996:	e8 c0       	rjmp	.+464    	; 0x2b68 <vfprintf+0x39a>
    2998:	84 36       	cpi	r24, 0x64	; 100
    299a:	11 f0       	breq	.+4      	; 0x29a0 <vfprintf+0x1d2>
    299c:	89 36       	cpi	r24, 0x69	; 105
    299e:	41 f5       	brne	.+80     	; 0x29f0 <vfprintf+0x222>
    29a0:	f8 01       	movw	r30, r16
    29a2:	37 fe       	sbrs	r3, 7
    29a4:	07 c0       	rjmp	.+14     	; 0x29b4 <vfprintf+0x1e6>
    29a6:	60 81       	ld	r22, Z
    29a8:	71 81       	ldd	r23, Z+1	; 0x01
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	93 81       	ldd	r25, Z+3	; 0x03
    29ae:	0c 5f       	subi	r16, 0xFC	; 252
    29b0:	1f 4f       	sbci	r17, 0xFF	; 255
    29b2:	08 c0       	rjmp	.+16     	; 0x29c4 <vfprintf+0x1f6>
    29b4:	60 81       	ld	r22, Z
    29b6:	71 81       	ldd	r23, Z+1	; 0x01
    29b8:	07 2e       	mov	r0, r23
    29ba:	00 0c       	add	r0, r0
    29bc:	88 0b       	sbc	r24, r24
    29be:	99 0b       	sbc	r25, r25
    29c0:	0e 5f       	subi	r16, 0xFE	; 254
    29c2:	1f 4f       	sbci	r17, 0xFF	; 255
    29c4:	f3 2d       	mov	r31, r3
    29c6:	ff 76       	andi	r31, 0x6F	; 111
    29c8:	3f 2e       	mov	r3, r31
    29ca:	97 ff       	sbrs	r25, 7
    29cc:	09 c0       	rjmp	.+18     	; 0x29e0 <vfprintf+0x212>
    29ce:	90 95       	com	r25
    29d0:	80 95       	com	r24
    29d2:	70 95       	com	r23
    29d4:	61 95       	neg	r22
    29d6:	7f 4f       	sbci	r23, 0xFF	; 255
    29d8:	8f 4f       	sbci	r24, 0xFF	; 255
    29da:	9f 4f       	sbci	r25, 0xFF	; 255
    29dc:	f0 68       	ori	r31, 0x80	; 128
    29de:	3f 2e       	mov	r3, r31
    29e0:	2a e0       	ldi	r18, 0x0A	; 10
    29e2:	30 e0       	ldi	r19, 0x00	; 0
    29e4:	a3 01       	movw	r20, r6
    29e6:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__ultoa_invert>
    29ea:	88 2e       	mov	r8, r24
    29ec:	86 18       	sub	r8, r6
    29ee:	45 c0       	rjmp	.+138    	; 0x2a7a <vfprintf+0x2ac>
    29f0:	85 37       	cpi	r24, 0x75	; 117
    29f2:	31 f4       	brne	.+12     	; 0x2a00 <vfprintf+0x232>
    29f4:	23 2d       	mov	r18, r3
    29f6:	2f 7e       	andi	r18, 0xEF	; 239
    29f8:	b2 2e       	mov	r11, r18
    29fa:	2a e0       	ldi	r18, 0x0A	; 10
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	25 c0       	rjmp	.+74     	; 0x2a4a <vfprintf+0x27c>
    2a00:	93 2d       	mov	r25, r3
    2a02:	99 7f       	andi	r25, 0xF9	; 249
    2a04:	b9 2e       	mov	r11, r25
    2a06:	8f 36       	cpi	r24, 0x6F	; 111
    2a08:	c1 f0       	breq	.+48     	; 0x2a3a <vfprintf+0x26c>
    2a0a:	18 f4       	brcc	.+6      	; 0x2a12 <vfprintf+0x244>
    2a0c:	88 35       	cpi	r24, 0x58	; 88
    2a0e:	79 f0       	breq	.+30     	; 0x2a2e <vfprintf+0x260>
    2a10:	b5 c0       	rjmp	.+362    	; 0x2b7c <vfprintf+0x3ae>
    2a12:	80 37       	cpi	r24, 0x70	; 112
    2a14:	19 f0       	breq	.+6      	; 0x2a1c <vfprintf+0x24e>
    2a16:	88 37       	cpi	r24, 0x78	; 120
    2a18:	21 f0       	breq	.+8      	; 0x2a22 <vfprintf+0x254>
    2a1a:	b0 c0       	rjmp	.+352    	; 0x2b7c <vfprintf+0x3ae>
    2a1c:	e9 2f       	mov	r30, r25
    2a1e:	e0 61       	ori	r30, 0x10	; 16
    2a20:	be 2e       	mov	r11, r30
    2a22:	b4 fe       	sbrs	r11, 4
    2a24:	0d c0       	rjmp	.+26     	; 0x2a40 <vfprintf+0x272>
    2a26:	fb 2d       	mov	r31, r11
    2a28:	f4 60       	ori	r31, 0x04	; 4
    2a2a:	bf 2e       	mov	r11, r31
    2a2c:	09 c0       	rjmp	.+18     	; 0x2a40 <vfprintf+0x272>
    2a2e:	34 fe       	sbrs	r3, 4
    2a30:	0a c0       	rjmp	.+20     	; 0x2a46 <vfprintf+0x278>
    2a32:	29 2f       	mov	r18, r25
    2a34:	26 60       	ori	r18, 0x06	; 6
    2a36:	b2 2e       	mov	r11, r18
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <vfprintf+0x278>
    2a3a:	28 e0       	ldi	r18, 0x08	; 8
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	05 c0       	rjmp	.+10     	; 0x2a4a <vfprintf+0x27c>
    2a40:	20 e1       	ldi	r18, 0x10	; 16
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	02 c0       	rjmp	.+4      	; 0x2a4a <vfprintf+0x27c>
    2a46:	20 e1       	ldi	r18, 0x10	; 16
    2a48:	32 e0       	ldi	r19, 0x02	; 2
    2a4a:	f8 01       	movw	r30, r16
    2a4c:	b7 fe       	sbrs	r11, 7
    2a4e:	07 c0       	rjmp	.+14     	; 0x2a5e <vfprintf+0x290>
    2a50:	60 81       	ld	r22, Z
    2a52:	71 81       	ldd	r23, Z+1	; 0x01
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	0c 5f       	subi	r16, 0xFC	; 252
    2a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5c:	06 c0       	rjmp	.+12     	; 0x2a6a <vfprintf+0x29c>
    2a5e:	60 81       	ld	r22, Z
    2a60:	71 81       	ldd	r23, Z+1	; 0x01
    2a62:	80 e0       	ldi	r24, 0x00	; 0
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	0e 5f       	subi	r16, 0xFE	; 254
    2a68:	1f 4f       	sbci	r17, 0xFF	; 255
    2a6a:	a3 01       	movw	r20, r6
    2a6c:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <__ultoa_invert>
    2a70:	88 2e       	mov	r8, r24
    2a72:	86 18       	sub	r8, r6
    2a74:	fb 2d       	mov	r31, r11
    2a76:	ff 77       	andi	r31, 0x7F	; 127
    2a78:	3f 2e       	mov	r3, r31
    2a7a:	36 fe       	sbrs	r3, 6
    2a7c:	0d c0       	rjmp	.+26     	; 0x2a98 <vfprintf+0x2ca>
    2a7e:	23 2d       	mov	r18, r3
    2a80:	2e 7f       	andi	r18, 0xFE	; 254
    2a82:	a2 2e       	mov	r10, r18
    2a84:	89 14       	cp	r8, r9
    2a86:	58 f4       	brcc	.+22     	; 0x2a9e <vfprintf+0x2d0>
    2a88:	34 fe       	sbrs	r3, 4
    2a8a:	0b c0       	rjmp	.+22     	; 0x2aa2 <vfprintf+0x2d4>
    2a8c:	32 fc       	sbrc	r3, 2
    2a8e:	09 c0       	rjmp	.+18     	; 0x2aa2 <vfprintf+0x2d4>
    2a90:	83 2d       	mov	r24, r3
    2a92:	8e 7e       	andi	r24, 0xEE	; 238
    2a94:	a8 2e       	mov	r10, r24
    2a96:	05 c0       	rjmp	.+10     	; 0x2aa2 <vfprintf+0x2d4>
    2a98:	b8 2c       	mov	r11, r8
    2a9a:	a3 2c       	mov	r10, r3
    2a9c:	03 c0       	rjmp	.+6      	; 0x2aa4 <vfprintf+0x2d6>
    2a9e:	b8 2c       	mov	r11, r8
    2aa0:	01 c0       	rjmp	.+2      	; 0x2aa4 <vfprintf+0x2d6>
    2aa2:	b9 2c       	mov	r11, r9
    2aa4:	a4 fe       	sbrs	r10, 4
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <vfprintf+0x2f8>
    2aa8:	fe 01       	movw	r30, r28
    2aaa:	e8 0d       	add	r30, r8
    2aac:	f1 1d       	adc	r31, r1
    2aae:	80 81       	ld	r24, Z
    2ab0:	80 33       	cpi	r24, 0x30	; 48
    2ab2:	21 f4       	brne	.+8      	; 0x2abc <vfprintf+0x2ee>
    2ab4:	9a 2d       	mov	r25, r10
    2ab6:	99 7e       	andi	r25, 0xE9	; 233
    2ab8:	a9 2e       	mov	r10, r25
    2aba:	09 c0       	rjmp	.+18     	; 0x2ace <vfprintf+0x300>
    2abc:	a2 fe       	sbrs	r10, 2
    2abe:	06 c0       	rjmp	.+12     	; 0x2acc <vfprintf+0x2fe>
    2ac0:	b3 94       	inc	r11
    2ac2:	b3 94       	inc	r11
    2ac4:	04 c0       	rjmp	.+8      	; 0x2ace <vfprintf+0x300>
    2ac6:	8a 2d       	mov	r24, r10
    2ac8:	86 78       	andi	r24, 0x86	; 134
    2aca:	09 f0       	breq	.+2      	; 0x2ace <vfprintf+0x300>
    2acc:	b3 94       	inc	r11
    2ace:	a3 fc       	sbrc	r10, 3
    2ad0:	11 c0       	rjmp	.+34     	; 0x2af4 <vfprintf+0x326>
    2ad2:	a0 fe       	sbrs	r10, 0
    2ad4:	06 c0       	rjmp	.+12     	; 0x2ae2 <vfprintf+0x314>
    2ad6:	b2 14       	cp	r11, r2
    2ad8:	88 f4       	brcc	.+34     	; 0x2afc <vfprintf+0x32e>
    2ada:	28 0c       	add	r2, r8
    2adc:	92 2c       	mov	r9, r2
    2ade:	9b 18       	sub	r9, r11
    2ae0:	0e c0       	rjmp	.+28     	; 0x2afe <vfprintf+0x330>
    2ae2:	b2 14       	cp	r11, r2
    2ae4:	60 f4       	brcc	.+24     	; 0x2afe <vfprintf+0x330>
    2ae6:	b6 01       	movw	r22, r12
    2ae8:	80 e2       	ldi	r24, 0x20	; 32
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2af0:	b3 94       	inc	r11
    2af2:	f7 cf       	rjmp	.-18     	; 0x2ae2 <vfprintf+0x314>
    2af4:	b2 14       	cp	r11, r2
    2af6:	18 f4       	brcc	.+6      	; 0x2afe <vfprintf+0x330>
    2af8:	2b 18       	sub	r2, r11
    2afa:	02 c0       	rjmp	.+4      	; 0x2b00 <vfprintf+0x332>
    2afc:	98 2c       	mov	r9, r8
    2afe:	21 2c       	mov	r2, r1
    2b00:	a4 fe       	sbrs	r10, 4
    2b02:	10 c0       	rjmp	.+32     	; 0x2b24 <vfprintf+0x356>
    2b04:	b6 01       	movw	r22, r12
    2b06:	80 e3       	ldi	r24, 0x30	; 48
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2b0e:	a2 fe       	sbrs	r10, 2
    2b10:	17 c0       	rjmp	.+46     	; 0x2b40 <vfprintf+0x372>
    2b12:	a1 fc       	sbrc	r10, 1
    2b14:	03 c0       	rjmp	.+6      	; 0x2b1c <vfprintf+0x34e>
    2b16:	88 e7       	ldi	r24, 0x78	; 120
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <vfprintf+0x352>
    2b1c:	88 e5       	ldi	r24, 0x58	; 88
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	b6 01       	movw	r22, r12
    2b22:	0c c0       	rjmp	.+24     	; 0x2b3c <vfprintf+0x36e>
    2b24:	8a 2d       	mov	r24, r10
    2b26:	86 78       	andi	r24, 0x86	; 134
    2b28:	59 f0       	breq	.+22     	; 0x2b40 <vfprintf+0x372>
    2b2a:	a1 fe       	sbrs	r10, 1
    2b2c:	02 c0       	rjmp	.+4      	; 0x2b32 <vfprintf+0x364>
    2b2e:	8b e2       	ldi	r24, 0x2B	; 43
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <vfprintf+0x366>
    2b32:	80 e2       	ldi	r24, 0x20	; 32
    2b34:	a7 fc       	sbrc	r10, 7
    2b36:	8d e2       	ldi	r24, 0x2D	; 45
    2b38:	b6 01       	movw	r22, r12
    2b3a:	90 e0       	ldi	r25, 0x00	; 0
    2b3c:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2b40:	89 14       	cp	r8, r9
    2b42:	38 f4       	brcc	.+14     	; 0x2b52 <vfprintf+0x384>
    2b44:	b6 01       	movw	r22, r12
    2b46:	80 e3       	ldi	r24, 0x30	; 48
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2b4e:	9a 94       	dec	r9
    2b50:	f7 cf       	rjmp	.-18     	; 0x2b40 <vfprintf+0x372>
    2b52:	8a 94       	dec	r8
    2b54:	f3 01       	movw	r30, r6
    2b56:	e8 0d       	add	r30, r8
    2b58:	f1 1d       	adc	r31, r1
    2b5a:	80 81       	ld	r24, Z
    2b5c:	b6 01       	movw	r22, r12
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2b64:	81 10       	cpse	r8, r1
    2b66:	f5 cf       	rjmp	.-22     	; 0x2b52 <vfprintf+0x384>
    2b68:	22 20       	and	r2, r2
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <vfprintf+0x3a0>
    2b6c:	42 ce       	rjmp	.-892    	; 0x27f2 <vfprintf+0x24>
    2b6e:	b6 01       	movw	r22, r12
    2b70:	80 e2       	ldi	r24, 0x20	; 32
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <fputc>
    2b78:	2a 94       	dec	r2
    2b7a:	f6 cf       	rjmp	.-20     	; 0x2b68 <vfprintf+0x39a>
    2b7c:	f6 01       	movw	r30, r12
    2b7e:	86 81       	ldd	r24, Z+6	; 0x06
    2b80:	97 81       	ldd	r25, Z+7	; 0x07
    2b82:	02 c0       	rjmp	.+4      	; 0x2b88 <vfprintf+0x3ba>
    2b84:	8f ef       	ldi	r24, 0xFF	; 255
    2b86:	9f ef       	ldi	r25, 0xFF	; 255
    2b88:	2b 96       	adiw	r28, 0x0b	; 11
    2b8a:	e2 e1       	ldi	r30, 0x12	; 18
    2b8c:	0c 94 e0 16 	jmp	0x2dc0	; 0x2dc0 <__epilogue_restores__>

00002b90 <strnlen_P>:
    2b90:	fc 01       	movw	r30, r24
    2b92:	05 90       	lpm	r0, Z+
    2b94:	61 50       	subi	r22, 0x01	; 1
    2b96:	70 40       	sbci	r23, 0x00	; 0
    2b98:	01 10       	cpse	r0, r1
    2b9a:	d8 f7       	brcc	.-10     	; 0x2b92 <strnlen_P+0x2>
    2b9c:	80 95       	com	r24
    2b9e:	90 95       	com	r25
    2ba0:	8e 0f       	add	r24, r30
    2ba2:	9f 1f       	adc	r25, r31
    2ba4:	08 95       	ret

00002ba6 <strnlen>:
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	61 50       	subi	r22, 0x01	; 1
    2baa:	70 40       	sbci	r23, 0x00	; 0
    2bac:	01 90       	ld	r0, Z+
    2bae:	01 10       	cpse	r0, r1
    2bb0:	d8 f7       	brcc	.-10     	; 0x2ba8 <strnlen+0x2>
    2bb2:	80 95       	com	r24
    2bb4:	90 95       	com	r25
    2bb6:	8e 0f       	add	r24, r30
    2bb8:	9f 1f       	adc	r25, r31
    2bba:	08 95       	ret

00002bbc <fputc>:
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	cf 93       	push	r28
    2bc2:	df 93       	push	r29
    2bc4:	fb 01       	movw	r30, r22
    2bc6:	23 81       	ldd	r18, Z+3	; 0x03
    2bc8:	21 fd       	sbrc	r18, 1
    2bca:	03 c0       	rjmp	.+6      	; 0x2bd2 <fputc+0x16>
    2bcc:	8f ef       	ldi	r24, 0xFF	; 255
    2bce:	9f ef       	ldi	r25, 0xFF	; 255
    2bd0:	2c c0       	rjmp	.+88     	; 0x2c2a <fputc+0x6e>
    2bd2:	22 ff       	sbrs	r18, 2
    2bd4:	16 c0       	rjmp	.+44     	; 0x2c02 <fputc+0x46>
    2bd6:	46 81       	ldd	r20, Z+6	; 0x06
    2bd8:	57 81       	ldd	r21, Z+7	; 0x07
    2bda:	24 81       	ldd	r18, Z+4	; 0x04
    2bdc:	35 81       	ldd	r19, Z+5	; 0x05
    2bde:	42 17       	cp	r20, r18
    2be0:	53 07       	cpc	r21, r19
    2be2:	44 f4       	brge	.+16     	; 0x2bf4 <fputc+0x38>
    2be4:	a0 81       	ld	r26, Z
    2be6:	b1 81       	ldd	r27, Z+1	; 0x01
    2be8:	9d 01       	movw	r18, r26
    2bea:	2f 5f       	subi	r18, 0xFF	; 255
    2bec:	3f 4f       	sbci	r19, 0xFF	; 255
    2bee:	31 83       	std	Z+1, r19	; 0x01
    2bf0:	20 83       	st	Z, r18
    2bf2:	8c 93       	st	X, r24
    2bf4:	26 81       	ldd	r18, Z+6	; 0x06
    2bf6:	37 81       	ldd	r19, Z+7	; 0x07
    2bf8:	2f 5f       	subi	r18, 0xFF	; 255
    2bfa:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfc:	37 83       	std	Z+7, r19	; 0x07
    2bfe:	26 83       	std	Z+6, r18	; 0x06
    2c00:	14 c0       	rjmp	.+40     	; 0x2c2a <fputc+0x6e>
    2c02:	8b 01       	movw	r16, r22
    2c04:	ec 01       	movw	r28, r24
    2c06:	fb 01       	movw	r30, r22
    2c08:	00 84       	ldd	r0, Z+8	; 0x08
    2c0a:	f1 85       	ldd	r31, Z+9	; 0x09
    2c0c:	e0 2d       	mov	r30, r0
    2c0e:	09 95       	icall
    2c10:	89 2b       	or	r24, r25
    2c12:	e1 f6       	brne	.-72     	; 0x2bcc <fputc+0x10>
    2c14:	d8 01       	movw	r26, r16
    2c16:	16 96       	adiw	r26, 0x06	; 6
    2c18:	8d 91       	ld	r24, X+
    2c1a:	9c 91       	ld	r25, X
    2c1c:	17 97       	sbiw	r26, 0x07	; 7
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	17 96       	adiw	r26, 0x07	; 7
    2c22:	9c 93       	st	X, r25
    2c24:	8e 93       	st	-X, r24
    2c26:	16 97       	sbiw	r26, 0x06	; 6
    2c28:	ce 01       	movw	r24, r28
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <__ultoa_invert>:
    2c34:	fa 01       	movw	r30, r20
    2c36:	aa 27       	eor	r26, r26
    2c38:	28 30       	cpi	r18, 0x08	; 8
    2c3a:	51 f1       	breq	.+84     	; 0x2c90 <__ultoa_invert+0x5c>
    2c3c:	20 31       	cpi	r18, 0x10	; 16
    2c3e:	81 f1       	breq	.+96     	; 0x2ca0 <__ultoa_invert+0x6c>
    2c40:	e8 94       	clt
    2c42:	6f 93       	push	r22
    2c44:	6e 7f       	andi	r22, 0xFE	; 254
    2c46:	6e 5f       	subi	r22, 0xFE	; 254
    2c48:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4e:	af 4f       	sbci	r26, 0xFF	; 255
    2c50:	b1 e0       	ldi	r27, 0x01	; 1
    2c52:	3e d0       	rcall	.+124    	; 0x2cd0 <__ultoa_invert+0x9c>
    2c54:	b4 e0       	ldi	r27, 0x04	; 4
    2c56:	3c d0       	rcall	.+120    	; 0x2cd0 <__ultoa_invert+0x9c>
    2c58:	67 0f       	add	r22, r23
    2c5a:	78 1f       	adc	r23, r24
    2c5c:	89 1f       	adc	r24, r25
    2c5e:	9a 1f       	adc	r25, r26
    2c60:	a1 1d       	adc	r26, r1
    2c62:	68 0f       	add	r22, r24
    2c64:	79 1f       	adc	r23, r25
    2c66:	8a 1f       	adc	r24, r26
    2c68:	91 1d       	adc	r25, r1
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	6a 0f       	add	r22, r26
    2c6e:	71 1d       	adc	r23, r1
    2c70:	81 1d       	adc	r24, r1
    2c72:	91 1d       	adc	r25, r1
    2c74:	a1 1d       	adc	r26, r1
    2c76:	20 d0       	rcall	.+64     	; 0x2cb8 <__ultoa_invert+0x84>
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <__ultoa_invert+0x48>
    2c7a:	68 94       	set
    2c7c:	3f 91       	pop	r19
    2c7e:	2a e0       	ldi	r18, 0x0A	; 10
    2c80:	26 9f       	mul	r18, r22
    2c82:	11 24       	eor	r1, r1
    2c84:	30 19       	sub	r19, r0
    2c86:	30 5d       	subi	r19, 0xD0	; 208
    2c88:	31 93       	st	Z+, r19
    2c8a:	de f6       	brtc	.-74     	; 0x2c42 <__ultoa_invert+0xe>
    2c8c:	cf 01       	movw	r24, r30
    2c8e:	08 95       	ret
    2c90:	46 2f       	mov	r20, r22
    2c92:	47 70       	andi	r20, 0x07	; 7
    2c94:	40 5d       	subi	r20, 0xD0	; 208
    2c96:	41 93       	st	Z+, r20
    2c98:	b3 e0       	ldi	r27, 0x03	; 3
    2c9a:	0f d0       	rcall	.+30     	; 0x2cba <__ultoa_invert+0x86>
    2c9c:	c9 f7       	brne	.-14     	; 0x2c90 <__ultoa_invert+0x5c>
    2c9e:	f6 cf       	rjmp	.-20     	; 0x2c8c <__ultoa_invert+0x58>
    2ca0:	46 2f       	mov	r20, r22
    2ca2:	4f 70       	andi	r20, 0x0F	; 15
    2ca4:	40 5d       	subi	r20, 0xD0	; 208
    2ca6:	4a 33       	cpi	r20, 0x3A	; 58
    2ca8:	18 f0       	brcs	.+6      	; 0x2cb0 <__ultoa_invert+0x7c>
    2caa:	49 5d       	subi	r20, 0xD9	; 217
    2cac:	31 fd       	sbrc	r19, 1
    2cae:	40 52       	subi	r20, 0x20	; 32
    2cb0:	41 93       	st	Z+, r20
    2cb2:	02 d0       	rcall	.+4      	; 0x2cb8 <__ultoa_invert+0x84>
    2cb4:	a9 f7       	brne	.-22     	; 0x2ca0 <__ultoa_invert+0x6c>
    2cb6:	ea cf       	rjmp	.-44     	; 0x2c8c <__ultoa_invert+0x58>
    2cb8:	b4 e0       	ldi	r27, 0x04	; 4
    2cba:	a6 95       	lsr	r26
    2cbc:	97 95       	ror	r25
    2cbe:	87 95       	ror	r24
    2cc0:	77 95       	ror	r23
    2cc2:	67 95       	ror	r22
    2cc4:	ba 95       	dec	r27
    2cc6:	c9 f7       	brne	.-14     	; 0x2cba <__ultoa_invert+0x86>
    2cc8:	00 97       	sbiw	r24, 0x00	; 0
    2cca:	61 05       	cpc	r22, r1
    2ccc:	71 05       	cpc	r23, r1
    2cce:	08 95       	ret
    2cd0:	9b 01       	movw	r18, r22
    2cd2:	ac 01       	movw	r20, r24
    2cd4:	0a 2e       	mov	r0, r26
    2cd6:	06 94       	lsr	r0
    2cd8:	57 95       	ror	r21
    2cda:	47 95       	ror	r20
    2cdc:	37 95       	ror	r19
    2cde:	27 95       	ror	r18
    2ce0:	ba 95       	dec	r27
    2ce2:	c9 f7       	brne	.-14     	; 0x2cd6 <__ultoa_invert+0xa2>
    2ce4:	62 0f       	add	r22, r18
    2ce6:	73 1f       	adc	r23, r19
    2ce8:	84 1f       	adc	r24, r20
    2cea:	95 1f       	adc	r25, r21
    2cec:	a0 1d       	adc	r26, r0
    2cee:	08 95       	ret

00002cf0 <eeprom_read_byte>:
    2cf0:	f9 99       	sbic	0x1f, 1	; 31
    2cf2:	fe cf       	rjmp	.-4      	; 0x2cf0 <eeprom_read_byte>
    2cf4:	92 bd       	out	0x22, r25	; 34
    2cf6:	81 bd       	out	0x21, r24	; 33
    2cf8:	f8 9a       	sbi	0x1f, 0	; 31
    2cfa:	99 27       	eor	r25, r25
    2cfc:	80 b5       	in	r24, 0x20	; 32
    2cfe:	08 95       	ret

00002d00 <eeprom_read_dword>:
    2d00:	a6 e1       	ldi	r26, 0x16	; 22
    2d02:	b0 e0       	ldi	r27, 0x00	; 0
    2d04:	44 e0       	ldi	r20, 0x04	; 4
    2d06:	50 e0       	ldi	r21, 0x00	; 0
    2d08:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <eeprom_read_blraw>

00002d0c <eeprom_write_byte>:
    2d0c:	26 2f       	mov	r18, r22

00002d0e <eeprom_write_r18>:
    2d0e:	f9 99       	sbic	0x1f, 1	; 31
    2d10:	fe cf       	rjmp	.-4      	; 0x2d0e <eeprom_write_r18>
    2d12:	1f ba       	out	0x1f, r1	; 31
    2d14:	92 bd       	out	0x22, r25	; 34
    2d16:	81 bd       	out	0x21, r24	; 33
    2d18:	20 bd       	out	0x20, r18	; 32
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	fa 9a       	sbi	0x1f, 2	; 31
    2d20:	f9 9a       	sbi	0x1f, 1	; 31
    2d22:	0f be       	out	0x3f, r0	; 63
    2d24:	01 96       	adiw	r24, 0x01	; 1
    2d26:	08 95       	ret

00002d28 <eeprom_write_dword>:
    2d28:	24 2f       	mov	r18, r20
    2d2a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <eeprom_write_r18>
    2d2e:	25 2f       	mov	r18, r21
    2d30:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <eeprom_write_r18>
    2d34:	0c 94 9c 16 	jmp	0x2d38	; 0x2d38 <eeprom_write_word>

00002d38 <eeprom_write_word>:
    2d38:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <eeprom_write_byte>
    2d3c:	27 2f       	mov	r18, r23
    2d3e:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <eeprom_write_r18>

00002d42 <eeprom_read_block>:
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22

00002d46 <eeprom_read_blraw>:
    2d46:	fc 01       	movw	r30, r24
    2d48:	f9 99       	sbic	0x1f, 1	; 31
    2d4a:	fe cf       	rjmp	.-4      	; 0x2d48 <eeprom_read_blraw+0x2>
    2d4c:	06 c0       	rjmp	.+12     	; 0x2d5a <eeprom_read_blraw+0x14>
    2d4e:	f2 bd       	out	0x22, r31	; 34
    2d50:	e1 bd       	out	0x21, r30	; 33
    2d52:	f8 9a       	sbi	0x1f, 0	; 31
    2d54:	31 96       	adiw	r30, 0x01	; 1
    2d56:	00 b4       	in	r0, 0x20	; 32
    2d58:	0d 92       	st	X+, r0
    2d5a:	41 50       	subi	r20, 0x01	; 1
    2d5c:	50 40       	sbci	r21, 0x00	; 0
    2d5e:	b8 f7       	brcc	.-18     	; 0x2d4e <eeprom_read_blraw+0x8>
    2d60:	08 95       	ret

00002d62 <__muluhisi3>:
    2d62:	0e 94 fb 16 	call	0x2df6	; 0x2df6 <__umulhisi3>
    2d66:	a5 9f       	mul	r26, r21
    2d68:	90 0d       	add	r25, r0
    2d6a:	b4 9f       	mul	r27, r20
    2d6c:	90 0d       	add	r25, r0
    2d6e:	a4 9f       	mul	r26, r20
    2d70:	80 0d       	add	r24, r0
    2d72:	91 1d       	adc	r25, r1
    2d74:	11 24       	eor	r1, r1
    2d76:	08 95       	ret

00002d78 <__mulshisi3>:
    2d78:	b7 ff       	sbrs	r27, 7
    2d7a:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__muluhisi3>

00002d7e <__mulohisi3>:
    2d7e:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__muluhisi3>
    2d82:	82 1b       	sub	r24, r18
    2d84:	93 0b       	sbc	r25, r19
    2d86:	08 95       	ret

00002d88 <__prologue_saves__>:
    2d88:	2f 92       	push	r2
    2d8a:	3f 92       	push	r3
    2d8c:	4f 92       	push	r4
    2d8e:	5f 92       	push	r5
    2d90:	6f 92       	push	r6
    2d92:	7f 92       	push	r7
    2d94:	8f 92       	push	r8
    2d96:	9f 92       	push	r9
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	ca 1b       	sub	r28, r26
    2db2:	db 0b       	sbc	r29, r27
    2db4:	0f b6       	in	r0, 0x3f	; 63
    2db6:	f8 94       	cli
    2db8:	de bf       	out	0x3e, r29	; 62
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	cd bf       	out	0x3d, r28	; 61
    2dbe:	09 94       	ijmp

00002dc0 <__epilogue_restores__>:
    2dc0:	2a 88       	ldd	r2, Y+18	; 0x12
    2dc2:	39 88       	ldd	r3, Y+17	; 0x11
    2dc4:	48 88       	ldd	r4, Y+16	; 0x10
    2dc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    2dca:	7d 84       	ldd	r7, Y+13	; 0x0d
    2dcc:	8c 84       	ldd	r8, Y+12	; 0x0c
    2dce:	9b 84       	ldd	r9, Y+11	; 0x0b
    2dd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    2dd2:	b9 84       	ldd	r11, Y+9	; 0x09
    2dd4:	c8 84       	ldd	r12, Y+8	; 0x08
    2dd6:	df 80       	ldd	r13, Y+7	; 0x07
    2dd8:	ee 80       	ldd	r14, Y+6	; 0x06
    2dda:	fd 80       	ldd	r15, Y+5	; 0x05
    2ddc:	0c 81       	ldd	r16, Y+4	; 0x04
    2dde:	1b 81       	ldd	r17, Y+3	; 0x03
    2de0:	aa 81       	ldd	r26, Y+2	; 0x02
    2de2:	b9 81       	ldd	r27, Y+1	; 0x01
    2de4:	ce 0f       	add	r28, r30
    2de6:	d1 1d       	adc	r29, r1
    2de8:	0f b6       	in	r0, 0x3f	; 63
    2dea:	f8 94       	cli
    2dec:	de bf       	out	0x3e, r29	; 62
    2dee:	0f be       	out	0x3f, r0	; 63
    2df0:	cd bf       	out	0x3d, r28	; 61
    2df2:	ed 01       	movw	r28, r26
    2df4:	08 95       	ret

00002df6 <__umulhisi3>:
    2df6:	a2 9f       	mul	r26, r18
    2df8:	b0 01       	movw	r22, r0
    2dfa:	b3 9f       	mul	r27, r19
    2dfc:	c0 01       	movw	r24, r0
    2dfe:	a3 9f       	mul	r26, r19
    2e00:	70 0d       	add	r23, r0
    2e02:	81 1d       	adc	r24, r1
    2e04:	11 24       	eor	r1, r1
    2e06:	91 1d       	adc	r25, r1
    2e08:	b2 9f       	mul	r27, r18
    2e0a:	70 0d       	add	r23, r0
    2e0c:	81 1d       	adc	r24, r1
    2e0e:	11 24       	eor	r1, r1
    2e10:	91 1d       	adc	r25, r1
    2e12:	08 95       	ret

00002e14 <_exit>:
    2e14:	f8 94       	cli

00002e16 <__stop_program>:
    2e16:	ff cf       	rjmp	.-2      	; 0x2e16 <__stop_program>
