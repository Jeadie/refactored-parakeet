
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c0  00800100  000032d6  0000336a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000032d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  008002c0  008002c0  0000352a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000352a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000768  00000000  00000000  000035c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a91  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002117  00000000  00000000  0000a7c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003887  00000000  00000000  0000c8d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011f8  00000000  00000000  00010160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001911  00000000  00000000  00011358  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000035dc  00000000  00000000  00012c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00016245  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__vector_20>
      54:	0c 94 d2 0e 	jmp	0x1da4	; 0x1da4 <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2568>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2566>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2114>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2112>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2066>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2062>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2058>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2048>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2033>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	e6 ed       	ldi	r30, 0xD6	; 214
     1fa:	f2 e3       	ldi	r31, 0x32	; 50
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a0 3c       	cpi	r26, 0xC0	; 192
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	a0 ec       	ldi	r26, 0xC0	; 192
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a7 34       	cpi	r26, 0x47	; 71
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 92 0b 	call	0x1724	; 0x1724 <main>
     21c:	0c 94 69 19 	jmp	0x32d2	; 0x32d2 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	ef 53       	subi	r30, 0x3F	; 63
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	e0 54       	subi	r30, 0x40	; 64
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 c0 02 	lds	r20, 0x02C0	; 0x8002c0 <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 c0 02 	lds	r24, 0x02C0	; 0x8002c0 <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 c0 02 	lds	r30, 0x02C0	; 0x8002c0 <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 c0 02 	sts	0x02C0, r18	; 0x8002c0 <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	ef 53       	subi	r30, 0x3F	; 63
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 c0 02 	lds	r18, 0x02C0	; 0x8002c0 <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 c9 02 	sts	0x02C9, r20	; 0x8002c9 <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     344:	89 b1       	in	r24, 0x09	; 9
     346:	83 fb       	bst	r24, 3
     348:	88 27       	eor	r24, r24
     34a:	80 f9       	bld	r24, 0
     34c:	08 95       	ret

0000034e <buzzer_time_left>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
     35e:	40 91 ca 02 	lds	r20, 0x02CA	; 0x8002ca <buzzer_time>
     362:	50 91 cb 02 	lds	r21, 0x02CB	; 0x8002cb <buzzer_time+0x1>
     366:	6a 01       	movw	r12, r20
     368:	55 0f       	add	r21, r21
     36a:	ee 08       	sbc	r14, r14
     36c:	ff 08       	sbc	r15, r15
     36e:	00 91 1d 03 	lds	r16, 0x031D	; 0x80031d <clock_at_tone_start>
     372:	10 91 1e 03 	lds	r17, 0x031E	; 0x80031e <clock_at_tone_start+0x1>
     376:	20 91 1f 03 	lds	r18, 0x031F	; 0x80031f <clock_at_tone_start+0x2>
     37a:	30 91 20 03 	lds	r19, 0x0320	; 0x800320 <clock_at_tone_start+0x3>
     37e:	c0 0e       	add	r12, r16
     380:	d1 1e       	adc	r13, r17
     382:	e2 1e       	adc	r14, r18
     384:	f3 1e       	adc	r15, r19
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	6c 15       	cp	r22, r12
     38c:	7d 05       	cpc	r23, r13
     38e:	8e 05       	cpc	r24, r14
     390:	9f 05       	cpc	r25, r15
     392:	10 f0       	brcs	.+4      	; 0x398 <buzzer_time_left+0x4a>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	c9 01       	movw	r24, r18
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <next_buzzer_tone>:
     3a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     3ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	e7 5f       	subi	r30, 0xF7	; 247
     3c2:	fc 4f       	sbci	r31, 0xFC	; 252
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	0e 94 1f 13 	call	0x263e	; 0x263e <change_OCR1A>
     3cc:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
     3d0:	60 93 1d 03 	sts	0x031D, r22	; 0x80031d <clock_at_tone_start>
     3d4:	70 93 1e 03 	sts	0x031E, r23	; 0x80031e <clock_at_tone_start+0x1>
     3d8:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <clock_at_tone_start+0x2>
     3dc:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <clock_at_tone_start+0x3>
     3e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     3e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	ed 5e       	subi	r30, 0xED	; 237
     3ee:	fc 4f       	sbci	r31, 0xFC	; 252
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <buzzer_time+0x1>
     3f8:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <buzzer_time>
     3fc:	08 95       	ret

000003fe <reset_buzzer>:
     3fe:	55 98       	cbi	0x0a, 5	; 10
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
     404:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     408:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     40c:	08 95       	ret

0000040e <play_start_game_sound_effect>:
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <number_of_tones+0x1>
     416:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <number_of_tones>
     41a:	e3 e1       	ldi	r30, 0x13	; 19
     41c:	f3 e0       	ldi	r31, 0x03	; 3
     41e:	84 ef       	ldi	r24, 0xF4	; 244
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	28 ec       	ldi	r18, 0xC8	; 200
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	33 83       	std	Z+3, r19	; 0x03
     42c:	22 83       	std	Z+2, r18	; 0x02
     42e:	95 83       	std	Z+5, r25	; 0x05
     430:	84 83       	std	Z+4, r24	; 0x04
     432:	e9 e0       	ldi	r30, 0x09	; 9
     434:	f3 e0       	ldi	r31, 0x03	; 3
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
     43e:	28 ee       	ldi	r18, 0xE8	; 232
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	33 83       	std	Z+3, r19	; 0x03
     444:	22 83       	std	Z+2, r18	; 0x02
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     452:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     45a:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     45e:	81 11       	cpse	r24, r1
     460:	0e 94 24 13 	call	0x2648	; 0x2648 <enable_timer_one>
     464:	08 95       	ret

00000466 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <number_of_tones+0x1>
     46e:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <number_of_tones>
		buzzer_durations[0] = 50;
     472:	e3 e1       	ldi	r30, 0x13	; 19
     474:	f3 e0       	ldi	r31, 0x03	; 3
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     486:	e9 e0       	ldi	r30, 0x09	; 9
     488:	f3 e0       	ldi	r31, 0x03	; 3
     48a:	80 ed       	ldi	r24, 0xD0	; 208
     48c:	97 e0       	ldi	r25, 0x07	; 7
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	93 83       	std	Z+3, r25	; 0x03
     498:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     4a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     4aa:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     4ae:	81 11       	cpse	r24, r1
			enable_timer_one();
     4b0:	0e 94 24 13 	call	0x2648	; 0x2648 <enable_timer_one>
     4b4:	08 95       	ret

000004b6 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     4b6:	20 91 07 03 	lds	r18, 0x0307	; 0x800307 <number_of_tones>
     4ba:	30 91 08 03 	lds	r19, 0x0308	; 0x800308 <number_of_tones+0x1>
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	31 09       	sbc	r19, r1
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     4ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     4ce:	42 17       	cp	r20, r18
     4d0:	53 07       	cpc	r21, r19
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <last_tone_in_sequence+0x22>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	}
     4d8:	08 95       	ret

000004da <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4da:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4de:	89 2b       	or	r24, r25
     4e0:	59 f4       	brne	.+22     	; 0x4f8 <handle_buzzer_loop+0x1e>
     4e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <last_tone_in_sequence>
     4e6:	89 2b       	or	r24, r25
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     4ea:	67 e0       	ldi	r22, 0x07	; 7
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     4f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <reset_buzzer>
     4f6:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4f8:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4fc:	89 2b       	or	r24, r25
     4fe:	11 f4       	brne	.+4      	; 0x504 <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     500:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     504:	08 95       	ret

00000506 <EEPROM_has_saved_game>:
	printf("G Score :%i \n", eeprom_read_dword(GAME_SCORE));  // not working
	printf("Snake Length :%u \n", eeprom_read_byte(SNAKE_LENGTH));
	printf("Snake tail :%u \n", eeprom_read_byte(SNAKE_POSITION_TAIL));
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}
     506:	80 e8       	ldi	r24, 0x80	; 128
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	61 15       	cp	r22, r1
     512:	72 41       	sbci	r23, 0x12	; 18
     514:	81 05       	cpc	r24, r1
     516:	91 05       	cpc	r25, r1
     518:	09 f0       	breq	.+2      	; 0x51c <EEPROM_has_saved_game+0x16>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	82 2f       	mov	r24, r18
     51e:	08 95       	ret

00000520 <save_game_to_EPPROM>:
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	f8 94       	cli
     532:	40 e0       	ldi	r20, 0x00	; 0
     534:	52 e1       	ldi	r21, 0x12	; 18
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 e8       	ldi	r24, 0x80	; 128
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
     542:	80 e0       	ldi	r24, 0x00	; 0
     544:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_position_of_food>
     548:	68 2f       	mov	r22, r24
     54a:	80 ea       	ldi	r24, 0xA0	; 160
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_position_of_food>
     558:	68 2f       	mov	r22, r24
     55a:	88 ea       	ldi	r24, 0xA8	; 168
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     562:	82 e0       	ldi	r24, 0x02	; 2
     564:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_position_of_food>
     568:	68 2f       	mov	r22, r24
     56a:	80 eb       	ldi	r24, 0xB0	; 176
     56c:	91 e0       	ldi	r25, 0x01	; 1
     56e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     572:	83 e0       	ldi	r24, 0x03	; 3
     574:	0e 94 76 08 	call	0x10ec	; 0x10ec <get_position_of_food>
     578:	68 2f       	mov	r22, r24
     57a:	88 eb       	ldi	r24, 0xB8	; 184
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     582:	0e 94 ac 0b 	call	0x1758	; 0x1758 <get_rat_position>
     586:	68 2f       	mov	r22, r24
     588:	80 ec       	ldi	r24, 0xC0	; 192
     58a:	91 e0       	ldi	r25, 0x01	; 1
     58c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     590:	0e 94 f7 10 	call	0x21ee	; 0x21ee <superfood_is_on_board>
     594:	88 23       	and	r24, r24
     596:	41 f0       	breq	.+16     	; 0x5a8 <save_game_to_EPPROM+0x88>
     598:	0e 94 41 11 	call	0x2282	; 0x2282 <get_superfood_position>
     59c:	68 2f       	mov	r22, r24
     59e:	88 ec       	ldi	r24, 0xC8	; 200
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <save_game_to_EPPROM+0x92>
     5a8:	68 e0       	ldi	r22, 0x08	; 8
     5aa:	88 ec       	ldi	r24, 0xC8	; 200
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     5b2:	0e 94 5e 09 	call	0x12bc	; 0x12bc <get_current_game_speed>
     5b6:	bc 01       	movw	r22, r24
     5b8:	80 ed       	ldi	r24, 0xD0	; 208
     5ba:	91 e0       	ldi	r25, 0x01	; 1
     5bc:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <eeprom_write_word>
     5c0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     5c4:	ac 01       	movw	r20, r24
     5c6:	99 0f       	add	r25, r25
     5c8:	66 0b       	sbc	r22, r22
     5ca:	77 0b       	sbc	r23, r23
     5cc:	80 ee       	ldi	r24, 0xE0	; 224
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
     5d4:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <get_snake_length>
     5d8:	68 2f       	mov	r22, r24
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	92 e0       	ldi	r25, 0x02	; 2
     5de:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     5e2:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
     5e6:	ac 01       	movw	r20, r24
     5e8:	99 0f       	add	r25, r25
     5ea:	66 0b       	sbc	r22, r22
     5ec:	77 0b       	sbc	r23, r23
     5ee:	88 e0       	ldi	r24, 0x08	; 8
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
     5f6:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <get_current_drn>
     5fa:	68 2f       	mov	r22, r24
     5fc:	88 e1       	ldi	r24, 0x18	; 24
     5fe:	92 e0       	ldi	r25, 0x02	; 2
     600:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     604:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <get_snake_tail_index>
     608:	c8 2f       	mov	r28, r24
     60a:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <get_snake_head_index>
     60e:	8c 17       	cp	r24, r28
     610:	08 f0       	brcs	.+2      	; 0x614 <save_game_to_EPPROM+0xf4>
     612:	7f c0       	rjmp	.+254    	; 0x712 <save_game_to_EPPROM+0x1f2>
     614:	82 e3       	ldi	r24, 0x32	; 50
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	0e 94 10 16 	call	0x2c20	; 0x2c20 <puts>
     61c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <get_snake_tail_index>
     620:	c8 2e       	mov	r12, r24
     622:	c8 2f       	mov	r28, r24
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	c1 32       	cpi	r28, 0x21	; 33
     628:	d1 05       	cpc	r29, r1
     62a:	e4 f5       	brge	.+120    	; 0x6a4 <save_game_to_EPPROM+0x184>
     62c:	00 e2       	ldi	r16, 0x20	; 32
     62e:	12 e0       	ldi	r17, 0x02	; 2
     630:	0f 2e       	mov	r0, r31
     632:	f1 e4       	ldi	r31, 0x41	; 65
     634:	ef 2e       	mov	r14, r31
     636:	f1 e0       	ldi	r31, 0x01	; 1
     638:	ff 2e       	mov	r15, r31
     63a:	f0 2d       	mov	r31, r0
     63c:	8c 2f       	mov	r24, r28
     63e:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     642:	68 2f       	mov	r22, r24
     644:	c8 01       	movw	r24, r16
     646:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     64a:	8c 2f       	mov	r24, r28
     64c:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     650:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
     654:	d8 2e       	mov	r13, r24
     656:	8c 2f       	mov	r24, r28
     658:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     65c:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
     660:	1f 92       	push	r1
     662:	df 92       	push	r13
     664:	1f 92       	push	r1
     666:	8f 93       	push	r24
     668:	ff 92       	push	r15
     66a:	ef 92       	push	r14
     66c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
     670:	21 96       	adiw	r28, 0x01	; 1
     672:	08 5f       	subi	r16, 0xF8	; 248
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	c1 32       	cpi	r28, 0x21	; 33
     684:	d1 05       	cpc	r29, r1
     686:	d1 f6       	brne	.-76     	; 0x63c <save_game_to_EPPROM+0x11c>
     688:	cc 2d       	mov	r28, r12
     68a:	d0 e0       	ldi	r29, 0x00	; 0
     68c:	d1 95       	neg	r29
     68e:	c1 95       	neg	r28
     690:	d1 09       	sbc	r29, r1
     692:	cc 0f       	add	r28, r28
     694:	dd 1f       	adc	r29, r29
     696:	cc 0f       	add	r28, r28
     698:	dd 1f       	adc	r29, r29
     69a:	cc 0f       	add	r28, r28
     69c:	dd 1f       	adc	r29, r29
     69e:	c8 5f       	subi	r28, 0xF8	; 248
     6a0:	de 4f       	sbci	r29, 0xFE	; 254
     6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <save_game_to_EPPROM+0x188>
     6a4:	c0 e0       	ldi	r28, 0x00	; 0
     6a6:	d0 e0       	ldi	r29, 0x00	; 0
     6a8:	00 e0       	ldi	r16, 0x00	; 0
     6aa:	10 e0       	ldi	r17, 0x00	; 0
     6ac:	0f 2e       	mov	r0, r31
     6ae:	f1 e4       	ldi	r31, 0x41	; 65
     6b0:	ef 2e       	mov	r14, r31
     6b2:	f1 e0       	ldi	r31, 0x01	; 1
     6b4:	ff 2e       	mov	r15, r31
     6b6:	f0 2d       	mov	r31, r0
     6b8:	25 c0       	rjmp	.+74     	; 0x704 <save_game_to_EPPROM+0x1e4>
     6ba:	80 2f       	mov	r24, r16
     6bc:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     6c0:	68 2f       	mov	r22, r24
     6c2:	ce 01       	movw	r24, r28
     6c4:	80 5e       	subi	r24, 0xE0	; 224
     6c6:	9d 4f       	sbci	r25, 0xFD	; 253
     6c8:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     6cc:	80 2f       	mov	r24, r16
     6ce:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     6d2:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
     6d6:	d8 2e       	mov	r13, r24
     6d8:	80 2f       	mov	r24, r16
     6da:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     6de:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
     6e2:	1f 92       	push	r1
     6e4:	df 92       	push	r13
     6e6:	1f 92       	push	r1
     6e8:	8f 93       	push	r24
     6ea:	ff 92       	push	r15
     6ec:	ef 92       	push	r14
     6ee:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
     6f2:	28 96       	adiw	r28, 0x08	; 8
     6f4:	0f 5f       	subi	r16, 0xFF	; 255
     6f6:	1f 4f       	sbci	r17, 0xFF	; 255
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <get_snake_head_index>
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	80 17       	cp	r24, r16
     70c:	91 07       	cpc	r25, r17
     70e:	ac f6       	brge	.-86     	; 0x6ba <save_game_to_EPPROM+0x19a>
     710:	3c c0       	rjmp	.+120    	; 0x78a <save_game_to_EPPROM+0x26a>
     712:	8f e4       	ldi	r24, 0x4F	; 79
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	0e 94 10 16 	call	0x2c20	; 0x2c20 <puts>
     71a:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <get_snake_tail_index>
     71e:	08 2f       	mov	r16, r24
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	c0 e0       	ldi	r28, 0x00	; 0
     724:	d0 e0       	ldi	r29, 0x00	; 0
     726:	0f 2e       	mov	r0, r31
     728:	f1 e4       	ldi	r31, 0x41	; 65
     72a:	ef 2e       	mov	r14, r31
     72c:	f1 e0       	ldi	r31, 0x01	; 1
     72e:	ff 2e       	mov	r15, r31
     730:	f0 2d       	mov	r31, r0
     732:	25 c0       	rjmp	.+74     	; 0x77e <save_game_to_EPPROM+0x25e>
     734:	80 2f       	mov	r24, r16
     736:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     73a:	68 2f       	mov	r22, r24
     73c:	ce 01       	movw	r24, r28
     73e:	80 5e       	subi	r24, 0xE0	; 224
     740:	9d 4f       	sbci	r25, 0xFD	; 253
     742:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	80 2f       	mov	r24, r16
     74a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     74e:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
     752:	d8 2e       	mov	r13, r24
     754:	80 2f       	mov	r24, r16
     756:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <get_snake_position_at_index>
     75a:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
     75e:	1f 92       	push	r1
     760:	df 92       	push	r13
     762:	1f 92       	push	r1
     764:	8f 93       	push	r24
     766:	ff 92       	push	r15
     768:	ef 92       	push	r14
     76a:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
     76e:	0f 5f       	subi	r16, 0xFF	; 255
     770:	1f 4f       	sbci	r17, 0xFF	; 255
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <get_snake_head_index>
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	80 17       	cp	r24, r16
     786:	91 07       	cpc	r25, r17
     788:	ac f6       	brge	.-86     	; 0x734 <save_game_to_EPPROM+0x214>
     78a:	68 e0       	ldi	r22, 0x08	; 8
     78c:	ce 01       	movw	r24, r28
     78e:	80 5e       	subi	r24, 0xE0	; 224
     790:	9d 4f       	sbci	r25, 0xFD	; 253
     792:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
     796:	78 94       	sei
     798:	df 91       	pop	r29
     79a:	cf 91       	pop	r28
     79c:	1f 91       	pop	r17
     79e:	0f 91       	pop	r16
     7a0:	ff 90       	pop	r15
     7a2:	ef 90       	pop	r14
     7a4:	df 90       	pop	r13
     7a6:	cf 90       	pop	r12
     7a8:	08 95       	ret

000007aa <add_food_to_board>:
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
	add_food_to_board(food_four);
}

void add_food_to_board(PosnType food_pos){
     7aa:	cf 93       	push	r28
     7ac:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     7ae:	0e 94 b8 09 	call	0x1370	; 0x1370 <is_position_valid>
     7b2:	88 23       	and	r24, r24
     7b4:	99 f0       	breq	.+38     	; 0x7dc <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     7b6:	e0 91 21 03 	lds	r30, 0x0321	; 0x800321 <numFoodItems>
     7ba:	0e 2e       	mov	r0, r30
     7bc:	00 0c       	add	r0, r0
     7be:	ff 0b       	sbc	r31, r31
     7c0:	ee 5d       	subi	r30, 0xDE	; 222
     7c2:	fc 4f       	sbci	r31, 0xFC	; 252
     7c4:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     7c6:	63 e3       	ldi	r22, 0x33	; 51
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	8c 2f       	mov	r24, r28
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
		numFoodItems++; 
     7d2:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <numFoodItems>
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
     7d8:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <numFoodItems>
	}
}
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <load_food_from_EEPROM>:
		load_EEPROM_data_on_next_game =0;
	}
}

void load_food_from_EEPROM(void){
	init_food();
     7e0:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <init_food>
	PosnType food_one = eeprom_read_byte(FOOD_ONE);
     7e4:	80 ea       	ldi	r24, 0xA0	; 160
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
	add_food_to_board(food_one);
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 d5 03 	call	0x7aa	; 0x7aa <add_food_to_board>
	PosnType food_two = eeprom_read_byte(FOOD_TWO);
     7f2:	88 ea       	ldi	r24, 0xA8	; 168
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
	add_food_to_board(food_two);
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 d5 03 	call	0x7aa	; 0x7aa <add_food_to_board>
	
	PosnType food_three = eeprom_read_byte(FOOD_THREE);
     800:	80 eb       	ldi	r24, 0xB0	; 176
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
	add_food_to_board(food_three);	
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <add_food_to_board>
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
     80e:	88 eb       	ldi	r24, 0xB8	; 184
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
	add_food_to_board(food_four);
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 d5 03 	call	0x7aa	; 0x7aa <add_food_to_board>
     81c:	08 95       	ret

0000081e <load_rat_from_EEPROM>:
		foodPositions[numFoodItems] = food_pos;
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
		numFoodItems++; 
	}
}
void load_rat_from_EEPROM(void){
     81e:	cf 93       	push	r28
	PosnType rat_pos = eeprom_read_byte(RAT); 
     820:	80 ec       	ldi	r24, 0xC0	; 192
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     828:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     82a:	0e 94 b8 09 	call	0x1370	; 0x1370 <is_position_valid>
     82e:	88 23       	and	r24, r24
     830:	21 f0       	breq	.+8      	; 0x83a <load_rat_from_EEPROM+0x1c>
		set_rat_at_pos(rat_pos); 
     832:	8c 2f       	mov	r24, r28
     834:	0e 94 af 0b 	call	0x175e	; 0x175e <set_rat_at_pos>
     838:	02 c0       	rjmp	.+4      	; 0x83e <load_rat_from_EEPROM+0x20>
	}else{
		add_new_rat_position();
     83a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <add_new_rat_position>
	}
}
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(void){
     842:	cf 93       	push	r28
	PosnType super_food = eeprom_read_byte(SUPERFOOD); 
     844:	88 ec       	ldi	r24, 0xC8	; 200
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     84c:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     84e:	0e 94 b8 09 	call	0x1370	; 0x1370 <is_position_valid>
     852:	88 23       	and	r24, r24
     854:	21 f0       	breq	.+8      	; 0x85e <load_superfood_from_EEPROM+0x1c>
		load_superfood(super_food);
     856:	8c 2f       	mov	r24, r28
     858:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <load_superfood>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <load_superfood_from_EEPROM+0x20>
	}else{
		remove_superfood_from_board(); 
     85e:	0e 94 20 11 	call	0x2240	; 0x2240 <remove_superfood_from_board>
	}
}
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     866:	df 92       	push	r13
     868:	ef 92       	push	r14
     86a:	ff 92       	push	r15
     86c:	0f 93       	push	r16
     86e:	1f 93       	push	r17
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	92 e0       	ldi	r25, 0x02	; 2
     878:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     87c:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <set_snake_length>
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     886:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <get_snake_length>
     88a:	81 50       	subi	r24, 0x01	; 1
     88c:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <set_snake_head_pointer>
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
	uint8_t snakePosition_index = 0; 
     890:	d0 e0       	ldi	r29, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     892:	00 e2       	ldi	r16, 0x20	; 32
     894:	12 e0       	ldi	r17, 0x02	; 2
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
		printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
     896:	0f 2e       	mov	r0, r31
     898:	f1 e4       	ldi	r31, 0x41	; 65
     89a:	ef 2e       	mov	r14, r31
     89c:	f1 e0       	ldi	r31, 0x01	; 1
     89e:	ff 2e       	mov	r15, r31
     8a0:	f0 2d       	mov	r31, r0
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     8a2:	c8 01       	movw	r24, r16
     8a4:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     8a8:	c8 2f       	mov	r28, r24
		printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
     8aa:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
     8ae:	d8 2e       	mov	r13, r24
     8b0:	8c 2f       	mov	r24, r28
     8b2:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
     8b6:	1f 92       	push	r1
     8b8:	df 92       	push	r13
     8ba:	1f 92       	push	r1
     8bc:	8f 93       	push	r24
     8be:	ff 92       	push	r15
     8c0:	ef 92       	push	r14
     8c2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
		set_snake_position_in_array(snake_position, snakePosition_index); 
     8c6:	6d 2f       	mov	r22, r29
     8c8:	8c 2f       	mov	r24, r28
     8ca:	0e 94 ab 0f 	call	0x1f56	; 0x1f56 <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     8ce:	60 ef       	ldi	r22, 0xF0	; 240
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	8c 2f       	mov	r24, r28
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
		snake_memory_position +=8; 
     8da:	08 5f       	subi	r16, 0xF8	; 248
     8dc:	1f 4f       	sbci	r17, 0xFF	; 255
		snakePosition_index ++; 
     8de:	df 5f       	subi	r29, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     8e0:	c8 01       	movw	r24, r16
     8e2:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     8e6:	0e 94 b8 09 	call	0x1370	; 0x1370 <is_position_valid>
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	81 11       	cpse	r24, r1
     8f8:	d4 cf       	rjmp	.-88     	; 0x8a2 <load_snake_from_EPPROM+0x3c>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     8fa:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <get_snake_head_position>
     8fe:	6f e0       	ldi	r22, 0x0F	; 15
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>

	reset_snake_drn(eeprom_read_byte(SNAKE_DIRECTION)); 
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	92 e0       	ldi	r25, 0x02	; 2
     90c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     910:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <reset_snake_drn>
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	08 95       	ret

00000924 <new_game_from_EEPROM>:
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}

void new_game_from_EEPROM(void){
	if(EEPROM_has_saved_game()){
     924:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
     928:	88 23       	and	r24, r24
     92a:	61 f1       	breq	.+88     	; 0x984 <new_game_from_EEPROM+0x60>
		clear_terminal(); 
     92c:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <clear_terminal>
		set_clock_ticks(eeprom_read_dword(CLOCK_TICKS));
     930:	88 e0       	ldi	r24, 0x08	; 8
     932:	92 e0       	ldi	r25, 0x02	; 2
     934:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     938:	0e 94 94 12 	call	0x2528	; 0x2528 <set_clock_ticks>

		set_score(eeprom_read_dword(GAME_SCORE));
     93c:	80 ee       	ldi	r24, 0xE0	; 224
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     944:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <set_score>
		// Methods from init_game(); 
		ledmatrix_clear();
     948:	0e 94 af 09 	call	0x135e	; 0x135e <ledmatrix_clear>
		init_score_on_terminal();
     94c:	0e 94 1d 12 	call	0x243a	; 0x243a <init_score_on_terminal>
		set_game_speed(eeprom_read_word(GAME_SPEED));
     950:	80 ed       	ldi	r24, 0xD0	; 208
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	0e 94 df 18 	call	0x31be	; 0x31be <eeprom_read_word>
     958:	0e 94 63 09 	call	0x12c6	; 0x12c6 <set_game_speed>
		add_new_rat_position();
     95c:	0e 94 a3 0c 	call	0x1946	; 0x1946 <add_new_rat_position>
		initialise_timer_one();
     960:	0e 94 0a 13 	call	0x2614	; 0x2614 <initialise_timer_one>
		play_start_game_sound_effect();
     964:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
	
		// Init food, rats, superfood and snake
		load_food_from_EEPROM();
     968:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <load_food_from_EEPROM>
		load_rat_from_EEPROM();
     96c:	0e 94 0f 04 	call	0x81e	; 0x81e <load_rat_from_EEPROM>
		load_superfood_from_EEPROM();
     970:	0e 94 21 04 	call	0x842	; 0x842 <load_superfood_from_EEPROM>
		load_snake_from_EPPROM();
     974:	0e 94 33 04 	call	0x866	; 0x866 <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     978:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     97c:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     980:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <load_EEPROM_data_on_next_game>
     984:	08 95       	ret

00000986 <high_score_name_position>:

uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
     986:	81 15       	cp	r24, r1
     988:	21 e0       	ldi	r18, 0x01	; 1
     98a:	92 07       	cpc	r25, r18
     98c:	e9 f0       	breq	.+58     	; 0x9c8 <high_score_name_position+0x42>
     98e:	38 f4       	brcc	.+14     	; 0x99e <high_score_name_position+0x18>
     990:	80 3c       	cpi	r24, 0xC0	; 192
     992:	91 05       	cpc	r25, r1
     994:	91 f0       	breq	.+36     	; 0x9ba <high_score_name_position+0x34>
     996:	80 3e       	cpi	r24, 0xE0	; 224
     998:	91 05       	cpc	r25, r1
     99a:	61 f0       	breq	.+24     	; 0x9b4 <high_score_name_position+0x2e>
     99c:	11 c0       	rjmp	.+34     	; 0x9c0 <high_score_name_position+0x3a>
     99e:	80 32       	cpi	r24, 0x20	; 32
     9a0:	21 e0       	ldi	r18, 0x01	; 1
     9a2:	92 07       	cpc	r25, r18
     9a4:	21 f0       	breq	.+8      	; 0x9ae <high_score_name_position+0x28>
     9a6:	80 34       	cpi	r24, 0x40	; 64
     9a8:	91 40       	sbci	r25, 0x01	; 1
     9aa:	59 f0       	breq	.+22     	; 0x9c2 <high_score_name_position+0x3c>
     9ac:	09 c0       	rjmp	.+18     	; 0x9c0 <high_score_name_position+0x3a>
		case SCORE_FIVE: return NAME_FIVE; break; 
		case SCORE_FOUR: return NAME_FOUR; break;
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	08 95       	ret
		case SCORE_THREE: return NAME_THREE; break;
		case SCORE_TWO: return NAME_TWO; break;
     9b4:	80 e4       	ldi	r24, 0x40	; 64
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	08 95       	ret
		case SCORE_ONE: return NAME_ONE; break;
     9ba:	80 e2       	ldi	r24, 0x20	; 32
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	08 95       	ret
	}
}
     9c0:	08 95       	ret
uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
		case SCORE_FIVE: return NAME_FIVE; break; 
     9c2:	80 ea       	ldi	r24, 0xA0	; 160
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	08 95       	ret
		case SCORE_FOUR: return NAME_FOUR; break;
		case SCORE_THREE: return NAME_THREE; break;
     9c8:	80 e6       	ldi	r24, 0x60	; 96
     9ca:	90 e0       	ldi	r25, 0x00	; 0
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}
     9cc:	08 95       	ret

000009ce <move_place_down>:
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
	
	clear_terminal();
}

void move_place_down(uint16_t score_position, uint16_t name_position){
     9ce:	8f 92       	push	r8
     9d0:	9f 92       	push	r9
     9d2:	af 92       	push	r10
     9d4:	bf 92       	push	r11
     9d6:	df 92       	push	r13
     9d8:	ef 92       	push	r14
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
     9e4:	8c 01       	movw	r16, r24
     9e6:	eb 01       	movw	r28, r22
	uint32_t score = eeprom_read_dword(score_position); 
     9e8:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     9ec:	4b 01       	movw	r8, r22
     9ee:	5c 01       	movw	r10, r24
	uint8_t char1 = eeprom_read_byte(name_position);
     9f0:	ce 01       	movw	r24, r28
     9f2:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     9f6:	d8 2e       	mov	r13, r24
	uint8_t char2 = eeprom_read_byte(name_position+0x08);
     9f8:	ce 01       	movw	r24, r28
     9fa:	08 96       	adiw	r24, 0x08	; 8
     9fc:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     a00:	e8 2e       	mov	r14, r24
	uint8_t char3 = eeprom_read_byte(name_position+0x10);
     a02:	ce 01       	movw	r24, r28
     a04:	40 96       	adiw	r24, 0x10	; 16
     a06:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     a0a:	f8 2e       	mov	r15, r24
	eeprom_write_dword((score_position+0x20), score); 
     a0c:	b5 01       	movw	r22, r10
     a0e:	a4 01       	movw	r20, r8
     a10:	c8 01       	movw	r24, r16
     a12:	80 96       	adiw	r24, 0x20	; 32
     a14:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	eeprom_write_byte(name_position +0x20, char1);
     a18:	6d 2d       	mov	r22, r13
     a1a:	ce 01       	movw	r24, r28
     a1c:	80 96       	adiw	r24, 0x20	; 32
     a1e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	eeprom_write_byte(name_position +0x28, char2);
     a22:	6e 2d       	mov	r22, r14
     a24:	ce 01       	movw	r24, r28
     a26:	88 96       	adiw	r24, 0x28	; 40
     a28:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	eeprom_write_byte(name_position +0x30, char3);
     a2c:	6f 2d       	mov	r22, r15
     a2e:	ce 01       	movw	r24, r28
     a30:	c0 96       	adiw	r24, 0x30	; 48
     a32:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
}
     a36:	df 91       	pop	r29
     a38:	cf 91       	pop	r28
     a3a:	1f 91       	pop	r17
     a3c:	0f 91       	pop	r16
     a3e:	ff 90       	pop	r15
     a40:	ef 90       	pop	r14
     a42:	df 90       	pop	r13
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	08 95       	ret

00000a4e <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(SCORE_FOUR, NAME_FOUR); 
     a4e:	60 e8       	ldi	r22, 0x80	; 128
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e2       	ldi	r24, 0x20	; 32
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 e7 04 	call	0x9ce	; 0x9ce <move_place_down>
     a5a:	08 95       	ret

00000a5c <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     a5c:	0e 94 27 05 	call	0xa4e	; 0xa4e <move_four_place_down>
	move_place_down(SCORE_THREE, NAME_THREE);
     a60:	60 e6       	ldi	r22, 0x60	; 96
     a62:	70 e0       	ldi	r23, 0x00	; 0
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	0e 94 e7 04 	call	0x9ce	; 0x9ce <move_place_down>
     a6c:	08 95       	ret

00000a6e <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     a6e:	0e 94 2e 05 	call	0xa5c	; 0xa5c <move_three_place_down>
	move_place_down(SCORE_TWO, NAME_TWO);
     a72:	60 e4       	ldi	r22, 0x40	; 64
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	80 ee       	ldi	r24, 0xE0	; 224
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <move_place_down>
     a7e:	08 95       	ret

00000a80 <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     a80:	0e 94 37 05 	call	0xa6e	; 0xa6e <move_two_place_down>
	move_place_down(SCORE_ONE, NAME_ONE);
     a84:	60 e2       	ldi	r22, 0x20	; 32
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	80 ec       	ldi	r24, 0xC0	; 192
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <move_place_down>
     a90:	08 95       	ret

00000a92 <reset_name_at_memory_position>:
	reset_name_at_memory_position(NAME_FOUR);
	reset_name_at_memory_position(NAME_FIVE);
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
	}
	
void reset_name_at_memory_position(uint16_t mem_pos){
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	ec 01       	movw	r28, r24
	eeprom_write_byte(mem_pos, UNDERSCORE);
     a98:	6f e5       	ldi	r22, 0x5F	; 95
     a9a:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x08, UNDERSCORE);
     a9e:	6f e5       	ldi	r22, 0x5F	; 95
     aa0:	ce 01       	movw	r24, r28
     aa2:	08 96       	adiw	r24, 0x08	; 8
     aa4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
     aa8:	6f e5       	ldi	r22, 0x5F	; 95
     aaa:	ce 01       	movw	r24, r28
     aac:	40 96       	adiw	r24, 0x10	; 16
     aae:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	08 95       	ret

00000ab8 <initialise_EEPROM>:
	move_two_place_down();
	move_place_down(SCORE_ONE, NAME_ONE);
}

void initialise_EEPROM(void){
	eeprom_write_dword(SCORE_ONE, 0x00);
     ab8:	40 e0       	ldi	r20, 0x00	; 0
     aba:	50 e0       	ldi	r21, 0x00	; 0
     abc:	ba 01       	movw	r22, r20
     abe:	80 ec       	ldi	r24, 0xC0	; 192
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	eeprom_write_dword(SCORE_TWO, 0x00);
     ac6:	40 e0       	ldi	r20, 0x00	; 0
     ac8:	50 e0       	ldi	r21, 0x00	; 0
     aca:	ba 01       	movw	r22, r20
     acc:	80 ee       	ldi	r24, 0xE0	; 224
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	eeprom_write_dword(SCORE_THREE, 0x00);
     ad4:	40 e0       	ldi	r20, 0x00	; 0
     ad6:	50 e0       	ldi	r21, 0x00	; 0
     ad8:	ba 01       	movw	r22, r20
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	eeprom_write_dword(SCORE_FOUR, 0x00);
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	ba 01       	movw	r22, r20
     ae8:	80 e2       	ldi	r24, 0x20	; 32
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	eeprom_write_dword(SCORE_FIVE, 0x00);
     af0:	40 e0       	ldi	r20, 0x00	; 0
     af2:	50 e0       	ldi	r21, 0x00	; 0
     af4:	ba 01       	movw	r22, r20
     af6:	80 e4       	ldi	r24, 0x40	; 64
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	reset_name_at_memory_position(NAME_ONE);
     afe:	80 e2       	ldi	r24, 0x20	; 32
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	0e 94 49 05 	call	0xa92	; 0xa92 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_TWO);
     b06:	80 e4       	ldi	r24, 0x40	; 64
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 49 05 	call	0xa92	; 0xa92 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_THREE);
     b0e:	80 e6       	ldi	r24, 0x60	; 96
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 49 05 	call	0xa92	; 0xa92 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FOUR);
     b16:	80 e8       	ldi	r24, 0x80	; 128
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	0e 94 49 05 	call	0xa92	; 0xa92 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FIVE);
     b1e:	80 ea       	ldi	r24, 0xA0	; 160
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 49 05 	call	0xa92	; 0xa92 <reset_name_at_memory_position>
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     b26:	44 e3       	ldi	r20, 0x34	; 52
     b28:	52 e1       	ldi	r21, 0x12	; 18
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 e6       	ldi	r24, 0x60	; 96
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
     b36:	08 95       	ret

00000b38 <EEPROM_High_Score_has_been_initialised>:
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
}


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     b38:	80 e6       	ldi	r24, 0x60	; 96
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     b40:	21 e0       	ldi	r18, 0x01	; 1
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	64 33       	cpi	r22, 0x34	; 52
     b46:	72 41       	sbci	r23, 0x12	; 18
     b48:	81 05       	cpc	r24, r1
     b4a:	91 05       	cpc	r25, r1
     b4c:	11 f0       	breq	.+4      	; 0xb52 <EEPROM_High_Score_has_been_initialised+0x1a>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
}
     b52:	c9 01       	movw	r24, r18
     b54:	08 95       	ret

00000b56 <is_high_score>:
#include <avr/eeprom.h>
#include "terminalio.h"


static char current_high_score_name[4]; 
uint8_t is_high_score(void){
     b56:	cf 92       	push	r12
     b58:	df 92       	push	r13
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
     b5e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     b62:	6b 01       	movw	r12, r22
     b64:	7c 01       	movw	r14, r24
     b66:	80 e4       	ldi	r24, 0x40	; 64
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     b6e:	c6 16       	cp	r12, r22
     b70:	d7 06       	cpc	r13, r23
     b72:	e8 06       	cpc	r14, r24
     b74:	f9 06       	cpc	r15, r25
     b76:	40 f4       	brcc	.+16     	; 0xb88 <is_high_score+0x32>
     b78:	0e 94 9c 05 	call	0xb38	; 0xb38 <EEPROM_High_Score_has_been_initialised>
     b7c:	21 e0       	ldi	r18, 0x01	; 1
     b7e:	89 2b       	or	r24, r25
     b80:	09 f0       	breq	.+2      	; 0xb84 <is_high_score+0x2e>
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	82 2f       	mov	r24, r18
     b86:	01 c0       	rjmp	.+2      	; 0xb8a <is_high_score+0x34>
     b88:	81 e0       	ldi	r24, 0x01	; 1
}
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	08 95       	ret

00000b94 <high_score_position>:
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}

uint16_t high_score_position(void){
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     b9c:	0e 94 9c 05 	call	0xb38	; 0xb38 <EEPROM_High_Score_has_been_initialised>
     ba0:	89 2b       	or	r24, r25
     ba2:	09 f4       	brne	.+2      	; 0xba6 <high_score_position+0x12>
     ba4:	42 c0       	rjmp	.+132    	; 0xc2a <high_score_position+0x96>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     ba6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     baa:	6b 01       	movw	r12, r22
     bac:	7c 01       	movw	r14, r24
     bae:	80 ec       	ldi	r24, 0xC0	; 192
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     bb6:	6c 15       	cp	r22, r12
     bb8:	7d 05       	cpc	r23, r13
     bba:	8e 05       	cpc	r24, r14
     bbc:	9f 05       	cpc	r25, r15
     bbe:	c0 f1       	brcs	.+112    	; 0xc30 <high_score_position+0x9c>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     bc0:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     bc4:	6b 01       	movw	r12, r22
     bc6:	7c 01       	movw	r14, r24
     bc8:	80 ee       	ldi	r24, 0xE0	; 224
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     bd0:	6c 15       	cp	r22, r12
     bd2:	7d 05       	cpc	r23, r13
     bd4:	8e 05       	cpc	r24, r14
     bd6:	9f 05       	cpc	r25, r15
     bd8:	70 f1       	brcs	.+92     	; 0xc36 <high_score_position+0xa2>
		return SCORE_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     bda:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     bde:	6b 01       	movw	r12, r22
     be0:	7c 01       	movw	r14, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	91 e0       	ldi	r25, 0x01	; 1
     be6:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     bea:	6c 15       	cp	r22, r12
     bec:	7d 05       	cpc	r23, r13
     bee:	8e 05       	cpc	r24, r14
     bf0:	9f 05       	cpc	r25, r15
     bf2:	20 f1       	brcs	.+72     	; 0xc3c <high_score_position+0xa8>
		return SCORE_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     bf4:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	91 e0       	ldi	r25, 0x01	; 1
     c00:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     c04:	6c 15       	cp	r22, r12
     c06:	7d 05       	cpc	r23, r13
     c08:	8e 05       	cpc	r24, r14
     c0a:	9f 05       	cpc	r25, r15
     c0c:	d0 f0       	brcs	.+52     	; 0xc42 <high_score_position+0xae>
		return SCORE_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     c0e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     c12:	6b 01       	movw	r12, r22
     c14:	7c 01       	movw	r14, r24
     c16:	80 e4       	ldi	r24, 0x40	; 64
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     c1e:	6c 15       	cp	r22, r12
     c20:	7d 05       	cpc	r23, r13
     c22:	8e 05       	cpc	r24, r14
     c24:	9f 05       	cpc	r25, r15
     c26:	80 f0       	brcs	.+32     	; 0xc48 <high_score_position+0xb4>
		return SCORE_FIVE;
	}
}
     c28:	11 c0       	rjmp	.+34     	; 0xc4c <high_score_position+0xb8>
	}
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return SCORE_ONE;
     c2a:	80 ec       	ldi	r24, 0xC0	; 192
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	0e c0       	rjmp	.+28     	; 0xc4c <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return SCORE_ONE;
     c30:	80 ec       	ldi	r24, 0xC0	; 192
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	0b c0       	rjmp	.+22     	; 0xc4c <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return SCORE_TWO;
     c36:	80 ee       	ldi	r24, 0xE0	; 224
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	08 c0       	rjmp	.+16     	; 0xc4c <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return SCORE_THREE;
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	91 e0       	ldi	r25, 0x01	; 1
     c40:	05 c0       	rjmp	.+10     	; 0xc4c <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return SCORE_FOUR;
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
     c48:	80 e4       	ldi	r24, 0x40	; 64
     c4a:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     c4c:	ff 90       	pop	r15
     c4e:	ef 90       	pop	r14
     c50:	df 90       	pop	r13
     c52:	cf 90       	pop	r12
     c54:	08 95       	ret

00000c56 <handle_sequence_into_EEPFROM>:
				handle_sequence_into_EEPFROM();
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     c56:	cf 92       	push	r12
     c58:	df 92       	push	r13
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     c64:	44 e3       	ldi	r20, 0x34	; 52
     c66:	52 e1       	ldi	r21, 0x12	; 18
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	80 e6       	ldi	r24, 0x60	; 96
     c6e:	91 e0       	ldi	r25, 0x01	; 1
     c70:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	switch(high_score_position()){
     c74:	0e 94 ca 05 	call	0xb94	; 0xb94 <high_score_position>
     c78:	80 3e       	cpi	r24, 0xE0	; 224
     c7a:	91 05       	cpc	r25, r1
     c7c:	91 f0       	breq	.+36     	; 0xca2 <handle_sequence_into_EEPFROM+0x4c>
     c7e:	20 f4       	brcc	.+8      	; 0xc88 <handle_sequence_into_EEPFROM+0x32>
     c80:	80 3c       	cpi	r24, 0xC0	; 192
     c82:	91 05       	cpc	r25, r1
     c84:	89 f0       	breq	.+34     	; 0xca8 <handle_sequence_into_EEPFROM+0x52>
     c86:	12 c0       	rjmp	.+36     	; 0xcac <handle_sequence_into_EEPFROM+0x56>
     c88:	81 15       	cp	r24, r1
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	92 07       	cpc	r25, r18
     c8e:	31 f0       	breq	.+12     	; 0xc9c <handle_sequence_into_EEPFROM+0x46>
     c90:	80 32       	cpi	r24, 0x20	; 32
     c92:	91 40       	sbci	r25, 0x01	; 1
     c94:	59 f4       	brne	.+22     	; 0xcac <handle_sequence_into_EEPFROM+0x56>
		case SCORE_FOUR: move_four_place_down(); break; 
     c96:	0e 94 27 05 	call	0xa4e	; 0xa4e <move_four_place_down>
     c9a:	08 c0       	rjmp	.+16     	; 0xcac <handle_sequence_into_EEPFROM+0x56>
		case SCORE_THREE: move_three_place_down(); break; 
     c9c:	0e 94 2e 05 	call	0xa5c	; 0xa5c <move_three_place_down>
     ca0:	05 c0       	rjmp	.+10     	; 0xcac <handle_sequence_into_EEPFROM+0x56>
		case SCORE_TWO: move_two_place_down(); break;
     ca2:	0e 94 37 05 	call	0xa6e	; 0xa6e <move_two_place_down>
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <handle_sequence_into_EEPFROM+0x56>
		case SCORE_ONE: move_one_place_down(); break; 
     ca8:	0e 94 40 05 	call	0xa80	; 0xa80 <move_one_place_down>
	}
	
	eeprom_write_dword(high_score_position(), get_score());
     cac:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
     cb0:	6b 01       	movw	r12, r22
     cb2:	7c 01       	movw	r14, r24
     cb4:	0e 94 ca 05 	call	0xb94	; 0xb94 <high_score_position>
     cb8:	b7 01       	movw	r22, r14
     cba:	a6 01       	movw	r20, r12
     cbc:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <eeprom_write_dword>
	eeprom_write_byte(high_score_name_position(high_score_position()), current_high_score_name[0]);
     cc0:	cc ec       	ldi	r28, 0xCC	; 204
     cc2:	d2 e0       	ldi	r29, 0x02	; 2
     cc4:	18 81       	ld	r17, Y
     cc6:	0e 94 ca 05 	call	0xb94	; 0xb94 <high_score_position>
     cca:	0e 94 c3 04 	call	0x986	; 0x986 <high_score_name_position>
     cce:	61 2f       	mov	r22, r17
     cd0:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x08, current_high_score_name[1]);
     cd4:	19 81       	ldd	r17, Y+1	; 0x01
     cd6:	0e 94 ca 05 	call	0xb94	; 0xb94 <high_score_position>
     cda:	0e 94 c3 04 	call	0x986	; 0x986 <high_score_name_position>
     cde:	61 2f       	mov	r22, r17
     ce0:	08 96       	adiw	r24, 0x08	; 8
     ce2:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
     ce6:	ca 81       	ldd	r28, Y+2	; 0x02
     ce8:	0e 94 ca 05 	call	0xb94	; 0xb94 <high_score_position>
     cec:	0e 94 c3 04 	call	0x986	; 0x986 <high_score_name_position>
     cf0:	6c 2f       	mov	r22, r28
     cf2:	40 96       	adiw	r24, 0x10	; 16
     cf4:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
	
	clear_terminal();
     cf8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <clear_terminal>
}
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	1f 91       	pop	r17
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	df 90       	pop	r13
     d08:	cf 90       	pop	r12
     d0a:	08 95       	ret

00000d0c <set_high_score_name>:
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
	}
}

void set_high_score_name(void){
     d0c:	ef 92       	push	r14
     d0e:	ff 92       	push	r15
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	cf 93       	push	r28
     d16:	df 93       	push	r29
	move_cursor(10,8);
     d18:	68 e0       	ldi	r22, 0x08	; 8
     d1a:	8a e0       	ldi	r24, 0x0A	; 10
     d1c:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     d20:	84 ee       	ldi	r24, 0xE4	; 228
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	9f 93       	push	r25
     d26:	8f 93       	push	r24
     d28:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     d30:	00 e0       	ldi	r16, 0x00	; 0
     d32:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     d34:	0f 2e       	mov	r0, r31
     d36:	f1 e4       	ldi	r31, 0x41	; 65
     d38:	ef 2e       	mov	r14, r31
     d3a:	f4 e0       	ldi	r31, 0x04	; 4
     d3c:	ff 2e       	mov	r15, r31
     d3e:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     d40:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     d44:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <serial_input_available>
     d48:	88 23       	and	r24, r24
     d4a:	d1 f3       	breq	.-12     	; 0xd40 <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     d4c:	f7 01       	movw	r30, r14
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <fgetc>
     d56:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     d58:	98 2f       	mov	r25, r24
     d5a:	91 54       	subi	r25, 0x41	; 65
     d5c:	9a 33       	cpi	r25, 0x3A	; 58
     d5e:	98 f4       	brcc	.+38     	; 0xd86 <set_high_score_name+0x7a>
     d60:	03 30       	cpi	r16, 0x03	; 3
     d62:	11 05       	cpc	r17, r1
     d64:	84 f4       	brge	.+32     	; 0xd86 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     d66:	69 e0       	ldi	r22, 0x09	; 9
     d68:	8a e0       	ldi	r24, 0x0A	; 10
     d6a:	80 0f       	add	r24, r16
     d6c:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     d70:	f8 01       	movw	r30, r16
     d72:	e4 53       	subi	r30, 0x34	; 52
     d74:	fd 4f       	sbci	r31, 0xFD	; 253
     d76:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     d78:	ce 01       	movw	r24, r28
     d7a:	99 27       	eor	r25, r25
     d7c:	0e 94 09 16 	call	0x2c12	; 0x2c12 <putchar>
				score_name_pointer++;
     d80:	0f 5f       	subi	r16, 0xFF	; 255
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	dd cf       	rjmp	.-70     	; 0xd40 <set_high_score_name+0x34>
			}else if(serial_input =='\n'){
     d86:	8a 30       	cpi	r24, 0x0A	; 10
     d88:	89 f0       	breq	.+34     	; 0xdac <set_high_score_name+0xa0>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     d8a:	8f 37       	cpi	r24, 0x7F	; 127
     d8c:	c9 f6       	brne	.-78     	; 0xd40 <set_high_score_name+0x34>
				printf("%c", ' ');
     d8e:	80 e2       	ldi	r24, 0x20	; 32
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 09 16 	call	0x2c12	; 0x2c12 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     d96:	10 16       	cp	r1, r16
     d98:	11 06       	cpc	r1, r17
     d9a:	14 f4       	brge	.+4      	; 0xda0 <set_high_score_name+0x94>
     d9c:	01 50       	subi	r16, 0x01	; 1
     d9e:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     da0:	69 e0       	ldi	r22, 0x09	; 9
     da2:	8a e0       	ldi	r24, 0x0A	; 10
     da4:	80 0f       	add	r24, r16
     da6:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
     daa:	ca cf       	rjmp	.-108    	; 0xd40 <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     dac:	f9 99       	sbic	0x1f, 1	; 31
     dae:	fe cf       	rjmp	.-4      	; 0xdac <set_high_score_name+0xa0>
				handle_sequence_into_EEPFROM();
     db0:	0e 94 2b 06 	call	0xc56	; 0xc56 <handle_sequence_into_EEPFROM>
				break; 
			}
		}
	}
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	ff 90       	pop	r15
     dbe:	ef 90       	pop	r14
     dc0:	08 95       	ret

00000dc2 <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
	move_cursor(10,11);
     dce:	6b e0       	ldi	r22, 0x0B	; 11
     dd0:	8a e0       	ldi	r24, 0x0A	; 10
     dd2:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     dd6:	8c e7       	ldi	r24, 0x7C	; 124
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	9f 93       	push	r25
     ddc:	8f 93       	push	r24
     dde:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
	move_cursor(10,13);
     de2:	6d e0       	ldi	r22, 0x0D	; 13
     de4:	8a e0       	ldi	r24, 0x0A	; 10
     de6:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     dea:	0e 94 9c 05 	call	0xb38	; 0xb38 <EEPROM_High_Score_has_been_initialised>
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	89 2b       	or	r24, r25
     df4:	09 f4       	brne	.+2      	; 0xdf8 <display_EEPROM_high_score+0x36>
     df6:	df c0       	rjmp	.+446    	; 0xfb6 <display_EEPROM_high_score+0x1f4>

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     df8:	80 ec       	ldi	r24, 0xC0	; 192
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     e00:	16 2f       	mov	r17, r22
     e02:	07 2f       	mov	r16, r23
     e04:	f8 2e       	mov	r15, r24
     e06:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
     e08:	80 e3       	ldi	r24, 0x30	; 48
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     e10:	d8 2f       	mov	r29, r24
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
									eeprom_read_byte(NAME_ONE+0x08), 
     e12:	88 e2       	ldi	r24, 0x28	; 40
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     e1a:	c8 2f       	mov	r28, r24
	printf_P(PSTR("###HIGH SCORES###"));
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     e24:	ef 92       	push	r14
     e26:	ff 92       	push	r15
     e28:	0f 93       	push	r16
     e2a:	1f 93       	push	r17
     e2c:	1f 92       	push	r1
     e2e:	df 93       	push	r29
     e30:	1f 92       	push	r1
     e32:	cf 93       	push	r28
     e34:	1f 92       	push	r1
     e36:	8f 93       	push	r24
     e38:	8d e1       	ldi	r24, 0x1D	; 29
     e3a:	92 e0       	ldi	r25, 0x02	; 2
     e3c:	9f 93       	push	r25
     e3e:	8f 93       	push	r24
     e40:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
     e44:	6e e0       	ldi	r22, 0x0E	; 14
     e46:	8a e0       	ldi	r24, 0x0A	; 10
     e48:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     e4c:	80 ee       	ldi	r24, 0xE0	; 224
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     e54:	16 2f       	mov	r17, r22
     e56:	07 2f       	mov	r16, r23
     e58:	f8 2e       	mov	r15, r24
     e5a:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
     e5c:	80 e5       	ldi	r24, 0x50	; 80
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     e64:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
									eeprom_read_byte(NAME_TWO+0x08),
     e66:	88 e4       	ldi	r24, 0x48	; 72
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     e6e:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     e70:	80 e4       	ldi	r24, 0x40	; 64
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     e78:	ef 92       	push	r14
     e7a:	ff 92       	push	r15
     e7c:	0f 93       	push	r16
     e7e:	1f 93       	push	r17
     e80:	1f 92       	push	r1
     e82:	df 93       	push	r29
     e84:	1f 92       	push	r1
     e86:	cf 93       	push	r28
     e88:	1f 92       	push	r1
     e8a:	8f 93       	push	r24
     e8c:	8e e2       	ldi	r24, 0x2E	; 46
     e8e:	92 e0       	ldi	r25, 0x02	; 2
     e90:	9f 93       	push	r25
     e92:	8f 93       	push	r24
     e94:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);
     e98:	6f e0       	ldi	r22, 0x0F	; 15
     e9a:	8a e0       	ldi	r24, 0x0A	; 10
     e9c:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     ea8:	16 2f       	mov	r17, r22
     eaa:	07 2f       	mov	r16, r23
     eac:	f8 2e       	mov	r15, r24
     eae:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
     eb0:	80 e7       	ldi	r24, 0x70	; 112
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     eb8:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
									eeprom_read_byte(NAME_THREE +8),
     eba:	88 e6       	ldi	r24, 0x68	; 104
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     ec2:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     ec4:	80 e6       	ldi	r24, 0x60	; 96
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     ecc:	ef 92       	push	r14
     ece:	ff 92       	push	r15
     ed0:	0f 93       	push	r16
     ed2:	1f 93       	push	r17
     ed4:	1f 92       	push	r1
     ed6:	df 93       	push	r29
     ed8:	1f 92       	push	r1
     eda:	cf 93       	push	r28
     edc:	1f 92       	push	r1
     ede:	8f 93       	push	r24
     ee0:	80 e4       	ldi	r24, 0x40	; 64
     ee2:	92 e0       	ldi	r25, 0x02	; 2
     ee4:	9f 93       	push	r25
     ee6:	8f 93       	push	r24
     ee8:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);
     eec:	8d b7       	in	r24, 0x3d	; 61
     eee:	9e b7       	in	r25, 0x3e	; 62
     ef0:	84 96       	adiw	r24, 0x24	; 36
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	9e bf       	out	0x3e, r25	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	8d bf       	out	0x3d, r24	; 61
     efc:	60 e1       	ldi	r22, 0x10	; 16
     efe:	8a e0       	ldi	r24, 0x0A	; 10
     f00:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     f04:	80 e2       	ldi	r24, 0x20	; 32
     f06:	91 e0       	ldi	r25, 0x01	; 1
     f08:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     f0c:	16 2f       	mov	r17, r22
     f0e:	07 2f       	mov	r16, r23
     f10:	f8 2e       	mov	r15, r24
     f12:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
     f14:	80 e9       	ldi	r24, 0x90	; 144
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     f1c:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
									eeprom_read_byte(NAME_FOUR+8),
     f1e:	88 e8       	ldi	r24, 0x88	; 136
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     f26:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     f28:	80 e8       	ldi	r24, 0x80	; 128
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	1f 92       	push	r1
     f3a:	df 93       	push	r29
     f3c:	1f 92       	push	r1
     f3e:	cf 93       	push	r28
     f40:	1f 92       	push	r1
     f42:	8f 93       	push	r24
     f44:	81 e5       	ldi	r24, 0x51	; 81
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	9f 93       	push	r25
     f4a:	8f 93       	push	r24
     f4c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);
     f50:	61 e1       	ldi	r22, 0x11	; 17
     f52:	8a e0       	ldi	r24, 0x0A	; 10
     f54:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     f58:	80 e4       	ldi	r24, 0x40	; 64
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	0e 94 d9 18 	call	0x31b2	; 0x31b2 <eeprom_read_dword>
     f60:	16 2f       	mov	r17, r22
     f62:	07 2f       	mov	r16, r23
     f64:	f8 2e       	mov	r15, r24
     f66:	e9 2e       	mov	r14, r25
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
     f68:	80 eb       	ldi	r24, 0xB0	; 176
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     f70:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
								eeprom_read_byte(NAME_FIVE+8),
     f72:	88 ea       	ldi	r24, 0xA8	; 168
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     f7a:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     f7c:	80 ea       	ldi	r24, 0xA0	; 160
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <eeprom_read_byte>
     f84:	ef 92       	push	r14
     f86:	ff 92       	push	r15
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	1f 92       	push	r1
     f8e:	df 93       	push	r29
     f90:	1f 92       	push	r1
     f92:	cf 93       	push	r28
     f94:	1f 92       	push	r1
     f96:	8f 93       	push	r24
     f98:	83 e6       	ldi	r24, 0x63	; 99
     f9a:	92 e0       	ldi	r25, 0x02	; 2
     f9c:	9f 93       	push	r25
     f9e:	8f 93       	push	r24
     fa0:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
     fa4:	8d b7       	in	r24, 0x3d	; 61
     fa6:	9e b7       	in	r25, 0x3e	; 62
     fa8:	48 96       	adiw	r24, 0x18	; 24
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	9e bf       	out	0x3e, r25	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	8d bf       	out	0x3d, r24	; 61
     fb4:	0a c0       	rjmp	.+20     	; 0xfca <display_EEPROM_high_score+0x208>
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
								eeprom_read_dword(SCORE_FIVE));
	}
	else{
		initialise_EEPROM();
     fb6:	0e 94 5c 05 	call	0xab8	; 0xab8 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     fba:	83 e7       	ldi	r24, 0x73	; 115
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
	}

}
     fca:	df 91       	pop	r29
     fcc:	cf 91       	pop	r28
     fce:	1f 91       	pop	r17
     fd0:	0f 91       	pop	r16
     fd2:	ff 90       	pop	r15
     fd4:	ef 90       	pop	r14
     fd6:	08 95       	ret

00000fd8 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     fd8:	10 92 21 03 	sts	0x0321, r1	; 0x800321 <numFoodItems>
     fdc:	08 95       	ret

00000fde <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     fde:	30 91 21 03 	lds	r19, 0x0321	; 0x800321 <numFoodItems>
     fe2:	13 16       	cp	r1, r19
     fe4:	84 f4       	brge	.+32     	; 0x1006 <food_at+0x28>
        if(foodPositions[id] == posn) {
     fe6:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <foodPositions>
     fea:	89 17       	cp	r24, r25
     fec:	71 f0       	breq	.+28     	; 0x100a <food_at+0x2c>
     fee:	e3 e2       	ldi	r30, 0x23	; 35
     ff0:	f3 e0       	ldi	r31, 0x03	; 3
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	03 c0       	rjmp	.+6      	; 0xffc <food_at+0x1e>
     ff6:	21 91       	ld	r18, Z+
     ff8:	28 17       	cp	r18, r24
     ffa:	49 f0       	breq	.+18     	; 0x100e <food_at+0x30>
     ffc:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     ffe:	39 13       	cpse	r19, r25
    1000:	fa cf       	rjmp	.-12     	; 0xff6 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	08 95       	ret
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	08 95       	ret
    100e:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
    1010:	08 95       	ret

00001012 <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
    1012:	0e 94 ef 07 	call	0xfde	; 0xfde <food_at>
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	8f 3f       	cpi	r24, 0xFF	; 255
    101a:	09 f4       	brne	.+2      	; 0x101e <is_food_at+0xc>
    101c:	90 e0       	ldi	r25, 0x00	; 0
}
    101e:	89 2f       	mov	r24, r25
    1020:	08 95       	ret

00001022 <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
    102c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <numFoodItems>
    1030:	88 30       	cpi	r24, 0x08	; 8
    1032:	0c f0       	brlt	.+2      	; 0x1036 <add_food_item+0x14>
    1034:	44 c0       	rjmp	.+136    	; 0x10be <add_food_item+0x9c>
    1036:	00 e0       	ldi	r16, 0x00	; 0
    1038:	10 e0       	ldi	r17, 0x00	; 0
    103a:	d0 e0       	ldi	r29, 0x00	; 0
    103c:	c0 e0       	ldi	r28, 0x00	; 0
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <add_food_item+0x22>
    1040:	0f 5f       	subi	r16, 0xFF	; 255
    1042:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
    1044:	2c 2f       	mov	r18, r28
    1046:	cc 0f       	add	r28, r28
    1048:	33 0b       	sbc	r19, r19
    104a:	2d 5f       	subi	r18, 0xFD	; 253
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	20 0f       	add	r18, r16
    1050:	31 1f       	adc	r19, r17
    1052:	2f 70       	andi	r18, 0x0F	; 15
    1054:	30 78       	andi	r19, 0x80	; 128
    1056:	33 23       	and	r19, r19
    1058:	34 f4       	brge	.+12     	; 0x1066 <add_food_item+0x44>
    105a:	21 50       	subi	r18, 0x01	; 1
    105c:	31 09       	sbc	r19, r1
    105e:	20 6f       	ori	r18, 0xF0	; 240
    1060:	3f 6f       	ori	r19, 0xFF	; 255
    1062:	2f 5f       	subi	r18, 0xFF	; 255
    1064:	3f 4f       	sbci	r19, 0xFF	; 255
    1066:	82 2f       	mov	r24, r18
    1068:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
    106a:	6d 2f       	mov	r22, r29
    106c:	dd 0f       	add	r29, r29
    106e:	77 0b       	sbc	r23, r23
    1070:	6b 5f       	subi	r22, 0xFB	; 251
    1072:	7f 4f       	sbci	r23, 0xFF	; 255
    1074:	67 70       	andi	r22, 0x07	; 7
    1076:	70 78       	andi	r23, 0x80	; 128
    1078:	77 23       	and	r23, r23
    107a:	34 f4       	brge	.+12     	; 0x1088 <add_food_item+0x66>
    107c:	61 50       	subi	r22, 0x01	; 1
    107e:	71 09       	sbc	r23, r1
    1080:	68 6f       	ori	r22, 0xF8	; 248
    1082:	7f 6f       	ori	r23, 0xFF	; 255
    1084:	6f 5f       	subi	r22, 0xFF	; 255
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
    108a:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    108e:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1090:	03 36       	cpi	r16, 0x63	; 99
    1092:	11 05       	cpc	r17, r1
    1094:	b1 f0       	breq	.+44     	; 0x10c2 <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
    1096:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
    109a:	81 11       	cpse	r24, r1
    109c:	d1 cf       	rjmp	.-94     	; 0x1040 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
    109e:	8f 2d       	mov	r24, r15
    10a0:	0e 94 09 08 	call	0x1012	; 0x1012 <is_food_at>
    10a4:	81 11       	cpse	r24, r1
    10a6:	cc cf       	rjmp	.-104    	; 0x1040 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
    10a8:	8f 2d       	mov	r24, r15
    10aa:	0e 94 44 11 	call	0x2288	; 0x2288 <is_superfood_at>
    10ae:	81 11       	cpse	r24, r1
    10b0:	c7 cf       	rjmp	.-114    	; 0x1040 <add_food_item+0x1e>
    10b2:	8f 2d       	mov	r24, r15
    10b4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <is_rat_at>
    10b8:	81 11       	cpse	r24, r1
    10ba:	c2 cf       	rjmp	.-124    	; 0x1040 <add_food_item+0x1e>
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
    10be:	88 e0       	ldi	r24, 0x08	; 8
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
    10c2:	88 e0       	ldi	r24, 0x08	; 8
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
    10c6:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <numFoodItems>
	foodPositions[newFoodID] = test_position;
    10ca:	e8 2f       	mov	r30, r24
    10cc:	08 2e       	mov	r0, r24
    10ce:	00 0c       	add	r0, r0
    10d0:	ff 0b       	sbc	r31, r31
    10d2:	ee 5d       	subi	r30, 0xDE	; 222
    10d4:	fc 4f       	sbci	r31, 0xFC	; 252
    10d6:	f0 82       	st	Z, r15
	numFoodItems++;
    10d8:	8f 5f       	subi	r24, 0xFF	; 255
    10da:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
    10de:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	08 95       	ret

000010ec <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
    10ec:	e8 2f       	mov	r30, r24
    10ee:	88 0f       	add	r24, r24
    10f0:	ff 0b       	sbc	r31, r31
    10f2:	ee 5d       	subi	r30, 0xDE	; 222
    10f4:	fc 4f       	sbci	r31, 0xFC	; 252
}
    10f6:	80 81       	ld	r24, Z
    10f8:	08 95       	ret

000010fa <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
    10fa:	88 23       	and	r24, r24
    10fc:	b4 f0       	brlt	.+44     	; 0x112a <remove_food+0x30>
    10fe:	20 91 21 03 	lds	r18, 0x0321	; 0x800321 <numFoodItems>
    1102:	82 17       	cp	r24, r18
    1104:	94 f4       	brge	.+36     	; 0x112a <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    1106:	8f 5f       	subi	r24, 0xFF	; 255
    1108:	82 17       	cp	r24, r18
    110a:	64 f4       	brge	.+24     	; 0x1124 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
    110c:	e8 2f       	mov	r30, r24
    110e:	08 2e       	mov	r0, r24
    1110:	00 0c       	add	r0, r0
    1112:	ff 0b       	sbc	r31, r31
    1114:	ee 5d       	subi	r30, 0xDE	; 222
    1116:	fc 4f       	sbci	r31, 0xFC	; 252
    1118:	90 81       	ld	r25, Z
    111a:	31 97       	sbiw	r30, 0x01	; 1
    111c:	90 83       	st	Z, r25
    111e:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    1120:	82 17       	cp	r24, r18
    1122:	a4 f3       	brlt	.-24     	; 0x110c <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
    1124:	21 50       	subi	r18, 0x01	; 1
    1126:	20 93 21 03 	sts	0x0321, r18	; 0x800321 <numFoodItems>
    112a:	08 95       	ret

0000112c <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
    112c:	1f 93       	push	r17
    112e:	cf 93       	push	r28
    1130:	df 93       	push	r29
    1132:	c8 2f       	mov	r28, r24
    1134:	16 2f       	mov	r17, r22
    1136:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    113a:	d8 2f       	mov	r29, r24
    113c:	8c 2f       	mov	r24, r28
    113e:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    1142:	41 2f       	mov	r20, r17
    1144:	6d 2f       	mov	r22, r29
    1146:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ledmatrix_update_pixel>
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	08 95       	ret

00001152 <init_game>:
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	0e 94 af 09 	call	0x135e	; 0x135e <ledmatrix_clear>
    115a:	0e 94 1d 12 	call	0x243a	; 0x243a <init_score_on_terminal>
    115e:	88 e5       	ldi	r24, 0x58	; 88
    1160:	92 e0       	ldi	r25, 0x02	; 2
    1162:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1166:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    116a:	0e 94 a3 0c 	call	0x1946	; 0x1946 <add_new_rat_position>
    116e:	0e 94 0a 13 	call	0x2614	; 0x2614 <initialise_timer_one>
    1172:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
    1176:	0e 94 67 0f 	call	0x1ece	; 0x1ece <init_snake>
    117a:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <get_snake_head_position>
    117e:	6f e0       	ldi	r22, 0x0F	; 15
    1180:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    1184:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <get_snake_tail_position>
    1188:	60 ef       	ldi	r22, 0xF0	; 240
    118a:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    118e:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <init_food>
    1192:	c3 e0       	ldi	r28, 0x03	; 3
    1194:	0e 94 11 08 	call	0x1022	; 0x1022 <add_food_item>
    1198:	d8 2f       	mov	r29, r24
    119a:	0e 94 b8 09 	call	0x1370	; 0x1370 <is_position_valid>
    119e:	88 23       	and	r24, r24
    11a0:	21 f0       	breq	.+8      	; 0x11aa <init_game+0x58>
    11a2:	63 e3       	ldi	r22, 0x33	; 51
    11a4:	8d 2f       	mov	r24, r29
    11a6:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    11aa:	c1 50       	subi	r28, 0x01	; 1
    11ac:	99 f7       	brne	.-26     	; 0x1194 <init_game+0x42>
    11ae:	df 91       	pop	r29
    11b0:	cf 91       	pop	r28
    11b2:	08 95       	ret

000011b4 <increase_game_speed>:
    11b4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    11b8:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    11bc:	8b 3f       	cpi	r24, 0xFB	; 251
    11be:	91 05       	cpc	r25, r1
    11c0:	a4 f0       	brlt	.+40     	; 0x11ea <increase_game_speed+0x36>
    11c2:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
    11c6:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 55 13 	call	0x26aa	; 0x26aa <__floatunsisf>
    11d2:	26 e6       	ldi	r18, 0x66	; 102
    11d4:	36 e6       	ldi	r19, 0x66	; 102
    11d6:	46 e6       	ldi	r20, 0x66	; 102
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 bb 13 	call	0x2776	; 0x2776 <__mulsf3>
    11de:	0e 94 26 13 	call	0x264c	; 0x264c <__fixunssfsi>
    11e2:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
    11e6:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
    11ea:	08 95       	ret

000011ec <attempt_to_move_snake_forward>:
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <get_snake_head_position>
    11f8:	d8 2f       	mov	r29, r24
    11fa:	0e 94 18 10 	call	0x2030	; 0x2030 <advance_snake_head>
    11fe:	c8 2f       	mov	r28, r24
    1200:	88 23       	and	r24, r24
    1202:	0c f4       	brge	.+2      	; 0x1206 <attempt_to_move_snake_forward+0x1a>
    1204:	55 c0       	rjmp	.+170    	; 0x12b0 <attempt_to_move_snake_forward+0xc4>
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <add_to_score>
    120e:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <get_snake_head_position>
    1212:	18 2f       	mov	r17, r24
    1214:	8e ef       	ldi	r24, 0xFE	; 254
    1216:	8c 0f       	add	r24, r28
    1218:	82 30       	cpi	r24, 0x02	; 2
    121a:	c0 f4       	brcc	.+48     	; 0x124c <attempt_to_move_snake_forward+0x60>
    121c:	81 2f       	mov	r24, r17
    121e:	0e 94 ef 07 	call	0xfde	; 0xfde <food_at>
    1222:	0e 94 7d 08 	call	0x10fa	; 0x10fa <remove_food>
    1226:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <add_to_score>
    1232:	0e 94 da 08 	call	0x11b4	; 0x11b4 <increase_game_speed>
    1236:	0e 94 11 08 	call	0x1022	; 0x1022 <add_food_item>
    123a:	08 2f       	mov	r16, r24
    123c:	0e 94 b8 09 	call	0x1370	; 0x1370 <is_position_valid>
    1240:	88 23       	and	r24, r24
    1242:	21 f0       	breq	.+8      	; 0x124c <attempt_to_move_snake_forward+0x60>
    1244:	63 e3       	ldi	r22, 0x33	; 51
    1246:	80 2f       	mov	r24, r16
    1248:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    124c:	8c ef       	ldi	r24, 0xFC	; 252
    124e:	8c 0f       	add	r24, r28
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	50 f4       	brcc	.+20     	; 0x1268 <attempt_to_move_snake_forward+0x7c>
    1254:	0e 94 38 11 	call	0x2270	; 0x2270 <eat_superfood_from_board>
    1258:	89 e0       	ldi	r24, 0x09	; 9
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <add_to_score>
    1260:	0e 94 da 08 	call	0x11b4	; 0x11b4 <increase_game_speed>
    1264:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    1268:	8a ef       	ldi	r24, 0xFA	; 250
    126a:	8c 0f       	add	r24, r28
    126c:	82 30       	cpi	r24, 0x02	; 2
    126e:	50 f4       	brcc	.+20     	; 0x1284 <attempt_to_move_snake_forward+0x98>
    1270:	0e 94 a3 0c 	call	0x1946	; 0x1946 <add_new_rat_position>
    1274:	84 e0       	ldi	r24, 0x04	; 4
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <add_to_score>
    127c:	0e 94 da 08 	call	0x11b4	; 0x11b4 <increase_game_speed>
    1280:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    1284:	cd 7f       	andi	r28, 0xFD	; 253
    1286:	c1 30       	cpi	r28, 0x01	; 1
    1288:	11 f0       	breq	.+4      	; 0x128e <attempt_to_move_snake_forward+0xa2>
    128a:	c5 30       	cpi	r28, 0x05	; 5
    128c:	29 f4       	brne	.+10     	; 0x1298 <attempt_to_move_snake_forward+0xac>
    128e:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <advance_snake_tail>
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    1298:	60 ef       	ldi	r22, 0xF0	; 240
    129a:	8d 2f       	mov	r24, r29
    129c:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    12a0:	6f e0       	ldi	r22, 0x0F	; 15
    12a2:	81 2f       	mov	r24, r17
    12a4:	0e 94 96 08 	call	0x112c	; 0x112c <update_display_at_position>
    12a8:	0e 94 46 12 	call	0x248c	; 0x248c <update_terminal_score>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	01 c0       	rjmp	.+2      	; 0x12b2 <attempt_to_move_snake_forward+0xc6>
    12b0:	80 e0       	ldi	r24, 0x00	; 0
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	08 95       	ret

000012bc <get_current_game_speed>:
    12bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    12c0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    12c4:	08 95       	ret

000012c6 <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    12c6:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    12ca:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    12ce:	08 95       	ret

000012d0 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	0e 94 c3 10 	call	0x2186	; 0x2186 <spi_setup_master>
    12d6:	08 95       	ret

000012d8 <ledmatrix_update_pixel>:
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	80 31       	cpi	r24, 0x10	; 16
    12e0:	b0 f4       	brcc	.+44     	; 0x130e <ledmatrix_update_pixel+0x36>
    12e2:	68 30       	cpi	r22, 0x08	; 8
    12e4:	a0 f4       	brcc	.+40     	; 0x130e <ledmatrix_update_pixel+0x36>
    12e6:	14 2f       	mov	r17, r20
    12e8:	c6 2f       	mov	r28, r22
    12ea:	d8 2f       	mov	r29, r24
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    12f2:	6c 2f       	mov	r22, r28
    12f4:	67 70       	andi	r22, 0x07	; 7
    12f6:	80 e1       	ldi	r24, 0x10	; 16
    12f8:	68 9f       	mul	r22, r24
    12fa:	90 01       	movw	r18, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	8d 2f       	mov	r24, r29
    1300:	8f 70       	andi	r24, 0x0F	; 15
    1302:	82 2b       	or	r24, r18
    1304:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    1308:	81 2f       	mov	r24, r17
    130a:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	1f 91       	pop	r17
    1314:	08 95       	ret

00001316 <ledmatrix_update_column>:
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
    131e:	80 31       	cpi	r24, 0x10	; 16
    1320:	90 f4       	brcc	.+36     	; 0x1346 <ledmatrix_update_column+0x30>
    1322:	8b 01       	movw	r16, r22
    1324:	c8 2f       	mov	r28, r24
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    132c:	8c 2f       	mov	r24, r28
    132e:	8f 70       	andi	r24, 0x0F	; 15
    1330:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    1334:	e8 01       	movw	r28, r16
    1336:	08 5f       	subi	r16, 0xF8	; 248
    1338:	1f 4f       	sbci	r17, 0xFF	; 255
    133a:	89 91       	ld	r24, Y+
    133c:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    1340:	c0 17       	cp	r28, r16
    1342:	d1 07       	cpc	r29, r17
    1344:	d1 f7       	brne	.-12     	; 0x133a <ledmatrix_update_column+0x24>
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	08 95       	ret

00001350 <ledmatrix_shift_display_left>:
    1350:	84 e0       	ldi	r24, 0x04	; 4
    1352:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    135c:	08 95       	ret

0000135e <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    135e:	8f e0       	ldi	r24, 0x0F	; 15
    1360:	0e 94 eb 10 	call	0x21d6	; 0x21d6 <spi_send_byte>
    1364:	08 95       	ret

00001366 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    1366:	82 95       	swap	r24
    1368:	8f 70       	andi	r24, 0x0F	; 15
    136a:	08 95       	ret

0000136c <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    136c:	8f 70       	andi	r24, 0x0F	; 15
    136e:	08 95       	ret

00001370 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    1370:	83 fb       	bst	r24, 3
    1372:	88 27       	eor	r24, r24
    1374:	80 f9       	bld	r24, 0
}
    1376:	91 e0       	ldi	r25, 0x01	; 1
    1378:	89 27       	eor	r24, r25
    137a:	08 95       	ret

0000137c <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    137c:	20 e1       	ldi	r18, 0x10	; 16
    137e:	82 9f       	mul	r24, r18
    1380:	c0 01       	movw	r24, r0
    1382:	11 24       	eor	r1, r1
    1384:	67 70       	andi	r22, 0x07	; 7
}
    1386:	86 2b       	or	r24, r22
    1388:	08 95       	ret

0000138a <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    138a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    138e:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	7b e4       	ldi	r23, 0x4B	; 75
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 7f 0e 	call	0x1cfe	; 0x1cfe <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    13a0:	0e 94 5f 12 	call	0x24be	; 0x24be <init_timer0>
	
	// Turn on global interrupts
	sei();
    13a4:	78 94       	sei
    13a6:	08 95       	ret

000013a8 <splash_screen>:
}

void splash_screen(void) {
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	0e 94 dd 11 	call	0x23ba	; 0x23ba <set_display_attribute>
	clear_terminal();
    13b8:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    13bc:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <hide_cursor>
	display_start_terminal_screen();
    13c0:	0e 94 fc 11 	call	0x23f8	; 0x23f8 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    13c4:	0e 94 af 09 	call	0x135e	; 0x135e <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    13c8:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    13ca:	0f 2e       	mov	r0, r31
    13cc:	ff e0       	ldi	r31, 0x0F	; 15
    13ce:	ff 2e       	mov	r15, r31
    13d0:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    13d2:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    13d4:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    13d6:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    13d8:	6c 2f       	mov	r22, r28
    13da:	85 e9       	ldi	r24, 0x95	; 149
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    13e2:	0d c0       	rjmp	.+26     	; 0x13fe <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13e4:	2f e7       	ldi	r18, 0x7F	; 127
    13e6:	8c e2       	ldi	r24, 0x2C	; 44
    13e8:	93 e0       	ldi	r25, 0x03	; 3
    13ea:	21 50       	subi	r18, 0x01	; 1
    13ec:	80 40       	sbci	r24, 0x00	; 0
    13ee:	90 40       	sbci	r25, 0x00	; 0
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <splash_screen+0x42>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <splash_screen+0x4c>
    13f4:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    13f6:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    13fa:	8f 3f       	cpi	r24, 0xFF	; 255
    13fc:	a9 f5       	brne	.+106    	; 0x1468 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    13fe:	0e 94 57 0d 	call	0x1aae	; 0x1aae <scroll_display>
    1402:	81 11       	cpse	r24, r1
    1404:	ef cf       	rjmp	.-34     	; 0x13e4 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    1406:	0e 94 38 15 	call	0x2a70	; 0x2a70 <random>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	83 70       	andi	r24, 0x03	; 3
    1410:	99 27       	eor	r25, r25
    1412:	aa 27       	eor	r26, r26
    1414:	b0 78       	andi	r27, 0x80	; 128
    1416:	bb 23       	and	r27, r27
    1418:	54 f4       	brge	.+20     	; 0x142e <splash_screen+0x86>
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	a1 09       	sbc	r26, r1
    141e:	b1 09       	sbc	r27, r1
    1420:	8c 6f       	ori	r24, 0xFC	; 252
    1422:	9f 6f       	ori	r25, 0xFF	; 255
    1424:	af 6f       	ori	r26, 0xFF	; 255
    1426:	bf 6f       	ori	r27, 0xFF	; 255
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	a1 1d       	adc	r26, r1
    142c:	b1 1d       	adc	r27, r1
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	91 05       	cpc	r25, r1
    1432:	a1 05       	cpc	r26, r1
    1434:	b1 05       	cpc	r27, r1
    1436:	91 f0       	breq	.+36     	; 0x145c <splash_screen+0xb4>
    1438:	2c f4       	brge	.+10     	; 0x1444 <splash_screen+0x9c>
    143a:	89 2b       	or	r24, r25
    143c:	8a 2b       	or	r24, r26
    143e:	8b 2b       	or	r24, r27
    1440:	59 f0       	breq	.+22     	; 0x1458 <splash_screen+0xb0>
    1442:	ca cf       	rjmp	.-108    	; 0x13d8 <splash_screen+0x30>
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	91 05       	cpc	r25, r1
    1448:	a1 05       	cpc	r26, r1
    144a:	b1 05       	cpc	r27, r1
    144c:	49 f0       	breq	.+18     	; 0x1460 <splash_screen+0xb8>
    144e:	03 97       	sbiw	r24, 0x03	; 3
    1450:	a1 05       	cpc	r26, r1
    1452:	b1 05       	cpc	r27, r1
    1454:	39 f0       	breq	.+14     	; 0x1464 <splash_screen+0xbc>
    1456:	c0 cf       	rjmp	.-128    	; 0x13d8 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1458:	cd 2f       	mov	r28, r29
    145a:	be cf       	rjmp	.-132    	; 0x13d8 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    145c:	cf 2d       	mov	r28, r15
    145e:	bc cf       	rjmp	.-136    	; 0x13d8 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    1460:	c0 2f       	mov	r28, r16
    1462:	ba cf       	rjmp	.-140    	; 0x13d8 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    1464:	c1 2f       	mov	r28, r17
    1466:	b8 cf       	rjmp	.-144    	; 0x13d8 <splash_screen+0x30>
		}
	}
}
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	08 95       	ret

00001474 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    1474:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    1478:	0e 94 a9 08 	call	0x1152	; 0x1152 <init_game>
		
	// Initialise the score
	init_score();
    147c:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    1480:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    1484:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <clear_serial_input_buffer>
    1488:	08 95       	ret

0000148a <play_game>:
}

void play_game(void) {
    148a:	4f 92       	push	r4
    148c:	5f 92       	push	r5
    148e:	7f 92       	push	r7
    1490:	8f 92       	push	r8
    1492:	9f 92       	push	r9
    1494:	af 92       	push	r10
    1496:	bf 92       	push	r11
    1498:	cf 92       	push	r12
    149a:	df 92       	push	r13
    149c:	ef 92       	push	r14
    149e:	ff 92       	push	r15
    14a0:	0f 93       	push	r16
    14a2:	1f 93       	push	r17
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    14a8:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    14ac:	4b 01       	movw	r8, r22
    14ae:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    14b0:	00 e0       	ldi	r16, 0x00	; 0
    14b2:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    14b4:	0f 2e       	mov	r0, r31
    14b6:	ff ed       	ldi	r31, 0xDF	; 223
    14b8:	7f 2e       	mov	r7, r31
    14ba:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    14bc:	0f 2e       	mov	r0, r31
    14be:	f1 e4       	ldi	r31, 0x41	; 65
    14c0:	4f 2e       	mov	r4, r31
    14c2:	f4 e0       	ldi	r31, 0x04	; 4
    14c4:	5f 2e       	mov	r5, r31
    14c6:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    14c8:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <time_to_add_superfood>
    14cc:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    14ce:	0e 94 51 11 	call	0x22a2	; 0x22a2 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    14d2:	0e 94 10 11 	call	0x2220	; 0x2220 <time_to_remove_superfood>
    14d6:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    14d8:	0e 94 20 11 	call	0x2240	; 0x2240 <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    14dc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <is_time_to_move_rat>
    14e0:	81 11       	cpse	r24, r1
    14e2:	0e 94 26 0c 	call	0x184c	; 0x184c <move_rat>
			handle_buzzer_loop();
    14e6:	0e 94 6d 02 	call	0x4da	; 0x4da <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    14ea:	0e 94 7e 12 	call	0x24fc	; 0x24fc <timer_is_paused>
    14ee:	89 2b       	or	r24, r25
    14f0:	19 f0       	breq	.+6      	; 0x14f8 <play_game+0x6e>
			button = -1;
			empty_button_queue();
    14f2:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    14f6:	06 c0       	rjmp	.+12     	; 0x1504 <play_game+0x7a>
			}else{
		button = button_pushed();}
    14f8:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    14fc:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    14fe:	8f 3f       	cpi	r24, 0xFF	; 255
    1500:	09 f0       	breq	.+2      	; 0x1504 <play_game+0x7a>
    1502:	9a c0       	rjmp	.+308    	; 0x1638 <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    1504:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <serial_input_available>
    1508:	88 23       	and	r24, r24
    150a:	09 f4       	brne	.+2      	; 0x150e <play_game+0x84>
    150c:	a4 c0       	rjmp	.+328    	; 0x1656 <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    150e:	f2 01       	movw	r30, r4
    1510:	80 81       	ld	r24, Z
    1512:	91 81       	ldd	r25, Z+1	; 0x01
    1514:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <fgetc>
    1518:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    151a:	01 11       	cpse	r16, r1
    151c:	03 c0       	rjmp	.+6      	; 0x1524 <play_game+0x9a>
    151e:	8b 31       	cpi	r24, 0x1B	; 27
    1520:	51 f4       	brne	.+20     	; 0x1536 <play_game+0xac>
    1522:	96 c0       	rjmp	.+300    	; 0x1650 <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1524:	01 30       	cpi	r16, 0x01	; 1
    1526:	19 f4       	brne	.+6      	; 0x152e <play_game+0xa4>
    1528:	8b 35       	cpi	r24, 0x5B	; 91
    152a:	29 f4       	brne	.+10     	; 0x1536 <play_game+0xac>
    152c:	93 c0       	rjmp	.+294    	; 0x1654 <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    152e:	02 30       	cpi	r16, 0x02	; 2
    1530:	09 f4       	brne	.+2      	; 0x1534 <play_game+0xaa>
    1532:	88 c0       	rjmp	.+272    	; 0x1644 <play_game+0x1ba>
    1534:	7b c0       	rjmp	.+246    	; 0x162c <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1536:	0e 94 7e 12 	call	0x24fc	; 0x24fc <timer_is_paused>
    153a:	89 2b       	or	r24, r25
    153c:	09 f0       	breq	.+2      	; 0x1540 <play_game+0xb6>
    153e:	3f c0       	rjmp	.+126    	; 0x15be <play_game+0x134>
    1540:	08 c0       	rjmp	.+16     	; 0x1552 <play_game+0xc8>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1542:	d1 11       	cpse	r29, r1
    1544:	09 c0       	rjmp	.+18     	; 0x1558 <play_game+0xce>
    1546:	01 c0       	rjmp	.+2      	; 0x154a <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1548:	00 e0       	ldi	r16, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <set_snake_dirn>
    1550:	50 c0       	rjmp	.+160    	; 0x15f2 <play_game+0x168>
    1552:	00 e0       	ldi	r16, 0x00	; 0
    1554:	d1 2f       	mov	r29, r17
    1556:	01 c0       	rjmp	.+2      	; 0x155a <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1558:	c1 2f       	mov	r28, r17
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    155a:	d2 30       	cpi	r29, 0x02	; 2
    155c:	19 f0       	breq	.+6      	; 0x1564 <play_game+0xda>
    155e:	81 2f       	mov	r24, r17
    1560:	81 34       	cpi	r24, 0x41	; 65
    1562:	21 f4       	brne	.+8      	; 0x156c <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <set_snake_dirn>
    156a:	43 c0       	rjmp	.+134    	; 0x15f2 <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    156c:	d3 30       	cpi	r29, 0x03	; 3
    156e:	11 f0       	breq	.+4      	; 0x1574 <play_game+0xea>
    1570:	84 34       	cpi	r24, 0x44	; 68
    1572:	21 f4       	brne	.+8      	; 0x157c <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    1574:	83 e0       	ldi	r24, 0x03	; 3
    1576:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <set_snake_dirn>
    157a:	3b c0       	rjmp	.+118    	; 0x15f2 <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    157c:	d1 30       	cpi	r29, 0x01	; 1
    157e:	11 f0       	breq	.+4      	; 0x1584 <play_game+0xfa>
    1580:	82 34       	cpi	r24, 0x42	; 66
    1582:	29 f4       	brne	.+10     	; 0x158e <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <set_snake_dirn>
    158a:	33 c0       	rjmp	.+102    	; 0x15f2 <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    158c:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    158e:	8c 2f       	mov	r24, r28
    1590:	8f 7d       	andi	r24, 0xDF	; 223
    1592:	80 35       	cpi	r24, 0x50	; 80
    1594:	19 f4       	brne	.+6      	; 0x159c <play_game+0x112>
			toggle_timer_clock();
    1596:	0e 94 77 12 	call	0x24ee	; 0x24ee <toggle_timer_clock>
    159a:	2b c0       	rjmp	.+86     	; 0x15f2 <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    159c:	c3 37       	cpi	r28, 0x73	; 115
    159e:	19 f4       	brne	.+6      	; 0x15a6 <play_game+0x11c>
			save_game_to_EPPROM();
    15a0:	0e 94 90 02 	call	0x520	; 0x520 <save_game_to_EPPROM>
    15a4:	26 c0       	rjmp	.+76     	; 0x15f2 <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15a6:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    15aa:	89 2b       	or	r24, r25
    15ac:	11 f1       	breq	.+68     	; 0x15f2 <play_game+0x168>
    15ae:	8c 2f       	mov	r24, r28
    15b0:	8f 7d       	andi	r24, 0xDF	; 223
    15b2:	8f 34       	cpi	r24, 0x4F	; 79
    15b4:	f1 f4       	brne	.+60     	; 0x15f2 <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <load_EEPROM_data_on_next_game>
 			break;
    15bc:	62 c0       	rjmp	.+196    	; 0x1682 <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    15be:	8c 2f       	mov	r24, r28
    15c0:	8f 7d       	andi	r24, 0xDF	; 223
    15c2:	80 35       	cpi	r24, 0x50	; 80
    15c4:	21 f4       	brne	.+8      	; 0x15ce <play_game+0x144>
			toggle_timer_clock();
    15c6:	0e 94 77 12 	call	0x24ee	; 0x24ee <toggle_timer_clock>
    15ca:	00 e0       	ldi	r16, 0x00	; 0
    15cc:	12 c0       	rjmp	.+36     	; 0x15f2 <play_game+0x168>
    15ce:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    15d0:	83 35       	cpi	r24, 0x53	; 83
    15d2:	19 f4       	brne	.+6      	; 0x15da <play_game+0x150>
			save_game_to_EPPROM();
    15d4:	0e 94 90 02 	call	0x520	; 0x520 <save_game_to_EPPROM>
    15d8:	0c c0       	rjmp	.+24     	; 0x15f2 <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15da:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    15de:	89 2b       	or	r24, r25
    15e0:	41 f0       	breq	.+16     	; 0x15f2 <play_game+0x168>
    15e2:	8c 2f       	mov	r24, r28
    15e4:	8f 7d       	andi	r24, 0xDF	; 223
    15e6:	8f 34       	cpi	r24, 0x4F	; 79
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <load_EEPROM_data_on_next_game>
			break;
    15f0:	48 c0       	rjmp	.+144    	; 0x1682 <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    15f2:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    15f6:	6b 01       	movw	r12, r22
    15f8:	7c 01       	movw	r14, r24
    15fa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <get_current_game_speed>
    15fe:	09 2e       	mov	r0, r25
    1600:	00 0c       	add	r0, r0
    1602:	aa 0b       	sbc	r26, r26
    1604:	bb 0b       	sbc	r27, r27
    1606:	88 0d       	add	r24, r8
    1608:	99 1d       	adc	r25, r9
    160a:	aa 1d       	adc	r26, r10
    160c:	bb 1d       	adc	r27, r11
    160e:	c8 16       	cp	r12, r24
    1610:	d9 06       	cpc	r13, r25
    1612:	ea 06       	cpc	r14, r26
    1614:	fb 06       	cpc	r15, r27
    1616:	08 f4       	brcc	.+2      	; 0x161a <play_game+0x190>
    1618:	57 cf       	rjmp	.-338    	; 0x14c8 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    161a:	0e 94 f6 08 	call	0x11ec	; 0x11ec <attempt_to_move_snake_forward>
    161e:	88 23       	and	r24, r24
    1620:	81 f1       	breq	.+96     	; 0x1682 <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    1622:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    1626:	4b 01       	movw	r8, r22
    1628:	5c 01       	movw	r10, r24
    162a:	4e cf       	rjmp	.-356    	; 0x14c8 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    162c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <timer_is_paused>
    1630:	89 2b       	or	r24, r25
    1632:	09 f4       	brne	.+2      	; 0x1636 <play_game+0x1ac>
    1634:	ab cf       	rjmp	.-170    	; 0x158c <play_game+0x102>
    1636:	c3 cf       	rjmp	.-122    	; 0x15be <play_game+0x134>
    1638:	0e 94 7e 12 	call	0x24fc	; 0x24fc <timer_is_paused>
    163c:	89 2b       	or	r24, r25
    163e:	09 f4       	brne	.+2      	; 0x1642 <play_game+0x1b8>
    1640:	80 cf       	rjmp	.-256    	; 0x1542 <play_game+0xb8>
    1642:	1c c0       	rjmp	.+56     	; 0x167c <play_game+0x1f2>
    1644:	0e 94 7e 12 	call	0x24fc	; 0x24fc <timer_is_paused>
    1648:	89 2b       	or	r24, r25
    164a:	51 f0       	breq	.+20     	; 0x1660 <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    164c:	00 e0       	ldi	r16, 0x00	; 0
    164e:	13 c0       	rjmp	.+38     	; 0x1676 <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1650:	01 e0       	ldi	r16, 0x01	; 1
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1654:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1656:	0e 94 7e 12 	call	0x24fc	; 0x24fc <timer_is_paused>
    165a:	89 2b       	or	r24, r25
    165c:	61 f4       	brne	.+24     	; 0x1676 <play_game+0x1ec>
    165e:	08 c0       	rjmp	.+16     	; 0x1670 <play_game+0x1e6>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1660:	c3 34       	cpi	r28, 0x43	; 67
    1662:	09 f4       	brne	.+2      	; 0x1666 <play_game+0x1dc>
    1664:	71 cf       	rjmp	.-286    	; 0x1548 <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1666:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1668:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    166a:	c1 2f       	mov	r28, r17
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    166c:	d1 2f       	mov	r29, r17
    166e:	78 cf       	rjmp	.-272    	; 0x1560 <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1670:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1674:	be cf       	rjmp	.-132    	; 0x15f2 <play_game+0x168>
    1676:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1678:	87 2d       	mov	r24, r7
    167a:	aa cf       	rjmp	.-172    	; 0x15d0 <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    167c:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1680:	b8 cf       	rjmp	.-144    	; 0x15f2 <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	ff 90       	pop	r15
    168c:	ef 90       	pop	r14
    168e:	df 90       	pop	r13
    1690:	cf 90       	pop	r12
    1692:	bf 90       	pop	r11
    1694:	af 90       	pop	r10
    1696:	9f 90       	pop	r9
    1698:	8f 90       	pop	r8
    169a:	7f 90       	pop	r7
    169c:	5f 90       	pop	r5
    169e:	4f 90       	pop	r4
    16a0:	08 95       	ret

000016a2 <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    16a2:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <clear_terminal>
	move_cursor(10,5);
    16a6:	65 e0       	ldi	r22, 0x05	; 5
    16a8:	8a e0       	ldi	r24, 0x0A	; 10
    16aa:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    16ae:	8c ea       	ldi	r24, 0xAC	; 172
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	9f 93       	push	r25
    16b4:	8f 93       	push	r24
    16b6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
	move_cursor(10,7);
    16ba:	67 e0       	ldi	r22, 0x07	; 7
    16bc:	8a e0       	ldi	r24, 0x0A	; 10
    16be:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf("Score: %u", get_score());
    16c2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
    16c6:	9f 93       	push	r25
    16c8:	8f 93       	push	r24
    16ca:	7f 93       	push	r23
    16cc:	6f 93       	push	r22
    16ce:	87 ea       	ldi	r24, 0xA7	; 167
    16d0:	92 e0       	ldi	r25, 0x02	; 2
    16d2:	9f 93       	push	r25
    16d4:	8f 93       	push	r24
    16d6:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
	display_EEPROM_high_score();
    16da:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <display_EEPROM_high_score>

	if (is_high_score()){
    16de:	0e 94 ab 05 	call	0xb56	; 0xb56 <is_high_score>
    16e2:	2d b7       	in	r18, 0x3d	; 61
    16e4:	3e b7       	in	r19, 0x3e	; 62
    16e6:	28 5f       	subi	r18, 0xF8	; 248
    16e8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	3e bf       	out	0x3e, r19	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	2d bf       	out	0x3d, r18	; 61
    16f4:	81 11       	cpse	r24, r1
		set_high_score_name();	
    16f6:	0e 94 86 06 	call	0xd0c	; 0xd0c <set_high_score_name>
	}
	move_cursor(10,9);
    16fa:	69 e0       	ldi	r22, 0x09	; 9
    16fc:	8a e0       	ldi	r24, 0x0A	; 10
    16fe:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1702:	8e e8       	ldi	r24, 0x8E	; 142
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	9f 93       	push	r25
    1708:	8f 93       	push	r24
    170a:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
	display_EEPROM_high_score(); 
    170e:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    1712:	0f 90       	pop	r0
    1714:	0f 90       	pop	r0
    1716:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    171a:	8f 3f       	cpi	r24, 0xFF	; 255
    171c:	e1 f3       	breq	.-8      	; 0x1716 <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    171e:	0e 94 d4 11 	call	0x23a8	; 0x23a8 <clear_terminal>
    1722:	08 95       	ret

00001724 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1724:	0e 94 c5 09 	call	0x138a	; 0x138a <initialise_hardware>
	DDRA = 0xff;
    1728:	8f ef       	ldi	r24, 0xFF	; 255
    172a:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    172c:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    172e:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    1730:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    1734:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <load_EEPROM_data_on_next_game>
    1738:	88 23       	and	r24, r24
    173a:	19 f0       	breq	.+6      	; 0x1742 <main+0x1e>
    173c:	0e 94 92 04 	call	0x924	; 0x924 <new_game_from_EEPROM>
    1740:	02 c0       	rjmp	.+4      	; 0x1746 <main+0x22>
			else{new_game();}
    1742:	0e 94 3a 0a 	call	0x1474	; 0x1474 <new_game>
		play_game();
    1746:	0e 94 45 0a 	call	0x148a	; 0x148a <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    174a:	80 91 d0 02 	lds	r24, 0x02D0	; 0x8002d0 <load_EEPROM_data_on_next_game>
    174e:	81 11       	cpse	r24, r1
    1750:	f1 cf       	rjmp	.-30     	; 0x1734 <main+0x10>
    1752:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <handle_game_over>
    1756:	ee cf       	rjmp	.-36     	; 0x1734 <main+0x10>

00001758 <get_rat_position>:

uint16_t RAT_WAIT_TIME = 1200;

PosnType get_rat_position(void){
	return rat_position;
}
    1758:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    175c:	08 95       	ret

0000175e <set_rat_at_pos>:

void set_rat_at_pos(PosnType new_pos){
    175e:	cf 93       	push	r28
    1760:	df 93       	push	r29
    1762:	c8 2f       	mov	r28, r24
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_BLACK);
    1764:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    1768:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    176c:	d8 2f       	mov	r29, r24
    176e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    1772:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	6d 2f       	mov	r22, r29
    177a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ledmatrix_update_pixel>
	rat_position = new_pos;
    177e:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <rat_position>
	ledmatrix_update_pixel(x_position(new_pos), y_position(new_pos), COLOUR_LIGHT_YELLOW);
    1782:	8c 2f       	mov	r24, r28
    1784:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    1788:	d8 2f       	mov	r29, r24
    178a:	8c 2f       	mov	r24, r28
    178c:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    1790:	43 e3       	ldi	r20, 0x33	; 51
    1792:	6d 2f       	mov	r22, r29
    1794:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ledmatrix_update_pixel>

}
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	08 95       	ret

0000179e <is_item_at>:

uint8_t is_item_at(PosnType position){
    179e:	cf 93       	push	r28
    17a0:	c8 2f       	mov	r28, r24
	if (is_snake_at(position) || is_food_at(position)|| is_superfood_at(position)){
    17a2:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <is_snake_at>
    17a6:	81 11       	cpse	r24, r1
    17a8:	0d c0       	rjmp	.+26     	; 0x17c4 <is_item_at+0x26>
    17aa:	8c 2f       	mov	r24, r28
    17ac:	0e 94 09 08 	call	0x1012	; 0x1012 <is_food_at>
    17b0:	81 11       	cpse	r24, r1
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <is_item_at+0x2a>
    17b4:	8c 2f       	mov	r24, r28
    17b6:	0e 94 44 11 	call	0x2288	; 0x2288 <is_superfood_at>
		return 1;
    17ba:	91 e0       	ldi	r25, 0x01	; 1
    17bc:	81 11       	cpse	r24, r1
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <is_item_at+0x2c>
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <is_item_at+0x2c>
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <is_item_at+0x2c>
    17c8:	91 e0       	ldi	r25, 0x01	; 1
	}
	return 0;
}
    17ca:	89 2f       	mov	r24, r25
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    17d8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    17dc:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    17e0:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    17e2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    17e6:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    17ea:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    17ec:	8f ef       	ldi	r24, 0xFF	; 255
    17ee:	8c 0f       	add	r24, r28
    17f0:	8e 30       	cpi	r24, 0x0E	; 14
    17f2:	20 f4       	brcc	.+8      	; 0x17fc <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	8d 0f       	add	r24, r29
    17f8:	86 30       	cpi	r24, 0x06	; 6
    17fa:	e8 f0       	brcs	.+58     	; 0x1836 <rat_jumped_the_board+0x66>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
    17fc:	c1 11       	cpse	r28, r1
    17fe:	06 c0       	rjmp	.+12     	; 0x180c <rat_jumped_the_board+0x3c>
    1800:	81 2f       	mov	r24, r17
    1802:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    1806:	8f 30       	cpi	r24, 0x0F	; 15
    1808:	41 f4       	brne	.+16     	; 0x181a <rat_jumped_the_board+0x4a>
    180a:	17 c0       	rjmp	.+46     	; 0x183a <rat_jumped_the_board+0x6a>
    180c:	cf 30       	cpi	r28, 0x0F	; 15
    180e:	29 f4       	brne	.+10     	; 0x181a <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
    1810:	81 2f       	mov	r24, r17
    1812:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    1816:	88 23       	and	r24, r24
    1818:	91 f0       	breq	.+36     	; 0x183e <rat_jumped_the_board+0x6e>
    181a:	d1 11       	cpse	r29, r1
    181c:	05 c0       	rjmp	.+10     	; 0x1828 <rat_jumped_the_board+0x58>
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    181e:	81 2f       	mov	r24, r17
    1820:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	0e c0       	rjmp	.+28     	; 0x1844 <rat_jumped_the_board+0x74>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    1828:	d7 30       	cpi	r29, 0x07	; 7
    182a:	59 f4       	brne	.+22     	; 0x1842 <rat_jumped_the_board+0x72>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
    182c:	81 2f       	mov	r24, r17
    182e:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
			return 1; 
		}
	return 1; 
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	07 c0       	rjmp	.+14     	; 0x1844 <rat_jumped_the_board+0x74>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	05 c0       	rjmp	.+10     	; 0x1844 <rat_jumped_the_board+0x74>
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    183a:	81 e0       	ldi	r24, 0x01	; 1
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <rat_jumped_the_board+0x74>
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <rat_jumped_the_board+0x74>
		}
	return 1; 
    1842:	81 e0       	ldi	r24, 0x01	; 1
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	08 95       	ret

0000184c <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    184c:	0f 93       	push	r16
    184e:	1f 93       	push	r17
    1850:	cf 93       	push	r28
    1852:	df 93       	push	r29
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    185c:	08 2f       	mov	r16, r24
	uint8_t move_option = rand()%4; 
    185e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
    1862:	83 70       	andi	r24, 0x03	; 3
    1864:	90 78       	andi	r25, 0x80	; 128
    1866:	99 23       	and	r25, r25
    1868:	24 f4       	brge	.+8      	; 0x1872 <move_rat+0x26>
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	8c 6f       	ori	r24, 0xFC	; 252
    186e:	9f 6f       	ori	r25, 0xFF	; 255
    1870:	01 96       	adiw	r24, 0x01	; 1
	return 0;
}

void move_rat(void){
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
    1872:	10 e0       	ldi	r17, 0x00	; 0
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    1874:	c8 2f       	mov	r28, r24
    1876:	d0 e0       	ldi	r29, 0x00	; 0
    1878:	c1 30       	cpi	r28, 0x01	; 1
    187a:	d1 05       	cpc	r29, r1
    187c:	d1 f0       	breq	.+52     	; 0x18b2 <move_rat+0x66>
    187e:	1c f4       	brge	.+6      	; 0x1886 <move_rat+0x3a>
    1880:	20 97       	sbiw	r28, 0x00	; 0
    1882:	41 f0       	breq	.+16     	; 0x1894 <move_rat+0x48>
    1884:	42 c0       	rjmp	.+132    	; 0x190a <move_rat+0xbe>
    1886:	c2 30       	cpi	r28, 0x02	; 2
    1888:	d1 05       	cpc	r29, r1
    188a:	11 f1       	breq	.+68     	; 0x18d0 <move_rat+0x84>
    188c:	c3 30       	cpi	r28, 0x03	; 3
    188e:	d1 05       	cpc	r29, r1
    1890:	71 f1       	breq	.+92     	; 0x18ee <move_rat+0xa2>
    1892:	3b c0       	rjmp	.+118    	; 0x190a <move_rat+0xbe>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    1894:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    1898:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    189c:	08 2f       	mov	r16, r24
    189e:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18a2:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	60 0f       	add	r22, r16
    18aa:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    18ae:	08 2f       	mov	r16, r24
			break; 
    18b0:	2c c0       	rjmp	.+88     	; 0x190a <move_rat+0xbe>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    18b2:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18b6:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    18ba:	08 2f       	mov	r16, r24
    18bc:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18c0:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    18c4:	6f ef       	ldi	r22, 0xFF	; 255
    18c6:	60 0f       	add	r22, r16
    18c8:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    18cc:	08 2f       	mov	r16, r24
			break;
    18ce:	1d c0       	rjmp	.+58     	; 0x190a <move_rat+0xbe>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    18d0:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18d4:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    18d8:	08 2f       	mov	r16, r24
    18da:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18de:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    18e2:	60 2f       	mov	r22, r16
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    18ea:	08 2f       	mov	r16, r24
			break;
    18ec:	0e c0       	rjmp	.+28     	; 0x190a <move_rat+0xbe>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    18ee:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18f2:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    18f6:	08 2f       	mov	r16, r24
    18f8:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    18fc:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    1900:	60 2f       	mov	r22, r16
    1902:	81 50       	subi	r24, 0x01	; 1
    1904:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    1908:	08 2f       	mov	r16, r24
			break;
			
		}
		attempts ++;
    190a:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_item_at(new_rat_pos) && (attempts <4) && (rat_jumped_the_board(new_rat_pos)));
    190c:	80 2f       	mov	r24, r16
    190e:	0e 94 cf 0b 	call	0x179e	; 0x179e <is_item_at>
    1912:	88 23       	and	r24, r24
    1914:	39 f0       	breq	.+14     	; 0x1924 <move_rat+0xd8>
    1916:	14 30       	cpi	r17, 0x04	; 4
    1918:	39 f0       	breq	.+14     	; 0x1928 <move_rat+0xdc>
    191a:	80 2f       	mov	r24, r16
    191c:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <rat_jumped_the_board>
    1920:	81 11       	cpse	r24, r1
    1922:	aa cf       	rjmp	.-172    	; 0x1878 <move_rat+0x2c>
	
	if (attempts<=4){
    1924:	15 30       	cpi	r17, 0x05	; 5
    1926:	18 f4       	brcc	.+6      	; 0x192e <move_rat+0xe2>
		set_rat_at_pos(new_rat_pos); 
    1928:	80 2f       	mov	r24, r16
    192a:	0e 94 af 0b 	call	0x175e	; 0x175e <set_rat_at_pos>
	}
	}
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	08 95       	ret

00001938 <is_rat_at>:
		}
	return 1; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	20 91 2a 03 	lds	r18, 0x032A	; 0x80032a <rat_position>
    193e:	28 13       	cpse	r18, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
}
    1942:	89 2f       	mov	r24, r25
    1944:	08 95       	ret

00001946 <add_new_rat_position>:

void add_new_rat_position(void){
    1946:	1f 93       	push	r17
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    194c:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
    1950:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1952:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
        test_position = position(x,y);
    1956:	bc 01       	movw	r22, r24
    1958:	67 70       	andi	r22, 0x07	; 7
    195a:	70 78       	andi	r23, 0x80	; 128
    195c:	77 23       	and	r23, r23
    195e:	34 f4       	brge	.+12     	; 0x196c <add_new_rat_position+0x26>
    1960:	61 50       	subi	r22, 0x01	; 1
    1962:	71 09       	sbc	r23, r1
    1964:	68 6f       	ori	r22, 0xF8	; 248
    1966:	7f 6f       	ori	r23, 0xFF	; 255
    1968:	6f 5f       	subi	r22, 0xFF	; 255
    196a:	7f 4f       	sbci	r23, 0xFF	; 255
    196c:	ce 01       	movw	r24, r28
    196e:	8f 70       	andi	r24, 0x0F	; 15
    1970:	90 78       	andi	r25, 0x80	; 128
    1972:	99 23       	and	r25, r25
    1974:	24 f4       	brge	.+8      	; 0x197e <add_new_rat_position+0x38>
    1976:	01 97       	sbiw	r24, 0x01	; 1
    1978:	80 6f       	ori	r24, 0xF0	; 240
    197a:	9f 6f       	ori	r25, 0xFF	; 255
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    1982:	c8 2f       	mov	r28, r24
    1984:	13 e6       	ldi	r17, 0x63	; 99
    1986:	1e c0       	rjmp	.+60     	; 0x19c4 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1988:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
    198c:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    198e:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
        test_position = position(x,y);
    1992:	bc 01       	movw	r22, r24
    1994:	67 70       	andi	r22, 0x07	; 7
    1996:	70 78       	andi	r23, 0x80	; 128
    1998:	77 23       	and	r23, r23
    199a:	34 f4       	brge	.+12     	; 0x19a8 <add_new_rat_position+0x62>
    199c:	61 50       	subi	r22, 0x01	; 1
    199e:	71 09       	sbc	r23, r1
    19a0:	68 6f       	ori	r22, 0xF8	; 248
    19a2:	7f 6f       	ori	r23, 0xFF	; 255
    19a4:	6f 5f       	subi	r22, 0xFF	; 255
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	ce 01       	movw	r24, r28
    19aa:	8f 70       	andi	r24, 0x0F	; 15
    19ac:	90 78       	andi	r25, 0x80	; 128
    19ae:	99 23       	and	r25, r25
    19b0:	24 f4       	brge	.+8      	; 0x19ba <add_new_rat_position+0x74>
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	80 6f       	ori	r24, 0xF0	; 240
    19b6:	9f 6f       	ori	r25, 0xFF	; 255
    19b8:	01 96       	adiw	r24, 0x01	; 1
    19ba:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    19be:	c8 2f       	mov	r28, r24
    19c0:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    19c2:	91 f0       	breq	.+36     	; 0x19e8 <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    19c4:	8c 2f       	mov	r24, r28
    19c6:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    19ca:	81 11       	cpse	r24, r1
    19cc:	dd cf       	rjmp	.-70     	; 0x1988 <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    19ce:	8c 2f       	mov	r24, r28
    19d0:	0e 94 09 08 	call	0x1012	; 0x1012 <is_food_at>
    19d4:	81 11       	cpse	r24, r1
    19d6:	d8 cf       	rjmp	.-80     	; 0x1988 <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    19d8:	0e 94 41 11 	call	0x2282	; 0x2282 <get_superfood_position>
    19dc:	8c 17       	cp	r24, r28
    19de:	a1 f2       	breq	.-88     	; 0x1988 <add_new_rat_position+0x42>
    19e0:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    19e4:	8c 17       	cp	r24, r28
    19e6:	81 f2       	breq	.-96     	; 0x1988 <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    19e8:	c0 93 2a 03 	sts	0x032A, r28	; 0x80032a <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    19ec:	8c 2f       	mov	r24, r28
    19ee:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    19f2:	c8 2f       	mov	r28, r24
    19f4:	80 91 2a 03 	lds	r24, 0x032A	; 0x80032a <rat_position>
    19f8:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    19fc:	4c e3       	ldi	r20, 0x3C	; 60
    19fe:	6c 2f       	mov	r22, r28
    1a00:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ledmatrix_update_pixel>
}
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	08 95       	ret

00001a0c <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    1a0c:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    1a10:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    1a14:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	50 e0       	ldi	r21, 0x00	; 0
    1a1c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodsi4>
    1a20:	21 e0       	ldi	r18, 0x01	; 1
    1a22:	67 2b       	or	r22, r23
    1a24:	68 2b       	or	r22, r24
    1a26:	69 2b       	or	r22, r25
    1a28:	09 f0       	breq	.+2      	; 0x1a2c <is_time_to_move_rat+0x20>
    1a2a:	20 e0       	ldi	r18, 0x00	; 0
}
    1a2c:	82 2f       	mov	r24, r18
    1a2e:	08 95       	ret

00001a30 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    1a30:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <score>
    1a34:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <score+0x1>
    1a38:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <score+0x2>
    1a3c:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <score+0x3>
    1a40:	08 95       	ret

00001a42 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1a42:	40 91 d1 02 	lds	r20, 0x02D1	; 0x8002d1 <score>
    1a46:	50 91 d2 02 	lds	r21, 0x02D2	; 0x8002d2 <score+0x1>
    1a4a:	60 91 d3 02 	lds	r22, 0x02D3	; 0x8002d3 <score+0x2>
    1a4e:	70 91 d4 02 	lds	r23, 0x02D4	; 0x8002d4 <score+0x3>
    1a52:	48 0f       	add	r20, r24
    1a54:	59 1f       	adc	r21, r25
    1a56:	61 1d       	adc	r22, r1
    1a58:	71 1d       	adc	r23, r1
    1a5a:	40 93 d1 02 	sts	0x02D1, r20	; 0x8002d1 <score>
    1a5e:	50 93 d2 02 	sts	0x02D2, r21	; 0x8002d2 <score+0x1>
    1a62:	60 93 d3 02 	sts	0x02D3, r22	; 0x8002d3 <score+0x2>
    1a66:	70 93 d4 02 	sts	0x02D4, r23	; 0x8002d4 <score+0x3>
    1a6a:	08 95       	ret

00001a6c <get_score>:
}

uint32_t get_score(void) {
	return score;
    1a6c:	60 91 d1 02 	lds	r22, 0x02D1	; 0x8002d1 <score>
    1a70:	70 91 d2 02 	lds	r23, 0x02D2	; 0x8002d2 <score+0x1>
    1a74:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <score+0x2>
    1a78:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <score+0x3>
}
    1a7c:	08 95       	ret

00001a7e <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    1a7e:	60 93 d1 02 	sts	0x02D1, r22	; 0x8002d1 <score>
    1a82:	70 93 d2 02 	sts	0x02D2, r23	; 0x8002d2 <score+0x1>
    1a86:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <score+0x2>
    1a8a:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <score+0x3>
    1a8e:	08 95       	ret

00001a90 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1a90:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    1a94:	90 93 d9 02 	sts	0x02D9, r25	; 0x8002d9 <display_string+0x1>
    1a98:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <display_string>
	next_col_ptr = 0;
    1a9c:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <next_col_ptr+0x1>
    1aa0:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_col_ptr>
	next_char_to_display = 0;
    1aa4:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <next_char_to_display+0x1>
    1aa8:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <next_char_to_display>
    1aac:	08 95       	ret

00001aae <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	28 97       	sbiw	r28, 0x08	; 8
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1ac6:	e0 91 da 02 	lds	r30, 0x02DA	; 0x8002da <next_col_ptr>
    1aca:	f0 91 db 02 	lds	r31, 0x02DB	; 0x8002db <next_col_ptr+0x1>
    1ace:	30 97       	sbiw	r30, 0x00	; 0
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1ad2:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1ad4:	10 ff       	sbrs	r17, 0
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1ad8:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <next_col_ptr+0x1>
    1adc:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ae0:	00 e0       	ldi	r16, 0x00	; 0
    1ae2:	6b c0       	rjmp	.+214    	; 0x1bba <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1ae4:	31 96       	adiw	r30, 0x01	; 1
    1ae6:	f0 93 db 02 	sts	0x02DB, r31	; 0x8002db <next_col_ptr+0x1>
    1aea:	e0 93 da 02 	sts	0x02DA, r30	; 0x8002da <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1aee:	00 e0       	ldi	r16, 0x00	; 0
    1af0:	64 c0       	rjmp	.+200    	; 0x1bba <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1af2:	e0 91 d6 02 	lds	r30, 0x02D6	; 0x8002d6 <next_char_to_display>
    1af6:	f0 91 d7 02 	lds	r31, 0x02D7	; 0x8002d7 <next_char_to_display+0x1>
    1afa:	30 97       	sbiw	r30, 0x00	; 0
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <scroll_display+0x52>
    1afe:	49 c0       	rjmp	.+146    	; 0x1b92 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1b00:	cf 01       	movw	r24, r30
    1b02:	01 96       	adiw	r24, 0x01	; 1
    1b04:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <next_char_to_display+0x1>
    1b08:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <next_char_to_display>
    1b0c:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1b0e:	e1 11       	cpse	r30, r1
    1b10:	0a c0       	rjmp	.+20     	; 0x1b26 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1b12:	10 92 d7 02 	sts	0x02D7, r1	; 0x8002d7 <next_char_to_display+0x1>
    1b16:	10 92 d6 02 	sts	0x02D6, r1	; 0x8002d6 <next_char_to_display>
			shift_countdown = 16;
    1b1a:	80 e1       	ldi	r24, 0x10	; 16
    1b1c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b20:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b22:	10 e0       	ldi	r17, 0x00	; 0
    1b24:	4a c0       	rjmp	.+148    	; 0x1bba <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1b26:	8f e9       	ldi	r24, 0x9F	; 159
    1b28:	8e 0f       	add	r24, r30
    1b2a:	8a 31       	cpi	r24, 0x1A	; 26
    1b2c:	70 f4       	brcc	.+28     	; 0x1b4a <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	ee 0f       	add	r30, r30
    1b32:	ff 1f       	adc	r31, r31
    1b34:	e8 5f       	subi	r30, 0xF8	; 248
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	85 91       	lpm	r24, Z+
    1b3a:	94 91       	lpm	r25, Z
    1b3c:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <next_col_ptr+0x1>
    1b40:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b44:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b46:	10 e0       	ldi	r17, 0x00	; 0
    1b48:	38 c0       	rjmp	.+112    	; 0x1bba <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1b4a:	8f eb       	ldi	r24, 0xBF	; 191
    1b4c:	8e 0f       	add	r24, r30
    1b4e:	8a 31       	cpi	r24, 0x1A	; 26
    1b50:	70 f4       	brcc	.+28     	; 0x1b6e <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	ee 0f       	add	r30, r30
    1b56:	ff 1f       	adc	r31, r31
    1b58:	e8 5b       	subi	r30, 0xB8	; 184
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	85 91       	lpm	r24, Z+
    1b5e:	94 91       	lpm	r25, Z
    1b60:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <next_col_ptr+0x1>
    1b64:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b68:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b6a:	10 e0       	ldi	r17, 0x00	; 0
    1b6c:	26 c0       	rjmp	.+76     	; 0x1bba <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1b6e:	80 ed       	ldi	r24, 0xD0	; 208
    1b70:	8e 0f       	add	r24, r30
    1b72:	8a 30       	cpi	r24, 0x0A	; 10
    1b74:	00 f5       	brcc	.+64     	; 0x1bb6 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	ea 5a       	subi	r30, 0xAA	; 170
    1b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b80:	85 91       	lpm	r24, Z+
    1b82:	94 91       	lpm	r25, Z
    1b84:	90 93 db 02 	sts	0x02DB, r25	; 0x8002db <next_col_ptr+0x1>
    1b88:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b8c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
    1b90:	14 c0       	rjmp	.+40     	; 0x1bba <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1b92:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <display_string>
    1b96:	90 91 d9 02 	lds	r25, 0x02D9	; 0x8002d9 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b9a:	01 e0       	ldi	r16, 0x01	; 1
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	09 f0       	breq	.+2      	; 0x1ba2 <scroll_display+0xf4>
    1ba0:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1ba2:	90 93 d7 02 	sts	0x02D7, r25	; 0x8002d7 <next_char_to_display+0x1>
    1ba6:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <next_char_to_display>
		display_string = 0;
    1baa:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <display_string+0x1>
    1bae:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1bb2:	10 e0       	ldi	r17, 0x00	; 0
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1bba:	0e 94 a8 09 	call	0x1350	; 0x1350 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1bbe:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	38 96       	adiw	r30, 0x08	; 8
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1bca:	11 23       	and	r17, r17
    1bcc:	14 f4       	brge	.+4      	; 0x1bd2 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1bce:	20 83       	st	Z, r18
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1bd2:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1bd4:	11 0f       	add	r17, r17
    1bd6:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1bd8:	e8 17       	cp	r30, r24
    1bda:	f9 07       	cpc	r31, r25
    1bdc:	b1 f7       	brne	.-20     	; 0x1bca <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1bde:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1be0:	be 01       	movw	r22, r28
    1be2:	6f 5f       	subi	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f e0       	ldi	r24, 0x0F	; 15
    1be8:	0e 94 8b 09 	call	0x1316	; 0x1316 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1bec:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <shift_countdown.1854>
    1bf0:	88 23       	and	r24, r24
    1bf2:	89 f0       	breq	.+34     	; 0x1c16 <scroll_display+0x168>
		shift_countdown--;
    1bf4:	81 50       	subi	r24, 0x01	; 1
    1bf6:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1bfa:	00 23       	and	r16, r16
    1bfc:	11 f0       	breq	.+4      	; 0x1c02 <scroll_display+0x154>
    1bfe:	88 23       	and	r24, r24
    1c00:	11 f0       	breq	.+4      	; 0x1c06 <scroll_display+0x158>
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <scroll_display+0x15e>
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <scroll_display+0x15e>
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	99 23       	and	r25, r25
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <scroll_display+0x16e>
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1c16:	00 23       	and	r16, r16
    1c18:	a1 f3       	breq	.-24     	; 0x1c02 <scroll_display+0x154>
    1c1a:	f7 cf       	rjmp	.-18     	; 0x1c0a <scroll_display+0x15c>
	return !finished;
}
    1c1c:	28 96       	adiw	r28, 0x08	; 8
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	0f 91       	pop	r16
    1c30:	08 95       	ret

00001c32 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1c32:	cf 93       	push	r28
    1c34:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1c36:	8a 30       	cpi	r24, 0x0A	; 10
    1c38:	19 f4       	brne	.+6      	; 0x1c40 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1c3a:	8d e0       	ldi	r24, 0x0D	; 13
    1c3c:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1c40:	9f b7       	in	r25, 0x3f	; 63
    1c42:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1c46:	99 23       	and	r25, r25
    1c48:	29 f1       	breq	.+74     	; 0x1c94 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1c4a:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1c50:	d1 f3       	breq	.-12     	; 0x1c46 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1c52:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1c54:	e0 91 2b 03 	lds	r30, 0x032B	; 0x80032b <out_insert_pos>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	8e 0f       	add	r24, r30
    1c5c:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <out_insert_pos>
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	e3 5d       	subi	r30, 0xD3	; 211
    1c64:	fc 4f       	sbci	r31, 0xFC	; 252
    1c66:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1c68:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1c6c:	8f 5f       	subi	r24, 0xFF	; 255
    1c6e:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1c72:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <out_insert_pos>
    1c76:	8f 3f       	cpi	r24, 0xFF	; 255
    1c78:	11 f4       	brne	.+4      	; 0x1c7e <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1c7a:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1c7e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	80 62       	ori	r24, 0x20	; 32
    1c86:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1c88:	99 23       	and	r25, r25
    1c8a:	39 f0       	breq	.+14     	; 0x1c9a <uart_put_char+0x68>
		sei();
    1c8c:	78 94       	sei
	}
	return 0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	05 c0       	rjmp	.+10     	; 0x1c9e <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
}
    1c9e:	cf 91       	pop	r28
    1ca0:	08 95       	ret

00001ca2 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1ca2:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1ca6:	88 23       	and	r24, r24
    1ca8:	e1 f3       	breq	.-8      	; 0x1ca2 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1caa:	2f b7       	in	r18, 0x3f	; 63
    1cac:	20 78       	andi	r18, 0x80	; 128
	cli();
    1cae:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1cb0:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <input_insert_pos>
    1cb4:	30 91 3e 04 	lds	r19, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	83 1b       	sub	r24, r19
    1cbc:	91 09       	sbc	r25, r1
    1cbe:	5a f4       	brpl	.+22     	; 0x1cd6 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1cc0:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <input_insert_pos>
    1cc4:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1cc8:	f0 e0       	ldi	r31, 0x00	; 0
    1cca:	e8 1b       	sub	r30, r24
    1ccc:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1cce:	e3 5c       	subi	r30, 0xC3	; 195
    1cd0:	fb 4f       	sbci	r31, 0xFB	; 251
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0a c0       	rjmp	.+20     	; 0x1cea <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1cd6:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <input_insert_pos>
    1cda:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	e8 1b       	sub	r30, r24
    1ce2:	f1 09       	sbc	r31, r1
    1ce4:	e3 5d       	subi	r30, 0xD3	; 211
    1ce6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ce8:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1cea:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1cee:	91 50       	subi	r25, 0x01	; 1
    1cf0:	90 93 3e 04 	sts	0x043E, r25	; 0x80043e <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1cf4:	22 23       	and	r18, r18
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <uart_get_char+0x58>
		sei();
    1cf8:	78 94       	sei
	}	
	return c;
}
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	08 95       	ret

00001cfe <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1cfe:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <out_insert_pos>
	bytes_in_out_buffer = 0;
    1d02:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <bytes_in_out_buffer>
	input_insert_pos = 0;
    1d06:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <input_insert_pos>
	bytes_in_input_buffer = 0;
    1d0a:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <bytes_in_input_buffer>
	input_overrun = 0;
    1d0e:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1d12:	40 93 dc 02 	sts	0x02DC, r20	; 0x8002dc <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	ad 01       	movw	r20, r26
    1d2e:	22 0f       	add	r18, r18
    1d30:	33 1f       	adc	r19, r19
    1d32:	44 1f       	adc	r20, r20
    1d34:	55 1f       	adc	r21, r21
    1d36:	60 e0       	ldi	r22, 0x00	; 0
    1d38:	72 e1       	ldi	r23, 0x12	; 18
    1d3a:	8a e7       	ldi	r24, 0x7A	; 122
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodsi4>
    1d42:	ba 01       	movw	r22, r20
    1d44:	a9 01       	movw	r20, r18
    1d46:	4f 5f       	subi	r20, 0xFF	; 255
    1d48:	5f 4f       	sbci	r21, 0xFF	; 255
    1d4a:	6f 4f       	sbci	r22, 0xFF	; 255
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4e:	db 01       	movw	r26, r22
    1d50:	ca 01       	movw	r24, r20
    1d52:	1a f4       	brpl	.+6      	; 0x1d5a <init_serial_stdio+0x5c>
    1d54:	01 96       	adiw	r24, 0x01	; 1
    1d56:	a1 1d       	adc	r26, r1
    1d58:	b1 1d       	adc	r27, r1
    1d5a:	b5 95       	asr	r27
    1d5c:	a7 95       	ror	r26
    1d5e:	97 95       	ror	r25
    1d60:	87 95       	ror	r24
    1d62:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1d64:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1d68:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1d6c:	e1 ec       	ldi	r30, 0xC1	; 193
    1d6e:	f0 e0       	ldi	r31, 0x00	; 0
    1d70:	88 e1       	ldi	r24, 0x18	; 24
    1d72:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1d74:	80 81       	ld	r24, Z
    1d76:	80 68       	ori	r24, 0x80	; 128
    1d78:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1d7a:	e1 e4       	ldi	r30, 0x41	; 65
    1d7c:	f4 e0       	ldi	r31, 0x04	; 4
    1d7e:	8f e0       	ldi	r24, 0x0F	; 15
    1d80:	91 e0       	ldi	r25, 0x01	; 1
    1d82:	93 83       	std	Z+3, r25	; 0x03
    1d84:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
    1d8a:	08 95       	ret

00001d8c <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1d8c:	90 91 3e 04 	lds	r25, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	91 11       	cpse	r25, r1
    1d94:	01 c0       	rjmp	.+2      	; 0x1d98 <serial_input_available+0xc>
    1d96:	80 e0       	ldi	r24, 0x00	; 0
}
    1d98:	08 95       	ret

00001d9a <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1d9a:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <input_insert_pos>
	bytes_in_input_buffer = 0;
    1d9e:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <bytes_in_input_buffer>
    1da2:	08 95       	ret

00001da4 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1da4:	1f 92       	push	r1
    1da6:	0f 92       	push	r0
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	0f 92       	push	r0
    1dac:	11 24       	eor	r1, r1
    1dae:	2f 93       	push	r18
    1db0:	8f 93       	push	r24
    1db2:	9f 93       	push	r25
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1db8:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1dbc:	88 23       	and	r24, r24
    1dbe:	29 f1       	breq	.+74     	; 0x1e0a <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1dc0:	80 91 2b 03 	lds	r24, 0x032B	; 0x80032b <out_insert_pos>
    1dc4:	20 91 2c 03 	lds	r18, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	82 1b       	sub	r24, r18
    1dcc:	91 09       	sbc	r25, r1
    1dce:	5a f4       	brpl	.+22     	; 0x1de6 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1dd0:	e0 91 2b 03 	lds	r30, 0x032B	; 0x80032b <out_insert_pos>
    1dd4:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	e8 1b       	sub	r30, r24
    1ddc:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1dde:	e4 5d       	subi	r30, 0xD4	; 212
    1de0:	fb 4f       	sbci	r31, 0xFB	; 251
    1de2:	90 81       	ld	r25, Z
    1de4:	0a c0       	rjmp	.+20     	; 0x1dfa <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1de6:	e0 91 2b 03 	lds	r30, 0x032B	; 0x80032b <out_insert_pos>
    1dea:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	e8 1b       	sub	r30, r24
    1df2:	f1 09       	sbc	r31, r1
    1df4:	e3 5d       	subi	r30, 0xD3	; 211
    1df6:	fc 4f       	sbci	r31, 0xFC	; 252
    1df8:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1dfa:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1dfe:	81 50       	subi	r24, 0x01	; 1
    1e00:	80 93 2c 03 	sts	0x032C, r24	; 0x80032c <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1e04:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1e08:	05 c0       	rjmp	.+10     	; 0x1e14 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1e0a:	e1 ec       	ldi	r30, 0xC1	; 193
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	8f 7d       	andi	r24, 0xDF	; 223
    1e12:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	9f 91       	pop	r25
    1e1a:	8f 91       	pop	r24
    1e1c:	2f 91       	pop	r18
    1e1e:	0f 90       	pop	r0
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	0f 90       	pop	r0
    1e24:	1f 90       	pop	r1
    1e26:	18 95       	reti

00001e28 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1e28:	1f 92       	push	r1
    1e2a:	0f 92       	push	r0
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	0f 92       	push	r0
    1e30:	11 24       	eor	r1, r1
    1e32:	2f 93       	push	r18
    1e34:	3f 93       	push	r19
    1e36:	4f 93       	push	r20
    1e38:	5f 93       	push	r21
    1e3a:	6f 93       	push	r22
    1e3c:	7f 93       	push	r23
    1e3e:	8f 93       	push	r24
    1e40:	9f 93       	push	r25
    1e42:	af 93       	push	r26
    1e44:	bf 93       	push	r27
    1e46:	cf 93       	push	r28
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1e4c:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1e50:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <do_echo>
    1e54:	88 23       	and	r24, r24
    1e56:	49 f0       	breq	.+18     	; 0x1e6a <__vector_20+0x42>
    1e58:	80 91 2c 03 	lds	r24, 0x032C	; 0x80032c <bytes_in_out_buffer>
    1e5c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5e:	29 f0       	breq	.+10     	; 0x1e6a <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	8c 2f       	mov	r24, r28
    1e66:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1e6a:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1e6e:	80 31       	cpi	r24, 0x10	; 16
    1e70:	20 f0       	brcs	.+8      	; 0x1e7a <__vector_20+0x52>
		input_overrun = 1;
    1e72:	81 e0       	ldi	r24, 0x01	; 1
    1e74:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <input_overrun>
    1e78:	18 c0       	rjmp	.+48     	; 0x1eaa <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1e7a:	cd 30       	cpi	r28, 0x0D	; 13
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <__vector_20+0x58>
			c = '\n';
    1e7e:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1e80:	e0 91 2c 04 	lds	r30, 0x042C	; 0x80042c <input_insert_pos>
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	8e 0f       	add	r24, r30
    1e88:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <input_insert_pos>
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	e3 5d       	subi	r30, 0xD3	; 211
    1e90:	fb 4f       	sbci	r31, 0xFB	; 251
    1e92:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1e94:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <bytes_in_input_buffer>
    1e98:	8f 5f       	subi	r24, 0xFF	; 255
    1e9a:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1e9e:	80 91 2c 04 	lds	r24, 0x042C	; 0x80042c <input_insert_pos>
    1ea2:	80 31       	cpi	r24, 0x10	; 16
    1ea4:	11 f4       	brne	.+4      	; 0x1eaa <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1ea6:	10 92 2c 04 	sts	0x042C, r1	; 0x80042c <input_insert_pos>
		}
	}
}
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	cf 91       	pop	r28
    1eb0:	bf 91       	pop	r27
    1eb2:	af 91       	pop	r26
    1eb4:	9f 91       	pop	r25
    1eb6:	8f 91       	pop	r24
    1eb8:	7f 91       	pop	r23
    1eba:	6f 91       	pop	r22
    1ebc:	5f 91       	pop	r21
    1ebe:	4f 91       	pop	r20
    1ec0:	3f 91       	pop	r19
    1ec2:	2f 91       	pop	r18
    1ec4:	0f 90       	pop	r0
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	0f 90       	pop	r0
    1eca:	1f 90       	pop	r1
    1ecc:	18 95       	reti

00001ece <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1ed4:	82 e0       	ldi	r24, 0x02	; 2
    1ed6:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <snakeLength>
	snakeTailIndex = 0;
    1eda:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <snakeTailIndex>
	snakeHeadIndex = 1;
    1ede:	c1 e0       	ldi	r28, 0x01	; 1
    1ee0:	c0 93 e0 02 	sts	0x02E0, r28	; 0x8002e0 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    1eec:	02 ee       	ldi	r16, 0xE2	; 226
    1eee:	12 e0       	ldi	r17, 0x02	; 2
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1ef4:	61 e0       	ldi	r22, 0x01	; 1
    1ef6:	82 e0       	ldi	r24, 0x02	; 2
    1ef8:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    1efc:	f8 01       	movw	r30, r16
    1efe:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1f00:	c0 93 de 02 	sts	0x02DE, r28	; 0x8002de <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1f04:	c0 93 dd 02 	sts	0x02DD, r28	; 0x8002dd <nextSnakeDirn>
}
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	0f 91       	pop	r16
    1f0e:	08 95       	ret

00001f10 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1f10:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <snakeHeadIndex>
    1f14:	0e 2e       	mov	r0, r30
    1f16:	00 0c       	add	r0, r0
    1f18:	ff 0b       	sbc	r31, r31
    1f1a:	ee 51       	subi	r30, 0x1E	; 30
    1f1c:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1f1e:	80 81       	ld	r24, Z
    1f20:	08 95       	ret

00001f22 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1f22:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <curSnakeDirn>
	nextSnakeDirn = dirn;
    1f26:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <nextSnakeDirn>
    1f2a:	08 95       	ret

00001f2c <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1f2c:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <snakeTailIndex>
    1f30:	0e 2e       	mov	r0, r30
    1f32:	00 0c       	add	r0, r0
    1f34:	ff 0b       	sbc	r31, r31
    1f36:	ee 51       	subi	r30, 0x1E	; 30
    1f38:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1f3a:	80 81       	ld	r24, Z
    1f3c:	08 95       	ret

00001f3e <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1f3e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <snakeLength>
    1f42:	08 95       	ret

00001f44 <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1f44:	e8 2f       	mov	r30, r24
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	ee 51       	subi	r30, 0x1E	; 30
    1f4a:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1f4c:	80 81       	ld	r24, Z
    1f4e:	08 95       	ret

00001f50 <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1f50:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <snakeLength>
    1f54:	08 95       	ret

00001f56 <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1f56:	e6 2f       	mov	r30, r22
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	ee 51       	subi	r30, 0x1E	; 30
    1f5c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f5e:	80 83       	st	Z, r24
    1f60:	08 95       	ret

00001f62 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1f62:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <snakeHeadIndex>
    1f66:	08 95       	ret

00001f68 <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1f68:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <snakeTailIndex>
    1f6c:	08 95       	ret

00001f6e <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1f6e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <snakeHeadIndex>
    1f72:	08 95       	ret

00001f74 <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1f74:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <snakeTailIndex>
    1f78:	08 95       	ret

00001f7a <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1f7a:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <curSnakeDirn>
    1f7e:	08 95       	ret

00001f80 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1f80:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <snakeTailIndex>
    1f84:	e9 2f       	mov	r30, r25
    1f86:	09 2e       	mov	r0, r25
    1f88:	00 0c       	add	r0, r0
    1f8a:	ff 0b       	sbc	r31, r31
    1f8c:	ee 51       	subi	r30, 0x1E	; 30
    1f8e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f90:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1f94:	91 32       	cpi	r25, 0x21	; 33
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1f98:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <snakeTailIndex>
    1f9c:	02 c0       	rjmp	.+4      	; 0x1fa2 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1f9e:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <snakeTailIndex>
	}
	snakeLength--;
    1fa2:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <snakeLength>
    1fa6:	91 50       	subi	r25, 0x01	; 1
    1fa8:	90 93 e1 02 	sts	0x02E1, r25	; 0x8002e1 <snakeLength>
	
	return prev_tail_position;
}
    1fac:	08 95       	ret

00001fae <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1fae:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <curSnakeDirn>
    1fb2:	91 30       	cpi	r25, 0x01	; 1
    1fb4:	a9 f0       	breq	.+42     	; 0x1fe0 <set_snake_dirn+0x32>
    1fb6:	28 f0       	brcs	.+10     	; 0x1fc2 <set_snake_dirn+0x14>
    1fb8:	92 30       	cpi	r25, 0x02	; 2
    1fba:	41 f0       	breq	.+16     	; 0x1fcc <set_snake_dirn+0x1e>
    1fbc:	93 30       	cpi	r25, 0x03	; 3
    1fbe:	59 f0       	breq	.+22     	; 0x1fd6 <set_snake_dirn+0x28>
    1fc0:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	89 f0       	breq	.+34     	; 0x1fe8 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1fc6:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <nextSnakeDirn>
    1fca:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1fcc:	88 23       	and	r24, r24
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1fd0:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <nextSnakeDirn>
    1fd4:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	39 f0       	breq	.+14     	; 0x1fe8 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1fda:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <nextSnakeDirn>
    1fde:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1fe0:	83 30       	cpi	r24, 0x03	; 3
    1fe2:	11 f0       	breq	.+4      	; 0x1fe8 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1fe4:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <nextSnakeDirn>
    1fe8:	08 95       	ret

00001fea <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1fea:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1fee:	30 91 e0 02 	lds	r19, 0x02E0	; 0x8002e0 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1ff2:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1ff4:	0d c0       	rjmp	.+26     	; 0x2010 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1ff6:	e9 2f       	mov	r30, r25
    1ff8:	09 2e       	mov	r0, r25
    1ffa:	00 0c       	add	r0, r0
    1ffc:	ff 0b       	sbc	r31, r31
    1ffe:	ee 51       	subi	r30, 0x1E	; 30
    2000:	fd 4f       	sbci	r31, 0xFD	; 253
    2002:	20 81       	ld	r18, Z
    2004:	28 17       	cp	r18, r24
    2006:	89 f0       	breq	.+34     	; 0x202a <is_snake_at+0x40>
    2008:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    200a:	91 32       	cpi	r25, 0x21	; 33
    200c:	0c f0       	brlt	.+2      	; 0x2010 <is_snake_at+0x26>
			index = 0;
    200e:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    2010:	93 13       	cpse	r25, r19
    2012:	f1 cf       	rjmp	.-30     	; 0x1ff6 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    2014:	e3 2f       	mov	r30, r19
    2016:	33 0f       	add	r19, r19
    2018:	ff 0b       	sbc	r31, r31
    201a:	ee 51       	subi	r30, 0x1E	; 30
    201c:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    201e:	91 e0       	ldi	r25, 0x01	; 1
    2020:	20 81       	ld	r18, Z
    2022:	28 17       	cp	r18, r24
    2024:	19 f0       	breq	.+6      	; 0x202c <is_snake_at+0x42>
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	01 c0       	rjmp	.+2      	; 0x202c <is_snake_at+0x42>
    202a:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    202c:	89 2f       	mov	r24, r25
    202e:	08 95       	ret

00002030 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    2034:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <snakeLength>
    2038:	81 32       	cpi	r24, 0x21	; 33
    203a:	08 f0       	brcs	.+2      	; 0x203e <advance_snake_head+0xe>
    203c:	96 c0       	rjmp	.+300    	; 0x216a <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    203e:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <snakeHeadIndex>
    2042:	0e 2e       	mov	r0, r30
    2044:	00 0c       	add	r0, r0
    2046:	ff 0b       	sbc	r31, r31
    2048:	ee 51       	subi	r30, 0x1E	; 30
    204a:	fd 4f       	sbci	r31, 0xFD	; 253
    204c:	80 81       	ld	r24, Z
    204e:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    2052:	d8 2f       	mov	r29, r24
    2054:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    2056:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <snakeHeadIndex>
    205a:	0e 2e       	mov	r0, r30
    205c:	00 0c       	add	r0, r0
    205e:	ff 0b       	sbc	r31, r31
    2060:	ee 51       	subi	r30, 0x1E	; 30
    2062:	fd 4f       	sbci	r31, 0xFD	; 253
    2064:	80 81       	ld	r24, Z
    2066:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    206a:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    206c:	90 91 dd 02 	lds	r25, 0x02DD	; 0x8002dd <nextSnakeDirn>
    2070:	91 30       	cpi	r25, 0x01	; 1
    2072:	59 f0       	breq	.+22     	; 0x208a <advance_snake_head+0x5a>
    2074:	28 f0       	brcs	.+10     	; 0x2080 <advance_snake_head+0x50>
    2076:	92 30       	cpi	r25, 0x02	; 2
    2078:	69 f0       	breq	.+26     	; 0x2094 <advance_snake_head+0x64>
    207a:	93 30       	cpi	r25, 0x03	; 3
    207c:	81 f0       	breq	.+32     	; 0x209e <advance_snake_head+0x6e>
    207e:	1b c0       	rjmp	.+54     	; 0x20b6 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    2080:	87 30       	cpi	r24, 0x07	; 7
    2082:	91 f0       	breq	.+36     	; 0x20a8 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    2084:	61 e0       	ldi	r22, 0x01	; 1
    2086:	68 0f       	add	r22, r24
    2088:	16 c0       	rjmp	.+44     	; 0x20b6 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    208a:	df 30       	cpi	r29, 0x0F	; 15
    208c:	79 f0       	breq	.+30     	; 0x20ac <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    208e:	c1 e0       	ldi	r28, 0x01	; 1
    2090:	cd 0f       	add	r28, r29
    2092:	11 c0       	rjmp	.+34     	; 0x20b6 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    2094:	88 23       	and	r24, r24
    2096:	61 f0       	breq	.+24     	; 0x20b0 <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	68 0f       	add	r22, r24
    209c:	0c c0       	rjmp	.+24     	; 0x20b6 <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    209e:	dd 23       	and	r29, r29
    20a0:	49 f0       	breq	.+18     	; 0x20b4 <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    20a2:	cf ef       	ldi	r28, 0xFF	; 255
    20a4:	cd 0f       	add	r28, r29
    20a6:	07 c0       	rjmp	.+14     	; 0x20b6 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    20a8:	60 e0       	ldi	r22, 0x00	; 0
    20aa:	05 c0       	rjmp	.+10     	; 0x20b6 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    20ac:	c0 e0       	ldi	r28, 0x00	; 0
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    20b0:	67 e0       	ldi	r22, 0x07	; 7
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    20b4:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    20b6:	8c 2f       	mov	r24, r28
    20b8:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    20bc:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    20be:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <nextSnakeDirn>
    20c2:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <curSnakeDirn>
    20c6:	98 17       	cp	r25, r24
    20c8:	41 f0       	breq	.+16     	; 0x20da <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    20ca:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    20ce:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
    20d2:	89 2b       	or	r24, r25
    20d4:	11 f0       	breq	.+4      	; 0x20da <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    20d6:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    20da:	8c 2f       	mov	r24, r28
    20dc:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <is_snake_at>
    20e0:	88 23       	and	r24, r24
    20e2:	51 f0       	breq	.+20     	; 0x20f8 <advance_snake_head+0xc8>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    20e4:	e0 91 df 02 	lds	r30, 0x02DF	; 0x8002df <snakeTailIndex>
    20e8:	0e 2e       	mov	r0, r30
    20ea:	00 0c       	add	r0, r0
    20ec:	ff 0b       	sbc	r31, r31
    20ee:	ee 51       	subi	r30, 0x1E	; 30
    20f0:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    20f2:	80 81       	ld	r24, Z
    20f4:	c8 13       	cpse	r28, r24
    20f6:	3b c0       	rjmp	.+118    	; 0x216e <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    20f8:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <snakeHeadIndex>
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    20fe:	81 32       	cpi	r24, 0x21	; 33
    2100:	19 f0       	breq	.+6      	; 0x2108 <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    2102:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <snakeHeadIndex>
    2106:	02 c0       	rjmp	.+4      	; 0x210c <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    2108:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    210c:	e0 91 e0 02 	lds	r30, 0x02E0	; 0x8002e0 <snakeHeadIndex>
    2110:	0e 2e       	mov	r0, r30
    2112:	00 0c       	add	r0, r0
    2114:	ff 0b       	sbc	r31, r31
    2116:	ee 51       	subi	r30, 0x1E	; 30
    2118:	fd 4f       	sbci	r31, 0xFD	; 253
    211a:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    211c:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <snakeLength>
    2120:	8f 5f       	subi	r24, 0xFF	; 255
    2122:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    2126:	8c 2f       	mov	r24, r28
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 9c 0c 	call	0x1938	; 0x1938 <is_rat_at>
    212e:	89 2b       	or	r24, r25
    2130:	31 f0       	breq	.+12     	; 0x213e <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    2132:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <snakeLength>
    2136:	81 32       	cpi	r24, 0x21	; 33
    2138:	e0 f0       	brcs	.+56     	; 0x2172 <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    213a:	87 e0       	ldi	r24, 0x07	; 7
    213c:	21 c0       	rjmp	.+66     	; 0x2180 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    213e:	8c 2f       	mov	r24, r28
    2140:	0e 94 44 11 	call	0x2288	; 0x2288 <is_superfood_at>
    2144:	88 23       	and	r24, r24
    2146:	31 f0       	breq	.+12     	; 0x2154 <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    2148:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <snakeLength>
    214c:	81 32       	cpi	r24, 0x21	; 33
    214e:	98 f0       	brcs	.+38     	; 0x2176 <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    2150:	85 e0       	ldi	r24, 0x05	; 5
    2152:	16 c0       	rjmp	.+44     	; 0x2180 <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    2154:	8c 2f       	mov	r24, r28
    2156:	0e 94 09 08 	call	0x1012	; 0x1012 <is_food_at>
    215a:	88 23       	and	r24, r24
    215c:	71 f0       	breq	.+28     	; 0x217a <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    215e:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <snakeLength>
    2162:	81 32       	cpi	r24, 0x21	; 33
    2164:	60 f0       	brcs	.+24     	; 0x217e <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	0b c0       	rjmp	.+22     	; 0x2180 <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    216a:	8d ef       	ldi	r24, 0xFD	; 253
    216c:	09 c0       	rjmp	.+18     	; 0x2180 <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    216e:	8e ef       	ldi	r24, 0xFE	; 254
    2170:	07 c0       	rjmp	.+14     	; 0x2180 <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    2172:	86 e0       	ldi	r24, 0x06	; 6
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    2176:	84 e0       	ldi	r24, 0x04	; 4
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    217e:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    2180:	df 91       	pop	r29
    2182:	cf 91       	pop	r28
    2184:	08 95       	ret

00002186 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2186:	94 b1       	in	r25, 0x04	; 4
    2188:	90 6b       	ori	r25, 0xB0	; 176
    218a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    218c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    218e:	90 e5       	ldi	r25, 0x50	; 80
    2190:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2192:	88 30       	cpi	r24, 0x08	; 8
    2194:	21 f0       	breq	.+8      	; 0x219e <spi_setup_master+0x18>
    2196:	80 32       	cpi	r24, 0x20	; 32
    2198:	11 f0       	breq	.+4      	; 0x219e <spi_setup_master+0x18>
    219a:	82 30       	cpi	r24, 0x02	; 2
    219c:	19 f4       	brne	.+6      	; 0x21a4 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	9d bd       	out	0x2d, r25	; 45
			break;
    21a2:	01 c0       	rjmp	.+2      	; 0x21a6 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    21a4:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    21a6:	80 32       	cpi	r24, 0x20	; 32
    21a8:	69 f0       	breq	.+26     	; 0x21c4 <spi_setup_master+0x3e>
    21aa:	28 f4       	brcc	.+10     	; 0x21b6 <spi_setup_master+0x30>
    21ac:	88 30       	cpi	r24, 0x08	; 8
    21ae:	71 f0       	breq	.+28     	; 0x21cc <spi_setup_master+0x46>
    21b0:	80 31       	cpi	r24, 0x10	; 16
    21b2:	61 f0       	breq	.+24     	; 0x21cc <spi_setup_master+0x46>
    21b4:	0e c0       	rjmp	.+28     	; 0x21d2 <spi_setup_master+0x4c>
    21b6:	80 34       	cpi	r24, 0x40	; 64
    21b8:	29 f0       	breq	.+10     	; 0x21c4 <spi_setup_master+0x3e>
    21ba:	80 38       	cpi	r24, 0x80	; 128
    21bc:	51 f4       	brne	.+20     	; 0x21d2 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    21be:	8c b5       	in	r24, 0x2c	; 44
    21c0:	81 60       	ori	r24, 0x01	; 1
    21c2:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    21c4:	8c b5       	in	r24, 0x2c	; 44
    21c6:	82 60       	ori	r24, 0x02	; 2
    21c8:	8c bd       	out	0x2c, r24	; 44
			break;
    21ca:	03 c0       	rjmp	.+6      	; 0x21d2 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    21cc:	8c b5       	in	r24, 0x2c	; 44
    21ce:	81 60       	ori	r24, 0x01	; 1
    21d0:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    21d2:	2c 98       	cbi	0x05, 4	; 5
    21d4:	08 95       	ret

000021d6 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    21d6:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    21d8:	0d b4       	in	r0, 0x2d	; 45
    21da:	07 fe       	sbrs	r0, 7
    21dc:	fd cf       	rjmp	.-6      	; 0x21d8 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    21de:	8e b5       	in	r24, 0x2e	; 46
    21e0:	08 95       	ret

000021e2 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    21e2:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <superfood_position>
	superfood_on_board = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <superfood_on_board>
}
    21ec:	08 95       	ret

000021ee <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    21ee:	80 91 40 04 	lds	r24, 0x0440	; 0x800440 <superfood_on_board>
    21f2:	08 95       	ret

000021f4 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    21f4:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    21f8:	68 59       	subi	r22, 0x98	; 152
    21fa:	7a 43       	sbci	r23, 0x3A	; 58
    21fc:	81 09       	sbc	r24, r1
    21fe:	91 09       	sbc	r25, r1
    2200:	20 e2       	ldi	r18, 0x20	; 32
    2202:	3e e4       	ldi	r19, 0x4E	; 78
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodsi4>
    220c:	67 2b       	or	r22, r23
    220e:	68 2b       	or	r22, r24
    2210:	69 2b       	or	r22, r25
    2212:	21 f4       	brne	.+8      	; 0x221c <time_to_add_superfood+0x28>
    2214:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	08 95       	ret
    221c:	80 e0       	ldi	r24, 0x00	; 0
}
    221e:	08 95       	ret

00002220 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    2220:	0e 94 86 12 	call	0x250c	; 0x250c <get_clock_ticks>
    2224:	20 e2       	ldi	r18, 0x20	; 32
    2226:	3e e4       	ldi	r19, 0x4E	; 78
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	50 e0       	ldi	r21, 0x00	; 0
    222c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodsi4>
    2230:	21 e0       	ldi	r18, 0x01	; 1
    2232:	67 2b       	or	r22, r23
    2234:	68 2b       	or	r22, r24
    2236:	69 2b       	or	r22, r25
    2238:	09 f0       	breq	.+2      	; 0x223c <time_to_remove_superfood+0x1c>
    223a:	20 e0       	ldi	r18, 0x00	; 0
}
    223c:	82 2f       	mov	r24, r18
    223e:	08 95       	ret

00002240 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    2240:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    2242:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <superfood_position>
    2246:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    224a:	c8 2f       	mov	r28, r24
    224c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <superfood_position>
    2250:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    2254:	40 e0       	ldi	r20, 0x00	; 0
    2256:	6c 2f       	mov	r22, r28
    2258:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    225c:	60 e0       	ldi	r22, 0x00	; 0
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    2264:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <superfood_position>
	superfood_on_board = 0; 
    2268:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <superfood_on_board>
}
    226c:	cf 91       	pop	r28
    226e:	08 95       	ret

00002270 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	80 e0       	ldi	r24, 0x00	; 0
    2274:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    2278:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <superfood_position>
	superfood_on_board = 0;
    227c:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <superfood_on_board>
    2280:	08 95       	ret

00002282 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    2282:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <superfood_position>
    2286:	08 95       	ret

00002288 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    2288:	90 91 40 04 	lds	r25, 0x0440	; 0x800440 <superfood_on_board>
    228c:	99 23       	and	r25, r25
    228e:	39 f0       	breq	.+14     	; 0x229e <is_superfood_at+0x16>
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	20 91 3f 04 	lds	r18, 0x043F	; 0x80043f <superfood_position>
    2296:	28 13       	cpse	r18, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	89 2f       	mov	r24, r25
    229c:	08 95       	ret
    229e:	80 e0       	ldi	r24, 0x00	; 0
}
    22a0:	08 95       	ret

000022a2 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    22a8:	0e 94 20 11 	call	0x2240	; 0x2240 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    22ac:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
    22b0:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    22b2:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
		test_position = position(x,y);
    22b6:	bc 01       	movw	r22, r24
    22b8:	67 70       	andi	r22, 0x07	; 7
    22ba:	70 78       	andi	r23, 0x80	; 128
    22bc:	77 23       	and	r23, r23
    22be:	34 f4       	brge	.+12     	; 0x22cc <add_superfood_to_board+0x2a>
    22c0:	61 50       	subi	r22, 0x01	; 1
    22c2:	71 09       	sbc	r23, r1
    22c4:	68 6f       	ori	r22, 0xF8	; 248
    22c6:	7f 6f       	ori	r23, 0xFF	; 255
    22c8:	6f 5f       	subi	r22, 0xFF	; 255
    22ca:	7f 4f       	sbci	r23, 0xFF	; 255
    22cc:	ce 01       	movw	r24, r28
    22ce:	8f 70       	andi	r24, 0x0F	; 15
    22d0:	90 78       	andi	r25, 0x80	; 128
    22d2:	99 23       	and	r25, r25
    22d4:	24 f4       	brge	.+8      	; 0x22de <add_superfood_to_board+0x3c>
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	80 6f       	ori	r24, 0xF0	; 240
    22da:	9f 6f       	ori	r25, 0xFF	; 255
    22dc:	01 96       	adiw	r24, 0x01	; 1
    22de:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    22e2:	c8 2f       	mov	r28, r24
    22e4:	13 e6       	ldi	r17, 0x63	; 99
    22e6:	1e c0       	rjmp	.+60     	; 0x2324 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    22e8:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
    22ec:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    22ee:	0e 94 dd 14 	call	0x29ba	; 0x29ba <rand>
		test_position = position(x,y);
    22f2:	bc 01       	movw	r22, r24
    22f4:	67 70       	andi	r22, 0x07	; 7
    22f6:	70 78       	andi	r23, 0x80	; 128
    22f8:	77 23       	and	r23, r23
    22fa:	34 f4       	brge	.+12     	; 0x2308 <add_superfood_to_board+0x66>
    22fc:	61 50       	subi	r22, 0x01	; 1
    22fe:	71 09       	sbc	r23, r1
    2300:	68 6f       	ori	r22, 0xF8	; 248
    2302:	7f 6f       	ori	r23, 0xFF	; 255
    2304:	6f 5f       	subi	r22, 0xFF	; 255
    2306:	7f 4f       	sbci	r23, 0xFF	; 255
    2308:	ce 01       	movw	r24, r28
    230a:	8f 70       	andi	r24, 0x0F	; 15
    230c:	90 78       	andi	r25, 0x80	; 128
    230e:	99 23       	and	r25, r25
    2310:	24 f4       	brge	.+8      	; 0x231a <add_superfood_to_board+0x78>
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	80 6f       	ori	r24, 0xF0	; 240
    2316:	9f 6f       	ori	r25, 0xFF	; 255
    2318:	01 96       	adiw	r24, 0x01	; 1
    231a:	0e 94 be 09 	call	0x137c	; 0x137c <position>
    231e:	c8 2f       	mov	r28, r24
    2320:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    2322:	a1 f0       	breq	.+40     	; 0x234c <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    2324:	8c 2f       	mov	r24, r28
    2326:	0e 94 f5 0f 	call	0x1fea	; 0x1fea <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    232a:	81 11       	cpse	r24, r1
    232c:	dd cf       	rjmp	.-70     	; 0x22e8 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    232e:	8c 2f       	mov	r24, r28
    2330:	0e 94 09 08 	call	0x1012	; 0x1012 <is_food_at>
    2334:	81 11       	cpse	r24, r1
    2336:	d8 cf       	rjmp	.-80     	; 0x22e8 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    2338:	8c 2f       	mov	r24, r28
    233a:	0e 94 44 11 	call	0x2288	; 0x2288 <is_superfood_at>
    233e:	81 11       	cpse	r24, r1
    2340:	d3 cf       	rjmp	.-90     	; 0x22e8 <add_superfood_to_board+0x46>
    2342:	8c 2f       	mov	r24, r28
    2344:	0e 94 9c 0c 	call	0x1938	; 0x1938 <is_rat_at>
    2348:	81 11       	cpse	r24, r1
    234a:	ce cf       	rjmp	.-100    	; 0x22e8 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    234c:	c0 93 3f 04 	sts	0x043F, r28	; 0x80043f <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    2350:	8c 2f       	mov	r24, r28
    2352:	0e 94 b6 09 	call	0x136c	; 0x136c <y_position>
    2356:	c8 2f       	mov	r28, r24
    2358:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <superfood_position>
    235c:	0e 94 b3 09 	call	0x1366	; 0x1366 <x_position>
    2360:	4c e3       	ldi	r20, 0x3C	; 60
    2362:	6c 2f       	mov	r22, r28
    2364:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <superfood_on_board>
}
    236e:	df 91       	pop	r29
    2370:	cf 91       	pop	r28
    2372:	1f 91       	pop	r17
    2374:	08 95       	ret

00002376 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    2376:	28 2f       	mov	r18, r24
    2378:	08 2e       	mov	r0, r24
    237a:	00 0c       	add	r0, r0
    237c:	33 0b       	sbc	r19, r19
    237e:	3f 93       	push	r19
    2380:	8f 93       	push	r24
    2382:	86 2f       	mov	r24, r22
    2384:	06 2e       	mov	r0, r22
    2386:	00 0c       	add	r0, r0
    2388:	99 0b       	sbc	r25, r25
    238a:	9f 93       	push	r25
    238c:	6f 93       	push	r22
    238e:	8d ed       	ldi	r24, 0xDD	; 221
    2390:	91 e0       	ldi	r25, 0x01	; 1
    2392:	9f 93       	push	r25
    2394:	8f 93       	push	r24
    2396:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	08 95       	ret

000023a8 <clear_terminal>:
    23a8:	88 ed       	ldi	r24, 0xD8	; 216
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	9f 93       	push	r25
    23ae:	8f 93       	push	r24
    23b0:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	08 95       	ret

000023ba <set_display_attribute>:
    23ba:	1f 92       	push	r1
    23bc:	8f 93       	push	r24
    23be:	82 ed       	ldi	r24, 0xD2	; 210
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	9f 93       	push	r25
    23c4:	8f 93       	push	r24
    23c6:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	08 95       	ret

000023d4 <hide_cursor>:
    23d4:	8b ec       	ldi	r24, 0xCB	; 203
    23d6:	91 e0       	ldi	r25, 0x01	; 1
    23d8:	9f 93       	push	r25
    23da:	8f 93       	push	r24
    23dc:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	08 95       	ret

000023e6 <show_cursor>:
    23e6:	84 ec       	ldi	r24, 0xC4	; 196
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	9f 93       	push	r25
    23ec:	8f 93       	push	r24
    23ee:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	08 95       	ret

000023f8 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    23f8:	63 e0       	ldi	r22, 0x03	; 3
    23fa:	83 e0       	ldi	r24, 0x03	; 3
    23fc:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf_P(PSTR("Snake"));
    2400:	8e eb       	ldi	r24, 0xBE	; 190
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	9f 93       	push	r25
    2406:	8f 93       	push	r24
    2408:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>

	move_cursor(3,5);
    240c:	65 e0       	ldi	r22, 0x05	; 5
    240e:	83 e0       	ldi	r24, 0x03	; 3
    2410:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    2414:	80 e2       	ldi	r24, 0x20	; 32
    2416:	0e 94 dd 11 	call	0x23ba	; 0x23ba <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    241a:	84 e9       	ldi	r24, 0x94	; 148
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	9f 93       	push	r25
    2420:	8f 93       	push	r24
    2422:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    2426:	85 e2       	ldi	r24, 0x25	; 37
    2428:	0e 94 dd 11 	call	0x23ba	; 0x23ba <set_display_attribute>
	display_EEPROM_high_score();
    242c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <display_EEPROM_high_score>
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	08 95       	ret

0000243a <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    243a:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <hide_cursor>
	
	move_cursor(10,1);
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	8a e0       	ldi	r24, 0x0A	; 10
    2442:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf("Snake");
    2446:	81 eb       	ldi	r24, 0xB1	; 177
    2448:	92 e0       	ldi	r25, 0x02	; 2
    244a:	9f 93       	push	r25
    244c:	8f 93       	push	r24
    244e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>

	move_cursor(1,3);
    2452:	63 e0       	ldi	r22, 0x03	; 3
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf("Score: 0", get_score());
    245a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
    245e:	9f 93       	push	r25
    2460:	8f 93       	push	r24
    2462:	7f 93       	push	r23
    2464:	6f 93       	push	r22
    2466:	87 eb       	ldi	r24, 0xB7	; 183
    2468:	92 e0       	ldi	r25, 0x02	; 2
    246a:	9f 93       	push	r25
    246c:	8f 93       	push	r24
    246e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
	move_cursor(10,3);
    2472:	63 e0       	ldi	r22, 0x03	; 3
    2474:	8a e0       	ldi	r24, 0x0A	; 10
    2476:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
}
    247a:	8d b7       	in	r24, 0x3d	; 61
    247c:	9e b7       	in	r25, 0x3e	; 62
    247e:	08 96       	adiw	r24, 0x08	; 8
    2480:	0f b6       	in	r0, 0x3f	; 63
    2482:	f8 94       	cli
    2484:	9e bf       	out	0x3e, r25	; 62
    2486:	0f be       	out	0x3f, r0	; 63
    2488:	8d bf       	out	0x3d, r24	; 61
    248a:	08 95       	ret

0000248c <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    248c:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <hide_cursor>
	move_cursor(1,3);
    2490:	63 e0       	ldi	r22, 0x03	; 3
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	0e 94 bb 11 	call	0x2376	; 0x2376 <move_cursor>
	printf("Score: %u", get_score());
    2498:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <get_score>
    249c:	9f 93       	push	r25
    249e:	8f 93       	push	r24
    24a0:	7f 93       	push	r23
    24a2:	6f 93       	push	r22
    24a4:	87 ea       	ldi	r24, 0xA7	; 167
    24a6:	92 e0       	ldi	r25, 0x02	; 2
    24a8:	9f 93       	push	r25
    24aa:	8f 93       	push	r24
    24ac:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <printf>
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	08 95       	ret

000024be <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    24be:	10 92 03 03 	sts	0x0303, r1	; 0x800303 <clock_ticks>
    24c2:	10 92 04 03 	sts	0x0304, r1	; 0x800304 <clock_ticks+0x1>
    24c6:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <clock_ticks+0x2>
    24ca:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    24ce:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    24d0:	8c e7       	ldi	r24, 0x7C	; 124
    24d2:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    24d4:	82 e0       	ldi	r24, 0x02	; 2
    24d6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    24d8:	83 e0       	ldi	r24, 0x03	; 3
    24da:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    24dc:	ee e6       	ldi	r30, 0x6E	; 110
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	82 60       	ori	r24, 0x02	; 2
    24e4:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    24e6:	85 b3       	in	r24, 0x15	; 21
    24e8:	82 70       	andi	r24, 0x02	; 2
    24ea:	85 bb       	out	0x15, r24	; 21
    24ec:	08 95       	ret

000024ee <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	//unpaused_game = 1- unpaused_game;
	TIMSK0 ^= (1<<OCIE0A);
    24ee:	ee e6       	ldi	r30, 0x6E	; 110
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	90 81       	ld	r25, Z
    24f4:	82 e0       	ldi	r24, 0x02	; 2
    24f6:	89 27       	eor	r24, r25
    24f8:	80 83       	st	Z, r24
    24fa:	08 95       	ret

000024fc <timer_is_paused>:
}
int timer_is_paused(void){
	//return !unpaused_game;
	return !(TIMSK0 & (1<<OCIE0A)); 
    24fc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2500:	86 95       	lsr	r24
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	89 27       	eor	r24, r25
}
    2506:	81 70       	andi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	08 95       	ret

0000250c <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    250c:	2f b7       	in	r18, 0x3f	; 63
	cli();
    250e:	f8 94       	cli
	return_value = clock_ticks;
    2510:	60 91 03 03 	lds	r22, 0x0303	; 0x800303 <clock_ticks>
    2514:	70 91 04 03 	lds	r23, 0x0304	; 0x800304 <clock_ticks+0x1>
    2518:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <clock_ticks+0x2>
    251c:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <clock_ticks+0x3>
	if(interrupts_were_on) {
    2520:	22 23       	and	r18, r18
    2522:	0c f4       	brge	.+2      	; 0x2526 <get_clock_ticks+0x1a>
		sei();
    2524:	78 94       	sei
	}
	return return_value;
}
    2526:	08 95       	ret

00002528 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    2528:	2f b7       	in	r18, 0x3f	; 63
	cli();
    252a:	f8 94       	cli
	clock_ticks =clock;
    252c:	60 93 03 03 	sts	0x0303, r22	; 0x800303 <clock_ticks>
    2530:	70 93 04 03 	sts	0x0304, r23	; 0x800304 <clock_ticks+0x1>
    2534:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <clock_ticks+0x2>
    2538:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <clock_ticks+0x3>
	if(interrupts_were_on) {
    253c:	22 23       	and	r18, r18
    253e:	0c f4       	brge	.+2      	; 0x2542 <set_clock_ticks+0x1a>
		sei();
    2540:	78 94       	sei
    2542:	08 95       	ret

00002544 <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    2544:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <SSD_CC_value>
    2548:	88 23       	and	r24, r24
    254a:	81 f0       	breq	.+32     	; 0x256c <display_SSD_value+0x28>
		PORTD |= (1<<2);
    254c:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    254e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <get_snake_length>
    2552:	ed ec       	ldi	r30, 0xCD	; 205
    2554:	8e 9f       	mul	r24, r30
    2556:	e1 2d       	mov	r30, r1
    2558:	11 24       	eor	r1, r1
    255a:	e6 95       	lsr	r30
    255c:	e6 95       	lsr	r30
    255e:	e6 95       	lsr	r30
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	e9 5d       	subi	r30, 0xD9	; 217
    2564:	fe 4f       	sbci	r31, 0xFE	; 254
    2566:	80 81       	ld	r24, Z
    2568:	82 b9       	out	0x02, r24	; 2
    256a:	16 c0       	rjmp	.+44     	; 0x2598 <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    256c:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    256e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <get_snake_length>
    2572:	9d ec       	ldi	r25, 0xCD	; 205
    2574:	89 9f       	mul	r24, r25
    2576:	91 2d       	mov	r25, r1
    2578:	11 24       	eor	r1, r1
    257a:	96 95       	lsr	r25
    257c:	96 95       	lsr	r25
    257e:	96 95       	lsr	r25
    2580:	99 0f       	add	r25, r25
    2582:	29 2f       	mov	r18, r25
    2584:	22 0f       	add	r18, r18
    2586:	22 0f       	add	r18, r18
    2588:	92 0f       	add	r25, r18
    258a:	89 1b       	sub	r24, r25
    258c:	e8 2f       	mov	r30, r24
    258e:	f0 e0       	ldi	r31, 0x00	; 0
    2590:	e3 5e       	subi	r30, 0xE3	; 227
    2592:	fe 4f       	sbci	r31, 0xFE	; 254
    2594:	80 81       	ld	r24, Z
    2596:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    2598:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <SSD_CC_value>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	89 1b       	sub	r24, r25
    25a0:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <SSD_CC_value>
    25a4:	08 95       	ret

000025a6 <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    25a6:	1f 92       	push	r1
    25a8:	0f 92       	push	r0
    25aa:	0f b6       	in	r0, 0x3f	; 63
    25ac:	0f 92       	push	r0
    25ae:	11 24       	eor	r1, r1
    25b0:	2f 93       	push	r18
    25b2:	3f 93       	push	r19
    25b4:	4f 93       	push	r20
    25b6:	5f 93       	push	r21
    25b8:	6f 93       	push	r22
    25ba:	7f 93       	push	r23
    25bc:	8f 93       	push	r24
    25be:	9f 93       	push	r25
    25c0:	af 93       	push	r26
    25c2:	bf 93       	push	r27
    25c4:	ef 93       	push	r30
    25c6:	ff 93       	push	r31
	// TODO: 
	clock_ticks++;
    25c8:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <clock_ticks>
    25cc:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <clock_ticks+0x1>
    25d0:	a0 91 05 03 	lds	r26, 0x0305	; 0x800305 <clock_ticks+0x2>
    25d4:	b0 91 06 03 	lds	r27, 0x0306	; 0x800306 <clock_ticks+0x3>
    25d8:	01 96       	adiw	r24, 0x01	; 1
    25da:	a1 1d       	adc	r26, r1
    25dc:	b1 1d       	adc	r27, r1
    25de:	80 93 03 03 	sts	0x0303, r24	; 0x800303 <clock_ticks>
    25e2:	90 93 04 03 	sts	0x0304, r25	; 0x800304 <clock_ticks+0x1>
    25e6:	a0 93 05 03 	sts	0x0305, r26	; 0x800305 <clock_ticks+0x2>
    25ea:	b0 93 06 03 	sts	0x0306, r27	; 0x800306 <clock_ticks+0x3>
	display_SSD_value();
    25ee:	0e 94 a2 12 	call	0x2544	; 0x2544 <display_SSD_value>
}
    25f2:	ff 91       	pop	r31
    25f4:	ef 91       	pop	r30
    25f6:	bf 91       	pop	r27
    25f8:	af 91       	pop	r26
    25fa:	9f 91       	pop	r25
    25fc:	8f 91       	pop	r24
    25fe:	7f 91       	pop	r23
    2600:	6f 91       	pop	r22
    2602:	5f 91       	pop	r21
    2604:	4f 91       	pop	r20
    2606:	3f 91       	pop	r19
    2608:	2f 91       	pop	r18
    260a:	0f 90       	pop	r0
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	0f 90       	pop	r0
    2610:	1f 90       	pop	r1
    2612:	18 95       	reti

00002614 <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    2614:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2618:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    261c:	e1 e8       	ldi	r30, 0x81	; 129
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	8a 60       	ori	r24, 0x0A	; 10
    2624:	80 83       	st	Z, r24
    2626:	80 e4       	ldi	r24, 0x40	; 64
    2628:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    262c:	88 ee       	ldi	r24, 0xE8	; 232
    262e:	93 e0       	ldi	r25, 0x03	; 3
    2630:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2634:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2638:	55 98       	cbi	0x0a, 5	; 10
    263a:	53 98       	cbi	0x0a, 3	; 10
    263c:	08 95       	ret

0000263e <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    263e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2642:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2646:	08 95       	ret

00002648 <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    2648:	55 9a       	sbi	0x0a, 5	; 10
    264a:	08 95       	ret

0000264c <__fixunssfsi>:
    264c:	0e 94 9a 13 	call	0x2734	; 0x2734 <__fp_splitA>
    2650:	88 f0       	brcs	.+34     	; 0x2674 <__fixunssfsi+0x28>
    2652:	9f 57       	subi	r25, 0x7F	; 127
    2654:	98 f0       	brcs	.+38     	; 0x267c <__fixunssfsi+0x30>
    2656:	b9 2f       	mov	r27, r25
    2658:	99 27       	eor	r25, r25
    265a:	b7 51       	subi	r27, 0x17	; 23
    265c:	b0 f0       	brcs	.+44     	; 0x268a <__fixunssfsi+0x3e>
    265e:	e1 f0       	breq	.+56     	; 0x2698 <__fixunssfsi+0x4c>
    2660:	66 0f       	add	r22, r22
    2662:	77 1f       	adc	r23, r23
    2664:	88 1f       	adc	r24, r24
    2666:	99 1f       	adc	r25, r25
    2668:	1a f0       	brmi	.+6      	; 0x2670 <__fixunssfsi+0x24>
    266a:	ba 95       	dec	r27
    266c:	c9 f7       	brne	.-14     	; 0x2660 <__fixunssfsi+0x14>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <__fixunssfsi+0x4c>
    2670:	b1 30       	cpi	r27, 0x01	; 1
    2672:	91 f0       	breq	.+36     	; 0x2698 <__fixunssfsi+0x4c>
    2674:	0e 94 b4 13 	call	0x2768	; 0x2768 <__fp_zero>
    2678:	b1 e0       	ldi	r27, 0x01	; 1
    267a:	08 95       	ret
    267c:	0c 94 b4 13 	jmp	0x2768	; 0x2768 <__fp_zero>
    2680:	67 2f       	mov	r22, r23
    2682:	78 2f       	mov	r23, r24
    2684:	88 27       	eor	r24, r24
    2686:	b8 5f       	subi	r27, 0xF8	; 248
    2688:	39 f0       	breq	.+14     	; 0x2698 <__fixunssfsi+0x4c>
    268a:	b9 3f       	cpi	r27, 0xF9	; 249
    268c:	cc f3       	brlt	.-14     	; 0x2680 <__fixunssfsi+0x34>
    268e:	86 95       	lsr	r24
    2690:	77 95       	ror	r23
    2692:	67 95       	ror	r22
    2694:	b3 95       	inc	r27
    2696:	d9 f7       	brne	.-10     	; 0x268e <__fixunssfsi+0x42>
    2698:	3e f4       	brtc	.+14     	; 0x26a8 <__fixunssfsi+0x5c>
    269a:	90 95       	com	r25
    269c:	80 95       	com	r24
    269e:	70 95       	com	r23
    26a0:	61 95       	neg	r22
    26a2:	7f 4f       	sbci	r23, 0xFF	; 255
    26a4:	8f 4f       	sbci	r24, 0xFF	; 255
    26a6:	9f 4f       	sbci	r25, 0xFF	; 255
    26a8:	08 95       	ret

000026aa <__floatunsisf>:
    26aa:	e8 94       	clt
    26ac:	09 c0       	rjmp	.+18     	; 0x26c0 <__floatsisf+0x12>

000026ae <__floatsisf>:
    26ae:	97 fb       	bst	r25, 7
    26b0:	3e f4       	brtc	.+14     	; 0x26c0 <__floatsisf+0x12>
    26b2:	90 95       	com	r25
    26b4:	80 95       	com	r24
    26b6:	70 95       	com	r23
    26b8:	61 95       	neg	r22
    26ba:	7f 4f       	sbci	r23, 0xFF	; 255
    26bc:	8f 4f       	sbci	r24, 0xFF	; 255
    26be:	9f 4f       	sbci	r25, 0xFF	; 255
    26c0:	99 23       	and	r25, r25
    26c2:	a9 f0       	breq	.+42     	; 0x26ee <__floatsisf+0x40>
    26c4:	f9 2f       	mov	r31, r25
    26c6:	96 e9       	ldi	r25, 0x96	; 150
    26c8:	bb 27       	eor	r27, r27
    26ca:	93 95       	inc	r25
    26cc:	f6 95       	lsr	r31
    26ce:	87 95       	ror	r24
    26d0:	77 95       	ror	r23
    26d2:	67 95       	ror	r22
    26d4:	b7 95       	ror	r27
    26d6:	f1 11       	cpse	r31, r1
    26d8:	f8 cf       	rjmp	.-16     	; 0x26ca <__floatsisf+0x1c>
    26da:	fa f4       	brpl	.+62     	; 0x271a <__floatsisf+0x6c>
    26dc:	bb 0f       	add	r27, r27
    26de:	11 f4       	brne	.+4      	; 0x26e4 <__floatsisf+0x36>
    26e0:	60 ff       	sbrs	r22, 0
    26e2:	1b c0       	rjmp	.+54     	; 0x271a <__floatsisf+0x6c>
    26e4:	6f 5f       	subi	r22, 0xFF	; 255
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	8f 4f       	sbci	r24, 0xFF	; 255
    26ea:	9f 4f       	sbci	r25, 0xFF	; 255
    26ec:	16 c0       	rjmp	.+44     	; 0x271a <__floatsisf+0x6c>
    26ee:	88 23       	and	r24, r24
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <__floatsisf+0x48>
    26f2:	96 e9       	ldi	r25, 0x96	; 150
    26f4:	11 c0       	rjmp	.+34     	; 0x2718 <__floatsisf+0x6a>
    26f6:	77 23       	and	r23, r23
    26f8:	21 f0       	breq	.+8      	; 0x2702 <__floatsisf+0x54>
    26fa:	9e e8       	ldi	r25, 0x8E	; 142
    26fc:	87 2f       	mov	r24, r23
    26fe:	76 2f       	mov	r23, r22
    2700:	05 c0       	rjmp	.+10     	; 0x270c <__floatsisf+0x5e>
    2702:	66 23       	and	r22, r22
    2704:	71 f0       	breq	.+28     	; 0x2722 <__floatsisf+0x74>
    2706:	96 e8       	ldi	r25, 0x86	; 134
    2708:	86 2f       	mov	r24, r22
    270a:	70 e0       	ldi	r23, 0x00	; 0
    270c:	60 e0       	ldi	r22, 0x00	; 0
    270e:	2a f0       	brmi	.+10     	; 0x271a <__floatsisf+0x6c>
    2710:	9a 95       	dec	r25
    2712:	66 0f       	add	r22, r22
    2714:	77 1f       	adc	r23, r23
    2716:	88 1f       	adc	r24, r24
    2718:	da f7       	brpl	.-10     	; 0x2710 <__floatsisf+0x62>
    271a:	88 0f       	add	r24, r24
    271c:	96 95       	lsr	r25
    271e:	87 95       	ror	r24
    2720:	97 f9       	bld	r25, 7
    2722:	08 95       	ret

00002724 <__fp_split3>:
    2724:	57 fd       	sbrc	r21, 7
    2726:	90 58       	subi	r25, 0x80	; 128
    2728:	44 0f       	add	r20, r20
    272a:	55 1f       	adc	r21, r21
    272c:	59 f0       	breq	.+22     	; 0x2744 <__fp_splitA+0x10>
    272e:	5f 3f       	cpi	r21, 0xFF	; 255
    2730:	71 f0       	breq	.+28     	; 0x274e <__fp_splitA+0x1a>
    2732:	47 95       	ror	r20

00002734 <__fp_splitA>:
    2734:	88 0f       	add	r24, r24
    2736:	97 fb       	bst	r25, 7
    2738:	99 1f       	adc	r25, r25
    273a:	61 f0       	breq	.+24     	; 0x2754 <__fp_splitA+0x20>
    273c:	9f 3f       	cpi	r25, 0xFF	; 255
    273e:	79 f0       	breq	.+30     	; 0x275e <__fp_splitA+0x2a>
    2740:	87 95       	ror	r24
    2742:	08 95       	ret
    2744:	12 16       	cp	r1, r18
    2746:	13 06       	cpc	r1, r19
    2748:	14 06       	cpc	r1, r20
    274a:	55 1f       	adc	r21, r21
    274c:	f2 cf       	rjmp	.-28     	; 0x2732 <__fp_split3+0xe>
    274e:	46 95       	lsr	r20
    2750:	f1 df       	rcall	.-30     	; 0x2734 <__fp_splitA>
    2752:	08 c0       	rjmp	.+16     	; 0x2764 <__fp_splitA+0x30>
    2754:	16 16       	cp	r1, r22
    2756:	17 06       	cpc	r1, r23
    2758:	18 06       	cpc	r1, r24
    275a:	99 1f       	adc	r25, r25
    275c:	f1 cf       	rjmp	.-30     	; 0x2740 <__fp_splitA+0xc>
    275e:	86 95       	lsr	r24
    2760:	71 05       	cpc	r23, r1
    2762:	61 05       	cpc	r22, r1
    2764:	08 94       	sec
    2766:	08 95       	ret

00002768 <__fp_zero>:
    2768:	e8 94       	clt

0000276a <__fp_szero>:
    276a:	bb 27       	eor	r27, r27
    276c:	66 27       	eor	r22, r22
    276e:	77 27       	eor	r23, r23
    2770:	cb 01       	movw	r24, r22
    2772:	97 f9       	bld	r25, 7
    2774:	08 95       	ret

00002776 <__mulsf3>:
    2776:	0e 94 ce 13 	call	0x279c	; 0x279c <__mulsf3x>
    277a:	0c 94 3f 14 	jmp	0x287e	; 0x287e <__fp_round>
    277e:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_pscA>
    2782:	38 f0       	brcs	.+14     	; 0x2792 <__mulsf3+0x1c>
    2784:	0e 94 38 14 	call	0x2870	; 0x2870 <__fp_pscB>
    2788:	20 f0       	brcs	.+8      	; 0x2792 <__mulsf3+0x1c>
    278a:	95 23       	and	r25, r21
    278c:	11 f0       	breq	.+4      	; 0x2792 <__mulsf3+0x1c>
    278e:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__fp_inf>
    2792:	0c 94 2e 14 	jmp	0x285c	; 0x285c <__fp_nan>
    2796:	11 24       	eor	r1, r1
    2798:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>

0000279c <__mulsf3x>:
    279c:	0e 94 92 13 	call	0x2724	; 0x2724 <__fp_split3>
    27a0:	70 f3       	brcs	.-36     	; 0x277e <__mulsf3+0x8>

000027a2 <__mulsf3_pse>:
    27a2:	95 9f       	mul	r25, r21
    27a4:	c1 f3       	breq	.-16     	; 0x2796 <__mulsf3+0x20>
    27a6:	95 0f       	add	r25, r21
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	55 1f       	adc	r21, r21
    27ac:	62 9f       	mul	r22, r18
    27ae:	f0 01       	movw	r30, r0
    27b0:	72 9f       	mul	r23, r18
    27b2:	bb 27       	eor	r27, r27
    27b4:	f0 0d       	add	r31, r0
    27b6:	b1 1d       	adc	r27, r1
    27b8:	63 9f       	mul	r22, r19
    27ba:	aa 27       	eor	r26, r26
    27bc:	f0 0d       	add	r31, r0
    27be:	b1 1d       	adc	r27, r1
    27c0:	aa 1f       	adc	r26, r26
    27c2:	64 9f       	mul	r22, r20
    27c4:	66 27       	eor	r22, r22
    27c6:	b0 0d       	add	r27, r0
    27c8:	a1 1d       	adc	r26, r1
    27ca:	66 1f       	adc	r22, r22
    27cc:	82 9f       	mul	r24, r18
    27ce:	22 27       	eor	r18, r18
    27d0:	b0 0d       	add	r27, r0
    27d2:	a1 1d       	adc	r26, r1
    27d4:	62 1f       	adc	r22, r18
    27d6:	73 9f       	mul	r23, r19
    27d8:	b0 0d       	add	r27, r0
    27da:	a1 1d       	adc	r26, r1
    27dc:	62 1f       	adc	r22, r18
    27de:	83 9f       	mul	r24, r19
    27e0:	a0 0d       	add	r26, r0
    27e2:	61 1d       	adc	r22, r1
    27e4:	22 1f       	adc	r18, r18
    27e6:	74 9f       	mul	r23, r20
    27e8:	33 27       	eor	r19, r19
    27ea:	a0 0d       	add	r26, r0
    27ec:	61 1d       	adc	r22, r1
    27ee:	23 1f       	adc	r18, r19
    27f0:	84 9f       	mul	r24, r20
    27f2:	60 0d       	add	r22, r0
    27f4:	21 1d       	adc	r18, r1
    27f6:	82 2f       	mov	r24, r18
    27f8:	76 2f       	mov	r23, r22
    27fa:	6a 2f       	mov	r22, r26
    27fc:	11 24       	eor	r1, r1
    27fe:	9f 57       	subi	r25, 0x7F	; 127
    2800:	50 40       	sbci	r21, 0x00	; 0
    2802:	9a f0       	brmi	.+38     	; 0x282a <__mulsf3_pse+0x88>
    2804:	f1 f0       	breq	.+60     	; 0x2842 <__mulsf3_pse+0xa0>
    2806:	88 23       	and	r24, r24
    2808:	4a f0       	brmi	.+18     	; 0x281c <__mulsf3_pse+0x7a>
    280a:	ee 0f       	add	r30, r30
    280c:	ff 1f       	adc	r31, r31
    280e:	bb 1f       	adc	r27, r27
    2810:	66 1f       	adc	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	91 50       	subi	r25, 0x01	; 1
    2818:	50 40       	sbci	r21, 0x00	; 0
    281a:	a9 f7       	brne	.-22     	; 0x2806 <__mulsf3_pse+0x64>
    281c:	9e 3f       	cpi	r25, 0xFE	; 254
    281e:	51 05       	cpc	r21, r1
    2820:	80 f0       	brcs	.+32     	; 0x2842 <__mulsf3_pse+0xa0>
    2822:	0c 94 28 14 	jmp	0x2850	; 0x2850 <__fp_inf>
    2826:	0c 94 b5 13 	jmp	0x276a	; 0x276a <__fp_szero>
    282a:	5f 3f       	cpi	r21, 0xFF	; 255
    282c:	e4 f3       	brlt	.-8      	; 0x2826 <__mulsf3_pse+0x84>
    282e:	98 3e       	cpi	r25, 0xE8	; 232
    2830:	d4 f3       	brlt	.-12     	; 0x2826 <__mulsf3_pse+0x84>
    2832:	86 95       	lsr	r24
    2834:	77 95       	ror	r23
    2836:	67 95       	ror	r22
    2838:	b7 95       	ror	r27
    283a:	f7 95       	ror	r31
    283c:	e7 95       	ror	r30
    283e:	9f 5f       	subi	r25, 0xFF	; 255
    2840:	c1 f7       	brne	.-16     	; 0x2832 <__mulsf3_pse+0x90>
    2842:	fe 2b       	or	r31, r30
    2844:	88 0f       	add	r24, r24
    2846:	91 1d       	adc	r25, r1
    2848:	96 95       	lsr	r25
    284a:	87 95       	ror	r24
    284c:	97 f9       	bld	r25, 7
    284e:	08 95       	ret

00002850 <__fp_inf>:
    2850:	97 f9       	bld	r25, 7
    2852:	9f 67       	ori	r25, 0x7F	; 127
    2854:	80 e8       	ldi	r24, 0x80	; 128
    2856:	70 e0       	ldi	r23, 0x00	; 0
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	08 95       	ret

0000285c <__fp_nan>:
    285c:	9f ef       	ldi	r25, 0xFF	; 255
    285e:	80 ec       	ldi	r24, 0xC0	; 192
    2860:	08 95       	ret

00002862 <__fp_pscA>:
    2862:	00 24       	eor	r0, r0
    2864:	0a 94       	dec	r0
    2866:	16 16       	cp	r1, r22
    2868:	17 06       	cpc	r1, r23
    286a:	18 06       	cpc	r1, r24
    286c:	09 06       	cpc	r0, r25
    286e:	08 95       	ret

00002870 <__fp_pscB>:
    2870:	00 24       	eor	r0, r0
    2872:	0a 94       	dec	r0
    2874:	12 16       	cp	r1, r18
    2876:	13 06       	cpc	r1, r19
    2878:	14 06       	cpc	r1, r20
    287a:	05 06       	cpc	r0, r21
    287c:	08 95       	ret

0000287e <__fp_round>:
    287e:	09 2e       	mov	r0, r25
    2880:	03 94       	inc	r0
    2882:	00 0c       	add	r0, r0
    2884:	11 f4       	brne	.+4      	; 0x288a <__fp_round+0xc>
    2886:	88 23       	and	r24, r24
    2888:	52 f0       	brmi	.+20     	; 0x289e <__fp_round+0x20>
    288a:	bb 0f       	add	r27, r27
    288c:	40 f4       	brcc	.+16     	; 0x289e <__fp_round+0x20>
    288e:	bf 2b       	or	r27, r31
    2890:	11 f4       	brne	.+4      	; 0x2896 <__fp_round+0x18>
    2892:	60 ff       	sbrs	r22, 0
    2894:	04 c0       	rjmp	.+8      	; 0x289e <__fp_round+0x20>
    2896:	6f 5f       	subi	r22, 0xFF	; 255
    2898:	7f 4f       	sbci	r23, 0xFF	; 255
    289a:	8f 4f       	sbci	r24, 0xFF	; 255
    289c:	9f 4f       	sbci	r25, 0xFF	; 255
    289e:	08 95       	ret

000028a0 <__udivmodsi4>:
    28a0:	a1 e2       	ldi	r26, 0x21	; 33
    28a2:	1a 2e       	mov	r1, r26
    28a4:	aa 1b       	sub	r26, r26
    28a6:	bb 1b       	sub	r27, r27
    28a8:	fd 01       	movw	r30, r26
    28aa:	0d c0       	rjmp	.+26     	; 0x28c6 <__udivmodsi4_ep>

000028ac <__udivmodsi4_loop>:
    28ac:	aa 1f       	adc	r26, r26
    28ae:	bb 1f       	adc	r27, r27
    28b0:	ee 1f       	adc	r30, r30
    28b2:	ff 1f       	adc	r31, r31
    28b4:	a2 17       	cp	r26, r18
    28b6:	b3 07       	cpc	r27, r19
    28b8:	e4 07       	cpc	r30, r20
    28ba:	f5 07       	cpc	r31, r21
    28bc:	20 f0       	brcs	.+8      	; 0x28c6 <__udivmodsi4_ep>
    28be:	a2 1b       	sub	r26, r18
    28c0:	b3 0b       	sbc	r27, r19
    28c2:	e4 0b       	sbc	r30, r20
    28c4:	f5 0b       	sbc	r31, r21

000028c6 <__udivmodsi4_ep>:
    28c6:	66 1f       	adc	r22, r22
    28c8:	77 1f       	adc	r23, r23
    28ca:	88 1f       	adc	r24, r24
    28cc:	99 1f       	adc	r25, r25
    28ce:	1a 94       	dec	r1
    28d0:	69 f7       	brne	.-38     	; 0x28ac <__udivmodsi4_loop>
    28d2:	60 95       	com	r22
    28d4:	70 95       	com	r23
    28d6:	80 95       	com	r24
    28d8:	90 95       	com	r25
    28da:	9b 01       	movw	r18, r22
    28dc:	ac 01       	movw	r20, r24
    28de:	bd 01       	movw	r22, r26
    28e0:	cf 01       	movw	r24, r30
    28e2:	08 95       	ret

000028e4 <__divmodsi4>:
    28e4:	05 2e       	mov	r0, r21
    28e6:	97 fb       	bst	r25, 7
    28e8:	1e f4       	brtc	.+6      	; 0x28f0 <__divmodsi4+0xc>
    28ea:	00 94       	com	r0
    28ec:	0e 94 89 14 	call	0x2912	; 0x2912 <__negsi2>
    28f0:	57 fd       	sbrc	r21, 7
    28f2:	07 d0       	rcall	.+14     	; 0x2902 <__divmodsi4_neg2>
    28f4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__udivmodsi4>
    28f8:	07 fc       	sbrc	r0, 7
    28fa:	03 d0       	rcall	.+6      	; 0x2902 <__divmodsi4_neg2>
    28fc:	4e f4       	brtc	.+18     	; 0x2910 <__divmodsi4_exit>
    28fe:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__negsi2>

00002902 <__divmodsi4_neg2>:
    2902:	50 95       	com	r21
    2904:	40 95       	com	r20
    2906:	30 95       	com	r19
    2908:	21 95       	neg	r18
    290a:	3f 4f       	sbci	r19, 0xFF	; 255
    290c:	4f 4f       	sbci	r20, 0xFF	; 255
    290e:	5f 4f       	sbci	r21, 0xFF	; 255

00002910 <__divmodsi4_exit>:
    2910:	08 95       	ret

00002912 <__negsi2>:
    2912:	90 95       	com	r25
    2914:	80 95       	com	r24
    2916:	70 95       	com	r23
    2918:	61 95       	neg	r22
    291a:	7f 4f       	sbci	r23, 0xFF	; 255
    291c:	8f 4f       	sbci	r24, 0xFF	; 255
    291e:	9f 4f       	sbci	r25, 0xFF	; 255
    2920:	08 95       	ret

00002922 <do_rand>:
    2922:	8f 92       	push	r8
    2924:	9f 92       	push	r9
    2926:	af 92       	push	r10
    2928:	bf 92       	push	r11
    292a:	cf 92       	push	r12
    292c:	df 92       	push	r13
    292e:	ef 92       	push	r14
    2930:	ff 92       	push	r15
    2932:	cf 93       	push	r28
    2934:	df 93       	push	r29
    2936:	ec 01       	movw	r28, r24
    2938:	68 81       	ld	r22, Y
    293a:	79 81       	ldd	r23, Y+1	; 0x01
    293c:	8a 81       	ldd	r24, Y+2	; 0x02
    293e:	9b 81       	ldd	r25, Y+3	; 0x03
    2940:	61 15       	cp	r22, r1
    2942:	71 05       	cpc	r23, r1
    2944:	81 05       	cpc	r24, r1
    2946:	91 05       	cpc	r25, r1
    2948:	21 f4       	brne	.+8      	; 0x2952 <do_rand+0x30>
    294a:	64 e2       	ldi	r22, 0x24	; 36
    294c:	79 ed       	ldi	r23, 0xD9	; 217
    294e:	8b e5       	ldi	r24, 0x5B	; 91
    2950:	97 e0       	ldi	r25, 0x07	; 7
    2952:	2d e1       	ldi	r18, 0x1D	; 29
    2954:	33 ef       	ldi	r19, 0xF3	; 243
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	50 e0       	ldi	r21, 0x00	; 0
    295a:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodsi4>
    295e:	49 01       	movw	r8, r18
    2960:	5a 01       	movw	r10, r20
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	a7 ea       	ldi	r26, 0xA7	; 167
    2968:	b1 e4       	ldi	r27, 0x41	; 65
    296a:	0e 94 10 19 	call	0x3220	; 0x3220 <__muluhisi3>
    296e:	6b 01       	movw	r12, r22
    2970:	7c 01       	movw	r14, r24
    2972:	ac ee       	ldi	r26, 0xEC	; 236
    2974:	b4 ef       	ldi	r27, 0xF4	; 244
    2976:	a5 01       	movw	r20, r10
    2978:	94 01       	movw	r18, r8
    297a:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulohisi3>
    297e:	dc 01       	movw	r26, r24
    2980:	cb 01       	movw	r24, r22
    2982:	8c 0d       	add	r24, r12
    2984:	9d 1d       	adc	r25, r13
    2986:	ae 1d       	adc	r26, r14
    2988:	bf 1d       	adc	r27, r15
    298a:	b7 ff       	sbrs	r27, 7
    298c:	03 c0       	rjmp	.+6      	; 0x2994 <do_rand+0x72>
    298e:	01 97       	sbiw	r24, 0x01	; 1
    2990:	a1 09       	sbc	r26, r1
    2992:	b0 48       	sbci	r27, 0x80	; 128
    2994:	88 83       	st	Y, r24
    2996:	99 83       	std	Y+1, r25	; 0x01
    2998:	aa 83       	std	Y+2, r26	; 0x02
    299a:	bb 83       	std	Y+3, r27	; 0x03
    299c:	9f 77       	andi	r25, 0x7F	; 127
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	ff 90       	pop	r15
    29a4:	ef 90       	pop	r14
    29a6:	df 90       	pop	r13
    29a8:	cf 90       	pop	r12
    29aa:	bf 90       	pop	r11
    29ac:	af 90       	pop	r10
    29ae:	9f 90       	pop	r9
    29b0:	8f 90       	pop	r8
    29b2:	08 95       	ret

000029b4 <rand_r>:
    29b4:	0e 94 91 14 	call	0x2922	; 0x2922 <do_rand>
    29b8:	08 95       	ret

000029ba <rand>:
    29ba:	80 e0       	ldi	r24, 0x00	; 0
    29bc:	91 e0       	ldi	r25, 0x01	; 1
    29be:	0e 94 91 14 	call	0x2922	; 0x2922 <do_rand>
    29c2:	08 95       	ret

000029c4 <srand>:
    29c4:	a0 e0       	ldi	r26, 0x00	; 0
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    29cc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    29d0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    29d4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    29d8:	08 95       	ret

000029da <random_r>:
    29da:	8f 92       	push	r8
    29dc:	9f 92       	push	r9
    29de:	af 92       	push	r10
    29e0:	bf 92       	push	r11
    29e2:	cf 92       	push	r12
    29e4:	df 92       	push	r13
    29e6:	ef 92       	push	r14
    29e8:	ff 92       	push	r15
    29ea:	cf 93       	push	r28
    29ec:	df 93       	push	r29
    29ee:	ec 01       	movw	r28, r24
    29f0:	68 81       	ld	r22, Y
    29f2:	79 81       	ldd	r23, Y+1	; 0x01
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	61 15       	cp	r22, r1
    29fa:	71 05       	cpc	r23, r1
    29fc:	81 05       	cpc	r24, r1
    29fe:	91 05       	cpc	r25, r1
    2a00:	21 f4       	brne	.+8      	; 0x2a0a <random_r+0x30>
    2a02:	64 e2       	ldi	r22, 0x24	; 36
    2a04:	79 ed       	ldi	r23, 0xD9	; 217
    2a06:	8b e5       	ldi	r24, 0x5B	; 91
    2a08:	97 e0       	ldi	r25, 0x07	; 7
    2a0a:	2d e1       	ldi	r18, 0x1D	; 29
    2a0c:	33 ef       	ldi	r19, 0xF3	; 243
    2a0e:	41 e0       	ldi	r20, 0x01	; 1
    2a10:	50 e0       	ldi	r21, 0x00	; 0
    2a12:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodsi4>
    2a16:	49 01       	movw	r8, r18
    2a18:	5a 01       	movw	r10, r20
    2a1a:	9b 01       	movw	r18, r22
    2a1c:	ac 01       	movw	r20, r24
    2a1e:	a7 ea       	ldi	r26, 0xA7	; 167
    2a20:	b1 e4       	ldi	r27, 0x41	; 65
    2a22:	0e 94 10 19 	call	0x3220	; 0x3220 <__muluhisi3>
    2a26:	6b 01       	movw	r12, r22
    2a28:	7c 01       	movw	r14, r24
    2a2a:	ac ee       	ldi	r26, 0xEC	; 236
    2a2c:	b4 ef       	ldi	r27, 0xF4	; 244
    2a2e:	a5 01       	movw	r20, r10
    2a30:	94 01       	movw	r18, r8
    2a32:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulohisi3>
    2a36:	dc 01       	movw	r26, r24
    2a38:	cb 01       	movw	r24, r22
    2a3a:	8c 0d       	add	r24, r12
    2a3c:	9d 1d       	adc	r25, r13
    2a3e:	ae 1d       	adc	r26, r14
    2a40:	bf 1d       	adc	r27, r15
    2a42:	b7 ff       	sbrs	r27, 7
    2a44:	03 c0       	rjmp	.+6      	; 0x2a4c <random_r+0x72>
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	a1 09       	sbc	r26, r1
    2a4a:	b0 48       	sbci	r27, 0x80	; 128
    2a4c:	88 83       	st	Y, r24
    2a4e:	99 83       	std	Y+1, r25	; 0x01
    2a50:	aa 83       	std	Y+2, r26	; 0x02
    2a52:	bb 83       	std	Y+3, r27	; 0x03
    2a54:	bc 01       	movw	r22, r24
    2a56:	cd 01       	movw	r24, r26
    2a58:	9f 77       	andi	r25, 0x7F	; 127
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
    2a66:	bf 90       	pop	r11
    2a68:	af 90       	pop	r10
    2a6a:	9f 90       	pop	r9
    2a6c:	8f 90       	pop	r8
    2a6e:	08 95       	ret

00002a70 <random>:
    2a70:	8f 92       	push	r8
    2a72:	9f 92       	push	r9
    2a74:	af 92       	push	r10
    2a76:	bf 92       	push	r11
    2a78:	cf 92       	push	r12
    2a7a:	df 92       	push	r13
    2a7c:	ef 92       	push	r14
    2a7e:	ff 92       	push	r15
    2a80:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2a84:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    2a88:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    2a8c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    2a90:	61 15       	cp	r22, r1
    2a92:	71 05       	cpc	r23, r1
    2a94:	81 05       	cpc	r24, r1
    2a96:	91 05       	cpc	r25, r1
    2a98:	21 f4       	brne	.+8      	; 0x2aa2 <random+0x32>
    2a9a:	64 e2       	ldi	r22, 0x24	; 36
    2a9c:	79 ed       	ldi	r23, 0xD9	; 217
    2a9e:	8b e5       	ldi	r24, 0x5B	; 91
    2aa0:	97 e0       	ldi	r25, 0x07	; 7
    2aa2:	2d e1       	ldi	r18, 0x1D	; 29
    2aa4:	33 ef       	ldi	r19, 0xF3	; 243
    2aa6:	41 e0       	ldi	r20, 0x01	; 1
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	0e 94 72 14 	call	0x28e4	; 0x28e4 <__divmodsi4>
    2aae:	49 01       	movw	r8, r18
    2ab0:	5a 01       	movw	r10, r20
    2ab2:	9b 01       	movw	r18, r22
    2ab4:	ac 01       	movw	r20, r24
    2ab6:	a7 ea       	ldi	r26, 0xA7	; 167
    2ab8:	b1 e4       	ldi	r27, 0x41	; 65
    2aba:	0e 94 10 19 	call	0x3220	; 0x3220 <__muluhisi3>
    2abe:	6b 01       	movw	r12, r22
    2ac0:	7c 01       	movw	r14, r24
    2ac2:	ac ee       	ldi	r26, 0xEC	; 236
    2ac4:	b4 ef       	ldi	r27, 0xF4	; 244
    2ac6:	a5 01       	movw	r20, r10
    2ac8:	94 01       	movw	r18, r8
    2aca:	0e 94 1e 19 	call	0x323c	; 0x323c <__mulohisi3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	8c 0d       	add	r24, r12
    2ad4:	9d 1d       	adc	r25, r13
    2ad6:	ae 1d       	adc	r26, r14
    2ad8:	bf 1d       	adc	r27, r15
    2ada:	b7 ff       	sbrs	r27, 7
    2adc:	03 c0       	rjmp	.+6      	; 0x2ae4 <random+0x74>
    2ade:	01 97       	sbiw	r24, 0x01	; 1
    2ae0:	a1 09       	sbc	r26, r1
    2ae2:	b0 48       	sbci	r27, 0x80	; 128
    2ae4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2ae8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2aec:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2af0:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	9f 77       	andi	r25, 0x7F	; 127
    2afa:	ff 90       	pop	r15
    2afc:	ef 90       	pop	r14
    2afe:	df 90       	pop	r13
    2b00:	cf 90       	pop	r12
    2b02:	bf 90       	pop	r11
    2b04:	af 90       	pop	r10
    2b06:	9f 90       	pop	r9
    2b08:	8f 90       	pop	r8
    2b0a:	08 95       	ret

00002b0c <srandom>:
    2b0c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2b10:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2b14:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2b18:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2b1c:	08 95       	ret

00002b1e <fgetc>:
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	ec 01       	movw	r28, r24
    2b24:	2b 81       	ldd	r18, Y+3	; 0x03
    2b26:	20 ff       	sbrs	r18, 0
    2b28:	33 c0       	rjmp	.+102    	; 0x2b90 <fgetc+0x72>
    2b2a:	26 ff       	sbrs	r18, 6
    2b2c:	0a c0       	rjmp	.+20     	; 0x2b42 <fgetc+0x24>
    2b2e:	2f 7b       	andi	r18, 0xBF	; 191
    2b30:	2b 83       	std	Y+3, r18	; 0x03
    2b32:	8e 81       	ldd	r24, Y+6	; 0x06
    2b34:	9f 81       	ldd	r25, Y+7	; 0x07
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	9f 83       	std	Y+7, r25	; 0x07
    2b3a:	8e 83       	std	Y+6, r24	; 0x06
    2b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	29 c0       	rjmp	.+82     	; 0x2b94 <fgetc+0x76>
    2b42:	22 ff       	sbrs	r18, 2
    2b44:	0f c0       	rjmp	.+30     	; 0x2b64 <fgetc+0x46>
    2b46:	e8 81       	ld	r30, Y
    2b48:	f9 81       	ldd	r31, Y+1	; 0x01
    2b4a:	80 81       	ld	r24, Z
    2b4c:	08 2e       	mov	r0, r24
    2b4e:	00 0c       	add	r0, r0
    2b50:	99 0b       	sbc	r25, r25
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	19 f4       	brne	.+6      	; 0x2b5c <fgetc+0x3e>
    2b56:	20 62       	ori	r18, 0x20	; 32
    2b58:	2b 83       	std	Y+3, r18	; 0x03
    2b5a:	1a c0       	rjmp	.+52     	; 0x2b90 <fgetc+0x72>
    2b5c:	31 96       	adiw	r30, 0x01	; 1
    2b5e:	f9 83       	std	Y+1, r31	; 0x01
    2b60:	e8 83       	st	Y, r30
    2b62:	0e c0       	rjmp	.+28     	; 0x2b80 <fgetc+0x62>
    2b64:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b66:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b68:	09 95       	icall
    2b6a:	97 ff       	sbrs	r25, 7
    2b6c:	09 c0       	rjmp	.+18     	; 0x2b80 <fgetc+0x62>
    2b6e:	2b 81       	ldd	r18, Y+3	; 0x03
    2b70:	01 96       	adiw	r24, 0x01	; 1
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <fgetc+0x5a>
    2b74:	80 e2       	ldi	r24, 0x20	; 32
    2b76:	01 c0       	rjmp	.+2      	; 0x2b7a <fgetc+0x5c>
    2b78:	80 e1       	ldi	r24, 0x10	; 16
    2b7a:	82 2b       	or	r24, r18
    2b7c:	8b 83       	std	Y+3, r24	; 0x03
    2b7e:	08 c0       	rjmp	.+16     	; 0x2b90 <fgetc+0x72>
    2b80:	2e 81       	ldd	r18, Y+6	; 0x06
    2b82:	3f 81       	ldd	r19, Y+7	; 0x07
    2b84:	2f 5f       	subi	r18, 0xFF	; 255
    2b86:	3f 4f       	sbci	r19, 0xFF	; 255
    2b88:	3f 83       	std	Y+7, r19	; 0x07
    2b8a:	2e 83       	std	Y+6, r18	; 0x06
    2b8c:	99 27       	eor	r25, r25
    2b8e:	02 c0       	rjmp	.+4      	; 0x2b94 <fgetc+0x76>
    2b90:	8f ef       	ldi	r24, 0xFF	; 255
    2b92:	9f ef       	ldi	r25, 0xFF	; 255
    2b94:	df 91       	pop	r29
    2b96:	cf 91       	pop	r28
    2b98:	08 95       	ret

00002b9a <printf>:
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e0       	ldi	r27, 0x00	; 0
    2b9e:	e3 ed       	ldi	r30, 0xD3	; 211
    2ba0:	f5 e1       	ldi	r31, 0x15	; 21
    2ba2:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__prologue_saves__+0x20>
    2ba6:	ae 01       	movw	r20, r28
    2ba8:	4b 5f       	subi	r20, 0xFB	; 251
    2baa:	5f 4f       	sbci	r21, 0xFF	; 255
    2bac:	fa 01       	movw	r30, r20
    2bae:	61 91       	ld	r22, Z+
    2bb0:	71 91       	ld	r23, Z+
    2bb2:	af 01       	movw	r20, r30
    2bb4:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <__iob+0x2>
    2bb8:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <__iob+0x3>
    2bbc:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vfprintf>
    2bc0:	e2 e0       	ldi	r30, 0x02	; 2
    2bc2:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__epilogue_restores__+0x20>

00002bc6 <printf_P>:
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e9 ee       	ldi	r30, 0xE9	; 233
    2bcc:	f5 e1       	ldi	r31, 0x15	; 21
    2bce:	0c 94 31 19 	jmp	0x3262	; 0x3262 <__prologue_saves__+0x1c>
    2bd2:	ae 01       	movw	r20, r28
    2bd4:	49 5f       	subi	r20, 0xF9	; 249
    2bd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bd8:	da 01       	movw	r26, r20
    2bda:	6d 91       	ld	r22, X+
    2bdc:	7d 91       	ld	r23, X+
    2bde:	ad 01       	movw	r20, r26
    2be0:	01 e4       	ldi	r16, 0x41	; 65
    2be2:	14 e0       	ldi	r17, 0x04	; 4
    2be4:	f8 01       	movw	r30, r16
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	dc 01       	movw	r26, r24
    2bec:	13 96       	adiw	r26, 0x03	; 3
    2bee:	2c 91       	ld	r18, X
    2bf0:	13 97       	sbiw	r26, 0x03	; 3
    2bf2:	28 60       	ori	r18, 0x08	; 8
    2bf4:	13 96       	adiw	r26, 0x03	; 3
    2bf6:	2c 93       	st	X, r18
    2bf8:	0e 94 40 16 	call	0x2c80	; 0x2c80 <vfprintf>
    2bfc:	d8 01       	movw	r26, r16
    2bfe:	12 96       	adiw	r26, 0x02	; 2
    2c00:	ed 91       	ld	r30, X+
    2c02:	fc 91       	ld	r31, X
    2c04:	13 97       	sbiw	r26, 0x03	; 3
    2c06:	23 81       	ldd	r18, Z+3	; 0x03
    2c08:	27 7f       	andi	r18, 0xF7	; 247
    2c0a:	23 83       	std	Z+3, r18	; 0x03
    2c0c:	e4 e0       	ldi	r30, 0x04	; 4
    2c0e:	0c 94 4d 19 	jmp	0x329a	; 0x329a <__epilogue_restores__+0x1c>

00002c12 <putchar>:
    2c12:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <__iob+0x2>
    2c16:	70 91 44 04 	lds	r23, 0x0444	; 0x800444 <__iob+0x3>
    2c1a:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2c1e:	08 95       	ret

00002c20 <puts>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	e0 91 43 04 	lds	r30, 0x0443	; 0x800443 <__iob+0x2>
    2c2c:	f0 91 44 04 	lds	r31, 0x0444	; 0x800444 <__iob+0x3>
    2c30:	23 81       	ldd	r18, Z+3	; 0x03
    2c32:	21 ff       	sbrs	r18, 1
    2c34:	1b c0       	rjmp	.+54     	; 0x2c6c <puts+0x4c>
    2c36:	8c 01       	movw	r16, r24
    2c38:	d0 e0       	ldi	r29, 0x00	; 0
    2c3a:	c0 e0       	ldi	r28, 0x00	; 0
    2c3c:	f8 01       	movw	r30, r16
    2c3e:	81 91       	ld	r24, Z+
    2c40:	8f 01       	movw	r16, r30
    2c42:	60 91 43 04 	lds	r22, 0x0443	; 0x800443 <__iob+0x2>
    2c46:	70 91 44 04 	lds	r23, 0x0444	; 0x800444 <__iob+0x3>
    2c4a:	db 01       	movw	r26, r22
    2c4c:	18 96       	adiw	r26, 0x08	; 8
    2c4e:	ed 91       	ld	r30, X+
    2c50:	fc 91       	ld	r31, X
    2c52:	19 97       	sbiw	r26, 0x09	; 9
    2c54:	88 23       	and	r24, r24
    2c56:	31 f0       	breq	.+12     	; 0x2c64 <puts+0x44>
    2c58:	09 95       	icall
    2c5a:	89 2b       	or	r24, r25
    2c5c:	79 f3       	breq	.-34     	; 0x2c3c <puts+0x1c>
    2c5e:	df ef       	ldi	r29, 0xFF	; 255
    2c60:	cf ef       	ldi	r28, 0xFF	; 255
    2c62:	ec cf       	rjmp	.-40     	; 0x2c3c <puts+0x1c>
    2c64:	8a e0       	ldi	r24, 0x0A	; 10
    2c66:	09 95       	icall
    2c68:	89 2b       	or	r24, r25
    2c6a:	19 f0       	breq	.+6      	; 0x2c72 <puts+0x52>
    2c6c:	8f ef       	ldi	r24, 0xFF	; 255
    2c6e:	9f ef       	ldi	r25, 0xFF	; 255
    2c70:	02 c0       	rjmp	.+4      	; 0x2c76 <puts+0x56>
    2c72:	8d 2f       	mov	r24, r29
    2c74:	9c 2f       	mov	r25, r28
    2c76:	df 91       	pop	r29
    2c78:	cf 91       	pop	r28
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	08 95       	ret

00002c80 <vfprintf>:
    2c80:	ab e0       	ldi	r26, 0x0B	; 11
    2c82:	b0 e0       	ldi	r27, 0x00	; 0
    2c84:	e6 e4       	ldi	r30, 0x46	; 70
    2c86:	f6 e1       	ldi	r31, 0x16	; 22
    2c88:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__prologue_saves__>
    2c8c:	6c 01       	movw	r12, r24
    2c8e:	7b 01       	movw	r14, r22
    2c90:	8a 01       	movw	r16, r20
    2c92:	fc 01       	movw	r30, r24
    2c94:	17 82       	std	Z+7, r1	; 0x07
    2c96:	16 82       	std	Z+6, r1	; 0x06
    2c98:	83 81       	ldd	r24, Z+3	; 0x03
    2c9a:	81 ff       	sbrs	r24, 1
    2c9c:	cc c1       	rjmp	.+920    	; 0x3036 <vfprintf+0x3b6>
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	01 96       	adiw	r24, 0x01	; 1
    2ca2:	3c 01       	movw	r6, r24
    2ca4:	f6 01       	movw	r30, r12
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	f7 01       	movw	r30, r14
    2caa:	93 fd       	sbrc	r25, 3
    2cac:	85 91       	lpm	r24, Z+
    2cae:	93 ff       	sbrs	r25, 3
    2cb0:	81 91       	ld	r24, Z+
    2cb2:	7f 01       	movw	r14, r30
    2cb4:	88 23       	and	r24, r24
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <vfprintf+0x3a>
    2cb8:	ba c1       	rjmp	.+884    	; 0x302e <vfprintf+0x3ae>
    2cba:	85 32       	cpi	r24, 0x25	; 37
    2cbc:	39 f4       	brne	.+14     	; 0x2ccc <vfprintf+0x4c>
    2cbe:	93 fd       	sbrc	r25, 3
    2cc0:	85 91       	lpm	r24, Z+
    2cc2:	93 ff       	sbrs	r25, 3
    2cc4:	81 91       	ld	r24, Z+
    2cc6:	7f 01       	movw	r14, r30
    2cc8:	85 32       	cpi	r24, 0x25	; 37
    2cca:	29 f4       	brne	.+10     	; 0x2cd6 <vfprintf+0x56>
    2ccc:	b6 01       	movw	r22, r12
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2cd4:	e7 cf       	rjmp	.-50     	; 0x2ca4 <vfprintf+0x24>
    2cd6:	91 2c       	mov	r9, r1
    2cd8:	21 2c       	mov	r2, r1
    2cda:	31 2c       	mov	r3, r1
    2cdc:	ff e1       	ldi	r31, 0x1F	; 31
    2cde:	f3 15       	cp	r31, r3
    2ce0:	d8 f0       	brcs	.+54     	; 0x2d18 <vfprintf+0x98>
    2ce2:	8b 32       	cpi	r24, 0x2B	; 43
    2ce4:	79 f0       	breq	.+30     	; 0x2d04 <vfprintf+0x84>
    2ce6:	38 f4       	brcc	.+14     	; 0x2cf6 <vfprintf+0x76>
    2ce8:	80 32       	cpi	r24, 0x20	; 32
    2cea:	79 f0       	breq	.+30     	; 0x2d0a <vfprintf+0x8a>
    2cec:	83 32       	cpi	r24, 0x23	; 35
    2cee:	a1 f4       	brne	.+40     	; 0x2d18 <vfprintf+0x98>
    2cf0:	23 2d       	mov	r18, r3
    2cf2:	20 61       	ori	r18, 0x10	; 16
    2cf4:	1d c0       	rjmp	.+58     	; 0x2d30 <vfprintf+0xb0>
    2cf6:	8d 32       	cpi	r24, 0x2D	; 45
    2cf8:	61 f0       	breq	.+24     	; 0x2d12 <vfprintf+0x92>
    2cfa:	80 33       	cpi	r24, 0x30	; 48
    2cfc:	69 f4       	brne	.+26     	; 0x2d18 <vfprintf+0x98>
    2cfe:	23 2d       	mov	r18, r3
    2d00:	21 60       	ori	r18, 0x01	; 1
    2d02:	16 c0       	rjmp	.+44     	; 0x2d30 <vfprintf+0xb0>
    2d04:	83 2d       	mov	r24, r3
    2d06:	82 60       	ori	r24, 0x02	; 2
    2d08:	38 2e       	mov	r3, r24
    2d0a:	e3 2d       	mov	r30, r3
    2d0c:	e4 60       	ori	r30, 0x04	; 4
    2d0e:	3e 2e       	mov	r3, r30
    2d10:	2a c0       	rjmp	.+84     	; 0x2d66 <vfprintf+0xe6>
    2d12:	f3 2d       	mov	r31, r3
    2d14:	f8 60       	ori	r31, 0x08	; 8
    2d16:	1d c0       	rjmp	.+58     	; 0x2d52 <vfprintf+0xd2>
    2d18:	37 fc       	sbrc	r3, 7
    2d1a:	2d c0       	rjmp	.+90     	; 0x2d76 <vfprintf+0xf6>
    2d1c:	20 ed       	ldi	r18, 0xD0	; 208
    2d1e:	28 0f       	add	r18, r24
    2d20:	2a 30       	cpi	r18, 0x0A	; 10
    2d22:	40 f0       	brcs	.+16     	; 0x2d34 <vfprintf+0xb4>
    2d24:	8e 32       	cpi	r24, 0x2E	; 46
    2d26:	b9 f4       	brne	.+46     	; 0x2d56 <vfprintf+0xd6>
    2d28:	36 fc       	sbrc	r3, 6
    2d2a:	81 c1       	rjmp	.+770    	; 0x302e <vfprintf+0x3ae>
    2d2c:	23 2d       	mov	r18, r3
    2d2e:	20 64       	ori	r18, 0x40	; 64
    2d30:	32 2e       	mov	r3, r18
    2d32:	19 c0       	rjmp	.+50     	; 0x2d66 <vfprintf+0xe6>
    2d34:	36 fe       	sbrs	r3, 6
    2d36:	06 c0       	rjmp	.+12     	; 0x2d44 <vfprintf+0xc4>
    2d38:	8a e0       	ldi	r24, 0x0A	; 10
    2d3a:	98 9e       	mul	r9, r24
    2d3c:	20 0d       	add	r18, r0
    2d3e:	11 24       	eor	r1, r1
    2d40:	92 2e       	mov	r9, r18
    2d42:	11 c0       	rjmp	.+34     	; 0x2d66 <vfprintf+0xe6>
    2d44:	ea e0       	ldi	r30, 0x0A	; 10
    2d46:	2e 9e       	mul	r2, r30
    2d48:	20 0d       	add	r18, r0
    2d4a:	11 24       	eor	r1, r1
    2d4c:	22 2e       	mov	r2, r18
    2d4e:	f3 2d       	mov	r31, r3
    2d50:	f0 62       	ori	r31, 0x20	; 32
    2d52:	3f 2e       	mov	r3, r31
    2d54:	08 c0       	rjmp	.+16     	; 0x2d66 <vfprintf+0xe6>
    2d56:	8c 36       	cpi	r24, 0x6C	; 108
    2d58:	21 f4       	brne	.+8      	; 0x2d62 <vfprintf+0xe2>
    2d5a:	83 2d       	mov	r24, r3
    2d5c:	80 68       	ori	r24, 0x80	; 128
    2d5e:	38 2e       	mov	r3, r24
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <vfprintf+0xe6>
    2d62:	88 36       	cpi	r24, 0x68	; 104
    2d64:	41 f4       	brne	.+16     	; 0x2d76 <vfprintf+0xf6>
    2d66:	f7 01       	movw	r30, r14
    2d68:	93 fd       	sbrc	r25, 3
    2d6a:	85 91       	lpm	r24, Z+
    2d6c:	93 ff       	sbrs	r25, 3
    2d6e:	81 91       	ld	r24, Z+
    2d70:	7f 01       	movw	r14, r30
    2d72:	81 11       	cpse	r24, r1
    2d74:	b3 cf       	rjmp	.-154    	; 0x2cdc <vfprintf+0x5c>
    2d76:	98 2f       	mov	r25, r24
    2d78:	9f 7d       	andi	r25, 0xDF	; 223
    2d7a:	95 54       	subi	r25, 0x45	; 69
    2d7c:	93 30       	cpi	r25, 0x03	; 3
    2d7e:	28 f4       	brcc	.+10     	; 0x2d8a <vfprintf+0x10a>
    2d80:	0c 5f       	subi	r16, 0xFC	; 252
    2d82:	1f 4f       	sbci	r17, 0xFF	; 255
    2d84:	9f e3       	ldi	r25, 0x3F	; 63
    2d86:	99 83       	std	Y+1, r25	; 0x01
    2d88:	0d c0       	rjmp	.+26     	; 0x2da4 <vfprintf+0x124>
    2d8a:	83 36       	cpi	r24, 0x63	; 99
    2d8c:	31 f0       	breq	.+12     	; 0x2d9a <vfprintf+0x11a>
    2d8e:	83 37       	cpi	r24, 0x73	; 115
    2d90:	71 f0       	breq	.+28     	; 0x2dae <vfprintf+0x12e>
    2d92:	83 35       	cpi	r24, 0x53	; 83
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <vfprintf+0x118>
    2d96:	59 c0       	rjmp	.+178    	; 0x2e4a <vfprintf+0x1ca>
    2d98:	21 c0       	rjmp	.+66     	; 0x2ddc <vfprintf+0x15c>
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	80 81       	ld	r24, Z
    2d9e:	89 83       	std	Y+1, r24	; 0x01
    2da0:	0e 5f       	subi	r16, 0xFE	; 254
    2da2:	1f 4f       	sbci	r17, 0xFF	; 255
    2da4:	88 24       	eor	r8, r8
    2da6:	83 94       	inc	r8
    2da8:	91 2c       	mov	r9, r1
    2daa:	53 01       	movw	r10, r6
    2dac:	13 c0       	rjmp	.+38     	; 0x2dd4 <vfprintf+0x154>
    2dae:	28 01       	movw	r4, r16
    2db0:	f2 e0       	ldi	r31, 0x02	; 2
    2db2:	4f 0e       	add	r4, r31
    2db4:	51 1c       	adc	r5, r1
    2db6:	f8 01       	movw	r30, r16
    2db8:	a0 80       	ld	r10, Z
    2dba:	b1 80       	ldd	r11, Z+1	; 0x01
    2dbc:	36 fe       	sbrs	r3, 6
    2dbe:	03 c0       	rjmp	.+6      	; 0x2dc6 <vfprintf+0x146>
    2dc0:	69 2d       	mov	r22, r9
    2dc2:	70 e0       	ldi	r23, 0x00	; 0
    2dc4:	02 c0       	rjmp	.+4      	; 0x2dca <vfprintf+0x14a>
    2dc6:	6f ef       	ldi	r22, 0xFF	; 255
    2dc8:	7f ef       	ldi	r23, 0xFF	; 255
    2dca:	c5 01       	movw	r24, r10
    2dcc:	0e 94 2c 18 	call	0x3058	; 0x3058 <strnlen>
    2dd0:	4c 01       	movw	r8, r24
    2dd2:	82 01       	movw	r16, r4
    2dd4:	f3 2d       	mov	r31, r3
    2dd6:	ff 77       	andi	r31, 0x7F	; 127
    2dd8:	3f 2e       	mov	r3, r31
    2dda:	16 c0       	rjmp	.+44     	; 0x2e08 <vfprintf+0x188>
    2ddc:	28 01       	movw	r4, r16
    2dde:	22 e0       	ldi	r18, 0x02	; 2
    2de0:	42 0e       	add	r4, r18
    2de2:	51 1c       	adc	r5, r1
    2de4:	f8 01       	movw	r30, r16
    2de6:	a0 80       	ld	r10, Z
    2de8:	b1 80       	ldd	r11, Z+1	; 0x01
    2dea:	36 fe       	sbrs	r3, 6
    2dec:	03 c0       	rjmp	.+6      	; 0x2df4 <vfprintf+0x174>
    2dee:	69 2d       	mov	r22, r9
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	02 c0       	rjmp	.+4      	; 0x2df8 <vfprintf+0x178>
    2df4:	6f ef       	ldi	r22, 0xFF	; 255
    2df6:	7f ef       	ldi	r23, 0xFF	; 255
    2df8:	c5 01       	movw	r24, r10
    2dfa:	0e 94 21 18 	call	0x3042	; 0x3042 <strnlen_P>
    2dfe:	4c 01       	movw	r8, r24
    2e00:	f3 2d       	mov	r31, r3
    2e02:	f0 68       	ori	r31, 0x80	; 128
    2e04:	3f 2e       	mov	r3, r31
    2e06:	82 01       	movw	r16, r4
    2e08:	33 fc       	sbrc	r3, 3
    2e0a:	1b c0       	rjmp	.+54     	; 0x2e42 <vfprintf+0x1c2>
    2e0c:	82 2d       	mov	r24, r2
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	88 16       	cp	r8, r24
    2e12:	99 06       	cpc	r9, r25
    2e14:	b0 f4       	brcc	.+44     	; 0x2e42 <vfprintf+0x1c2>
    2e16:	b6 01       	movw	r22, r12
    2e18:	80 e2       	ldi	r24, 0x20	; 32
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2e20:	2a 94       	dec	r2
    2e22:	f4 cf       	rjmp	.-24     	; 0x2e0c <vfprintf+0x18c>
    2e24:	f5 01       	movw	r30, r10
    2e26:	37 fc       	sbrc	r3, 7
    2e28:	85 91       	lpm	r24, Z+
    2e2a:	37 fe       	sbrs	r3, 7
    2e2c:	81 91       	ld	r24, Z+
    2e2e:	5f 01       	movw	r10, r30
    2e30:	b6 01       	movw	r22, r12
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2e38:	21 10       	cpse	r2, r1
    2e3a:	2a 94       	dec	r2
    2e3c:	21 e0       	ldi	r18, 0x01	; 1
    2e3e:	82 1a       	sub	r8, r18
    2e40:	91 08       	sbc	r9, r1
    2e42:	81 14       	cp	r8, r1
    2e44:	91 04       	cpc	r9, r1
    2e46:	71 f7       	brne	.-36     	; 0x2e24 <vfprintf+0x1a4>
    2e48:	e8 c0       	rjmp	.+464    	; 0x301a <vfprintf+0x39a>
    2e4a:	84 36       	cpi	r24, 0x64	; 100
    2e4c:	11 f0       	breq	.+4      	; 0x2e52 <vfprintf+0x1d2>
    2e4e:	89 36       	cpi	r24, 0x69	; 105
    2e50:	41 f5       	brne	.+80     	; 0x2ea2 <vfprintf+0x222>
    2e52:	f8 01       	movw	r30, r16
    2e54:	37 fe       	sbrs	r3, 7
    2e56:	07 c0       	rjmp	.+14     	; 0x2e66 <vfprintf+0x1e6>
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	0c 5f       	subi	r16, 0xFC	; 252
    2e62:	1f 4f       	sbci	r17, 0xFF	; 255
    2e64:	08 c0       	rjmp	.+16     	; 0x2e76 <vfprintf+0x1f6>
    2e66:	60 81       	ld	r22, Z
    2e68:	71 81       	ldd	r23, Z+1	; 0x01
    2e6a:	07 2e       	mov	r0, r23
    2e6c:	00 0c       	add	r0, r0
    2e6e:	88 0b       	sbc	r24, r24
    2e70:	99 0b       	sbc	r25, r25
    2e72:	0e 5f       	subi	r16, 0xFE	; 254
    2e74:	1f 4f       	sbci	r17, 0xFF	; 255
    2e76:	f3 2d       	mov	r31, r3
    2e78:	ff 76       	andi	r31, 0x6F	; 111
    2e7a:	3f 2e       	mov	r3, r31
    2e7c:	97 ff       	sbrs	r25, 7
    2e7e:	09 c0       	rjmp	.+18     	; 0x2e92 <vfprintf+0x212>
    2e80:	90 95       	com	r25
    2e82:	80 95       	com	r24
    2e84:	70 95       	com	r23
    2e86:	61 95       	neg	r22
    2e88:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2e8e:	f0 68       	ori	r31, 0x80	; 128
    2e90:	3f 2e       	mov	r3, r31
    2e92:	2a e0       	ldi	r18, 0x0A	; 10
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	a3 01       	movw	r20, r6
    2e98:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__ultoa_invert>
    2e9c:	88 2e       	mov	r8, r24
    2e9e:	86 18       	sub	r8, r6
    2ea0:	45 c0       	rjmp	.+138    	; 0x2f2c <vfprintf+0x2ac>
    2ea2:	85 37       	cpi	r24, 0x75	; 117
    2ea4:	31 f4       	brne	.+12     	; 0x2eb2 <vfprintf+0x232>
    2ea6:	23 2d       	mov	r18, r3
    2ea8:	2f 7e       	andi	r18, 0xEF	; 239
    2eaa:	b2 2e       	mov	r11, r18
    2eac:	2a e0       	ldi	r18, 0x0A	; 10
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	25 c0       	rjmp	.+74     	; 0x2efc <vfprintf+0x27c>
    2eb2:	93 2d       	mov	r25, r3
    2eb4:	99 7f       	andi	r25, 0xF9	; 249
    2eb6:	b9 2e       	mov	r11, r25
    2eb8:	8f 36       	cpi	r24, 0x6F	; 111
    2eba:	c1 f0       	breq	.+48     	; 0x2eec <vfprintf+0x26c>
    2ebc:	18 f4       	brcc	.+6      	; 0x2ec4 <vfprintf+0x244>
    2ebe:	88 35       	cpi	r24, 0x58	; 88
    2ec0:	79 f0       	breq	.+30     	; 0x2ee0 <vfprintf+0x260>
    2ec2:	b5 c0       	rjmp	.+362    	; 0x302e <vfprintf+0x3ae>
    2ec4:	80 37       	cpi	r24, 0x70	; 112
    2ec6:	19 f0       	breq	.+6      	; 0x2ece <vfprintf+0x24e>
    2ec8:	88 37       	cpi	r24, 0x78	; 120
    2eca:	21 f0       	breq	.+8      	; 0x2ed4 <vfprintf+0x254>
    2ecc:	b0 c0       	rjmp	.+352    	; 0x302e <vfprintf+0x3ae>
    2ece:	e9 2f       	mov	r30, r25
    2ed0:	e0 61       	ori	r30, 0x10	; 16
    2ed2:	be 2e       	mov	r11, r30
    2ed4:	b4 fe       	sbrs	r11, 4
    2ed6:	0d c0       	rjmp	.+26     	; 0x2ef2 <vfprintf+0x272>
    2ed8:	fb 2d       	mov	r31, r11
    2eda:	f4 60       	ori	r31, 0x04	; 4
    2edc:	bf 2e       	mov	r11, r31
    2ede:	09 c0       	rjmp	.+18     	; 0x2ef2 <vfprintf+0x272>
    2ee0:	34 fe       	sbrs	r3, 4
    2ee2:	0a c0       	rjmp	.+20     	; 0x2ef8 <vfprintf+0x278>
    2ee4:	29 2f       	mov	r18, r25
    2ee6:	26 60       	ori	r18, 0x06	; 6
    2ee8:	b2 2e       	mov	r11, r18
    2eea:	06 c0       	rjmp	.+12     	; 0x2ef8 <vfprintf+0x278>
    2eec:	28 e0       	ldi	r18, 0x08	; 8
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <vfprintf+0x27c>
    2ef2:	20 e1       	ldi	r18, 0x10	; 16
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <vfprintf+0x27c>
    2ef8:	20 e1       	ldi	r18, 0x10	; 16
    2efa:	32 e0       	ldi	r19, 0x02	; 2
    2efc:	f8 01       	movw	r30, r16
    2efe:	b7 fe       	sbrs	r11, 7
    2f00:	07 c0       	rjmp	.+14     	; 0x2f10 <vfprintf+0x290>
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	0c 5f       	subi	r16, 0xFC	; 252
    2f0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0e:	06 c0       	rjmp	.+12     	; 0x2f1c <vfprintf+0x29c>
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	80 e0       	ldi	r24, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	0e 5f       	subi	r16, 0xFE	; 254
    2f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1c:	a3 01       	movw	r20, r6
    2f1e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__ultoa_invert>
    2f22:	88 2e       	mov	r8, r24
    2f24:	86 18       	sub	r8, r6
    2f26:	fb 2d       	mov	r31, r11
    2f28:	ff 77       	andi	r31, 0x7F	; 127
    2f2a:	3f 2e       	mov	r3, r31
    2f2c:	36 fe       	sbrs	r3, 6
    2f2e:	0d c0       	rjmp	.+26     	; 0x2f4a <vfprintf+0x2ca>
    2f30:	23 2d       	mov	r18, r3
    2f32:	2e 7f       	andi	r18, 0xFE	; 254
    2f34:	a2 2e       	mov	r10, r18
    2f36:	89 14       	cp	r8, r9
    2f38:	58 f4       	brcc	.+22     	; 0x2f50 <vfprintf+0x2d0>
    2f3a:	34 fe       	sbrs	r3, 4
    2f3c:	0b c0       	rjmp	.+22     	; 0x2f54 <vfprintf+0x2d4>
    2f3e:	32 fc       	sbrc	r3, 2
    2f40:	09 c0       	rjmp	.+18     	; 0x2f54 <vfprintf+0x2d4>
    2f42:	83 2d       	mov	r24, r3
    2f44:	8e 7e       	andi	r24, 0xEE	; 238
    2f46:	a8 2e       	mov	r10, r24
    2f48:	05 c0       	rjmp	.+10     	; 0x2f54 <vfprintf+0x2d4>
    2f4a:	b8 2c       	mov	r11, r8
    2f4c:	a3 2c       	mov	r10, r3
    2f4e:	03 c0       	rjmp	.+6      	; 0x2f56 <vfprintf+0x2d6>
    2f50:	b8 2c       	mov	r11, r8
    2f52:	01 c0       	rjmp	.+2      	; 0x2f56 <vfprintf+0x2d6>
    2f54:	b9 2c       	mov	r11, r9
    2f56:	a4 fe       	sbrs	r10, 4
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <vfprintf+0x2f8>
    2f5a:	fe 01       	movw	r30, r28
    2f5c:	e8 0d       	add	r30, r8
    2f5e:	f1 1d       	adc	r31, r1
    2f60:	80 81       	ld	r24, Z
    2f62:	80 33       	cpi	r24, 0x30	; 48
    2f64:	21 f4       	brne	.+8      	; 0x2f6e <vfprintf+0x2ee>
    2f66:	9a 2d       	mov	r25, r10
    2f68:	99 7e       	andi	r25, 0xE9	; 233
    2f6a:	a9 2e       	mov	r10, r25
    2f6c:	09 c0       	rjmp	.+18     	; 0x2f80 <vfprintf+0x300>
    2f6e:	a2 fe       	sbrs	r10, 2
    2f70:	06 c0       	rjmp	.+12     	; 0x2f7e <vfprintf+0x2fe>
    2f72:	b3 94       	inc	r11
    2f74:	b3 94       	inc	r11
    2f76:	04 c0       	rjmp	.+8      	; 0x2f80 <vfprintf+0x300>
    2f78:	8a 2d       	mov	r24, r10
    2f7a:	86 78       	andi	r24, 0x86	; 134
    2f7c:	09 f0       	breq	.+2      	; 0x2f80 <vfprintf+0x300>
    2f7e:	b3 94       	inc	r11
    2f80:	a3 fc       	sbrc	r10, 3
    2f82:	11 c0       	rjmp	.+34     	; 0x2fa6 <vfprintf+0x326>
    2f84:	a0 fe       	sbrs	r10, 0
    2f86:	06 c0       	rjmp	.+12     	; 0x2f94 <vfprintf+0x314>
    2f88:	b2 14       	cp	r11, r2
    2f8a:	88 f4       	brcc	.+34     	; 0x2fae <vfprintf+0x32e>
    2f8c:	28 0c       	add	r2, r8
    2f8e:	92 2c       	mov	r9, r2
    2f90:	9b 18       	sub	r9, r11
    2f92:	0e c0       	rjmp	.+28     	; 0x2fb0 <vfprintf+0x330>
    2f94:	b2 14       	cp	r11, r2
    2f96:	60 f4       	brcc	.+24     	; 0x2fb0 <vfprintf+0x330>
    2f98:	b6 01       	movw	r22, r12
    2f9a:	80 e2       	ldi	r24, 0x20	; 32
    2f9c:	90 e0       	ldi	r25, 0x00	; 0
    2f9e:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2fa2:	b3 94       	inc	r11
    2fa4:	f7 cf       	rjmp	.-18     	; 0x2f94 <vfprintf+0x314>
    2fa6:	b2 14       	cp	r11, r2
    2fa8:	18 f4       	brcc	.+6      	; 0x2fb0 <vfprintf+0x330>
    2faa:	2b 18       	sub	r2, r11
    2fac:	02 c0       	rjmp	.+4      	; 0x2fb2 <vfprintf+0x332>
    2fae:	98 2c       	mov	r9, r8
    2fb0:	21 2c       	mov	r2, r1
    2fb2:	a4 fe       	sbrs	r10, 4
    2fb4:	10 c0       	rjmp	.+32     	; 0x2fd6 <vfprintf+0x356>
    2fb6:	b6 01       	movw	r22, r12
    2fb8:	80 e3       	ldi	r24, 0x30	; 48
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2fc0:	a2 fe       	sbrs	r10, 2
    2fc2:	17 c0       	rjmp	.+46     	; 0x2ff2 <vfprintf+0x372>
    2fc4:	a1 fc       	sbrc	r10, 1
    2fc6:	03 c0       	rjmp	.+6      	; 0x2fce <vfprintf+0x34e>
    2fc8:	88 e7       	ldi	r24, 0x78	; 120
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 c0       	rjmp	.+4      	; 0x2fd2 <vfprintf+0x352>
    2fce:	88 e5       	ldi	r24, 0x58	; 88
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	b6 01       	movw	r22, r12
    2fd4:	0c c0       	rjmp	.+24     	; 0x2fee <vfprintf+0x36e>
    2fd6:	8a 2d       	mov	r24, r10
    2fd8:	86 78       	andi	r24, 0x86	; 134
    2fda:	59 f0       	breq	.+22     	; 0x2ff2 <vfprintf+0x372>
    2fdc:	a1 fe       	sbrs	r10, 1
    2fde:	02 c0       	rjmp	.+4      	; 0x2fe4 <vfprintf+0x364>
    2fe0:	8b e2       	ldi	r24, 0x2B	; 43
    2fe2:	01 c0       	rjmp	.+2      	; 0x2fe6 <vfprintf+0x366>
    2fe4:	80 e2       	ldi	r24, 0x20	; 32
    2fe6:	a7 fc       	sbrc	r10, 7
    2fe8:	8d e2       	ldi	r24, 0x2D	; 45
    2fea:	b6 01       	movw	r22, r12
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    2ff2:	89 14       	cp	r8, r9
    2ff4:	38 f4       	brcc	.+14     	; 0x3004 <vfprintf+0x384>
    2ff6:	b6 01       	movw	r22, r12
    2ff8:	80 e3       	ldi	r24, 0x30	; 48
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    3000:	9a 94       	dec	r9
    3002:	f7 cf       	rjmp	.-18     	; 0x2ff2 <vfprintf+0x372>
    3004:	8a 94       	dec	r8
    3006:	f3 01       	movw	r30, r6
    3008:	e8 0d       	add	r30, r8
    300a:	f1 1d       	adc	r31, r1
    300c:	80 81       	ld	r24, Z
    300e:	b6 01       	movw	r22, r12
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    3016:	81 10       	cpse	r8, r1
    3018:	f5 cf       	rjmp	.-22     	; 0x3004 <vfprintf+0x384>
    301a:	22 20       	and	r2, r2
    301c:	09 f4       	brne	.+2      	; 0x3020 <vfprintf+0x3a0>
    301e:	42 ce       	rjmp	.-892    	; 0x2ca4 <vfprintf+0x24>
    3020:	b6 01       	movw	r22, r12
    3022:	80 e2       	ldi	r24, 0x20	; 32
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	0e 94 37 18 	call	0x306e	; 0x306e <fputc>
    302a:	2a 94       	dec	r2
    302c:	f6 cf       	rjmp	.-20     	; 0x301a <vfprintf+0x39a>
    302e:	f6 01       	movw	r30, r12
    3030:	86 81       	ldd	r24, Z+6	; 0x06
    3032:	97 81       	ldd	r25, Z+7	; 0x07
    3034:	02 c0       	rjmp	.+4      	; 0x303a <vfprintf+0x3ba>
    3036:	8f ef       	ldi	r24, 0xFF	; 255
    3038:	9f ef       	ldi	r25, 0xFF	; 255
    303a:	2b 96       	adiw	r28, 0x0b	; 11
    303c:	e2 e1       	ldi	r30, 0x12	; 18
    303e:	0c 94 3f 19 	jmp	0x327e	; 0x327e <__epilogue_restores__>

00003042 <strnlen_P>:
    3042:	fc 01       	movw	r30, r24
    3044:	05 90       	lpm	r0, Z+
    3046:	61 50       	subi	r22, 0x01	; 1
    3048:	70 40       	sbci	r23, 0x00	; 0
    304a:	01 10       	cpse	r0, r1
    304c:	d8 f7       	brcc	.-10     	; 0x3044 <strnlen_P+0x2>
    304e:	80 95       	com	r24
    3050:	90 95       	com	r25
    3052:	8e 0f       	add	r24, r30
    3054:	9f 1f       	adc	r25, r31
    3056:	08 95       	ret

00003058 <strnlen>:
    3058:	fc 01       	movw	r30, r24
    305a:	61 50       	subi	r22, 0x01	; 1
    305c:	70 40       	sbci	r23, 0x00	; 0
    305e:	01 90       	ld	r0, Z+
    3060:	01 10       	cpse	r0, r1
    3062:	d8 f7       	brcc	.-10     	; 0x305a <strnlen+0x2>
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	8e 0f       	add	r24, r30
    306a:	9f 1f       	adc	r25, r31
    306c:	08 95       	ret

0000306e <fputc>:
    306e:	0f 93       	push	r16
    3070:	1f 93       	push	r17
    3072:	cf 93       	push	r28
    3074:	df 93       	push	r29
    3076:	fb 01       	movw	r30, r22
    3078:	23 81       	ldd	r18, Z+3	; 0x03
    307a:	21 fd       	sbrc	r18, 1
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <fputc+0x16>
    307e:	8f ef       	ldi	r24, 0xFF	; 255
    3080:	9f ef       	ldi	r25, 0xFF	; 255
    3082:	2c c0       	rjmp	.+88     	; 0x30dc <fputc+0x6e>
    3084:	22 ff       	sbrs	r18, 2
    3086:	16 c0       	rjmp	.+44     	; 0x30b4 <fputc+0x46>
    3088:	46 81       	ldd	r20, Z+6	; 0x06
    308a:	57 81       	ldd	r21, Z+7	; 0x07
    308c:	24 81       	ldd	r18, Z+4	; 0x04
    308e:	35 81       	ldd	r19, Z+5	; 0x05
    3090:	42 17       	cp	r20, r18
    3092:	53 07       	cpc	r21, r19
    3094:	44 f4       	brge	.+16     	; 0x30a6 <fputc+0x38>
    3096:	a0 81       	ld	r26, Z
    3098:	b1 81       	ldd	r27, Z+1	; 0x01
    309a:	9d 01       	movw	r18, r26
    309c:	2f 5f       	subi	r18, 0xFF	; 255
    309e:	3f 4f       	sbci	r19, 0xFF	; 255
    30a0:	31 83       	std	Z+1, r19	; 0x01
    30a2:	20 83       	st	Z, r18
    30a4:	8c 93       	st	X, r24
    30a6:	26 81       	ldd	r18, Z+6	; 0x06
    30a8:	37 81       	ldd	r19, Z+7	; 0x07
    30aa:	2f 5f       	subi	r18, 0xFF	; 255
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	37 83       	std	Z+7, r19	; 0x07
    30b0:	26 83       	std	Z+6, r18	; 0x06
    30b2:	14 c0       	rjmp	.+40     	; 0x30dc <fputc+0x6e>
    30b4:	8b 01       	movw	r16, r22
    30b6:	ec 01       	movw	r28, r24
    30b8:	fb 01       	movw	r30, r22
    30ba:	00 84       	ldd	r0, Z+8	; 0x08
    30bc:	f1 85       	ldd	r31, Z+9	; 0x09
    30be:	e0 2d       	mov	r30, r0
    30c0:	09 95       	icall
    30c2:	89 2b       	or	r24, r25
    30c4:	e1 f6       	brne	.-72     	; 0x307e <fputc+0x10>
    30c6:	d8 01       	movw	r26, r16
    30c8:	16 96       	adiw	r26, 0x06	; 6
    30ca:	8d 91       	ld	r24, X+
    30cc:	9c 91       	ld	r25, X
    30ce:	17 97       	sbiw	r26, 0x07	; 7
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	17 96       	adiw	r26, 0x07	; 7
    30d4:	9c 93       	st	X, r25
    30d6:	8e 93       	st	-X, r24
    30d8:	16 97       	sbiw	r26, 0x06	; 6
    30da:	ce 01       	movw	r24, r28
    30dc:	df 91       	pop	r29
    30de:	cf 91       	pop	r28
    30e0:	1f 91       	pop	r17
    30e2:	0f 91       	pop	r16
    30e4:	08 95       	ret

000030e6 <__ultoa_invert>:
    30e6:	fa 01       	movw	r30, r20
    30e8:	aa 27       	eor	r26, r26
    30ea:	28 30       	cpi	r18, 0x08	; 8
    30ec:	51 f1       	breq	.+84     	; 0x3142 <__ultoa_invert+0x5c>
    30ee:	20 31       	cpi	r18, 0x10	; 16
    30f0:	81 f1       	breq	.+96     	; 0x3152 <__ultoa_invert+0x6c>
    30f2:	e8 94       	clt
    30f4:	6f 93       	push	r22
    30f6:	6e 7f       	andi	r22, 0xFE	; 254
    30f8:	6e 5f       	subi	r22, 0xFE	; 254
    30fa:	7f 4f       	sbci	r23, 0xFF	; 255
    30fc:	8f 4f       	sbci	r24, 0xFF	; 255
    30fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3100:	af 4f       	sbci	r26, 0xFF	; 255
    3102:	b1 e0       	ldi	r27, 0x01	; 1
    3104:	3e d0       	rcall	.+124    	; 0x3182 <__ultoa_invert+0x9c>
    3106:	b4 e0       	ldi	r27, 0x04	; 4
    3108:	3c d0       	rcall	.+120    	; 0x3182 <__ultoa_invert+0x9c>
    310a:	67 0f       	add	r22, r23
    310c:	78 1f       	adc	r23, r24
    310e:	89 1f       	adc	r24, r25
    3110:	9a 1f       	adc	r25, r26
    3112:	a1 1d       	adc	r26, r1
    3114:	68 0f       	add	r22, r24
    3116:	79 1f       	adc	r23, r25
    3118:	8a 1f       	adc	r24, r26
    311a:	91 1d       	adc	r25, r1
    311c:	a1 1d       	adc	r26, r1
    311e:	6a 0f       	add	r22, r26
    3120:	71 1d       	adc	r23, r1
    3122:	81 1d       	adc	r24, r1
    3124:	91 1d       	adc	r25, r1
    3126:	a1 1d       	adc	r26, r1
    3128:	20 d0       	rcall	.+64     	; 0x316a <__ultoa_invert+0x84>
    312a:	09 f4       	brne	.+2      	; 0x312e <__ultoa_invert+0x48>
    312c:	68 94       	set
    312e:	3f 91       	pop	r19
    3130:	2a e0       	ldi	r18, 0x0A	; 10
    3132:	26 9f       	mul	r18, r22
    3134:	11 24       	eor	r1, r1
    3136:	30 19       	sub	r19, r0
    3138:	30 5d       	subi	r19, 0xD0	; 208
    313a:	31 93       	st	Z+, r19
    313c:	de f6       	brtc	.-74     	; 0x30f4 <__ultoa_invert+0xe>
    313e:	cf 01       	movw	r24, r30
    3140:	08 95       	ret
    3142:	46 2f       	mov	r20, r22
    3144:	47 70       	andi	r20, 0x07	; 7
    3146:	40 5d       	subi	r20, 0xD0	; 208
    3148:	41 93       	st	Z+, r20
    314a:	b3 e0       	ldi	r27, 0x03	; 3
    314c:	0f d0       	rcall	.+30     	; 0x316c <__ultoa_invert+0x86>
    314e:	c9 f7       	brne	.-14     	; 0x3142 <__ultoa_invert+0x5c>
    3150:	f6 cf       	rjmp	.-20     	; 0x313e <__ultoa_invert+0x58>
    3152:	46 2f       	mov	r20, r22
    3154:	4f 70       	andi	r20, 0x0F	; 15
    3156:	40 5d       	subi	r20, 0xD0	; 208
    3158:	4a 33       	cpi	r20, 0x3A	; 58
    315a:	18 f0       	brcs	.+6      	; 0x3162 <__ultoa_invert+0x7c>
    315c:	49 5d       	subi	r20, 0xD9	; 217
    315e:	31 fd       	sbrc	r19, 1
    3160:	40 52       	subi	r20, 0x20	; 32
    3162:	41 93       	st	Z+, r20
    3164:	02 d0       	rcall	.+4      	; 0x316a <__ultoa_invert+0x84>
    3166:	a9 f7       	brne	.-22     	; 0x3152 <__ultoa_invert+0x6c>
    3168:	ea cf       	rjmp	.-44     	; 0x313e <__ultoa_invert+0x58>
    316a:	b4 e0       	ldi	r27, 0x04	; 4
    316c:	a6 95       	lsr	r26
    316e:	97 95       	ror	r25
    3170:	87 95       	ror	r24
    3172:	77 95       	ror	r23
    3174:	67 95       	ror	r22
    3176:	ba 95       	dec	r27
    3178:	c9 f7       	brne	.-14     	; 0x316c <__ultoa_invert+0x86>
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	61 05       	cpc	r22, r1
    317e:	71 05       	cpc	r23, r1
    3180:	08 95       	ret
    3182:	9b 01       	movw	r18, r22
    3184:	ac 01       	movw	r20, r24
    3186:	0a 2e       	mov	r0, r26
    3188:	06 94       	lsr	r0
    318a:	57 95       	ror	r21
    318c:	47 95       	ror	r20
    318e:	37 95       	ror	r19
    3190:	27 95       	ror	r18
    3192:	ba 95       	dec	r27
    3194:	c9 f7       	brne	.-14     	; 0x3188 <__ultoa_invert+0xa2>
    3196:	62 0f       	add	r22, r18
    3198:	73 1f       	adc	r23, r19
    319a:	84 1f       	adc	r24, r20
    319c:	95 1f       	adc	r25, r21
    319e:	a0 1d       	adc	r26, r0
    31a0:	08 95       	ret

000031a2 <eeprom_read_byte>:
    31a2:	f9 99       	sbic	0x1f, 1	; 31
    31a4:	fe cf       	rjmp	.-4      	; 0x31a2 <eeprom_read_byte>
    31a6:	92 bd       	out	0x22, r25	; 34
    31a8:	81 bd       	out	0x21, r24	; 33
    31aa:	f8 9a       	sbi	0x1f, 0	; 31
    31ac:	99 27       	eor	r25, r25
    31ae:	80 b5       	in	r24, 0x20	; 32
    31b0:	08 95       	ret

000031b2 <eeprom_read_dword>:
    31b2:	a6 e1       	ldi	r26, 0x16	; 22
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	44 e0       	ldi	r20, 0x04	; 4
    31b8:	50 e0       	ldi	r21, 0x00	; 0
    31ba:	0c 94 02 19 	jmp	0x3204	; 0x3204 <eeprom_read_blraw>

000031be <eeprom_read_word>:
    31be:	a8 e1       	ldi	r26, 0x18	; 24
    31c0:	b0 e0       	ldi	r27, 0x00	; 0
    31c2:	42 e0       	ldi	r20, 0x02	; 2
    31c4:	50 e0       	ldi	r21, 0x00	; 0
    31c6:	0c 94 02 19 	jmp	0x3204	; 0x3204 <eeprom_read_blraw>

000031ca <eeprom_write_byte>:
    31ca:	26 2f       	mov	r18, r22

000031cc <eeprom_write_r18>:
    31cc:	f9 99       	sbic	0x1f, 1	; 31
    31ce:	fe cf       	rjmp	.-4      	; 0x31cc <eeprom_write_r18>
    31d0:	1f ba       	out	0x1f, r1	; 31
    31d2:	92 bd       	out	0x22, r25	; 34
    31d4:	81 bd       	out	0x21, r24	; 33
    31d6:	20 bd       	out	0x20, r18	; 32
    31d8:	0f b6       	in	r0, 0x3f	; 63
    31da:	f8 94       	cli
    31dc:	fa 9a       	sbi	0x1f, 2	; 31
    31de:	f9 9a       	sbi	0x1f, 1	; 31
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	01 96       	adiw	r24, 0x01	; 1
    31e4:	08 95       	ret

000031e6 <eeprom_write_dword>:
    31e6:	24 2f       	mov	r18, r20
    31e8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <eeprom_write_r18>
    31ec:	25 2f       	mov	r18, r21
    31ee:	0e 94 e6 18 	call	0x31cc	; 0x31cc <eeprom_write_r18>
    31f2:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <eeprom_write_word>

000031f6 <eeprom_write_word>:
    31f6:	0e 94 e5 18 	call	0x31ca	; 0x31ca <eeprom_write_byte>
    31fa:	27 2f       	mov	r18, r23
    31fc:	0c 94 e6 18 	jmp	0x31cc	; 0x31cc <eeprom_write_r18>

00003200 <eeprom_read_block>:
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22

00003204 <eeprom_read_blraw>:
    3204:	fc 01       	movw	r30, r24
    3206:	f9 99       	sbic	0x1f, 1	; 31
    3208:	fe cf       	rjmp	.-4      	; 0x3206 <eeprom_read_blraw+0x2>
    320a:	06 c0       	rjmp	.+12     	; 0x3218 <eeprom_read_blraw+0x14>
    320c:	f2 bd       	out	0x22, r31	; 34
    320e:	e1 bd       	out	0x21, r30	; 33
    3210:	f8 9a       	sbi	0x1f, 0	; 31
    3212:	31 96       	adiw	r30, 0x01	; 1
    3214:	00 b4       	in	r0, 0x20	; 32
    3216:	0d 92       	st	X+, r0
    3218:	41 50       	subi	r20, 0x01	; 1
    321a:	50 40       	sbci	r21, 0x00	; 0
    321c:	b8 f7       	brcc	.-18     	; 0x320c <eeprom_read_blraw+0x8>
    321e:	08 95       	ret

00003220 <__muluhisi3>:
    3220:	0e 94 5a 19 	call	0x32b4	; 0x32b4 <__umulhisi3>
    3224:	a5 9f       	mul	r26, r21
    3226:	90 0d       	add	r25, r0
    3228:	b4 9f       	mul	r27, r20
    322a:	90 0d       	add	r25, r0
    322c:	a4 9f       	mul	r26, r20
    322e:	80 0d       	add	r24, r0
    3230:	91 1d       	adc	r25, r1
    3232:	11 24       	eor	r1, r1
    3234:	08 95       	ret

00003236 <__mulshisi3>:
    3236:	b7 ff       	sbrs	r27, 7
    3238:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__muluhisi3>

0000323c <__mulohisi3>:
    323c:	0e 94 10 19 	call	0x3220	; 0x3220 <__muluhisi3>
    3240:	82 1b       	sub	r24, r18
    3242:	93 0b       	sbc	r25, r19
    3244:	08 95       	ret

00003246 <__prologue_saves__>:
    3246:	2f 92       	push	r2
    3248:	3f 92       	push	r3
    324a:	4f 92       	push	r4
    324c:	5f 92       	push	r5
    324e:	6f 92       	push	r6
    3250:	7f 92       	push	r7
    3252:	8f 92       	push	r8
    3254:	9f 92       	push	r9
    3256:	af 92       	push	r10
    3258:	bf 92       	push	r11
    325a:	cf 92       	push	r12
    325c:	df 92       	push	r13
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	ca 1b       	sub	r28, r26
    3270:	db 0b       	sbc	r29, r27
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	de bf       	out	0x3e, r29	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	cd bf       	out	0x3d, r28	; 61
    327c:	09 94       	ijmp

0000327e <__epilogue_restores__>:
    327e:	2a 88       	ldd	r2, Y+18	; 0x12
    3280:	39 88       	ldd	r3, Y+17	; 0x11
    3282:	48 88       	ldd	r4, Y+16	; 0x10
    3284:	5f 84       	ldd	r5, Y+15	; 0x0f
    3286:	6e 84       	ldd	r6, Y+14	; 0x0e
    3288:	7d 84       	ldd	r7, Y+13	; 0x0d
    328a:	8c 84       	ldd	r8, Y+12	; 0x0c
    328c:	9b 84       	ldd	r9, Y+11	; 0x0b
    328e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3290:	b9 84       	ldd	r11, Y+9	; 0x09
    3292:	c8 84       	ldd	r12, Y+8	; 0x08
    3294:	df 80       	ldd	r13, Y+7	; 0x07
    3296:	ee 80       	ldd	r14, Y+6	; 0x06
    3298:	fd 80       	ldd	r15, Y+5	; 0x05
    329a:	0c 81       	ldd	r16, Y+4	; 0x04
    329c:	1b 81       	ldd	r17, Y+3	; 0x03
    329e:	aa 81       	ldd	r26, Y+2	; 0x02
    32a0:	b9 81       	ldd	r27, Y+1	; 0x01
    32a2:	ce 0f       	add	r28, r30
    32a4:	d1 1d       	adc	r29, r1
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	ed 01       	movw	r28, r26
    32b2:	08 95       	ret

000032b4 <__umulhisi3>:
    32b4:	a2 9f       	mul	r26, r18
    32b6:	b0 01       	movw	r22, r0
    32b8:	b3 9f       	mul	r27, r19
    32ba:	c0 01       	movw	r24, r0
    32bc:	a3 9f       	mul	r26, r19
    32be:	70 0d       	add	r23, r0
    32c0:	81 1d       	adc	r24, r1
    32c2:	11 24       	eor	r1, r1
    32c4:	91 1d       	adc	r25, r1
    32c6:	b2 9f       	mul	r27, r18
    32c8:	70 0d       	add	r23, r0
    32ca:	81 1d       	adc	r24, r1
    32cc:	11 24       	eor	r1, r1
    32ce:	91 1d       	adc	r25, r1
    32d0:	08 95       	ret

000032d2 <_exit>:
    32d2:	f8 94       	cli

000032d4 <__stop_program>:
    32d4:	ff cf       	rjmp	.-2      	; 0x32d4 <__stop_program>
