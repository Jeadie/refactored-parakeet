
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011a  00800100  0000343c  000034d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000343c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  0080021a  0080021a  000035ea  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003648  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000770  00000000  00000000  00003688  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000069aa  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000214a  00000000  00000000  0000a7a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000389d  00000000  00000000  0000c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011ac  00000000  00000000  0001018c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001915  00000000  00000000  00011338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000034a6  00000000  00000000  00012c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005d8  00000000  00000000  000160f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 20 01 	jmp	0x240	; 0x240 <__ctors_end>
       4:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
       8:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
       c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      10:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      14:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_5>
      18:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      1c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      20:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      24:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      28:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      2c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      30:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      34:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      38:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      3c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      40:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_16>
      44:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      48:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      4c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      50:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <__vector_20>
      54:	0c 94 97 0e 	jmp	0x1d2e	; 0x1d2e <__vector_21>
      58:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      5c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      60:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      64:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      68:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      6c:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      70:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      74:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      78:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__bad_interrupt>
      7c:	08 00       	.word	0x0008	; ????
      7e:	00 00       	nop
      80:	be 92       	st	-X, r11
      82:	24 49       	sbci	r18, 0x94	; 148
      84:	12 3e       	cpi	r17, 0xE2	; 226
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	be cd       	rjmp	.-1156   	; 0xfffffc08 <__eeprom_end+0xff7efc08>
      8c:	cc cc       	rjmp	.-1640   	; 0xfffffa26 <__eeprom_end+0xff7efa26>
      8e:	4c 3e       	cpi	r20, 0xEC	; 236
      90:	00 00       	nop
      92:	00 80       	ld	r0, Z
      94:	be ab       	std	Y+54, r27	; 0x36
      96:	aa aa       	std	Y+50, r10	; 0x32
      98:	aa 3e       	cpi	r26, 0xEA	; 234
      9a:	00 00       	nop
      9c:	00 00       	nop
      9e:	bf 00       	.word	0x00bf	; ????
      a0:	00 00       	nop
      a2:	80 3f       	cpi	r24, 0xF0	; 240
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	00 08       	sbc	r0, r0
      aa:	41 78       	andi	r20, 0x81	; 129
      ac:	d3 bb       	out	0x13, r29	; 19
      ae:	43 87       	std	Z+11, r20	; 0x0b
      b0:	d1 13       	cpse	r29, r17
      b2:	3d 19       	sub	r19, r13
      b4:	0e 3c       	cpi	r16, 0xCE	; 206
      b6:	c3 bd       	out	0x23, r28	; 35
      b8:	42 82       	std	Z+2, r4	; 0x02
      ba:	ad 2b       	or	r26, r29
      bc:	3e 68       	ori	r19, 0x8E	; 142
      be:	ec 82       	std	Y+4, r14	; 0x04
      c0:	76 be       	out	0x36, r7	; 54
      c2:	d9 8f       	std	Y+25, r29	; 0x19
      c4:	e1 a9       	ldd	r30, Z+49	; 0x31
      c6:	3e 4c       	sbci	r19, 0xCE	; 206
      c8:	80 ef       	ldi	r24, 0xF0	; 240
      ca:	ff be       	out	0x3f, r15	; 63
      cc:	01 c4       	rjmp	.+2050   	; 0x8d0 <high_score_name_position+0xc>
      ce:	ff 7f       	andi	r31, 0xFF	; 255
      d0:	3f 00       	.word	0x003f	; ????
      d2:	00 00       	nop
	...

000000d6 <__trampolines_end>:
      d6:	23 23       	and	r18, r19
      d8:	23 48       	sbci	r18, 0x83	; 131
      da:	49 47       	sbci	r20, 0x79	; 121
      dc:	48 20       	and	r4, r8
      de:	53 43       	sbci	r21, 0x33	; 51
      e0:	4f 52       	subi	r20, 0x2F	; 47
      e2:	45 53       	subi	r20, 0x35	; 53
      e4:	23 23       	and	r18, r19
      e6:	23 00       	.word	0x0023	; ????

000000e8 <__c.2568>:
      e8:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      f8:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

00000106 <__c.2566>:
     106:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

00000110 <numbers>:
     110:	7b 01 78 01 74 01 70 01 6c 01 68 01 64 01 60 01     {.x.t.p.l.h.d.`.
     120:	5c 01 58 01                                         \.X.

00000124 <letters>:
     124:	ea 01 e6 01 e2 01 de 01 da 01 d6 01 d2 01 ce 01     ................
     134:	cb 01 c7 01 c3 01 bf 01 ba 01 b6 01 b2 01 ae 01     ................
     144:	a9 01 a5 01 a1 01 9c 01 98 01 93 01 8e 01 89 01     ................
     154:	84 01 7f 01                                         ....

00000158 <cols_9>:
     158:	64 92 92 7d                                         d..}

0000015c <cols_8>:
     15c:	6c 92 92 6d                                         l..m

00000160 <cols_7>:
     160:	80 9e a0 c1                                         ....

00000164 <cols_6>:
     164:	7c 92 92 4d                                         |..M

00000168 <cols_5>:
     168:	e4 a2 a2 9d                                         ....

0000016c <cols_4>:
     16c:	18 28 48 ff                                         .(H.

00000170 <cols_3>:
     170:	44 92 92 6d                                         D..m

00000174 <cols_2>:
     174:	46 8a 92 63                                         F..c

00000178 <cols_1>:
     178:	42 fe 03                                            B..

0000017b <cols_0>:
     17b:	7c 92 a2 7d                                         |..}

0000017f <cols_Z>:
     17f:	86 8a 92 a2 c3                                      .....

00000184 <cols_Y>:
     184:	e0 10 0e 10 e1                                      .....

00000189 <cols_X>:
     189:	c6 28 10 28 c7                                      .(.(.

0000018e <cols_W>:
     18e:	fc 02 1c 02 fd                                      .....

00000193 <cols_V>:
     193:	f8 04 02 04 f9                                      .....

00000198 <cols_U>:
     198:	fc 02 02 fd                                         ....

0000019c <cols_T>:
     19c:	80 80 fe 80 81                                      .....

000001a1 <cols_S>:
     1a1:	64 92 92 4d                                         d..M

000001a5 <cols_R>:
     1a5:	fe 90 98 67                                         ...g

000001a9 <cols_Q>:
     1a9:	7c 82 8a 7c 03                                      |..|.

000001ae <cols_P>:
     1ae:	fe 90 90 61                                         ...a

000001b2 <cols_O>:
     1b2:	7c 82 82 7d                                         |..}

000001b6 <cols_N>:
     1b6:	fe 20 10 ff                                         . ..

000001ba <cols_M>:
     1ba:	fe 40 30 40 ff                                      .@0@.

000001bf <cols_L>:
     1bf:	fe 02 02 03                                         ....

000001c3 <cols_K>:
     1c3:	fe 10 28 c7                                         ..(.

000001c7 <cols_J>:
     1c7:	04 02 02 fd                                         ....

000001cb <cols_I>:
     1cb:	82 fe 83                                            ...

000001ce <cols_H>:
     1ce:	fe 10 10 ff                                         ....

000001d2 <cols_G>:
     1d2:	7c 82 92 5d                                         |..]

000001d6 <cols_F>:
     1d6:	fe 90 90 81                                         ....

000001da <cols_E>:
     1da:	fe 92 92 83                                         ....

000001de <cols_D>:
     1de:	fe 82 82 7d                                         ...}

000001e2 <cols_C>:
     1e2:	7c 82 82 45                                         |..E

000001e6 <cols_B>:
     1e6:	fe 92 92 6d                                         ...m

000001ea <cols_A>:
     1ea:	7e 90 90 7f                                         ~...

000001ee <__c.2114>:
     1ee:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1fe:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     20e:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

00000218 <__c.2112>:
     218:	53 6e 61 6b 65 00                                   Snake.

0000021e <__c.2066>:
     21e:	1b 5b 3f 32 35 68 00                                .[?25h.

00000225 <__c.2062>:
     225:	1b 5b 3f 32 35 6c 00                                .[?25l.

0000022c <__c.2058>:
     22c:	1b 5b 25 64 6d 00                                   .[%dm.

00000232 <__c.2048>:
     232:	1b 5b 32 4a 00                                      .[2J.

00000237 <__c.2033>:
     237:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

00000240 <__ctors_end>:
     240:	11 24       	eor	r1, r1
     242:	1f be       	out	0x3f, r1	; 63
     244:	cf ef       	ldi	r28, 0xFF	; 255
     246:	d8 e0       	ldi	r29, 0x08	; 8
     248:	de bf       	out	0x3e, r29	; 62
     24a:	cd bf       	out	0x3d, r28	; 61

0000024c <__do_copy_data>:
     24c:	12 e0       	ldi	r17, 0x02	; 2
     24e:	a0 e0       	ldi	r26, 0x00	; 0
     250:	b1 e0       	ldi	r27, 0x01	; 1
     252:	ec e3       	ldi	r30, 0x3C	; 60
     254:	f4 e3       	ldi	r31, 0x34	; 52
     256:	02 c0       	rjmp	.+4      	; 0x25c <__do_copy_data+0x10>
     258:	05 90       	lpm	r0, Z+
     25a:	0d 92       	st	X+, r0
     25c:	aa 31       	cpi	r26, 0x1A	; 26
     25e:	b1 07       	cpc	r27, r17
     260:	d9 f7       	brne	.-10     	; 0x258 <__do_copy_data+0xc>

00000262 <__do_clear_bss>:
     262:	23 e0       	ldi	r18, 0x03	; 3
     264:	aa e1       	ldi	r26, 0x1A	; 26
     266:	b2 e0       	ldi	r27, 0x02	; 2
     268:	01 c0       	rjmp	.+2      	; 0x26c <.do_clear_bss_start>

0000026a <.do_clear_bss_loop>:
     26a:	1d 92       	st	X+, r1

0000026c <.do_clear_bss_start>:
     26c:	a1 3a       	cpi	r26, 0xA1	; 161
     26e:	b2 07       	cpc	r27, r18
     270:	e1 f7       	brne	.-8      	; 0x26a <.do_clear_bss_loop>
     272:	0e 94 35 0b 	call	0x166a	; 0x166a <main>
     276:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <_exit>

0000027a <__bad_interrupt>:
     27a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027e <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     27e:	e8 e6       	ldi	r30, 0x68	; 104
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	82 60       	ori	r24, 0x02	; 2
     286:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     288:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     28a:	ec e6       	ldi	r30, 0x6C	; 108
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	80 81       	ld	r24, Z
     290:	8f 60       	ori	r24, 0x0F	; 15
     292:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     294:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
     298:	08 95       	ret

0000029a <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     29a:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <__data_end>
     29e:	08 95       	ret

000002a0 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     2a0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     2a4:	18 16       	cp	r1, r24
     2a6:	3c f5       	brge	.+78     	; 0x2f6 <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     2a8:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     2ac:	6f b7       	in	r22, 0x3f	; 63
		cli();
     2ae:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2b0:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <__data_end>
     2b4:	92 30       	cpi	r25, 0x02	; 2
     2b6:	b4 f0       	brlt	.+44     	; 0x2e4 <button_pushed+0x44>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     2be:	f9 01       	movw	r30, r18
     2c0:	e5 5e       	subi	r30, 0xE5	; 229
     2c2:	fd 4f       	sbci	r31, 0xFD	; 253
     2c4:	40 81       	ld	r20, Z
     2c6:	f9 01       	movw	r30, r18
     2c8:	e6 5e       	subi	r30, 0xE6	; 230
     2ca:	fd 4f       	sbci	r31, 0xFD	; 253
     2cc:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     2ce:	9f 5f       	subi	r25, 0xFF	; 255
     2d0:	29 2f       	mov	r18, r25
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 91 1a 02 	lds	r20, 0x021A	; 0x80021a <__data_end>
     2d8:	04 2e       	mov	r0, r20
     2da:	00 0c       	add	r0, r0
     2dc:	55 0b       	sbc	r21, r21
     2de:	24 17       	cp	r18, r20
     2e0:	35 07       	cpc	r19, r21
     2e2:	6c f3       	brlt	.-38     	; 0x2be <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     2e4:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <__data_end>
     2e8:	91 50       	subi	r25, 0x01	; 1
     2ea:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <__data_end>
		
		if(interrupts_were_enabled) {
     2ee:	66 23       	and	r22, r22
     2f0:	1c f4       	brge	.+6      	; 0x2f8 <button_pushed+0x58>
			// Turn them back on again
			sei();
     2f2:	78 94       	sei
     2f4:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     2f6:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     2f8:	08 95       	ret

000002fa <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	2f 93       	push	r18
     306:	3f 93       	push	r19
     308:	4f 93       	push	r20
     30a:	5f 93       	push	r21
     30c:	6f 93       	push	r22
     30e:	7f 93       	push	r23
     310:	8f 93       	push	r24
     312:	9f 93       	push	r25
     314:	ef 93       	push	r30
     316:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     318:	43 b1       	in	r20, 0x03	; 3
     31a:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     31c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <__data_end>
     320:	88 30       	cpi	r24, 0x08	; 8
     322:	64 f5       	brge	.+88     	; 0x37c <__vector_5+0x82>
     324:	80 e0       	ldi	r24, 0x00	; 0
     326:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     328:	64 2f       	mov	r22, r20
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	9b 01       	movw	r18, r22
     32e:	08 2e       	mov	r0, r24
     330:	02 c0       	rjmp	.+4      	; 0x336 <__vector_5+0x3c>
     332:	35 95       	asr	r19
     334:	27 95       	ror	r18
     336:	0a 94       	dec	r0
     338:	e2 f7       	brpl	.-8      	; 0x332 <__vector_5+0x38>
     33a:	20 ff       	sbrs	r18, 0
     33c:	1b c0       	rjmp	.+54     	; 0x374 <__vector_5+0x7a>
     33e:	20 91 23 02 	lds	r18, 0x0223	; 0x800223 <last_button_state>
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	08 2e       	mov	r0, r24
     346:	02 c0       	rjmp	.+4      	; 0x34c <__vector_5+0x52>
     348:	35 95       	asr	r19
     34a:	27 95       	ror	r18
     34c:	0a 94       	dec	r0
     34e:	e2 f7       	brpl	.-8      	; 0x348 <__vector_5+0x4e>
     350:	20 fd       	sbrc	r18, 0
     352:	10 c0       	rjmp	.+32     	; 0x374 <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     354:	e0 91 1a 02 	lds	r30, 0x021A	; 0x80021a <__data_end>
     358:	21 e0       	ldi	r18, 0x01	; 1
     35a:	2e 0f       	add	r18, r30
     35c:	20 93 1a 02 	sts	0x021A, r18	; 0x80021a <__data_end>
     360:	0e 2e       	mov	r0, r30
     362:	00 0c       	add	r0, r0
     364:	ff 0b       	sbc	r31, r31
     366:	e5 5e       	subi	r30, 0xE5	; 229
     368:	fd 4f       	sbci	r31, 0xFD	; 253
     36a:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     36c:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <__data_end>
     370:	28 30       	cpi	r18, 0x08	; 8
     372:	24 f4       	brge	.+8      	; 0x37c <__vector_5+0x82>
     374:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     376:	84 30       	cpi	r24, 0x04	; 4
     378:	91 05       	cpc	r25, r1
     37a:	c1 f6       	brne	.-80     	; 0x32c <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     37c:	40 93 23 02 	sts	0x0223, r20	; 0x800223 <last_button_state>
}
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     39e:	89 b1       	in	r24, 0x09	; 9
     3a0:	83 fb       	bst	r24, 3
     3a2:	88 27       	eor	r24, r24
     3a4:	80 f9       	bld	r24, 0
     3a6:	08 95       	ret

000003a8 <buzzer_time_left>:
     3a8:	cf 92       	push	r12
     3aa:	df 92       	push	r13
     3ac:	ef 92       	push	r14
     3ae:	ff 92       	push	r15
     3b0:	0f 93       	push	r16
     3b2:	1f 93       	push	r17
     3b4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
     3b8:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <buzzer_time>
     3bc:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <buzzer_time+0x1>
     3c0:	6a 01       	movw	r12, r20
     3c2:	55 0f       	add	r21, r21
     3c4:	ee 08       	sbc	r14, r14
     3c6:	ff 08       	sbc	r15, r15
     3c8:	00 91 77 02 	lds	r16, 0x0277	; 0x800277 <clock_at_tone_start>
     3cc:	10 91 78 02 	lds	r17, 0x0278	; 0x800278 <clock_at_tone_start+0x1>
     3d0:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <clock_at_tone_start+0x2>
     3d4:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <clock_at_tone_start+0x3>
     3d8:	c0 0e       	add	r12, r16
     3da:	d1 1e       	adc	r13, r17
     3dc:	e2 1e       	adc	r14, r18
     3de:	f3 1e       	adc	r15, r19
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	6c 15       	cp	r22, r12
     3e6:	7d 05       	cpc	r23, r13
     3e8:	8e 05       	cpc	r24, r14
     3ea:	9f 05       	cpc	r25, r15
     3ec:	10 f0       	brcs	.+4      	; 0x3f2 <buzzer_time_left+0x4a>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	c9 01       	movw	r24, r18
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <next_buzzer_tone>:
     402:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     406:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     40a:	01 96       	adiw	r24, 0x01	; 1
     40c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     410:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     414:	88 0f       	add	r24, r24
     416:	99 1f       	adc	r25, r25
     418:	fc 01       	movw	r30, r24
     41a:	ed 59       	subi	r30, 0x9D	; 157
     41c:	fd 4f       	sbci	r31, 0xFD	; 253
     41e:	80 81       	ld	r24, Z
     420:	91 81       	ldd	r25, Z+1	; 0x01
     422:	0e 94 01 13 	call	0x2602	; 0x2602 <change_OCR1A>
     426:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
     42a:	60 93 77 02 	sts	0x0277, r22	; 0x800277 <clock_at_tone_start>
     42e:	70 93 78 02 	sts	0x0278, r23	; 0x800278 <clock_at_tone_start+0x1>
     432:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <clock_at_tone_start+0x2>
     436:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <clock_at_tone_start+0x3>
     43a:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     43e:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     442:	ee 0f       	add	r30, r30
     444:	ff 1f       	adc	r31, r31
     446:	e3 59       	subi	r30, 0x93	; 147
     448:	fd 4f       	sbci	r31, 0xFD	; 253
     44a:	80 81       	ld	r24, Z
     44c:	91 81       	ldd	r25, Z+1	; 0x01
     44e:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <buzzer_time+0x1>
     452:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <buzzer_time>
     456:	08 95       	ret

00000458 <reset_buzzer>:
     458:	55 98       	cbi	0x0a, 5	; 10
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	9f ef       	ldi	r25, 0xFF	; 255
     45e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     462:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     466:	08 95       	ret

00000468 <play_start_game_sound_effect>:
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <number_of_tones+0x1>
     470:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <number_of_tones>
     474:	ed e6       	ldi	r30, 0x6D	; 109
     476:	f2 e0       	ldi	r31, 0x02	; 2
     478:	84 ef       	ldi	r24, 0xF4	; 244
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	91 83       	std	Z+1, r25	; 0x01
     47e:	80 83       	st	Z, r24
     480:	28 ec       	ldi	r18, 0xC8	; 200
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	33 83       	std	Z+3, r19	; 0x03
     486:	22 83       	std	Z+2, r18	; 0x02
     488:	95 83       	std	Z+5, r25	; 0x05
     48a:	84 83       	std	Z+4, r24	; 0x04
     48c:	e3 e6       	ldi	r30, 0x63	; 99
     48e:	f2 e0       	ldi	r31, 0x02	; 2
     490:	80 ed       	ldi	r24, 0xD0	; 208
     492:	97 e0       	ldi	r25, 0x07	; 7
     494:	91 83       	std	Z+1, r25	; 0x01
     496:	80 83       	st	Z, r24
     498:	28 ee       	ldi	r18, 0xE8	; 232
     49a:	33 e0       	ldi	r19, 0x03	; 3
     49c:	33 83       	std	Z+3, r19	; 0x03
     49e:	22 83       	std	Z+2, r18	; 0x02
     4a0:	95 83       	std	Z+5, r25	; 0x05
     4a2:	84 83       	std	Z+4, r24	; 0x04
     4a4:	8f ef       	ldi	r24, 0xFF	; 255
     4a6:	9f ef       	ldi	r25, 0xFF	; 255
     4a8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4ac:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     4b0:	0e 94 01 02 	call	0x402	; 0x402 <next_buzzer_tone>
     4b4:	0e 94 cf 01 	call	0x39e	; 0x39e <sound_effects_on_mode>
     4b8:	81 11       	cpse	r24, r1
     4ba:	0e 94 06 13 	call	0x260c	; 0x260c <enable_timer_one>
     4be:	08 95       	ret

000004c0 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	90 93 62 02 	sts	0x0262, r25	; 0x800262 <number_of_tones+0x1>
     4c8:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <number_of_tones>
		buzzer_durations[0] = 50;
     4cc:	ed e6       	ldi	r30, 0x6D	; 109
     4ce:	f2 e0       	ldi	r31, 0x02	; 2
     4d0:	82 e3       	ldi	r24, 0x32	; 50
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	91 83       	std	Z+1, r25	; 0x01
     4d6:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     4d8:	84 e6       	ldi	r24, 0x64	; 100
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	93 83       	std	Z+3, r25	; 0x03
     4de:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     4e0:	e3 e6       	ldi	r30, 0x63	; 99
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	80 ed       	ldi	r24, 0xD0	; 208
     4e6:	97 e0       	ldi	r25, 0x07	; 7
     4e8:	91 83       	std	Z+1, r25	; 0x01
     4ea:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     4ec:	88 ee       	ldi	r24, 0xE8	; 232
     4ee:	93 e0       	ldi	r25, 0x03	; 3
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	9f ef       	ldi	r25, 0xFF	; 255
     4f8:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4fc:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     500:	0e 94 01 02 	call	0x402	; 0x402 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     504:	0e 94 cf 01 	call	0x39e	; 0x39e <sound_effects_on_mode>
     508:	81 11       	cpse	r24, r1
			enable_timer_one();
     50a:	0e 94 06 13 	call	0x260c	; 0x260c <enable_timer_one>
     50e:	08 95       	ret

00000510 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     510:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <number_of_tones>
     514:	30 91 62 02 	lds	r19, 0x0262	; 0x800262 <number_of_tones+0x1>
     518:	21 50       	subi	r18, 0x01	; 1
     51a:	31 09       	sbc	r19, r1
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     524:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     528:	42 17       	cp	r20, r18
     52a:	53 07       	cpc	r21, r19
     52c:	14 f4       	brge	.+4      	; 0x532 <last_tone_in_sequence+0x22>
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	90 e0       	ldi	r25, 0x00	; 0
	}
     532:	08 95       	ret

00000534 <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     534:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <buzzer_time_left>
     538:	89 2b       	or	r24, r25
     53a:	59 f4       	brne	.+22     	; 0x552 <handle_buzzer_loop+0x1e>
     53c:	0e 94 88 02 	call	0x510	; 0x510 <last_tone_in_sequence>
     540:	89 2b       	or	r24, r25
     542:	39 f0       	breq	.+14     	; 0x552 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     544:	67 e0       	ldi	r22, 0x07	; 7
     546:	8a e0       	ldi	r24, 0x0A	; 10
     548:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     54c:	0e 94 2c 02 	call	0x458	; 0x458 <reset_buzzer>
     550:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     552:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <buzzer_time_left>
     556:	89 2b       	or	r24, r25
     558:	11 f4       	brne	.+4      	; 0x55e <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     55a:	0e 94 01 02 	call	0x402	; 0x402 <next_buzzer_tone>
     55e:	08 95       	ret

00000560 <EEPROM_has_saved_game>:
	printf("G Score :%i \n", eeprom_read_dword(GAME_SCORE));  // not working
	printf("Snake Length :%u \n", eeprom_read_byte(SNAKE_LENGTH));
	printf("Snake tail :%u \n", eeprom_read_byte(SNAKE_POSITION_TAIL));
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}
     560:	80 e8       	ldi	r24, 0x80	; 128
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     568:	21 e0       	ldi	r18, 0x01	; 1
     56a:	61 15       	cp	r22, r1
     56c:	72 41       	sbci	r23, 0x12	; 18
     56e:	81 05       	cpc	r24, r1
     570:	91 05       	cpc	r25, r1
     572:	09 f0       	breq	.+2      	; 0x576 <EEPROM_has_saved_game+0x16>
     574:	20 e0       	ldi	r18, 0x00	; 0
     576:	82 2f       	mov	r24, r18
     578:	08 95       	ret

0000057a <save_game_to_EPPROM>:
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	f8 94       	cli
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	52 e1       	ldi	r21, 0x12	; 18
     58a:	60 e0       	ldi	r22, 0x00	; 0
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	80 e8       	ldi	r24, 0x80	; 128
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	0e 94 19 08 	call	0x1032	; 0x1032 <get_position_of_food>
     59c:	68 2f       	mov	r22, r24
     59e:	80 ea       	ldi	r24, 0xA0	; 160
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	0e 94 19 08 	call	0x1032	; 0x1032 <get_position_of_food>
     5ac:	68 2f       	mov	r22, r24
     5ae:	88 ea       	ldi	r24, 0xA8	; 168
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     5b6:	82 e0       	ldi	r24, 0x02	; 2
     5b8:	0e 94 19 08 	call	0x1032	; 0x1032 <get_position_of_food>
     5bc:	68 2f       	mov	r22, r24
     5be:	80 eb       	ldi	r24, 0xB0	; 176
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     5c6:	83 e0       	ldi	r24, 0x03	; 3
     5c8:	0e 94 19 08 	call	0x1032	; 0x1032 <get_position_of_food>
     5cc:	68 2f       	mov	r22, r24
     5ce:	88 eb       	ldi	r24, 0xB8	; 184
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     5d6:	0e 94 4f 0b 	call	0x169e	; 0x169e <get_rat_position>
     5da:	68 2f       	mov	r22, r24
     5dc:	80 ec       	ldi	r24, 0xC0	; 192
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     5e4:	0e 94 bc 10 	call	0x2178	; 0x2178 <superfood_is_on_board>
     5e8:	88 23       	and	r24, r24
     5ea:	41 f0       	breq	.+16     	; 0x5fc <save_game_to_EPPROM+0x82>
     5ec:	0e 94 06 11 	call	0x220c	; 0x220c <get_superfood_position>
     5f0:	68 2f       	mov	r22, r24
     5f2:	88 ec       	ldi	r24, 0xC8	; 200
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     5fa:	05 c0       	rjmp	.+10     	; 0x606 <save_game_to_EPPROM+0x8c>
     5fc:	68 e0       	ldi	r22, 0x08	; 8
     5fe:	88 ec       	ldi	r24, 0xC8	; 200
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     606:	0e 94 01 09 	call	0x1202	; 0x1202 <get_current_game_speed>
     60a:	bc 01       	movw	r22, r24
     60c:	80 ed       	ldi	r24, 0xD0	; 208
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 ae 19 	call	0x335c	; 0x335c <eeprom_write_word>
     614:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     618:	ac 01       	movw	r20, r24
     61a:	99 0f       	add	r25, r25
     61c:	66 0b       	sbc	r22, r22
     61e:	77 0b       	sbc	r23, r23
     620:	80 ee       	ldi	r24, 0xE0	; 224
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
     628:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <get_snake_length>
     62c:	68 2f       	mov	r22, r24
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	92 e0       	ldi	r25, 0x02	; 2
     632:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     636:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
     63a:	ac 01       	movw	r20, r24
     63c:	99 0f       	add	r25, r25
     63e:	66 0b       	sbc	r22, r22
     640:	77 0b       	sbc	r23, r23
     642:	88 e0       	ldi	r24, 0x08	; 8
     644:	92 e0       	ldi	r25, 0x02	; 2
     646:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
     64a:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <get_current_drn>
     64e:	68 2f       	mov	r22, r24
     650:	88 e1       	ldi	r24, 0x18	; 24
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     658:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <get_snake_tail_index>
     65c:	c8 2f       	mov	r28, r24
     65e:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <get_snake_head_index>
     662:	8c 17       	cp	r24, r28
     664:	e8 f5       	brcc	.+122    	; 0x6e0 <save_game_to_EPPROM+0x166>
     666:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <get_snake_tail_index>
     66a:	f8 2e       	mov	r15, r24
     66c:	c8 2f       	mov	r28, r24
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	c1 32       	cpi	r28, 0x21	; 33
     672:	d1 05       	cpc	r29, r1
     674:	ec f4       	brge	.+58     	; 0x6b0 <save_game_to_EPPROM+0x136>
     676:	00 e2       	ldi	r16, 0x20	; 32
     678:	12 e0       	ldi	r17, 0x02	; 2
     67a:	8c 2f       	mov	r24, r28
     67c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <get_snake_position_at_index>
     680:	68 2f       	mov	r22, r24
     682:	c8 01       	movw	r24, r16
     684:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	08 5f       	subi	r16, 0xF8	; 248
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	c1 32       	cpi	r28, 0x21	; 33
     690:	d1 05       	cpc	r29, r1
     692:	99 f7       	brne	.-26     	; 0x67a <save_game_to_EPPROM+0x100>
     694:	cf 2d       	mov	r28, r15
     696:	d0 e0       	ldi	r29, 0x00	; 0
     698:	d1 95       	neg	r29
     69a:	c1 95       	neg	r28
     69c:	d1 09       	sbc	r29, r1
     69e:	cc 0f       	add	r28, r28
     6a0:	dd 1f       	adc	r29, r29
     6a2:	cc 0f       	add	r28, r28
     6a4:	dd 1f       	adc	r29, r29
     6a6:	cc 0f       	add	r28, r28
     6a8:	dd 1f       	adc	r29, r29
     6aa:	c8 5f       	subi	r28, 0xF8	; 248
     6ac:	de 4f       	sbci	r29, 0xFE	; 254
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <save_game_to_EPPROM+0x13a>
     6b0:	c0 e0       	ldi	r28, 0x00	; 0
     6b2:	d0 e0       	ldi	r29, 0x00	; 0
     6b4:	00 e0       	ldi	r16, 0x00	; 0
     6b6:	10 e0       	ldi	r17, 0x00	; 0
     6b8:	0c c0       	rjmp	.+24     	; 0x6d2 <save_game_to_EPPROM+0x158>
     6ba:	80 2f       	mov	r24, r16
     6bc:	0e 94 67 0f 	call	0x1ece	; 0x1ece <get_snake_position_at_index>
     6c0:	68 2f       	mov	r22, r24
     6c2:	ce 01       	movw	r24, r28
     6c4:	80 5e       	subi	r24, 0xE0	; 224
     6c6:	9d 4f       	sbci	r25, 0xFD	; 253
     6c8:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     6cc:	28 96       	adiw	r28, 0x08	; 8
     6ce:	0f 5f       	subi	r16, 0xFF	; 255
     6d0:	1f 4f       	sbci	r17, 0xFF	; 255
     6d2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <get_snake_head_index>
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	80 17       	cp	r24, r16
     6da:	91 07       	cpc	r25, r17
     6dc:	74 f7       	brge	.-36     	; 0x6ba <save_game_to_EPPROM+0x140>
     6de:	19 c0       	rjmp	.+50     	; 0x712 <save_game_to_EPPROM+0x198>
     6e0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <get_snake_tail_index>
     6e4:	08 2f       	mov	r16, r24
     6e6:	10 e0       	ldi	r17, 0x00	; 0
     6e8:	c0 e0       	ldi	r28, 0x00	; 0
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
     6ec:	0c c0       	rjmp	.+24     	; 0x706 <save_game_to_EPPROM+0x18c>
     6ee:	80 2f       	mov	r24, r16
     6f0:	0e 94 67 0f 	call	0x1ece	; 0x1ece <get_snake_position_at_index>
     6f4:	68 2f       	mov	r22, r24
     6f6:	ce 01       	movw	r24, r28
     6f8:	80 5e       	subi	r24, 0xE0	; 224
     6fa:	9d 4f       	sbci	r25, 0xFD	; 253
     6fc:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     700:	28 96       	adiw	r28, 0x08	; 8
     702:	0f 5f       	subi	r16, 0xFF	; 255
     704:	1f 4f       	sbci	r17, 0xFF	; 255
     706:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <get_snake_head_index>
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	80 17       	cp	r24, r16
     70e:	91 07       	cpc	r25, r17
     710:	74 f7       	brge	.-36     	; 0x6ee <save_game_to_EPPROM+0x174>
     712:	68 e0       	ldi	r22, 0x08	; 8
     714:	ce 01       	movw	r24, r28
     716:	80 5e       	subi	r24, 0xE0	; 224
     718:	9d 4f       	sbci	r25, 0xFD	; 253
     71a:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
     71e:	78 94       	sei
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	08 95       	ret

0000072c <add_food_to_board>:
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
	add_food_to_board(food_four);
}

void add_food_to_board(PosnType food_pos){
     72c:	cf 93       	push	r28
     72e:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     730:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <is_position_valid>
     734:	88 23       	and	r24, r24
     736:	99 f0       	breq	.+38     	; 0x75e <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     738:	e0 91 7b 02 	lds	r30, 0x027B	; 0x80027b <numFoodItems>
     73c:	0e 2e       	mov	r0, r30
     73e:	00 0c       	add	r0, r0
     740:	ff 0b       	sbc	r31, r31
     742:	e4 58       	subi	r30, 0x84	; 132
     744:	fd 4f       	sbci	r31, 0xFD	; 253
     746:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     748:	63 e3       	ldi	r22, 0x33	; 51
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	8c 2f       	mov	r24, r28
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
		numFoodItems++; 
     754:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <numFoodItems>
     758:	8f 5f       	subi	r24, 0xFF	; 255
     75a:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <numFoodItems>
	}
}
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <load_food_from_EEPROM>:
		load_EEPROM_data_on_next_game =0;
	}
}

void load_food_from_EEPROM(void){
	init_food();
     762:	0e 94 8f 07 	call	0xf1e	; 0xf1e <init_food>
	PosnType food_one = eeprom_read_byte(FOOD_ONE);
     766:	80 ea       	ldi	r24, 0xA0	; 160
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
	add_food_to_board(food_one);
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	0e 94 96 03 	call	0x72c	; 0x72c <add_food_to_board>
	PosnType food_two = eeprom_read_byte(FOOD_TWO);
     774:	88 ea       	ldi	r24, 0xA8	; 168
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
	add_food_to_board(food_two);
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 96 03 	call	0x72c	; 0x72c <add_food_to_board>
	
	PosnType food_three = eeprom_read_byte(FOOD_THREE);
     782:	80 eb       	ldi	r24, 0xB0	; 176
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
	add_food_to_board(food_three);	
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 96 03 	call	0x72c	; 0x72c <add_food_to_board>
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
     790:	88 eb       	ldi	r24, 0xB8	; 184
     792:	91 e0       	ldi	r25, 0x01	; 1
     794:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
	add_food_to_board(food_four);
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 96 03 	call	0x72c	; 0x72c <add_food_to_board>
     79e:	08 95       	ret

000007a0 <load_rat_from_EEPROM>:
		foodPositions[numFoodItems] = food_pos;
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
		numFoodItems++; 
	}
}
void load_rat_from_EEPROM(void){
     7a0:	cf 93       	push	r28
	PosnType rat_pos = eeprom_read_byte(RAT); 
     7a2:	80 ec       	ldi	r24, 0xC0	; 192
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     7aa:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     7ac:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <is_position_valid>
     7b0:	88 23       	and	r24, r24
     7b2:	21 f0       	breq	.+8      	; 0x7bc <load_rat_from_EEPROM+0x1c>
		set_rat_at_pos(rat_pos); 
     7b4:	8c 2f       	mov	r24, r28
     7b6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <set_rat_at_pos>
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <load_rat_from_EEPROM+0x20>
	}else{
		add_new_rat_position();
     7bc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <add_new_rat_position>
	}
}
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret

000007c4 <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(void){
     7c4:	cf 93       	push	r28
	PosnType super_food = eeprom_read_byte(SUPERFOOD); 
     7c6:	88 ec       	ldi	r24, 0xC8	; 200
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     7ce:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     7d0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <is_position_valid>
     7d4:	88 23       	and	r24, r24
     7d6:	21 f0       	breq	.+8      	; 0x7e0 <load_superfood_from_EEPROM+0x1c>
		load_superfood(super_food);
     7d8:	8c 2f       	mov	r24, r28
     7da:	0e 94 b6 10 	call	0x216c	; 0x216c <load_superfood>
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <load_superfood_from_EEPROM+0x20>
	}else{
		remove_superfood_from_board(); 
     7e0:	0e 94 e5 10 	call	0x21ca	; 0x21ca <remove_superfood_from_board>
	}
}
     7e4:	cf 91       	pop	r28
     7e6:	08 95       	ret

000007e8 <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     7f8:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <set_snake_length>
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     802:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <get_snake_length>
     806:	81 50       	subi	r24, 0x01	; 1
     808:	0e 94 76 0f 	call	0x1eec	; 0x1eec <set_snake_head_pointer>
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
	uint8_t snakePosition_index = 0; 
     80c:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     80e:	c0 e2       	ldi	r28, 0x20	; 32
     810:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     812:	ce 01       	movw	r24, r28
     814:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     818:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     81a:	61 2f       	mov	r22, r17
     81c:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     820:	60 ef       	ldi	r22, 0xF0	; 240
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 2f       	mov	r24, r16
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
		snake_memory_position +=8; 
     82c:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     82e:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     830:	ce 01       	movw	r24, r28
     832:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     836:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <is_position_valid>
     83a:	81 11       	cpse	r24, r1
     83c:	ea cf       	rjmp	.-44     	; 0x812 <load_snake_from_EPPROM+0x2a>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     83e:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <get_snake_head_position>
     842:	6f e0       	ldi	r22, 0x0F	; 15
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>

	reset_snake_drn(eeprom_read_byte(SNAKE_DIRECTION)); 
     84c:	88 e1       	ldi	r24, 0x18	; 24
     84e:	92 e0       	ldi	r25, 0x02	; 2
     850:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     854:	0e 94 56 0f 	call	0x1eac	; 0x1eac <reset_snake_drn>
}
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	1f 91       	pop	r17
     85e:	0f 91       	pop	r16
     860:	08 95       	ret

00000862 <new_game_from_EEPROM>:
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}

void new_game_from_EEPROM(void){
	if(EEPROM_has_saved_game()){
     862:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
     866:	88 23       	and	r24, r24
     868:	61 f1       	breq	.+88     	; 0x8c2 <new_game_from_EEPROM+0x60>
		clear_terminal(); 
     86a:	0e 94 99 11 	call	0x2332	; 0x2332 <clear_terminal>
		set_clock_ticks(eeprom_read_dword(CLOCK_TICKS));
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	92 e0       	ldi	r25, 0x02	; 2
     872:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     876:	0e 94 72 12 	call	0x24e4	; 0x24e4 <set_clock_ticks>
		set_score(eeprom_read_dword(GAME_SCORE));
     87a:	80 ee       	ldi	r24, 0xE0	; 224
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     882:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <set_score>
		
		// Methods from init_game(); 
		ledmatrix_clear();
     886:	0e 94 52 09 	call	0x12a4	; 0x12a4 <ledmatrix_clear>
		init_score_on_terminal();
     88a:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <init_score_on_terminal>
		set_game_speed(eeprom_read_word(GAME_SPEED));
     88e:	80 ed       	ldi	r24, 0xD0	; 208
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	0e 94 92 19 	call	0x3324	; 0x3324 <eeprom_read_word>
     896:	0e 94 06 09 	call	0x120c	; 0x120c <set_game_speed>
		add_new_rat_position();
     89a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <add_new_rat_position>
		initialise_timer_one();
     89e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <initialise_timer_one>
		play_start_game_sound_effect();
     8a2:	0e 94 34 02 	call	0x468	; 0x468 <play_start_game_sound_effect>
	
		// Init food, rats, superfood and snake
		load_food_from_EEPROM();
     8a6:	0e 94 b1 03 	call	0x762	; 0x762 <load_food_from_EEPROM>
		load_rat_from_EEPROM();
     8aa:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <load_rat_from_EEPROM>
		load_superfood_from_EEPROM();
     8ae:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <load_superfood_from_EEPROM>
		load_snake_from_EPPROM();
     8b2:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     8b6:	0e 94 4d 01 	call	0x29a	; 0x29a <empty_button_queue>
		clear_serial_input_buffer();
     8ba:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     8be:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <load_EEPROM_data_on_next_game>
     8c2:	08 95       	ret

000008c4 <high_score_name_position>:

uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
     8c4:	81 15       	cp	r24, r1
     8c6:	21 e0       	ldi	r18, 0x01	; 1
     8c8:	92 07       	cpc	r25, r18
     8ca:	e9 f0       	breq	.+58     	; 0x906 <__stack+0x7>
     8cc:	38 f4       	brcc	.+14     	; 0x8dc <high_score_name_position+0x18>
     8ce:	80 3c       	cpi	r24, 0xC0	; 192
     8d0:	91 05       	cpc	r25, r1
     8d2:	91 f0       	breq	.+36     	; 0x8f8 <high_score_name_position+0x34>
     8d4:	80 3e       	cpi	r24, 0xE0	; 224
     8d6:	91 05       	cpc	r25, r1
     8d8:	61 f0       	breq	.+24     	; 0x8f2 <high_score_name_position+0x2e>
     8da:	11 c0       	rjmp	.+34     	; 0x8fe <high_score_name_position+0x3a>
     8dc:	80 32       	cpi	r24, 0x20	; 32
     8de:	21 e0       	ldi	r18, 0x01	; 1
     8e0:	92 07       	cpc	r25, r18
     8e2:	21 f0       	breq	.+8      	; 0x8ec <high_score_name_position+0x28>
     8e4:	80 34       	cpi	r24, 0x40	; 64
     8e6:	91 40       	sbci	r25, 0x01	; 1
     8e8:	59 f0       	breq	.+22     	; 0x900 <__stack+0x1>
     8ea:	09 c0       	rjmp	.+18     	; 0x8fe <high_score_name_position+0x3a>
		case SCORE_FIVE: return NAME_FIVE; break; 
		case SCORE_FOUR: return NAME_FOUR; break;
     8ec:	80 e8       	ldi	r24, 0x80	; 128
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	08 95       	ret
		case SCORE_THREE: return NAME_THREE; break;
		case SCORE_TWO: return NAME_TWO; break;
     8f2:	80 e4       	ldi	r24, 0x40	; 64
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	08 95       	ret
		case SCORE_ONE: return NAME_ONE; break;
     8f8:	80 e2       	ldi	r24, 0x20	; 32
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	08 95       	ret
	}
}
     8fe:	08 95       	ret
uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
		case SCORE_FIVE: return NAME_FIVE; break; 
     900:	80 ea       	ldi	r24, 0xA0	; 160
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	08 95       	ret
		case SCORE_FOUR: return NAME_FOUR; break;
		case SCORE_THREE: return NAME_THREE; break;
     906:	80 e6       	ldi	r24, 0x60	; 96
     908:	90 e0       	ldi	r25, 0x00	; 0
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}
     90a:	08 95       	ret

0000090c <move_place_down>:
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
	
	clear_terminal();
}

void move_place_down(uint16_t score_position, uint16_t name_position){
     90c:	8f 92       	push	r8
     90e:	9f 92       	push	r9
     910:	af 92       	push	r10
     912:	bf 92       	push	r11
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	0f 93       	push	r16
     91c:	1f 93       	push	r17
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	8c 01       	movw	r16, r24
     924:	eb 01       	movw	r28, r22
	uint32_t score = eeprom_read_dword(score_position); 
     926:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     92a:	4b 01       	movw	r8, r22
     92c:	5c 01       	movw	r10, r24
	uint8_t char1 = eeprom_read_byte(name_position);
     92e:	ce 01       	movw	r24, r28
     930:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     934:	d8 2e       	mov	r13, r24
	uint8_t char2 = eeprom_read_byte(name_position+0x08);
     936:	ce 01       	movw	r24, r28
     938:	08 96       	adiw	r24, 0x08	; 8
     93a:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     93e:	e8 2e       	mov	r14, r24
	uint8_t char3 = eeprom_read_byte(name_position+0x10);
     940:	ce 01       	movw	r24, r28
     942:	40 96       	adiw	r24, 0x10	; 16
     944:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     948:	f8 2e       	mov	r15, r24
	eeprom_write_dword((score_position+0x20), score); 
     94a:	b5 01       	movw	r22, r10
     94c:	a4 01       	movw	r20, r8
     94e:	c8 01       	movw	r24, r16
     950:	80 96       	adiw	r24, 0x20	; 32
     952:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	eeprom_write_byte(name_position +0x20, char1);
     956:	6d 2d       	mov	r22, r13
     958:	ce 01       	movw	r24, r28
     95a:	80 96       	adiw	r24, 0x20	; 32
     95c:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	eeprom_write_byte(name_position +0x28, char2);
     960:	6e 2d       	mov	r22, r14
     962:	ce 01       	movw	r24, r28
     964:	88 96       	adiw	r24, 0x28	; 40
     966:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	eeprom_write_byte(name_position +0x30, char3);
     96a:	6f 2d       	mov	r22, r15
     96c:	ce 01       	movw	r24, r28
     96e:	c0 96       	adiw	r24, 0x30	; 48
     970:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	bf 90       	pop	r11
     984:	af 90       	pop	r10
     986:	9f 90       	pop	r9
     988:	8f 90       	pop	r8
     98a:	08 95       	ret

0000098c <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(SCORE_FOUR, NAME_FOUR); 
     98c:	60 e8       	ldi	r22, 0x80	; 128
     98e:	70 e0       	ldi	r23, 0x00	; 0
     990:	80 e2       	ldi	r24, 0x20	; 32
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 86 04 	call	0x90c	; 0x90c <move_place_down>
     998:	08 95       	ret

0000099a <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     99a:	0e 94 c6 04 	call	0x98c	; 0x98c <move_four_place_down>
	move_place_down(SCORE_THREE, NAME_THREE);
     99e:	60 e6       	ldi	r22, 0x60	; 96
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 86 04 	call	0x90c	; 0x90c <move_place_down>
     9aa:	08 95       	ret

000009ac <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     9ac:	0e 94 cd 04 	call	0x99a	; 0x99a <move_three_place_down>
	move_place_down(SCORE_TWO, NAME_TWO);
     9b0:	60 e4       	ldi	r22, 0x40	; 64
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	80 ee       	ldi	r24, 0xE0	; 224
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 86 04 	call	0x90c	; 0x90c <move_place_down>
     9bc:	08 95       	ret

000009be <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     9be:	0e 94 d6 04 	call	0x9ac	; 0x9ac <move_two_place_down>
	move_place_down(SCORE_ONE, NAME_ONE);
     9c2:	60 e2       	ldi	r22, 0x20	; 32
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	80 ec       	ldi	r24, 0xC0	; 192
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	0e 94 86 04 	call	0x90c	; 0x90c <move_place_down>
     9ce:	08 95       	ret

000009d0 <reset_name_at_memory_position>:
	reset_name_at_memory_position(NAME_FOUR);
	reset_name_at_memory_position(NAME_FIVE);
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
	}
	
void reset_name_at_memory_position(uint16_t mem_pos){
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
	eeprom_write_byte(mem_pos, UNDERSCORE);
     9d6:	6f e5       	ldi	r22, 0x5F	; 95
     9d8:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x08, UNDERSCORE);
     9dc:	6f e5       	ldi	r22, 0x5F	; 95
     9de:	ce 01       	movw	r24, r28
     9e0:	08 96       	adiw	r24, 0x08	; 8
     9e2:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
     9e6:	6f e5       	ldi	r22, 0x5F	; 95
     9e8:	ce 01       	movw	r24, r28
     9ea:	40 96       	adiw	r24, 0x10	; 16
     9ec:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
}
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	08 95       	ret

000009f6 <initialise_EEPROM>:
	move_two_place_down();
	move_place_down(SCORE_ONE, NAME_ONE);
}

void initialise_EEPROM(void){
	eeprom_write_dword(SCORE_ONE, 0x00);
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	ba 01       	movw	r22, r20
     9fc:	80 ec       	ldi	r24, 0xC0	; 192
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	eeprom_write_dword(SCORE_TWO, 0x00);
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	ba 01       	movw	r22, r20
     a0a:	80 ee       	ldi	r24, 0xE0	; 224
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	eeprom_write_dword(SCORE_THREE, 0x00);
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	ba 01       	movw	r22, r20
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	eeprom_write_dword(SCORE_FOUR, 0x00);
     a20:	40 e0       	ldi	r20, 0x00	; 0
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	ba 01       	movw	r22, r20
     a26:	80 e2       	ldi	r24, 0x20	; 32
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	eeprom_write_dword(SCORE_FIVE, 0x00);
     a2e:	40 e0       	ldi	r20, 0x00	; 0
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	ba 01       	movw	r22, r20
     a34:	80 e4       	ldi	r24, 0x40	; 64
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	reset_name_at_memory_position(NAME_ONE);
     a3c:	80 e2       	ldi	r24, 0x20	; 32
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_TWO);
     a44:	80 e4       	ldi	r24, 0x40	; 64
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_THREE);
     a4c:	80 e6       	ldi	r24, 0x60	; 96
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FOUR);
     a54:	80 e8       	ldi	r24, 0x80	; 128
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FIVE);
     a5c:	80 ea       	ldi	r24, 0xA0	; 160
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <reset_name_at_memory_position>
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     a64:	44 e3       	ldi	r20, 0x34	; 52
     a66:	52 e1       	ldi	r21, 0x12	; 18
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	80 e6       	ldi	r24, 0x60	; 96
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
     a74:	08 95       	ret

00000a76 <EEPROM_High_Score_has_been_initialised>:
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
}


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     a76:	80 e6       	ldi	r24, 0x60	; 96
     a78:	91 e0       	ldi	r25, 0x01	; 1
     a7a:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     a7e:	21 e0       	ldi	r18, 0x01	; 1
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	64 33       	cpi	r22, 0x34	; 52
     a84:	72 41       	sbci	r23, 0x12	; 18
     a86:	81 05       	cpc	r24, r1
     a88:	91 05       	cpc	r25, r1
     a8a:	11 f0       	breq	.+4      	; 0xa90 <EEPROM_High_Score_has_been_initialised+0x1a>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
}
     a90:	c9 01       	movw	r24, r18
     a92:	08 95       	ret

00000a94 <is_high_score>:
#include <avr/eeprom.h>
#include "terminalio.h"


static char current_high_score_name[4]; 
uint8_t is_high_score(void){
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
     a9c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     aa0:	6b 01       	movw	r12, r22
     aa2:	7c 01       	movw	r14, r24
     aa4:	80 e4       	ldi	r24, 0x40	; 64
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     aac:	c6 16       	cp	r12, r22
     aae:	d7 06       	cpc	r13, r23
     ab0:	e8 06       	cpc	r14, r24
     ab2:	f9 06       	cpc	r15, r25
     ab4:	40 f4       	brcc	.+16     	; 0xac6 <is_high_score+0x32>
     ab6:	0e 94 3b 05 	call	0xa76	; 0xa76 <EEPROM_High_Score_has_been_initialised>
     aba:	21 e0       	ldi	r18, 0x01	; 1
     abc:	89 2b       	or	r24, r25
     abe:	09 f0       	breq	.+2      	; 0xac2 <is_high_score+0x2e>
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	82 2f       	mov	r24, r18
     ac4:	01 c0       	rjmp	.+2      	; 0xac8 <is_high_score+0x34>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
}
     ac8:	ff 90       	pop	r15
     aca:	ef 90       	pop	r14
     acc:	df 90       	pop	r13
     ace:	cf 90       	pop	r12
     ad0:	08 95       	ret

00000ad2 <high_score_position>:
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}

uint16_t high_score_position(void){
     ad2:	cf 92       	push	r12
     ad4:	df 92       	push	r13
     ad6:	ef 92       	push	r14
     ad8:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     ada:	0e 94 3b 05 	call	0xa76	; 0xa76 <EEPROM_High_Score_has_been_initialised>
     ade:	89 2b       	or	r24, r25
     ae0:	09 f4       	brne	.+2      	; 0xae4 <high_score_position+0x12>
     ae2:	42 c0       	rjmp	.+132    	; 0xb68 <high_score_position+0x96>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     ae4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     ae8:	6b 01       	movw	r12, r22
     aea:	7c 01       	movw	r14, r24
     aec:	80 ec       	ldi	r24, 0xC0	; 192
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     af4:	6c 15       	cp	r22, r12
     af6:	7d 05       	cpc	r23, r13
     af8:	8e 05       	cpc	r24, r14
     afa:	9f 05       	cpc	r25, r15
     afc:	c0 f1       	brcs	.+112    	; 0xb6e <high_score_position+0x9c>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     afe:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     b02:	6b 01       	movw	r12, r22
     b04:	7c 01       	movw	r14, r24
     b06:	80 ee       	ldi	r24, 0xE0	; 224
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     b0e:	6c 15       	cp	r22, r12
     b10:	7d 05       	cpc	r23, r13
     b12:	8e 05       	cpc	r24, r14
     b14:	9f 05       	cpc	r25, r15
     b16:	70 f1       	brcs	.+92     	; 0xb74 <high_score_position+0xa2>
		return SCORE_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     b18:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     b1c:	6b 01       	movw	r12, r22
     b1e:	7c 01       	movw	r14, r24
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     b28:	6c 15       	cp	r22, r12
     b2a:	7d 05       	cpc	r23, r13
     b2c:	8e 05       	cpc	r24, r14
     b2e:	9f 05       	cpc	r25, r15
     b30:	20 f1       	brcs	.+72     	; 0xb7a <high_score_position+0xa8>
		return SCORE_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     b32:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     b36:	6b 01       	movw	r12, r22
     b38:	7c 01       	movw	r14, r24
     b3a:	80 e2       	ldi	r24, 0x20	; 32
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     b42:	6c 15       	cp	r22, r12
     b44:	7d 05       	cpc	r23, r13
     b46:	8e 05       	cpc	r24, r14
     b48:	9f 05       	cpc	r25, r15
     b4a:	d0 f0       	brcs	.+52     	; 0xb80 <high_score_position+0xae>
		return SCORE_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     b4c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     b50:	6b 01       	movw	r12, r22
     b52:	7c 01       	movw	r14, r24
     b54:	80 e4       	ldi	r24, 0x40	; 64
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     b5c:	6c 15       	cp	r22, r12
     b5e:	7d 05       	cpc	r23, r13
     b60:	8e 05       	cpc	r24, r14
     b62:	9f 05       	cpc	r25, r15
     b64:	80 f0       	brcs	.+32     	; 0xb86 <high_score_position+0xb4>
		return SCORE_FIVE;
	}
}
     b66:	11 c0       	rjmp	.+34     	; 0xb8a <high_score_position+0xb8>
	}
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return SCORE_ONE;
     b68:	80 ec       	ldi	r24, 0xC0	; 192
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e c0       	rjmp	.+28     	; 0xb8a <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return SCORE_ONE;
     b6e:	80 ec       	ldi	r24, 0xC0	; 192
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0b c0       	rjmp	.+22     	; 0xb8a <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return SCORE_TWO;
     b74:	80 ee       	ldi	r24, 0xE0	; 224
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	08 c0       	rjmp	.+16     	; 0xb8a <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return SCORE_THREE;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	05 c0       	rjmp	.+10     	; 0xb8a <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return SCORE_FOUR;
     b80:	80 e2       	ldi	r24, 0x20	; 32
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     b8a:	ff 90       	pop	r15
     b8c:	ef 90       	pop	r14
     b8e:	df 90       	pop	r13
     b90:	cf 90       	pop	r12
     b92:	08 95       	ret

00000b94 <handle_sequence_into_EEPFROM>:
				handle_sequence_into_EEPFROM();
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     b94:	cf 92       	push	r12
     b96:	df 92       	push	r13
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     ba2:	44 e3       	ldi	r20, 0x34	; 52
     ba4:	52 e1       	ldi	r21, 0x12	; 18
     ba6:	60 e0       	ldi	r22, 0x00	; 0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e6       	ldi	r24, 0x60	; 96
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	switch(high_score_position()){
     bb2:	0e 94 69 05 	call	0xad2	; 0xad2 <high_score_position>
     bb6:	80 3e       	cpi	r24, 0xE0	; 224
     bb8:	91 05       	cpc	r25, r1
     bba:	91 f0       	breq	.+36     	; 0xbe0 <handle_sequence_into_EEPFROM+0x4c>
     bbc:	20 f4       	brcc	.+8      	; 0xbc6 <handle_sequence_into_EEPFROM+0x32>
     bbe:	80 3c       	cpi	r24, 0xC0	; 192
     bc0:	91 05       	cpc	r25, r1
     bc2:	89 f0       	breq	.+34     	; 0xbe6 <handle_sequence_into_EEPFROM+0x52>
     bc4:	12 c0       	rjmp	.+36     	; 0xbea <handle_sequence_into_EEPFROM+0x56>
     bc6:	81 15       	cp	r24, r1
     bc8:	21 e0       	ldi	r18, 0x01	; 1
     bca:	92 07       	cpc	r25, r18
     bcc:	31 f0       	breq	.+12     	; 0xbda <handle_sequence_into_EEPFROM+0x46>
     bce:	80 32       	cpi	r24, 0x20	; 32
     bd0:	91 40       	sbci	r25, 0x01	; 1
     bd2:	59 f4       	brne	.+22     	; 0xbea <handle_sequence_into_EEPFROM+0x56>
		case SCORE_FOUR: move_four_place_down(); break; 
     bd4:	0e 94 c6 04 	call	0x98c	; 0x98c <move_four_place_down>
     bd8:	08 c0       	rjmp	.+16     	; 0xbea <handle_sequence_into_EEPFROM+0x56>
		case SCORE_THREE: move_three_place_down(); break; 
     bda:	0e 94 cd 04 	call	0x99a	; 0x99a <move_three_place_down>
     bde:	05 c0       	rjmp	.+10     	; 0xbea <handle_sequence_into_EEPFROM+0x56>
		case SCORE_TWO: move_two_place_down(); break;
     be0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <move_two_place_down>
     be4:	02 c0       	rjmp	.+4      	; 0xbea <handle_sequence_into_EEPFROM+0x56>
		case SCORE_ONE: move_one_place_down(); break; 
     be6:	0e 94 df 04 	call	0x9be	; 0x9be <move_one_place_down>
	}
	
	eeprom_write_dword(high_score_position(), get_score());
     bea:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
     bee:	6b 01       	movw	r12, r22
     bf0:	7c 01       	movw	r14, r24
     bf2:	0e 94 69 05 	call	0xad2	; 0xad2 <high_score_position>
     bf6:	b7 01       	movw	r22, r14
     bf8:	a6 01       	movw	r20, r12
     bfa:	0e 94 a6 19 	call	0x334c	; 0x334c <eeprom_write_dword>
	eeprom_write_byte(high_score_name_position(high_score_position()), current_high_score_name[0]);
     bfe:	c6 e2       	ldi	r28, 0x26	; 38
     c00:	d2 e0       	ldi	r29, 0x02	; 2
     c02:	18 81       	ld	r17, Y
     c04:	0e 94 69 05 	call	0xad2	; 0xad2 <high_score_position>
     c08:	0e 94 62 04 	call	0x8c4	; 0x8c4 <high_score_name_position>
     c0c:	61 2f       	mov	r22, r17
     c0e:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x08, current_high_score_name[1]);
     c12:	19 81       	ldd	r17, Y+1	; 0x01
     c14:	0e 94 69 05 	call	0xad2	; 0xad2 <high_score_position>
     c18:	0e 94 62 04 	call	0x8c4	; 0x8c4 <high_score_name_position>
     c1c:	61 2f       	mov	r22, r17
     c1e:	08 96       	adiw	r24, 0x08	; 8
     c20:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
     c24:	ca 81       	ldd	r28, Y+2	; 0x02
     c26:	0e 94 69 05 	call	0xad2	; 0xad2 <high_score_position>
     c2a:	0e 94 62 04 	call	0x8c4	; 0x8c4 <high_score_name_position>
     c2e:	6c 2f       	mov	r22, r28
     c30:	40 96       	adiw	r24, 0x10	; 16
     c32:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
	
	clear_terminal();
     c36:	0e 94 99 11 	call	0x2332	; 0x2332 <clear_terminal>
}
     c3a:	df 91       	pop	r29
     c3c:	cf 91       	pop	r28
     c3e:	1f 91       	pop	r17
     c40:	ff 90       	pop	r15
     c42:	ef 90       	pop	r14
     c44:	df 90       	pop	r13
     c46:	cf 90       	pop	r12
     c48:	08 95       	ret

00000c4a <set_high_score_name>:
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
	}
}

void set_high_score_name(void){
     c4a:	ef 92       	push	r14
     c4c:	ff 92       	push	r15
     c4e:	0f 93       	push	r16
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	move_cursor(10,8);
     c56:	68 e0       	ldi	r22, 0x08	; 8
     c58:	8a e0       	ldi	r24, 0x0A	; 10
     c5a:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     c5e:	83 e3       	ldi	r24, 0x33	; 51
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	9f 93       	push	r25
     c64:	8f 93       	push	r24
     c66:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     c6e:	00 e0       	ldi	r16, 0x00	; 0
     c70:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     c72:	0f 2e       	mov	r0, r31
     c74:	fb e9       	ldi	r31, 0x9B	; 155
     c76:	ef 2e       	mov	r14, r31
     c78:	f3 e0       	ldi	r31, 0x03	; 3
     c7a:	ff 2e       	mov	r15, r31
     c7c:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     c7e:	0e 94 b8 11 	call	0x2370	; 0x2370 <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     c82:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <serial_input_available>
     c86:	88 23       	and	r24, r24
     c88:	d1 f3       	breq	.-12     	; 0xc7e <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     c8a:	f7 01       	movw	r30, r14
     c8c:	80 81       	ld	r24, Z
     c8e:	91 81       	ldd	r25, Z+1	; 0x01
     c90:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <fgetc>
     c94:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     c96:	98 2f       	mov	r25, r24
     c98:	91 54       	subi	r25, 0x41	; 65
     c9a:	9a 33       	cpi	r25, 0x3A	; 58
     c9c:	98 f4       	brcc	.+38     	; 0xcc4 <set_high_score_name+0x7a>
     c9e:	03 30       	cpi	r16, 0x03	; 3
     ca0:	11 05       	cpc	r17, r1
     ca2:	84 f4       	brge	.+32     	; 0xcc4 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     ca4:	69 e0       	ldi	r22, 0x09	; 9
     ca6:	8a e0       	ldi	r24, 0x0A	; 10
     ca8:	80 0f       	add	r24, r16
     caa:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     cae:	f8 01       	movw	r30, r16
     cb0:	ea 5d       	subi	r30, 0xDA	; 218
     cb2:	fd 4f       	sbci	r31, 0xFD	; 253
     cb4:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     cb6:	ce 01       	movw	r24, r28
     cb8:	99 27       	eor	r25, r25
     cba:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <putchar>
				score_name_pointer++;
     cbe:	0f 5f       	subi	r16, 0xFF	; 255
     cc0:	1f 4f       	sbci	r17, 0xFF	; 255
     cc2:	dd cf       	rjmp	.-70     	; 0xc7e <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>=1){
     cc4:	8a 30       	cpi	r24, 0x0A	; 10
     cc6:	21 f4       	brne	.+8      	; 0xcd0 <set_high_score_name+0x86>
     cc8:	10 16       	cp	r1, r16
     cca:	11 06       	cpc	r1, r17
     ccc:	c4 f6       	brge	.-80     	; 0xc7e <set_high_score_name+0x34>
     cce:	11 c0       	rjmp	.+34     	; 0xcf2 <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     cd0:	8f 37       	cpi	r24, 0x7F	; 127
     cd2:	a9 f6       	brne	.-86     	; 0xc7e <set_high_score_name+0x34>
				printf("%c", ' ');
     cd4:	80 e2       	ldi	r24, 0x20	; 32
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	0e 94 ec 16 	call	0x2dd8	; 0x2dd8 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     cdc:	10 16       	cp	r1, r16
     cde:	11 06       	cpc	r1, r17
     ce0:	14 f4       	brge	.+4      	; 0xce6 <set_high_score_name+0x9c>
     ce2:	01 50       	subi	r16, 0x01	; 1
     ce4:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     ce6:	69 e0       	ldi	r22, 0x09	; 9
     ce8:	8a e0       	ldi	r24, 0x0A	; 10
     cea:	80 0f       	add	r24, r16
     cec:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
     cf0:	c6 cf       	rjmp	.-116    	; 0xc7e <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     cf2:	f9 99       	sbic	0x1f, 1	; 31
     cf4:	fe cf       	rjmp	.-4      	; 0xcf2 <set_high_score_name+0xa8>
				handle_sequence_into_EEPFROM();
     cf6:	0e 94 ca 05 	call	0xb94	; 0xb94 <handle_sequence_into_EEPFROM>
				break; 
			}
		}
	}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	ff 90       	pop	r15
     d04:	ef 90       	pop	r14
     d06:	08 95       	ret

00000d08 <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     d08:	ef 92       	push	r14
     d0a:	ff 92       	push	r15
     d0c:	0f 93       	push	r16
     d0e:	1f 93       	push	r17
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
	move_cursor(10,11);
     d14:	6b e0       	ldi	r22, 0x0B	; 11
     d16:	8a e0       	ldi	r24, 0x0A	; 10
     d18:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     d1c:	86 ed       	ldi	r24, 0xD6	; 214
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
	move_cursor(10,13);
     d28:	6d e0       	ldi	r22, 0x0D	; 13
     d2a:	8a e0       	ldi	r24, 0x0A	; 10
     d2c:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     d30:	0e 94 3b 05 	call	0xa76	; 0xa76 <EEPROM_High_Score_has_been_initialised>
     d34:	0f 90       	pop	r0
     d36:	0f 90       	pop	r0
     d38:	89 2b       	or	r24, r25
     d3a:	09 f4       	brne	.+2      	; 0xd3e <display_EEPROM_high_score+0x36>
     d3c:	df c0       	rjmp	.+446    	; 0xefc <display_EEPROM_high_score+0x1f4>

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     d3e:	80 ec       	ldi	r24, 0xC0	; 192
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     d46:	16 2f       	mov	r17, r22
     d48:	07 2f       	mov	r16, r23
     d4a:	f8 2e       	mov	r15, r24
     d4c:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
     d4e:	80 e3       	ldi	r24, 0x30	; 48
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     d56:	d8 2f       	mov	r29, r24
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
									eeprom_read_byte(NAME_ONE+0x08), 
     d58:	88 e2       	ldi	r24, 0x28	; 40
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     d60:	c8 2f       	mov	r28, r24
	printf_P(PSTR("###HIGH SCORES###"));
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     d6a:	ef 92       	push	r14
     d6c:	ff 92       	push	r15
     d6e:	0f 93       	push	r16
     d70:	1f 93       	push	r17
     d72:	1f 92       	push	r1
     d74:	df 93       	push	r29
     d76:	1f 92       	push	r1
     d78:	cf 93       	push	r28
     d7a:	1f 92       	push	r1
     d7c:	8f 93       	push	r24
     d7e:	8c e6       	ldi	r24, 0x6C	; 108
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
     d8a:	6e e0       	ldi	r22, 0x0E	; 14
     d8c:	8a e0       	ldi	r24, 0x0A	; 10
     d8e:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     d92:	80 ee       	ldi	r24, 0xE0	; 224
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     d9a:	16 2f       	mov	r17, r22
     d9c:	07 2f       	mov	r16, r23
     d9e:	f8 2e       	mov	r15, r24
     da0:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
     da2:	80 e5       	ldi	r24, 0x50	; 80
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     daa:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
									eeprom_read_byte(NAME_TWO+0x08),
     dac:	88 e4       	ldi	r24, 0x48	; 72
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     db4:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     db6:	80 e4       	ldi	r24, 0x40	; 64
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	1f 92       	push	r1
     dc8:	df 93       	push	r29
     dca:	1f 92       	push	r1
     dcc:	cf 93       	push	r28
     dce:	1f 92       	push	r1
     dd0:	8f 93       	push	r24
     dd2:	8d e7       	ldi	r24, 0x7D	; 125
     dd4:	91 e0       	ldi	r25, 0x01	; 1
     dd6:	9f 93       	push	r25
     dd8:	8f 93       	push	r24
     dda:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);
     dde:	6f e0       	ldi	r22, 0x0F	; 15
     de0:	8a e0       	ldi	r24, 0x0A	; 10
     de2:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     dee:	16 2f       	mov	r17, r22
     df0:	07 2f       	mov	r16, r23
     df2:	f8 2e       	mov	r15, r24
     df4:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
     df6:	80 e7       	ldi	r24, 0x70	; 112
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     dfe:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
									eeprom_read_byte(NAME_THREE +8),
     e00:	88 e6       	ldi	r24, 0x68	; 104
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     e08:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     e0a:	80 e6       	ldi	r24, 0x60	; 96
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	1f 92       	push	r1
     e1c:	df 93       	push	r29
     e1e:	1f 92       	push	r1
     e20:	cf 93       	push	r28
     e22:	1f 92       	push	r1
     e24:	8f 93       	push	r24
     e26:	8f e8       	ldi	r24, 0x8F	; 143
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	9f 93       	push	r25
     e2c:	8f 93       	push	r24
     e2e:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);
     e32:	8d b7       	in	r24, 0x3d	; 61
     e34:	9e b7       	in	r25, 0x3e	; 62
     e36:	84 96       	adiw	r24, 0x24	; 36
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	9e bf       	out	0x3e, r25	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	8d bf       	out	0x3d, r24	; 61
     e42:	60 e1       	ldi	r22, 0x10	; 16
     e44:	8a e0       	ldi	r24, 0x0A	; 10
     e46:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     e4a:	80 e2       	ldi	r24, 0x20	; 32
     e4c:	91 e0       	ldi	r25, 0x01	; 1
     e4e:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     e52:	16 2f       	mov	r17, r22
     e54:	07 2f       	mov	r16, r23
     e56:	f8 2e       	mov	r15, r24
     e58:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
     e5a:	80 e9       	ldi	r24, 0x90	; 144
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     e62:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
									eeprom_read_byte(NAME_FOUR+8),
     e64:	88 e8       	ldi	r24, 0x88	; 136
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     e6c:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     e76:	ef 92       	push	r14
     e78:	ff 92       	push	r15
     e7a:	0f 93       	push	r16
     e7c:	1f 93       	push	r17
     e7e:	1f 92       	push	r1
     e80:	df 93       	push	r29
     e82:	1f 92       	push	r1
     e84:	cf 93       	push	r28
     e86:	1f 92       	push	r1
     e88:	8f 93       	push	r24
     e8a:	80 ea       	ldi	r24, 0xA0	; 160
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	9f 93       	push	r25
     e90:	8f 93       	push	r24
     e92:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);
     e96:	61 e1       	ldi	r22, 0x11	; 17
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     e9e:	80 e4       	ldi	r24, 0x40	; 64
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 8c 19 	call	0x3318	; 0x3318 <eeprom_read_dword>
     ea6:	16 2f       	mov	r17, r22
     ea8:	07 2f       	mov	r16, r23
     eaa:	f8 2e       	mov	r15, r24
     eac:	e9 2e       	mov	r14, r25
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
     eae:	80 eb       	ldi	r24, 0xB0	; 176
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     eb6:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
								eeprom_read_byte(NAME_FIVE+8),
     eb8:	88 ea       	ldi	r24, 0xA8	; 168
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     ec0:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     ec2:	80 ea       	ldi	r24, 0xA0	; 160
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 84 19 	call	0x3308	; 0x3308 <eeprom_read_byte>
     eca:	ef 92       	push	r14
     ecc:	ff 92       	push	r15
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	1f 92       	push	r1
     ed4:	df 93       	push	r29
     ed6:	1f 92       	push	r1
     ed8:	cf 93       	push	r28
     eda:	1f 92       	push	r1
     edc:	8f 93       	push	r24
     ede:	82 eb       	ldi	r24, 0xB2	; 178
     ee0:	91 e0       	ldi	r25, 0x01	; 1
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
     eea:	8d b7       	in	r24, 0x3d	; 61
     eec:	9e b7       	in	r25, 0x3e	; 62
     eee:	48 96       	adiw	r24, 0x18	; 24
     ef0:	0f b6       	in	r0, 0x3f	; 63
     ef2:	f8 94       	cli
     ef4:	9e bf       	out	0x3e, r25	; 62
     ef6:	0f be       	out	0x3f, r0	; 63
     ef8:	8d bf       	out	0x3d, r24	; 61
     efa:	0a c0       	rjmp	.+20     	; 0xf10 <display_EEPROM_high_score+0x208>
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
								eeprom_read_dword(SCORE_FIVE));
	}
	else{
		initialise_EEPROM();
     efc:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     f00:	82 ec       	ldi	r24, 0xC2	; 194
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
	}

}
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	1f 91       	pop	r17
     f16:	0f 91       	pop	r16
     f18:	ff 90       	pop	r15
     f1a:	ef 90       	pop	r14
     f1c:	08 95       	ret

00000f1e <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     f1e:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <numFoodItems>
     f22:	08 95       	ret

00000f24 <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f24:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <numFoodItems>
     f28:	13 16       	cp	r1, r19
     f2a:	84 f4       	brge	.+32     	; 0xf4c <food_at+0x28>
        if(foodPositions[id] == posn) {
     f2c:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <foodPositions>
     f30:	89 17       	cp	r24, r25
     f32:	71 f0       	breq	.+28     	; 0xf50 <food_at+0x2c>
     f34:	ed e7       	ldi	r30, 0x7D	; 125
     f36:	f2 e0       	ldi	r31, 0x02	; 2
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	03 c0       	rjmp	.+6      	; 0xf42 <food_at+0x1e>
     f3c:	21 91       	ld	r18, Z+
     f3e:	28 17       	cp	r18, r24
     f40:	49 f0       	breq	.+18     	; 0xf54 <food_at+0x30>
     f42:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f44:	39 13       	cpse	r19, r25
     f46:	fa cf       	rjmp	.-12     	; 0xf3c <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	08 95       	ret
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	08 95       	ret
     f54:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     f56:	08 95       	ret

00000f58 <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     f58:	0e 94 92 07 	call	0xf24	; 0xf24 <food_at>
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	8f 3f       	cpi	r24, 0xFF	; 255
     f60:	09 f4       	brne	.+2      	; 0xf64 <is_food_at+0xc>
     f62:	90 e0       	ldi	r25, 0x00	; 0
}
     f64:	89 2f       	mov	r24, r25
     f66:	08 95       	ret

00000f68 <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     f72:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <numFoodItems>
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	0c f0       	brlt	.+2      	; 0xf7c <add_food_item+0x14>
     f7a:	44 c0       	rjmp	.+136    	; 0x1004 <add_food_item+0x9c>
     f7c:	00 e0       	ldi	r16, 0x00	; 0
     f7e:	10 e0       	ldi	r17, 0x00	; 0
     f80:	d0 e0       	ldi	r29, 0x00	; 0
     f82:	c0 e0       	ldi	r28, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <add_food_item+0x22>
     f86:	0f 5f       	subi	r16, 0xFF	; 255
     f88:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     f8a:	2c 2f       	mov	r18, r28
     f8c:	cc 0f       	add	r28, r28
     f8e:	33 0b       	sbc	r19, r19
     f90:	2d 5f       	subi	r18, 0xFD	; 253
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
     f94:	20 0f       	add	r18, r16
     f96:	31 1f       	adc	r19, r17
     f98:	2f 70       	andi	r18, 0x0F	; 15
     f9a:	30 78       	andi	r19, 0x80	; 128
     f9c:	33 23       	and	r19, r19
     f9e:	34 f4       	brge	.+12     	; 0xfac <add_food_item+0x44>
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	31 09       	sbc	r19, r1
     fa4:	20 6f       	ori	r18, 0xF0	; 240
     fa6:	3f 6f       	ori	r19, 0xFF	; 255
     fa8:	2f 5f       	subi	r18, 0xFF	; 255
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	82 2f       	mov	r24, r18
     fae:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     fb0:	6d 2f       	mov	r22, r29
     fb2:	dd 0f       	add	r29, r29
     fb4:	77 0b       	sbc	r23, r23
     fb6:	6b 5f       	subi	r22, 0xFB	; 251
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	67 70       	andi	r22, 0x07	; 7
     fbc:	70 78       	andi	r23, 0x80	; 128
     fbe:	77 23       	and	r23, r23
     fc0:	34 f4       	brge	.+12     	; 0xfce <add_food_item+0x66>
     fc2:	61 50       	subi	r22, 0x01	; 1
     fc4:	71 09       	sbc	r23, r1
     fc6:	68 6f       	ori	r22, 0xF8	; 248
     fc8:	7f 6f       	ori	r23, 0xFF	; 255
     fca:	6f 5f       	subi	r22, 0xFF	; 255
     fcc:	7f 4f       	sbci	r23, 0xFF	; 255
     fce:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     fd0:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
     fd4:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     fd6:	03 36       	cpi	r16, 0x63	; 99
     fd8:	11 05       	cpc	r17, r1
     fda:	b1 f0       	breq	.+44     	; 0x1008 <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     fdc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     fe0:	81 11       	cpse	r24, r1
     fe2:	d1 cf       	rjmp	.-94     	; 0xf86 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     fe4:	8f 2d       	mov	r24, r15
     fe6:	0e 94 ac 07 	call	0xf58	; 0xf58 <is_food_at>
     fea:	81 11       	cpse	r24, r1
     fec:	cc cf       	rjmp	.-104    	; 0xf86 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     fee:	8f 2d       	mov	r24, r15
     ff0:	0e 94 09 11 	call	0x2212	; 0x2212 <is_superfood_at>
     ff4:	81 11       	cpse	r24, r1
     ff6:	c7 cf       	rjmp	.-114    	; 0xf86 <add_food_item+0x1e>
     ff8:	8f 2d       	mov	r24, r15
     ffa:	0e 94 44 0c 	call	0x1888	; 0x1888 <is_rat_at>
     ffe:	81 11       	cpse	r24, r1
    1000:	c2 cf       	rjmp	.-124    	; 0xf86 <add_food_item+0x1e>
    1002:	04 c0       	rjmp	.+8      	; 0x100c <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
    1004:	88 e0       	ldi	r24, 0x08	; 8
    1006:	0f c0       	rjmp	.+30     	; 0x1026 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
    1008:	88 e0       	ldi	r24, 0x08	; 8
    100a:	0d c0       	rjmp	.+26     	; 0x1026 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
    100c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <numFoodItems>
	foodPositions[newFoodID] = test_position;
    1010:	e8 2f       	mov	r30, r24
    1012:	08 2e       	mov	r0, r24
    1014:	00 0c       	add	r0, r0
    1016:	ff 0b       	sbc	r31, r31
    1018:	e4 58       	subi	r30, 0x84	; 132
    101a:	fd 4f       	sbci	r31, 0xFD	; 253
    101c:	f0 82       	st	Z, r15
	numFoodItems++;
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
    1024:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	08 95       	ret

00001032 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
    1032:	e8 2f       	mov	r30, r24
    1034:	88 0f       	add	r24, r24
    1036:	ff 0b       	sbc	r31, r31
    1038:	e4 58       	subi	r30, 0x84	; 132
    103a:	fd 4f       	sbci	r31, 0xFD	; 253
}
    103c:	80 81       	ld	r24, Z
    103e:	08 95       	ret

00001040 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
    1040:	88 23       	and	r24, r24
    1042:	b4 f0       	brlt	.+44     	; 0x1070 <remove_food+0x30>
    1044:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <numFoodItems>
    1048:	82 17       	cp	r24, r18
    104a:	94 f4       	brge	.+36     	; 0x1070 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    104c:	8f 5f       	subi	r24, 0xFF	; 255
    104e:	82 17       	cp	r24, r18
    1050:	64 f4       	brge	.+24     	; 0x106a <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
    1052:	e8 2f       	mov	r30, r24
    1054:	08 2e       	mov	r0, r24
    1056:	00 0c       	add	r0, r0
    1058:	ff 0b       	sbc	r31, r31
    105a:	e4 58       	subi	r30, 0x84	; 132
    105c:	fd 4f       	sbci	r31, 0xFD	; 253
    105e:	90 81       	ld	r25, Z
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	90 83       	st	Z, r25
    1064:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    1066:	82 17       	cp	r24, r18
    1068:	a4 f3       	brlt	.-24     	; 0x1052 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
    106a:	21 50       	subi	r18, 0x01	; 1
    106c:	20 93 7b 02 	sts	0x027B, r18	; 0x80027b <numFoodItems>
    1070:	08 95       	ret

00001072 <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
    1072:	1f 93       	push	r17
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	c8 2f       	mov	r28, r24
    107a:	16 2f       	mov	r17, r22
    107c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1080:	d8 2f       	mov	r29, r24
    1082:	8c 2f       	mov	r24, r28
    1084:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    1088:	41 2f       	mov	r20, r17
    108a:	6d 2f       	mov	r22, r29
    108c:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	08 95       	ret

00001098 <init_game>:
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <ledmatrix_clear>
    10a0:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <init_score_on_terminal>
    10a4:	88 e5       	ldi	r24, 0x58	; 88
    10a6:	92 e0       	ldi	r25, 0x02	; 2
    10a8:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    10ac:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    10b0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <add_new_rat_position>
    10b4:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <initialise_timer_one>
    10b8:	0e 94 34 02 	call	0x468	; 0x468 <play_start_game_sound_effect>
    10bc:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <init_snake>
    10c0:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <get_snake_head_position>
    10c4:	6f e0       	ldi	r22, 0x0F	; 15
    10c6:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    10ca:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <get_snake_tail_position>
    10ce:	60 ef       	ldi	r22, 0xF0	; 240
    10d0:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    10d4:	0e 94 8f 07 	call	0xf1e	; 0xf1e <init_food>
    10d8:	c3 e0       	ldi	r28, 0x03	; 3
    10da:	0e 94 b4 07 	call	0xf68	; 0xf68 <add_food_item>
    10de:	d8 2f       	mov	r29, r24
    10e0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <is_position_valid>
    10e4:	88 23       	and	r24, r24
    10e6:	21 f0       	breq	.+8      	; 0x10f0 <init_game+0x58>
    10e8:	63 e3       	ldi	r22, 0x33	; 51
    10ea:	8d 2f       	mov	r24, r29
    10ec:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    10f0:	c1 50       	subi	r28, 0x01	; 1
    10f2:	99 f7       	brne	.-26     	; 0x10da <init_game+0x42>
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <increase_game_speed>:
    10fa:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    10fe:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    1102:	8b 3f       	cpi	r24, 0xFB	; 251
    1104:	91 05       	cpc	r25, r1
    1106:	a4 f0       	brlt	.+40     	; 0x1130 <increase_game_speed+0x36>
    1108:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
    110c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatunsisf>
    1118:	26 e6       	ldi	r18, 0x66	; 102
    111a:	36 e6       	ldi	r19, 0x66	; 102
    111c:	46 e6       	ldi	r20, 0x66	; 102
    111e:	5f e3       	ldi	r21, 0x3F	; 63
    1120:	0e 94 91 14 	call	0x2922	; 0x2922 <__mulsf3>
    1124:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
    1128:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
    112c:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
    1130:	08 95       	ret

00001132 <attempt_to_move_snake_forward>:
    1132:	0f 93       	push	r16
    1134:	1f 93       	push	r17
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <get_snake_head_position>
    113e:	d8 2f       	mov	r29, r24
    1140:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <advance_snake_head>
    1144:	c8 2f       	mov	r28, r24
    1146:	88 23       	and	r24, r24
    1148:	0c f4       	brge	.+2      	; 0x114c <attempt_to_move_snake_forward+0x1a>
    114a:	55 c0       	rjmp	.+170    	; 0x11f6 <attempt_to_move_snake_forward+0xc4>
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 c9 0c 	call	0x1992	; 0x1992 <add_to_score>
    1154:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <get_snake_head_position>
    1158:	18 2f       	mov	r17, r24
    115a:	8e ef       	ldi	r24, 0xFE	; 254
    115c:	8c 0f       	add	r24, r28
    115e:	82 30       	cpi	r24, 0x02	; 2
    1160:	c0 f4       	brcc	.+48     	; 0x1192 <attempt_to_move_snake_forward+0x60>
    1162:	81 2f       	mov	r24, r17
    1164:	0e 94 92 07 	call	0xf24	; 0xf24 <food_at>
    1168:	0e 94 20 08 	call	0x1040	; 0x1040 <remove_food>
    116c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
    1170:	82 e0       	ldi	r24, 0x02	; 2
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	0e 94 c9 0c 	call	0x1992	; 0x1992 <add_to_score>
    1178:	0e 94 7d 08 	call	0x10fa	; 0x10fa <increase_game_speed>
    117c:	0e 94 b4 07 	call	0xf68	; 0xf68 <add_food_item>
    1180:	08 2f       	mov	r16, r24
    1182:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <is_position_valid>
    1186:	88 23       	and	r24, r24
    1188:	21 f0       	breq	.+8      	; 0x1192 <attempt_to_move_snake_forward+0x60>
    118a:	63 e3       	ldi	r22, 0x33	; 51
    118c:	80 2f       	mov	r24, r16
    118e:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    1192:	8c ef       	ldi	r24, 0xFC	; 252
    1194:	8c 0f       	add	r24, r28
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	50 f4       	brcc	.+20     	; 0x11ae <attempt_to_move_snake_forward+0x7c>
    119a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <eat_superfood_from_board>
    119e:	89 e0       	ldi	r24, 0x09	; 9
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	0e 94 c9 0c 	call	0x1992	; 0x1992 <add_to_score>
    11a6:	0e 94 7d 08 	call	0x10fa	; 0x10fa <increase_game_speed>
    11aa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
    11ae:	8a ef       	ldi	r24, 0xFA	; 250
    11b0:	8c 0f       	add	r24, r28
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	50 f4       	brcc	.+20     	; 0x11ca <attempt_to_move_snake_forward+0x98>
    11b6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <add_new_rat_position>
    11ba:	84 e0       	ldi	r24, 0x04	; 4
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	0e 94 c9 0c 	call	0x1992	; 0x1992 <add_to_score>
    11c2:	0e 94 7d 08 	call	0x10fa	; 0x10fa <increase_game_speed>
    11c6:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
    11ca:	cd 7f       	andi	r28, 0xFD	; 253
    11cc:	c1 30       	cpi	r28, 0x01	; 1
    11ce:	11 f0       	breq	.+4      	; 0x11d4 <attempt_to_move_snake_forward+0xa2>
    11d0:	c5 30       	cpi	r28, 0x05	; 5
    11d2:	29 f4       	brne	.+10     	; 0x11de <attempt_to_move_snake_forward+0xac>
    11d4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <advance_snake_tail>
    11d8:	60 e0       	ldi	r22, 0x00	; 0
    11da:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    11de:	60 ef       	ldi	r22, 0xF0	; 240
    11e0:	8d 2f       	mov	r24, r29
    11e2:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    11e6:	6f e0       	ldi	r22, 0x0F	; 15
    11e8:	81 2f       	mov	r24, r17
    11ea:	0e 94 39 08 	call	0x1072	; 0x1072 <update_display_at_position>
    11ee:	0e 94 1f 12 	call	0x243e	; 0x243e <update_terminal_score>
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	01 c0       	rjmp	.+2      	; 0x11f8 <attempt_to_move_snake_forward+0xc6>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	08 95       	ret

00001202 <get_current_game_speed>:
    1202:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    1206:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    120a:	08 95       	ret

0000120c <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    120c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1210:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    1214:	08 95       	ret

00001216 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1216:	80 e8       	ldi	r24, 0x80	; 128
    1218:	0e 94 88 10 	call	0x2110	; 0x2110 <spi_setup_master>
    121c:	08 95       	ret

0000121e <ledmatrix_update_pixel>:
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	80 31       	cpi	r24, 0x10	; 16
    1226:	b0 f4       	brcc	.+44     	; 0x1254 <ledmatrix_update_pixel+0x36>
    1228:	68 30       	cpi	r22, 0x08	; 8
    122a:	a0 f4       	brcc	.+40     	; 0x1254 <ledmatrix_update_pixel+0x36>
    122c:	14 2f       	mov	r17, r20
    122e:	c6 2f       	mov	r28, r22
    1230:	d8 2f       	mov	r29, r24
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    1238:	6c 2f       	mov	r22, r28
    123a:	67 70       	andi	r22, 0x07	; 7
    123c:	80 e1       	ldi	r24, 0x10	; 16
    123e:	68 9f       	mul	r22, r24
    1240:	90 01       	movw	r18, r0
    1242:	11 24       	eor	r1, r1
    1244:	8d 2f       	mov	r24, r29
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	82 2b       	or	r24, r18
    124a:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    124e:	81 2f       	mov	r24, r17
    1250:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	08 95       	ret

0000125c <ledmatrix_update_column>:
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	80 31       	cpi	r24, 0x10	; 16
    1266:	90 f4       	brcc	.+36     	; 0x128c <ledmatrix_update_column+0x30>
    1268:	8b 01       	movw	r16, r22
    126a:	c8 2f       	mov	r28, r24
    126c:	83 e0       	ldi	r24, 0x03	; 3
    126e:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    1272:	8c 2f       	mov	r24, r28
    1274:	8f 70       	andi	r24, 0x0F	; 15
    1276:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    127a:	e8 01       	movw	r28, r16
    127c:	08 5f       	subi	r16, 0xF8	; 248
    127e:	1f 4f       	sbci	r17, 0xFF	; 255
    1280:	89 91       	ld	r24, Y+
    1282:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    1286:	c0 17       	cp	r28, r16
    1288:	d1 07       	cpc	r29, r17
    128a:	d1 f7       	brne	.-12     	; 0x1280 <ledmatrix_update_column+0x24>
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <ledmatrix_shift_display_left>:
    1296:	84 e0       	ldi	r24, 0x04	; 4
    1298:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    129c:	82 e0       	ldi	r24, 0x02	; 2
    129e:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    12a2:	08 95       	ret

000012a4 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    12a4:	8f e0       	ldi	r24, 0x0F	; 15
    12a6:	0e 94 b0 10 	call	0x2160	; 0x2160 <spi_send_byte>
    12aa:	08 95       	ret

000012ac <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    12ac:	82 95       	swap	r24
    12ae:	8f 70       	andi	r24, 0x0F	; 15
    12b0:	08 95       	ret

000012b2 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    12b2:	8f 70       	andi	r24, 0x0F	; 15
    12b4:	08 95       	ret

000012b6 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    12b6:	83 fb       	bst	r24, 3
    12b8:	88 27       	eor	r24, r24
    12ba:	80 f9       	bld	r24, 0
}
    12bc:	91 e0       	ldi	r25, 0x01	; 1
    12be:	89 27       	eor	r24, r25
    12c0:	08 95       	ret

000012c2 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    12c2:	20 e1       	ldi	r18, 0x10	; 16
    12c4:	82 9f       	mul	r24, r18
    12c6:	c0 01       	movw	r24, r0
    12c8:	11 24       	eor	r1, r1
    12ca:	67 70       	andi	r22, 0x07	; 7
}
    12cc:	86 2b       	or	r24, r22
    12ce:	08 95       	ret

000012d0 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    12d0:	0e 94 0b 09 	call	0x1216	; 0x1216 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    12d4:	0e 94 3f 01 	call	0x27e	; 0x27e <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    12d8:	40 e0       	ldi	r20, 0x00	; 0
    12da:	60 e0       	ldi	r22, 0x00	; 0
    12dc:	7b e4       	ldi	r23, 0x4B	; 75
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    12e6:	0e 94 3c 12 	call	0x2478	; 0x2478 <init_timer0>
	
	// Turn on global interrupts
	sei();
    12ea:	78 94       	sei
    12ec:	08 95       	ret

000012ee <splash_screen>:
}

void splash_screen(void) {
    12ee:	ff 92       	push	r15
    12f0:	0f 93       	push	r16
    12f2:	1f 93       	push	r17
    12f4:	cf 93       	push	r28
    12f6:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	0e 94 a2 11 	call	0x2344	; 0x2344 <set_display_attribute>
	clear_terminal();
    12fe:	0e 94 99 11 	call	0x2332	; 0x2332 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1302:	0e 94 af 11 	call	0x235e	; 0x235e <hide_cursor>
	display_start_terminal_screen();
    1306:	0e 94 c1 11 	call	0x2382	; 0x2382 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    130a:	0e 94 52 09 	call	0x12a4	; 0x12a4 <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    130e:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1310:	0f 2e       	mov	r0, r31
    1312:	ff e0       	ldi	r31, 0x0F	; 15
    1314:	ff 2e       	mov	r15, r31
    1316:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    1318:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    131a:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    131c:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    131e:	6c 2f       	mov	r22, r28
    1320:	84 ee       	ldi	r24, 0xE4	; 228
    1322:	91 e0       	ldi	r25, 0x01	; 1
    1324:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1328:	0d c0       	rjmp	.+26     	; 0x1344 <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    132a:	2f e7       	ldi	r18, 0x7F	; 127
    132c:	8c e2       	ldi	r24, 0x2C	; 44
    132e:	93 e0       	ldi	r25, 0x03	; 3
    1330:	21 50       	subi	r18, 0x01	; 1
    1332:	80 40       	sbci	r24, 0x00	; 0
    1334:	90 40       	sbci	r25, 0x00	; 0
    1336:	e1 f7       	brne	.-8      	; 0x1330 <splash_screen+0x42>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <splash_screen+0x4c>
    133a:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    133c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_pushed>
    1340:	8f 3f       	cpi	r24, 0xFF	; 255
    1342:	a9 f5       	brne	.+106    	; 0x13ae <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1344:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <scroll_display>
    1348:	81 11       	cpse	r24, r1
    134a:	ef cf       	rjmp	.-34     	; 0x132a <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    134c:	0e 94 1b 16 	call	0x2c36	; 0x2c36 <random>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	83 70       	andi	r24, 0x03	; 3
    1356:	99 27       	eor	r25, r25
    1358:	aa 27       	eor	r26, r26
    135a:	b0 78       	andi	r27, 0x80	; 128
    135c:	bb 23       	and	r27, r27
    135e:	54 f4       	brge	.+20     	; 0x1374 <splash_screen+0x86>
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	a1 09       	sbc	r26, r1
    1364:	b1 09       	sbc	r27, r1
    1366:	8c 6f       	ori	r24, 0xFC	; 252
    1368:	9f 6f       	ori	r25, 0xFF	; 255
    136a:	af 6f       	ori	r26, 0xFF	; 255
    136c:	bf 6f       	ori	r27, 0xFF	; 255
    136e:	01 96       	adiw	r24, 0x01	; 1
    1370:	a1 1d       	adc	r26, r1
    1372:	b1 1d       	adc	r27, r1
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	91 05       	cpc	r25, r1
    1378:	a1 05       	cpc	r26, r1
    137a:	b1 05       	cpc	r27, r1
    137c:	91 f0       	breq	.+36     	; 0x13a2 <splash_screen+0xb4>
    137e:	2c f4       	brge	.+10     	; 0x138a <splash_screen+0x9c>
    1380:	89 2b       	or	r24, r25
    1382:	8a 2b       	or	r24, r26
    1384:	8b 2b       	or	r24, r27
    1386:	59 f0       	breq	.+22     	; 0x139e <splash_screen+0xb0>
    1388:	ca cf       	rjmp	.-108    	; 0x131e <splash_screen+0x30>
    138a:	82 30       	cpi	r24, 0x02	; 2
    138c:	91 05       	cpc	r25, r1
    138e:	a1 05       	cpc	r26, r1
    1390:	b1 05       	cpc	r27, r1
    1392:	49 f0       	breq	.+18     	; 0x13a6 <splash_screen+0xb8>
    1394:	03 97       	sbiw	r24, 0x03	; 3
    1396:	a1 05       	cpc	r26, r1
    1398:	b1 05       	cpc	r27, r1
    139a:	39 f0       	breq	.+14     	; 0x13aa <splash_screen+0xbc>
    139c:	c0 cf       	rjmp	.-128    	; 0x131e <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    139e:	cd 2f       	mov	r28, r29
    13a0:	be cf       	rjmp	.-132    	; 0x131e <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    13a2:	cf 2d       	mov	r28, r15
    13a4:	bc cf       	rjmp	.-136    	; 0x131e <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    13a6:	c0 2f       	mov	r28, r16
    13a8:	ba cf       	rjmp	.-140    	; 0x131e <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    13aa:	c1 2f       	mov	r28, r17
    13ac:	b8 cf       	rjmp	.-144    	; 0x131e <splash_screen+0x30>
		}
	}
}
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	ff 90       	pop	r15
    13b8:	08 95       	ret

000013ba <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    13ba:	0e 94 99 11 	call	0x2332	; 0x2332 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    13be:	0e 94 4c 08 	call	0x1098	; 0x1098 <init_game>
		
	// Initialise the score
	init_score();
    13c2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    13c6:	0e 94 4d 01 	call	0x29a	; 0x29a <empty_button_queue>
	clear_serial_input_buffer();
    13ca:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <clear_serial_input_buffer>
    13ce:	08 95       	ret

000013d0 <play_game>:
}

void play_game(void) {
    13d0:	4f 92       	push	r4
    13d2:	5f 92       	push	r5
    13d4:	7f 92       	push	r7
    13d6:	8f 92       	push	r8
    13d8:	9f 92       	push	r9
    13da:	af 92       	push	r10
    13dc:	bf 92       	push	r11
    13de:	cf 92       	push	r12
    13e0:	df 92       	push	r13
    13e2:	ef 92       	push	r14
    13e4:	ff 92       	push	r15
    13e6:	0f 93       	push	r16
    13e8:	1f 93       	push	r17
    13ea:	cf 93       	push	r28
    13ec:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    13ee:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    13f2:	4b 01       	movw	r8, r22
    13f4:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    13f6:	00 e0       	ldi	r16, 0x00	; 0
    13f8:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    13fa:	0f 2e       	mov	r0, r31
    13fc:	ff ed       	ldi	r31, 0xDF	; 223
    13fe:	7f 2e       	mov	r7, r31
    1400:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1402:	0f 2e       	mov	r0, r31
    1404:	fb e9       	ldi	r31, 0x9B	; 155
    1406:	4f 2e       	mov	r4, r31
    1408:	f3 e0       	ldi	r31, 0x03	; 3
    140a:	5f 2e       	mov	r5, r31
    140c:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    140e:	0e 94 bf 10 	call	0x217e	; 0x217e <time_to_add_superfood>
    1412:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    1414:	0e 94 16 11 	call	0x222c	; 0x222c <add_superfood_to_board>
			if(time_to_remove_superfood()){
    1418:	0e 94 d5 10 	call	0x21aa	; 0x21aa <time_to_remove_superfood>
    141c:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    141e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    1422:	0e 94 ae 0c 	call	0x195c	; 0x195c <is_time_to_move_rat>
    1426:	81 11       	cpse	r24, r1
    1428:	0e 94 c9 0b 	call	0x1792	; 0x1792 <move_rat>
			handle_buzzer_loop();
    142c:	0e 94 9a 02 	call	0x534	; 0x534 <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    1430:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <timer_is_paused>
    1434:	89 2b       	or	r24, r25
    1436:	19 f0       	breq	.+6      	; 0x143e <play_game+0x6e>
			button = -1;
			empty_button_queue();
    1438:	0e 94 4d 01 	call	0x29a	; 0x29a <empty_button_queue>
    143c:	06 c0       	rjmp	.+12     	; 0x144a <play_game+0x7a>
			}else{
		button = button_pushed();}
    143e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_pushed>
    1442:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    1444:	8f 3f       	cpi	r24, 0xFF	; 255
    1446:	09 f0       	breq	.+2      	; 0x144a <play_game+0x7a>
    1448:	9a c0       	rjmp	.+308    	; 0x157e <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    144a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <serial_input_available>
    144e:	88 23       	and	r24, r24
    1450:	09 f4       	brne	.+2      	; 0x1454 <play_game+0x84>
    1452:	a4 c0       	rjmp	.+328    	; 0x159c <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1454:	f2 01       	movw	r30, r4
    1456:	80 81       	ld	r24, Z
    1458:	91 81       	ldd	r25, Z+1	; 0x01
    145a:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <fgetc>
    145e:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1460:	01 11       	cpse	r16, r1
    1462:	03 c0       	rjmp	.+6      	; 0x146a <play_game+0x9a>
    1464:	8b 31       	cpi	r24, 0x1B	; 27
    1466:	51 f4       	brne	.+20     	; 0x147c <play_game+0xac>
    1468:	96 c0       	rjmp	.+300    	; 0x1596 <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    146a:	01 30       	cpi	r16, 0x01	; 1
    146c:	19 f4       	brne	.+6      	; 0x1474 <play_game+0xa4>
    146e:	8b 35       	cpi	r24, 0x5B	; 91
    1470:	29 f4       	brne	.+10     	; 0x147c <play_game+0xac>
    1472:	93 c0       	rjmp	.+294    	; 0x159a <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1474:	02 30       	cpi	r16, 0x02	; 2
    1476:	09 f4       	brne	.+2      	; 0x147a <play_game+0xaa>
    1478:	88 c0       	rjmp	.+272    	; 0x158a <play_game+0x1ba>
    147a:	7b c0       	rjmp	.+246    	; 0x1572 <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    147c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <timer_is_paused>
    1480:	89 2b       	or	r24, r25
    1482:	09 f0       	breq	.+2      	; 0x1486 <play_game+0xb6>
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <play_game+0x134>
    1486:	08 c0       	rjmp	.+16     	; 0x1498 <play_game+0xc8>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1488:	d1 11       	cpse	r29, r1
    148a:	09 c0       	rjmp	.+18     	; 0x149e <play_game+0xce>
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    148e:	00 e0       	ldi	r16, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <set_snake_dirn>
    1496:	50 c0       	rjmp	.+160    	; 0x1538 <play_game+0x168>
    1498:	00 e0       	ldi	r16, 0x00	; 0
    149a:	d1 2f       	mov	r29, r17
    149c:	01 c0       	rjmp	.+2      	; 0x14a0 <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    149e:	c1 2f       	mov	r28, r17
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    14a0:	d2 30       	cpi	r29, 0x02	; 2
    14a2:	19 f0       	breq	.+6      	; 0x14aa <play_game+0xda>
    14a4:	81 2f       	mov	r24, r17
    14a6:	81 34       	cpi	r24, 0x41	; 65
    14a8:	21 f4       	brne	.+8      	; 0x14b2 <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <set_snake_dirn>
    14b0:	43 c0       	rjmp	.+134    	; 0x1538 <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    14b2:	d3 30       	cpi	r29, 0x03	; 3
    14b4:	11 f0       	breq	.+4      	; 0x14ba <play_game+0xea>
    14b6:	84 34       	cpi	r24, 0x44	; 68
    14b8:	21 f4       	brne	.+8      	; 0x14c2 <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <set_snake_dirn>
    14c0:	3b c0       	rjmp	.+118    	; 0x1538 <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    14c2:	d1 30       	cpi	r29, 0x01	; 1
    14c4:	11 f0       	breq	.+4      	; 0x14ca <play_game+0xfa>
    14c6:	82 34       	cpi	r24, 0x42	; 66
    14c8:	29 f4       	brne	.+10     	; 0x14d4 <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    14ca:	82 e0       	ldi	r24, 0x02	; 2
    14cc:	0e 94 9c 0f 	call	0x1f38	; 0x1f38 <set_snake_dirn>
    14d0:	33 c0       	rjmp	.+102    	; 0x1538 <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    14d2:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    14d4:	8c 2f       	mov	r24, r28
    14d6:	8f 7d       	andi	r24, 0xDF	; 223
    14d8:	80 35       	cpi	r24, 0x50	; 80
    14da:	19 f4       	brne	.+6      	; 0x14e2 <play_game+0x112>
			toggle_timer_clock();
    14dc:	0e 94 54 12 	call	0x24a8	; 0x24a8 <toggle_timer_clock>
    14e0:	2b c0       	rjmp	.+86     	; 0x1538 <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    14e2:	c3 37       	cpi	r28, 0x73	; 115
    14e4:	19 f4       	brne	.+6      	; 0x14ec <play_game+0x11c>
			save_game_to_EPPROM();
    14e6:	0e 94 bd 02 	call	0x57a	; 0x57a <save_game_to_EPPROM>
    14ea:	26 c0       	rjmp	.+76     	; 0x1538 <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    14ec:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    14f0:	89 2b       	or	r24, r25
    14f2:	11 f1       	breq	.+68     	; 0x1538 <play_game+0x168>
    14f4:	8c 2f       	mov	r24, r28
    14f6:	8f 7d       	andi	r24, 0xDF	; 223
    14f8:	8f 34       	cpi	r24, 0x4F	; 79
    14fa:	f1 f4       	brne	.+60     	; 0x1538 <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <load_EEPROM_data_on_next_game>
 			break;
    1502:	62 c0       	rjmp	.+196    	; 0x15c8 <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1504:	8c 2f       	mov	r24, r28
    1506:	8f 7d       	andi	r24, 0xDF	; 223
    1508:	80 35       	cpi	r24, 0x50	; 80
    150a:	21 f4       	brne	.+8      	; 0x1514 <play_game+0x144>
			toggle_timer_clock();
    150c:	0e 94 54 12 	call	0x24a8	; 0x24a8 <toggle_timer_clock>
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	12 c0       	rjmp	.+36     	; 0x1538 <play_game+0x168>
    1514:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    1516:	83 35       	cpi	r24, 0x53	; 83
    1518:	19 f4       	brne	.+6      	; 0x1520 <play_game+0x150>
			save_game_to_EPPROM();
    151a:	0e 94 bd 02 	call	0x57a	; 0x57a <save_game_to_EPPROM>
    151e:	0c c0       	rjmp	.+24     	; 0x1538 <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1520:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    1524:	89 2b       	or	r24, r25
    1526:	41 f0       	breq	.+16     	; 0x1538 <play_game+0x168>
    1528:	8c 2f       	mov	r24, r28
    152a:	8f 7d       	andi	r24, 0xDF	; 223
    152c:	8f 34       	cpi	r24, 0x4F	; 79
    152e:	21 f4       	brne	.+8      	; 0x1538 <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <load_EEPROM_data_on_next_game>
			break;
    1536:	48 c0       	rjmp	.+144    	; 0x15c8 <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    1538:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    153c:	6b 01       	movw	r12, r22
    153e:	7c 01       	movw	r14, r24
    1540:	0e 94 01 09 	call	0x1202	; 0x1202 <get_current_game_speed>
    1544:	09 2e       	mov	r0, r25
    1546:	00 0c       	add	r0, r0
    1548:	aa 0b       	sbc	r26, r26
    154a:	bb 0b       	sbc	r27, r27
    154c:	88 0d       	add	r24, r8
    154e:	99 1d       	adc	r25, r9
    1550:	aa 1d       	adc	r26, r10
    1552:	bb 1d       	adc	r27, r11
    1554:	c8 16       	cp	r12, r24
    1556:	d9 06       	cpc	r13, r25
    1558:	ea 06       	cpc	r14, r26
    155a:	fb 06       	cpc	r15, r27
    155c:	08 f4       	brcc	.+2      	; 0x1560 <play_game+0x190>
    155e:	57 cf       	rjmp	.-338    	; 0x140e <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    1560:	0e 94 99 08 	call	0x1132	; 0x1132 <attempt_to_move_snake_forward>
    1564:	88 23       	and	r24, r24
    1566:	81 f1       	breq	.+96     	; 0x15c8 <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    1568:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    156c:	4b 01       	movw	r8, r22
    156e:	5c 01       	movw	r10, r24
    1570:	4e cf       	rjmp	.-356    	; 0x140e <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1572:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <timer_is_paused>
    1576:	89 2b       	or	r24, r25
    1578:	09 f4       	brne	.+2      	; 0x157c <play_game+0x1ac>
    157a:	ab cf       	rjmp	.-170    	; 0x14d2 <play_game+0x102>
    157c:	c3 cf       	rjmp	.-122    	; 0x1504 <play_game+0x134>
    157e:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <timer_is_paused>
    1582:	89 2b       	or	r24, r25
    1584:	09 f4       	brne	.+2      	; 0x1588 <play_game+0x1b8>
    1586:	80 cf       	rjmp	.-256    	; 0x1488 <play_game+0xb8>
    1588:	1c c0       	rjmp	.+56     	; 0x15c2 <play_game+0x1f2>
    158a:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <timer_is_paused>
    158e:	89 2b       	or	r24, r25
    1590:	51 f0       	breq	.+20     	; 0x15a6 <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1592:	00 e0       	ldi	r16, 0x00	; 0
    1594:	13 c0       	rjmp	.+38     	; 0x15bc <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1596:	01 e0       	ldi	r16, 0x01	; 1
    1598:	01 c0       	rjmp	.+2      	; 0x159c <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    159a:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    159c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <timer_is_paused>
    15a0:	89 2b       	or	r24, r25
    15a2:	61 f4       	brne	.+24     	; 0x15bc <play_game+0x1ec>
    15a4:	08 c0       	rjmp	.+16     	; 0x15b6 <play_game+0x1e6>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15a6:	c3 34       	cpi	r28, 0x43	; 67
    15a8:	09 f4       	brne	.+2      	; 0x15ac <play_game+0x1dc>
    15aa:	71 cf       	rjmp	.-286    	; 0x148e <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    15ac:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15ae:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    15b0:	c1 2f       	mov	r28, r17
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15b2:	d1 2f       	mov	r29, r17
    15b4:	78 cf       	rjmp	.-272    	; 0x14a6 <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15b6:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    15ba:	be cf       	rjmp	.-132    	; 0x1538 <play_game+0x168>
    15bc:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    15be:	87 2d       	mov	r24, r7
    15c0:	aa cf       	rjmp	.-172    	; 0x1516 <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15c2:	0e 94 b0 02 	call	0x560	; 0x560 <EEPROM_has_saved_game>
    15c6:	b8 cf       	rjmp	.-144    	; 0x1538 <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	bf 90       	pop	r11
    15da:	af 90       	pop	r10
    15dc:	9f 90       	pop	r9
    15de:	8f 90       	pop	r8
    15e0:	7f 90       	pop	r7
    15e2:	5f 90       	pop	r5
    15e4:	4f 90       	pop	r4
    15e6:	08 95       	ret

000015e8 <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    15e8:	0e 94 99 11 	call	0x2332	; 0x2332 <clear_terminal>
	move_cursor(10,5);
    15ec:	65 e0       	ldi	r22, 0x05	; 5
    15ee:	8a e0       	ldi	r24, 0x0A	; 10
    15f0:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    15f4:	86 e0       	ldi	r24, 0x06	; 6
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	9f 93       	push	r25
    15fa:	8f 93       	push	r24
    15fc:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
	move_cursor(10,7);
    1600:	67 e0       	ldi	r22, 0x07	; 7
    1602:	8a e0       	ldi	r24, 0x0A	; 10
    1604:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf("Score: %u", get_score());
    1608:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
    160c:	9f 93       	push	r25
    160e:	8f 93       	push	r24
    1610:	7f 93       	push	r23
    1612:	6f 93       	push	r22
    1614:	86 ef       	ldi	r24, 0xF6	; 246
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	9f 93       	push	r25
    161a:	8f 93       	push	r24
    161c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
	display_EEPROM_high_score();
    1620:	0e 94 84 06 	call	0xd08	; 0xd08 <display_EEPROM_high_score>

	if (is_high_score()){
    1624:	0e 94 4a 05 	call	0xa94	; 0xa94 <is_high_score>
    1628:	2d b7       	in	r18, 0x3d	; 61
    162a:	3e b7       	in	r19, 0x3e	; 62
    162c:	28 5f       	subi	r18, 0xF8	; 248
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	3e bf       	out	0x3e, r19	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	2d bf       	out	0x3d, r18	; 61
    163a:	81 11       	cpse	r24, r1
		set_high_score_name();	
    163c:	0e 94 25 06 	call	0xc4a	; 0xc4a <set_high_score_name>
	}
	move_cursor(10,9);
    1640:	69 e0       	ldi	r22, 0x09	; 9
    1642:	8a e0       	ldi	r24, 0x0A	; 10
    1644:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1648:	88 ee       	ldi	r24, 0xE8	; 232
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	9f 93       	push	r25
    164e:	8f 93       	push	r24
    1650:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
	display_EEPROM_high_score(); 
    1654:	0e 94 84 06 	call	0xd08	; 0xd08 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <button_pushed>
    1660:	8f 3f       	cpi	r24, 0xFF	; 255
    1662:	e1 f3       	breq	.-8      	; 0x165c <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    1664:	0e 94 99 11 	call	0x2332	; 0x2332 <clear_terminal>
    1668:	08 95       	ret

0000166a <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    166a:	0e 94 68 09 	call	0x12d0	; 0x12d0 <initialise_hardware>
	DDRA = 0xff;
    166e:	8f ef       	ldi	r24, 0xFF	; 255
    1670:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    1672:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    1674:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    1676:	0e 94 77 09 	call	0x12ee	; 0x12ee <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    167a:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <load_EEPROM_data_on_next_game>
    167e:	88 23       	and	r24, r24
    1680:	19 f0       	breq	.+6      	; 0x1688 <main+0x1e>
    1682:	0e 94 31 04 	call	0x862	; 0x862 <new_game_from_EEPROM>
    1686:	02 c0       	rjmp	.+4      	; 0x168c <main+0x22>
			else{new_game();}
    1688:	0e 94 dd 09 	call	0x13ba	; 0x13ba <new_game>
		play_game();
    168c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    1690:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <load_EEPROM_data_on_next_game>
    1694:	81 11       	cpse	r24, r1
    1696:	f1 cf       	rjmp	.-30     	; 0x167a <main+0x10>
    1698:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <handle_game_over>
    169c:	ee cf       	rjmp	.-36     	; 0x167a <main+0x10>

0000169e <get_rat_position>:

uint16_t RAT_WAIT_TIME = 1200;

PosnType get_rat_position(void){
	return rat_position;
}
    169e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    16a2:	08 95       	ret

000016a4 <set_rat_at_pos>:

void set_rat_at_pos(PosnType new_pos){
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	c8 2f       	mov	r28, r24
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_BLACK);
    16aa:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    16ae:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    16b2:	d8 2f       	mov	r29, r24
    16b4:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    16b8:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	6d 2f       	mov	r22, r29
    16c0:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
	rat_position = new_pos;
    16c4:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <rat_position>
	ledmatrix_update_pixel(x_position(new_pos), y_position(new_pos), COLOUR_LIGHT_YELLOW);
    16c8:	8c 2f       	mov	r24, r28
    16ca:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    16ce:	d8 2f       	mov	r29, r24
    16d0:	8c 2f       	mov	r24, r28
    16d2:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    16d6:	43 e3       	ldi	r20, 0x33	; 51
    16d8:	6d 2f       	mov	r22, r29
    16da:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>

}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	08 95       	ret

000016e4 <is_item_at>:

uint8_t is_item_at(PosnType position){
    16e4:	cf 93       	push	r28
    16e6:	c8 2f       	mov	r28, r24
	if (is_snake_at(position) || is_food_at(position)|| is_superfood_at(position)){
    16e8:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <is_snake_at>
    16ec:	81 11       	cpse	r24, r1
    16ee:	0d c0       	rjmp	.+26     	; 0x170a <is_item_at+0x26>
    16f0:	8c 2f       	mov	r24, r28
    16f2:	0e 94 ac 07 	call	0xf58	; 0xf58 <is_food_at>
    16f6:	81 11       	cpse	r24, r1
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <is_item_at+0x2a>
    16fa:	8c 2f       	mov	r24, r28
    16fc:	0e 94 09 11 	call	0x2212	; 0x2212 <is_superfood_at>
		return 1;
    1700:	91 e0       	ldi	r25, 0x01	; 1
    1702:	81 11       	cpse	r24, r1
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <is_item_at+0x2c>
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	03 c0       	rjmp	.+6      	; 0x1710 <is_item_at+0x2c>
    170a:	91 e0       	ldi	r25, 0x01	; 1
    170c:	01 c0       	rjmp	.+2      	; 0x1710 <is_item_at+0x2c>
    170e:	91 e0       	ldi	r25, 0x01	; 1
	}
	return 0;
}
    1710:	89 2f       	mov	r24, r25
    1712:	cf 91       	pop	r28
    1714:	08 95       	ret

00001716 <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    1716:	1f 93       	push	r17
    1718:	cf 93       	push	r28
    171a:	df 93       	push	r29
    171c:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    171e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    1722:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    1726:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    1728:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    172c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1730:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    1732:	8f ef       	ldi	r24, 0xFF	; 255
    1734:	8c 0f       	add	r24, r28
    1736:	8e 30       	cpi	r24, 0x0E	; 14
    1738:	20 f4       	brcc	.+8      	; 0x1742 <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    173a:	8f ef       	ldi	r24, 0xFF	; 255
    173c:	8d 0f       	add	r24, r29
    173e:	86 30       	cpi	r24, 0x06	; 6
    1740:	e8 f0       	brcs	.+58     	; 0x177c <rat_jumped_the_board+0x66>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
    1742:	c1 11       	cpse	r28, r1
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <rat_jumped_the_board+0x3c>
    1746:	81 2f       	mov	r24, r17
    1748:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    174c:	8f 30       	cpi	r24, 0x0F	; 15
    174e:	41 f4       	brne	.+16     	; 0x1760 <rat_jumped_the_board+0x4a>
    1750:	17 c0       	rjmp	.+46     	; 0x1780 <rat_jumped_the_board+0x6a>
    1752:	cf 30       	cpi	r28, 0x0F	; 15
    1754:	29 f4       	brne	.+10     	; 0x1760 <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
    1756:	81 2f       	mov	r24, r17
    1758:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    175c:	88 23       	and	r24, r24
    175e:	91 f0       	breq	.+36     	; 0x1784 <rat_jumped_the_board+0x6e>
    1760:	d1 11       	cpse	r29, r1
    1762:	05 c0       	rjmp	.+10     	; 0x176e <rat_jumped_the_board+0x58>
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    1764:	81 2f       	mov	r24, r17
    1766:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e c0       	rjmp	.+28     	; 0x178a <rat_jumped_the_board+0x74>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    176e:	d7 30       	cpi	r29, 0x07	; 7
    1770:	59 f4       	brne	.+22     	; 0x1788 <rat_jumped_the_board+0x72>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
    1772:	81 2f       	mov	r24, r17
    1774:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
			return 1; 
		}
	return 1; 
    1778:	81 e0       	ldi	r24, 0x01	; 1
    177a:	07 c0       	rjmp	.+14     	; 0x178a <rat_jumped_the_board+0x74>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	05 c0       	rjmp	.+10     	; 0x178a <rat_jumped_the_board+0x74>
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	03 c0       	rjmp	.+6      	; 0x178a <rat_jumped_the_board+0x74>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	01 c0       	rjmp	.+2      	; 0x178a <rat_jumped_the_board+0x74>
		}
	return 1; 
    1788:	81 e0       	ldi	r24, 0x01	; 1
}
    178a:	df 91       	pop	r29
    178c:	cf 91       	pop	r28
    178e:	1f 91       	pop	r17
    1790:	08 95       	ret

00001792 <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    179a:	60 e0       	ldi	r22, 0x00	; 0
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    17a2:	08 2f       	mov	r16, r24
	uint8_t move_option = rand()%4; 
    17a4:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
    17a8:	83 70       	andi	r24, 0x03	; 3
    17aa:	90 78       	andi	r25, 0x80	; 128
    17ac:	99 23       	and	r25, r25
    17ae:	24 f4       	brge	.+8      	; 0x17b8 <move_rat+0x26>
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	8c 6f       	ori	r24, 0xFC	; 252
    17b4:	9f 6f       	ori	r25, 0xFF	; 255
    17b6:	01 96       	adiw	r24, 0x01	; 1
	return 0;
}

void move_rat(void){
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
    17b8:	10 e0       	ldi	r17, 0x00	; 0
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <move_rat+0x3c>
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
			break;
			
		}
		attempts ++;
		move_option = rand() %4; 
    17bc:	ce 01       	movw	r24, r28
    17be:	83 70       	andi	r24, 0x03	; 3
    17c0:	90 78       	andi	r25, 0x80	; 128
    17c2:	99 23       	and	r25, r25
    17c4:	24 f4       	brge	.+8      	; 0x17ce <move_rat+0x3c>
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	8c 6f       	ori	r24, 0xFC	; 252
    17ca:	9f 6f       	ori	r25, 0xFF	; 255
    17cc:	01 96       	adiw	r24, 0x01	; 1
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	a9 f0       	breq	.+42     	; 0x17fc <move_rat+0x6a>
    17d2:	28 f0       	brcs	.+10     	; 0x17de <move_rat+0x4c>
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	09 f1       	breq	.+66     	; 0x181a <move_rat+0x88>
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	71 f1       	breq	.+92     	; 0x1838 <move_rat+0xa6>
    17dc:	3b c0       	rjmp	.+118    	; 0x1854 <move_rat+0xc2>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    17de:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    17e2:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    17e6:	c8 2f       	mov	r28, r24
    17e8:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    17ec:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    17f0:	61 e0       	ldi	r22, 0x01	; 1
    17f2:	6c 0f       	add	r22, r28
    17f4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    17f8:	08 2f       	mov	r16, r24
			break; 
    17fa:	2c c0       	rjmp	.+88     	; 0x1854 <move_rat+0xc2>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    17fc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    1800:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1804:	c8 2f       	mov	r28, r24
    1806:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    180a:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    180e:	6f ef       	ldi	r22, 0xFF	; 255
    1810:	6c 0f       	add	r22, r28
    1812:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    1816:	08 2f       	mov	r16, r24
			break;
    1818:	1d c0       	rjmp	.+58     	; 0x1854 <move_rat+0xc2>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    181a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    181e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1822:	c8 2f       	mov	r28, r24
    1824:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    1828:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    182c:	6c 2f       	mov	r22, r28
    182e:	8f 5f       	subi	r24, 0xFF	; 255
    1830:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    1834:	08 2f       	mov	r16, r24
			break;
    1836:	0e c0       	rjmp	.+28     	; 0x1854 <move_rat+0xc2>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    1838:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    183c:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1840:	c8 2f       	mov	r28, r24
    1842:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    1846:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    184a:	6c 2f       	mov	r22, r28
    184c:	81 50       	subi	r24, 0x01	; 1
    184e:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    1852:	08 2f       	mov	r16, r24
			break;
			
		}
		attempts ++;
    1854:	1f 5f       	subi	r17, 0xFF	; 255
		move_option = rand() %4; 
    1856:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
    185a:	ec 01       	movw	r28, r24
		
	} while ((attempts <4) && (is_item_at(new_rat_pos) || (rat_jumped_the_board(new_rat_pos))));
    185c:	14 30       	cpi	r17, 0x04	; 4
    185e:	61 f0       	breq	.+24     	; 0x1878 <move_rat+0xe6>
    1860:	80 2f       	mov	r24, r16
    1862:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <is_item_at>
    1866:	81 11       	cpse	r24, r1
    1868:	a9 cf       	rjmp	.-174    	; 0x17bc <move_rat+0x2a>
    186a:	80 2f       	mov	r24, r16
    186c:	0e 94 8b 0b 	call	0x1716	; 0x1716 <rat_jumped_the_board>
    1870:	81 11       	cpse	r24, r1
    1872:	a4 cf       	rjmp	.-184    	; 0x17bc <move_rat+0x2a>
	
	if (attempts<=4){
    1874:	15 30       	cpi	r17, 0x05	; 5
    1876:	18 f4       	brcc	.+6      	; 0x187e <move_rat+0xec>
		set_rat_at_pos(new_rat_pos); 
    1878:	80 2f       	mov	r24, r16
    187a:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <set_rat_at_pos>
	}
	}
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	1f 91       	pop	r17
    1884:	0f 91       	pop	r16
    1886:	08 95       	ret

00001888 <is_rat_at>:
		}
	return 1; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    1888:	91 e0       	ldi	r25, 0x01	; 1
    188a:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <rat_position>
    188e:	28 13       	cpse	r18, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
}
    1892:	89 2f       	mov	r24, r25
    1894:	08 95       	ret

00001896 <add_new_rat_position>:

void add_new_rat_position(void){
    1896:	1f 93       	push	r17
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    189c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
    18a0:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    18a2:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
        test_position = position(x,y);
    18a6:	bc 01       	movw	r22, r24
    18a8:	67 70       	andi	r22, 0x07	; 7
    18aa:	70 78       	andi	r23, 0x80	; 128
    18ac:	77 23       	and	r23, r23
    18ae:	34 f4       	brge	.+12     	; 0x18bc <add_new_rat_position+0x26>
    18b0:	61 50       	subi	r22, 0x01	; 1
    18b2:	71 09       	sbc	r23, r1
    18b4:	68 6f       	ori	r22, 0xF8	; 248
    18b6:	7f 6f       	ori	r23, 0xFF	; 255
    18b8:	6f 5f       	subi	r22, 0xFF	; 255
    18ba:	7f 4f       	sbci	r23, 0xFF	; 255
    18bc:	ce 01       	movw	r24, r28
    18be:	8f 70       	andi	r24, 0x0F	; 15
    18c0:	90 78       	andi	r25, 0x80	; 128
    18c2:	99 23       	and	r25, r25
    18c4:	24 f4       	brge	.+8      	; 0x18ce <add_new_rat_position+0x38>
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	80 6f       	ori	r24, 0xF0	; 240
    18ca:	9f 6f       	ori	r25, 0xFF	; 255
    18cc:	01 96       	adiw	r24, 0x01	; 1
    18ce:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    18d2:	c8 2f       	mov	r28, r24
    18d4:	13 e6       	ldi	r17, 0x63	; 99
    18d6:	1e c0       	rjmp	.+60     	; 0x1914 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    18d8:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
    18dc:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    18de:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
        test_position = position(x,y);
    18e2:	bc 01       	movw	r22, r24
    18e4:	67 70       	andi	r22, 0x07	; 7
    18e6:	70 78       	andi	r23, 0x80	; 128
    18e8:	77 23       	and	r23, r23
    18ea:	34 f4       	brge	.+12     	; 0x18f8 <add_new_rat_position+0x62>
    18ec:	61 50       	subi	r22, 0x01	; 1
    18ee:	71 09       	sbc	r23, r1
    18f0:	68 6f       	ori	r22, 0xF8	; 248
    18f2:	7f 6f       	ori	r23, 0xFF	; 255
    18f4:	6f 5f       	subi	r22, 0xFF	; 255
    18f6:	7f 4f       	sbci	r23, 0xFF	; 255
    18f8:	ce 01       	movw	r24, r28
    18fa:	8f 70       	andi	r24, 0x0F	; 15
    18fc:	90 78       	andi	r25, 0x80	; 128
    18fe:	99 23       	and	r25, r25
    1900:	24 f4       	brge	.+8      	; 0x190a <add_new_rat_position+0x74>
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	80 6f       	ori	r24, 0xF0	; 240
    1906:	9f 6f       	ori	r25, 0xFF	; 255
    1908:	01 96       	adiw	r24, 0x01	; 1
    190a:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    190e:	c8 2f       	mov	r28, r24
    1910:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1912:	91 f0       	breq	.+36     	; 0x1938 <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1914:	8c 2f       	mov	r24, r28
    1916:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    191a:	81 11       	cpse	r24, r1
    191c:	dd cf       	rjmp	.-70     	; 0x18d8 <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    191e:	8c 2f       	mov	r24, r28
    1920:	0e 94 ac 07 	call	0xf58	; 0xf58 <is_food_at>
    1924:	81 11       	cpse	r24, r1
    1926:	d8 cf       	rjmp	.-80     	; 0x18d8 <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1928:	0e 94 06 11 	call	0x220c	; 0x220c <get_superfood_position>
    192c:	8c 17       	cp	r24, r28
    192e:	a1 f2       	breq	.-88     	; 0x18d8 <add_new_rat_position+0x42>
    1930:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    1934:	8c 17       	cp	r24, r28
    1936:	81 f2       	breq	.-96     	; 0x18d8 <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    1938:	c0 93 84 02 	sts	0x0284, r28	; 0x800284 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    193c:	8c 2f       	mov	r24, r28
    193e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1942:	c8 2f       	mov	r28, r24
    1944:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rat_position>
    1948:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    194c:	4c e3       	ldi	r20, 0x3C	; 60
    194e:	6c 2f       	mov	r22, r28
    1950:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
}
    1954:	df 91       	pop	r29
    1956:	cf 91       	pop	r28
    1958:	1f 91       	pop	r17
    195a:	08 95       	ret

0000195c <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    195c:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    1960:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    1964:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	50 e0       	ldi	r21, 0x00	; 0
    196c:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__udivmodsi4>
    1970:	21 e0       	ldi	r18, 0x01	; 1
    1972:	67 2b       	or	r22, r23
    1974:	68 2b       	or	r22, r24
    1976:	69 2b       	or	r22, r25
    1978:	09 f0       	breq	.+2      	; 0x197c <is_time_to_move_rat+0x20>
    197a:	20 e0       	ldi	r18, 0x00	; 0
}
    197c:	82 2f       	mov	r24, r18
    197e:	08 95       	ret

00001980 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    1980:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <score>
    1984:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <score+0x1>
    1988:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <score+0x2>
    198c:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <score+0x3>
    1990:	08 95       	ret

00001992 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1992:	40 91 2b 02 	lds	r20, 0x022B	; 0x80022b <score>
    1996:	50 91 2c 02 	lds	r21, 0x022C	; 0x80022c <score+0x1>
    199a:	60 91 2d 02 	lds	r22, 0x022D	; 0x80022d <score+0x2>
    199e:	70 91 2e 02 	lds	r23, 0x022E	; 0x80022e <score+0x3>
    19a2:	48 0f       	add	r20, r24
    19a4:	59 1f       	adc	r21, r25
    19a6:	61 1d       	adc	r22, r1
    19a8:	71 1d       	adc	r23, r1
    19aa:	40 93 2b 02 	sts	0x022B, r20	; 0x80022b <score>
    19ae:	50 93 2c 02 	sts	0x022C, r21	; 0x80022c <score+0x1>
    19b2:	60 93 2d 02 	sts	0x022D, r22	; 0x80022d <score+0x2>
    19b6:	70 93 2e 02 	sts	0x022E, r23	; 0x80022e <score+0x3>
    19ba:	08 95       	ret

000019bc <get_score>:
}

uint32_t get_score(void) {
	return score;
    19bc:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <score>
    19c0:	70 91 2c 02 	lds	r23, 0x022C	; 0x80022c <score+0x1>
    19c4:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <score+0x2>
    19c8:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <score+0x3>
}
    19cc:	08 95       	ret

000019ce <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    19ce:	60 93 2b 02 	sts	0x022B, r22	; 0x80022b <score>
    19d2:	70 93 2c 02 	sts	0x022C, r23	; 0x80022c <score+0x1>
    19d6:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <score+0x2>
    19da:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <score+0x3>
    19de:	08 95       	ret

000019e0 <score_length>:
}

uint8_t score_length(void){
	return (score == 0 ? 1 : (int)(log10(score)+1)); 
    19e0:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <score>
    19e4:	70 91 2c 02 	lds	r23, 0x022C	; 0x80022c <score+0x1>
    19e8:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <score+0x2>
    19ec:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <score+0x3>
    19f0:	61 15       	cp	r22, r1
    19f2:	71 05       	cpc	r23, r1
    19f4:	81 05       	cpc	r24, r1
    19f6:	91 05       	cpc	r25, r1
    19f8:	71 f0       	breq	.+28     	; 0x1a16 <score_length+0x36>
    19fa:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatunsisf>
    19fe:	0e 94 39 14 	call	0x2872	; 0x2872 <log10>
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e8       	ldi	r20, 0x80	; 128
    1a08:	5f e3       	ldi	r21, 0x3F	; 63
    1a0a:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    1a0e:	0e 94 75 13 	call	0x26ea	; 0x26ea <__fixsfsi>
    1a12:	86 2f       	mov	r24, r22
    1a14:	08 95       	ret
    1a16:	81 e0       	ldi	r24, 0x01	; 1
}
    1a18:	08 95       	ret

00001a1a <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1a1a:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    1a1e:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <display_string+0x1>
    1a22:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <display_string>
	next_col_ptr = 0;
    1a26:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <next_col_ptr+0x1>
    1a2a:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <next_col_ptr>
	next_char_to_display = 0;
    1a2e:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <next_char_to_display+0x1>
    1a32:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <next_char_to_display>
    1a36:	08 95       	ret

00001a38 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
    1a3c:	cf 93       	push	r28
    1a3e:	df 93       	push	r29
    1a40:	cd b7       	in	r28, 0x3d	; 61
    1a42:	de b7       	in	r29, 0x3e	; 62
    1a44:	28 97       	sbiw	r28, 0x08	; 8
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1a50:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <next_col_ptr>
    1a54:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <next_col_ptr+0x1>
    1a58:	30 97       	sbiw	r30, 0x00	; 0
    1a5a:	81 f0       	breq	.+32     	; 0x1a7c <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1a5c:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1a5e:	10 ff       	sbrs	r17, 0
    1a60:	06 c0       	rjmp	.+12     	; 0x1a6e <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1a62:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <next_col_ptr+0x1>
    1a66:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a6a:	00 e0       	ldi	r16, 0x00	; 0
    1a6c:	6b c0       	rjmp	.+214    	; 0x1b44 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1a6e:	31 96       	adiw	r30, 0x01	; 1
    1a70:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <next_col_ptr+0x1>
    1a74:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a78:	00 e0       	ldi	r16, 0x00	; 0
    1a7a:	64 c0       	rjmp	.+200    	; 0x1b44 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1a7c:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <next_char_to_display>
    1a80:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <next_char_to_display+0x1>
    1a84:	30 97       	sbiw	r30, 0x00	; 0
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <scroll_display+0x52>
    1a88:	49 c0       	rjmp	.+146    	; 0x1b1c <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1a8a:	cf 01       	movw	r24, r30
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <next_char_to_display+0x1>
    1a92:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <next_char_to_display>
    1a96:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1a98:	e1 11       	cpse	r30, r1
    1a9a:	0a c0       	rjmp	.+20     	; 0x1ab0 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1a9c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <next_char_to_display+0x1>
    1aa0:	10 92 30 02 	sts	0x0230, r1	; 0x800230 <next_char_to_display>
			shift_countdown = 16;
    1aa4:	80 e1       	ldi	r24, 0x10	; 16
    1aa6:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1aaa:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1aac:	10 e0       	ldi	r17, 0x00	; 0
    1aae:	4a c0       	rjmp	.+148    	; 0x1b44 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1ab0:	8f e9       	ldi	r24, 0x9F	; 159
    1ab2:	8e 0f       	add	r24, r30
    1ab4:	8a 31       	cpi	r24, 0x1A	; 26
    1ab6:	70 f4       	brcc	.+28     	; 0x1ad4 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	ee 0f       	add	r30, r30
    1abc:	ff 1f       	adc	r31, r31
    1abe:	ee 59       	subi	r30, 0x9E	; 158
    1ac0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac2:	85 91       	lpm	r24, Z+
    1ac4:	94 91       	lpm	r25, Z
    1ac6:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <next_col_ptr+0x1>
    1aca:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ace:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ad0:	10 e0       	ldi	r17, 0x00	; 0
    1ad2:	38 c0       	rjmp	.+112    	; 0x1b44 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1ad4:	8f eb       	ldi	r24, 0xBF	; 191
    1ad6:	8e 0f       	add	r24, r30
    1ad8:	8a 31       	cpi	r24, 0x1A	; 26
    1ada:	70 f4       	brcc	.+28     	; 0x1af8 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	ee 0f       	add	r30, r30
    1ae0:	ff 1f       	adc	r31, r31
    1ae2:	ee 55       	subi	r30, 0x5E	; 94
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	85 91       	lpm	r24, Z+
    1ae8:	94 91       	lpm	r25, Z
    1aea:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <next_col_ptr+0x1>
    1aee:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1af2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1af4:	10 e0       	ldi	r17, 0x00	; 0
    1af6:	26 c0       	rjmp	.+76     	; 0x1b44 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1af8:	80 ed       	ldi	r24, 0xD0	; 208
    1afa:	8e 0f       	add	r24, r30
    1afc:	8a 30       	cpi	r24, 0x0A	; 10
    1afe:	00 f5       	brcc	.+64     	; 0x1b40 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	ee 0f       	add	r30, r30
    1b04:	ff 1f       	adc	r31, r31
    1b06:	e0 55       	subi	r30, 0x50	; 80
    1b08:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0a:	85 91       	lpm	r24, Z+
    1b0c:	94 91       	lpm	r25, Z
    1b0e:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <next_col_ptr+0x1>
    1b12:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b16:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b18:	10 e0       	ldi	r17, 0x00	; 0
    1b1a:	14 c0       	rjmp	.+40     	; 0x1b44 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1b1c:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <display_string>
    1b20:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b24:	01 e0       	ldi	r16, 0x01	; 1
    1b26:	00 97       	sbiw	r24, 0x00	; 0
    1b28:	09 f0       	breq	.+2      	; 0x1b2c <scroll_display+0xf4>
    1b2a:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1b2c:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <next_char_to_display+0x1>
    1b30:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <next_char_to_display>
		display_string = 0;
    1b34:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <display_string+0x1>
    1b38:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b40:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b42:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1b44:	0e 94 4b 09 	call	0x1296	; 0x1296 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1b48:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	38 96       	adiw	r30, 0x08	; 8
    1b50:	ce 01       	movw	r24, r28
    1b52:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1b54:	11 23       	and	r17, r17
    1b56:	14 f4       	brge	.+4      	; 0x1b5c <scroll_display+0x124>
			column_colour_data[i] = colour;
    1b58:	20 83       	st	Z, r18
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1b5c:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1b5e:	11 0f       	add	r17, r17
    1b60:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1b62:	e8 17       	cp	r30, r24
    1b64:	f9 07       	cpc	r31, r25
    1b66:	b1 f7       	brne	.-20     	; 0x1b54 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1b6a:	be 01       	movw	r22, r28
    1b6c:	6f 5f       	subi	r22, 0xFF	; 255
    1b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b70:	8f e0       	ldi	r24, 0x0F	; 15
    1b72:	0e 94 2e 09 	call	0x125c	; 0x125c <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1b76:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <shift_countdown.1854>
    1b7a:	88 23       	and	r24, r24
    1b7c:	89 f0       	breq	.+34     	; 0x1ba0 <scroll_display+0x168>
		shift_countdown--;
    1b7e:	81 50       	subi	r24, 0x01	; 1
    1b80:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1b84:	00 23       	and	r16, r16
    1b86:	11 f0       	breq	.+4      	; 0x1b8c <scroll_display+0x154>
    1b88:	88 23       	and	r24, r24
    1b8a:	11 f0       	breq	.+4      	; 0x1b90 <scroll_display+0x158>
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	03 c0       	rjmp	.+6      	; 0x1b96 <scroll_display+0x15e>
    1b90:	91 e0       	ldi	r25, 0x01	; 1
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <scroll_display+0x15e>
    1b94:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	99 23       	and	r25, r25
    1b9a:	29 f0       	breq	.+10     	; 0x1ba6 <scroll_display+0x16e>
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1ba0:	00 23       	and	r16, r16
    1ba2:	a1 f3       	breq	.-24     	; 0x1b8c <scroll_display+0x154>
    1ba4:	f7 cf       	rjmp	.-18     	; 0x1b94 <scroll_display+0x15c>
	return !finished;
}
    1ba6:	28 96       	adiw	r28, 0x08	; 8
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	08 95       	ret

00001bbc <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1bbc:	cf 93       	push	r28
    1bbe:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1bc0:	8a 30       	cpi	r24, 0x0A	; 10
    1bc2:	19 f4       	brne	.+6      	; 0x1bca <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1bc4:	8d e0       	ldi	r24, 0x0D	; 13
    1bc6:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1bca:	9f b7       	in	r25, 0x3f	; 63
    1bcc:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1bd0:	99 23       	and	r25, r25
    1bd2:	29 f1       	breq	.+74     	; 0x1c1e <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1bd4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1bd8:	8f 3f       	cpi	r24, 0xFF	; 255
    1bda:	d1 f3       	breq	.-12     	; 0x1bd0 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1bdc:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1bde:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <out_insert_pos>
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	8e 0f       	add	r24, r30
    1be6:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <out_insert_pos>
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	e9 57       	subi	r30, 0x79	; 121
    1bee:	fd 4f       	sbci	r31, 0xFD	; 253
    1bf0:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1bf2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1bf6:	8f 5f       	subi	r24, 0xFF	; 255
    1bf8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1bfc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <out_insert_pos>
    1c00:	8f 3f       	cpi	r24, 0xFF	; 255
    1c02:	11 f4       	brne	.+4      	; 0x1c08 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1c04:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1c08:	e1 ec       	ldi	r30, 0xC1	; 193
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	80 62       	ori	r24, 0x20	; 32
    1c10:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1c12:	99 23       	and	r25, r25
    1c14:	39 f0       	breq	.+14     	; 0x1c24 <uart_put_char+0x68>
		sei();
    1c16:	78 94       	sei
	}
	return 0;
    1c18:	80 e0       	ldi	r24, 0x00	; 0
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	05 c0       	rjmp	.+10     	; 0x1c28 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	02 c0       	rjmp	.+4      	; 0x1c28 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	90 e0       	ldi	r25, 0x00	; 0
}
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1c2c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1c30:	88 23       	and	r24, r24
    1c32:	e1 f3       	breq	.-8      	; 0x1c2c <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1c34:	2f b7       	in	r18, 0x3f	; 63
    1c36:	20 78       	andi	r18, 0x80	; 128
	cli();
    1c38:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1c3a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <input_insert_pos>
    1c3e:	30 91 98 03 	lds	r19, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	83 1b       	sub	r24, r19
    1c46:	91 09       	sbc	r25, r1
    1c48:	5a f4       	brpl	.+22     	; 0x1c60 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c4a:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <input_insert_pos>
    1c4e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	e8 1b       	sub	r30, r24
    1c56:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c58:	e9 56       	subi	r30, 0x69	; 105
    1c5a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c5c:	80 81       	ld	r24, Z
    1c5e:	0a c0       	rjmp	.+20     	; 0x1c74 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1c60:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <input_insert_pos>
    1c64:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	e8 1b       	sub	r30, r24
    1c6c:	f1 09       	sbc	r31, r1
    1c6e:	e9 57       	subi	r30, 0x79	; 121
    1c70:	fc 4f       	sbci	r31, 0xFC	; 252
    1c72:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1c74:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1c78:	91 50       	subi	r25, 0x01	; 1
    1c7a:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1c7e:	22 23       	and	r18, r18
    1c80:	09 f0       	breq	.+2      	; 0x1c84 <uart_get_char+0x58>
		sei();
    1c82:	78 94       	sei
	}	
	return c;
}
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	08 95       	ret

00001c88 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1c88:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1c8c:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1c90:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1c94:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <bytes_in_input_buffer>
	input_overrun = 0;
    1c98:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1c9c:	40 93 36 02 	sts	0x0236, r20	; 0x800236 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1ca0:	dc 01       	movw	r26, r24
    1ca2:	cb 01       	movw	r24, r22
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	aa 1f       	adc	r26, r26
    1caa:	bb 1f       	adc	r27, r27
    1cac:	88 0f       	add	r24, r24
    1cae:	99 1f       	adc	r25, r25
    1cb0:	aa 1f       	adc	r26, r26
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	9c 01       	movw	r18, r24
    1cb6:	ad 01       	movw	r20, r26
    1cb8:	22 0f       	add	r18, r18
    1cba:	33 1f       	adc	r19, r19
    1cbc:	44 1f       	adc	r20, r20
    1cbe:	55 1f       	adc	r21, r21
    1cc0:	60 e0       	ldi	r22, 0x00	; 0
    1cc2:	72 e1       	ldi	r23, 0x12	; 18
    1cc4:	8a e7       	ldi	r24, 0x7A	; 122
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__divmodsi4>
    1ccc:	ba 01       	movw	r22, r20
    1cce:	a9 01       	movw	r20, r18
    1cd0:	4f 5f       	subi	r20, 0xFF	; 255
    1cd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd4:	6f 4f       	sbci	r22, 0xFF	; 255
    1cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    1cd8:	db 01       	movw	r26, r22
    1cda:	ca 01       	movw	r24, r20
    1cdc:	1a f4       	brpl	.+6      	; 0x1ce4 <init_serial_stdio+0x5c>
    1cde:	01 96       	adiw	r24, 0x01	; 1
    1ce0:	a1 1d       	adc	r26, r1
    1ce2:	b1 1d       	adc	r27, r1
    1ce4:	b5 95       	asr	r27
    1ce6:	a7 95       	ror	r26
    1ce8:	97 95       	ror	r25
    1cea:	87 95       	ror	r24
    1cec:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1cee:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1cf2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1cf6:	e1 ec       	ldi	r30, 0xC1	; 193
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	88 e1       	ldi	r24, 0x18	; 24
    1cfc:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1cfe:	80 81       	ld	r24, Z
    1d00:	80 68       	ori	r24, 0x80	; 128
    1d02:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1d04:	eb e9       	ldi	r30, 0x9B	; 155
    1d06:	f3 e0       	ldi	r31, 0x03	; 3
    1d08:	8f e0       	ldi	r24, 0x0F	; 15
    1d0a:	91 e0       	ldi	r25, 0x01	; 1
    1d0c:	93 83       	std	Z+3, r25	; 0x03
    1d0e:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
    1d14:	08 95       	ret

00001d16 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1d16:	90 91 98 03 	lds	r25, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	91 11       	cpse	r25, r1
    1d1e:	01 c0       	rjmp	.+2      	; 0x1d22 <serial_input_available+0xc>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
}
    1d22:	08 95       	ret

00001d24 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1d24:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1d28:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <bytes_in_input_buffer>
    1d2c:	08 95       	ret

00001d2e <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1d2e:	1f 92       	push	r1
    1d30:	0f 92       	push	r0
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	0f 92       	push	r0
    1d36:	11 24       	eor	r1, r1
    1d38:	2f 93       	push	r18
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	ef 93       	push	r30
    1d40:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1d42:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1d46:	88 23       	and	r24, r24
    1d48:	29 f1       	breq	.+74     	; 0x1d94 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1d4a:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <out_insert_pos>
    1d4e:	20 91 86 02 	lds	r18, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	82 1b       	sub	r24, r18
    1d56:	91 09       	sbc	r25, r1
    1d58:	5a f4       	brpl	.+22     	; 0x1d70 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d5a:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <out_insert_pos>
    1d5e:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	e8 1b       	sub	r30, r24
    1d66:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d68:	ea 57       	subi	r30, 0x7A	; 122
    1d6a:	fc 4f       	sbci	r31, 0xFC	; 252
    1d6c:	90 81       	ld	r25, Z
    1d6e:	0a c0       	rjmp	.+20     	; 0x1d84 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1d70:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <out_insert_pos>
    1d74:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	e8 1b       	sub	r30, r24
    1d7c:	f1 09       	sbc	r31, r1
    1d7e:	e9 57       	subi	r30, 0x79	; 121
    1d80:	fd 4f       	sbci	r31, 0xFD	; 253
    1d82:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1d84:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1d88:	81 50       	subi	r24, 0x01	; 1
    1d8a:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1d8e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1d92:	05 c0       	rjmp	.+10     	; 0x1d9e <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1d94:	e1 ec       	ldi	r30, 0xC1	; 193
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8f 7d       	andi	r24, 0xDF	; 223
    1d9c:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	9f 91       	pop	r25
    1da4:	8f 91       	pop	r24
    1da6:	2f 91       	pop	r18
    1da8:	0f 90       	pop	r0
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	0f 90       	pop	r0
    1dae:	1f 90       	pop	r1
    1db0:	18 95       	reti

00001db2 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1db2:	1f 92       	push	r1
    1db4:	0f 92       	push	r0
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	0f 92       	push	r0
    1dba:	11 24       	eor	r1, r1
    1dbc:	2f 93       	push	r18
    1dbe:	3f 93       	push	r19
    1dc0:	4f 93       	push	r20
    1dc2:	5f 93       	push	r21
    1dc4:	6f 93       	push	r22
    1dc6:	7f 93       	push	r23
    1dc8:	8f 93       	push	r24
    1dca:	9f 93       	push	r25
    1dcc:	af 93       	push	r26
    1dce:	bf 93       	push	r27
    1dd0:	cf 93       	push	r28
    1dd2:	ef 93       	push	r30
    1dd4:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1dd6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1dda:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <do_echo>
    1dde:	88 23       	and	r24, r24
    1de0:	49 f0       	breq	.+18     	; 0x1df4 <__vector_20+0x42>
    1de2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <bytes_in_out_buffer>
    1de6:	8f 3f       	cpi	r24, 0xFF	; 255
    1de8:	29 f0       	breq	.+10     	; 0x1df4 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1dea:	60 e0       	ldi	r22, 0x00	; 0
    1dec:	70 e0       	ldi	r23, 0x00	; 0
    1dee:	8c 2f       	mov	r24, r28
    1df0:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1df4:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1df8:	80 31       	cpi	r24, 0x10	; 16
    1dfa:	20 f0       	brcs	.+8      	; 0x1e04 <__vector_20+0x52>
		input_overrun = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <input_overrun>
    1e02:	18 c0       	rjmp	.+48     	; 0x1e34 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1e04:	cd 30       	cpi	r28, 0x0D	; 13
    1e06:	09 f4       	brne	.+2      	; 0x1e0a <__vector_20+0x58>
			c = '\n';
    1e08:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1e0a:	e0 91 86 03 	lds	r30, 0x0386	; 0x800386 <input_insert_pos>
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	8e 0f       	add	r24, r30
    1e12:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <input_insert_pos>
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	e9 57       	subi	r30, 0x79	; 121
    1e1a:	fc 4f       	sbci	r31, 0xFC	; 252
    1e1c:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1e1e:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <bytes_in_input_buffer>
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1e28:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <input_insert_pos>
    1e2c:	80 31       	cpi	r24, 0x10	; 16
    1e2e:	11 f4       	brne	.+4      	; 0x1e34 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1e30:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <input_insert_pos>
		}
	}
}
    1e34:	ff 91       	pop	r31
    1e36:	ef 91       	pop	r30
    1e38:	cf 91       	pop	r28
    1e3a:	bf 91       	pop	r27
    1e3c:	af 91       	pop	r26
    1e3e:	9f 91       	pop	r25
    1e40:	8f 91       	pop	r24
    1e42:	7f 91       	pop	r23
    1e44:	6f 91       	pop	r22
    1e46:	5f 91       	pop	r21
    1e48:	4f 91       	pop	r20
    1e4a:	3f 91       	pop	r19
    1e4c:	2f 91       	pop	r18
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	0f 90       	pop	r0
    1e54:	1f 90       	pop	r1
    1e56:	18 95       	reti

00001e58 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1e58:	0f 93       	push	r16
    1e5a:	1f 93       	push	r17
    1e5c:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1e5e:	82 e0       	ldi	r24, 0x02	; 2
    1e60:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <snakeLength>
	snakeTailIndex = 0;
    1e64:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <snakeTailIndex>
	snakeHeadIndex = 1;
    1e68:	c1 e0       	ldi	r28, 0x01	; 1
    1e6a:	c0 93 3a 02 	sts	0x023A, r28	; 0x80023a <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1e6e:	61 e0       	ldi	r22, 0x01	; 1
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    1e76:	0c e3       	ldi	r16, 0x3C	; 60
    1e78:	12 e0       	ldi	r17, 0x02	; 2
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1e7e:	61 e0       	ldi	r22, 0x01	; 1
    1e80:	82 e0       	ldi	r24, 0x02	; 2
    1e82:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    1e86:	f8 01       	movw	r30, r16
    1e88:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1e8a:	c0 93 38 02 	sts	0x0238, r28	; 0x800238 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1e8e:	c0 93 37 02 	sts	0x0237, r28	; 0x800237 <nextSnakeDirn>
}
    1e92:	cf 91       	pop	r28
    1e94:	1f 91       	pop	r17
    1e96:	0f 91       	pop	r16
    1e98:	08 95       	ret

00001e9a <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1e9a:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <snakeHeadIndex>
    1e9e:	0e 2e       	mov	r0, r30
    1ea0:	00 0c       	add	r0, r0
    1ea2:	ff 0b       	sbc	r31, r31
    1ea4:	e4 5c       	subi	r30, 0xC4	; 196
    1ea6:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ea8:	80 81       	ld	r24, Z
    1eaa:	08 95       	ret

00001eac <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1eac:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <curSnakeDirn>
	nextSnakeDirn = dirn;
    1eb0:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nextSnakeDirn>
    1eb4:	08 95       	ret

00001eb6 <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1eb6:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <snakeTailIndex>
    1eba:	0e 2e       	mov	r0, r30
    1ebc:	00 0c       	add	r0, r0
    1ebe:	ff 0b       	sbc	r31, r31
    1ec0:	e4 5c       	subi	r30, 0xC4	; 196
    1ec2:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ec4:	80 81       	ld	r24, Z
    1ec6:	08 95       	ret

00001ec8 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1ec8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeLength>
    1ecc:	08 95       	ret

00001ece <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1ece:	e8 2f       	mov	r30, r24
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	e4 5c       	subi	r30, 0xC4	; 196
    1ed4:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ed6:	80 81       	ld	r24, Z
    1ed8:	08 95       	ret

00001eda <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1eda:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <snakeLength>
    1ede:	08 95       	ret

00001ee0 <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1ee0:	e6 2f       	mov	r30, r22
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	e4 5c       	subi	r30, 0xC4	; 196
    1ee6:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee8:	80 83       	st	Z, r24
    1eea:	08 95       	ret

00001eec <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1eec:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <snakeHeadIndex>
    1ef0:	08 95       	ret

00001ef2 <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1ef2:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <snakeTailIndex>
    1ef6:	08 95       	ret

00001ef8 <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1ef8:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <snakeHeadIndex>
    1efc:	08 95       	ret

00001efe <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1efe:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <snakeTailIndex>
    1f02:	08 95       	ret

00001f04 <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1f04:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <curSnakeDirn>
    1f08:	08 95       	ret

00001f0a <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1f0a:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <snakeTailIndex>
    1f0e:	e9 2f       	mov	r30, r25
    1f10:	09 2e       	mov	r0, r25
    1f12:	00 0c       	add	r0, r0
    1f14:	ff 0b       	sbc	r31, r31
    1f16:	e4 5c       	subi	r30, 0xC4	; 196
    1f18:	fd 4f       	sbci	r31, 0xFD	; 253
    1f1a:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1f1c:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1f1e:	91 32       	cpi	r25, 0x21	; 33
    1f20:	19 f0       	breq	.+6      	; 0x1f28 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1f22:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <snakeTailIndex>
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1f28:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <snakeTailIndex>
	}
	snakeLength--;
    1f2c:	90 91 3b 02 	lds	r25, 0x023B	; 0x80023b <snakeLength>
    1f30:	91 50       	subi	r25, 0x01	; 1
    1f32:	90 93 3b 02 	sts	0x023B, r25	; 0x80023b <snakeLength>
	
	return prev_tail_position;
}
    1f36:	08 95       	ret

00001f38 <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1f38:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <curSnakeDirn>
    1f3c:	91 30       	cpi	r25, 0x01	; 1
    1f3e:	a9 f0       	breq	.+42     	; 0x1f6a <set_snake_dirn+0x32>
    1f40:	28 f0       	brcs	.+10     	; 0x1f4c <set_snake_dirn+0x14>
    1f42:	92 30       	cpi	r25, 0x02	; 2
    1f44:	41 f0       	breq	.+16     	; 0x1f56 <set_snake_dirn+0x1e>
    1f46:	93 30       	cpi	r25, 0x03	; 3
    1f48:	59 f0       	breq	.+22     	; 0x1f60 <set_snake_dirn+0x28>
    1f4a:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1f4c:	82 30       	cpi	r24, 0x02	; 2
    1f4e:	89 f0       	breq	.+34     	; 0x1f72 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f50:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nextSnakeDirn>
    1f54:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1f56:	88 23       	and	r24, r24
    1f58:	61 f0       	breq	.+24     	; 0x1f72 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f5a:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nextSnakeDirn>
    1f5e:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	39 f0       	breq	.+14     	; 0x1f72 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f64:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nextSnakeDirn>
    1f68:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1f6a:	83 30       	cpi	r24, 0x03	; 3
    1f6c:	11 f0       	breq	.+4      	; 0x1f72 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f6e:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <nextSnakeDirn>
    1f72:	08 95       	ret

00001f74 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1f74:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1f78:	30 91 3a 02 	lds	r19, 0x023A	; 0x80023a <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1f7e:	0d c0       	rjmp	.+26     	; 0x1f9a <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1f80:	e9 2f       	mov	r30, r25
    1f82:	09 2e       	mov	r0, r25
    1f84:	00 0c       	add	r0, r0
    1f86:	ff 0b       	sbc	r31, r31
    1f88:	e4 5c       	subi	r30, 0xC4	; 196
    1f8a:	fd 4f       	sbci	r31, 0xFD	; 253
    1f8c:	20 81       	ld	r18, Z
    1f8e:	28 17       	cp	r18, r24
    1f90:	89 f0       	breq	.+34     	; 0x1fb4 <is_snake_at+0x40>
    1f92:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1f94:	91 32       	cpi	r25, 0x21	; 33
    1f96:	0c f0       	brlt	.+2      	; 0x1f9a <is_snake_at+0x26>
			index = 0;
    1f98:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1f9a:	93 13       	cpse	r25, r19
    1f9c:	f1 cf       	rjmp	.-30     	; 0x1f80 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1f9e:	e3 2f       	mov	r30, r19
    1fa0:	33 0f       	add	r19, r19
    1fa2:	ff 0b       	sbc	r31, r31
    1fa4:	e4 5c       	subi	r30, 0xC4	; 196
    1fa6:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1fa8:	91 e0       	ldi	r25, 0x01	; 1
    1faa:	20 81       	ld	r18, Z
    1fac:	28 17       	cp	r18, r24
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <is_snake_at+0x42>
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <is_snake_at+0x42>
    1fb4:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1fb6:	89 2f       	mov	r24, r25
    1fb8:	08 95       	ret

00001fba <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1fbe:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeLength>
    1fc2:	81 32       	cpi	r24, 0x21	; 33
    1fc4:	08 f0       	brcs	.+2      	; 0x1fc8 <advance_snake_head+0xe>
    1fc6:	96 c0       	rjmp	.+300    	; 0x20f4 <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1fc8:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <snakeHeadIndex>
    1fcc:	0e 2e       	mov	r0, r30
    1fce:	00 0c       	add	r0, r0
    1fd0:	ff 0b       	sbc	r31, r31
    1fd2:	e4 5c       	subi	r30, 0xC4	; 196
    1fd4:	fd 4f       	sbci	r31, 0xFD	; 253
    1fd6:	80 81       	ld	r24, Z
    1fd8:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    1fdc:	d8 2f       	mov	r29, r24
    1fde:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1fe0:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <snakeHeadIndex>
    1fe4:	0e 2e       	mov	r0, r30
    1fe6:	00 0c       	add	r0, r0
    1fe8:	ff 0b       	sbc	r31, r31
    1fea:	e4 5c       	subi	r30, 0xC4	; 196
    1fec:	fd 4f       	sbci	r31, 0xFD	; 253
    1fee:	80 81       	ld	r24, Z
    1ff0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    1ff4:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1ff6:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <nextSnakeDirn>
    1ffa:	91 30       	cpi	r25, 0x01	; 1
    1ffc:	59 f0       	breq	.+22     	; 0x2014 <advance_snake_head+0x5a>
    1ffe:	28 f0       	brcs	.+10     	; 0x200a <advance_snake_head+0x50>
    2000:	92 30       	cpi	r25, 0x02	; 2
    2002:	69 f0       	breq	.+26     	; 0x201e <advance_snake_head+0x64>
    2004:	93 30       	cpi	r25, 0x03	; 3
    2006:	81 f0       	breq	.+32     	; 0x2028 <advance_snake_head+0x6e>
    2008:	1b c0       	rjmp	.+54     	; 0x2040 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    200a:	87 30       	cpi	r24, 0x07	; 7
    200c:	91 f0       	breq	.+36     	; 0x2032 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    200e:	61 e0       	ldi	r22, 0x01	; 1
    2010:	68 0f       	add	r22, r24
    2012:	16 c0       	rjmp	.+44     	; 0x2040 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    2014:	df 30       	cpi	r29, 0x0F	; 15
    2016:	79 f0       	breq	.+30     	; 0x2036 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    2018:	c1 e0       	ldi	r28, 0x01	; 1
    201a:	cd 0f       	add	r28, r29
    201c:	11 c0       	rjmp	.+34     	; 0x2040 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    201e:	88 23       	and	r24, r24
    2020:	61 f0       	breq	.+24     	; 0x203a <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    2022:	6f ef       	ldi	r22, 0xFF	; 255
    2024:	68 0f       	add	r22, r24
    2026:	0c c0       	rjmp	.+24     	; 0x2040 <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    2028:	dd 23       	and	r29, r29
    202a:	49 f0       	breq	.+18     	; 0x203e <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    202c:	cf ef       	ldi	r28, 0xFF	; 255
    202e:	cd 0f       	add	r28, r29
    2030:	07 c0       	rjmp	.+14     	; 0x2040 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	05 c0       	rjmp	.+10     	; 0x2040 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    2036:	c0 e0       	ldi	r28, 0x00	; 0
    2038:	03 c0       	rjmp	.+6      	; 0x2040 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    203a:	67 e0       	ldi	r22, 0x07	; 7
    203c:	01 c0       	rjmp	.+2      	; 0x2040 <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    203e:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    2040:	8c 2f       	mov	r24, r28
    2042:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    2046:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    2048:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <nextSnakeDirn>
    204c:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <curSnakeDirn>
    2050:	98 17       	cp	r25, r24
    2052:	41 f0       	breq	.+16     	; 0x2064 <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    2054:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    2058:	0e 94 cf 01 	call	0x39e	; 0x39e <sound_effects_on_mode>
    205c:	89 2b       	or	r24, r25
    205e:	11 f0       	breq	.+4      	; 0x2064 <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    2060:	0e 94 60 02 	call	0x4c0	; 0x4c0 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    2064:	8c 2f       	mov	r24, r28
    2066:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <is_snake_at>
    206a:	88 23       	and	r24, r24
    206c:	51 f0       	breq	.+20     	; 0x2082 <advance_snake_head+0xc8>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    206e:	e0 91 39 02 	lds	r30, 0x0239	; 0x800239 <snakeTailIndex>
    2072:	0e 2e       	mov	r0, r30
    2074:	00 0c       	add	r0, r0
    2076:	ff 0b       	sbc	r31, r31
    2078:	e4 5c       	subi	r30, 0xC4	; 196
    207a:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    207c:	80 81       	ld	r24, Z
    207e:	c8 13       	cpse	r28, r24
    2080:	3b c0       	rjmp	.+118    	; 0x20f8 <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    2082:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <snakeHeadIndex>
    2086:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    2088:	81 32       	cpi	r24, 0x21	; 33
    208a:	19 f0       	breq	.+6      	; 0x2092 <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    208c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <snakeHeadIndex>
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    2092:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    2096:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <snakeHeadIndex>
    209a:	0e 2e       	mov	r0, r30
    209c:	00 0c       	add	r0, r0
    209e:	ff 0b       	sbc	r31, r31
    20a0:	e4 5c       	subi	r30, 0xC4	; 196
    20a2:	fd 4f       	sbci	r31, 0xFD	; 253
    20a4:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    20a6:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeLength>
    20aa:	8f 5f       	subi	r24, 0xFF	; 255
    20ac:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    20b0:	8c 2f       	mov	r24, r28
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	0e 94 44 0c 	call	0x1888	; 0x1888 <is_rat_at>
    20b8:	89 2b       	or	r24, r25
    20ba:	31 f0       	breq	.+12     	; 0x20c8 <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20bc:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeLength>
    20c0:	81 32       	cpi	r24, 0x21	; 33
    20c2:	e0 f0       	brcs	.+56     	; 0x20fc <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    20c4:	87 e0       	ldi	r24, 0x07	; 7
    20c6:	21 c0       	rjmp	.+66     	; 0x210a <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    20c8:	8c 2f       	mov	r24, r28
    20ca:	0e 94 09 11 	call	0x2212	; 0x2212 <is_superfood_at>
    20ce:	88 23       	and	r24, r24
    20d0:	31 f0       	breq	.+12     	; 0x20de <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20d2:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeLength>
    20d6:	81 32       	cpi	r24, 0x21	; 33
    20d8:	98 f0       	brcs	.+38     	; 0x2100 <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    20da:	85 e0       	ldi	r24, 0x05	; 5
    20dc:	16 c0       	rjmp	.+44     	; 0x210a <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    20de:	8c 2f       	mov	r24, r28
    20e0:	0e 94 ac 07 	call	0xf58	; 0xf58 <is_food_at>
    20e4:	88 23       	and	r24, r24
    20e6:	71 f0       	breq	.+28     	; 0x2104 <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20e8:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeLength>
    20ec:	81 32       	cpi	r24, 0x21	; 33
    20ee:	60 f0       	brcs	.+24     	; 0x2108 <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    20f4:	8d ef       	ldi	r24, 0xFD	; 253
    20f6:	09 c0       	rjmp	.+18     	; 0x210a <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    20f8:	8e ef       	ldi	r24, 0xFE	; 254
    20fa:	07 c0       	rjmp	.+14     	; 0x210a <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    20fc:	86 e0       	ldi	r24, 0x06	; 6
    20fe:	05 c0       	rjmp	.+10     	; 0x210a <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    2100:	84 e0       	ldi	r24, 0x04	; 4
    2102:	03 c0       	rjmp	.+6      	; 0x210a <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	01 c0       	rjmp	.+2      	; 0x210a <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    2108:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	08 95       	ret

00002110 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2110:	94 b1       	in	r25, 0x04	; 4
    2112:	90 6b       	ori	r25, 0xB0	; 176
    2114:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    2116:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    2118:	90 e5       	ldi	r25, 0x50	; 80
    211a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    211c:	88 30       	cpi	r24, 0x08	; 8
    211e:	21 f0       	breq	.+8      	; 0x2128 <spi_setup_master+0x18>
    2120:	80 32       	cpi	r24, 0x20	; 32
    2122:	11 f0       	breq	.+4      	; 0x2128 <spi_setup_master+0x18>
    2124:	82 30       	cpi	r24, 0x02	; 2
    2126:	19 f4       	brne	.+6      	; 0x212e <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    2128:	91 e0       	ldi	r25, 0x01	; 1
    212a:	9d bd       	out	0x2d, r25	; 45
			break;
    212c:	01 c0       	rjmp	.+2      	; 0x2130 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    212e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2130:	80 32       	cpi	r24, 0x20	; 32
    2132:	69 f0       	breq	.+26     	; 0x214e <spi_setup_master+0x3e>
    2134:	28 f4       	brcc	.+10     	; 0x2140 <spi_setup_master+0x30>
    2136:	88 30       	cpi	r24, 0x08	; 8
    2138:	71 f0       	breq	.+28     	; 0x2156 <spi_setup_master+0x46>
    213a:	80 31       	cpi	r24, 0x10	; 16
    213c:	61 f0       	breq	.+24     	; 0x2156 <spi_setup_master+0x46>
    213e:	0e c0       	rjmp	.+28     	; 0x215c <spi_setup_master+0x4c>
    2140:	80 34       	cpi	r24, 0x40	; 64
    2142:	29 f0       	breq	.+10     	; 0x214e <spi_setup_master+0x3e>
    2144:	80 38       	cpi	r24, 0x80	; 128
    2146:	51 f4       	brne	.+20     	; 0x215c <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    2148:	8c b5       	in	r24, 0x2c	; 44
    214a:	81 60       	ori	r24, 0x01	; 1
    214c:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    214e:	8c b5       	in	r24, 0x2c	; 44
    2150:	82 60       	ori	r24, 0x02	; 2
    2152:	8c bd       	out	0x2c, r24	; 44
			break;
    2154:	03 c0       	rjmp	.+6      	; 0x215c <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2156:	8c b5       	in	r24, 0x2c	; 44
    2158:	81 60       	ori	r24, 0x01	; 1
    215a:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    215c:	2c 98       	cbi	0x05, 4	; 5
    215e:	08 95       	ret

00002160 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    2160:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2162:	0d b4       	in	r0, 0x2d	; 45
    2164:	07 fe       	sbrs	r0, 7
    2166:	fd cf       	rjmp	.-6      	; 0x2162 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2168:	8e b5       	in	r24, 0x2e	; 46
    216a:	08 95       	ret

0000216c <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    216c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <superfood_position>
	superfood_on_board = 1;
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <superfood_on_board>
}
    2176:	08 95       	ret

00002178 <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    2178:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <superfood_on_board>
    217c:	08 95       	ret

0000217e <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    217e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    2182:	68 59       	subi	r22, 0x98	; 152
    2184:	7a 43       	sbci	r23, 0x3A	; 58
    2186:	81 09       	sbc	r24, r1
    2188:	91 09       	sbc	r25, r1
    218a:	20 e2       	ldi	r18, 0x20	; 32
    218c:	3e e4       	ldi	r19, 0x4E	; 78
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	50 e0       	ldi	r21, 0x00	; 0
    2192:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__udivmodsi4>
    2196:	67 2b       	or	r22, r23
    2198:	68 2b       	or	r22, r24
    219a:	69 2b       	or	r22, r25
    219c:	21 f4       	brne	.+8      	; 0x21a6 <time_to_add_superfood+0x28>
    219e:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	08 95       	ret
    21a6:	80 e0       	ldi	r24, 0x00	; 0
}
    21a8:	08 95       	ret

000021aa <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    21aa:	0e 94 64 12 	call	0x24c8	; 0x24c8 <get_clock_ticks>
    21ae:	20 e2       	ldi	r18, 0x20	; 32
    21b0:	3e e4       	ldi	r19, 0x4E	; 78
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__udivmodsi4>
    21ba:	21 e0       	ldi	r18, 0x01	; 1
    21bc:	67 2b       	or	r22, r23
    21be:	68 2b       	or	r22, r24
    21c0:	69 2b       	or	r22, r25
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <time_to_remove_superfood+0x1c>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
}
    21c6:	82 2f       	mov	r24, r18
    21c8:	08 95       	ret

000021ca <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    21ca:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    21cc:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <superfood_position>
    21d0:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    21d4:	c8 2f       	mov	r28, r24
    21d6:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <superfood_position>
    21da:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	6c 2f       	mov	r22, r28
    21e2:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    21e6:	60 e0       	ldi	r22, 0x00	; 0
    21e8:	80 e0       	ldi	r24, 0x00	; 0
    21ea:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    21ee:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <superfood_position>
	superfood_on_board = 0; 
    21f2:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <superfood_on_board>
}
    21f6:	cf 91       	pop	r28
    21f8:	08 95       	ret

000021fa <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    21fa:	60 e0       	ldi	r22, 0x00	; 0
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    2202:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <superfood_position>
	superfood_on_board = 0;
    2206:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <superfood_on_board>
    220a:	08 95       	ret

0000220c <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    220c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <superfood_position>
    2210:	08 95       	ret

00002212 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    2212:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <superfood_on_board>
    2216:	99 23       	and	r25, r25
    2218:	39 f0       	breq	.+14     	; 0x2228 <is_superfood_at+0x16>
    221a:	91 e0       	ldi	r25, 0x01	; 1
    221c:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <superfood_position>
    2220:	28 13       	cpse	r18, r24
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	89 2f       	mov	r24, r25
    2226:	08 95       	ret
    2228:	80 e0       	ldi	r24, 0x00	; 0
}
    222a:	08 95       	ret

0000222c <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    2232:	0e 94 e5 10 	call	0x21ca	; 0x21ca <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    2236:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
    223a:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    223c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
		test_position = position(x,y);
    2240:	bc 01       	movw	r22, r24
    2242:	67 70       	andi	r22, 0x07	; 7
    2244:	70 78       	andi	r23, 0x80	; 128
    2246:	77 23       	and	r23, r23
    2248:	34 f4       	brge	.+12     	; 0x2256 <add_superfood_to_board+0x2a>
    224a:	61 50       	subi	r22, 0x01	; 1
    224c:	71 09       	sbc	r23, r1
    224e:	68 6f       	ori	r22, 0xF8	; 248
    2250:	7f 6f       	ori	r23, 0xFF	; 255
    2252:	6f 5f       	subi	r22, 0xFF	; 255
    2254:	7f 4f       	sbci	r23, 0xFF	; 255
    2256:	ce 01       	movw	r24, r28
    2258:	8f 70       	andi	r24, 0x0F	; 15
    225a:	90 78       	andi	r25, 0x80	; 128
    225c:	99 23       	and	r25, r25
    225e:	24 f4       	brge	.+8      	; 0x2268 <add_superfood_to_board+0x3c>
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	80 6f       	ori	r24, 0xF0	; 240
    2264:	9f 6f       	ori	r25, 0xFF	; 255
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    226c:	c8 2f       	mov	r28, r24
    226e:	13 e6       	ldi	r17, 0x63	; 99
    2270:	1e c0       	rjmp	.+60     	; 0x22ae <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    2272:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
    2276:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    2278:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <rand>
		test_position = position(x,y);
    227c:	bc 01       	movw	r22, r24
    227e:	67 70       	andi	r22, 0x07	; 7
    2280:	70 78       	andi	r23, 0x80	; 128
    2282:	77 23       	and	r23, r23
    2284:	34 f4       	brge	.+12     	; 0x2292 <add_superfood_to_board+0x66>
    2286:	61 50       	subi	r22, 0x01	; 1
    2288:	71 09       	sbc	r23, r1
    228a:	68 6f       	ori	r22, 0xF8	; 248
    228c:	7f 6f       	ori	r23, 0xFF	; 255
    228e:	6f 5f       	subi	r22, 0xFF	; 255
    2290:	7f 4f       	sbci	r23, 0xFF	; 255
    2292:	ce 01       	movw	r24, r28
    2294:	8f 70       	andi	r24, 0x0F	; 15
    2296:	90 78       	andi	r25, 0x80	; 128
    2298:	99 23       	and	r25, r25
    229a:	24 f4       	brge	.+8      	; 0x22a4 <add_superfood_to_board+0x78>
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	80 6f       	ori	r24, 0xF0	; 240
    22a0:	9f 6f       	ori	r25, 0xFF	; 255
    22a2:	01 96       	adiw	r24, 0x01	; 1
    22a4:	0e 94 61 09 	call	0x12c2	; 0x12c2 <position>
    22a8:	c8 2f       	mov	r28, r24
    22aa:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22ac:	a1 f0       	breq	.+40     	; 0x22d6 <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    22ae:	8c 2f       	mov	r24, r28
    22b0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    22b4:	81 11       	cpse	r24, r1
    22b6:	dd cf       	rjmp	.-70     	; 0x2272 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    22b8:	8c 2f       	mov	r24, r28
    22ba:	0e 94 ac 07 	call	0xf58	; 0xf58 <is_food_at>
    22be:	81 11       	cpse	r24, r1
    22c0:	d8 cf       	rjmp	.-80     	; 0x2272 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22c2:	8c 2f       	mov	r24, r28
    22c4:	0e 94 09 11 	call	0x2212	; 0x2212 <is_superfood_at>
    22c8:	81 11       	cpse	r24, r1
    22ca:	d3 cf       	rjmp	.-90     	; 0x2272 <add_superfood_to_board+0x46>
    22cc:	8c 2f       	mov	r24, r28
    22ce:	0e 94 44 0c 	call	0x1888	; 0x1888 <is_rat_at>
    22d2:	81 11       	cpse	r24, r1
    22d4:	ce cf       	rjmp	.-100    	; 0x2272 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    22d6:	c0 93 99 03 	sts	0x0399, r28	; 0x800399 <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    22da:	8c 2f       	mov	r24, r28
    22dc:	0e 94 59 09 	call	0x12b2	; 0x12b2 <y_position>
    22e0:	c8 2f       	mov	r28, r24
    22e2:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <superfood_position>
    22e6:	0e 94 56 09 	call	0x12ac	; 0x12ac <x_position>
    22ea:	4c e3       	ldi	r20, 0x3C	; 60
    22ec:	6c 2f       	mov	r22, r28
    22ee:	0e 94 0f 09 	call	0x121e	; 0x121e <ledmatrix_update_pixel>
	superfood_on_board = 1;
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <superfood_on_board>
}
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	08 95       	ret

00002300 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    2300:	28 2f       	mov	r18, r24
    2302:	08 2e       	mov	r0, r24
    2304:	00 0c       	add	r0, r0
    2306:	33 0b       	sbc	r19, r19
    2308:	3f 93       	push	r19
    230a:	8f 93       	push	r24
    230c:	86 2f       	mov	r24, r22
    230e:	06 2e       	mov	r0, r22
    2310:	00 0c       	add	r0, r0
    2312:	99 0b       	sbc	r25, r25
    2314:	9f 93       	push	r25
    2316:	6f 93       	push	r22
    2318:	87 e3       	ldi	r24, 0x37	; 55
    231a:	92 e0       	ldi	r25, 0x02	; 2
    231c:	9f 93       	push	r25
    231e:	8f 93       	push	r24
    2320:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	08 95       	ret

00002332 <clear_terminal>:
    2332:	82 e3       	ldi	r24, 0x32	; 50
    2334:	92 e0       	ldi	r25, 0x02	; 2
    2336:	9f 93       	push	r25
    2338:	8f 93       	push	r24
    233a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	08 95       	ret

00002344 <set_display_attribute>:
    2344:	1f 92       	push	r1
    2346:	8f 93       	push	r24
    2348:	8c e2       	ldi	r24, 0x2C	; 44
    234a:	92 e0       	ldi	r25, 0x02	; 2
    234c:	9f 93       	push	r25
    234e:	8f 93       	push	r24
    2350:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	0f 90       	pop	r0
    235c:	08 95       	ret

0000235e <hide_cursor>:
    235e:	85 e2       	ldi	r24, 0x25	; 37
    2360:	92 e0       	ldi	r25, 0x02	; 2
    2362:	9f 93       	push	r25
    2364:	8f 93       	push	r24
    2366:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	08 95       	ret

00002370 <show_cursor>:
    2370:	8e e1       	ldi	r24, 0x1E	; 30
    2372:	92 e0       	ldi	r25, 0x02	; 2
    2374:	9f 93       	push	r25
    2376:	8f 93       	push	r24
    2378:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	08 95       	ret

00002382 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    2382:	63 e0       	ldi	r22, 0x03	; 3
    2384:	83 e0       	ldi	r24, 0x03	; 3
    2386:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf_P(PSTR("Snake"));
    238a:	88 e1       	ldi	r24, 0x18	; 24
    238c:	92 e0       	ldi	r25, 0x02	; 2
    238e:	9f 93       	push	r25
    2390:	8f 93       	push	r24
    2392:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>

	move_cursor(3,5);
    2396:	65 e0       	ldi	r22, 0x05	; 5
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    239e:	80 e2       	ldi	r24, 0x20	; 32
    23a0:	0e 94 a2 11 	call	0x2344	; 0x2344 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    23a4:	8e ee       	ldi	r24, 0xEE	; 238
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	9f 93       	push	r25
    23aa:	8f 93       	push	r24
    23ac:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    23b0:	85 e2       	ldi	r24, 0x25	; 37
    23b2:	0e 94 a2 11 	call	0x2344	; 0x2344 <set_display_attribute>
	display_EEPROM_high_score();
    23b6:	0e 94 84 06 	call	0xd08	; 0xd08 <display_EEPROM_high_score>
}
    23ba:	0f 90       	pop	r0
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0f 90       	pop	r0
    23c2:	08 95       	ret

000023c4 <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    23c4:	0e 94 af 11 	call	0x235e	; 0x235e <hide_cursor>
	
	move_cursor(10,1);
    23c8:	61 e0       	ldi	r22, 0x01	; 1
    23ca:	8a e0       	ldi	r24, 0x0A	; 10
    23cc:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf("Snake");
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	92 e0       	ldi	r25, 0x02	; 2
    23d4:	9f 93       	push	r25
    23d6:	8f 93       	push	r24
    23d8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>

	move_cursor(1,3);
    23dc:	63 e0       	ldi	r22, 0x03	; 3
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf("Score:						       ", get_score());
    23e4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
    23e8:	9f 93       	push	r25
    23ea:	8f 93       	push	r24
    23ec:	7f 93       	push	r23
    23ee:	6f 93       	push	r22
    23f0:	86 e0       	ldi	r24, 0x06	; 6
    23f2:	92 e0       	ldi	r25, 0x02	; 2
    23f4:	9f 93       	push	r25
    23f6:	8f 93       	push	r24
    23f8:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
	
	move_cursor(20-score_length(), 3);
    23fc:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <score_length>
    2400:	63 e0       	ldi	r22, 0x03	; 3
    2402:	94 e1       	ldi	r25, 0x14	; 20
    2404:	98 1b       	sub	r25, r24
    2406:	89 2f       	mov	r24, r25
    2408:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf("%u", get_score()); 
    240c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	7f 93       	push	r23
    2416:	6f 93       	push	r22
    2418:	8d ef       	ldi	r24, 0xFD	; 253
    241a:	91 e0       	ldi	r25, 0x01	; 1
    241c:	9f 93       	push	r25
    241e:	8f 93       	push	r24
    2420:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
	move_cursor(10,3);
    2424:	63 e0       	ldi	r22, 0x03	; 3
    2426:	8a e0       	ldi	r24, 0x0A	; 10
    2428:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
}
    242c:	8d b7       	in	r24, 0x3d	; 61
    242e:	9e b7       	in	r25, 0x3e	; 62
    2430:	0e 96       	adiw	r24, 0x0e	; 14
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	9e bf       	out	0x3e, r25	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	8d bf       	out	0x3d, r24	; 61
    243c:	08 95       	ret

0000243e <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    243e:	0e 94 af 11 	call	0x235e	; 0x235e <hide_cursor>
	move_cursor(20-score_length(), 3);
    2442:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <score_length>
    2446:	63 e0       	ldi	r22, 0x03	; 3
    2448:	94 e1       	ldi	r25, 0x14	; 20
    244a:	98 1b       	sub	r25, r24
    244c:	89 2f       	mov	r24, r25
    244e:	0e 94 80 11 	call	0x2300	; 0x2300 <move_cursor>
	printf("%u", get_score());
    2452:	0e 94 de 0c 	call	0x19bc	; 0x19bc <get_score>
    2456:	9f 93       	push	r25
    2458:	8f 93       	push	r24
    245a:	7f 93       	push	r23
    245c:	6f 93       	push	r22
    245e:	8d ef       	ldi	r24, 0xFD	; 253
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	9f 93       	push	r25
    2464:	8f 93       	push	r24
    2466:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <printf>
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	08 95       	ret

00002478 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    2478:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <clock_ticks>
    247c:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <clock_ticks+0x1>
    2480:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <clock_ticks+0x2>
    2484:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2488:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    248a:	8c e7       	ldi	r24, 0x7C	; 124
    248c:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    248e:	82 e0       	ldi	r24, 0x02	; 2
    2490:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    2492:	83 e0       	ldi	r24, 0x03	; 3
    2494:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    2496:	ee e6       	ldi	r30, 0x6E	; 110
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	82 60       	ori	r24, 0x02	; 2
    249e:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    24a0:	85 b3       	in	r24, 0x15	; 21
    24a2:	82 70       	andi	r24, 0x02	; 2
    24a4:	85 bb       	out	0x15, r24	; 21
    24a6:	08 95       	ret

000024a8 <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    24a8:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <unpaused_game>
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	89 1b       	sub	r24, r25
    24b0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <unpaused_game>
    24b4:	08 95       	ret

000024b6 <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    24b6:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <unpaused_game>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	22 23       	and	r18, r18
    24c0:	11 f0       	breq	.+4      	; 0x24c6 <timer_is_paused+0x10>
    24c2:	80 e0       	ldi	r24, 0x00	; 0
    24c4:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    24c6:	08 95       	ret

000024c8 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    24c8:	2f b7       	in	r18, 0x3f	; 63
	cli();
    24ca:	f8 94       	cli
	return_value = clock_ticks;
    24cc:	60 91 5d 02 	lds	r22, 0x025D	; 0x80025d <clock_ticks>
    24d0:	70 91 5e 02 	lds	r23, 0x025E	; 0x80025e <clock_ticks+0x1>
    24d4:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <clock_ticks+0x2>
    24d8:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <clock_ticks+0x3>
	if(interrupts_were_on) {
    24dc:	22 23       	and	r18, r18
    24de:	0c f4       	brge	.+2      	; 0x24e2 <get_clock_ticks+0x1a>
		sei();
    24e0:	78 94       	sei
	}
	return return_value;
}
    24e2:	08 95       	ret

000024e4 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    24e4:	2f b7       	in	r18, 0x3f	; 63
	cli();
    24e6:	f8 94       	cli
	clock_ticks =clock;
    24e8:	60 93 5d 02 	sts	0x025D, r22	; 0x80025d <clock_ticks>
    24ec:	70 93 5e 02 	sts	0x025E, r23	; 0x80025e <clock_ticks+0x1>
    24f0:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <clock_ticks+0x2>
    24f4:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <clock_ticks+0x3>
	if(interrupts_were_on) {
    24f8:	22 23       	and	r18, r18
    24fa:	0c f4       	brge	.+2      	; 0x24fe <set_clock_ticks+0x1a>
		sei();
    24fc:	78 94       	sei
    24fe:	08 95       	ret

00002500 <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    2500:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SSD_CC_value>
    2504:	88 23       	and	r24, r24
    2506:	81 f0       	breq	.+32     	; 0x2528 <display_SSD_value+0x28>
		PORTD |= (1<<2);
    2508:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    250a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <get_snake_length>
    250e:	ed ec       	ldi	r30, 0xCD	; 205
    2510:	8e 9f       	mul	r24, r30
    2512:	e1 2d       	mov	r30, r1
    2514:	11 24       	eor	r1, r1
    2516:	e6 95       	lsr	r30
    2518:	e6 95       	lsr	r30
    251a:	e6 95       	lsr	r30
    251c:	f0 e0       	ldi	r31, 0x00	; 0
    251e:	e8 5d       	subi	r30, 0xD8	; 216
    2520:	fe 4f       	sbci	r31, 0xFE	; 254
    2522:	80 81       	ld	r24, Z
    2524:	82 b9       	out	0x02, r24	; 2
    2526:	16 c0       	rjmp	.+44     	; 0x2554 <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    2528:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    252a:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <get_snake_length>
    252e:	9d ec       	ldi	r25, 0xCD	; 205
    2530:	89 9f       	mul	r24, r25
    2532:	91 2d       	mov	r25, r1
    2534:	11 24       	eor	r1, r1
    2536:	96 95       	lsr	r25
    2538:	96 95       	lsr	r25
    253a:	96 95       	lsr	r25
    253c:	99 0f       	add	r25, r25
    253e:	29 2f       	mov	r18, r25
    2540:	22 0f       	add	r18, r18
    2542:	22 0f       	add	r18, r18
    2544:	92 0f       	add	r25, r18
    2546:	89 1b       	sub	r24, r25
    2548:	e8 2f       	mov	r30, r24
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	e2 5e       	subi	r30, 0xE2	; 226
    254e:	fe 4f       	sbci	r31, 0xFE	; 254
    2550:	80 81       	ld	r24, Z
    2552:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    2554:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <SSD_CC_value>
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	89 1b       	sub	r24, r25
    255c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <SSD_CC_value>
    2560:	08 95       	ret

00002562 <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	ef 93       	push	r30
    2582:	ff 93       	push	r31
	if(unpaused_game){
    2584:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <unpaused_game>
    2588:	88 23       	and	r24, r24
    258a:	99 f0       	breq	.+38     	; 0x25b2 <__vector_16+0x50>
		clock_ticks++;
    258c:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <clock_ticks>
    2590:	90 91 5e 02 	lds	r25, 0x025E	; 0x80025e <clock_ticks+0x1>
    2594:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <clock_ticks+0x2>
    2598:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <clock_ticks+0x3>
    259c:	01 96       	adiw	r24, 0x01	; 1
    259e:	a1 1d       	adc	r26, r1
    25a0:	b1 1d       	adc	r27, r1
    25a2:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <clock_ticks>
    25a6:	90 93 5e 02 	sts	0x025E, r25	; 0x80025e <clock_ticks+0x1>
    25aa:	a0 93 5f 02 	sts	0x025F, r26	; 0x80025f <clock_ticks+0x2>
    25ae:	b0 93 60 02 	sts	0x0260, r27	; 0x800260 <clock_ticks+0x3>
	}
	display_SSD_value();
    25b2:	0e 94 80 12 	call	0x2500	; 0x2500 <display_SSD_value>
}
    25b6:	ff 91       	pop	r31
    25b8:	ef 91       	pop	r30
    25ba:	bf 91       	pop	r27
    25bc:	af 91       	pop	r26
    25be:	9f 91       	pop	r25
    25c0:	8f 91       	pop	r24
    25c2:	7f 91       	pop	r23
    25c4:	6f 91       	pop	r22
    25c6:	5f 91       	pop	r21
    25c8:	4f 91       	pop	r20
    25ca:	3f 91       	pop	r19
    25cc:	2f 91       	pop	r18
    25ce:	0f 90       	pop	r0
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	0f 90       	pop	r0
    25d4:	1f 90       	pop	r1
    25d6:	18 95       	reti

000025d8 <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    25d8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    25dc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    25e0:	e1 e8       	ldi	r30, 0x81	; 129
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	8a 60       	ori	r24, 0x0A	; 10
    25e8:	80 83       	st	Z, r24
    25ea:	80 e4       	ldi	r24, 0x40	; 64
    25ec:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    25f0:	88 ee       	ldi	r24, 0xE8	; 232
    25f2:	93 e0       	ldi	r25, 0x03	; 3
    25f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    25f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    25fc:	55 98       	cbi	0x0a, 5	; 10
    25fe:	53 98       	cbi	0x0a, 3	; 10
    2600:	08 95       	ret

00002602 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    2602:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2606:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    260a:	08 95       	ret

0000260c <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    260c:	55 9a       	sbi	0x0a, 5	; 10
    260e:	08 95       	ret

00002610 <__subsf3>:
    2610:	50 58       	subi	r21, 0x80	; 128

00002612 <__addsf3>:
    2612:	bb 27       	eor	r27, r27
    2614:	aa 27       	eor	r26, r26
    2616:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    261a:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__fp_round>
    261e:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fp_pscA>
    2622:	38 f0       	brcs	.+14     	; 0x2632 <__addsf3+0x20>
    2624:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fp_pscB>
    2628:	20 f0       	brcs	.+8      	; 0x2632 <__addsf3+0x20>
    262a:	39 f4       	brne	.+14     	; 0x263a <__addsf3+0x28>
    262c:	9f 3f       	cpi	r25, 0xFF	; 255
    262e:	19 f4       	brne	.+6      	; 0x2636 <__addsf3+0x24>
    2630:	26 f4       	brtc	.+8      	; 0x263a <__addsf3+0x28>
    2632:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__fp_nan>
    2636:	0e f4       	brtc	.+2      	; 0x263a <__addsf3+0x28>
    2638:	e0 95       	com	r30
    263a:	e7 fb       	bst	r30, 7
    263c:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__fp_inf>

00002640 <__addsf3x>:
    2640:	e9 2f       	mov	r30, r25
    2642:	0e 94 10 14 	call	0x2820	; 0x2820 <__fp_split3>
    2646:	58 f3       	brcs	.-42     	; 0x261e <__addsf3+0xc>
    2648:	ba 17       	cp	r27, r26
    264a:	62 07       	cpc	r22, r18
    264c:	73 07       	cpc	r23, r19
    264e:	84 07       	cpc	r24, r20
    2650:	95 07       	cpc	r25, r21
    2652:	20 f0       	brcs	.+8      	; 0x265c <__addsf3x+0x1c>
    2654:	79 f4       	brne	.+30     	; 0x2674 <__addsf3x+0x34>
    2656:	a6 f5       	brtc	.+104    	; 0x26c0 <__addsf3x+0x80>
    2658:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__fp_zero>
    265c:	0e f4       	brtc	.+2      	; 0x2660 <__addsf3x+0x20>
    265e:	e0 95       	com	r30
    2660:	0b 2e       	mov	r0, r27
    2662:	ba 2f       	mov	r27, r26
    2664:	a0 2d       	mov	r26, r0
    2666:	0b 01       	movw	r0, r22
    2668:	b9 01       	movw	r22, r18
    266a:	90 01       	movw	r18, r0
    266c:	0c 01       	movw	r0, r24
    266e:	ca 01       	movw	r24, r20
    2670:	a0 01       	movw	r20, r0
    2672:	11 24       	eor	r1, r1
    2674:	ff 27       	eor	r31, r31
    2676:	59 1b       	sub	r21, r25
    2678:	99 f0       	breq	.+38     	; 0x26a0 <__addsf3x+0x60>
    267a:	59 3f       	cpi	r21, 0xF9	; 249
    267c:	50 f4       	brcc	.+20     	; 0x2692 <__addsf3x+0x52>
    267e:	50 3e       	cpi	r21, 0xE0	; 224
    2680:	68 f1       	brcs	.+90     	; 0x26dc <__addsf3x+0x9c>
    2682:	1a 16       	cp	r1, r26
    2684:	f0 40       	sbci	r31, 0x00	; 0
    2686:	a2 2f       	mov	r26, r18
    2688:	23 2f       	mov	r18, r19
    268a:	34 2f       	mov	r19, r20
    268c:	44 27       	eor	r20, r20
    268e:	58 5f       	subi	r21, 0xF8	; 248
    2690:	f3 cf       	rjmp	.-26     	; 0x2678 <__addsf3x+0x38>
    2692:	46 95       	lsr	r20
    2694:	37 95       	ror	r19
    2696:	27 95       	ror	r18
    2698:	a7 95       	ror	r26
    269a:	f0 40       	sbci	r31, 0x00	; 0
    269c:	53 95       	inc	r21
    269e:	c9 f7       	brne	.-14     	; 0x2692 <__addsf3x+0x52>
    26a0:	7e f4       	brtc	.+30     	; 0x26c0 <__addsf3x+0x80>
    26a2:	1f 16       	cp	r1, r31
    26a4:	ba 0b       	sbc	r27, r26
    26a6:	62 0b       	sbc	r22, r18
    26a8:	73 0b       	sbc	r23, r19
    26aa:	84 0b       	sbc	r24, r20
    26ac:	ba f0       	brmi	.+46     	; 0x26dc <__addsf3x+0x9c>
    26ae:	91 50       	subi	r25, 0x01	; 1
    26b0:	a1 f0       	breq	.+40     	; 0x26da <__addsf3x+0x9a>
    26b2:	ff 0f       	add	r31, r31
    26b4:	bb 1f       	adc	r27, r27
    26b6:	66 1f       	adc	r22, r22
    26b8:	77 1f       	adc	r23, r23
    26ba:	88 1f       	adc	r24, r24
    26bc:	c2 f7       	brpl	.-16     	; 0x26ae <__addsf3x+0x6e>
    26be:	0e c0       	rjmp	.+28     	; 0x26dc <__addsf3x+0x9c>
    26c0:	ba 0f       	add	r27, r26
    26c2:	62 1f       	adc	r22, r18
    26c4:	73 1f       	adc	r23, r19
    26c6:	84 1f       	adc	r24, r20
    26c8:	48 f4       	brcc	.+18     	; 0x26dc <__addsf3x+0x9c>
    26ca:	87 95       	ror	r24
    26cc:	77 95       	ror	r23
    26ce:	67 95       	ror	r22
    26d0:	b7 95       	ror	r27
    26d2:	f7 95       	ror	r31
    26d4:	9e 3f       	cpi	r25, 0xFE	; 254
    26d6:	08 f0       	brcs	.+2      	; 0x26da <__addsf3x+0x9a>
    26d8:	b0 cf       	rjmp	.-160    	; 0x263a <__addsf3+0x28>
    26da:	93 95       	inc	r25
    26dc:	88 0f       	add	r24, r24
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <__addsf3x+0xa2>
    26e0:	99 27       	eor	r25, r25
    26e2:	ee 0f       	add	r30, r30
    26e4:	97 95       	ror	r25
    26e6:	87 95       	ror	r24
    26e8:	08 95       	ret

000026ea <__fixsfsi>:
    26ea:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__fixunssfsi>
    26ee:	68 94       	set
    26f0:	b1 11       	cpse	r27, r1
    26f2:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_szero>
    26f6:	08 95       	ret

000026f8 <__fixunssfsi>:
    26f8:	0e 94 18 14 	call	0x2830	; 0x2830 <__fp_splitA>
    26fc:	88 f0       	brcs	.+34     	; 0x2720 <__fixunssfsi+0x28>
    26fe:	9f 57       	subi	r25, 0x7F	; 127
    2700:	98 f0       	brcs	.+38     	; 0x2728 <__fixunssfsi+0x30>
    2702:	b9 2f       	mov	r27, r25
    2704:	99 27       	eor	r25, r25
    2706:	b7 51       	subi	r27, 0x17	; 23
    2708:	b0 f0       	brcs	.+44     	; 0x2736 <__fixunssfsi+0x3e>
    270a:	e1 f0       	breq	.+56     	; 0x2744 <__fixunssfsi+0x4c>
    270c:	66 0f       	add	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	88 1f       	adc	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	1a f0       	brmi	.+6      	; 0x271c <__fixunssfsi+0x24>
    2716:	ba 95       	dec	r27
    2718:	c9 f7       	brne	.-14     	; 0x270c <__fixunssfsi+0x14>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <__fixunssfsi+0x4c>
    271c:	b1 30       	cpi	r27, 0x01	; 1
    271e:	91 f0       	breq	.+36     	; 0x2744 <__fixunssfsi+0x4c>
    2720:	0e 94 32 14 	call	0x2864	; 0x2864 <__fp_zero>
    2724:	b1 e0       	ldi	r27, 0x01	; 1
    2726:	08 95       	ret
    2728:	0c 94 32 14 	jmp	0x2864	; 0x2864 <__fp_zero>
    272c:	67 2f       	mov	r22, r23
    272e:	78 2f       	mov	r23, r24
    2730:	88 27       	eor	r24, r24
    2732:	b8 5f       	subi	r27, 0xF8	; 248
    2734:	39 f0       	breq	.+14     	; 0x2744 <__fixunssfsi+0x4c>
    2736:	b9 3f       	cpi	r27, 0xF9	; 249
    2738:	cc f3       	brlt	.-14     	; 0x272c <__fixunssfsi+0x34>
    273a:	86 95       	lsr	r24
    273c:	77 95       	ror	r23
    273e:	67 95       	ror	r22
    2740:	b3 95       	inc	r27
    2742:	d9 f7       	brne	.-10     	; 0x273a <__fixunssfsi+0x42>
    2744:	3e f4       	brtc	.+14     	; 0x2754 <__fixunssfsi+0x5c>
    2746:	90 95       	com	r25
    2748:	80 95       	com	r24
    274a:	70 95       	com	r23
    274c:	61 95       	neg	r22
    274e:	7f 4f       	sbci	r23, 0xFF	; 255
    2750:	8f 4f       	sbci	r24, 0xFF	; 255
    2752:	9f 4f       	sbci	r25, 0xFF	; 255
    2754:	08 95       	ret

00002756 <__floatunsisf>:
    2756:	e8 94       	clt
    2758:	09 c0       	rjmp	.+18     	; 0x276c <__floatsisf+0x12>

0000275a <__floatsisf>:
    275a:	97 fb       	bst	r25, 7
    275c:	3e f4       	brtc	.+14     	; 0x276c <__floatsisf+0x12>
    275e:	90 95       	com	r25
    2760:	80 95       	com	r24
    2762:	70 95       	com	r23
    2764:	61 95       	neg	r22
    2766:	7f 4f       	sbci	r23, 0xFF	; 255
    2768:	8f 4f       	sbci	r24, 0xFF	; 255
    276a:	9f 4f       	sbci	r25, 0xFF	; 255
    276c:	99 23       	and	r25, r25
    276e:	a9 f0       	breq	.+42     	; 0x279a <__floatsisf+0x40>
    2770:	f9 2f       	mov	r31, r25
    2772:	96 e9       	ldi	r25, 0x96	; 150
    2774:	bb 27       	eor	r27, r27
    2776:	93 95       	inc	r25
    2778:	f6 95       	lsr	r31
    277a:	87 95       	ror	r24
    277c:	77 95       	ror	r23
    277e:	67 95       	ror	r22
    2780:	b7 95       	ror	r27
    2782:	f1 11       	cpse	r31, r1
    2784:	f8 cf       	rjmp	.-16     	; 0x2776 <__floatsisf+0x1c>
    2786:	fa f4       	brpl	.+62     	; 0x27c6 <__floatsisf+0x6c>
    2788:	bb 0f       	add	r27, r27
    278a:	11 f4       	brne	.+4      	; 0x2790 <__floatsisf+0x36>
    278c:	60 ff       	sbrs	r22, 0
    278e:	1b c0       	rjmp	.+54     	; 0x27c6 <__floatsisf+0x6c>
    2790:	6f 5f       	subi	r22, 0xFF	; 255
    2792:	7f 4f       	sbci	r23, 0xFF	; 255
    2794:	8f 4f       	sbci	r24, 0xFF	; 255
    2796:	9f 4f       	sbci	r25, 0xFF	; 255
    2798:	16 c0       	rjmp	.+44     	; 0x27c6 <__floatsisf+0x6c>
    279a:	88 23       	and	r24, r24
    279c:	11 f0       	breq	.+4      	; 0x27a2 <__floatsisf+0x48>
    279e:	96 e9       	ldi	r25, 0x96	; 150
    27a0:	11 c0       	rjmp	.+34     	; 0x27c4 <__floatsisf+0x6a>
    27a2:	77 23       	and	r23, r23
    27a4:	21 f0       	breq	.+8      	; 0x27ae <__floatsisf+0x54>
    27a6:	9e e8       	ldi	r25, 0x8E	; 142
    27a8:	87 2f       	mov	r24, r23
    27aa:	76 2f       	mov	r23, r22
    27ac:	05 c0       	rjmp	.+10     	; 0x27b8 <__floatsisf+0x5e>
    27ae:	66 23       	and	r22, r22
    27b0:	71 f0       	breq	.+28     	; 0x27ce <__floatsisf+0x74>
    27b2:	96 e8       	ldi	r25, 0x86	; 134
    27b4:	86 2f       	mov	r24, r22
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	60 e0       	ldi	r22, 0x00	; 0
    27ba:	2a f0       	brmi	.+10     	; 0x27c6 <__floatsisf+0x6c>
    27bc:	9a 95       	dec	r25
    27be:	66 0f       	add	r22, r22
    27c0:	77 1f       	adc	r23, r23
    27c2:	88 1f       	adc	r24, r24
    27c4:	da f7       	brpl	.-10     	; 0x27bc <__floatsisf+0x62>
    27c6:	88 0f       	add	r24, r24
    27c8:	96 95       	lsr	r25
    27ca:	87 95       	ror	r24
    27cc:	97 f9       	bld	r25, 7
    27ce:	08 95       	ret

000027d0 <__fp_inf>:
    27d0:	97 f9       	bld	r25, 7
    27d2:	9f 67       	ori	r25, 0x7F	; 127
    27d4:	80 e8       	ldi	r24, 0x80	; 128
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	08 95       	ret

000027dc <__fp_nan>:
    27dc:	9f ef       	ldi	r25, 0xFF	; 255
    27de:	80 ec       	ldi	r24, 0xC0	; 192
    27e0:	08 95       	ret

000027e2 <__fp_pscA>:
    27e2:	00 24       	eor	r0, r0
    27e4:	0a 94       	dec	r0
    27e6:	16 16       	cp	r1, r22
    27e8:	17 06       	cpc	r1, r23
    27ea:	18 06       	cpc	r1, r24
    27ec:	09 06       	cpc	r0, r25
    27ee:	08 95       	ret

000027f0 <__fp_pscB>:
    27f0:	00 24       	eor	r0, r0
    27f2:	0a 94       	dec	r0
    27f4:	12 16       	cp	r1, r18
    27f6:	13 06       	cpc	r1, r19
    27f8:	14 06       	cpc	r1, r20
    27fa:	05 06       	cpc	r0, r21
    27fc:	08 95       	ret

000027fe <__fp_round>:
    27fe:	09 2e       	mov	r0, r25
    2800:	03 94       	inc	r0
    2802:	00 0c       	add	r0, r0
    2804:	11 f4       	brne	.+4      	; 0x280a <__fp_round+0xc>
    2806:	88 23       	and	r24, r24
    2808:	52 f0       	brmi	.+20     	; 0x281e <__fp_round+0x20>
    280a:	bb 0f       	add	r27, r27
    280c:	40 f4       	brcc	.+16     	; 0x281e <__fp_round+0x20>
    280e:	bf 2b       	or	r27, r31
    2810:	11 f4       	brne	.+4      	; 0x2816 <__fp_round+0x18>
    2812:	60 ff       	sbrs	r22, 0
    2814:	04 c0       	rjmp	.+8      	; 0x281e <__fp_round+0x20>
    2816:	6f 5f       	subi	r22, 0xFF	; 255
    2818:	7f 4f       	sbci	r23, 0xFF	; 255
    281a:	8f 4f       	sbci	r24, 0xFF	; 255
    281c:	9f 4f       	sbci	r25, 0xFF	; 255
    281e:	08 95       	ret

00002820 <__fp_split3>:
    2820:	57 fd       	sbrc	r21, 7
    2822:	90 58       	subi	r25, 0x80	; 128
    2824:	44 0f       	add	r20, r20
    2826:	55 1f       	adc	r21, r21
    2828:	59 f0       	breq	.+22     	; 0x2840 <__fp_splitA+0x10>
    282a:	5f 3f       	cpi	r21, 0xFF	; 255
    282c:	71 f0       	breq	.+28     	; 0x284a <__fp_splitA+0x1a>
    282e:	47 95       	ror	r20

00002830 <__fp_splitA>:
    2830:	88 0f       	add	r24, r24
    2832:	97 fb       	bst	r25, 7
    2834:	99 1f       	adc	r25, r25
    2836:	61 f0       	breq	.+24     	; 0x2850 <__fp_splitA+0x20>
    2838:	9f 3f       	cpi	r25, 0xFF	; 255
    283a:	79 f0       	breq	.+30     	; 0x285a <__fp_splitA+0x2a>
    283c:	87 95       	ror	r24
    283e:	08 95       	ret
    2840:	12 16       	cp	r1, r18
    2842:	13 06       	cpc	r1, r19
    2844:	14 06       	cpc	r1, r20
    2846:	55 1f       	adc	r21, r21
    2848:	f2 cf       	rjmp	.-28     	; 0x282e <__fp_split3+0xe>
    284a:	46 95       	lsr	r20
    284c:	f1 df       	rcall	.-30     	; 0x2830 <__fp_splitA>
    284e:	08 c0       	rjmp	.+16     	; 0x2860 <__fp_splitA+0x30>
    2850:	16 16       	cp	r1, r22
    2852:	17 06       	cpc	r1, r23
    2854:	18 06       	cpc	r1, r24
    2856:	99 1f       	adc	r25, r25
    2858:	f1 cf       	rjmp	.-30     	; 0x283c <__fp_splitA+0xc>
    285a:	86 95       	lsr	r24
    285c:	71 05       	cpc	r23, r1
    285e:	61 05       	cpc	r22, r1
    2860:	08 94       	sec
    2862:	08 95       	ret

00002864 <__fp_zero>:
    2864:	e8 94       	clt

00002866 <__fp_szero>:
    2866:	bb 27       	eor	r27, r27
    2868:	66 27       	eor	r22, r22
    286a:	77 27       	eor	r23, r23
    286c:	cb 01       	movw	r24, r22
    286e:	97 f9       	bld	r25, 7
    2870:	08 95       	ret

00002872 <log10>:
    2872:	0e 94 49 14 	call	0x2892	; 0x2892 <log>
    2876:	29 ed       	ldi	r18, 0xD9	; 217
    2878:	3b e5       	ldi	r19, 0x5B	; 91
    287a:	4e ed       	ldi	r20, 0xDE	; 222
    287c:	5e e3       	ldi	r21, 0x3E	; 62
    287e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__mulsf3>
    2882:	16 f0       	brts	.+4      	; 0x2888 <log10+0x16>
    2884:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__fp_mpack>
    2888:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__fp_nan>
    288c:	68 94       	set
    288e:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__fp_inf>

00002892 <log>:
    2892:	0e 94 18 14 	call	0x2830	; 0x2830 <__fp_splitA>
    2896:	a8 f3       	brcs	.-22     	; 0x2882 <log10+0x10>
    2898:	99 23       	and	r25, r25
    289a:	c1 f3       	breq	.-16     	; 0x288c <log10+0x1a>
    289c:	ae f3       	brts	.-22     	; 0x2888 <log10+0x16>
    289e:	df 93       	push	r29
    28a0:	cf 93       	push	r28
    28a2:	1f 93       	push	r17
    28a4:	0f 93       	push	r16
    28a6:	ff 92       	push	r15
    28a8:	c9 2f       	mov	r28, r25
    28aa:	dd 27       	eor	r29, r29
    28ac:	88 23       	and	r24, r24
    28ae:	2a f0       	brmi	.+10     	; 0x28ba <log+0x28>
    28b0:	21 97       	sbiw	r28, 0x01	; 1
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	88 1f       	adc	r24, r24
    28b8:	da f7       	brpl	.-10     	; 0x28b0 <log+0x1e>
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e8       	ldi	r20, 0x80	; 128
    28c0:	5f eb       	ldi	r21, 0xBF	; 191
    28c2:	9f e3       	ldi	r25, 0x3F	; 63
    28c4:	88 39       	cpi	r24, 0x98	; 152
    28c6:	20 f0       	brcs	.+8      	; 0x28d0 <log+0x3e>
    28c8:	80 3e       	cpi	r24, 0xE0	; 224
    28ca:	38 f0       	brcs	.+14     	; 0x28da <log+0x48>
    28cc:	21 96       	adiw	r28, 0x01	; 1
    28ce:	8f 77       	andi	r24, 0x7F	; 127
    28d0:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    28d4:	ec e7       	ldi	r30, 0x7C	; 124
    28d6:	f0 e0       	ldi	r31, 0x00	; 0
    28d8:	04 c0       	rjmp	.+8      	; 0x28e2 <log+0x50>
    28da:	0e 94 09 13 	call	0x2612	; 0x2612 <__addsf3>
    28de:	e9 ea       	ldi	r30, 0xA9	; 169
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <__fp_powser>
    28e6:	8b 01       	movw	r16, r22
    28e8:	be 01       	movw	r22, r28
    28ea:	ec 01       	movw	r28, r24
    28ec:	fb 2e       	mov	r15, r27
    28ee:	6f 57       	subi	r22, 0x7F	; 127
    28f0:	71 09       	sbc	r23, r1
    28f2:	75 95       	asr	r23
    28f4:	77 1f       	adc	r23, r23
    28f6:	88 0b       	sbc	r24, r24
    28f8:	99 0b       	sbc	r25, r25
    28fa:	0e 94 ad 13 	call	0x275a	; 0x275a <__floatsisf>
    28fe:	28 e1       	ldi	r18, 0x18	; 24
    2900:	32 e7       	ldi	r19, 0x72	; 114
    2902:	41 e3       	ldi	r20, 0x31	; 49
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 a4 14 	call	0x2948	; 0x2948 <__mulsf3x>
    290a:	af 2d       	mov	r26, r15
    290c:	98 01       	movw	r18, r16
    290e:	ae 01       	movw	r20, r28
    2910:	ff 90       	pop	r15
    2912:	0f 91       	pop	r16
    2914:	1f 91       	pop	r17
    2916:	cf 91       	pop	r28
    2918:	df 91       	pop	r29
    291a:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    291e:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__fp_round>

00002922 <__mulsf3>:
    2922:	0e 94 a4 14 	call	0x2948	; 0x2948 <__mulsf3x>
    2926:	0c 94 ff 13 	jmp	0x27fe	; 0x27fe <__fp_round>
    292a:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__fp_pscA>
    292e:	38 f0       	brcs	.+14     	; 0x293e <__mulsf3+0x1c>
    2930:	0e 94 f8 13 	call	0x27f0	; 0x27f0 <__fp_pscB>
    2934:	20 f0       	brcs	.+8      	; 0x293e <__mulsf3+0x1c>
    2936:	95 23       	and	r25, r21
    2938:	11 f0       	breq	.+4      	; 0x293e <__mulsf3+0x1c>
    293a:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__fp_inf>
    293e:	0c 94 ee 13 	jmp	0x27dc	; 0x27dc <__fp_nan>
    2942:	11 24       	eor	r1, r1
    2944:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_szero>

00002948 <__mulsf3x>:
    2948:	0e 94 10 14 	call	0x2820	; 0x2820 <__fp_split3>
    294c:	70 f3       	brcs	.-36     	; 0x292a <__mulsf3+0x8>

0000294e <__mulsf3_pse>:
    294e:	95 9f       	mul	r25, r21
    2950:	c1 f3       	breq	.-16     	; 0x2942 <__mulsf3+0x20>
    2952:	95 0f       	add	r25, r21
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	55 1f       	adc	r21, r21
    2958:	62 9f       	mul	r22, r18
    295a:	f0 01       	movw	r30, r0
    295c:	72 9f       	mul	r23, r18
    295e:	bb 27       	eor	r27, r27
    2960:	f0 0d       	add	r31, r0
    2962:	b1 1d       	adc	r27, r1
    2964:	63 9f       	mul	r22, r19
    2966:	aa 27       	eor	r26, r26
    2968:	f0 0d       	add	r31, r0
    296a:	b1 1d       	adc	r27, r1
    296c:	aa 1f       	adc	r26, r26
    296e:	64 9f       	mul	r22, r20
    2970:	66 27       	eor	r22, r22
    2972:	b0 0d       	add	r27, r0
    2974:	a1 1d       	adc	r26, r1
    2976:	66 1f       	adc	r22, r22
    2978:	82 9f       	mul	r24, r18
    297a:	22 27       	eor	r18, r18
    297c:	b0 0d       	add	r27, r0
    297e:	a1 1d       	adc	r26, r1
    2980:	62 1f       	adc	r22, r18
    2982:	73 9f       	mul	r23, r19
    2984:	b0 0d       	add	r27, r0
    2986:	a1 1d       	adc	r26, r1
    2988:	62 1f       	adc	r22, r18
    298a:	83 9f       	mul	r24, r19
    298c:	a0 0d       	add	r26, r0
    298e:	61 1d       	adc	r22, r1
    2990:	22 1f       	adc	r18, r18
    2992:	74 9f       	mul	r23, r20
    2994:	33 27       	eor	r19, r19
    2996:	a0 0d       	add	r26, r0
    2998:	61 1d       	adc	r22, r1
    299a:	23 1f       	adc	r18, r19
    299c:	84 9f       	mul	r24, r20
    299e:	60 0d       	add	r22, r0
    29a0:	21 1d       	adc	r18, r1
    29a2:	82 2f       	mov	r24, r18
    29a4:	76 2f       	mov	r23, r22
    29a6:	6a 2f       	mov	r22, r26
    29a8:	11 24       	eor	r1, r1
    29aa:	9f 57       	subi	r25, 0x7F	; 127
    29ac:	50 40       	sbci	r21, 0x00	; 0
    29ae:	9a f0       	brmi	.+38     	; 0x29d6 <__mulsf3_pse+0x88>
    29b0:	f1 f0       	breq	.+60     	; 0x29ee <__mulsf3_pse+0xa0>
    29b2:	88 23       	and	r24, r24
    29b4:	4a f0       	brmi	.+18     	; 0x29c8 <__mulsf3_pse+0x7a>
    29b6:	ee 0f       	add	r30, r30
    29b8:	ff 1f       	adc	r31, r31
    29ba:	bb 1f       	adc	r27, r27
    29bc:	66 1f       	adc	r22, r22
    29be:	77 1f       	adc	r23, r23
    29c0:	88 1f       	adc	r24, r24
    29c2:	91 50       	subi	r25, 0x01	; 1
    29c4:	50 40       	sbci	r21, 0x00	; 0
    29c6:	a9 f7       	brne	.-22     	; 0x29b2 <__mulsf3_pse+0x64>
    29c8:	9e 3f       	cpi	r25, 0xFE	; 254
    29ca:	51 05       	cpc	r21, r1
    29cc:	80 f0       	brcs	.+32     	; 0x29ee <__mulsf3_pse+0xa0>
    29ce:	0c 94 e8 13 	jmp	0x27d0	; 0x27d0 <__fp_inf>
    29d2:	0c 94 33 14 	jmp	0x2866	; 0x2866 <__fp_szero>
    29d6:	5f 3f       	cpi	r21, 0xFF	; 255
    29d8:	e4 f3       	brlt	.-8      	; 0x29d2 <__mulsf3_pse+0x84>
    29da:	98 3e       	cpi	r25, 0xE8	; 232
    29dc:	d4 f3       	brlt	.-12     	; 0x29d2 <__mulsf3_pse+0x84>
    29de:	86 95       	lsr	r24
    29e0:	77 95       	ror	r23
    29e2:	67 95       	ror	r22
    29e4:	b7 95       	ror	r27
    29e6:	f7 95       	ror	r31
    29e8:	e7 95       	ror	r30
    29ea:	9f 5f       	subi	r25, 0xFF	; 255
    29ec:	c1 f7       	brne	.-16     	; 0x29de <__mulsf3_pse+0x90>
    29ee:	fe 2b       	or	r31, r30
    29f0:	88 0f       	add	r24, r24
    29f2:	91 1d       	adc	r25, r1
    29f4:	96 95       	lsr	r25
    29f6:	87 95       	ror	r24
    29f8:	97 f9       	bld	r25, 7
    29fa:	08 95       	ret

000029fc <__fp_mpack>:
    29fc:	9f 3f       	cpi	r25, 0xFF	; 255
    29fe:	31 f0       	breq	.+12     	; 0x2a0c <__fp_mpack_finite+0xc>

00002a00 <__fp_mpack_finite>:
    2a00:	91 50       	subi	r25, 0x01	; 1
    2a02:	20 f4       	brcc	.+8      	; 0x2a0c <__fp_mpack_finite+0xc>
    2a04:	87 95       	ror	r24
    2a06:	77 95       	ror	r23
    2a08:	67 95       	ror	r22
    2a0a:	b7 95       	ror	r27
    2a0c:	88 0f       	add	r24, r24
    2a0e:	91 1d       	adc	r25, r1
    2a10:	96 95       	lsr	r25
    2a12:	87 95       	ror	r24
    2a14:	97 f9       	bld	r25, 7
    2a16:	08 95       	ret

00002a18 <__fp_powser>:
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	1f 93       	push	r17
    2a1e:	0f 93       	push	r16
    2a20:	ff 92       	push	r15
    2a22:	ef 92       	push	r14
    2a24:	df 92       	push	r13
    2a26:	7b 01       	movw	r14, r22
    2a28:	8c 01       	movw	r16, r24
    2a2a:	68 94       	set
    2a2c:	06 c0       	rjmp	.+12     	; 0x2a3a <__fp_powser+0x22>
    2a2e:	da 2e       	mov	r13, r26
    2a30:	ef 01       	movw	r28, r30
    2a32:	0e 94 a4 14 	call	0x2948	; 0x2948 <__mulsf3x>
    2a36:	fe 01       	movw	r30, r28
    2a38:	e8 94       	clt
    2a3a:	a5 91       	lpm	r26, Z+
    2a3c:	25 91       	lpm	r18, Z+
    2a3e:	35 91       	lpm	r19, Z+
    2a40:	45 91       	lpm	r20, Z+
    2a42:	55 91       	lpm	r21, Z+
    2a44:	a6 f3       	brts	.-24     	; 0x2a2e <__fp_powser+0x16>
    2a46:	ef 01       	movw	r28, r30
    2a48:	0e 94 20 13 	call	0x2640	; 0x2640 <__addsf3x>
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	97 01       	movw	r18, r14
    2a50:	a8 01       	movw	r20, r16
    2a52:	da 94       	dec	r13
    2a54:	69 f7       	brne	.-38     	; 0x2a30 <__fp_powser+0x18>
    2a56:	df 90       	pop	r13
    2a58:	ef 90       	pop	r14
    2a5a:	ff 90       	pop	r15
    2a5c:	0f 91       	pop	r16
    2a5e:	1f 91       	pop	r17
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <__udivmodsi4>:
    2a66:	a1 e2       	ldi	r26, 0x21	; 33
    2a68:	1a 2e       	mov	r1, r26
    2a6a:	aa 1b       	sub	r26, r26
    2a6c:	bb 1b       	sub	r27, r27
    2a6e:	fd 01       	movw	r30, r26
    2a70:	0d c0       	rjmp	.+26     	; 0x2a8c <__udivmodsi4_ep>

00002a72 <__udivmodsi4_loop>:
    2a72:	aa 1f       	adc	r26, r26
    2a74:	bb 1f       	adc	r27, r27
    2a76:	ee 1f       	adc	r30, r30
    2a78:	ff 1f       	adc	r31, r31
    2a7a:	a2 17       	cp	r26, r18
    2a7c:	b3 07       	cpc	r27, r19
    2a7e:	e4 07       	cpc	r30, r20
    2a80:	f5 07       	cpc	r31, r21
    2a82:	20 f0       	brcs	.+8      	; 0x2a8c <__udivmodsi4_ep>
    2a84:	a2 1b       	sub	r26, r18
    2a86:	b3 0b       	sbc	r27, r19
    2a88:	e4 0b       	sbc	r30, r20
    2a8a:	f5 0b       	sbc	r31, r21

00002a8c <__udivmodsi4_ep>:
    2a8c:	66 1f       	adc	r22, r22
    2a8e:	77 1f       	adc	r23, r23
    2a90:	88 1f       	adc	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	1a 94       	dec	r1
    2a96:	69 f7       	brne	.-38     	; 0x2a72 <__udivmodsi4_loop>
    2a98:	60 95       	com	r22
    2a9a:	70 95       	com	r23
    2a9c:	80 95       	com	r24
    2a9e:	90 95       	com	r25
    2aa0:	9b 01       	movw	r18, r22
    2aa2:	ac 01       	movw	r20, r24
    2aa4:	bd 01       	movw	r22, r26
    2aa6:	cf 01       	movw	r24, r30
    2aa8:	08 95       	ret

00002aaa <__divmodsi4>:
    2aaa:	05 2e       	mov	r0, r21
    2aac:	97 fb       	bst	r25, 7
    2aae:	1e f4       	brtc	.+6      	; 0x2ab6 <__divmodsi4+0xc>
    2ab0:	00 94       	com	r0
    2ab2:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <__negsi2>
    2ab6:	57 fd       	sbrc	r21, 7
    2ab8:	07 d0       	rcall	.+14     	; 0x2ac8 <__divmodsi4_neg2>
    2aba:	0e 94 33 15 	call	0x2a66	; 0x2a66 <__udivmodsi4>
    2abe:	07 fc       	sbrc	r0, 7
    2ac0:	03 d0       	rcall	.+6      	; 0x2ac8 <__divmodsi4_neg2>
    2ac2:	4e f4       	brtc	.+18     	; 0x2ad6 <__divmodsi4_exit>
    2ac4:	0c 94 6c 15 	jmp	0x2ad8	; 0x2ad8 <__negsi2>

00002ac8 <__divmodsi4_neg2>:
    2ac8:	50 95       	com	r21
    2aca:	40 95       	com	r20
    2acc:	30 95       	com	r19
    2ace:	21 95       	neg	r18
    2ad0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ad2:	4f 4f       	sbci	r20, 0xFF	; 255
    2ad4:	5f 4f       	sbci	r21, 0xFF	; 255

00002ad6 <__divmodsi4_exit>:
    2ad6:	08 95       	ret

00002ad8 <__negsi2>:
    2ad8:	90 95       	com	r25
    2ada:	80 95       	com	r24
    2adc:	70 95       	com	r23
    2ade:	61 95       	neg	r22
    2ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    2ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae6:	08 95       	ret

00002ae8 <do_rand>:
    2ae8:	8f 92       	push	r8
    2aea:	9f 92       	push	r9
    2aec:	af 92       	push	r10
    2aee:	bf 92       	push	r11
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	cf 93       	push	r28
    2afa:	df 93       	push	r29
    2afc:	ec 01       	movw	r28, r24
    2afe:	68 81       	ld	r22, Y
    2b00:	79 81       	ldd	r23, Y+1	; 0x01
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	61 15       	cp	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	81 05       	cpc	r24, r1
    2b0c:	91 05       	cpc	r25, r1
    2b0e:	21 f4       	brne	.+8      	; 0x2b18 <do_rand+0x30>
    2b10:	64 e2       	ldi	r22, 0x24	; 36
    2b12:	79 ed       	ldi	r23, 0xD9	; 217
    2b14:	8b e5       	ldi	r24, 0x5B	; 91
    2b16:	97 e0       	ldi	r25, 0x07	; 7
    2b18:	2d e1       	ldi	r18, 0x1D	; 29
    2b1a:	33 ef       	ldi	r19, 0xF3	; 243
    2b1c:	41 e0       	ldi	r20, 0x01	; 1
    2b1e:	50 e0       	ldi	r21, 0x00	; 0
    2b20:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__divmodsi4>
    2b24:	49 01       	movw	r8, r18
    2b26:	5a 01       	movw	r10, r20
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	a7 ea       	ldi	r26, 0xA7	; 167
    2b2e:	b1 e4       	ldi	r27, 0x41	; 65
    2b30:	0e 94 c3 19 	call	0x3386	; 0x3386 <__muluhisi3>
    2b34:	6b 01       	movw	r12, r22
    2b36:	7c 01       	movw	r14, r24
    2b38:	ac ee       	ldi	r26, 0xEC	; 236
    2b3a:	b4 ef       	ldi	r27, 0xF4	; 244
    2b3c:	a5 01       	movw	r20, r10
    2b3e:	94 01       	movw	r18, r8
    2b40:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__mulohisi3>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	8c 0d       	add	r24, r12
    2b4a:	9d 1d       	adc	r25, r13
    2b4c:	ae 1d       	adc	r26, r14
    2b4e:	bf 1d       	adc	r27, r15
    2b50:	b7 ff       	sbrs	r27, 7
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <do_rand+0x72>
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	a1 09       	sbc	r26, r1
    2b58:	b0 48       	sbci	r27, 0x80	; 128
    2b5a:	88 83       	st	Y, r24
    2b5c:	99 83       	std	Y+1, r25	; 0x01
    2b5e:	aa 83       	std	Y+2, r26	; 0x02
    2b60:	bb 83       	std	Y+3, r27	; 0x03
    2b62:	9f 77       	andi	r25, 0x7F	; 127
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	ff 90       	pop	r15
    2b6a:	ef 90       	pop	r14
    2b6c:	df 90       	pop	r13
    2b6e:	cf 90       	pop	r12
    2b70:	bf 90       	pop	r11
    2b72:	af 90       	pop	r10
    2b74:	9f 90       	pop	r9
    2b76:	8f 90       	pop	r8
    2b78:	08 95       	ret

00002b7a <rand_r>:
    2b7a:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <do_rand>
    2b7e:	08 95       	ret

00002b80 <rand>:
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <do_rand>
    2b88:	08 95       	ret

00002b8a <srand>:
    2b8a:	a0 e0       	ldi	r26, 0x00	; 0
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2b92:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2b96:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2b9a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2b9e:	08 95       	ret

00002ba0 <random_r>:
    2ba0:	8f 92       	push	r8
    2ba2:	9f 92       	push	r9
    2ba4:	af 92       	push	r10
    2ba6:	bf 92       	push	r11
    2ba8:	cf 92       	push	r12
    2baa:	df 92       	push	r13
    2bac:	ef 92       	push	r14
    2bae:	ff 92       	push	r15
    2bb0:	cf 93       	push	r28
    2bb2:	df 93       	push	r29
    2bb4:	ec 01       	movw	r28, r24
    2bb6:	68 81       	ld	r22, Y
    2bb8:	79 81       	ldd	r23, Y+1	; 0x01
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	61 15       	cp	r22, r1
    2bc0:	71 05       	cpc	r23, r1
    2bc2:	81 05       	cpc	r24, r1
    2bc4:	91 05       	cpc	r25, r1
    2bc6:	21 f4       	brne	.+8      	; 0x2bd0 <random_r+0x30>
    2bc8:	64 e2       	ldi	r22, 0x24	; 36
    2bca:	79 ed       	ldi	r23, 0xD9	; 217
    2bcc:	8b e5       	ldi	r24, 0x5B	; 91
    2bce:	97 e0       	ldi	r25, 0x07	; 7
    2bd0:	2d e1       	ldi	r18, 0x1D	; 29
    2bd2:	33 ef       	ldi	r19, 0xF3	; 243
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	50 e0       	ldi	r21, 0x00	; 0
    2bd8:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__divmodsi4>
    2bdc:	49 01       	movw	r8, r18
    2bde:	5a 01       	movw	r10, r20
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
    2be4:	a7 ea       	ldi	r26, 0xA7	; 167
    2be6:	b1 e4       	ldi	r27, 0x41	; 65
    2be8:	0e 94 c3 19 	call	0x3386	; 0x3386 <__muluhisi3>
    2bec:	6b 01       	movw	r12, r22
    2bee:	7c 01       	movw	r14, r24
    2bf0:	ac ee       	ldi	r26, 0xEC	; 236
    2bf2:	b4 ef       	ldi	r27, 0xF4	; 244
    2bf4:	a5 01       	movw	r20, r10
    2bf6:	94 01       	movw	r18, r8
    2bf8:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__mulohisi3>
    2bfc:	dc 01       	movw	r26, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	8c 0d       	add	r24, r12
    2c02:	9d 1d       	adc	r25, r13
    2c04:	ae 1d       	adc	r26, r14
    2c06:	bf 1d       	adc	r27, r15
    2c08:	b7 ff       	sbrs	r27, 7
    2c0a:	03 c0       	rjmp	.+6      	; 0x2c12 <random_r+0x72>
    2c0c:	01 97       	sbiw	r24, 0x01	; 1
    2c0e:	a1 09       	sbc	r26, r1
    2c10:	b0 48       	sbci	r27, 0x80	; 128
    2c12:	88 83       	st	Y, r24
    2c14:	99 83       	std	Y+1, r25	; 0x01
    2c16:	aa 83       	std	Y+2, r26	; 0x02
    2c18:	bb 83       	std	Y+3, r27	; 0x03
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	cd 01       	movw	r24, r26
    2c1e:	9f 77       	andi	r25, 0x7F	; 127
    2c20:	df 91       	pop	r29
    2c22:	cf 91       	pop	r28
    2c24:	ff 90       	pop	r15
    2c26:	ef 90       	pop	r14
    2c28:	df 90       	pop	r13
    2c2a:	cf 90       	pop	r12
    2c2c:	bf 90       	pop	r11
    2c2e:	af 90       	pop	r10
    2c30:	9f 90       	pop	r9
    2c32:	8f 90       	pop	r8
    2c34:	08 95       	ret

00002c36 <random>:
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2c4a:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    2c4e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    2c52:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    2c56:	61 15       	cp	r22, r1
    2c58:	71 05       	cpc	r23, r1
    2c5a:	81 05       	cpc	r24, r1
    2c5c:	91 05       	cpc	r25, r1
    2c5e:	21 f4       	brne	.+8      	; 0x2c68 <random+0x32>
    2c60:	64 e2       	ldi	r22, 0x24	; 36
    2c62:	79 ed       	ldi	r23, 0xD9	; 217
    2c64:	8b e5       	ldi	r24, 0x5B	; 91
    2c66:	97 e0       	ldi	r25, 0x07	; 7
    2c68:	2d e1       	ldi	r18, 0x1D	; 29
    2c6a:	33 ef       	ldi	r19, 0xF3	; 243
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	50 e0       	ldi	r21, 0x00	; 0
    2c70:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <__divmodsi4>
    2c74:	49 01       	movw	r8, r18
    2c76:	5a 01       	movw	r10, r20
    2c78:	9b 01       	movw	r18, r22
    2c7a:	ac 01       	movw	r20, r24
    2c7c:	a7 ea       	ldi	r26, 0xA7	; 167
    2c7e:	b1 e4       	ldi	r27, 0x41	; 65
    2c80:	0e 94 c3 19 	call	0x3386	; 0x3386 <__muluhisi3>
    2c84:	6b 01       	movw	r12, r22
    2c86:	7c 01       	movw	r14, r24
    2c88:	ac ee       	ldi	r26, 0xEC	; 236
    2c8a:	b4 ef       	ldi	r27, 0xF4	; 244
    2c8c:	a5 01       	movw	r20, r10
    2c8e:	94 01       	movw	r18, r8
    2c90:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <__mulohisi3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	8c 0d       	add	r24, r12
    2c9a:	9d 1d       	adc	r25, r13
    2c9c:	ae 1d       	adc	r26, r14
    2c9e:	bf 1d       	adc	r27, r15
    2ca0:	b7 ff       	sbrs	r27, 7
    2ca2:	03 c0       	rjmp	.+6      	; 0x2caa <random+0x74>
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	a1 09       	sbc	r26, r1
    2ca8:	b0 48       	sbci	r27, 0x80	; 128
    2caa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2cae:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2cb2:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2cb6:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	9f 77       	andi	r25, 0x7F	; 127
    2cc0:	ff 90       	pop	r15
    2cc2:	ef 90       	pop	r14
    2cc4:	df 90       	pop	r13
    2cc6:	cf 90       	pop	r12
    2cc8:	bf 90       	pop	r11
    2cca:	af 90       	pop	r10
    2ccc:	9f 90       	pop	r9
    2cce:	8f 90       	pop	r8
    2cd0:	08 95       	ret

00002cd2 <srandom>:
    2cd2:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2cd6:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2cda:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2cde:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2ce2:	08 95       	ret

00002ce4 <fgetc>:
    2ce4:	cf 93       	push	r28
    2ce6:	df 93       	push	r29
    2ce8:	ec 01       	movw	r28, r24
    2cea:	2b 81       	ldd	r18, Y+3	; 0x03
    2cec:	20 ff       	sbrs	r18, 0
    2cee:	33 c0       	rjmp	.+102    	; 0x2d56 <fgetc+0x72>
    2cf0:	26 ff       	sbrs	r18, 6
    2cf2:	0a c0       	rjmp	.+20     	; 0x2d08 <fgetc+0x24>
    2cf4:	2f 7b       	andi	r18, 0xBF	; 191
    2cf6:	2b 83       	std	Y+3, r18	; 0x03
    2cf8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cfa:	9f 81       	ldd	r25, Y+7	; 0x07
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	9f 83       	std	Y+7, r25	; 0x07
    2d00:	8e 83       	std	Y+6, r24	; 0x06
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	29 c0       	rjmp	.+82     	; 0x2d5a <fgetc+0x76>
    2d08:	22 ff       	sbrs	r18, 2
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <fgetc+0x46>
    2d0c:	e8 81       	ld	r30, Y
    2d0e:	f9 81       	ldd	r31, Y+1	; 0x01
    2d10:	80 81       	ld	r24, Z
    2d12:	08 2e       	mov	r0, r24
    2d14:	00 0c       	add	r0, r0
    2d16:	99 0b       	sbc	r25, r25
    2d18:	00 97       	sbiw	r24, 0x00	; 0
    2d1a:	19 f4       	brne	.+6      	; 0x2d22 <fgetc+0x3e>
    2d1c:	20 62       	ori	r18, 0x20	; 32
    2d1e:	2b 83       	std	Y+3, r18	; 0x03
    2d20:	1a c0       	rjmp	.+52     	; 0x2d56 <fgetc+0x72>
    2d22:	31 96       	adiw	r30, 0x01	; 1
    2d24:	f9 83       	std	Y+1, r31	; 0x01
    2d26:	e8 83       	st	Y, r30
    2d28:	0e c0       	rjmp	.+28     	; 0x2d46 <fgetc+0x62>
    2d2a:	ea 85       	ldd	r30, Y+10	; 0x0a
    2d2c:	fb 85       	ldd	r31, Y+11	; 0x0b
    2d2e:	09 95       	icall
    2d30:	97 ff       	sbrs	r25, 7
    2d32:	09 c0       	rjmp	.+18     	; 0x2d46 <fgetc+0x62>
    2d34:	2b 81       	ldd	r18, Y+3	; 0x03
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	11 f0       	breq	.+4      	; 0x2d3e <fgetc+0x5a>
    2d3a:	80 e2       	ldi	r24, 0x20	; 32
    2d3c:	01 c0       	rjmp	.+2      	; 0x2d40 <fgetc+0x5c>
    2d3e:	80 e1       	ldi	r24, 0x10	; 16
    2d40:	82 2b       	or	r24, r18
    2d42:	8b 83       	std	Y+3, r24	; 0x03
    2d44:	08 c0       	rjmp	.+16     	; 0x2d56 <fgetc+0x72>
    2d46:	2e 81       	ldd	r18, Y+6	; 0x06
    2d48:	3f 81       	ldd	r19, Y+7	; 0x07
    2d4a:	2f 5f       	subi	r18, 0xFF	; 255
    2d4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4e:	3f 83       	std	Y+7, r19	; 0x07
    2d50:	2e 83       	std	Y+6, r18	; 0x06
    2d52:	99 27       	eor	r25, r25
    2d54:	02 c0       	rjmp	.+4      	; 0x2d5a <fgetc+0x76>
    2d56:	8f ef       	ldi	r24, 0xFF	; 255
    2d58:	9f ef       	ldi	r25, 0xFF	; 255
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	08 95       	ret

00002d60 <printf>:
    2d60:	a0 e0       	ldi	r26, 0x00	; 0
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	e6 eb       	ldi	r30, 0xB6	; 182
    2d66:	f6 e1       	ldi	r31, 0x16	; 22
    2d68:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__prologue_saves__+0x20>
    2d6c:	ae 01       	movw	r20, r28
    2d6e:	4b 5f       	subi	r20, 0xFB	; 251
    2d70:	5f 4f       	sbci	r21, 0xFF	; 255
    2d72:	fa 01       	movw	r30, r20
    2d74:	61 91       	ld	r22, Z+
    2d76:	71 91       	ld	r23, Z+
    2d78:	af 01       	movw	r20, r30
    2d7a:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <__iob+0x2>
    2d7e:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <__iob+0x3>
    2d82:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <vfprintf>
    2d86:	e2 e0       	ldi	r30, 0x02	; 2
    2d88:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__epilogue_restores__+0x20>

00002d8c <printf_P>:
    2d8c:	a0 e0       	ldi	r26, 0x00	; 0
    2d8e:	b0 e0       	ldi	r27, 0x00	; 0
    2d90:	ec ec       	ldi	r30, 0xCC	; 204
    2d92:	f6 e1       	ldi	r31, 0x16	; 22
    2d94:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__prologue_saves__+0x1c>
    2d98:	ae 01       	movw	r20, r28
    2d9a:	49 5f       	subi	r20, 0xF9	; 249
    2d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9e:	da 01       	movw	r26, r20
    2da0:	6d 91       	ld	r22, X+
    2da2:	7d 91       	ld	r23, X+
    2da4:	ad 01       	movw	r20, r26
    2da6:	0b e9       	ldi	r16, 0x9B	; 155
    2da8:	13 e0       	ldi	r17, 0x03	; 3
    2daa:	f8 01       	movw	r30, r16
    2dac:	82 81       	ldd	r24, Z+2	; 0x02
    2dae:	93 81       	ldd	r25, Z+3	; 0x03
    2db0:	dc 01       	movw	r26, r24
    2db2:	13 96       	adiw	r26, 0x03	; 3
    2db4:	2c 91       	ld	r18, X
    2db6:	13 97       	sbiw	r26, 0x03	; 3
    2db8:	28 60       	ori	r18, 0x08	; 8
    2dba:	13 96       	adiw	r26, 0x03	; 3
    2dbc:	2c 93       	st	X, r18
    2dbe:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <vfprintf>
    2dc2:	d8 01       	movw	r26, r16
    2dc4:	12 96       	adiw	r26, 0x02	; 2
    2dc6:	ed 91       	ld	r30, X+
    2dc8:	fc 91       	ld	r31, X
    2dca:	13 97       	sbiw	r26, 0x03	; 3
    2dcc:	23 81       	ldd	r18, Z+3	; 0x03
    2dce:	27 7f       	andi	r18, 0xF7	; 247
    2dd0:	23 83       	std	Z+3, r18	; 0x03
    2dd2:	e4 e0       	ldi	r30, 0x04	; 4
    2dd4:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__epilogue_restores__+0x1c>

00002dd8 <putchar>:
    2dd8:	60 91 9d 03 	lds	r22, 0x039D	; 0x80039d <__iob+0x2>
    2ddc:	70 91 9e 03 	lds	r23, 0x039E	; 0x80039e <__iob+0x3>
    2de0:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    2de4:	08 95       	ret

00002de6 <vfprintf>:
    2de6:	ab e0       	ldi	r26, 0x0B	; 11
    2de8:	b0 e0       	ldi	r27, 0x00	; 0
    2dea:	e9 ef       	ldi	r30, 0xF9	; 249
    2dec:	f6 e1       	ldi	r31, 0x16	; 22
    2dee:	0c 94 d6 19 	jmp	0x33ac	; 0x33ac <__prologue_saves__>
    2df2:	6c 01       	movw	r12, r24
    2df4:	7b 01       	movw	r14, r22
    2df6:	8a 01       	movw	r16, r20
    2df8:	fc 01       	movw	r30, r24
    2dfa:	17 82       	std	Z+7, r1	; 0x07
    2dfc:	16 82       	std	Z+6, r1	; 0x06
    2dfe:	83 81       	ldd	r24, Z+3	; 0x03
    2e00:	81 ff       	sbrs	r24, 1
    2e02:	cc c1       	rjmp	.+920    	; 0x319c <vfprintf+0x3b6>
    2e04:	ce 01       	movw	r24, r28
    2e06:	01 96       	adiw	r24, 0x01	; 1
    2e08:	3c 01       	movw	r6, r24
    2e0a:	f6 01       	movw	r30, r12
    2e0c:	93 81       	ldd	r25, Z+3	; 0x03
    2e0e:	f7 01       	movw	r30, r14
    2e10:	93 fd       	sbrc	r25, 3
    2e12:	85 91       	lpm	r24, Z+
    2e14:	93 ff       	sbrs	r25, 3
    2e16:	81 91       	ld	r24, Z+
    2e18:	7f 01       	movw	r14, r30
    2e1a:	88 23       	and	r24, r24
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <vfprintf+0x3a>
    2e1e:	ba c1       	rjmp	.+884    	; 0x3194 <vfprintf+0x3ae>
    2e20:	85 32       	cpi	r24, 0x25	; 37
    2e22:	39 f4       	brne	.+14     	; 0x2e32 <vfprintf+0x4c>
    2e24:	93 fd       	sbrc	r25, 3
    2e26:	85 91       	lpm	r24, Z+
    2e28:	93 ff       	sbrs	r25, 3
    2e2a:	81 91       	ld	r24, Z+
    2e2c:	7f 01       	movw	r14, r30
    2e2e:	85 32       	cpi	r24, 0x25	; 37
    2e30:	29 f4       	brne	.+10     	; 0x2e3c <vfprintf+0x56>
    2e32:	b6 01       	movw	r22, r12
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    2e3a:	e7 cf       	rjmp	.-50     	; 0x2e0a <vfprintf+0x24>
    2e3c:	91 2c       	mov	r9, r1
    2e3e:	21 2c       	mov	r2, r1
    2e40:	31 2c       	mov	r3, r1
    2e42:	ff e1       	ldi	r31, 0x1F	; 31
    2e44:	f3 15       	cp	r31, r3
    2e46:	d8 f0       	brcs	.+54     	; 0x2e7e <vfprintf+0x98>
    2e48:	8b 32       	cpi	r24, 0x2B	; 43
    2e4a:	79 f0       	breq	.+30     	; 0x2e6a <vfprintf+0x84>
    2e4c:	38 f4       	brcc	.+14     	; 0x2e5c <vfprintf+0x76>
    2e4e:	80 32       	cpi	r24, 0x20	; 32
    2e50:	79 f0       	breq	.+30     	; 0x2e70 <vfprintf+0x8a>
    2e52:	83 32       	cpi	r24, 0x23	; 35
    2e54:	a1 f4       	brne	.+40     	; 0x2e7e <vfprintf+0x98>
    2e56:	23 2d       	mov	r18, r3
    2e58:	20 61       	ori	r18, 0x10	; 16
    2e5a:	1d c0       	rjmp	.+58     	; 0x2e96 <vfprintf+0xb0>
    2e5c:	8d 32       	cpi	r24, 0x2D	; 45
    2e5e:	61 f0       	breq	.+24     	; 0x2e78 <vfprintf+0x92>
    2e60:	80 33       	cpi	r24, 0x30	; 48
    2e62:	69 f4       	brne	.+26     	; 0x2e7e <vfprintf+0x98>
    2e64:	23 2d       	mov	r18, r3
    2e66:	21 60       	ori	r18, 0x01	; 1
    2e68:	16 c0       	rjmp	.+44     	; 0x2e96 <vfprintf+0xb0>
    2e6a:	83 2d       	mov	r24, r3
    2e6c:	82 60       	ori	r24, 0x02	; 2
    2e6e:	38 2e       	mov	r3, r24
    2e70:	e3 2d       	mov	r30, r3
    2e72:	e4 60       	ori	r30, 0x04	; 4
    2e74:	3e 2e       	mov	r3, r30
    2e76:	2a c0       	rjmp	.+84     	; 0x2ecc <vfprintf+0xe6>
    2e78:	f3 2d       	mov	r31, r3
    2e7a:	f8 60       	ori	r31, 0x08	; 8
    2e7c:	1d c0       	rjmp	.+58     	; 0x2eb8 <vfprintf+0xd2>
    2e7e:	37 fc       	sbrc	r3, 7
    2e80:	2d c0       	rjmp	.+90     	; 0x2edc <vfprintf+0xf6>
    2e82:	20 ed       	ldi	r18, 0xD0	; 208
    2e84:	28 0f       	add	r18, r24
    2e86:	2a 30       	cpi	r18, 0x0A	; 10
    2e88:	40 f0       	brcs	.+16     	; 0x2e9a <vfprintf+0xb4>
    2e8a:	8e 32       	cpi	r24, 0x2E	; 46
    2e8c:	b9 f4       	brne	.+46     	; 0x2ebc <vfprintf+0xd6>
    2e8e:	36 fc       	sbrc	r3, 6
    2e90:	81 c1       	rjmp	.+770    	; 0x3194 <vfprintf+0x3ae>
    2e92:	23 2d       	mov	r18, r3
    2e94:	20 64       	ori	r18, 0x40	; 64
    2e96:	32 2e       	mov	r3, r18
    2e98:	19 c0       	rjmp	.+50     	; 0x2ecc <vfprintf+0xe6>
    2e9a:	36 fe       	sbrs	r3, 6
    2e9c:	06 c0       	rjmp	.+12     	; 0x2eaa <vfprintf+0xc4>
    2e9e:	8a e0       	ldi	r24, 0x0A	; 10
    2ea0:	98 9e       	mul	r9, r24
    2ea2:	20 0d       	add	r18, r0
    2ea4:	11 24       	eor	r1, r1
    2ea6:	92 2e       	mov	r9, r18
    2ea8:	11 c0       	rjmp	.+34     	; 0x2ecc <vfprintf+0xe6>
    2eaa:	ea e0       	ldi	r30, 0x0A	; 10
    2eac:	2e 9e       	mul	r2, r30
    2eae:	20 0d       	add	r18, r0
    2eb0:	11 24       	eor	r1, r1
    2eb2:	22 2e       	mov	r2, r18
    2eb4:	f3 2d       	mov	r31, r3
    2eb6:	f0 62       	ori	r31, 0x20	; 32
    2eb8:	3f 2e       	mov	r3, r31
    2eba:	08 c0       	rjmp	.+16     	; 0x2ecc <vfprintf+0xe6>
    2ebc:	8c 36       	cpi	r24, 0x6C	; 108
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <vfprintf+0xe2>
    2ec0:	83 2d       	mov	r24, r3
    2ec2:	80 68       	ori	r24, 0x80	; 128
    2ec4:	38 2e       	mov	r3, r24
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <vfprintf+0xe6>
    2ec8:	88 36       	cpi	r24, 0x68	; 104
    2eca:	41 f4       	brne	.+16     	; 0x2edc <vfprintf+0xf6>
    2ecc:	f7 01       	movw	r30, r14
    2ece:	93 fd       	sbrc	r25, 3
    2ed0:	85 91       	lpm	r24, Z+
    2ed2:	93 ff       	sbrs	r25, 3
    2ed4:	81 91       	ld	r24, Z+
    2ed6:	7f 01       	movw	r14, r30
    2ed8:	81 11       	cpse	r24, r1
    2eda:	b3 cf       	rjmp	.-154    	; 0x2e42 <vfprintf+0x5c>
    2edc:	98 2f       	mov	r25, r24
    2ede:	9f 7d       	andi	r25, 0xDF	; 223
    2ee0:	95 54       	subi	r25, 0x45	; 69
    2ee2:	93 30       	cpi	r25, 0x03	; 3
    2ee4:	28 f4       	brcc	.+10     	; 0x2ef0 <vfprintf+0x10a>
    2ee6:	0c 5f       	subi	r16, 0xFC	; 252
    2ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eea:	9f e3       	ldi	r25, 0x3F	; 63
    2eec:	99 83       	std	Y+1, r25	; 0x01
    2eee:	0d c0       	rjmp	.+26     	; 0x2f0a <vfprintf+0x124>
    2ef0:	83 36       	cpi	r24, 0x63	; 99
    2ef2:	31 f0       	breq	.+12     	; 0x2f00 <vfprintf+0x11a>
    2ef4:	83 37       	cpi	r24, 0x73	; 115
    2ef6:	71 f0       	breq	.+28     	; 0x2f14 <vfprintf+0x12e>
    2ef8:	83 35       	cpi	r24, 0x53	; 83
    2efa:	09 f0       	breq	.+2      	; 0x2efe <vfprintf+0x118>
    2efc:	59 c0       	rjmp	.+178    	; 0x2fb0 <vfprintf+0x1ca>
    2efe:	21 c0       	rjmp	.+66     	; 0x2f42 <vfprintf+0x15c>
    2f00:	f8 01       	movw	r30, r16
    2f02:	80 81       	ld	r24, Z
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	0e 5f       	subi	r16, 0xFE	; 254
    2f08:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0a:	88 24       	eor	r8, r8
    2f0c:	83 94       	inc	r8
    2f0e:	91 2c       	mov	r9, r1
    2f10:	53 01       	movw	r10, r6
    2f12:	13 c0       	rjmp	.+38     	; 0x2f3a <vfprintf+0x154>
    2f14:	28 01       	movw	r4, r16
    2f16:	f2 e0       	ldi	r31, 0x02	; 2
    2f18:	4f 0e       	add	r4, r31
    2f1a:	51 1c       	adc	r5, r1
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	a0 80       	ld	r10, Z
    2f20:	b1 80       	ldd	r11, Z+1	; 0x01
    2f22:	36 fe       	sbrs	r3, 6
    2f24:	03 c0       	rjmp	.+6      	; 0x2f2c <vfprintf+0x146>
    2f26:	69 2d       	mov	r22, r9
    2f28:	70 e0       	ldi	r23, 0x00	; 0
    2f2a:	02 c0       	rjmp	.+4      	; 0x2f30 <vfprintf+0x14a>
    2f2c:	6f ef       	ldi	r22, 0xFF	; 255
    2f2e:	7f ef       	ldi	r23, 0xFF	; 255
    2f30:	c5 01       	movw	r24, r10
    2f32:	0e 94 df 18 	call	0x31be	; 0x31be <strnlen>
    2f36:	4c 01       	movw	r8, r24
    2f38:	82 01       	movw	r16, r4
    2f3a:	f3 2d       	mov	r31, r3
    2f3c:	ff 77       	andi	r31, 0x7F	; 127
    2f3e:	3f 2e       	mov	r3, r31
    2f40:	16 c0       	rjmp	.+44     	; 0x2f6e <vfprintf+0x188>
    2f42:	28 01       	movw	r4, r16
    2f44:	22 e0       	ldi	r18, 0x02	; 2
    2f46:	42 0e       	add	r4, r18
    2f48:	51 1c       	adc	r5, r1
    2f4a:	f8 01       	movw	r30, r16
    2f4c:	a0 80       	ld	r10, Z
    2f4e:	b1 80       	ldd	r11, Z+1	; 0x01
    2f50:	36 fe       	sbrs	r3, 6
    2f52:	03 c0       	rjmp	.+6      	; 0x2f5a <vfprintf+0x174>
    2f54:	69 2d       	mov	r22, r9
    2f56:	70 e0       	ldi	r23, 0x00	; 0
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <vfprintf+0x178>
    2f5a:	6f ef       	ldi	r22, 0xFF	; 255
    2f5c:	7f ef       	ldi	r23, 0xFF	; 255
    2f5e:	c5 01       	movw	r24, r10
    2f60:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <strnlen_P>
    2f64:	4c 01       	movw	r8, r24
    2f66:	f3 2d       	mov	r31, r3
    2f68:	f0 68       	ori	r31, 0x80	; 128
    2f6a:	3f 2e       	mov	r3, r31
    2f6c:	82 01       	movw	r16, r4
    2f6e:	33 fc       	sbrc	r3, 3
    2f70:	1b c0       	rjmp	.+54     	; 0x2fa8 <vfprintf+0x1c2>
    2f72:	82 2d       	mov	r24, r2
    2f74:	90 e0       	ldi	r25, 0x00	; 0
    2f76:	88 16       	cp	r8, r24
    2f78:	99 06       	cpc	r9, r25
    2f7a:	b0 f4       	brcc	.+44     	; 0x2fa8 <vfprintf+0x1c2>
    2f7c:	b6 01       	movw	r22, r12
    2f7e:	80 e2       	ldi	r24, 0x20	; 32
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    2f86:	2a 94       	dec	r2
    2f88:	f4 cf       	rjmp	.-24     	; 0x2f72 <vfprintf+0x18c>
    2f8a:	f5 01       	movw	r30, r10
    2f8c:	37 fc       	sbrc	r3, 7
    2f8e:	85 91       	lpm	r24, Z+
    2f90:	37 fe       	sbrs	r3, 7
    2f92:	81 91       	ld	r24, Z+
    2f94:	5f 01       	movw	r10, r30
    2f96:	b6 01       	movw	r22, r12
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    2f9e:	21 10       	cpse	r2, r1
    2fa0:	2a 94       	dec	r2
    2fa2:	21 e0       	ldi	r18, 0x01	; 1
    2fa4:	82 1a       	sub	r8, r18
    2fa6:	91 08       	sbc	r9, r1
    2fa8:	81 14       	cp	r8, r1
    2faa:	91 04       	cpc	r9, r1
    2fac:	71 f7       	brne	.-36     	; 0x2f8a <vfprintf+0x1a4>
    2fae:	e8 c0       	rjmp	.+464    	; 0x3180 <vfprintf+0x39a>
    2fb0:	84 36       	cpi	r24, 0x64	; 100
    2fb2:	11 f0       	breq	.+4      	; 0x2fb8 <vfprintf+0x1d2>
    2fb4:	89 36       	cpi	r24, 0x69	; 105
    2fb6:	41 f5       	brne	.+80     	; 0x3008 <vfprintf+0x222>
    2fb8:	f8 01       	movw	r30, r16
    2fba:	37 fe       	sbrs	r3, 7
    2fbc:	07 c0       	rjmp	.+14     	; 0x2fcc <vfprintf+0x1e6>
    2fbe:	60 81       	ld	r22, Z
    2fc0:	71 81       	ldd	r23, Z+1	; 0x01
    2fc2:	82 81       	ldd	r24, Z+2	; 0x02
    2fc4:	93 81       	ldd	r25, Z+3	; 0x03
    2fc6:	0c 5f       	subi	r16, 0xFC	; 252
    2fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fca:	08 c0       	rjmp	.+16     	; 0x2fdc <vfprintf+0x1f6>
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	07 2e       	mov	r0, r23
    2fd2:	00 0c       	add	r0, r0
    2fd4:	88 0b       	sbc	r24, r24
    2fd6:	99 0b       	sbc	r25, r25
    2fd8:	0e 5f       	subi	r16, 0xFE	; 254
    2fda:	1f 4f       	sbci	r17, 0xFF	; 255
    2fdc:	f3 2d       	mov	r31, r3
    2fde:	ff 76       	andi	r31, 0x6F	; 111
    2fe0:	3f 2e       	mov	r3, r31
    2fe2:	97 ff       	sbrs	r25, 7
    2fe4:	09 c0       	rjmp	.+18     	; 0x2ff8 <vfprintf+0x212>
    2fe6:	90 95       	com	r25
    2fe8:	80 95       	com	r24
    2fea:	70 95       	com	r23
    2fec:	61 95       	neg	r22
    2fee:	7f 4f       	sbci	r23, 0xFF	; 255
    2ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ff4:	f0 68       	ori	r31, 0x80	; 128
    2ff6:	3f 2e       	mov	r3, r31
    2ff8:	2a e0       	ldi	r18, 0x0A	; 10
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	a3 01       	movw	r20, r6
    2ffe:	0e 94 26 19 	call	0x324c	; 0x324c <__ultoa_invert>
    3002:	88 2e       	mov	r8, r24
    3004:	86 18       	sub	r8, r6
    3006:	45 c0       	rjmp	.+138    	; 0x3092 <vfprintf+0x2ac>
    3008:	85 37       	cpi	r24, 0x75	; 117
    300a:	31 f4       	brne	.+12     	; 0x3018 <vfprintf+0x232>
    300c:	23 2d       	mov	r18, r3
    300e:	2f 7e       	andi	r18, 0xEF	; 239
    3010:	b2 2e       	mov	r11, r18
    3012:	2a e0       	ldi	r18, 0x0A	; 10
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	25 c0       	rjmp	.+74     	; 0x3062 <vfprintf+0x27c>
    3018:	93 2d       	mov	r25, r3
    301a:	99 7f       	andi	r25, 0xF9	; 249
    301c:	b9 2e       	mov	r11, r25
    301e:	8f 36       	cpi	r24, 0x6F	; 111
    3020:	c1 f0       	breq	.+48     	; 0x3052 <vfprintf+0x26c>
    3022:	18 f4       	brcc	.+6      	; 0x302a <vfprintf+0x244>
    3024:	88 35       	cpi	r24, 0x58	; 88
    3026:	79 f0       	breq	.+30     	; 0x3046 <vfprintf+0x260>
    3028:	b5 c0       	rjmp	.+362    	; 0x3194 <vfprintf+0x3ae>
    302a:	80 37       	cpi	r24, 0x70	; 112
    302c:	19 f0       	breq	.+6      	; 0x3034 <vfprintf+0x24e>
    302e:	88 37       	cpi	r24, 0x78	; 120
    3030:	21 f0       	breq	.+8      	; 0x303a <vfprintf+0x254>
    3032:	b0 c0       	rjmp	.+352    	; 0x3194 <vfprintf+0x3ae>
    3034:	e9 2f       	mov	r30, r25
    3036:	e0 61       	ori	r30, 0x10	; 16
    3038:	be 2e       	mov	r11, r30
    303a:	b4 fe       	sbrs	r11, 4
    303c:	0d c0       	rjmp	.+26     	; 0x3058 <vfprintf+0x272>
    303e:	fb 2d       	mov	r31, r11
    3040:	f4 60       	ori	r31, 0x04	; 4
    3042:	bf 2e       	mov	r11, r31
    3044:	09 c0       	rjmp	.+18     	; 0x3058 <vfprintf+0x272>
    3046:	34 fe       	sbrs	r3, 4
    3048:	0a c0       	rjmp	.+20     	; 0x305e <vfprintf+0x278>
    304a:	29 2f       	mov	r18, r25
    304c:	26 60       	ori	r18, 0x06	; 6
    304e:	b2 2e       	mov	r11, r18
    3050:	06 c0       	rjmp	.+12     	; 0x305e <vfprintf+0x278>
    3052:	28 e0       	ldi	r18, 0x08	; 8
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	05 c0       	rjmp	.+10     	; 0x3062 <vfprintf+0x27c>
    3058:	20 e1       	ldi	r18, 0x10	; 16
    305a:	30 e0       	ldi	r19, 0x00	; 0
    305c:	02 c0       	rjmp	.+4      	; 0x3062 <vfprintf+0x27c>
    305e:	20 e1       	ldi	r18, 0x10	; 16
    3060:	32 e0       	ldi	r19, 0x02	; 2
    3062:	f8 01       	movw	r30, r16
    3064:	b7 fe       	sbrs	r11, 7
    3066:	07 c0       	rjmp	.+14     	; 0x3076 <vfprintf+0x290>
    3068:	60 81       	ld	r22, Z
    306a:	71 81       	ldd	r23, Z+1	; 0x01
    306c:	82 81       	ldd	r24, Z+2	; 0x02
    306e:	93 81       	ldd	r25, Z+3	; 0x03
    3070:	0c 5f       	subi	r16, 0xFC	; 252
    3072:	1f 4f       	sbci	r17, 0xFF	; 255
    3074:	06 c0       	rjmp	.+12     	; 0x3082 <vfprintf+0x29c>
    3076:	60 81       	ld	r22, Z
    3078:	71 81       	ldd	r23, Z+1	; 0x01
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	0e 5f       	subi	r16, 0xFE	; 254
    3080:	1f 4f       	sbci	r17, 0xFF	; 255
    3082:	a3 01       	movw	r20, r6
    3084:	0e 94 26 19 	call	0x324c	; 0x324c <__ultoa_invert>
    3088:	88 2e       	mov	r8, r24
    308a:	86 18       	sub	r8, r6
    308c:	fb 2d       	mov	r31, r11
    308e:	ff 77       	andi	r31, 0x7F	; 127
    3090:	3f 2e       	mov	r3, r31
    3092:	36 fe       	sbrs	r3, 6
    3094:	0d c0       	rjmp	.+26     	; 0x30b0 <vfprintf+0x2ca>
    3096:	23 2d       	mov	r18, r3
    3098:	2e 7f       	andi	r18, 0xFE	; 254
    309a:	a2 2e       	mov	r10, r18
    309c:	89 14       	cp	r8, r9
    309e:	58 f4       	brcc	.+22     	; 0x30b6 <vfprintf+0x2d0>
    30a0:	34 fe       	sbrs	r3, 4
    30a2:	0b c0       	rjmp	.+22     	; 0x30ba <vfprintf+0x2d4>
    30a4:	32 fc       	sbrc	r3, 2
    30a6:	09 c0       	rjmp	.+18     	; 0x30ba <vfprintf+0x2d4>
    30a8:	83 2d       	mov	r24, r3
    30aa:	8e 7e       	andi	r24, 0xEE	; 238
    30ac:	a8 2e       	mov	r10, r24
    30ae:	05 c0       	rjmp	.+10     	; 0x30ba <vfprintf+0x2d4>
    30b0:	b8 2c       	mov	r11, r8
    30b2:	a3 2c       	mov	r10, r3
    30b4:	03 c0       	rjmp	.+6      	; 0x30bc <vfprintf+0x2d6>
    30b6:	b8 2c       	mov	r11, r8
    30b8:	01 c0       	rjmp	.+2      	; 0x30bc <vfprintf+0x2d6>
    30ba:	b9 2c       	mov	r11, r9
    30bc:	a4 fe       	sbrs	r10, 4
    30be:	0f c0       	rjmp	.+30     	; 0x30de <vfprintf+0x2f8>
    30c0:	fe 01       	movw	r30, r28
    30c2:	e8 0d       	add	r30, r8
    30c4:	f1 1d       	adc	r31, r1
    30c6:	80 81       	ld	r24, Z
    30c8:	80 33       	cpi	r24, 0x30	; 48
    30ca:	21 f4       	brne	.+8      	; 0x30d4 <vfprintf+0x2ee>
    30cc:	9a 2d       	mov	r25, r10
    30ce:	99 7e       	andi	r25, 0xE9	; 233
    30d0:	a9 2e       	mov	r10, r25
    30d2:	09 c0       	rjmp	.+18     	; 0x30e6 <vfprintf+0x300>
    30d4:	a2 fe       	sbrs	r10, 2
    30d6:	06 c0       	rjmp	.+12     	; 0x30e4 <vfprintf+0x2fe>
    30d8:	b3 94       	inc	r11
    30da:	b3 94       	inc	r11
    30dc:	04 c0       	rjmp	.+8      	; 0x30e6 <vfprintf+0x300>
    30de:	8a 2d       	mov	r24, r10
    30e0:	86 78       	andi	r24, 0x86	; 134
    30e2:	09 f0       	breq	.+2      	; 0x30e6 <vfprintf+0x300>
    30e4:	b3 94       	inc	r11
    30e6:	a3 fc       	sbrc	r10, 3
    30e8:	11 c0       	rjmp	.+34     	; 0x310c <vfprintf+0x326>
    30ea:	a0 fe       	sbrs	r10, 0
    30ec:	06 c0       	rjmp	.+12     	; 0x30fa <vfprintf+0x314>
    30ee:	b2 14       	cp	r11, r2
    30f0:	88 f4       	brcc	.+34     	; 0x3114 <vfprintf+0x32e>
    30f2:	28 0c       	add	r2, r8
    30f4:	92 2c       	mov	r9, r2
    30f6:	9b 18       	sub	r9, r11
    30f8:	0e c0       	rjmp	.+28     	; 0x3116 <vfprintf+0x330>
    30fa:	b2 14       	cp	r11, r2
    30fc:	60 f4       	brcc	.+24     	; 0x3116 <vfprintf+0x330>
    30fe:	b6 01       	movw	r22, r12
    3100:	80 e2       	ldi	r24, 0x20	; 32
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    3108:	b3 94       	inc	r11
    310a:	f7 cf       	rjmp	.-18     	; 0x30fa <vfprintf+0x314>
    310c:	b2 14       	cp	r11, r2
    310e:	18 f4       	brcc	.+6      	; 0x3116 <vfprintf+0x330>
    3110:	2b 18       	sub	r2, r11
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <vfprintf+0x332>
    3114:	98 2c       	mov	r9, r8
    3116:	21 2c       	mov	r2, r1
    3118:	a4 fe       	sbrs	r10, 4
    311a:	10 c0       	rjmp	.+32     	; 0x313c <vfprintf+0x356>
    311c:	b6 01       	movw	r22, r12
    311e:	80 e3       	ldi	r24, 0x30	; 48
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    3126:	a2 fe       	sbrs	r10, 2
    3128:	17 c0       	rjmp	.+46     	; 0x3158 <vfprintf+0x372>
    312a:	a1 fc       	sbrc	r10, 1
    312c:	03 c0       	rjmp	.+6      	; 0x3134 <vfprintf+0x34e>
    312e:	88 e7       	ldi	r24, 0x78	; 120
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	02 c0       	rjmp	.+4      	; 0x3138 <vfprintf+0x352>
    3134:	88 e5       	ldi	r24, 0x58	; 88
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	b6 01       	movw	r22, r12
    313a:	0c c0       	rjmp	.+24     	; 0x3154 <vfprintf+0x36e>
    313c:	8a 2d       	mov	r24, r10
    313e:	86 78       	andi	r24, 0x86	; 134
    3140:	59 f0       	breq	.+22     	; 0x3158 <vfprintf+0x372>
    3142:	a1 fe       	sbrs	r10, 1
    3144:	02 c0       	rjmp	.+4      	; 0x314a <vfprintf+0x364>
    3146:	8b e2       	ldi	r24, 0x2B	; 43
    3148:	01 c0       	rjmp	.+2      	; 0x314c <vfprintf+0x366>
    314a:	80 e2       	ldi	r24, 0x20	; 32
    314c:	a7 fc       	sbrc	r10, 7
    314e:	8d e2       	ldi	r24, 0x2D	; 45
    3150:	b6 01       	movw	r22, r12
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    3158:	89 14       	cp	r8, r9
    315a:	38 f4       	brcc	.+14     	; 0x316a <vfprintf+0x384>
    315c:	b6 01       	movw	r22, r12
    315e:	80 e3       	ldi	r24, 0x30	; 48
    3160:	90 e0       	ldi	r25, 0x00	; 0
    3162:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    3166:	9a 94       	dec	r9
    3168:	f7 cf       	rjmp	.-18     	; 0x3158 <vfprintf+0x372>
    316a:	8a 94       	dec	r8
    316c:	f3 01       	movw	r30, r6
    316e:	e8 0d       	add	r30, r8
    3170:	f1 1d       	adc	r31, r1
    3172:	80 81       	ld	r24, Z
    3174:	b6 01       	movw	r22, r12
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    317c:	81 10       	cpse	r8, r1
    317e:	f5 cf       	rjmp	.-22     	; 0x316a <vfprintf+0x384>
    3180:	22 20       	and	r2, r2
    3182:	09 f4       	brne	.+2      	; 0x3186 <vfprintf+0x3a0>
    3184:	42 ce       	rjmp	.-892    	; 0x2e0a <vfprintf+0x24>
    3186:	b6 01       	movw	r22, r12
    3188:	80 e2       	ldi	r24, 0x20	; 32
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <fputc>
    3190:	2a 94       	dec	r2
    3192:	f6 cf       	rjmp	.-20     	; 0x3180 <vfprintf+0x39a>
    3194:	f6 01       	movw	r30, r12
    3196:	86 81       	ldd	r24, Z+6	; 0x06
    3198:	97 81       	ldd	r25, Z+7	; 0x07
    319a:	02 c0       	rjmp	.+4      	; 0x31a0 <vfprintf+0x3ba>
    319c:	8f ef       	ldi	r24, 0xFF	; 255
    319e:	9f ef       	ldi	r25, 0xFF	; 255
    31a0:	2b 96       	adiw	r28, 0x0b	; 11
    31a2:	e2 e1       	ldi	r30, 0x12	; 18
    31a4:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <__epilogue_restores__>

000031a8 <strnlen_P>:
    31a8:	fc 01       	movw	r30, r24
    31aa:	05 90       	lpm	r0, Z+
    31ac:	61 50       	subi	r22, 0x01	; 1
    31ae:	70 40       	sbci	r23, 0x00	; 0
    31b0:	01 10       	cpse	r0, r1
    31b2:	d8 f7       	brcc	.-10     	; 0x31aa <strnlen_P+0x2>
    31b4:	80 95       	com	r24
    31b6:	90 95       	com	r25
    31b8:	8e 0f       	add	r24, r30
    31ba:	9f 1f       	adc	r25, r31
    31bc:	08 95       	ret

000031be <strnlen>:
    31be:	fc 01       	movw	r30, r24
    31c0:	61 50       	subi	r22, 0x01	; 1
    31c2:	70 40       	sbci	r23, 0x00	; 0
    31c4:	01 90       	ld	r0, Z+
    31c6:	01 10       	cpse	r0, r1
    31c8:	d8 f7       	brcc	.-10     	; 0x31c0 <strnlen+0x2>
    31ca:	80 95       	com	r24
    31cc:	90 95       	com	r25
    31ce:	8e 0f       	add	r24, r30
    31d0:	9f 1f       	adc	r25, r31
    31d2:	08 95       	ret

000031d4 <fputc>:
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	fb 01       	movw	r30, r22
    31de:	23 81       	ldd	r18, Z+3	; 0x03
    31e0:	21 fd       	sbrc	r18, 1
    31e2:	03 c0       	rjmp	.+6      	; 0x31ea <fputc+0x16>
    31e4:	8f ef       	ldi	r24, 0xFF	; 255
    31e6:	9f ef       	ldi	r25, 0xFF	; 255
    31e8:	2c c0       	rjmp	.+88     	; 0x3242 <fputc+0x6e>
    31ea:	22 ff       	sbrs	r18, 2
    31ec:	16 c0       	rjmp	.+44     	; 0x321a <fputc+0x46>
    31ee:	46 81       	ldd	r20, Z+6	; 0x06
    31f0:	57 81       	ldd	r21, Z+7	; 0x07
    31f2:	24 81       	ldd	r18, Z+4	; 0x04
    31f4:	35 81       	ldd	r19, Z+5	; 0x05
    31f6:	42 17       	cp	r20, r18
    31f8:	53 07       	cpc	r21, r19
    31fa:	44 f4       	brge	.+16     	; 0x320c <fputc+0x38>
    31fc:	a0 81       	ld	r26, Z
    31fe:	b1 81       	ldd	r27, Z+1	; 0x01
    3200:	9d 01       	movw	r18, r26
    3202:	2f 5f       	subi	r18, 0xFF	; 255
    3204:	3f 4f       	sbci	r19, 0xFF	; 255
    3206:	31 83       	std	Z+1, r19	; 0x01
    3208:	20 83       	st	Z, r18
    320a:	8c 93       	st	X, r24
    320c:	26 81       	ldd	r18, Z+6	; 0x06
    320e:	37 81       	ldd	r19, Z+7	; 0x07
    3210:	2f 5f       	subi	r18, 0xFF	; 255
    3212:	3f 4f       	sbci	r19, 0xFF	; 255
    3214:	37 83       	std	Z+7, r19	; 0x07
    3216:	26 83       	std	Z+6, r18	; 0x06
    3218:	14 c0       	rjmp	.+40     	; 0x3242 <fputc+0x6e>
    321a:	8b 01       	movw	r16, r22
    321c:	ec 01       	movw	r28, r24
    321e:	fb 01       	movw	r30, r22
    3220:	00 84       	ldd	r0, Z+8	; 0x08
    3222:	f1 85       	ldd	r31, Z+9	; 0x09
    3224:	e0 2d       	mov	r30, r0
    3226:	09 95       	icall
    3228:	89 2b       	or	r24, r25
    322a:	e1 f6       	brne	.-72     	; 0x31e4 <fputc+0x10>
    322c:	d8 01       	movw	r26, r16
    322e:	16 96       	adiw	r26, 0x06	; 6
    3230:	8d 91       	ld	r24, X+
    3232:	9c 91       	ld	r25, X
    3234:	17 97       	sbiw	r26, 0x07	; 7
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	17 96       	adiw	r26, 0x07	; 7
    323a:	9c 93       	st	X, r25
    323c:	8e 93       	st	-X, r24
    323e:	16 97       	sbiw	r26, 0x06	; 6
    3240:	ce 01       	movw	r24, r28
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	08 95       	ret

0000324c <__ultoa_invert>:
    324c:	fa 01       	movw	r30, r20
    324e:	aa 27       	eor	r26, r26
    3250:	28 30       	cpi	r18, 0x08	; 8
    3252:	51 f1       	breq	.+84     	; 0x32a8 <__ultoa_invert+0x5c>
    3254:	20 31       	cpi	r18, 0x10	; 16
    3256:	81 f1       	breq	.+96     	; 0x32b8 <__ultoa_invert+0x6c>
    3258:	e8 94       	clt
    325a:	6f 93       	push	r22
    325c:	6e 7f       	andi	r22, 0xFE	; 254
    325e:	6e 5f       	subi	r22, 0xFE	; 254
    3260:	7f 4f       	sbci	r23, 0xFF	; 255
    3262:	8f 4f       	sbci	r24, 0xFF	; 255
    3264:	9f 4f       	sbci	r25, 0xFF	; 255
    3266:	af 4f       	sbci	r26, 0xFF	; 255
    3268:	b1 e0       	ldi	r27, 0x01	; 1
    326a:	3e d0       	rcall	.+124    	; 0x32e8 <__ultoa_invert+0x9c>
    326c:	b4 e0       	ldi	r27, 0x04	; 4
    326e:	3c d0       	rcall	.+120    	; 0x32e8 <__ultoa_invert+0x9c>
    3270:	67 0f       	add	r22, r23
    3272:	78 1f       	adc	r23, r24
    3274:	89 1f       	adc	r24, r25
    3276:	9a 1f       	adc	r25, r26
    3278:	a1 1d       	adc	r26, r1
    327a:	68 0f       	add	r22, r24
    327c:	79 1f       	adc	r23, r25
    327e:	8a 1f       	adc	r24, r26
    3280:	91 1d       	adc	r25, r1
    3282:	a1 1d       	adc	r26, r1
    3284:	6a 0f       	add	r22, r26
    3286:	71 1d       	adc	r23, r1
    3288:	81 1d       	adc	r24, r1
    328a:	91 1d       	adc	r25, r1
    328c:	a1 1d       	adc	r26, r1
    328e:	20 d0       	rcall	.+64     	; 0x32d0 <__ultoa_invert+0x84>
    3290:	09 f4       	brne	.+2      	; 0x3294 <__ultoa_invert+0x48>
    3292:	68 94       	set
    3294:	3f 91       	pop	r19
    3296:	2a e0       	ldi	r18, 0x0A	; 10
    3298:	26 9f       	mul	r18, r22
    329a:	11 24       	eor	r1, r1
    329c:	30 19       	sub	r19, r0
    329e:	30 5d       	subi	r19, 0xD0	; 208
    32a0:	31 93       	st	Z+, r19
    32a2:	de f6       	brtc	.-74     	; 0x325a <__ultoa_invert+0xe>
    32a4:	cf 01       	movw	r24, r30
    32a6:	08 95       	ret
    32a8:	46 2f       	mov	r20, r22
    32aa:	47 70       	andi	r20, 0x07	; 7
    32ac:	40 5d       	subi	r20, 0xD0	; 208
    32ae:	41 93       	st	Z+, r20
    32b0:	b3 e0       	ldi	r27, 0x03	; 3
    32b2:	0f d0       	rcall	.+30     	; 0x32d2 <__ultoa_invert+0x86>
    32b4:	c9 f7       	brne	.-14     	; 0x32a8 <__ultoa_invert+0x5c>
    32b6:	f6 cf       	rjmp	.-20     	; 0x32a4 <__ultoa_invert+0x58>
    32b8:	46 2f       	mov	r20, r22
    32ba:	4f 70       	andi	r20, 0x0F	; 15
    32bc:	40 5d       	subi	r20, 0xD0	; 208
    32be:	4a 33       	cpi	r20, 0x3A	; 58
    32c0:	18 f0       	brcs	.+6      	; 0x32c8 <__ultoa_invert+0x7c>
    32c2:	49 5d       	subi	r20, 0xD9	; 217
    32c4:	31 fd       	sbrc	r19, 1
    32c6:	40 52       	subi	r20, 0x20	; 32
    32c8:	41 93       	st	Z+, r20
    32ca:	02 d0       	rcall	.+4      	; 0x32d0 <__ultoa_invert+0x84>
    32cc:	a9 f7       	brne	.-22     	; 0x32b8 <__ultoa_invert+0x6c>
    32ce:	ea cf       	rjmp	.-44     	; 0x32a4 <__ultoa_invert+0x58>
    32d0:	b4 e0       	ldi	r27, 0x04	; 4
    32d2:	a6 95       	lsr	r26
    32d4:	97 95       	ror	r25
    32d6:	87 95       	ror	r24
    32d8:	77 95       	ror	r23
    32da:	67 95       	ror	r22
    32dc:	ba 95       	dec	r27
    32de:	c9 f7       	brne	.-14     	; 0x32d2 <__ultoa_invert+0x86>
    32e0:	00 97       	sbiw	r24, 0x00	; 0
    32e2:	61 05       	cpc	r22, r1
    32e4:	71 05       	cpc	r23, r1
    32e6:	08 95       	ret
    32e8:	9b 01       	movw	r18, r22
    32ea:	ac 01       	movw	r20, r24
    32ec:	0a 2e       	mov	r0, r26
    32ee:	06 94       	lsr	r0
    32f0:	57 95       	ror	r21
    32f2:	47 95       	ror	r20
    32f4:	37 95       	ror	r19
    32f6:	27 95       	ror	r18
    32f8:	ba 95       	dec	r27
    32fa:	c9 f7       	brne	.-14     	; 0x32ee <__ultoa_invert+0xa2>
    32fc:	62 0f       	add	r22, r18
    32fe:	73 1f       	adc	r23, r19
    3300:	84 1f       	adc	r24, r20
    3302:	95 1f       	adc	r25, r21
    3304:	a0 1d       	adc	r26, r0
    3306:	08 95       	ret

00003308 <eeprom_read_byte>:
    3308:	f9 99       	sbic	0x1f, 1	; 31
    330a:	fe cf       	rjmp	.-4      	; 0x3308 <eeprom_read_byte>
    330c:	92 bd       	out	0x22, r25	; 34
    330e:	81 bd       	out	0x21, r24	; 33
    3310:	f8 9a       	sbi	0x1f, 0	; 31
    3312:	99 27       	eor	r25, r25
    3314:	80 b5       	in	r24, 0x20	; 32
    3316:	08 95       	ret

00003318 <eeprom_read_dword>:
    3318:	a6 e1       	ldi	r26, 0x16	; 22
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	44 e0       	ldi	r20, 0x04	; 4
    331e:	50 e0       	ldi	r21, 0x00	; 0
    3320:	0c 94 b5 19 	jmp	0x336a	; 0x336a <eeprom_read_blraw>

00003324 <eeprom_read_word>:
    3324:	a8 e1       	ldi	r26, 0x18	; 24
    3326:	b0 e0       	ldi	r27, 0x00	; 0
    3328:	42 e0       	ldi	r20, 0x02	; 2
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	0c 94 b5 19 	jmp	0x336a	; 0x336a <eeprom_read_blraw>

00003330 <eeprom_write_byte>:
    3330:	26 2f       	mov	r18, r22

00003332 <eeprom_write_r18>:
    3332:	f9 99       	sbic	0x1f, 1	; 31
    3334:	fe cf       	rjmp	.-4      	; 0x3332 <eeprom_write_r18>
    3336:	1f ba       	out	0x1f, r1	; 31
    3338:	92 bd       	out	0x22, r25	; 34
    333a:	81 bd       	out	0x21, r24	; 33
    333c:	20 bd       	out	0x20, r18	; 32
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	fa 9a       	sbi	0x1f, 2	; 31
    3344:	f9 9a       	sbi	0x1f, 1	; 31
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	01 96       	adiw	r24, 0x01	; 1
    334a:	08 95       	ret

0000334c <eeprom_write_dword>:
    334c:	24 2f       	mov	r18, r20
    334e:	0e 94 99 19 	call	0x3332	; 0x3332 <eeprom_write_r18>
    3352:	25 2f       	mov	r18, r21
    3354:	0e 94 99 19 	call	0x3332	; 0x3332 <eeprom_write_r18>
    3358:	0c 94 ae 19 	jmp	0x335c	; 0x335c <eeprom_write_word>

0000335c <eeprom_write_word>:
    335c:	0e 94 98 19 	call	0x3330	; 0x3330 <eeprom_write_byte>
    3360:	27 2f       	mov	r18, r23
    3362:	0c 94 99 19 	jmp	0x3332	; 0x3332 <eeprom_write_r18>

00003366 <eeprom_read_block>:
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22

0000336a <eeprom_read_blraw>:
    336a:	fc 01       	movw	r30, r24
    336c:	f9 99       	sbic	0x1f, 1	; 31
    336e:	fe cf       	rjmp	.-4      	; 0x336c <eeprom_read_blraw+0x2>
    3370:	06 c0       	rjmp	.+12     	; 0x337e <eeprom_read_blraw+0x14>
    3372:	f2 bd       	out	0x22, r31	; 34
    3374:	e1 bd       	out	0x21, r30	; 33
    3376:	f8 9a       	sbi	0x1f, 0	; 31
    3378:	31 96       	adiw	r30, 0x01	; 1
    337a:	00 b4       	in	r0, 0x20	; 32
    337c:	0d 92       	st	X+, r0
    337e:	41 50       	subi	r20, 0x01	; 1
    3380:	50 40       	sbci	r21, 0x00	; 0
    3382:	b8 f7       	brcc	.-18     	; 0x3372 <eeprom_read_blraw+0x8>
    3384:	08 95       	ret

00003386 <__muluhisi3>:
    3386:	0e 94 0d 1a 	call	0x341a	; 0x341a <__umulhisi3>
    338a:	a5 9f       	mul	r26, r21
    338c:	90 0d       	add	r25, r0
    338e:	b4 9f       	mul	r27, r20
    3390:	90 0d       	add	r25, r0
    3392:	a4 9f       	mul	r26, r20
    3394:	80 0d       	add	r24, r0
    3396:	91 1d       	adc	r25, r1
    3398:	11 24       	eor	r1, r1
    339a:	08 95       	ret

0000339c <__mulshisi3>:
    339c:	b7 ff       	sbrs	r27, 7
    339e:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__muluhisi3>

000033a2 <__mulohisi3>:
    33a2:	0e 94 c3 19 	call	0x3386	; 0x3386 <__muluhisi3>
    33a6:	82 1b       	sub	r24, r18
    33a8:	93 0b       	sbc	r25, r19
    33aa:	08 95       	ret

000033ac <__prologue_saves__>:
    33ac:	2f 92       	push	r2
    33ae:	3f 92       	push	r3
    33b0:	4f 92       	push	r4
    33b2:	5f 92       	push	r5
    33b4:	6f 92       	push	r6
    33b6:	7f 92       	push	r7
    33b8:	8f 92       	push	r8
    33ba:	9f 92       	push	r9
    33bc:	af 92       	push	r10
    33be:	bf 92       	push	r11
    33c0:	cf 92       	push	r12
    33c2:	df 92       	push	r13
    33c4:	ef 92       	push	r14
    33c6:	ff 92       	push	r15
    33c8:	0f 93       	push	r16
    33ca:	1f 93       	push	r17
    33cc:	cf 93       	push	r28
    33ce:	df 93       	push	r29
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	ca 1b       	sub	r28, r26
    33d6:	db 0b       	sbc	r29, r27
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	09 94       	ijmp

000033e4 <__epilogue_restores__>:
    33e4:	2a 88       	ldd	r2, Y+18	; 0x12
    33e6:	39 88       	ldd	r3, Y+17	; 0x11
    33e8:	48 88       	ldd	r4, Y+16	; 0x10
    33ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    33ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    33f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    33f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    33f6:	b9 84       	ldd	r11, Y+9	; 0x09
    33f8:	c8 84       	ldd	r12, Y+8	; 0x08
    33fa:	df 80       	ldd	r13, Y+7	; 0x07
    33fc:	ee 80       	ldd	r14, Y+6	; 0x06
    33fe:	fd 80       	ldd	r15, Y+5	; 0x05
    3400:	0c 81       	ldd	r16, Y+4	; 0x04
    3402:	1b 81       	ldd	r17, Y+3	; 0x03
    3404:	aa 81       	ldd	r26, Y+2	; 0x02
    3406:	b9 81       	ldd	r27, Y+1	; 0x01
    3408:	ce 0f       	add	r28, r30
    340a:	d1 1d       	adc	r29, r1
    340c:	0f b6       	in	r0, 0x3f	; 63
    340e:	f8 94       	cli
    3410:	de bf       	out	0x3e, r29	; 62
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	cd bf       	out	0x3d, r28	; 61
    3416:	ed 01       	movw	r28, r26
    3418:	08 95       	ret

0000341a <__umulhisi3>:
    341a:	a2 9f       	mul	r26, r18
    341c:	b0 01       	movw	r22, r0
    341e:	b3 9f       	mul	r27, r19
    3420:	c0 01       	movw	r24, r0
    3422:	a3 9f       	mul	r26, r19
    3424:	70 0d       	add	r23, r0
    3426:	81 1d       	adc	r24, r1
    3428:	11 24       	eor	r1, r1
    342a:	91 1d       	adc	r25, r1
    342c:	b2 9f       	mul	r27, r18
    342e:	70 0d       	add	r23, r0
    3430:	81 1d       	adc	r24, r1
    3432:	11 24       	eor	r1, r1
    3434:	91 1d       	adc	r25, r1
    3436:	08 95       	ret

00003438 <_exit>:
    3438:	f8 94       	cli

0000343a <__stop_program>:
    343a:	ff cf       	rjmp	.-2      	; 0x343a <__stop_program>
