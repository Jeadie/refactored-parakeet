
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  0000318a  0000321e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000318a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  00800268  00800268  00003386  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000033e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  00003428  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006492  00000000  00000000  00003ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002087  00000000  00000000  0000a03a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000398f  00000000  00000000  0000c0c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001054  00000000  00000000  0000fa50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019db  00000000  00000000  00010aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002de0  00000000  00000000  0001247f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001525f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 21 12 	jmp	0x2442	; 0x2442 <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 6b 0e 	jmp	0x1cd6	; 0x1cd6 <__vector_20>
      54:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2630>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2628>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2142>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2140>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2094>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2090>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2086>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2076>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2061>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	ea e8       	ldi	r30, 0x8A	; 138
     1fa:	f1 e3       	ldi	r31, 0x31	; 49
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a8 36       	cpi	r26, 0x68	; 104
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	a8 e6       	ldi	r26, 0x68	; 104
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a4 3e       	cpi	r26, 0xE4	; 228
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 3e 0b 	call	0x167c	; 0x167c <main>
     21c:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e7 59       	subi	r30, 0x97	; 151
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	e8 59       	subi	r30, 0x98	; 152
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e7 59       	subi	r30, 0x97	; 151
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <init_buzzer>:
}


int buzzer_times(void){
	return buzzer_time;
}
     344:	08 95       	ret

00000346 <sound_effects_on_mode>:
     346:	89 b1       	in	r24, 0x09	; 9
     348:	83 fb       	bst	r24, 3
     34a:	88 27       	eor	r24, r24
     34c:	80 f9       	bld	r24, 0
     34e:	08 95       	ret

00000350 <buzzer_time_left>:
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
     360:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <buzzer_time>
     364:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <buzzer_time+0x1>
     368:	6a 01       	movw	r12, r20
     36a:	55 0f       	add	r21, r21
     36c:	ee 08       	sbc	r14, r14
     36e:	ff 08       	sbc	r15, r15
     370:	00 91 b3 02 	lds	r16, 0x02B3	; 0x8002b3 <clock_at_tone_start>
     374:	10 91 b4 02 	lds	r17, 0x02B4	; 0x8002b4 <clock_at_tone_start+0x1>
     378:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <clock_at_tone_start+0x2>
     37c:	30 91 b6 02 	lds	r19, 0x02B6	; 0x8002b6 <clock_at_tone_start+0x3>
     380:	c0 0e       	add	r12, r16
     382:	d1 1e       	adc	r13, r17
     384:	e2 1e       	adc	r14, r18
     386:	f3 1e       	adc	r15, r19
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	6c 15       	cp	r22, r12
     38e:	7d 05       	cpc	r23, r13
     390:	8e 05       	cpc	r24, r14
     392:	9f 05       	cpc	r25, r15
     394:	10 f0       	brcs	.+4      	; 0x39a <buzzer_time_left+0x4a>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	c9 01       	movw	r24, r18
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	08 95       	ret

000003aa <next_buzzer_tone>:

void next_buzzer_tone(void){
	current_index ++;
     3aa:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <current_index>
     3ae:	ef 5f       	subi	r30, 0xFF	; 255
     3b0:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <current_index>
	//printf("next tone");
	change_OCR1A(current_tone->buzzer_OCR1A[current_index]);
     3b4:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <current_tone>
     3b8:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <current_tone+0x1>
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	e8 0f       	add	r30, r24
     3c8:	f9 1f       	adc	r31, r25
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	0e 94 75 12 	call	0x24ea	; 0x24ea <change_OCR1A>
	//  printf_P(PSTR("ptr: %d, ocr1a: %d\n"), buzzer_pointer, buzzer_OCR1A[buzzer_pointer]);
	//change_timer_one_frequency(buzzer_frequencies[buzzer_pointer]);

	clock_at_tone_start = get_clock_ticks();
     3d2:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
     3d6:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <clock_at_tone_start>
     3da:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <clock_at_tone_start+0x1>
     3de:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <clock_at_tone_start+0x2>
     3e2:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <clock_at_tone_start+0x3>
	
	//  How long this should be
	buzzer_time = (*current_tone).durations[current_index];
     3e6:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <current_tone>
     3ea:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <current_tone+0x1>
     3ee:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <current_index>
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	12 96       	adiw	r26, 0x02	; 2
     3fa:	8d 91       	ld	r24, X+
     3fc:	9c 91       	ld	r25, X
     3fe:	13 97       	sbiw	r26, 0x03	; 3
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	80 81       	ld	r24, Z
     406:	91 81       	ldd	r25, Z+1	; 0x01
     408:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <buzzer_time+0x1>
     40c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <buzzer_time>
     410:	08 95       	ret

00000412 <reset_buzzer>:
}


void reset_buzzer(void){
	DDRD &= ~(1<<5);
     412:	55 98       	cbi	0x0a, 5	; 10
	//current_index = -1; 
	//printf_P(PSTR("ended")); 
	current_tone = NULL; 
     414:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <current_tone+0x1>
     418:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <current_tone>
     41c:	08 95       	ret

0000041e <play_start_game_sound_effect>:
}

void play_start_game_sound_effect(void){
	current_tone = &Begin_tone;
     41e:	8d e0       	ldi	r24, 0x0D	; 13
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <current_tone+0x1>
     426:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <current_tone>
	current_index = -1;
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <current_index>
	next_buzzer_tone();
     430:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
	if(sound_effects_on_mode()){
     434:	0e 94 a3 01 	call	0x346	; 0x346 <sound_effects_on_mode>
     438:	81 11       	cpse	r24, r1
		enable_timer_one();
     43a:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <enable_timer_one>
     43e:	08 95       	ret

00000440 <play_eating_food_sound_effect>:
	}
}

void play_eating_food_sound_effect(void){
	current_tone = &Eat_tone;
     440:	88 e0       	ldi	r24, 0x08	; 8
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <current_tone+0x1>
     448:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <current_tone>
	current_index = -1;
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <current_index>
	next_buzzer_tone();
     452:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
	if(sound_effects_on_mode()){
     456:	0e 94 a3 01 	call	0x346	; 0x346 <sound_effects_on_mode>
     45a:	81 11       	cpse	r24, r1
		enable_timer_one();
     45c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <enable_timer_one>
     460:	08 95       	ret

00000462 <play_end_game_sound_effect>:
}



void play_end_game_sound_effect(void){
	current_tone = &end_tone;
     462:	82 e1       	ldi	r24, 0x12	; 18
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <current_tone+0x1>
     46a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <current_tone>
	current_index = -1;
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <current_index>
	next_buzzer_tone();
     474:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
	if(sound_effects_on_mode()){
     478:	0e 94 a3 01 	call	0x346	; 0x346 <sound_effects_on_mode>
     47c:	81 11       	cpse	r24, r1
		enable_timer_one();
     47e:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <enable_timer_one>
     482:	08 95       	ret

00000484 <last_tone_in_sequence>:
	}
}


int last_tone_in_sequence(void){
	return current_index+1 >= current_tone->length;
     484:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <current_index>
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	2f 5f       	subi	r18, 0xFF	; 255
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <current_tone>
     492:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <current_tone+0x1>
     496:	44 81       	ldd	r20, Z+4	; 0x04
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	24 17       	cp	r18, r20
     4a0:	35 07       	cpc	r19, r21
     4a2:	14 f4       	brge	.+4      	; 0x4a8 <last_tone_in_sequence+0x24>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
}
     4a8:	08 95       	ret

000004aa <handle_buzzer_loop>:
		}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4aa:	0e 94 a8 01 	call	0x350	; 0x350 <buzzer_time_left>
     4ae:	89 2b       	or	r24, r25
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <handle_buzzer_loop+0x16>
     4b2:	0e 94 42 02 	call	0x484	; 0x484 <last_tone_in_sequence>
     4b6:	89 2b       	or	r24, r25
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <handle_buzzer_loop+0x16>
		//move_cursor(10, 7);
		//printf("END TONE \n");
		reset_buzzer();
     4ba:	0e 94 09 02 	call	0x412	; 0x412 <reset_buzzer>
     4be:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4c0:	0e 94 a8 01 	call	0x350	; 0x350 <buzzer_time_left>
     4c4:	89 2b       	or	r24, r25
     4c6:	11 f4       	brne	.+4      	; 0x4cc <handle_buzzer_loop+0x22>
		next_buzzer_tone();
     4c8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
     4cc:	08 95       	ret

000004ce <EEPROM_has_saved_game>:
	} Game_Save_Data;
	


uint8_t EEPROM_has_saved_game(void){
	uint32_t current_signature = eeprom_read_dword(SAVE_GAME_SIGNATURE_MEMORY); 
     4ce:	80 e8       	ldi	r24, 0x80	; 128
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 3f 18 	call	0x307e	; 0x307e <eeprom_read_dword>
	return (current_signature == SAVE_GAME_SIGNATURE); 
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	61 15       	cp	r22, r1
     4da:	72 41       	sbci	r23, 0x12	; 18
     4dc:	81 05       	cpc	r24, r1
     4de:	91 05       	cpc	r25, r1
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <EEPROM_has_saved_game+0x16>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
}
     4e4:	82 2f       	mov	r24, r18
     4e6:	08 95       	ret

000004e8 <save_game_to_EPPROM>:

void save_game_to_EPPROM(void){
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	62 97       	sbiw	r28, 0x12	; 18
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
	cli();
     506:	f8 94       	cli
	// Save the Food Positions
	eeprom_write_dword(SAVE_GAME_SIGNATURE_MEMORY, SAVE_GAME_SIGNATURE);
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	52 e1       	ldi	r21, 0x12	; 18
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 5d 18 	call	0x30ba	; 0x30ba <eeprom_write_dword>
	
	struct Game_Save_Data new_saved_game; 
	new_saved_game.food_one =get_position_of_food(0);
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 82 07 	call	0xf04	; 0xf04 <get_position_of_food>
     51e:	89 83       	std	Y+1, r24	; 0x01
	new_saved_game.food_two =get_position_of_food(1);
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	0e 94 82 07 	call	0xf04	; 0xf04 <get_position_of_food>
     526:	8a 83       	std	Y+2, r24	; 0x02
	new_saved_game.food_three =get_position_of_food(2);
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	0e 94 82 07 	call	0xf04	; 0xf04 <get_position_of_food>
     52e:	8b 83       	std	Y+3, r24	; 0x03
	new_saved_game.food_four = get_position_of_food(3);
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	0e 94 82 07 	call	0xf04	; 0xf04 <get_position_of_food>
     536:	8c 83       	std	Y+4, r24	; 0x04
	new_saved_game.rat = get_rat_position(); 
     538:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <get_rat_position>
     53c:	8e 83       	std	Y+6, r24	; 0x06
	new_saved_game.game_score = get_score(); 
     53e:	0e 94 8d 0c 	call	0x191a	; 0x191a <get_score>
     542:	69 87       	std	Y+9, r22	; 0x09
     544:	7a 87       	std	Y+10, r23	; 0x0a
     546:	8b 87       	std	Y+11, r24	; 0x0b
     548:	9c 87       	std	Y+12, r25	; 0x0c
	new_saved_game.game_speed = get_current_game_speed(); 
     54a:	0e 94 68 08 	call	0x10d0	; 0x10d0 <get_current_game_speed>
     54e:	98 87       	std	Y+8, r25	; 0x08
     550:	8f 83       	std	Y+7, r24	; 0x07
	new_saved_game.snake_length = get_snake_length(); 
     552:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <get_snake_length>
     556:	8d 87       	std	Y+13, r24	; 0x0d
	new_saved_game.clock_ticks = get_clock_ticks(); 
     558:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
     55c:	6e 87       	std	Y+14, r22	; 0x0e
     55e:	7f 87       	std	Y+15, r23	; 0x0f
     560:	88 8b       	std	Y+16, r24	; 0x10
     562:	99 8b       	std	Y+17, r25	; 0x11
	new_saved_game.snake_direction = get_current_drn(); 
     564:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <get_current_drn>
     568:	8a 8b       	std	Y+18, r24	; 0x12
	
	//  Save Rat Position and Superfood position if superfood is currently on. 
	if (superfood_is_on_board()){
     56a:	0e 94 54 10 	call	0x20a8	; 0x20a8 <superfood_is_on_board>
     56e:	88 23       	and	r24, r24
     570:	21 f0       	breq	.+8      	; 0x57a <save_game_to_EPPROM+0x92>
		new_saved_game.superfood = get_superfood_position();
     572:	0e 94 9e 10 	call	0x213c	; 0x213c <get_superfood_position>
     576:	8d 83       	std	Y+5, r24	; 0x05
     578:	02 c0       	rjmp	.+4      	; 0x57e <save_game_to_EPPROM+0x96>
	} else{
		new_saved_game.superfood =  0x08; 
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	8d 83       	std	Y+5, r24	; 0x05
	}
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 
     57e:	42 e1       	ldi	r20, 0x12	; 18
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	60 ea       	ldi	r22, 0xA0	; 160
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
     58e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <get_snake_tail_index>
     592:	18 2f       	mov	r17, r24
     594:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <get_snake_head_index>
     598:	81 17       	cp	r24, r17
     59a:	08 f0       	brcs	.+2      	; 0x59e <save_game_to_EPPROM+0xb6>
     59c:	43 c0       	rjmp	.+134    	; 0x624 <save_game_to_EPPROM+0x13c>
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     59e:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <get_snake_tail_index>
     5a2:	d8 2e       	mov	r13, r24
     5a4:	08 2f       	mov	r16, r24
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	01 32       	cpi	r16, 0x21	; 33
     5aa:	11 05       	cpc	r17, r1
     5ac:	1c f5       	brge	.+70     	; 0x5f4 <save_game_to_EPPROM+0x10c>
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f0 e3       	ldi	r31, 0x30	; 48
     5b2:	ef 2e       	mov	r14, r31
     5b4:	f2 e0       	ldi	r31, 0x02	; 2
     5b6:	ff 2e       	mov	r15, r31
     5b8:	f0 2d       	mov	r31, r0
			eeprom_write_byte(current_snake_position_memory, 
     5ba:	80 2f       	mov	r24, r16
     5bc:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <get_snake_position_at_index>
     5c0:	68 2f       	mov	r22, r24
     5c2:	c7 01       	movw	r24, r14
     5c4:	0e 94 4f 18 	call	0x309e	; 0x309e <eeprom_write_byte>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	e8 0e       	add	r14, r24
     5cc:	f1 1c       	adc	r15, r1
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	01 32       	cpi	r16, 0x21	; 33
     5d4:	11 05       	cpc	r17, r1
     5d6:	89 f7       	brne	.-30     	; 0x5ba <save_game_to_EPPROM+0xd2>
     5d8:	0d 2d       	mov	r16, r13
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	11 95       	neg	r17
     5de:	01 95       	neg	r16
     5e0:	11 09       	sbc	r17, r1
     5e2:	00 0f       	add	r16, r16
     5e4:	11 1f       	adc	r17, r17
     5e6:	00 0f       	add	r16, r16
     5e8:	11 1f       	adc	r17, r17
     5ea:	00 0f       	add	r16, r16
     5ec:	11 1f       	adc	r17, r17
     5ee:	08 5c       	subi	r16, 0xC8	; 200
     5f0:	1c 4f       	sbci	r17, 0xFC	; 252
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <save_game_to_EPPROM+0x110>
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     5f4:	00 e3       	ldi	r16, 0x30	; 48
     5f6:	12 e0       	ldi	r17, 0x02	; 2
     5f8:	e1 2c       	mov	r14, r1
     5fa:	f1 2c       	mov	r15, r1
     5fc:	0c c0       	rjmp	.+24     	; 0x616 <save_game_to_EPPROM+0x12e>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
			eeprom_write_byte(current_snake_position_memory,
     5fe:	8e 2d       	mov	r24, r14
     600:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <get_snake_position_at_index>
     604:	68 2f       	mov	r22, r24
     606:	c8 01       	movw	r24, r16
     608:	0e 94 4f 18 	call	0x309e	; 0x309e <eeprom_write_byte>
			get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory +=0x08;
     60c:	08 5f       	subi	r16, 0xF8	; 248
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
			eeprom_write_byte(current_snake_position_memory, 
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	e8 1a       	sub	r14, r24
     614:	f8 0a       	sbc	r15, r24
     616:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <get_snake_head_index>
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	8e 15       	cp	r24, r14
     61e:	9f 05       	cpc	r25, r15
     620:	74 f7       	brge	.-36     	; 0x5fe <save_game_to_EPPROM+0x116>
     622:	19 c0       	rjmp	.+50     	; 0x656 <save_game_to_EPPROM+0x16e>
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     624:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <get_snake_tail_index>
     628:	e8 2e       	mov	r14, r24
     62a:	f1 2c       	mov	r15, r1
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     62c:	00 e3       	ldi	r16, 0x30	; 48
     62e:	12 e0       	ldi	r17, 0x02	; 2
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     630:	0c c0       	rjmp	.+24     	; 0x64a <save_game_to_EPPROM+0x162>
			eeprom_write_byte(current_snake_position_memory, get_snake_position_at_index(i));
     632:	8e 2d       	mov	r24, r14
     634:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <get_snake_position_at_index>
     638:	68 2f       	mov	r22, r24
     63a:	c8 01       	movw	r24, r16
     63c:	0e 94 4f 18 	call	0x309e	; 0x309e <eeprom_write_byte>
			current_snake_position_memory +=0x08;
     640:	08 5f       	subi	r16, 0xF8	; 248
     642:	1f 4f       	sbci	r17, 0xFF	; 255
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	e8 1a       	sub	r14, r24
     648:	f8 0a       	sbc	r15, r24
     64a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <get_snake_head_index>
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8e 15       	cp	r24, r14
     652:	9f 05       	cpc	r25, r15
     654:	74 f7       	brge	.-36     	; 0x632 <save_game_to_EPPROM+0x14a>
			
		}
	}
	
	//  Add an invalid PosnType byte to signify the end of the snake positions. 
	eeprom_write_byte(current_snake_position_memory,0x08);
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	c8 01       	movw	r24, r16
     65a:	0e 94 4f 18 	call	0x309e	; 0x309e <eeprom_write_byte>
	//print_save_details();
	sei();
     65e:	78 94       	sei

}
     660:	62 96       	adiw	r28, 0x12	; 18
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	08 95       	ret

0000067c <add_food_to_board>:
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
	}
}

void add_food_to_board(PosnType food_pos){
     67c:	cf 93       	push	r28
     67e:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     680:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <is_position_valid>
     684:	88 23       	and	r24, r24
     686:	89 f0       	breq	.+34     	; 0x6aa <add_food_to_board+0x2e>
		foodPositions[numFoodItems] = food_pos;
     688:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <numFoodItems>
     68c:	0e 2e       	mov	r0, r30
     68e:	00 0c       	add	r0, r0
     690:	ff 0b       	sbc	r31, r31
     692:	e3 54       	subi	r30, 0x43	; 67
     694:	fd 4f       	sbci	r31, 0xFD	; 253
     696:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     698:	63 e3       	ldi	r22, 0x33	; 51
     69a:	8c 2f       	mov	r24, r28
     69c:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
		numFoodItems++; 
     6a0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <numFoodItems>
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <numFoodItems>
	}
}
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <load_rat_from_EEPROM>:
void load_rat_from_EEPROM(PosnType rat_pos){
     6ae:	cf 93       	push	r28
     6b0:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     6b2:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <is_position_valid>
     6b6:	88 23       	and	r24, r24
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <load_rat_from_EEPROM+0x14>
		set_rat_at_pos(rat_pos); 
     6ba:	8c 2f       	mov	r24, r28
     6bc:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <set_rat_at_pos>
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <load_rat_from_EEPROM+0x18>
	}else{
		add_new_rat_position();
     6c2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <add_new_rat_position>
	}
}
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(PosnType super_food){
     6ca:	cf 93       	push	r28
     6cc:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     6ce:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <is_position_valid>
     6d2:	88 23       	and	r24, r24
     6d4:	21 f0       	breq	.+8      	; 0x6de <load_superfood_from_EEPROM+0x14>
		load_superfood(super_food);
     6d6:	8c 2f       	mov	r24, r28
     6d8:	0e 94 4e 10 	call	0x209c	; 0x209c <load_superfood>
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <load_superfood_from_EEPROM+0x18>
	}else{
		remove_superfood_from_board(); 
     6de:	0e 94 7d 10 	call	0x20fa	; 0x20fa <remove_superfood_from_board>
	}
}
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     6f4:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <get_snake_length>
     6f8:	81 50       	subi	r24, 0x01	; 1
     6fa:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <set_snake_head_pointer>
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
     6fe:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     700:	c0 e3       	ldi	r28, 0x30	; 48
     702:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     704:	ce 01       	movw	r24, r28
     706:	0e 94 37 18 	call	0x306e	; 0x306e <eeprom_read_byte>
     70a:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     70c:	61 2f       	mov	r22, r17
     70e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     712:	60 ef       	ldi	r22, 0xF0	; 240
     714:	80 2f       	mov	r24, r16
     716:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
		snake_memory_position +=8; 
     71a:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     71c:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 37 18 	call	0x306e	; 0x306e <eeprom_read_byte>
     724:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <is_position_valid>
     728:	81 11       	cpse	r24, r1
     72a:	ec cf       	rjmp	.-40     	; 0x704 <load_snake_from_EPPROM+0x1e>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     72c:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <get_snake_head_position>
     730:	6f e0       	ldi	r22, 0x0F	; 15
     732:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>

}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <new_game_from_EEPROM>:
	//print_save_details();
	sei();

}

void new_game_from_EEPROM(void){
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	62 97       	sbiw	r28, 0x12	; 18
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
	if(EEPROM_has_saved_game()){
     754:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
     758:	88 23       	and	r24, r24
     75a:	09 f4       	brne	.+2      	; 0x75e <new_game_from_EEPROM+0x1e>
     75c:	42 c0       	rjmp	.+132    	; 0x7e2 <new_game_from_EEPROM+0xa2>
		clear_terminal(); 
     75e:	0e 94 31 11 	call	0x2262	; 0x2262 <clear_terminal>
		ledmatrix_clear();
     762:	0e 94 53 09 	call	0x12a6	; 0x12a6 <ledmatrix_clear>
		init_score_on_terminal();
     766:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <init_score_on_terminal>
		
		struct Game_Save_Data game_from_EEPROM; 
		eeprom_read_block(&game_from_EEPROM, SAVED_DATA_START, 18); 
     76a:	42 e1       	ldi	r20, 0x12	; 18
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 ea       	ldi	r22, 0xA0	; 160
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
		
		// Methods from init_game(); 
		set_score(game_from_EEPROM.game_score);
     77a:	69 85       	ldd	r22, Y+9	; 0x09
     77c:	7a 85       	ldd	r23, Y+10	; 0x0a
     77e:	8b 85       	ldd	r24, Y+11	; 0x0b
     780:	9c 85       	ldd	r25, Y+12	; 0x0c
     782:	0e 94 96 0c 	call	0x192c	; 0x192c <set_score>
		set_clock_ticks(game_from_EEPROM.clock_ticks); 
     786:	6e 85       	ldd	r22, Y+14	; 0x0e
     788:	7f 85       	ldd	r23, Y+15	; 0x0f
     78a:	88 89       	ldd	r24, Y+16	; 0x10
     78c:	99 89       	ldd	r25, Y+17	; 0x11
     78e:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <set_clock_ticks>
		update_terminal_score(); 
     792:	0e 94 95 11 	call	0x232a	; 0x232a <update_terminal_score>
		set_game_speed(game_from_EEPROM.game_speed);
     796:	8f 81       	ldd	r24, Y+7	; 0x07
     798:	98 85       	ldd	r25, Y+8	; 0x08
     79a:	0e 94 6d 08 	call	0x10da	; 0x10da <set_game_speed>
		load_rat_from_EEPROM(game_from_EEPROM.rat);
     79e:	8e 81       	ldd	r24, Y+6	; 0x06
     7a0:	0e 94 57 03 	call	0x6ae	; 0x6ae <load_rat_from_EEPROM>
		initialise_timer_one();
     7a4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <initialise_timer_one>
	
		// Init food, rats, superfood and snake
		add_food_to_board(game_from_EEPROM.food_one);
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_two);
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_three);
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_four);
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		load_superfood_from_EEPROM( game_from_EEPROM.superfood);
     7c0:	8d 81       	ldd	r24, Y+5	; 0x05
     7c2:	0e 94 65 03 	call	0x6ca	; 0x6ca <load_superfood_from_EEPROM>
		set_snake_length(game_from_EEPROM.snake_length); 
     7c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <set_snake_length>
		reset_snake_drn(game_from_EEPROM.snake_direction); 
     7cc:	8a 89       	ldd	r24, Y+18	; 0x12
     7ce:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <reset_snake_drn>
		load_snake_from_EPPROM();
     7d2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     7d6:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     7da:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     7de:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <load_EEPROM_data_on_next_game>
	}
}
     7e2:	62 96       	adiw	r28, 0x12	; 18
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <move_place_down>:
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
		
	// clear_terminal();
}

void move_place_down(uint16_t mem_position){
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	27 97       	sbiw	r28, 0x07	; 7
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	8c 01       	movw	r16, r24
	struct High_Score_Place high_score_place;
	eeprom_read_block(&high_score_place, mem_position, 7); 
     80e:	47 e0       	ldi	r20, 0x07	; 7
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	bc 01       	movw	r22, r24
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
	uint16_t moved_place = mem_position +64;
	eeprom_write_block(&high_score_place, moved_place, 7);
     81c:	b8 01       	movw	r22, r16
     81e:	60 5c       	subi	r22, 0xC0	; 192
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	47 e0       	ldi	r20, 0x07	; 7
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>
}
     82e:	27 96       	adiw	r28, 0x07	; 7
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(NAME_FOUR); 
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     84c:	08 95       	ret

0000084e <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     84e:	0e 94 22 04 	call	0x844	; 0x844 <move_four_place_down>
	move_place_down(NAME_THREE);
     852:	80 ec       	ldi	r24, 0xC0	; 192
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     85a:	08 95       	ret

0000085c <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     85c:	0e 94 27 04 	call	0x84e	; 0x84e <move_three_place_down>
	move_place_down(NAME_TWO);
     860:	80 e8       	ldi	r24, 0x80	; 128
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     868:	08 95       	ret

0000086a <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     86a:	0e 94 2e 04 	call	0x85c	; 0x85c <move_two_place_down>
	move_place_down(NAME_ONE);
     86e:	80 e4       	ldi	r24, 0x40	; 64
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     876:	08 95       	ret

00000878 <initialise_EEPROM>:
}

void initialise_EEPROM(void){
     878:	cf 93       	push	r28
     87a:	df 93       	push	r29
     87c:	cd b7       	in	r28, 0x3d	; 61
     87e:	de b7       	in	r29, 0x3e	; 62
     880:	27 97       	sbiw	r28, 0x07	; 7
     882:	0f b6       	in	r0, 0x3f	; 63
     884:	f8 94       	cli
     886:	de bf       	out	0x3e, r29	; 62
     888:	0f be       	out	0x3f, r0	; 63
     88a:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     88c:	44 e3       	ldi	r20, 0x34	; 52
     88e:	52 e1       	ldi	r21, 0x12	; 18
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 5d 18 	call	0x30ba	; 0x30ba <eeprom_write_dword>
	struct High_Score_Place empty_score_place;
	empty_score_place.name[0] = ' ';
     89c:	80 e2       	ldi	r24, 0x20	; 32
     89e:	89 83       	std	Y+1, r24	; 0x01
	empty_score_place.name[1] = ' ';
     8a0:	8a 83       	std	Y+2, r24	; 0x02
	empty_score_place.name[2] = ' ';
     8a2:	8b 83       	std	Y+3, r24	; 0x03
	empty_score_place.score = 0; 
     8a4:	1c 82       	std	Y+4, r1	; 0x04
     8a6:	1d 82       	std	Y+5, r1	; 0x05
     8a8:	1e 82       	std	Y+6, r1	; 0x06
     8aa:	1f 82       	std	Y+7, r1	; 0x07
	eeprom_write_block(&empty_score_place, NAME_ONE, 7);
     8ac:	47 e0       	ldi	r20, 0x07	; 7
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	60 e4       	ldi	r22, 0x40	; 64
     8b2:	70 e0       	ldi	r23, 0x00	; 0
     8b4:	ce 01       	movw	r24, r28
     8b6:	01 96       	adiw	r24, 0x01	; 1
     8b8:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_TWO, 7);
     8bc:	47 e0       	ldi	r20, 0x07	; 7
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	60 e8       	ldi	r22, 0x80	; 128
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_THREE, 7);
     8cc:	47 e0       	ldi	r20, 0x07	; 7
     8ce:	50 e0       	ldi	r21, 0x00	; 0
     8d0:	60 ec       	ldi	r22, 0xC0	; 192
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FOUR, 7);
     8dc:	47 e0       	ldi	r20, 0x07	; 7
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	71 e0       	ldi	r23, 0x01	; 1
     8e4:	ce 01       	movw	r24, r28
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FIVE, 7);
     8ec:	47 e0       	ldi	r20, 0x07	; 7
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	60 e4       	ldi	r22, 0x40	; 64
     8f2:	71 e0       	ldi	r23, 0x01	; 1
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>

	}
     8fc:	27 96       	adiw	r28, 0x07	; 7
     8fe:	0f b6       	in	r0, 0x3f	; 63
     900:	f8 94       	cli
     902:	de bf       	out	0x3e, r29	; 62
     904:	0f be       	out	0x3f, r0	; 63
     906:	cd bf       	out	0x3d, r28	; 61
     908:	df 91       	pop	r29
     90a:	cf 91       	pop	r28
     90c:	08 95       	ret

0000090e <EEPROM_High_Score_has_been_initialised>:


uint8_t EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	0e 94 3f 18 	call	0x307e	; 0x307e <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     916:	21 e0       	ldi	r18, 0x01	; 1
     918:	64 33       	cpi	r22, 0x34	; 52
     91a:	72 41       	sbci	r23, 0x12	; 18
     91c:	81 05       	cpc	r24, r1
     91e:	91 05       	cpc	r25, r1
     920:	09 f0       	breq	.+2      	; 0x924 <EEPROM_High_Score_has_been_initialised+0x16>
     922:	20 e0       	ldi	r18, 0x00	; 0
}
     924:	82 2f       	mov	r24, r18
     926:	08 95       	ret

00000928 <is_high_score>:
struct High_Score_Place {
	char name[3];
	uint32_t score;
};

uint8_t is_high_score(void){
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	27 97       	sbiw	r28, 0x07	; 7
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
	uint32_t score = get_score();
     944:	0e 94 8d 0c 	call	0x191a	; 0x191a <get_score>
     948:	6b 01       	movw	r12, r22
     94a:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place;
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     94c:	47 e0       	ldi	r20, 0x07	; 7
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e4       	ldi	r22, 0x40	; 64
     952:	71 e0       	ldi	r23, 0x01	; 1
     954:	ce 01       	movw	r24, r28
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
     95c:	8c 81       	ldd	r24, Y+4	; 0x04
     95e:	9d 81       	ldd	r25, Y+5	; 0x05
     960:	ae 81       	ldd	r26, Y+6	; 0x06
     962:	bf 81       	ldd	r27, Y+7	; 0x07
     964:	c8 16       	cp	r12, r24
     966:	d9 06       	cpc	r13, r25
     968:	ea 06       	cpc	r14, r26
     96a:	fb 06       	cpc	r15, r27
     96c:	38 f4       	brcc	.+14     	; 0x97c <is_high_score+0x54>
     96e:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_High_Score_has_been_initialised>
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	81 11       	cpse	r24, r1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	89 2f       	mov	r24, r25
     97a:	01 c0       	rjmp	.+2      	; 0x97e <is_high_score+0x56>
     97c:	81 e0       	ldi	r24, 0x01	; 1
}
     97e:	27 96       	adiw	r28, 0x07	; 7
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	df 91       	pop	r29
     98c:	cf 91       	pop	r28
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <high_score_position>:

uint16_t high_score_position(void){
     998:	cf 92       	push	r12
     99a:	df 92       	push	r13
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
     9a8:	27 97       	sbiw	r28, 0x07	; 7
     9aa:	0f b6       	in	r0, 0x3f	; 63
     9ac:	f8 94       	cli
     9ae:	de bf       	out	0x3e, r29	; 62
     9b0:	0f be       	out	0x3f, r0	; 63
     9b2:	cd bf       	out	0x3d, r28	; 61
	if (!(EEPROM_High_Score_has_been_initialised())){
     9b4:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_High_Score_has_been_initialised>
     9b8:	88 23       	and	r24, r24
     9ba:	09 f4       	brne	.+2      	; 0x9be <high_score_position+0x26>
     9bc:	5d c0       	rjmp	.+186    	; 0xa78 <high_score_position+0xe0>
		return NAME_ONE;
	}
	
	uint32_t score = get_score(); 
     9be:	0e 94 8d 0c 	call	0x191a	; 0x191a <get_score>
     9c2:	6b 01       	movw	r12, r22
     9c4:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);
     9c6:	47 e0       	ldi	r20, 0x07	; 7
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	60 e4       	ldi	r22, 0x40	; 64
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>

	if (score> current_score_place.score){
     9d6:	8c 81       	ldd	r24, Y+4	; 0x04
     9d8:	9d 81       	ldd	r25, Y+5	; 0x05
     9da:	ae 81       	ldd	r26, Y+6	; 0x06
     9dc:	bf 81       	ldd	r27, Y+7	; 0x07
     9de:	8c 15       	cp	r24, r12
     9e0:	9d 05       	cpc	r25, r13
     9e2:	ae 05       	cpc	r26, r14
     9e4:	bf 05       	cpc	r27, r15
     9e6:	08 f4       	brcc	.+2      	; 0x9ea <high_score_position+0x52>
     9e8:	4a c0       	rjmp	.+148    	; 0xa7e <high_score_position+0xe6>
		return NAME_ONE;
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
     9ea:	47 e0       	ldi	r20, 0x07	; 7
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	60 e8       	ldi	r22, 0x80	; 128
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	ce 01       	movw	r24, r28
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
	if (score> current_score_place.score){
     9fa:	8c 81       	ldd	r24, Y+4	; 0x04
     9fc:	9d 81       	ldd	r25, Y+5	; 0x05
     9fe:	ae 81       	ldd	r26, Y+6	; 0x06
     a00:	bf 81       	ldd	r27, Y+7	; 0x07
     a02:	8c 15       	cp	r24, r12
     a04:	9d 05       	cpc	r25, r13
     a06:	ae 05       	cpc	r26, r14
     a08:	bf 05       	cpc	r27, r15
     a0a:	e0 f1       	brcs	.+120    	; 0xa84 <high_score_position+0xec>
		return NAME_TWO;
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
     a0c:	47 e0       	ldi	r20, 0x07	; 7
     a0e:	50 e0       	ldi	r21, 0x00	; 0
     a10:	60 ec       	ldi	r22, 0xC0	; 192
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	ce 01       	movw	r24, r28
     a16:	01 96       	adiw	r24, 0x01	; 1
     a18:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
	if (score> current_score_place.score){
     a1c:	8c 81       	ldd	r24, Y+4	; 0x04
     a1e:	9d 81       	ldd	r25, Y+5	; 0x05
     a20:	ae 81       	ldd	r26, Y+6	; 0x06
     a22:	bf 81       	ldd	r27, Y+7	; 0x07
     a24:	8c 15       	cp	r24, r12
     a26:	9d 05       	cpc	r25, r13
     a28:	ae 05       	cpc	r26, r14
     a2a:	bf 05       	cpc	r27, r15
     a2c:	70 f1       	brcs	.+92     	; 0xa8a <high_score_position+0xf2>
		return NAME_THREE;
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
     a2e:	47 e0       	ldi	r20, 0x07	; 7
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	71 e0       	ldi	r23, 0x01	; 1
     a36:	ce 01       	movw	r24, r28
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
	if (score> current_score_place.score){
     a3e:	8c 81       	ldd	r24, Y+4	; 0x04
     a40:	9d 81       	ldd	r25, Y+5	; 0x05
     a42:	ae 81       	ldd	r26, Y+6	; 0x06
     a44:	bf 81       	ldd	r27, Y+7	; 0x07
     a46:	8c 15       	cp	r24, r12
     a48:	9d 05       	cpc	r25, r13
     a4a:	ae 05       	cpc	r26, r14
     a4c:	bf 05       	cpc	r27, r15
     a4e:	00 f1       	brcs	.+64     	; 0xa90 <high_score_position+0xf8>
		return NAME_FOUR;
}
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     a50:	47 e0       	ldi	r20, 0x07	; 7
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	60 e4       	ldi	r22, 0x40	; 64
     a56:	71 e0       	ldi	r23, 0x01	; 1
     a58:	ce 01       	movw	r24, r28
     a5a:	01 96       	adiw	r24, 0x01	; 1
     a5c:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
	if (score> current_score_place.score){
     a60:	8c 81       	ldd	r24, Y+4	; 0x04
     a62:	9d 81       	ldd	r25, Y+5	; 0x05
     a64:	ae 81       	ldd	r26, Y+6	; 0x06
     a66:	bf 81       	ldd	r27, Y+7	; 0x07
     a68:	8c 15       	cp	r24, r12
     a6a:	9d 05       	cpc	r25, r13
     a6c:	ae 05       	cpc	r26, r14
     a6e:	bf 05       	cpc	r27, r15
     a70:	90 f0       	brcs	.+36     	; 0xa96 <high_score_position+0xfe>
		return NAME_FIVE;
	}
	return NULL; 
     a72:	80 e0       	ldi	r24, 0x00	; 0
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	11 c0       	rjmp	.+34     	; 0xa9a <high_score_position+0x102>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return NAME_ONE;
     a78:	80 e4       	ldi	r24, 0x40	; 64
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e c0       	rjmp	.+28     	; 0xa9a <high_score_position+0x102>
	uint32_t score = get_score(); 
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);

	if (score> current_score_place.score){
		return NAME_ONE;
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	0b c0       	rjmp	.+22     	; 0xa9a <high_score_position+0x102>
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
	if (score> current_score_place.score){
		return NAME_TWO;
     a84:	80 e8       	ldi	r24, 0x80	; 128
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <high_score_position+0x102>
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
	if (score> current_score_place.score){
		return NAME_THREE;
     a8a:	80 ec       	ldi	r24, 0xC0	; 192
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	05 c0       	rjmp	.+10     	; 0xa9a <high_score_position+0x102>
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
	if (score> current_score_place.score){
		return NAME_FOUR;
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	02 c0       	rjmp	.+4      	; 0xa9a <high_score_position+0x102>
}
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
	if (score> current_score_place.score){
		return NAME_FIVE;
     a96:	80 e4       	ldi	r24, 0x40	; 64
     a98:	91 e0       	ldi	r25, 0x01	; 1
	}
	return NULL; 
	
}
     a9a:	27 96       	adiw	r28, 0x07	; 7
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	f8 94       	cli
     aa0:	de bf       	out	0x3e, r29	; 62
     aa2:	0f be       	out	0x3f, r0	; 63
     aa4:	cd bf       	out	0x3d, r28	; 61
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	08 95       	ret

00000ab4 <handle_sequence_into_EEPROM>:
				current_high_score_name[2] = ' ';
				break; 
			}
		}
	}
void handle_sequence_into_EEPROM(){
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	cd b7       	in	r28, 0x3d	; 61
     abe:	de b7       	in	r29, 0x3e	; 62
     ac0:	27 97       	sbiw	r28, 0x07	; 7
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     acc:	44 e3       	ldi	r20, 0x34	; 52
     ace:	52 e1       	ldi	r21, 0x12	; 18
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 5d 18 	call	0x30ba	; 0x30ba <eeprom_write_dword>
	uint16_t score_position= high_score_position();
     adc:	0e 94 cc 04 	call	0x998	; 0x998 <high_score_position>
     ae0:	8c 01       	movw	r16, r24
		switch(score_position){
     ae2:	80 38       	cpi	r24, 0x80	; 128
     ae4:	91 05       	cpc	r25, r1
     ae6:	91 f0       	breq	.+36     	; 0xb0c <handle_sequence_into_EEPROM+0x58>
     ae8:	20 f4       	brcc	.+8      	; 0xaf2 <handle_sequence_into_EEPROM+0x3e>
     aea:	80 34       	cpi	r24, 0x40	; 64
     aec:	91 05       	cpc	r25, r1
     aee:	89 f0       	breq	.+34     	; 0xb12 <handle_sequence_into_EEPROM+0x5e>
     af0:	12 c0       	rjmp	.+36     	; 0xb16 <handle_sequence_into_EEPROM+0x62>
     af2:	80 3c       	cpi	r24, 0xC0	; 192
     af4:	91 05       	cpc	r25, r1
     af6:	39 f0       	breq	.+14     	; 0xb06 <handle_sequence_into_EEPROM+0x52>
     af8:	01 15       	cp	r16, r1
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	18 07       	cpc	r17, r24
     afe:	59 f4       	brne	.+22     	; 0xb16 <handle_sequence_into_EEPROM+0x62>
			case NAME_FOUR: move_four_place_down(); break;
     b00:	0e 94 22 04 	call	0x844	; 0x844 <move_four_place_down>
     b04:	08 c0       	rjmp	.+16     	; 0xb16 <handle_sequence_into_EEPROM+0x62>
			case NAME_THREE: move_three_place_down(); break;
     b06:	0e 94 27 04 	call	0x84e	; 0x84e <move_three_place_down>
     b0a:	05 c0       	rjmp	.+10     	; 0xb16 <handle_sequence_into_EEPROM+0x62>
			case NAME_TWO: move_two_place_down(); break;
     b0c:	0e 94 2e 04 	call	0x85c	; 0x85c <move_two_place_down>
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <handle_sequence_into_EEPROM+0x62>
			case NAME_ONE: move_one_place_down(); break;
     b12:	0e 94 35 04 	call	0x86a	; 0x86a <move_one_place_down>
		}
	struct High_Score_Place new_score; 
	new_score.name[0] = current_high_score_name[0];
     b16:	e4 e7       	ldi	r30, 0x74	; 116
     b18:	f2 e0       	ldi	r31, 0x02	; 2
     b1a:	80 81       	ld	r24, Z
     b1c:	89 83       	std	Y+1, r24	; 0x01
	new_score.name[1] = current_high_score_name[1];
     b1e:	81 81       	ldd	r24, Z+1	; 0x01
     b20:	8a 83       	std	Y+2, r24	; 0x02
	new_score.name[2] = current_high_score_name[2];
     b22:	82 81       	ldd	r24, Z+2	; 0x02
     b24:	8b 83       	std	Y+3, r24	; 0x03
	new_score.score = get_score();
     b26:	0e 94 8d 0c 	call	0x191a	; 0x191a <get_score>
     b2a:	6c 83       	std	Y+4, r22	; 0x04
     b2c:	7d 83       	std	Y+5, r23	; 0x05
     b2e:	8e 83       	std	Y+6, r24	; 0x06
     b30:	9f 83       	std	Y+7, r25	; 0x07
	
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
     b32:	47 e0       	ldi	r20, 0x07	; 7
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	b8 01       	movw	r22, r16
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 45 18 	call	0x308a	; 0x308a <eeprom_write_block>
		
	// clear_terminal();
}
     b40:	27 96       	adiw	r28, 0x07	; 7
     b42:	0f b6       	in	r0, 0x3f	; 63
     b44:	f8 94       	cli
     b46:	de bf       	out	0x3e, r29	; 62
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	cd bf       	out	0x3d, r28	; 61
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <set_high_score_name>:
	}
	return NULL; 
	
}

void set_high_score_name(void){
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
	move_cursor(10,8);
     b62:	68 e0       	ldi	r22, 0x08	; 8
     b64:	8a e0       	ldi	r24, 0x0A	; 10
     b66:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     b6a:	80 e7       	ldi	r24, 0x70	; 112
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	9f 93       	push	r25
     b70:	8f 93       	push	r24
     b72:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     b7a:	00 e0       	ldi	r16, 0x00	; 0
     b7c:	10 e0       	ldi	r17, 0x00	; 0
		show_cursor(); 
		serial_input = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     b7e:	0f 2e       	mov	r0, r31
     b80:	fe ed       	ldi	r31, 0xDE	; 222
     b82:	ef 2e       	mov	r14, r31
     b84:	f3 e0       	ldi	r31, 0x03	; 3
     b86:	ff 2e       	mov	r15, r31
     b88:	f0 2d       	mov	r31, r0
	move_cursor(10,8);
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input;
	while (1){
		show_cursor(); 
     b8a:	0e 94 50 11 	call	0x22a0	; 0x22a0 <show_cursor>
		serial_input = -1;
		
		if(serial_input_available()) {
     b8e:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <serial_input_available>
     b92:	88 23       	and	r24, r24
     b94:	d1 f3       	breq	.-12     	; 0xb8a <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     b96:	f7 01       	movw	r30, r14
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <fgetc>
     ba0:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     ba2:	98 2f       	mov	r25, r24
     ba4:	91 54       	subi	r25, 0x41	; 65
     ba6:	9a 33       	cpi	r25, 0x3A	; 58
     ba8:	98 f4       	brcc	.+38     	; 0xbd0 <set_high_score_name+0x7a>
     baa:	03 30       	cpi	r16, 0x03	; 3
     bac:	11 05       	cpc	r17, r1
     bae:	84 f4       	brge	.+32     	; 0xbd0 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     bb0:	69 e0       	ldi	r22, 0x09	; 9
     bb2:	8a e0       	ldi	r24, 0x0A	; 10
     bb4:	80 0f       	add	r24, r16
     bb6:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     bba:	f8 01       	movw	r30, r16
     bbc:	ec 58       	subi	r30, 0x8C	; 140
     bbe:	fd 4f       	sbci	r31, 0xFD	; 253
     bc0:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     bc2:	ce 01       	movw	r24, r28
     bc4:	99 27       	eor	r25, r25
     bc6:	0e 94 5f 15 	call	0x2abe	; 0x2abe <putchar>
				score_name_pointer++;
     bca:	0f 5f       	subi	r16, 0xFF	; 255
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	dd cf       	rjmp	.-70     	; 0xb8a <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>1){
     bd0:	8a 30       	cpi	r24, 0x0A	; 10
     bd2:	21 f4       	brne	.+8      	; 0xbdc <set_high_score_name+0x86>
     bd4:	02 30       	cpi	r16, 0x02	; 2
     bd6:	11 05       	cpc	r17, r1
     bd8:	c4 f2       	brlt	.-80     	; 0xb8a <set_high_score_name+0x34>
     bda:	11 c0       	rjmp	.+34     	; 0xbfe <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     bdc:	8f 37       	cpi	r24, 0x7F	; 127
     bde:	a9 f6       	brne	.-86     	; 0xb8a <set_high_score_name+0x34>
				printf("%c", ' ');
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 5f 15 	call	0x2abe	; 0x2abe <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     be8:	10 16       	cp	r1, r16
     bea:	11 06       	cpc	r1, r17
     bec:	14 f4       	brge	.+4      	; 0xbf2 <set_high_score_name+0x9c>
     bee:	01 50       	subi	r16, 0x01	; 1
     bf0:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     bf2:	69 e0       	ldi	r22, 0x09	; 9
     bf4:	8a e0       	ldi	r24, 0x0A	; 10
     bf6:	80 0f       	add	r24, r16
     bf8:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
     bfc:	c6 cf       	rjmp	.-116    	; 0xb8a <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     bfe:	f9 99       	sbic	0x1f, 1	; 31
     c00:	fe cf       	rjmp	.-4      	; 0xbfe <set_high_score_name+0xa8>
				handle_sequence_into_EEPROM();
     c02:	0e 94 5a 05 	call	0xab4	; 0xab4 <handle_sequence_into_EEPROM>
				current_high_score_name[0] = ' ';
     c06:	e4 e7       	ldi	r30, 0x74	; 116
     c08:	f2 e0       	ldi	r31, 0x02	; 2
     c0a:	80 e2       	ldi	r24, 0x20	; 32
     c0c:	80 83       	st	Z, r24
				current_high_score_name[1] = ' ';
     c0e:	81 83       	std	Z+1, r24	; 0x01
				current_high_score_name[2] = ' ';
     c10:	82 83       	std	Z+2, r24	; 0x02
				break; 
			}
		}
	}
     c12:	df 91       	pop	r29
     c14:	cf 91       	pop	r28
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	ff 90       	pop	r15
     c1c:	ef 90       	pop	r14
     c1e:	08 95       	ret

00000c20 <display_EEPROM_high_score>:
uint8_t EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	27 97       	sbiw	r28, 0x07	; 7
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	de bf       	out	0x3e, r29	; 62
     c30:	0f be       	out	0x3f, r0	; 63
     c32:	cd bf       	out	0x3d, r28	; 61
	move_cursor(10,11);
     c34:	6b e0       	ldi	r22, 0x0B	; 11
     c36:	8a e0       	ldi	r24, 0x0A	; 10
     c38:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     c3c:	8c e7       	ldi	r24, 0x7C	; 124
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	9f 93       	push	r25
     c42:	8f 93       	push	r24
     c44:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
	move_cursor(10,13);
     c48:	6d e0       	ldi	r22, 0x0D	; 13
     c4a:	8a e0       	ldi	r24, 0x0A	; 10
     c4c:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     c50:	0e 94 87 04 	call	0x90e	; 0x90e <EEPROM_High_Score_has_been_initialised>
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	88 23       	and	r24, r24
     c5a:	09 f4       	brne	.+2      	; 0xc5e <display_EEPROM_high_score+0x3e>
     c5c:	b6 c0       	rjmp	.+364    	; 0xdca <display_EEPROM_high_score+0x1aa>
		struct High_Score_Place score_place_to_display; 
		eeprom_read_block(&score_place_to_display, NAME_ONE, 7);
     c5e:	47 e0       	ldi	r20, 0x07	; 7
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	60 e4       	ldi	r22, 0x40	; 64
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	ce 01       	movw	r24, r28
     c68:	01 96       	adiw	r24, 0x01	; 1
     c6a:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
		printf("First: %c%c%c %lu", score_place_to_display.name[0], 
     c6e:	8f 81       	ldd	r24, Y+7	; 0x07
     c70:	8f 93       	push	r24
     c72:	8e 81       	ldd	r24, Y+6	; 0x06
     c74:	8f 93       	push	r24
     c76:	8d 81       	ldd	r24, Y+5	; 0x05
     c78:	8f 93       	push	r24
     c7a:	8c 81       	ldd	r24, Y+4	; 0x04
     c7c:	8f 93       	push	r24
     c7e:	8b 81       	ldd	r24, Y+3	; 0x03
     c80:	1f 92       	push	r1
     c82:	8f 93       	push	r24
     c84:	8a 81       	ldd	r24, Y+2	; 0x02
     c86:	1f 92       	push	r1
     c88:	8f 93       	push	r24
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	1f 92       	push	r1
     c8e:	8f 93       	push	r24
     c90:	89 ea       	ldi	r24, 0xA9	; 169
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
									score_place_to_display.name[1], 
									score_place_to_display.name[2], 
									score_place_to_display.score);
		
		move_cursor(10,14);					
     c9c:	6e e0       	ldi	r22, 0x0E	; 14
     c9e:	8a e0       	ldi	r24, 0x0A	; 10
     ca0:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
		
		eeprom_read_block(&score_place_to_display, NAME_TWO, 7);
     ca4:	47 e0       	ldi	r20, 0x07	; 7
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	60 e8       	ldi	r22, 0x80	; 128
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	ce 01       	movw	r24, r28
     cae:	01 96       	adiw	r24, 0x01	; 1
     cb0:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
		printf("Second: %c%c%c %lu", score_place_to_display.name[0],
     cb4:	8f 81       	ldd	r24, Y+7	; 0x07
     cb6:	8f 93       	push	r24
     cb8:	8e 81       	ldd	r24, Y+6	; 0x06
     cba:	8f 93       	push	r24
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	8f 93       	push	r24
     cc0:	8c 81       	ldd	r24, Y+4	; 0x04
     cc2:	8f 93       	push	r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	1f 92       	push	r1
     cc8:	8f 93       	push	r24
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	1f 92       	push	r1
     cce:	8f 93       	push	r24
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	1f 92       	push	r1
     cd4:	8f 93       	push	r24
     cd6:	8b eb       	ldi	r24, 0xBB	; 187
     cd8:	91 e0       	ldi	r25, 0x01	; 1
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,15);
     ce2:	6f e0       	ldi	r22, 0x0F	; 15
     ce4:	8a e0       	ldi	r24, 0x0A	; 10
     ce6:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_THREE, 7);
     cea:	47 e0       	ldi	r20, 0x07	; 7
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 ec       	ldi	r22, 0xC0	; 192
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	ce 01       	movw	r24, r28
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
		printf("Third: %c%c%c %lu", score_place_to_display.name[0],
     cfa:	8f 81       	ldd	r24, Y+7	; 0x07
     cfc:	8f 93       	push	r24
     cfe:	8e 81       	ldd	r24, Y+6	; 0x06
     d00:	8f 93       	push	r24
     d02:	8d 81       	ldd	r24, Y+5	; 0x05
     d04:	8f 93       	push	r24
     d06:	8c 81       	ldd	r24, Y+4	; 0x04
     d08:	8f 93       	push	r24
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	1f 92       	push	r1
     d0e:	8f 93       	push	r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	1f 92       	push	r1
     d14:	8f 93       	push	r24
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	1f 92       	push	r1
     d1a:	8f 93       	push	r24
     d1c:	8e ec       	ldi	r24, 0xCE	; 206
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	9f 93       	push	r25
     d22:	8f 93       	push	r24
     d24:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,16);
     d28:	0f b6       	in	r0, 0x3f	; 63
     d2a:	f8 94       	cli
     d2c:	de bf       	out	0x3e, r29	; 62
     d2e:	0f be       	out	0x3f, r0	; 63
     d30:	cd bf       	out	0x3d, r28	; 61
     d32:	60 e1       	ldi	r22, 0x10	; 16
     d34:	8a e0       	ldi	r24, 0x0A	; 10
     d36:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FOUR, 7);
     d3a:	47 e0       	ldi	r20, 0x07	; 7
     d3c:	50 e0       	ldi	r21, 0x00	; 0
     d3e:	60 e0       	ldi	r22, 0x00	; 0
     d40:	71 e0       	ldi	r23, 0x01	; 1
     d42:	ce 01       	movw	r24, r28
     d44:	01 96       	adiw	r24, 0x01	; 1
     d46:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
		printf("Fourth: %c%c%c %lu", score_place_to_display.name[0],
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	8f 93       	push	r24
     d4e:	8e 81       	ldd	r24, Y+6	; 0x06
     d50:	8f 93       	push	r24
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	8f 93       	push	r24
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	8f 93       	push	r24
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	1f 92       	push	r1
     d5e:	8f 93       	push	r24
     d60:	8a 81       	ldd	r24, Y+2	; 0x02
     d62:	1f 92       	push	r1
     d64:	8f 93       	push	r24
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	1f 92       	push	r1
     d6a:	8f 93       	push	r24
     d6c:	80 ee       	ldi	r24, 0xE0	; 224
     d6e:	91 e0       	ldi	r25, 0x01	; 1
     d70:	9f 93       	push	r25
     d72:	8f 93       	push	r24
     d74:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,17);
     d78:	61 e1       	ldi	r22, 0x11	; 17
     d7a:	8a e0       	ldi	r24, 0x0A	; 10
     d7c:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FIVE, 7);
     d80:	47 e0       	ldi	r20, 0x07	; 7
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	60 e4       	ldi	r22, 0x40	; 64
     d86:	71 e0       	ldi	r23, 0x01	; 1
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 27 18 	call	0x304e	; 0x304e <eeprom_read_block>
		printf("Fifth: %c%c%c %lu", score_place_to_display.name[0],
     d90:	8f 81       	ldd	r24, Y+7	; 0x07
     d92:	8f 93       	push	r24
     d94:	8e 81       	ldd	r24, Y+6	; 0x06
     d96:	8f 93       	push	r24
     d98:	8d 81       	ldd	r24, Y+5	; 0x05
     d9a:	8f 93       	push	r24
     d9c:	8c 81       	ldd	r24, Y+4	; 0x04
     d9e:	8f 93       	push	r24
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	1f 92       	push	r1
     da4:	8f 93       	push	r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	1f 92       	push	r1
     daa:	8f 93       	push	r24
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	1f 92       	push	r1
     db0:	8f 93       	push	r24
     db2:	83 ef       	ldi	r24, 0xF3	; 243
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	0a c0       	rjmp	.+20     	; 0xdde <display_EEPROM_high_score+0x1be>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
	}
	else{
		initialise_EEPROM();
     dca:	0e 94 3c 04 	call	0x878	; 0x878 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     dce:	85 e0       	ldi	r24, 0x05	; 5
     dd0:	92 e0       	ldi	r25, 0x02	; 2
     dd2:	9f 93       	push	r25
     dd4:	8f 93       	push	r24
     dd6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
	}

}
     dde:	27 96       	adiw	r28, 0x07	; 7
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     df0:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <numFoodItems>
     df4:	08 95       	ret

00000df6 <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     df6:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <numFoodItems>
     dfa:	13 16       	cp	r1, r19
     dfc:	84 f4       	brge	.+32     	; 0xe1e <food_at+0x28>
        if(foodPositions[id] == posn) {
     dfe:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <foodPositions>
     e02:	89 17       	cp	r24, r25
     e04:	71 f0       	breq	.+28     	; 0xe22 <food_at+0x2c>
     e06:	ee eb       	ldi	r30, 0xBE	; 190
     e08:	f2 e0       	ldi	r31, 0x02	; 2
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <food_at+0x1e>
     e0e:	21 91       	ld	r18, Z+
     e10:	28 17       	cp	r18, r24
     e12:	49 f0       	breq	.+18     	; 0xe26 <food_at+0x30>
     e14:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e16:	39 13       	cpse	r19, r25
     e18:	fa cf       	rjmp	.-12     	; 0xe0e <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     e1a:	8f ef       	ldi	r24, 0xFF	; 255
     e1c:	08 95       	ret
     e1e:	8f ef       	ldi	r24, 0xFF	; 255
     e20:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	08 95       	ret
     e26:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     e28:	08 95       	ret

00000e2a <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     e2a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <food_at>
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	8f 3f       	cpi	r24, 0xFF	; 255
     e32:	09 f4       	brne	.+2      	; 0xe36 <is_food_at+0xc>
     e34:	90 e0       	ldi	r25, 0x00	; 0
}
     e36:	89 2f       	mov	r24, r25
     e38:	08 95       	ret

00000e3a <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     e44:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <numFoodItems>
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	0c f0       	brlt	.+2      	; 0xe4e <add_food_item+0x14>
     e4c:	44 c0       	rjmp	.+136    	; 0xed6 <add_food_item+0x9c>
     e4e:	00 e0       	ldi	r16, 0x00	; 0
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	d0 e0       	ldi	r29, 0x00	; 0
     e54:	c0 e0       	ldi	r28, 0x00	; 0
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <add_food_item+0x22>
     e58:	0f 5f       	subi	r16, 0xFF	; 255
     e5a:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     e5c:	2c 2f       	mov	r18, r28
     e5e:	cc 0f       	add	r28, r28
     e60:	33 0b       	sbc	r19, r19
     e62:	2d 5f       	subi	r18, 0xFD	; 253
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	20 0f       	add	r18, r16
     e68:	31 1f       	adc	r19, r17
     e6a:	2f 70       	andi	r18, 0x0F	; 15
     e6c:	30 78       	andi	r19, 0x80	; 128
     e6e:	33 23       	and	r19, r19
     e70:	34 f4       	brge	.+12     	; 0xe7e <add_food_item+0x44>
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	31 09       	sbc	r19, r1
     e76:	20 6f       	ori	r18, 0xF0	; 240
     e78:	3f 6f       	ori	r19, 0xFF	; 255
     e7a:	2f 5f       	subi	r18, 0xFF	; 255
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	82 2f       	mov	r24, r18
     e80:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     e82:	6d 2f       	mov	r22, r29
     e84:	dd 0f       	add	r29, r29
     e86:	77 0b       	sbc	r23, r23
     e88:	6b 5f       	subi	r22, 0xFB	; 251
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	67 70       	andi	r22, 0x07	; 7
     e8e:	70 78       	andi	r23, 0x80	; 128
     e90:	77 23       	and	r23, r23
     e92:	34 f4       	brge	.+12     	; 0xea0 <add_food_item+0x66>
     e94:	61 50       	subi	r22, 0x01	; 1
     e96:	71 09       	sbc	r23, r1
     e98:	68 6f       	ori	r22, 0xF8	; 248
     e9a:	7f 6f       	ori	r23, 0xFF	; 255
     e9c:	6f 5f       	subi	r22, 0xFF	; 255
     e9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ea0:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     ea2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
     ea6:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     ea8:	03 36       	cpi	r16, 0x63	; 99
     eaa:	11 05       	cpc	r17, r1
     eac:	b1 f0       	breq	.+44     	; 0xeda <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     eae:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     eb2:	81 11       	cpse	r24, r1
     eb4:	d1 cf       	rjmp	.-94     	; 0xe58 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     eb6:	8f 2d       	mov	r24, r15
     eb8:	0e 94 15 07 	call	0xe2a	; 0xe2a <is_food_at>
     ebc:	81 11       	cpse	r24, r1
     ebe:	cc cf       	rjmp	.-104    	; 0xe58 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     ec0:	8f 2d       	mov	r24, r15
     ec2:	0e 94 a1 10 	call	0x2142	; 0x2142 <is_superfood_at>
     ec6:	81 11       	cpse	r24, r1
     ec8:	c7 cf       	rjmp	.-114    	; 0xe58 <add_food_item+0x1e>
     eca:	8f 2d       	mov	r24, r15
     ecc:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <is_rat_at>
     ed0:	81 11       	cpse	r24, r1
     ed2:	c2 cf       	rjmp	.-124    	; 0xe58 <add_food_item+0x1e>
     ed4:	04 c0       	rjmp	.+8      	; 0xede <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     ed6:	88 e0       	ldi	r24, 0x08	; 8
     ed8:	0f c0       	rjmp	.+30     	; 0xef8 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     eda:	88 e0       	ldi	r24, 0x08	; 8
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     ede:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <numFoodItems>
	foodPositions[newFoodID] = test_position;
     ee2:	e8 2f       	mov	r30, r24
     ee4:	08 2e       	mov	r0, r24
     ee6:	00 0c       	add	r0, r0
     ee8:	ff 0b       	sbc	r31, r31
     eea:	e3 54       	subi	r30, 0x43	; 67
     eec:	fd 4f       	sbci	r31, 0xFD	; 253
     eee:	f0 82       	st	Z, r15
	numFoodItems++;
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     ef6:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	0f 91       	pop	r16
     f00:	ff 90       	pop	r15
     f02:	08 95       	ret

00000f04 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     f04:	e8 2f       	mov	r30, r24
     f06:	88 0f       	add	r24, r24
     f08:	ff 0b       	sbc	r31, r31
     f0a:	e3 54       	subi	r30, 0x43	; 67
     f0c:	fd 4f       	sbci	r31, 0xFD	; 253
}
     f0e:	80 81       	ld	r24, Z
     f10:	08 95       	ret

00000f12 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     f12:	88 23       	and	r24, r24
     f14:	b4 f0       	brlt	.+44     	; 0xf42 <remove_food+0x30>
     f16:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <numFoodItems>
     f1a:	82 17       	cp	r24, r18
     f1c:	94 f4       	brge	.+36     	; 0xf42 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f1e:	8f 5f       	subi	r24, 0xFF	; 255
     f20:	82 17       	cp	r24, r18
     f22:	64 f4       	brge	.+24     	; 0xf3c <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     f24:	e8 2f       	mov	r30, r24
     f26:	08 2e       	mov	r0, r24
     f28:	00 0c       	add	r0, r0
     f2a:	ff 0b       	sbc	r31, r31
     f2c:	e3 54       	subi	r30, 0x43	; 67
     f2e:	fd 4f       	sbci	r31, 0xFD	; 253
     f30:	90 81       	ld	r25, Z
     f32:	31 97       	sbiw	r30, 0x01	; 1
     f34:	90 83       	st	Z, r25
     f36:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f38:	82 17       	cp	r24, r18
     f3a:	a4 f3       	brlt	.-24     	; 0xf24 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     f3c:	21 50       	subi	r18, 0x01	; 1
     f3e:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <numFoodItems>
     f42:	08 95       	ret

00000f44 <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	c8 2f       	mov	r28, r24
     f4c:	16 2f       	mov	r17, r22
     f4e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
     f52:	d8 2f       	mov	r29, r24
     f54:	8c 2f       	mov	r24, r28
     f56:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
     f5a:	41 2f       	mov	r20, r17
     f5c:	6d 2f       	mov	r22, r29
     f5e:	0e 94 10 09 	call	0x1220	; 0x1220 <ledmatrix_update_pixel>
     f62:	df 91       	pop	r29
     f64:	cf 91       	pop	r28
     f66:	1f 91       	pop	r17
     f68:	08 95       	ret

00000f6a <init_game>:
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	0e 94 53 09 	call	0x12a6	; 0x12a6 <ledmatrix_clear>
     f72:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <init_score_on_terminal>
     f76:	88 e5       	ldi	r24, 0x58	; 88
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <current_speed+0x1>
     f7e:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <current_speed>
     f82:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <add_new_rat_position>
     f86:	0e 94 0f 02 	call	0x41e	; 0x41e <play_start_game_sound_effect>
     f8a:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <init_snake>
     f8e:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <get_snake_head_position>
     f92:	6f e0       	ldi	r22, 0x0F	; 15
     f94:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
     f98:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <get_snake_tail_position>
     f9c:	60 ef       	ldi	r22, 0xF0	; 240
     f9e:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
     fa2:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <init_food>
     fa6:	c3 e0       	ldi	r28, 0x03	; 3
     fa8:	0e 94 1d 07 	call	0xe3a	; 0xe3a <add_food_item>
     fac:	d8 2f       	mov	r29, r24
     fae:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <is_position_valid>
     fb2:	88 23       	and	r24, r24
     fb4:	21 f0       	breq	.+8      	; 0xfbe <init_game+0x54>
     fb6:	63 e3       	ldi	r22, 0x33	; 51
     fb8:	8d 2f       	mov	r24, r29
     fba:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
     fbe:	c1 50       	subi	r28, 0x01	; 1
     fc0:	99 f7       	brne	.-26     	; 0xfa8 <init_game+0x3e>
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <increase_game_speed>:
     fc8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <current_speed>
     fcc:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <current_speed+0x1>
     fd0:	8b 3f       	cpi	r24, 0xFB	; 251
     fd2:	91 05       	cpc	r25, r1
     fd4:	a4 f0       	brlt	.+40     	; 0xffe <increase_game_speed+0x36>
     fd6:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <current_speed>
     fda:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <current_speed+0x1>
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 ab 12 	call	0x2556	; 0x2556 <__floatunsisf>
     fe6:	26 e6       	ldi	r18, 0x66	; 102
     fe8:	36 e6       	ldi	r19, 0x66	; 102
     fea:	46 e6       	ldi	r20, 0x66	; 102
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	0e 94 11 13 	call	0x2622	; 0x2622 <__mulsf3>
     ff2:	0e 94 7c 12 	call	0x24f8	; 0x24f8 <__fixunssfsi>
     ff6:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <current_speed+0x1>
     ffa:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <current_speed>
     ffe:	08 95       	ret

00001000 <attempt_to_move_snake_forward>:
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <get_snake_head_position>
    100c:	d8 2f       	mov	r29, r24
    100e:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <advance_snake_head>
    1012:	c8 2f       	mov	r28, r24
    1014:	88 23       	and	r24, r24
    1016:	0c f4       	brge	.+2      	; 0x101a <attempt_to_move_snake_forward+0x1a>
    1018:	55 c0       	rjmp	.+170    	; 0x10c4 <attempt_to_move_snake_forward+0xc4>
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <add_to_score>
    1022:	0e 94 df 0e 	call	0x1dbe	; 0x1dbe <get_snake_head_position>
    1026:	18 2f       	mov	r17, r24
    1028:	8e ef       	ldi	r24, 0xFE	; 254
    102a:	8c 0f       	add	r24, r28
    102c:	82 30       	cpi	r24, 0x02	; 2
    102e:	c0 f4       	brcc	.+48     	; 0x1060 <attempt_to_move_snake_forward+0x60>
    1030:	81 2f       	mov	r24, r17
    1032:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <food_at>
    1036:	0e 94 89 07 	call	0xf12	; 0xf12 <remove_food>
    103a:	0e 94 20 02 	call	0x440	; 0x440 <play_eating_food_sound_effect>
    103e:	82 e0       	ldi	r24, 0x02	; 2
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <add_to_score>
    1046:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <increase_game_speed>
    104a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <add_food_item>
    104e:	08 2f       	mov	r16, r24
    1050:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <is_position_valid>
    1054:	88 23       	and	r24, r24
    1056:	21 f0       	breq	.+8      	; 0x1060 <attempt_to_move_snake_forward+0x60>
    1058:	63 e3       	ldi	r22, 0x33	; 51
    105a:	80 2f       	mov	r24, r16
    105c:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
    1060:	8c ef       	ldi	r24, 0xFC	; 252
    1062:	8c 0f       	add	r24, r28
    1064:	82 30       	cpi	r24, 0x02	; 2
    1066:	50 f4       	brcc	.+20     	; 0x107c <attempt_to_move_snake_forward+0x7c>
    1068:	0e 94 95 10 	call	0x212a	; 0x212a <eat_superfood_from_board>
    106c:	89 e0       	ldi	r24, 0x09	; 9
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <add_to_score>
    1074:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <increase_game_speed>
    1078:	0e 94 20 02 	call	0x440	; 0x440 <play_eating_food_sound_effect>
    107c:	8a ef       	ldi	r24, 0xFA	; 250
    107e:	8c 0f       	add	r24, r28
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	50 f4       	brcc	.+20     	; 0x1098 <attempt_to_move_snake_forward+0x98>
    1084:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <add_new_rat_position>
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <add_to_score>
    1090:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <increase_game_speed>
    1094:	0e 94 20 02 	call	0x440	; 0x440 <play_eating_food_sound_effect>
    1098:	cd 7f       	andi	r28, 0xFD	; 253
    109a:	c1 30       	cpi	r28, 0x01	; 1
    109c:	11 f0       	breq	.+4      	; 0x10a2 <attempt_to_move_snake_forward+0xa2>
    109e:	c5 30       	cpi	r28, 0x05	; 5
    10a0:	29 f4       	brne	.+10     	; 0x10ac <attempt_to_move_snake_forward+0xac>
    10a2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <advance_snake_tail>
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
    10ac:	60 ef       	ldi	r22, 0xF0	; 240
    10ae:	8d 2f       	mov	r24, r29
    10b0:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
    10b4:	6f e0       	ldi	r22, 0x0F	; 15
    10b6:	81 2f       	mov	r24, r17
    10b8:	0e 94 a2 07 	call	0xf44	; 0xf44 <update_display_at_position>
    10bc:	0e 94 95 11 	call	0x232a	; 0x232a <update_terminal_score>
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	01 c0       	rjmp	.+2      	; 0x10c6 <attempt_to_move_snake_forward+0xc6>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <get_current_game_speed>:
    10d0:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <current_speed>
    10d4:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <current_speed+0x1>
    10d8:	08 95       	ret

000010da <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    10da:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <current_speed+0x1>
    10de:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <current_speed>
    10e2:	08 95       	ret

000010e4 <init_joystick>:
	uint16_t value;
	uint8_t x_or_y = 0;	/* 0 = x, 1 = y */

void init_joystick(void){
	/* Set up the serial port for stdin communication at 19200 baud, no echo */
	init_serial_stdio(19200,0);
    10e4:	40 e0       	ldi	r20, 0x00	; 0
    10e6:	60 e0       	ldi	r22, 0x00	; 0
    10e8:	7b e4       	ldi	r23, 0x4B	; 75
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <init_serial_stdio>
	
	/* Turn on global interrupts */
	sei();
    10f2:	78 94       	sei
	
	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
    10f4:	80 e4       	ldi	r24, 0x40	; 64
    10f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    10fa:	86 e8       	ldi	r24, 0x86	; 134
    10fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	/* Print a welcome message
	*/
	printf("ADC Test\n");
    1100:	87 e2       	ldi	r24, 0x27	; 39
    1102:	92 e0       	ldi	r25, 0x02	; 2
    1104:	0e 94 66 15 	call	0x2acc	; 0x2acc <puts>
    1108:	08 95       	ret

0000110a <read_joystick>:
}

uint16_t read_joystick(void){
	 // Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	if(x_or_y == 0) {
    110a:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <x_or_y>
    110e:	81 11       	cpse	r24, r1
    1110:	06 c0       	rjmp	.+12     	; 0x111e <read_joystick+0x14>
		ADMUX &= ~1;
    1112:	ec e7       	ldi	r30, 0x7C	; 124
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8e 7f       	andi	r24, 0xFE	; 254
    111a:	80 83       	st	Z, r24
    111c:	05 c0       	rjmp	.+10     	; 0x1128 <read_joystick+0x1e>
		} else {
		ADMUX |= 1;
    111e:	ec e7       	ldi	r30, 0x7C	; 124
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	81 60       	ori	r24, 0x01	; 1
    1126:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1128:	ea e7       	ldi	r30, 0x7A	; 122
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	80 83       	st	Z, r24

	while(ADCSRA & (1<<ADSC)) {
    1132:	80 81       	ld	r24, Z
    1134:	86 fd       	sbrc	r24, 6
    1136:	fd cf       	rjmp	.-6      	; 0x1132 <read_joystick+0x28>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
    1138:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    113c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    1140:	30 93 c6 02 	sts	0x02C6, r19	; 0x8002c6 <value+0x1>
    1144:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <value>
	// Next time through the loop, do the other direction
	x_or_y ^= 1;
    1148:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <x_or_y>
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	98 27       	eor	r25, r24
    1150:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <x_or_y>

	return value; 
}
    1154:	c9 01       	movw	r24, r18
    1156:	08 95       	ret

00001158 <get_joystick_direction>:

SnakeDirnType get_joystick_direction(void){
    1158:	0f 93       	push	r16
    115a:	1f 93       	push	r17
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
	int16_t y_axis, x_axis; 
	
	if (x_or_y){
    1160:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <x_or_y>
    1164:	88 23       	and	r24, r24
    1166:	99 f0       	breq	.+38     	; 0x118e <get_joystick_direction+0x36>
		y_axis = read_joystick() - middle_value; 
    1168:	0e 94 85 08 	call	0x110a	; 0x110a <read_joystick>
    116c:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    1170:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    1174:	ec 01       	movw	r28, r24
    1176:	c2 1b       	sub	r28, r18
    1178:	d3 0b       	sbc	r29, r19
		x_axis = read_joystick()-middle_value; 
    117a:	0e 94 85 08 	call	0x110a	; 0x110a <read_joystick>
    117e:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    1182:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    1186:	8c 01       	movw	r16, r24
    1188:	02 1b       	sub	r16, r18
    118a:	13 0b       	sbc	r17, r19
    118c:	12 c0       	rjmp	.+36     	; 0x11b2 <get_joystick_direction+0x5a>
	}else{
		x_axis =read_joystick() - middle_value;
    118e:	0e 94 85 08 	call	0x110a	; 0x110a <read_joystick>
    1192:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    1196:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    119a:	8c 01       	movw	r16, r24
    119c:	02 1b       	sub	r16, r18
    119e:	13 0b       	sbc	r17, r19
		y_axis = read_joystick() - middle_value; 			
    11a0:	0e 94 85 08 	call	0x110a	; 0x110a <read_joystick>
    11a4:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    11a8:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    11ac:	ec 01       	movw	r28, r24
    11ae:	c2 1b       	sub	r28, r18
    11b0:	d3 0b       	sbc	r29, r19
		}
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
    11b2:	9e 01       	movw	r18, r28
    11b4:	dd 23       	and	r29, r29
    11b6:	24 f4       	brge	.+8      	; 0x11c0 <get_joystick_direction+0x68>
    11b8:	22 27       	eor	r18, r18
    11ba:	33 27       	eor	r19, r19
    11bc:	2c 1b       	sub	r18, r28
    11be:	3d 0b       	sbc	r19, r29
    11c0:	c8 01       	movw	r24, r16
    11c2:	11 23       	and	r17, r17
    11c4:	24 f4       	brge	.+8      	; 0x11ce <get_joystick_direction+0x76>
    11c6:	88 27       	eor	r24, r24
    11c8:	99 27       	eor	r25, r25
    11ca:	80 1b       	sub	r24, r16
    11cc:	91 0b       	sbc	r25, r17
    11ce:	82 17       	cp	r24, r18
    11d0:	93 07       	cpc	r25, r19
    11d2:	64 f4       	brge	.+24     	; 0x11ec <get_joystick_direction+0x94>
    11d4:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <minimum_threshold>
    11d8:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <minimum_threshold+0x1>
    11dc:	42 17       	cp	r20, r18
    11de:	53 07       	cpc	r21, r19
    11e0:	28 f4       	brcc	.+10     	; 0x11ec <get_joystick_direction+0x94>
		if (y_axis >0){return SNAKE_UP;}
    11e2:	1c 16       	cp	r1, r28
    11e4:	1d 06       	cpc	r1, r29
    11e6:	74 f0       	brlt	.+28     	; 0x1204 <get_joystick_direction+0xac>
			else{return SNAKE_DOWN;}
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	11 c0       	rjmp	.+34     	; 0x120e <get_joystick_direction+0xb6>
	}else if(abs(x_axis) >minimum_threshold){
    11ec:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <minimum_threshold>
    11f0:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <minimum_threshold+0x1>
    11f4:	28 17       	cp	r18, r24
    11f6:	39 07       	cpc	r19, r25
    11f8:	38 f4       	brcc	.+14     	; 0x1208 <get_joystick_direction+0xb0>
		if (x_axis >0){return SNAKE_RIGHT;}
    11fa:	10 16       	cp	r1, r16
    11fc:	11 06       	cpc	r1, r17
    11fe:	34 f0       	brlt	.+12     	; 0x120c <get_joystick_direction+0xb4>
			else{return SNAKE_LEFT;}
    1200:	83 e0       	ldi	r24, 0x03	; 3
    1202:	05 c0       	rjmp	.+10     	; 0x120e <get_joystick_direction+0xb6>
		x_axis =read_joystick() - middle_value;
		y_axis = read_joystick() - middle_value; 			
		}
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
		if (y_axis >0){return SNAKE_UP;}
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	03 c0       	rjmp	.+6      	; 0x120e <get_joystick_direction+0xb6>
			else{return SNAKE_DOWN;}
	}else if(abs(x_axis) >minimum_threshold){
		if (x_axis >0){return SNAKE_RIGHT;}
			else{return SNAKE_LEFT;}
	}else{
		return -1; 
    1208:	8f ef       	ldi	r24, 0xFF	; 255
    120a:	01 c0       	rjmp	.+2      	; 0x120e <get_joystick_direction+0xb6>
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
		if (y_axis >0){return SNAKE_UP;}
			else{return SNAKE_DOWN;}
	}else if(abs(x_axis) >minimum_threshold){
		if (x_axis >0){return SNAKE_RIGHT;}
    120c:	81 e0       	ldi	r24, 0x01	; 1
			else{return SNAKE_LEFT;}
	}else{
		return -1; 
	}
} 
    120e:	df 91       	pop	r29
    1210:	cf 91       	pop	r28
    1212:	1f 91       	pop	r17
    1214:	0f 91       	pop	r16
    1216:	08 95       	ret

00001218 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1218:	80 e8       	ldi	r24, 0x80	; 128
    121a:	0e 94 20 10 	call	0x2040	; 0x2040 <spi_setup_master>
    121e:	08 95       	ret

00001220 <ledmatrix_update_pixel>:
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	80 31       	cpi	r24, 0x10	; 16
    1228:	b0 f4       	brcc	.+44     	; 0x1256 <ledmatrix_update_pixel+0x36>
    122a:	68 30       	cpi	r22, 0x08	; 8
    122c:	a0 f4       	brcc	.+40     	; 0x1256 <ledmatrix_update_pixel+0x36>
    122e:	14 2f       	mov	r17, r20
    1230:	c6 2f       	mov	r28, r22
    1232:	d8 2f       	mov	r29, r24
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    123a:	6c 2f       	mov	r22, r28
    123c:	67 70       	andi	r22, 0x07	; 7
    123e:	80 e1       	ldi	r24, 0x10	; 16
    1240:	68 9f       	mul	r22, r24
    1242:	90 01       	movw	r18, r0
    1244:	11 24       	eor	r1, r1
    1246:	8d 2f       	mov	r24, r29
    1248:	8f 70       	andi	r24, 0x0F	; 15
    124a:	82 2b       	or	r24, r18
    124c:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    1250:	81 2f       	mov	r24, r17
    1252:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	08 95       	ret

0000125e <ledmatrix_update_column>:
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	80 31       	cpi	r24, 0x10	; 16
    1268:	90 f4       	brcc	.+36     	; 0x128e <ledmatrix_update_column+0x30>
    126a:	8b 01       	movw	r16, r22
    126c:	c8 2f       	mov	r28, r24
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    1274:	8c 2f       	mov	r24, r28
    1276:	8f 70       	andi	r24, 0x0F	; 15
    1278:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    127c:	e8 01       	movw	r28, r16
    127e:	08 5f       	subi	r16, 0xF8	; 248
    1280:	1f 4f       	sbci	r17, 0xFF	; 255
    1282:	89 91       	ld	r24, Y+
    1284:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    1288:	c0 17       	cp	r28, r16
    128a:	d1 07       	cpc	r29, r17
    128c:	d1 f7       	brne	.-12     	; 0x1282 <ledmatrix_update_column+0x24>
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <ledmatrix_shift_display_left>:
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    129e:	82 e0       	ldi	r24, 0x02	; 2
    12a0:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    12a4:	08 95       	ret

000012a6 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    12a6:	8f e0       	ldi	r24, 0x0F	; 15
    12a8:	0e 94 48 10 	call	0x2090	; 0x2090 <spi_send_byte>
    12ac:	08 95       	ret

000012ae <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    12ae:	82 95       	swap	r24
    12b0:	8f 70       	andi	r24, 0x0F	; 15
    12b2:	08 95       	ret

000012b4 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    12b4:	8f 70       	andi	r24, 0x0F	; 15
    12b6:	08 95       	ret

000012b8 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    12b8:	83 fb       	bst	r24, 3
    12ba:	88 27       	eor	r24, r24
    12bc:	80 f9       	bld	r24, 0
}
    12be:	91 e0       	ldi	r25, 0x01	; 1
    12c0:	89 27       	eor	r24, r25
    12c2:	08 95       	ret

000012c4 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    12c4:	20 e1       	ldi	r18, 0x10	; 16
    12c6:	82 9f       	mul	r24, r18
    12c8:	c0 01       	movw	r24, r0
    12ca:	11 24       	eor	r1, r1
    12cc:	67 70       	andi	r22, 0x07	; 7
}
    12ce:	86 2b       	or	r24, r22
    12d0:	08 95       	ret

000012d2 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    12d2:	0e 94 0c 09 	call	0x1218	; 0x1218 <ledmatrix_setup>
	init_joystick();
    12d6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <init_joystick>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    12da:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    12de:	40 e0       	ldi	r20, 0x00	; 0
    12e0:	60 e0       	ldi	r22, 0x00	; 0
    12e2:	7b e4       	ldi	r23, 0x4B	; 75
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    12ec:	0e 94 ae 11 	call	0x235c	; 0x235c <init_timer0>
	
	// Turn on global interrupts
	sei();
    12f0:	78 94       	sei
    12f2:	08 95       	ret

000012f4 <splash_screen>:
}

void splash_screen(void) {
    12f4:	ff 92       	push	r15
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	0e 94 3a 11 	call	0x2274	; 0x2274 <set_display_attribute>
	clear_terminal();
    1304:	0e 94 31 11 	call	0x2262	; 0x2262 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1308:	0e 94 47 11 	call	0x228e	; 0x228e <hide_cursor>
	display_start_terminal_screen();
    130c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1310:	0e 94 53 09 	call	0x12a6	; 0x12a6 <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    1314:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1316:	0f 2e       	mov	r0, r31
    1318:	ff e0       	ldi	r31, 0x0F	; 15
    131a:	ff 2e       	mov	r15, r31
    131c:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    131e:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1320:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1322:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    1324:	6c 2f       	mov	r22, r28
    1326:	80 e3       	ldi	r24, 0x30	; 48
    1328:	92 e0       	ldi	r25, 0x02	; 2
    132a:	0e 94 9f 0c 	call	0x193e	; 0x193e <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    132e:	0d c0       	rjmp	.+26     	; 0x134a <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1330:	2f e7       	ldi	r18, 0x7F	; 127
    1332:	8c e2       	ldi	r24, 0x2C	; 44
    1334:	93 e0       	ldi	r25, 0x03	; 3
    1336:	21 50       	subi	r18, 0x01	; 1
    1338:	80 40       	sbci	r24, 0x00	; 0
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	e1 f7       	brne	.-8      	; 0x1336 <splash_screen+0x42>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <splash_screen+0x4c>
    1340:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    1342:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1346:	8f 3f       	cpi	r24, 0xFF	; 255
    1348:	a9 f5       	brne	.+106    	; 0x13b4 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    134a:	0e 94 ae 0c 	call	0x195c	; 0x195c <scroll_display>
    134e:	81 11       	cpse	r24, r1
    1350:	ef cf       	rjmp	.-34     	; 0x1330 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    1352:	0e 94 8e 14 	call	0x291c	; 0x291c <random>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	83 70       	andi	r24, 0x03	; 3
    135c:	99 27       	eor	r25, r25
    135e:	aa 27       	eor	r26, r26
    1360:	b0 78       	andi	r27, 0x80	; 128
    1362:	bb 23       	and	r27, r27
    1364:	54 f4       	brge	.+20     	; 0x137a <splash_screen+0x86>
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	a1 09       	sbc	r26, r1
    136a:	b1 09       	sbc	r27, r1
    136c:	8c 6f       	ori	r24, 0xFC	; 252
    136e:	9f 6f       	ori	r25, 0xFF	; 255
    1370:	af 6f       	ori	r26, 0xFF	; 255
    1372:	bf 6f       	ori	r27, 0xFF	; 255
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	a1 1d       	adc	r26, r1
    1378:	b1 1d       	adc	r27, r1
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 05       	cpc	r25, r1
    137e:	a1 05       	cpc	r26, r1
    1380:	b1 05       	cpc	r27, r1
    1382:	91 f0       	breq	.+36     	; 0x13a8 <splash_screen+0xb4>
    1384:	2c f4       	brge	.+10     	; 0x1390 <splash_screen+0x9c>
    1386:	89 2b       	or	r24, r25
    1388:	8a 2b       	or	r24, r26
    138a:	8b 2b       	or	r24, r27
    138c:	59 f0       	breq	.+22     	; 0x13a4 <splash_screen+0xb0>
    138e:	ca cf       	rjmp	.-108    	; 0x1324 <splash_screen+0x30>
    1390:	82 30       	cpi	r24, 0x02	; 2
    1392:	91 05       	cpc	r25, r1
    1394:	a1 05       	cpc	r26, r1
    1396:	b1 05       	cpc	r27, r1
    1398:	49 f0       	breq	.+18     	; 0x13ac <splash_screen+0xb8>
    139a:	03 97       	sbiw	r24, 0x03	; 3
    139c:	a1 05       	cpc	r26, r1
    139e:	b1 05       	cpc	r27, r1
    13a0:	39 f0       	breq	.+14     	; 0x13b0 <splash_screen+0xbc>
    13a2:	c0 cf       	rjmp	.-128    	; 0x1324 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    13a4:	cd 2f       	mov	r28, r29
    13a6:	be cf       	rjmp	.-132    	; 0x1324 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    13a8:	cf 2d       	mov	r28, r15
    13aa:	bc cf       	rjmp	.-136    	; 0x1324 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    13ac:	c0 2f       	mov	r28, r16
    13ae:	ba cf       	rjmp	.-140    	; 0x1324 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    13b0:	c1 2f       	mov	r28, r17
    13b2:	b8 cf       	rjmp	.-144    	; 0x1324 <splash_screen+0x30>
		}
	}
}
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	08 95       	ret

000013c0 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    13c0:	0e 94 31 11 	call	0x2262	; 0x2262 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    13c4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <init_game>
		
	// Initialise the score
	init_score();
    13c8:	0e 94 6f 0c 	call	0x18de	; 0x18de <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    13cc:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    13d0:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <clear_serial_input_buffer>
    13d4:	08 95       	ret

000013d6 <play_game>:
}

void play_game(void) {
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	7f 92       	push	r7
    13dc:	8f 92       	push	r8
    13de:	9f 92       	push	r9
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    13f4:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    13f8:	4b 01       	movw	r8, r22
    13fa:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    13fc:	00 e0       	ldi	r16, 0x00	; 0
    13fe:	1f ef       	ldi	r17, 0xFF	; 255
 			break;

		}else if(serial_input == 'n'|| serial_input == 'N'){
			break; 
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1400:	0f 2e       	mov	r0, r31
    1402:	ff ed       	ldi	r31, 0xDF	; 223
    1404:	7f 2e       	mov	r7, r31
    1406:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1408:	0f 2e       	mov	r0, r31
    140a:	fe ed       	ldi	r31, 0xDE	; 222
    140c:	4f 2e       	mov	r4, r31
    140e:	f3 e0       	ldi	r31, 0x03	; 3
    1410:	5f 2e       	mov	r5, r31
    1412:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
		if(time_to_add_superfood()){
    1414:	0e 94 57 10 	call	0x20ae	; 0x20ae <time_to_add_superfood>
    1418:	81 11       	cpse	r24, r1
		add_superfood_to_board();}
    141a:	0e 94 ae 10 	call	0x215c	; 0x215c <add_superfood_to_board>
		if(time_to_remove_superfood()){
    141e:	0e 94 6d 10 	call	0x20da	; 0x20da <time_to_remove_superfood>
    1422:	81 11       	cpse	r24, r1
		remove_superfood_from_board();}
    1424:	0e 94 7d 10 	call	0x20fa	; 0x20fa <remove_superfood_from_board>
		if(is_time_to_move_rat()){move_rat();}
    1428:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <is_time_to_move_rat>
    142c:	81 11       	cpse	r24, r1
    142e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <move_rat>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    1432:	0e 94 cd 11 	call	0x239a	; 0x239a <timer_is_paused>
    1436:	89 2b       	or	r24, r25
    1438:	19 f0       	breq	.+6      	; 0x1440 <play_game+0x6a>
			button = -1;
			empty_button_queue();
    143a:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    143e:	06 c0       	rjmp	.+12     	; 0x144c <play_game+0x76>
			}else{
		button = button_pushed();}
    1440:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1444:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    1446:	8f 3f       	cpi	r24, 0xFF	; 255
    1448:	09 f0       	breq	.+2      	; 0x144c <play_game+0x76>
    144a:	9f c0       	rjmp	.+318    	; 0x158a <play_game+0x1b4>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    144c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <serial_input_available>
    1450:	88 23       	and	r24, r24
    1452:	09 f4       	brne	.+2      	; 0x1456 <play_game+0x80>
    1454:	a9 c0       	rjmp	.+338    	; 0x15a8 <play_game+0x1d2>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1456:	f2 01       	movw	r30, r4
    1458:	80 81       	ld	r24, Z
    145a:	91 81       	ldd	r25, Z+1	; 0x01
    145c:	0e 94 e5 14 	call	0x29ca	; 0x29ca <fgetc>
    1460:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1462:	01 11       	cpse	r16, r1
    1464:	03 c0       	rjmp	.+6      	; 0x146c <play_game+0x96>
    1466:	8b 31       	cpi	r24, 0x1B	; 27
    1468:	51 f4       	brne	.+20     	; 0x147e <play_game+0xa8>
    146a:	9b c0       	rjmp	.+310    	; 0x15a2 <play_game+0x1cc>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    146c:	01 30       	cpi	r16, 0x01	; 1
    146e:	19 f4       	brne	.+6      	; 0x1476 <play_game+0xa0>
    1470:	8b 35       	cpi	r24, 0x5B	; 91
    1472:	29 f4       	brne	.+10     	; 0x147e <play_game+0xa8>
    1474:	98 c0       	rjmp	.+304    	; 0x15a6 <play_game+0x1d0>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    1476:	02 30       	cpi	r16, 0x02	; 2
    1478:	09 f4       	brne	.+2      	; 0x147c <play_game+0xa6>
    147a:	8d c0       	rjmp	.+282    	; 0x1596 <play_game+0x1c0>
    147c:	80 c0       	rjmp	.+256    	; 0x157e <play_game+0x1a8>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    147e:	0e 94 cd 11 	call	0x239a	; 0x239a <timer_is_paused>
    1482:	89 2b       	or	r24, r25
    1484:	09 f0       	breq	.+2      	; 0x1488 <play_game+0xb2>
    1486:	44 c0       	rjmp	.+136    	; 0x1510 <play_game+0x13a>
    1488:	08 c0       	rjmp	.+16     	; 0x149a <play_game+0xc4>
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    148a:	d1 11       	cpse	r29, r1
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <play_game+0xca>
    148e:	01 c0       	rjmp	.+2      	; 0x1492 <play_game+0xbc>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1490:	00 e0       	ldi	r16, 0x00	; 0
	if(!(timer_is_paused())){
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <set_snake_dirn>
    1498:	55 c0       	rjmp	.+170    	; 0x1544 <play_game+0x16e>
    149a:	00 e0       	ldi	r16, 0x00	; 0
    149c:	d1 2f       	mov	r29, r17
    149e:	01 c0       	rjmp	.+2      	; 0x14a2 <play_game+0xcc>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    14a0:	c1 2f       	mov	r28, r17
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    14a2:	d2 30       	cpi	r29, 0x02	; 2
    14a4:	19 f0       	breq	.+6      	; 0x14ac <play_game+0xd6>
    14a6:	81 2f       	mov	r24, r17
    14a8:	81 34       	cpi	r24, 0x41	; 65
    14aa:	21 f4       	brne	.+8      	; 0x14b4 <play_game+0xde>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <set_snake_dirn>
    14b2:	48 c0       	rjmp	.+144    	; 0x1544 <play_game+0x16e>
		} else if(button==3 || escape_sequence_char=='D') {
    14b4:	d3 30       	cpi	r29, 0x03	; 3
    14b6:	11 f0       	breq	.+4      	; 0x14bc <play_game+0xe6>
    14b8:	84 34       	cpi	r24, 0x44	; 68
    14ba:	21 f4       	brne	.+8      	; 0x14c4 <play_game+0xee>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    14bc:	83 e0       	ldi	r24, 0x03	; 3
    14be:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <set_snake_dirn>
    14c2:	40 c0       	rjmp	.+128    	; 0x1544 <play_game+0x16e>
		} else if (button==1 || escape_sequence_char == 'B') {
    14c4:	d1 30       	cpi	r29, 0x01	; 1
    14c6:	11 f0       	breq	.+4      	; 0x14cc <play_game+0xf6>
    14c8:	82 34       	cpi	r24, 0x42	; 66
    14ca:	29 f4       	brne	.+10     	; 0x14d6 <play_game+0x100>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <set_snake_dirn>
    14d2:	38 c0       	rjmp	.+112    	; 0x1544 <play_game+0x16e>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    14d4:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    14d6:	8c 2f       	mov	r24, r28
    14d8:	8f 7d       	andi	r24, 0xDF	; 223
    14da:	80 35       	cpi	r24, 0x50	; 80
    14dc:	19 f4       	brne	.+6      	; 0x14e4 <play_game+0x10e>
			toggle_timer_clock();
    14de:	0e 94 c6 11 	call	0x238c	; 0x238c <toggle_timer_clock>
    14e2:	30 c0       	rjmp	.+96     	; 0x1544 <play_game+0x16e>
		}else if(serial_input == 's'|| serial_input == 's'){
    14e4:	c3 37       	cpi	r28, 0x73	; 115
    14e6:	19 f4       	brne	.+6      	; 0x14ee <play_game+0x118>
			save_game_to_EPPROM();
    14e8:	0e 94 74 02 	call	0x4e8	; 0x4e8 <save_game_to_EPPROM>
    14ec:	2b c0       	rjmp	.+86     	; 0x1544 <play_game+0x16e>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    14ee:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
    14f2:	88 23       	and	r24, r24
    14f4:	41 f0       	breq	.+16     	; 0x1506 <play_game+0x130>
    14f6:	8c 2f       	mov	r24, r28
    14f8:	8f 7d       	andi	r24, 0xDF	; 223
    14fa:	8f 34       	cpi	r24, 0x4F	; 79
    14fc:	21 f4       	brne	.+8      	; 0x1506 <play_game+0x130>
 			load_EEPROM_data_on_next_game = 1;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <load_EEPROM_data_on_next_game>
 			break;
    1504:	68 c0       	rjmp	.+208    	; 0x15d6 <play_game+0x200>

		}else if(serial_input == 'n'|| serial_input == 'N'){
    1506:	8c 2f       	mov	r24, r28
    1508:	8f 7d       	andi	r24, 0xDF	; 223
    150a:	8e 34       	cpi	r24, 0x4E	; 78
    150c:	d9 f4       	brne	.+54     	; 0x1544 <play_game+0x16e>
    150e:	63 c0       	rjmp	.+198    	; 0x15d6 <play_game+0x200>
			break; 
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1510:	8c 2f       	mov	r24, r28
    1512:	8f 7d       	andi	r24, 0xDF	; 223
    1514:	80 35       	cpi	r24, 0x50	; 80
    1516:	21 f4       	brne	.+8      	; 0x1520 <play_game+0x14a>
			toggle_timer_clock();
    1518:	0e 94 c6 11 	call	0x238c	; 0x238c <toggle_timer_clock>
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	12 c0       	rjmp	.+36     	; 0x1544 <play_game+0x16e>
    1520:	00 e0       	ldi	r16, 0x00	; 0
		// TODO: Check whether these are okay. in P says serial is ignored but these seem important
		}else if(serial_input == 's'|| serial_input == 'S'){
    1522:	83 35       	cpi	r24, 0x53	; 83
    1524:	19 f4       	brne	.+6      	; 0x152c <play_game+0x156>
			save_game_to_EPPROM();
    1526:	0e 94 74 02 	call	0x4e8	; 0x4e8 <save_game_to_EPPROM>
    152a:	0c c0       	rjmp	.+24     	; 0x1544 <play_game+0x16e>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    152c:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
    1530:	88 23       	and	r24, r24
    1532:	41 f0       	breq	.+16     	; 0x1544 <play_game+0x16e>
    1534:	8c 2f       	mov	r24, r28
    1536:	8f 7d       	andi	r24, 0xDF	; 223
    1538:	8f 34       	cpi	r24, 0x4F	; 79
    153a:	21 f4       	brne	.+8      	; 0x1544 <play_game+0x16e>
			load_EEPROM_data_on_next_game = 1;
    153c:	81 e0       	ldi	r24, 0x01	; 1
    153e:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <load_EEPROM_data_on_next_game>
			break;
    1542:	49 c0       	rjmp	.+146    	; 0x15d6 <play_game+0x200>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    1544:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    1548:	6b 01       	movw	r12, r22
    154a:	7c 01       	movw	r14, r24
    154c:	0e 94 68 08 	call	0x10d0	; 0x10d0 <get_current_game_speed>
    1550:	09 2e       	mov	r0, r25
    1552:	00 0c       	add	r0, r0
    1554:	aa 0b       	sbc	r26, r26
    1556:	bb 0b       	sbc	r27, r27
    1558:	88 0d       	add	r24, r8
    155a:	99 1d       	adc	r25, r9
    155c:	aa 1d       	adc	r26, r10
    155e:	bb 1d       	adc	r27, r11
    1560:	c8 16       	cp	r12, r24
    1562:	d9 06       	cpc	r13, r25
    1564:	ea 06       	cpc	r14, r26
    1566:	fb 06       	cpc	r15, r27
    1568:	08 f4       	brcc	.+2      	; 0x156c <play_game+0x196>
    156a:	54 cf       	rjmp	.-344    	; 0x1414 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    156c:	0e 94 00 08 	call	0x1000	; 0x1000 <attempt_to_move_snake_forward>
    1570:	88 23       	and	r24, r24
    1572:	89 f1       	breq	.+98     	; 0x15d6 <play_game+0x200>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    1574:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    1578:	4b 01       	movw	r8, r22
    157a:	5c 01       	movw	r10, r24
    157c:	4b cf       	rjmp	.-362    	; 0x1414 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    157e:	0e 94 cd 11 	call	0x239a	; 0x239a <timer_is_paused>
    1582:	89 2b       	or	r24, r25
    1584:	09 f4       	brne	.+2      	; 0x1588 <play_game+0x1b2>
    1586:	a6 cf       	rjmp	.-180    	; 0x14d4 <play_game+0xfe>
    1588:	c3 cf       	rjmp	.-122    	; 0x1510 <play_game+0x13a>
    158a:	0e 94 cd 11 	call	0x239a	; 0x239a <timer_is_paused>
    158e:	89 2b       	or	r24, r25
    1590:	09 f4       	brne	.+2      	; 0x1594 <play_game+0x1be>
    1592:	7b cf       	rjmp	.-266    	; 0x148a <play_game+0xb4>
    1594:	1d c0       	rjmp	.+58     	; 0x15d0 <play_game+0x1fa>
    1596:	0e 94 cd 11 	call	0x239a	; 0x239a <timer_is_paused>
    159a:	89 2b       	or	r24, r25
    159c:	51 f0       	breq	.+20     	; 0x15b2 <play_game+0x1dc>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    159e:	00 e0       	ldi	r16, 0x00	; 0
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <play_game+0x1f4>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    15a2:	01 e0       	ldi	r16, 0x01	; 1
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <play_game+0x1d2>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    15a6:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    15a8:	0e 94 cd 11 	call	0x239a	; 0x239a <timer_is_paused>
    15ac:	89 2b       	or	r24, r25
    15ae:	69 f4       	brne	.+26     	; 0x15ca <play_game+0x1f4>
    15b0:	08 c0       	rjmp	.+16     	; 0x15c2 <play_game+0x1ec>
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15b2:	c3 34       	cpi	r28, 0x43	; 67
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <play_game+0x1e2>
    15b6:	6c cf       	rjmp	.-296    	; 0x1490 <play_game+0xba>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    15b8:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15ba:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    15bc:	c1 2f       	mov	r28, r17
			}
		}
	if(!(timer_is_paused())){
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15be:	d1 2f       	mov	r29, r17
    15c0:	73 cf       	rjmp	.-282    	; 0x14a8 <play_game+0xd2>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15c2:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
    15c6:	c1 2f       	mov	r28, r17
    15c8:	9e cf       	rjmp	.-196    	; 0x1506 <play_game+0x130>
    15ca:	c1 2f       	mov	r28, r17
 			break;

		}else if(serial_input == 'n'|| serial_input == 'N'){
			break; 
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    15cc:	87 2d       	mov	r24, r7
    15ce:	a9 cf       	rjmp	.-174    	; 0x1522 <play_game+0x14c>
			toggle_timer_clock();
		// TODO: Check whether these are okay. in P says serial is ignored but these seem important
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15d0:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
    15d4:	b7 cf       	rjmp	.-146    	; 0x1544 <play_game+0x16e>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	df 90       	pop	r13
    15e4:	cf 90       	pop	r12
    15e6:	bf 90       	pop	r11
    15e8:	af 90       	pop	r10
    15ea:	9f 90       	pop	r9
    15ec:	8f 90       	pop	r8
    15ee:	7f 90       	pop	r7
    15f0:	5f 90       	pop	r5
    15f2:	4f 90       	pop	r4
    15f4:	08 95       	ret

000015f6 <handle_game_over>:

void handle_game_over() {
	play_end_game_sound_effect();
    15f6:	0e 94 31 02 	call	0x462	; 0x462 <play_end_game_sound_effect>
	clear_terminal();
    15fa:	0e 94 31 11 	call	0x2262	; 0x2262 <clear_terminal>
	move_cursor(10,5);
    15fe:	65 e0       	ldi	r22, 0x05	; 5
    1600:	8a e0       	ldi	r24, 0x0A	; 10
    1602:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1606:	8c ea       	ldi	r24, 0xAC	; 172
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	9f 93       	push	r25
    160c:	8f 93       	push	r24
    160e:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
	move_cursor(10,7);
    1612:	67 e0       	ldi	r22, 0x07	; 7
    1614:	8a e0       	ldi	r24, 0x0A	; 10
    1616:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf("Score: %lu", get_score());
    161a:	0e 94 8d 0c 	call	0x191a	; 0x191a <get_score>
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	7f 93       	push	r23
    1624:	6f 93       	push	r22
    1626:	82 e4       	ldi	r24, 0x42	; 66
    1628:	92 e0       	ldi	r25, 0x02	; 2
    162a:	9f 93       	push	r25
    162c:	8f 93       	push	r24
    162e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
	display_EEPROM_high_score();
    1632:	0e 94 10 06 	call	0xc20	; 0xc20 <display_EEPROM_high_score>

	if (is_high_score()){
    1636:	0e 94 94 04 	call	0x928	; 0x928 <is_high_score>
    163a:	2d b7       	in	r18, 0x3d	; 61
    163c:	3e b7       	in	r19, 0x3e	; 62
    163e:	28 5f       	subi	r18, 0xF8	; 248
    1640:	3f 4f       	sbci	r19, 0xFF	; 255
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	3e bf       	out	0x3e, r19	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	2d bf       	out	0x3d, r18	; 61
    164c:	81 11       	cpse	r24, r1
		set_high_score_name();	
    164e:	0e 94 ab 05 	call	0xb56	; 0xb56 <set_high_score_name>
	}
	move_cursor(10,9);
    1652:	69 e0       	ldi	r22, 0x09	; 9
    1654:	8a e0       	ldi	r24, 0x0A	; 10
    1656:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    165a:	8e e8       	ldi	r24, 0x8E	; 142
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	9f 93       	push	r25
    1660:	8f 93       	push	r24
    1662:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
	display_EEPROM_high_score(); 
    1666:	0e 94 10 06 	call	0xc20	; 0xc20 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1672:	8f 3f       	cpi	r24, 0xFF	; 255
    1674:	e1 f3       	breq	.-8      	; 0x166e <handle_game_over+0x78>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    1676:	0e 94 31 11 	call	0x2262	; 0x2262 <clear_terminal>
    167a:	08 95       	ret

0000167c <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    167c:	0e 94 69 09 	call	0x12d2	; 0x12d2 <initialise_hardware>
	DDRC = 0xff;
    1680:	8f ef       	ldi	r24, 0xFF	; 255
    1682:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<2);
    1684:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    1686:	53 98       	cbi	0x0a, 3	; 10
	initialise_timer_one();
    1688:	0e 94 5e 12 	call	0x24bc	; 0x24bc <initialise_timer_one>

	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    168c:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    1690:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <load_EEPROM_data_on_next_game>
    1694:	88 23       	and	r24, r24
    1696:	19 f0       	breq	.+6      	; 0x169e <main+0x22>
    1698:	0e 94 a0 03 	call	0x740	; 0x740 <new_game_from_EEPROM>
    169c:	02 c0       	rjmp	.+4      	; 0x16a2 <main+0x26>
			else{new_game();}
    169e:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <new_game>
		play_game();
    16a2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    16a6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <load_EEPROM_data_on_next_game>
    16aa:	81 11       	cpse	r24, r1
    16ac:	f1 cf       	rjmp	.-30     	; 0x1690 <main+0x14>
    16ae:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <handle_game_over>
    16b2:	ee cf       	rjmp	.-36     	; 0x1690 <main+0x14>

000016b4 <get_rat_position>:
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
		}
	return 0; 
}
    16b4:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    16b8:	08 95       	ret

000016ba <set_rat_at_pos>:
    16ba:	cf 93       	push	r28
    16bc:	df 93       	push	r29
    16be:	c8 2f       	mov	r28, r24
    16c0:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    16c4:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    16c8:	d8 2f       	mov	r29, r24
    16ca:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    16ce:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    16d2:	40 e0       	ldi	r20, 0x00	; 0
    16d4:	6d 2f       	mov	r22, r29
    16d6:	0e 94 10 09 	call	0x1220	; 0x1220 <ledmatrix_update_pixel>
    16da:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <rat_position>
    16de:	8c 2f       	mov	r24, r28
    16e0:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    16e4:	d8 2f       	mov	r29, r24
    16e6:	8c 2f       	mov	r24, r28
    16e8:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    16ec:	43 e3       	ldi	r20, 0x33	; 51
    16ee:	6d 2f       	mov	r22, r29
    16f0:	0e 94 10 09 	call	0x1220	; 0x1220 <ledmatrix_update_pixel>
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <move_rat>:
    16fa:	1f 93       	push	r17
    16fc:	cf 93       	push	r28
    16fe:	df 93       	push	r29
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    1708:	18 2f       	mov	r17, r24
    170a:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
    170e:	83 70       	andi	r24, 0x03	; 3
    1710:	90 78       	andi	r25, 0x80	; 128
    1712:	99 23       	and	r25, r25
    1714:	24 f4       	brge	.+8      	; 0x171e <move_rat+0x24>
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	8c 6f       	ori	r24, 0xFC	; 252
    171a:	9f 6f       	ori	r25, 0xFF	; 255
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	c8 2f       	mov	r28, r24
    1720:	d0 e0       	ldi	r29, 0x00	; 0
    1722:	c1 30       	cpi	r28, 0x01	; 1
    1724:	a9 f0       	breq	.+42     	; 0x1750 <move_rat+0x56>
    1726:	28 f0       	brcs	.+10     	; 0x1732 <move_rat+0x38>
    1728:	c2 30       	cpi	r28, 0x02	; 2
    172a:	09 f1       	breq	.+66     	; 0x176e <move_rat+0x74>
    172c:	c3 30       	cpi	r28, 0x03	; 3
    172e:	71 f1       	breq	.+92     	; 0x178c <move_rat+0x92>
    1730:	3b c0       	rjmp	.+118    	; 0x17a8 <move_rat+0xae>
    1732:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1736:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    173a:	18 2f       	mov	r17, r24
    173c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1740:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    1744:	61 e0       	ldi	r22, 0x01	; 1
    1746:	61 0f       	add	r22, r17
    1748:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    174c:	18 2f       	mov	r17, r24
    174e:	2c c0       	rjmp	.+88     	; 0x17a8 <move_rat+0xae>
    1750:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1754:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    1758:	18 2f       	mov	r17, r24
    175a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    175e:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    1762:	6f ef       	ldi	r22, 0xFF	; 255
    1764:	61 0f       	add	r22, r17
    1766:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    176a:	18 2f       	mov	r17, r24
    176c:	1d c0       	rjmp	.+58     	; 0x17a8 <move_rat+0xae>
    176e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1772:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    1776:	18 2f       	mov	r17, r24
    1778:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    177c:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    1780:	61 2f       	mov	r22, r17
    1782:	8f 5f       	subi	r24, 0xFF	; 255
    1784:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    1788:	18 2f       	mov	r17, r24
    178a:	0e c0       	rjmp	.+28     	; 0x17a8 <move_rat+0xae>
    178c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1790:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    1794:	18 2f       	mov	r17, r24
    1796:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    179a:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    179e:	61 2f       	mov	r22, r17
    17a0:	81 50       	subi	r24, 0x01	; 1
    17a2:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    17a6:	18 2f       	mov	r17, r24
    17a8:	df 5f       	subi	r29, 0xFF	; 255
    17aa:	8c 2f       	mov	r24, r28
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	01 96       	adiw	r24, 0x01	; 1
    17b0:	83 70       	andi	r24, 0x03	; 3
    17b2:	90 78       	andi	r25, 0x80	; 128
    17b4:	99 23       	and	r25, r25
    17b6:	24 f4       	brge	.+8      	; 0x17c0 <move_rat+0xc6>
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	8c 6f       	ori	r24, 0xFC	; 252
    17bc:	9f 6f       	ori	r25, 0xFF	; 255
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	c8 2f       	mov	r28, r24
    17c2:	81 2f       	mov	r24, r17
    17c4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <is_snake_at>
    17c8:	88 23       	and	r24, r24
    17ca:	21 f0       	breq	.+8      	; 0x17d4 <move_rat+0xda>
    17cc:	d4 30       	cpi	r29, 0x04	; 4
    17ce:	09 f0       	breq	.+2      	; 0x17d2 <move_rat+0xd8>
    17d0:	a8 cf       	rjmp	.-176    	; 0x1722 <move_rat+0x28>
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <move_rat+0xde>
    17d4:	d5 30       	cpi	r29, 0x05	; 5
    17d6:	18 f4       	brcc	.+6      	; 0x17de <move_rat+0xe4>
    17d8:	81 2f       	mov	r24, r17
    17da:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <set_rat_at_pos>
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	08 95       	ret

000017e6 <is_rat_at>:

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    17e6:	91 e0       	ldi	r25, 0x01	; 1
    17e8:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <rat_position>
    17ec:	28 13       	cpse	r18, r24
    17ee:	90 e0       	ldi	r25, 0x00	; 0
}
    17f0:	89 2f       	mov	r24, r25
    17f2:	08 95       	ret

000017f4 <add_new_rat_position>:

void add_new_rat_position(void){
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    17fa:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
    17fe:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1800:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
        test_position = position(x,y);
    1804:	bc 01       	movw	r22, r24
    1806:	67 70       	andi	r22, 0x07	; 7
    1808:	70 78       	andi	r23, 0x80	; 128
    180a:	77 23       	and	r23, r23
    180c:	34 f4       	brge	.+12     	; 0x181a <add_new_rat_position+0x26>
    180e:	61 50       	subi	r22, 0x01	; 1
    1810:	71 09       	sbc	r23, r1
    1812:	68 6f       	ori	r22, 0xF8	; 248
    1814:	7f 6f       	ori	r23, 0xFF	; 255
    1816:	6f 5f       	subi	r22, 0xFF	; 255
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	ce 01       	movw	r24, r28
    181c:	8f 70       	andi	r24, 0x0F	; 15
    181e:	90 78       	andi	r25, 0x80	; 128
    1820:	99 23       	and	r25, r25
    1822:	24 f4       	brge	.+8      	; 0x182c <add_new_rat_position+0x38>
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	80 6f       	ori	r24, 0xF0	; 240
    1828:	9f 6f       	ori	r25, 0xFF	; 255
    182a:	01 96       	adiw	r24, 0x01	; 1
    182c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    1830:	c8 2f       	mov	r28, r24
    1832:	13 e6       	ldi	r17, 0x63	; 99
    1834:	1e c0       	rjmp	.+60     	; 0x1872 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1836:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
    183a:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    183c:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
        test_position = position(x,y);
    1840:	bc 01       	movw	r22, r24
    1842:	67 70       	andi	r22, 0x07	; 7
    1844:	70 78       	andi	r23, 0x80	; 128
    1846:	77 23       	and	r23, r23
    1848:	34 f4       	brge	.+12     	; 0x1856 <add_new_rat_position+0x62>
    184a:	61 50       	subi	r22, 0x01	; 1
    184c:	71 09       	sbc	r23, r1
    184e:	68 6f       	ori	r22, 0xF8	; 248
    1850:	7f 6f       	ori	r23, 0xFF	; 255
    1852:	6f 5f       	subi	r22, 0xFF	; 255
    1854:	7f 4f       	sbci	r23, 0xFF	; 255
    1856:	ce 01       	movw	r24, r28
    1858:	8f 70       	andi	r24, 0x0F	; 15
    185a:	90 78       	andi	r25, 0x80	; 128
    185c:	99 23       	and	r25, r25
    185e:	24 f4       	brge	.+8      	; 0x1868 <add_new_rat_position+0x74>
    1860:	01 97       	sbiw	r24, 0x01	; 1
    1862:	80 6f       	ori	r24, 0xF0	; 240
    1864:	9f 6f       	ori	r25, 0xFF	; 255
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    186c:	c8 2f       	mov	r28, r24
    186e:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1870:	91 f0       	breq	.+36     	; 0x1896 <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1872:	8c 2f       	mov	r24, r28
    1874:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    1878:	81 11       	cpse	r24, r1
    187a:	dd cf       	rjmp	.-70     	; 0x1836 <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    187c:	8c 2f       	mov	r24, r28
    187e:	0e 94 15 07 	call	0xe2a	; 0xe2a <is_food_at>
    1882:	81 11       	cpse	r24, r1
    1884:	d8 cf       	rjmp	.-80     	; 0x1836 <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1886:	0e 94 9e 10 	call	0x213c	; 0x213c <get_superfood_position>
    188a:	8c 17       	cp	r24, r28
    188c:	a1 f2       	breq	.-88     	; 0x1836 <add_new_rat_position+0x42>
    188e:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1892:	8c 17       	cp	r24, r28
    1894:	81 f2       	breq	.-96     	; 0x1836 <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    1896:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_LIGHT_YELLOW);
    189a:	8c 2f       	mov	r24, r28
    189c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    18a0:	c8 2f       	mov	r28, r24
    18a2:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    18a6:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    18aa:	43 e3       	ldi	r20, 0x33	; 51
    18ac:	6c 2f       	mov	r22, r28
    18ae:	0e 94 10 09 	call	0x1220	; 0x1220 <ledmatrix_update_pixel>
}
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	08 95       	ret

000018ba <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    18ba:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    18be:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <RAT_WAIT_TIME>
    18c2:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <RAT_WAIT_TIME+0x1>
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	0e 94 a6 13 	call	0x274c	; 0x274c <__udivmodsi4>
    18ce:	21 e0       	ldi	r18, 0x01	; 1
    18d0:	67 2b       	or	r22, r23
    18d2:	68 2b       	or	r22, r24
    18d4:	69 2b       	or	r22, r25
    18d6:	09 f0       	breq	.+2      	; 0x18da <is_time_to_move_rat+0x20>
    18d8:	20 e0       	ldi	r18, 0x00	; 0
}
    18da:	82 2f       	mov	r24, r18
    18dc:	08 95       	ret

000018de <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    18de:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <score>
    18e2:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <score+0x1>
    18e6:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <score+0x2>
    18ea:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <score+0x3>
    18ee:	08 95       	ret

000018f0 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    18f0:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <score>
    18f4:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <score+0x1>
    18f8:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <score+0x2>
    18fc:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <score+0x3>
    1900:	48 0f       	add	r20, r24
    1902:	59 1f       	adc	r21, r25
    1904:	61 1d       	adc	r22, r1
    1906:	71 1d       	adc	r23, r1
    1908:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <score>
    190c:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <score+0x1>
    1910:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <score+0x2>
    1914:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <score+0x3>
    1918:	08 95       	ret

0000191a <get_score>:
}

uint32_t get_score(void) {
	return score;
    191a:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <score>
    191e:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <score+0x1>
    1922:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <score+0x2>
    1926:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <score+0x3>
}
    192a:	08 95       	ret

0000192c <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    192c:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <score>
    1930:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <score+0x1>
    1934:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <score+0x2>
    1938:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <score+0x3>
    193c:	08 95       	ret

0000193e <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    193e:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <colour>
	display_string = string_to_display;
    1942:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <display_string+0x1>
    1946:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <display_string>
	next_col_ptr = 0;
    194a:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <next_col_ptr+0x1>
    194e:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <next_col_ptr>
	next_char_to_display = 0;
    1952:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <next_char_to_display+0x1>
    1956:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <next_char_to_display>
    195a:	08 95       	ret

0000195c <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	28 97       	sbiw	r28, 0x08	; 8
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1974:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <next_col_ptr>
    1978:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <next_col_ptr+0x1>
    197c:	30 97       	sbiw	r30, 0x00	; 0
    197e:	81 f0       	breq	.+32     	; 0x19a0 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1980:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1982:	10 ff       	sbrs	r17, 0
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1986:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <next_col_ptr+0x1>
    198a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    198e:	00 e0       	ldi	r16, 0x00	; 0
    1990:	6b c0       	rjmp	.+214    	; 0x1a68 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1992:	31 96       	adiw	r30, 0x01	; 1
    1994:	f0 93 83 02 	sts	0x0283, r31	; 0x800283 <next_col_ptr+0x1>
    1998:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    199c:	00 e0       	ldi	r16, 0x00	; 0
    199e:	64 c0       	rjmp	.+200    	; 0x1a68 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    19a0:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <next_char_to_display>
    19a4:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <next_char_to_display+0x1>
    19a8:	30 97       	sbiw	r30, 0x00	; 0
    19aa:	09 f4       	brne	.+2      	; 0x19ae <scroll_display+0x52>
    19ac:	49 c0       	rjmp	.+146    	; 0x1a40 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    19ae:	cf 01       	movw	r24, r30
    19b0:	01 96       	adiw	r24, 0x01	; 1
    19b2:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <next_char_to_display+0x1>
    19b6:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <next_char_to_display>
    19ba:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    19bc:	e1 11       	cpse	r30, r1
    19be:	0a c0       	rjmp	.+20     	; 0x19d4 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    19c0:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <next_char_to_display+0x1>
    19c4:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <next_char_to_display>
			shift_countdown = 16;
    19c8:	80 e1       	ldi	r24, 0x10	; 16
    19ca:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19ce:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19d0:	10 e0       	ldi	r17, 0x00	; 0
    19d2:	4a c0       	rjmp	.+148    	; 0x1a68 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    19d4:	8f e9       	ldi	r24, 0x9F	; 159
    19d6:	8e 0f       	add	r24, r30
    19d8:	8a 31       	cpi	r24, 0x1A	; 26
    19da:	70 f4       	brcc	.+28     	; 0x19f8 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	ee 0f       	add	r30, r30
    19e0:	ff 1f       	adc	r31, r31
    19e2:	e8 5f       	subi	r30, 0xF8	; 248
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	85 91       	lpm	r24, Z+
    19e8:	94 91       	lpm	r25, Z
    19ea:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <next_col_ptr+0x1>
    19ee:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19f2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19f4:	10 e0       	ldi	r17, 0x00	; 0
    19f6:	38 c0       	rjmp	.+112    	; 0x1a68 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    19f8:	8f eb       	ldi	r24, 0xBF	; 191
    19fa:	8e 0f       	add	r24, r30
    19fc:	8a 31       	cpi	r24, 0x1A	; 26
    19fe:	70 f4       	brcc	.+28     	; 0x1a1c <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	ee 0f       	add	r30, r30
    1a04:	ff 1f       	adc	r31, r31
    1a06:	e8 5b       	subi	r30, 0xB8	; 184
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	85 91       	lpm	r24, Z+
    1a0c:	94 91       	lpm	r25, Z
    1a0e:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <next_col_ptr+0x1>
    1a12:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a16:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a18:	10 e0       	ldi	r17, 0x00	; 0
    1a1a:	26 c0       	rjmp	.+76     	; 0x1a68 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1a1c:	80 ed       	ldi	r24, 0xD0	; 208
    1a1e:	8e 0f       	add	r24, r30
    1a20:	8a 30       	cpi	r24, 0x0A	; 10
    1a22:	00 f5       	brcc	.+64     	; 0x1a64 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	ea 5a       	subi	r30, 0xAA	; 170
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	85 91       	lpm	r24, Z+
    1a30:	94 91       	lpm	r25, Z
    1a32:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <next_col_ptr+0x1>
    1a36:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a3a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1a40:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display_string>
    1a44:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a48:	01 e0       	ldi	r16, 0x01	; 1
    1a4a:	00 97       	sbiw	r24, 0x00	; 0
    1a4c:	09 f0       	breq	.+2      	; 0x1a50 <scroll_display+0xf4>
    1a4e:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1a50:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <next_char_to_display+0x1>
    1a54:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <next_char_to_display>
		display_string = 0;
    1a58:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <display_string+0x1>
    1a5c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a60:	10 e0       	ldi	r17, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a64:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a66:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1a68:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1a6c:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <colour>
    1a70:	fe 01       	movw	r30, r28
    1a72:	38 96       	adiw	r30, 0x08	; 8
    1a74:	ce 01       	movw	r24, r28
    1a76:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1a78:	11 23       	and	r17, r17
    1a7a:	14 f4       	brge	.+4      	; 0x1a80 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1a7c:	20 83       	st	Z, r18
    1a7e:	01 c0       	rjmp	.+2      	; 0x1a82 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1a80:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1a82:	11 0f       	add	r17, r17
    1a84:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1a86:	e8 17       	cp	r30, r24
    1a88:	f9 07       	cpc	r31, r25
    1a8a:	b1 f7       	brne	.-20     	; 0x1a78 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1a8e:	be 01       	movw	r22, r28
    1a90:	6f 5f       	subi	r22, 0xFF	; 255
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f e0       	ldi	r24, 0x0F	; 15
    1a96:	0e 94 2f 09 	call	0x125e	; 0x125e <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1a9a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <shift_countdown.1854>
    1a9e:	88 23       	and	r24, r24
    1aa0:	89 f0       	breq	.+34     	; 0x1ac4 <scroll_display+0x168>
		shift_countdown--;
    1aa2:	81 50       	subi	r24, 0x01	; 1
    1aa4:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1aa8:	00 23       	and	r16, r16
    1aaa:	11 f0       	breq	.+4      	; 0x1ab0 <scroll_display+0x154>
    1aac:	88 23       	and	r24, r24
    1aae:	11 f0       	breq	.+4      	; 0x1ab4 <scroll_display+0x158>
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	03 c0       	rjmp	.+6      	; 0x1aba <scroll_display+0x15e>
    1ab4:	91 e0       	ldi	r25, 0x01	; 1
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <scroll_display+0x15e>
    1ab8:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	99 23       	and	r25, r25
    1abe:	29 f0       	breq	.+10     	; 0x1aca <scroll_display+0x16e>
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	03 c0       	rjmp	.+6      	; 0x1aca <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1ac4:	00 23       	and	r16, r16
    1ac6:	a1 f3       	breq	.-24     	; 0x1ab0 <scroll_display+0x154>
    1ac8:	f7 cf       	rjmp	.-18     	; 0x1ab8 <scroll_display+0x15c>
	return !finished;
}
    1aca:	28 96       	adiw	r28, 0x08	; 8
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1ae0:	cf 93       	push	r28
    1ae2:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1ae4:	8a 30       	cpi	r24, 0x0A	; 10
    1ae6:	19 f4       	brne	.+6      	; 0x1aee <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1ae8:	8d e0       	ldi	r24, 0x0D	; 13
    1aea:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1aee:	9f b7       	in	r25, 0x3f	; 63
    1af0:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1af4:	99 23       	and	r25, r25
    1af6:	29 f1       	breq	.+74     	; 0x1b42 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1af8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1afc:	8f 3f       	cpi	r24, 0xFF	; 255
    1afe:	d1 f3       	breq	.-12     	; 0x1af4 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1b00:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1b02:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <out_insert_pos>
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	8e 0f       	add	r24, r30
    1b0a:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <out_insert_pos>
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	e6 53       	subi	r30, 0x36	; 54
    1b12:	fd 4f       	sbci	r31, 0xFD	; 253
    1b14:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1b16:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1b20:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <out_insert_pos>
    1b24:	8f 3f       	cpi	r24, 0xFF	; 255
    1b26:	11 f4       	brne	.+4      	; 0x1b2c <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1b28:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1b2c:	e1 ec       	ldi	r30, 0xC1	; 193
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	80 62       	ori	r24, 0x20	; 32
    1b34:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1b36:	99 23       	and	r25, r25
    1b38:	39 f0       	breq	.+14     	; 0x1b48 <uart_put_char+0x68>
		sei();
    1b3a:	78 94       	sei
	}
	return 0;
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	05 c0       	rjmp	.+10     	; 0x1b4c <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
}
    1b4c:	cf 91       	pop	r28
    1b4e:	08 95       	ret

00001b50 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1b50:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1b54:	88 23       	and	r24, r24
    1b56:	e1 f3       	breq	.-8      	; 0x1b50 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1b58:	2f b7       	in	r18, 0x3f	; 63
    1b5a:	20 78       	andi	r18, 0x80	; 128
	cli();
    1b5c:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1b5e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <input_insert_pos>
    1b62:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	83 1b       	sub	r24, r19
    1b6a:	91 09       	sbc	r25, r1
    1b6c:	5a f4       	brpl	.+22     	; 0x1b84 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b6e:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <input_insert_pos>
    1b72:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	e8 1b       	sub	r30, r24
    1b7a:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b7c:	e6 52       	subi	r30, 0x26	; 38
    1b7e:	fc 4f       	sbci	r31, 0xFC	; 252
    1b80:	80 81       	ld	r24, Z
    1b82:	0a c0       	rjmp	.+20     	; 0x1b98 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1b84:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <input_insert_pos>
    1b88:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	e8 1b       	sub	r30, r24
    1b90:	f1 09       	sbc	r31, r1
    1b92:	e6 53       	subi	r30, 0x36	; 54
    1b94:	fc 4f       	sbci	r31, 0xFC	; 252
    1b96:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1b98:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1b9c:	91 50       	subi	r25, 0x01	; 1
    1b9e:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1ba2:	22 23       	and	r18, r18
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <uart_get_char+0x58>
		sei();
    1ba6:	78 94       	sei
	}	
	return c;
}
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	08 95       	ret

00001bac <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1bac:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1bb0:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1bb4:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1bb8:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <bytes_in_input_buffer>
	input_overrun = 0;
    1bbc:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1bc0:	40 93 84 02 	sts	0x0284, r20	; 0x800284 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	88 0f       	add	r24, r24
    1bca:	99 1f       	adc	r25, r25
    1bcc:	aa 1f       	adc	r26, r26
    1bce:	bb 1f       	adc	r27, r27
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	aa 1f       	adc	r26, r26
    1bd6:	bb 1f       	adc	r27, r27
    1bd8:	9c 01       	movw	r18, r24
    1bda:	ad 01       	movw	r20, r26
    1bdc:	22 0f       	add	r18, r18
    1bde:	33 1f       	adc	r19, r19
    1be0:	44 1f       	adc	r20, r20
    1be2:	55 1f       	adc	r21, r21
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	72 e1       	ldi	r23, 0x12	; 18
    1be8:	8a e7       	ldi	r24, 0x7A	; 122
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	0e 94 c8 13 	call	0x2790	; 0x2790 <__divmodsi4>
    1bf0:	ba 01       	movw	r22, r20
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	4f 5f       	subi	r20, 0xFF	; 255
    1bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bf8:	6f 4f       	sbci	r22, 0xFF	; 255
    1bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfc:	db 01       	movw	r26, r22
    1bfe:	ca 01       	movw	r24, r20
    1c00:	1a f4       	brpl	.+6      	; 0x1c08 <init_serial_stdio+0x5c>
    1c02:	01 96       	adiw	r24, 0x01	; 1
    1c04:	a1 1d       	adc	r26, r1
    1c06:	b1 1d       	adc	r27, r1
    1c08:	b5 95       	asr	r27
    1c0a:	a7 95       	ror	r26
    1c0c:	97 95       	ror	r25
    1c0e:	87 95       	ror	r24
    1c10:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1c12:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c16:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1c1a:	e1 ec       	ldi	r30, 0xC1	; 193
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	88 e1       	ldi	r24, 0x18	; 24
    1c20:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1c22:	80 81       	ld	r24, Z
    1c24:	80 68       	ori	r24, 0x80	; 128
    1c26:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1c28:	ee ed       	ldi	r30, 0xDE	; 222
    1c2a:	f3 e0       	ldi	r31, 0x03	; 3
    1c2c:	8c e4       	ldi	r24, 0x4C	; 76
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	93 83       	std	Z+3, r25	; 0x03
    1c32:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	80 83       	st	Z, r24
    1c38:	08 95       	ret

00001c3a <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1c3a:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	91 11       	cpse	r25, r1
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <serial_input_available+0xc>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
}
    1c46:	08 95       	ret

00001c48 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1c48:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1c4c:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <bytes_in_input_buffer>
    1c50:	08 95       	ret

00001c52 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	2f 93       	push	r18
    1c5e:	8f 93       	push	r24
    1c60:	9f 93       	push	r25
    1c62:	ef 93       	push	r30
    1c64:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1c66:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1c6a:	88 23       	and	r24, r24
    1c6c:	29 f1       	breq	.+74     	; 0x1cb8 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1c6e:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <out_insert_pos>
    1c72:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	82 1b       	sub	r24, r18
    1c7a:	91 09       	sbc	r25, r1
    1c7c:	5a f4       	brpl	.+22     	; 0x1c94 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c7e:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <out_insert_pos>
    1c82:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	e8 1b       	sub	r30, r24
    1c8a:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c8c:	e7 53       	subi	r30, 0x37	; 55
    1c8e:	fc 4f       	sbci	r31, 0xFC	; 252
    1c90:	90 81       	ld	r25, Z
    1c92:	0a c0       	rjmp	.+20     	; 0x1ca8 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1c94:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <out_insert_pos>
    1c98:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	e8 1b       	sub	r30, r24
    1ca0:	f1 09       	sbc	r31, r1
    1ca2:	e6 53       	subi	r30, 0x36	; 54
    1ca4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ca6:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1ca8:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1cac:	81 50       	subi	r24, 0x01	; 1
    1cae:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1cb2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1cb8:	e1 ec       	ldi	r30, 0xC1	; 193
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 7d       	andi	r24, 0xDF	; 223
    1cc0:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	9f 91       	pop	r25
    1cc8:	8f 91       	pop	r24
    1cca:	2f 91       	pop	r18
    1ccc:	0f 90       	pop	r0
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	0f 90       	pop	r0
    1cd2:	1f 90       	pop	r1
    1cd4:	18 95       	reti

00001cd6 <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1cd6:	1f 92       	push	r1
    1cd8:	0f 92       	push	r0
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	0f 92       	push	r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	4f 93       	push	r20
    1ce6:	5f 93       	push	r21
    1ce8:	6f 93       	push	r22
    1cea:	7f 93       	push	r23
    1cec:	8f 93       	push	r24
    1cee:	9f 93       	push	r25
    1cf0:	af 93       	push	r26
    1cf2:	bf 93       	push	r27
    1cf4:	cf 93       	push	r28
    1cf6:	ef 93       	push	r30
    1cf8:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1cfa:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1cfe:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <do_echo>
    1d02:	88 23       	and	r24, r24
    1d04:	49 f0       	breq	.+18     	; 0x1d18 <__vector_20+0x42>
    1d06:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1d0a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d0c:	29 f0       	breq	.+10     	; 0x1d18 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	70 e0       	ldi	r23, 0x00	; 0
    1d12:	8c 2f       	mov	r24, r28
    1d14:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1d18:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1d1c:	80 31       	cpi	r24, 0x10	; 16
    1d1e:	20 f0       	brcs	.+8      	; 0x1d28 <__vector_20+0x52>
		input_overrun = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <input_overrun>
    1d26:	18 c0       	rjmp	.+48     	; 0x1d58 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1d28:	cd 30       	cpi	r28, 0x0D	; 13
    1d2a:	09 f4       	brne	.+2      	; 0x1d2e <__vector_20+0x58>
			c = '\n';
    1d2c:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1d2e:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <input_insert_pos>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	8e 0f       	add	r24, r30
    1d36:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <input_insert_pos>
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e6 53       	subi	r30, 0x36	; 54
    1d3e:	fc 4f       	sbci	r31, 0xFC	; 252
    1d40:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1d42:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1d4c:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <input_insert_pos>
    1d50:	80 31       	cpi	r24, 0x10	; 16
    1d52:	11 f4       	brne	.+4      	; 0x1d58 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1d54:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <input_insert_pos>
		}
	}
}
    1d58:	ff 91       	pop	r31
    1d5a:	ef 91       	pop	r30
    1d5c:	cf 91       	pop	r28
    1d5e:	bf 91       	pop	r27
    1d60:	af 91       	pop	r26
    1d62:	9f 91       	pop	r25
    1d64:	8f 91       	pop	r24
    1d66:	7f 91       	pop	r23
    1d68:	6f 91       	pop	r22
    1d6a:	5f 91       	pop	r21
    1d6c:	4f 91       	pop	r20
    1d6e:	3f 91       	pop	r19
    1d70:	2f 91       	pop	r18
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1d82:	82 e0       	ldi	r24, 0x02	; 2
    1d84:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <snakeLength>
	snakeTailIndex = 0;
    1d88:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <snakeTailIndex>
	snakeHeadIndex = 1;
    1d8c:	c1 e0       	ldi	r28, 0x01	; 1
    1d8e:	c0 93 88 02 	sts	0x0288, r28	; 0x800288 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    1d9a:	0a e8       	ldi	r16, 0x8A	; 138
    1d9c:	12 e0       	ldi	r17, 0x02	; 2
    1d9e:	f8 01       	movw	r30, r16
    1da0:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1da2:	61 e0       	ldi	r22, 0x01	; 1
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    1daa:	f8 01       	movw	r30, r16
    1dac:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1dae:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1db2:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <nextSnakeDirn>
}
    1db6:	cf 91       	pop	r28
    1db8:	1f 91       	pop	r17
    1dba:	0f 91       	pop	r16
    1dbc:	08 95       	ret

00001dbe <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1dbe:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    1dc2:	0e 2e       	mov	r0, r30
    1dc4:	00 0c       	add	r0, r0
    1dc6:	ff 0b       	sbc	r31, r31
    1dc8:	e6 57       	subi	r30, 0x76	; 118
    1dca:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1dcc:	80 81       	ld	r24, Z
    1dce:	08 95       	ret

00001dd0 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1dd0:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curSnakeDirn>
	nextSnakeDirn = dirn;
    1dd4:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1dd8:	08 95       	ret

00001dda <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1dda:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <snakeTailIndex>
    1dde:	0e 2e       	mov	r0, r30
    1de0:	00 0c       	add	r0, r0
    1de2:	ff 0b       	sbc	r31, r31
    1de4:	e6 57       	subi	r30, 0x76	; 118
    1de6:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1de8:	80 81       	ld	r24, Z
    1dea:	08 95       	ret

00001dec <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1dec:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    1df0:	08 95       	ret

00001df2 <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1df2:	e8 2f       	mov	r30, r24
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	e6 57       	subi	r30, 0x76	; 118
    1df8:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1dfa:	80 81       	ld	r24, Z
    1dfc:	08 95       	ret

00001dfe <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1dfe:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <snakeLength>
    1e02:	08 95       	ret

00001e04 <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1e04:	e6 2f       	mov	r30, r22
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	e6 57       	subi	r30, 0x76	; 118
    1e0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1e0c:	80 83       	st	Z, r24
    1e0e:	08 95       	ret

00001e10 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1e10:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <snakeHeadIndex>
    1e14:	08 95       	ret

00001e16 <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1e16:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <snakeTailIndex>
    1e1a:	08 95       	ret

00001e1c <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1e1c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <snakeHeadIndex>
    1e20:	08 95       	ret

00001e22 <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1e22:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <snakeTailIndex>
    1e26:	08 95       	ret

00001e28 <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1e28:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curSnakeDirn>
    1e2c:	08 95       	ret

00001e2e <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1e2e:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <snakeTailIndex>
    1e32:	e9 2f       	mov	r30, r25
    1e34:	09 2e       	mov	r0, r25
    1e36:	00 0c       	add	r0, r0
    1e38:	ff 0b       	sbc	r31, r31
    1e3a:	e6 57       	subi	r30, 0x76	; 118
    1e3c:	fd 4f       	sbci	r31, 0xFD	; 253
    1e3e:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1e40:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1e42:	91 32       	cpi	r25, 0x21	; 33
    1e44:	19 f0       	breq	.+6      	; 0x1e4c <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1e46:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <snakeTailIndex>
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1e4c:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <snakeTailIndex>
	}
	snakeLength--;
    1e50:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <snakeLength>
    1e54:	91 50       	subi	r25, 0x01	; 1
    1e56:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <snakeLength>
	
	return prev_tail_position;
}
    1e5a:	08 95       	ret

00001e5c <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1e5c:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curSnakeDirn>
    1e60:	91 30       	cpi	r25, 0x01	; 1
    1e62:	a9 f0       	breq	.+42     	; 0x1e8e <set_snake_dirn+0x32>
    1e64:	28 f0       	brcs	.+10     	; 0x1e70 <set_snake_dirn+0x14>
    1e66:	92 30       	cpi	r25, 0x02	; 2
    1e68:	41 f0       	breq	.+16     	; 0x1e7a <set_snake_dirn+0x1e>
    1e6a:	93 30       	cpi	r25, 0x03	; 3
    1e6c:	59 f0       	breq	.+22     	; 0x1e84 <set_snake_dirn+0x28>
    1e6e:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1e70:	82 30       	cpi	r24, 0x02	; 2
    1e72:	89 f0       	breq	.+34     	; 0x1e96 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e74:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1e78:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1e7a:	88 23       	and	r24, r24
    1e7c:	61 f0       	breq	.+24     	; 0x1e96 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e7e:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1e82:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	39 f0       	breq	.+14     	; 0x1e96 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e88:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1e8c:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1e8e:	83 30       	cpi	r24, 0x03	; 3
    1e90:	11 f0       	breq	.+4      	; 0x1e96 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e92:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1e96:	08 95       	ret

00001e98 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1e98:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1e9c:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1ea2:	0d c0       	rjmp	.+26     	; 0x1ebe <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1ea4:	e9 2f       	mov	r30, r25
    1ea6:	09 2e       	mov	r0, r25
    1ea8:	00 0c       	add	r0, r0
    1eaa:	ff 0b       	sbc	r31, r31
    1eac:	e6 57       	subi	r30, 0x76	; 118
    1eae:	fd 4f       	sbci	r31, 0xFD	; 253
    1eb0:	20 81       	ld	r18, Z
    1eb2:	28 17       	cp	r18, r24
    1eb4:	89 f0       	breq	.+34     	; 0x1ed8 <is_snake_at+0x40>
    1eb6:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1eb8:	91 32       	cpi	r25, 0x21	; 33
    1eba:	0c f0       	brlt	.+2      	; 0x1ebe <is_snake_at+0x26>
			index = 0;
    1ebc:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1ebe:	93 13       	cpse	r25, r19
    1ec0:	f1 cf       	rjmp	.-30     	; 0x1ea4 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1ec2:	e3 2f       	mov	r30, r19
    1ec4:	33 0f       	add	r19, r19
    1ec6:	ff 0b       	sbc	r31, r31
    1ec8:	e6 57       	subi	r30, 0x76	; 118
    1eca:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1ecc:	91 e0       	ldi	r25, 0x01	; 1
    1ece:	20 81       	ld	r18, Z
    1ed0:	28 17       	cp	r18, r24
    1ed2:	19 f0       	breq	.+6      	; 0x1eda <is_snake_at+0x42>
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <is_snake_at+0x42>
    1ed8:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1eda:	89 2f       	mov	r24, r25
    1edc:	08 95       	ret

00001ede <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1ede:	0f 93       	push	r16
    1ee0:	1f 93       	push	r17
    1ee2:	cf 93       	push	r28
    1ee4:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1ee6:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    1eea:	81 32       	cpi	r24, 0x21	; 33
    1eec:	08 f0       	brcs	.+2      	; 0x1ef0 <advance_snake_head+0x12>
    1eee:	98 c0       	rjmp	.+304    	; 0x2020 <advance_snake_head+0x142>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1ef0:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    1ef4:	0e 2e       	mov	r0, r30
    1ef6:	00 0c       	add	r0, r0
    1ef8:	ff 0b       	sbc	r31, r31
    1efa:	e6 57       	subi	r30, 0x76	; 118
    1efc:	fd 4f       	sbci	r31, 0xFD	; 253
    1efe:	80 81       	ld	r24, Z
    1f00:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    1f04:	18 2f       	mov	r17, r24
    1f06:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1f08:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    1f0c:	0e 2e       	mov	r0, r30
    1f0e:	00 0c       	add	r0, r0
    1f10:	ff 0b       	sbc	r31, r31
    1f12:	e6 57       	subi	r30, 0x76	; 118
    1f14:	fd 4f       	sbci	r31, 0xFD	; 253
    1f16:	80 81       	ld	r24, Z
    1f18:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    1f1c:	08 2f       	mov	r16, r24
    1f1e:	d8 2f       	mov	r29, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
	if(get_joystick_direction() != -1){
    1f20:	0e 94 ac 08 	call	0x1158	; 0x1158 <get_joystick_direction>
    1f24:	8f 3f       	cpi	r24, 0xFF	; 255
    1f26:	21 f0       	breq	.+8      	; 0x1f30 <advance_snake_head+0x52>
		set_snake_dirn(get_joystick_direction()); 
    1f28:	0e 94 ac 08 	call	0x1158	; 0x1158 <get_joystick_direction>
    1f2c:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <set_snake_dirn>
	}
    switch (nextSnakeDirn) {
    1f30:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <nextSnakeDirn>
    1f34:	81 30       	cpi	r24, 0x01	; 1
    1f36:	59 f0       	breq	.+22     	; 0x1f4e <advance_snake_head+0x70>
    1f38:	28 f0       	brcs	.+10     	; 0x1f44 <advance_snake_head+0x66>
    1f3a:	82 30       	cpi	r24, 0x02	; 2
    1f3c:	69 f0       	breq	.+26     	; 0x1f58 <advance_snake_head+0x7a>
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	81 f0       	breq	.+32     	; 0x1f62 <advance_snake_head+0x84>
    1f42:	1b c0       	rjmp	.+54     	; 0x1f7a <advance_snake_head+0x9c>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1f44:	d7 30       	cpi	r29, 0x07	; 7
    1f46:	91 f0       	breq	.+36     	; 0x1f6c <advance_snake_head+0x8e>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    1f48:	d1 e0       	ldi	r29, 0x01	; 1
    1f4a:	d0 0f       	add	r29, r16
    1f4c:	16 c0       	rjmp	.+44     	; 0x1f7a <advance_snake_head+0x9c>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1f4e:	cf 30       	cpi	r28, 0x0F	; 15
    1f50:	79 f0       	breq	.+30     	; 0x1f70 <advance_snake_head+0x92>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1f52:	c1 e0       	ldi	r28, 0x01	; 1
    1f54:	c1 0f       	add	r28, r17
    1f56:	11 c0       	rjmp	.+34     	; 0x1f7a <advance_snake_head+0x9c>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    1f58:	dd 23       	and	r29, r29
    1f5a:	61 f0       	breq	.+24     	; 0x1f74 <advance_snake_head+0x96>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    1f5c:	df ef       	ldi	r29, 0xFF	; 255
    1f5e:	d0 0f       	add	r29, r16
    1f60:	0c c0       	rjmp	.+24     	; 0x1f7a <advance_snake_head+0x9c>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    1f62:	cc 23       	and	r28, r28
    1f64:	49 f0       	breq	.+18     	; 0x1f78 <advance_snake_head+0x9a>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    1f66:	cf ef       	ldi	r28, 0xFF	; 255
    1f68:	c1 0f       	add	r28, r17
    1f6a:	07 c0       	rjmp	.+14     	; 0x1f7a <advance_snake_head+0x9c>
	}
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1f6c:	d0 e0       	ldi	r29, 0x00	; 0
    1f6e:	05 c0       	rjmp	.+10     	; 0x1f7a <advance_snake_head+0x9c>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1f70:	c0 e0       	ldi	r28, 0x00	; 0
    1f72:	03 c0       	rjmp	.+6      	; 0x1f7a <advance_snake_head+0x9c>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    1f74:	d7 e0       	ldi	r29, 0x07	; 7
    1f76:	01 c0       	rjmp	.+2      	; 0x1f7a <advance_snake_head+0x9c>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    1f78:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    1f7a:	6d 2f       	mov	r22, r29
    1f7c:	8c 2f       	mov	r24, r28
    1f7e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    1f82:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    1f84:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <nextSnakeDirn>
    1f88:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curSnakeDirn>
    1f8c:	98 13       	cpse	r25, r24
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1f8e:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curSnakeDirn>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1f92:	8c 2f       	mov	r24, r28
    1f94:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <is_snake_at>
    1f98:	88 23       	and	r24, r24
    1f9a:	51 f0       	breq	.+20     	; 0x1fb0 <advance_snake_head+0xd2>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1f9c:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <snakeTailIndex>
    1fa0:	0e 2e       	mov	r0, r30
    1fa2:	00 0c       	add	r0, r0
    1fa4:	ff 0b       	sbc	r31, r31
    1fa6:	e6 57       	subi	r30, 0x76	; 118
    1fa8:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1faa:	80 81       	ld	r24, Z
    1fac:	c8 13       	cpse	r28, r24
    1fae:	3a c0       	rjmp	.+116    	; 0x2024 <advance_snake_head+0x146>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1fb0:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <snakeHeadIndex>
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1fb6:	81 32       	cpi	r24, 0x21	; 33
    1fb8:	19 f0       	breq	.+6      	; 0x1fc0 <advance_snake_head+0xe2>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1fba:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <snakeHeadIndex>
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <advance_snake_head+0xe6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1fc0:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1fc4:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    1fc8:	0e 2e       	mov	r0, r30
    1fca:	00 0c       	add	r0, r0
    1fcc:	ff 0b       	sbc	r31, r31
    1fce:	e6 57       	subi	r30, 0x76	; 118
    1fd0:	fd 4f       	sbci	r31, 0xFD	; 253
    1fd2:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1fd4:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    1fde:	8c 2f       	mov	r24, r28
    1fe0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <is_rat_at>
    1fe4:	88 23       	and	r24, r24
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <advance_snake_head+0x116>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1fe8:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    1fec:	81 32       	cpi	r24, 0x21	; 33
    1fee:	e0 f0       	brcs	.+56     	; 0x2028 <advance_snake_head+0x14a>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    1ff0:	87 e0       	ldi	r24, 0x07	; 7
    1ff2:	21 c0       	rjmp	.+66     	; 0x2036 <advance_snake_head+0x158>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    1ff4:	8c 2f       	mov	r24, r28
    1ff6:	0e 94 a1 10 	call	0x2142	; 0x2142 <is_superfood_at>
    1ffa:	88 23       	and	r24, r24
    1ffc:	31 f0       	breq	.+12     	; 0x200a <advance_snake_head+0x12c>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1ffe:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    2002:	81 32       	cpi	r24, 0x21	; 33
    2004:	98 f0       	brcs	.+38     	; 0x202c <advance_snake_head+0x14e>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    2006:	85 e0       	ldi	r24, 0x05	; 5
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <advance_snake_head+0x158>
		}
	}
	if(is_food_at(newHeadPosn)) {
    200a:	8c 2f       	mov	r24, r28
    200c:	0e 94 15 07 	call	0xe2a	; 0xe2a <is_food_at>
    2010:	88 23       	and	r24, r24
    2012:	71 f0       	breq	.+28     	; 0x2030 <advance_snake_head+0x152>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    2014:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    2018:	81 32       	cpi	r24, 0x21	; 33
    201a:	60 f0       	brcs	.+24     	; 0x2034 <advance_snake_head+0x156>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    201c:	83 e0       	ldi	r24, 0x03	; 3
    201e:	0b c0       	rjmp	.+22     	; 0x2036 <advance_snake_head+0x158>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    2020:	8d ef       	ldi	r24, 0xFD	; 253
    2022:	09 c0       	rjmp	.+18     	; 0x2036 <advance_snake_head+0x158>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    2024:	8e ef       	ldi	r24, 0xFE	; 254
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <advance_snake_head+0x158>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    2028:	86 e0       	ldi	r24, 0x06	; 6
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <advance_snake_head+0x158>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    202c:	84 e0       	ldi	r24, 0x04	; 4
    202e:	03 c0       	rjmp	.+6      	; 0x2036 <advance_snake_head+0x158>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <advance_snake_head+0x158>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    2034:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2040:	94 b1       	in	r25, 0x04	; 4
    2042:	90 6b       	ori	r25, 0xB0	; 176
    2044:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    2046:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    2048:	90 e5       	ldi	r25, 0x50	; 80
    204a:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	21 f0       	breq	.+8      	; 0x2058 <spi_setup_master+0x18>
    2050:	80 32       	cpi	r24, 0x20	; 32
    2052:	11 f0       	breq	.+4      	; 0x2058 <spi_setup_master+0x18>
    2054:	82 30       	cpi	r24, 0x02	; 2
    2056:	19 f4       	brne	.+6      	; 0x205e <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    2058:	91 e0       	ldi	r25, 0x01	; 1
    205a:	9d bd       	out	0x2d, r25	; 45
			break;
    205c:	01 c0       	rjmp	.+2      	; 0x2060 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    205e:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2060:	80 32       	cpi	r24, 0x20	; 32
    2062:	69 f0       	breq	.+26     	; 0x207e <spi_setup_master+0x3e>
    2064:	28 f4       	brcc	.+10     	; 0x2070 <spi_setup_master+0x30>
    2066:	88 30       	cpi	r24, 0x08	; 8
    2068:	71 f0       	breq	.+28     	; 0x2086 <spi_setup_master+0x46>
    206a:	80 31       	cpi	r24, 0x10	; 16
    206c:	61 f0       	breq	.+24     	; 0x2086 <spi_setup_master+0x46>
    206e:	0e c0       	rjmp	.+28     	; 0x208c <spi_setup_master+0x4c>
    2070:	80 34       	cpi	r24, 0x40	; 64
    2072:	29 f0       	breq	.+10     	; 0x207e <spi_setup_master+0x3e>
    2074:	80 38       	cpi	r24, 0x80	; 128
    2076:	51 f4       	brne	.+20     	; 0x208c <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    2078:	8c b5       	in	r24, 0x2c	; 44
    207a:	81 60       	ori	r24, 0x01	; 1
    207c:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    207e:	8c b5       	in	r24, 0x2c	; 44
    2080:	82 60       	ori	r24, 0x02	; 2
    2082:	8c bd       	out	0x2c, r24	; 44
			break;
    2084:	03 c0       	rjmp	.+6      	; 0x208c <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2086:	8c b5       	in	r24, 0x2c	; 44
    2088:	81 60       	ori	r24, 0x01	; 1
    208a:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    208c:	2c 98       	cbi	0x05, 4	; 5
    208e:	08 95       	ret

00002090 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    2090:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2092:	0d b4       	in	r0, 0x2d	; 45
    2094:	07 fe       	sbrs	r0, 7
    2096:	fd cf       	rjmp	.-6      	; 0x2092 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2098:	8e b5       	in	r24, 0x2e	; 46
    209a:	08 95       	ret

0000209c <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

void load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    209c:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <superfood_position>
	superfood_on_board = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <superfood_on_board>
    20a6:	08 95       	ret

000020a8 <superfood_is_on_board>:
}

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    20a8:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <superfood_on_board>
    20ac:	08 95       	ret

000020ae <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    20ae:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    20b2:	68 59       	subi	r22, 0x98	; 152
    20b4:	7a 43       	sbci	r23, 0x3A	; 58
    20b6:	81 09       	sbc	r24, r1
    20b8:	91 09       	sbc	r25, r1
    20ba:	20 e2       	ldi	r18, 0x20	; 32
    20bc:	3e e4       	ldi	r19, 0x4E	; 78
    20be:	40 e0       	ldi	r20, 0x00	; 0
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	0e 94 a6 13 	call	0x274c	; 0x274c <__udivmodsi4>
    20c6:	67 2b       	or	r22, r23
    20c8:	68 2b       	or	r22, r24
    20ca:	69 2b       	or	r22, r25
    20cc:	21 f4       	brne	.+8      	; 0x20d6 <time_to_add_superfood+0x28>
    20ce:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	08 95       	ret
    20d6:	80 e0       	ldi	r24, 0x00	; 0
}
    20d8:	08 95       	ret

000020da <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    20da:	0e 94 d6 11 	call	0x23ac	; 0x23ac <get_clock_ticks>
    20de:	20 e2       	ldi	r18, 0x20	; 32
    20e0:	3e e4       	ldi	r19, 0x4E	; 78
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	50 e0       	ldi	r21, 0x00	; 0
    20e6:	0e 94 a6 13 	call	0x274c	; 0x274c <__udivmodsi4>
    20ea:	21 e0       	ldi	r18, 0x01	; 1
    20ec:	67 2b       	or	r22, r23
    20ee:	68 2b       	or	r22, r24
    20f0:	69 2b       	or	r22, r25
    20f2:	09 f0       	breq	.+2      	; 0x20f6 <time_to_remove_superfood+0x1c>
    20f4:	20 e0       	ldi	r18, 0x00	; 0
}
    20f6:	82 2f       	mov	r24, r18
    20f8:	08 95       	ret

000020fa <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    20fa:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    20fc:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    2100:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    2104:	c8 2f       	mov	r28, r24
    2106:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    210a:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	6c 2f       	mov	r22, r28
    2112:	0e 94 10 09 	call	0x1220	; 0x1220 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    211e:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <superfood_position>
	superfood_on_board = 0; 
    2122:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <superfood_on_board>
}
    2126:	cf 91       	pop	r28
    2128:	08 95       	ret

0000212a <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    212a:	60 e0       	ldi	r22, 0x00	; 0
    212c:	80 e0       	ldi	r24, 0x00	; 0
    212e:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    2132:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <superfood_position>
	superfood_on_board = 0;
    2136:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <superfood_on_board>
    213a:	08 95       	ret

0000213c <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    213c:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    2140:	08 95       	ret

00002142 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    2142:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <superfood_on_board>
    2146:	99 23       	and	r25, r25
    2148:	39 f0       	breq	.+14     	; 0x2158 <is_superfood_at+0x16>
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <superfood_position>
    2150:	28 13       	cpse	r18, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	89 2f       	mov	r24, r25
    2156:	08 95       	ret
    2158:	80 e0       	ldi	r24, 0x00	; 0
}
    215a:	08 95       	ret

0000215c <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    215c:	1f 93       	push	r17
    215e:	cf 93       	push	r28
    2160:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    2162:	0e 94 7d 10 	call	0x20fa	; 0x20fa <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    2166:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
    216a:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    216c:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
		test_position = position(x,y);
    2170:	bc 01       	movw	r22, r24
    2172:	67 70       	andi	r22, 0x07	; 7
    2174:	70 78       	andi	r23, 0x80	; 128
    2176:	77 23       	and	r23, r23
    2178:	34 f4       	brge	.+12     	; 0x2186 <add_superfood_to_board+0x2a>
    217a:	61 50       	subi	r22, 0x01	; 1
    217c:	71 09       	sbc	r23, r1
    217e:	68 6f       	ori	r22, 0xF8	; 248
    2180:	7f 6f       	ori	r23, 0xFF	; 255
    2182:	6f 5f       	subi	r22, 0xFF	; 255
    2184:	7f 4f       	sbci	r23, 0xFF	; 255
    2186:	ce 01       	movw	r24, r28
    2188:	8f 70       	andi	r24, 0x0F	; 15
    218a:	90 78       	andi	r25, 0x80	; 128
    218c:	99 23       	and	r25, r25
    218e:	24 f4       	brge	.+8      	; 0x2198 <add_superfood_to_board+0x3c>
    2190:	01 97       	sbiw	r24, 0x01	; 1
    2192:	80 6f       	ori	r24, 0xF0	; 240
    2194:	9f 6f       	ori	r25, 0xFF	; 255
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    219c:	c8 2f       	mov	r28, r24
    219e:	13 e6       	ldi	r17, 0x63	; 99
    21a0:	1e c0       	rjmp	.+60     	; 0x21de <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    21a2:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
    21a6:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    21a8:	0e 94 33 14 	call	0x2866	; 0x2866 <rand>
		test_position = position(x,y);
    21ac:	bc 01       	movw	r22, r24
    21ae:	67 70       	andi	r22, 0x07	; 7
    21b0:	70 78       	andi	r23, 0x80	; 128
    21b2:	77 23       	and	r23, r23
    21b4:	34 f4       	brge	.+12     	; 0x21c2 <add_superfood_to_board+0x66>
    21b6:	61 50       	subi	r22, 0x01	; 1
    21b8:	71 09       	sbc	r23, r1
    21ba:	68 6f       	ori	r22, 0xF8	; 248
    21bc:	7f 6f       	ori	r23, 0xFF	; 255
    21be:	6f 5f       	subi	r22, 0xFF	; 255
    21c0:	7f 4f       	sbci	r23, 0xFF	; 255
    21c2:	ce 01       	movw	r24, r28
    21c4:	8f 70       	andi	r24, 0x0F	; 15
    21c6:	90 78       	andi	r25, 0x80	; 128
    21c8:	99 23       	and	r25, r25
    21ca:	24 f4       	brge	.+8      	; 0x21d4 <add_superfood_to_board+0x78>
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	80 6f       	ori	r24, 0xF0	; 240
    21d0:	9f 6f       	ori	r25, 0xFF	; 255
    21d2:	01 96       	adiw	r24, 0x01	; 1
    21d4:	0e 94 62 09 	call	0x12c4	; 0x12c4 <position>
    21d8:	c8 2f       	mov	r28, r24
    21da:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    21dc:	a1 f0       	breq	.+40     	; 0x2206 <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    21de:	8c 2f       	mov	r24, r28
    21e0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    21e4:	81 11       	cpse	r24, r1
    21e6:	dd cf       	rjmp	.-70     	; 0x21a2 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    21e8:	8c 2f       	mov	r24, r28
    21ea:	0e 94 15 07 	call	0xe2a	; 0xe2a <is_food_at>
    21ee:	81 11       	cpse	r24, r1
    21f0:	d8 cf       	rjmp	.-80     	; 0x21a2 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    21f2:	8c 2f       	mov	r24, r28
    21f4:	0e 94 a1 10 	call	0x2142	; 0x2142 <is_superfood_at>
    21f8:	81 11       	cpse	r24, r1
    21fa:	d3 cf       	rjmp	.-90     	; 0x21a2 <add_superfood_to_board+0x46>
    21fc:	8c 2f       	mov	r24, r28
    21fe:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <is_rat_at>
    2202:	81 11       	cpse	r24, r1
    2204:	ce cf       	rjmp	.-100    	; 0x21a2 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    2206:	c0 93 dc 03 	sts	0x03DC, r28	; 0x8003dc <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    220a:	8c 2f       	mov	r24, r28
    220c:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <y_position>
    2210:	c8 2f       	mov	r28, r24
    2212:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    2216:	0e 94 57 09 	call	0x12ae	; 0x12ae <x_position>
    221a:	4c e3       	ldi	r20, 0x3C	; 60
    221c:	6c 2f       	mov	r22, r28
    221e:	0e 94 10 09 	call	0x1220	; 0x1220 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <superfood_on_board>
}
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	08 95       	ret

00002230 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    2230:	28 2f       	mov	r18, r24
    2232:	08 2e       	mov	r0, r24
    2234:	00 0c       	add	r0, r0
    2236:	33 0b       	sbc	r19, r19
    2238:	3f 93       	push	r19
    223a:	8f 93       	push	r24
    223c:	86 2f       	mov	r24, r22
    223e:	06 2e       	mov	r0, r22
    2240:	00 0c       	add	r0, r0
    2242:	99 0b       	sbc	r25, r25
    2244:	9f 93       	push	r25
    2246:	6f 93       	push	r22
    2248:	8d ed       	ldi	r24, 0xDD	; 221
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	9f 93       	push	r25
    224e:	8f 93       	push	r24
    2250:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	08 95       	ret

00002262 <clear_terminal>:
    2262:	88 ed       	ldi	r24, 0xD8	; 216
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	9f 93       	push	r25
    2268:	8f 93       	push	r24
    226a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	08 95       	ret

00002274 <set_display_attribute>:
    2274:	1f 92       	push	r1
    2276:	8f 93       	push	r24
    2278:	82 ed       	ldi	r24, 0xD2	; 210
    227a:	91 e0       	ldi	r25, 0x01	; 1
    227c:	9f 93       	push	r25
    227e:	8f 93       	push	r24
    2280:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
    2284:	0f 90       	pop	r0
    2286:	0f 90       	pop	r0
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	08 95       	ret

0000228e <hide_cursor>:
    228e:	8b ec       	ldi	r24, 0xCB	; 203
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	9f 93       	push	r25
    2294:	8f 93       	push	r24
    2296:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	08 95       	ret

000022a0 <show_cursor>:
    22a0:	84 ec       	ldi	r24, 0xC4	; 196
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	9f 93       	push	r25
    22a6:	8f 93       	push	r24
    22a8:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	08 95       	ret

000022b2 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    22b2:	63 e0       	ldi	r22, 0x03	; 3
    22b4:	83 e0       	ldi	r24, 0x03	; 3
    22b6:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf_P(PSTR("Snake"));
    22ba:	8e eb       	ldi	r24, 0xBE	; 190
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	9f 93       	push	r25
    22c0:	8f 93       	push	r24
    22c2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>

	move_cursor(3,5);
    22c6:	65 e0       	ldi	r22, 0x05	; 5
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    22ce:	80 e2       	ldi	r24, 0x20	; 32
    22d0:	0e 94 3a 11 	call	0x2274	; 0x2274 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    22d4:	84 e9       	ldi	r24, 0x94	; 148
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	9f 93       	push	r25
    22da:	8f 93       	push	r24
    22dc:	0e 94 39 15 	call	0x2a72	; 0x2a72 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    22e0:	85 e2       	ldi	r24, 0x25	; 37
    22e2:	0e 94 3a 11 	call	0x2274	; 0x2274 <set_display_attribute>
	display_EEPROM_high_score();
    22e6:	0e 94 10 06 	call	0xc20	; 0xc20 <display_EEPROM_high_score>
}
    22ea:	0f 90       	pop	r0
    22ec:	0f 90       	pop	r0
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	08 95       	ret

000022f4 <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    22f4:	0e 94 47 11 	call	0x228e	; 0x228e <hide_cursor>
	
	move_cursor(10,1);
    22f8:	61 e0       	ldi	r22, 0x01	; 1
    22fa:	8a e0       	ldi	r24, 0x0A	; 10
    22fc:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf("Snake");
    2300:	8d e4       	ldi	r24, 0x4D	; 77
    2302:	92 e0       	ldi	r25, 0x02	; 2
    2304:	9f 93       	push	r25
    2306:	8f 93       	push	r24
    2308:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>

	move_cursor(1,3);
    230c:	63 e0       	ldi	r22, 0x03	; 3
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf("Score:  ");
    2314:	83 e5       	ldi	r24, 0x53	; 83
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	9f 93       	push	r25
    231a:	8f 93       	push	r24
    231c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
	
}
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	08 95       	ret

0000232a <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    232a:	0e 94 47 11 	call	0x228e	; 0x228e <hide_cursor>
	move_cursor(1, 3);
    232e:	63 e0       	ldi	r22, 0x03	; 3
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	0e 94 18 11 	call	0x2230	; 0x2230 <move_cursor>
	printf("Score: %8lu", get_score());
    2336:	0e 94 8d 0c 	call	0x191a	; 0x191a <get_score>
    233a:	9f 93       	push	r25
    233c:	8f 93       	push	r24
    233e:	7f 93       	push	r23
    2340:	6f 93       	push	r22
    2342:	8c e5       	ldi	r24, 0x5C	; 92
    2344:	92 e0       	ldi	r25, 0x02	; 2
    2346:	9f 93       	push	r25
    2348:	8f 93       	push	r24
    234a:	0e 94 23 15 	call	0x2a46	; 0x2a46 <printf>
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	08 95       	ret

0000235c <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    235c:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <clock_ticks>
    2360:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <clock_ticks+0x1>
    2364:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <clock_ticks+0x2>
    2368:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    236c:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    236e:	8c e7       	ldi	r24, 0x7C	; 124
    2370:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    2372:	82 e0       	ldi	r24, 0x02	; 2
    2374:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    2376:	83 e0       	ldi	r24, 0x03	; 3
    2378:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    237a:	ee e6       	ldi	r30, 0x6E	; 110
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	80 81       	ld	r24, Z
    2380:	82 60       	ori	r24, 0x02	; 2
    2382:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    2384:	85 b3       	in	r24, 0x15	; 21
    2386:	82 70       	andi	r24, 0x02	; 2
    2388:	85 bb       	out	0x15, r24	; 21
    238a:	08 95       	ret

0000238c <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    238c:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <unpaused_game>
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	89 1b       	sub	r24, r25
    2394:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <unpaused_game>
    2398:	08 95       	ret

0000239a <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    239a:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <unpaused_game>
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	22 23       	and	r18, r18
    23a4:	11 f0       	breq	.+4      	; 0x23aa <timer_is_paused+0x10>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    23aa:	08 95       	ret

000023ac <get_clock_ticks>:
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	// uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
	cli();
    23ac:	f8 94       	cli
	return_value = clock_ticks;
    23ae:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <clock_ticks>
    23b2:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <clock_ticks+0x1>
    23b6:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <clock_ticks+0x2>
    23ba:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <clock_ticks+0x3>
	//if(interrupts_were_on) {
	sei();
    23be:	78 94       	sei
	//}
	return return_value;
}
    23c0:	08 95       	ret

000023c2 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	//uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
	cli();
    23c2:	f8 94       	cli
	clock_ticks =clock;
    23c4:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <clock_ticks>
    23c8:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <clock_ticks+0x1>
    23cc:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <clock_ticks+0x2>
    23d0:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <clock_ticks+0x3>
	sei();
    23d4:	78 94       	sei
    23d6:	08 95       	ret

000023d8 <display_SSD_value>:

void display_SSD_value(void){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    23d8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <SSD_CC_value>
    23dc:	88 23       	and	r24, r24
    23de:	81 f0       	breq	.+32     	; 0x2400 <display_SSD_value+0x28>
		PORTD |= (1<<2);
    23e0:	5a 9a       	sbi	0x0b, 2	; 11
		PORTC = seven_seg_for_tens[get_snake_length()/10];
    23e2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <get_snake_length>
    23e6:	ed ec       	ldi	r30, 0xCD	; 205
    23e8:	8e 9f       	mul	r24, r30
    23ea:	e1 2d       	mov	r30, r1
    23ec:	11 24       	eor	r1, r1
    23ee:	e6 95       	lsr	r30
    23f0:	e6 95       	lsr	r30
    23f2:	e6 95       	lsr	r30
    23f4:	f0 e0       	ldi	r31, 0x00	; 0
    23f6:	ec 59       	subi	r30, 0x9C	; 156
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	80 81       	ld	r24, Z
    23fc:	88 b9       	out	0x08, r24	; 8
    23fe:	16 c0       	rjmp	.+44     	; 0x242c <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    2400:	5a 98       	cbi	0x0b, 2	; 11
		PORTC = seven_seg_for_ones[get_snake_length()%10];
    2402:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <get_snake_length>
    2406:	9d ec       	ldi	r25, 0xCD	; 205
    2408:	89 9f       	mul	r24, r25
    240a:	91 2d       	mov	r25, r1
    240c:	11 24       	eor	r1, r1
    240e:	96 95       	lsr	r25
    2410:	96 95       	lsr	r25
    2412:	96 95       	lsr	r25
    2414:	99 0f       	add	r25, r25
    2416:	29 2f       	mov	r18, r25
    2418:	22 0f       	add	r18, r18
    241a:	22 0f       	add	r18, r18
    241c:	92 0f       	add	r25, r18
    241e:	89 1b       	sub	r24, r25
    2420:	e8 2f       	mov	r30, r24
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	e6 5a       	subi	r30, 0xA6	; 166
    2426:	fe 4f       	sbci	r31, 0xFE	; 254
    2428:	80 81       	ld	r24, Z
    242a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    242c:	82 e0       	ldi	r24, 0x02	; 2
    242e:	8a 95       	dec	r24
    2430:	f1 f7       	brne	.-4      	; 0x242e <display_SSD_value+0x56>
    2432:	00 c0       	rjmp	.+0      	; 0x2434 <display_SSD_value+0x5c>
	}
	_delay_us(1);
		
	SSD_CC_value = 1-SSD_CC_value; 
    2434:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <SSD_CC_value>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	89 1b       	sub	r24, r25
    243c:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <SSD_CC_value>
    2440:	08 95       	ret

00002442 <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    2442:	1f 92       	push	r1
    2444:	0f 92       	push	r0
    2446:	0f b6       	in	r0, 0x3f	; 63
    2448:	0f 92       	push	r0
    244a:	11 24       	eor	r1, r1
    244c:	2f 93       	push	r18
    244e:	3f 93       	push	r19
    2450:	4f 93       	push	r20
    2452:	5f 93       	push	r21
    2454:	6f 93       	push	r22
    2456:	7f 93       	push	r23
    2458:	8f 93       	push	r24
    245a:	9f 93       	push	r25
    245c:	af 93       	push	r26
    245e:	bf 93       	push	r27
    2460:	ef 93       	push	r30
    2462:	ff 93       	push	r31
	if(unpaused_game){
    2464:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <unpaused_game>
    2468:	88 23       	and	r24, r24
    246a:	99 f0       	breq	.+38     	; 0x2492 <__vector_16+0x50>
		clock_ticks++;
    246c:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <clock_ticks>
    2470:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <clock_ticks+0x1>
    2474:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <clock_ticks+0x2>
    2478:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <clock_ticks+0x3>
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	a1 1d       	adc	r26, r1
    2480:	b1 1d       	adc	r27, r1
    2482:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <clock_ticks>
    2486:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <clock_ticks+0x1>
    248a:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <clock_ticks+0x2>
    248e:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <clock_ticks+0x3>
	}
	display_SSD_value();
    2492:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <display_SSD_value>
	handle_buzzer_loop();
    2496:	0e 94 55 02 	call	0x4aa	; 0x4aa <handle_buzzer_loop>
}
    249a:	ff 91       	pop	r31
    249c:	ef 91       	pop	r30
    249e:	bf 91       	pop	r27
    24a0:	af 91       	pop	r26
    24a2:	9f 91       	pop	r25
    24a4:	8f 91       	pop	r24
    24a6:	7f 91       	pop	r23
    24a8:	6f 91       	pop	r22
    24aa:	5f 91       	pop	r21
    24ac:	4f 91       	pop	r20
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <initialise_timer_one>:

}
void change_timer_one_frequency(int new_frequency){
	//
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    24bc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    24c0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    24c4:	e1 e8       	ldi	r30, 0x81	; 129
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	8a 60       	ori	r24, 0x0A	; 10
    24cc:	80 83       	st	Z, r24
    24ce:	80 e4       	ldi	r24, 0x40	; 64
    24d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24d4:	88 ee       	ldi	r24, 0xE8	; 232
    24d6:	93 e0       	ldi	r25, 0x03	; 3
    24d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    24dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    24e0:	55 98       	cbi	0x0a, 5	; 10
    24e2:	53 98       	cbi	0x0a, 3	; 10
    24e4:	0e 94 a2 01 	call	0x344	; 0x344 <init_buzzer>
    24e8:	08 95       	ret

000024ea <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A);
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    24ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    24ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    24f2:	08 95       	ret

000024f4 <enable_timer_one>:
}
void enable_timer_one(void){
	DDRD |= (1<<5);
    24f4:	55 9a       	sbi	0x0a, 5	; 10
    24f6:	08 95       	ret

000024f8 <__fixunssfsi>:
    24f8:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <__fp_splitA>
    24fc:	88 f0       	brcs	.+34     	; 0x2520 <__fixunssfsi+0x28>
    24fe:	9f 57       	subi	r25, 0x7F	; 127
    2500:	98 f0       	brcs	.+38     	; 0x2528 <__fixunssfsi+0x30>
    2502:	b9 2f       	mov	r27, r25
    2504:	99 27       	eor	r25, r25
    2506:	b7 51       	subi	r27, 0x17	; 23
    2508:	b0 f0       	brcs	.+44     	; 0x2536 <__fixunssfsi+0x3e>
    250a:	e1 f0       	breq	.+56     	; 0x2544 <__fixunssfsi+0x4c>
    250c:	66 0f       	add	r22, r22
    250e:	77 1f       	adc	r23, r23
    2510:	88 1f       	adc	r24, r24
    2512:	99 1f       	adc	r25, r25
    2514:	1a f0       	brmi	.+6      	; 0x251c <__fixunssfsi+0x24>
    2516:	ba 95       	dec	r27
    2518:	c9 f7       	brne	.-14     	; 0x250c <__fixunssfsi+0x14>
    251a:	14 c0       	rjmp	.+40     	; 0x2544 <__fixunssfsi+0x4c>
    251c:	b1 30       	cpi	r27, 0x01	; 1
    251e:	91 f0       	breq	.+36     	; 0x2544 <__fixunssfsi+0x4c>
    2520:	0e 94 0a 13 	call	0x2614	; 0x2614 <__fp_zero>
    2524:	b1 e0       	ldi	r27, 0x01	; 1
    2526:	08 95       	ret
    2528:	0c 94 0a 13 	jmp	0x2614	; 0x2614 <__fp_zero>
    252c:	67 2f       	mov	r22, r23
    252e:	78 2f       	mov	r23, r24
    2530:	88 27       	eor	r24, r24
    2532:	b8 5f       	subi	r27, 0xF8	; 248
    2534:	39 f0       	breq	.+14     	; 0x2544 <__fixunssfsi+0x4c>
    2536:	b9 3f       	cpi	r27, 0xF9	; 249
    2538:	cc f3       	brlt	.-14     	; 0x252c <__fixunssfsi+0x34>
    253a:	86 95       	lsr	r24
    253c:	77 95       	ror	r23
    253e:	67 95       	ror	r22
    2540:	b3 95       	inc	r27
    2542:	d9 f7       	brne	.-10     	; 0x253a <__fixunssfsi+0x42>
    2544:	3e f4       	brtc	.+14     	; 0x2554 <__fixunssfsi+0x5c>
    2546:	90 95       	com	r25
    2548:	80 95       	com	r24
    254a:	70 95       	com	r23
    254c:	61 95       	neg	r22
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	08 95       	ret

00002556 <__floatunsisf>:
    2556:	e8 94       	clt
    2558:	09 c0       	rjmp	.+18     	; 0x256c <__floatsisf+0x12>

0000255a <__floatsisf>:
    255a:	97 fb       	bst	r25, 7
    255c:	3e f4       	brtc	.+14     	; 0x256c <__floatsisf+0x12>
    255e:	90 95       	com	r25
    2560:	80 95       	com	r24
    2562:	70 95       	com	r23
    2564:	61 95       	neg	r22
    2566:	7f 4f       	sbci	r23, 0xFF	; 255
    2568:	8f 4f       	sbci	r24, 0xFF	; 255
    256a:	9f 4f       	sbci	r25, 0xFF	; 255
    256c:	99 23       	and	r25, r25
    256e:	a9 f0       	breq	.+42     	; 0x259a <__floatsisf+0x40>
    2570:	f9 2f       	mov	r31, r25
    2572:	96 e9       	ldi	r25, 0x96	; 150
    2574:	bb 27       	eor	r27, r27
    2576:	93 95       	inc	r25
    2578:	f6 95       	lsr	r31
    257a:	87 95       	ror	r24
    257c:	77 95       	ror	r23
    257e:	67 95       	ror	r22
    2580:	b7 95       	ror	r27
    2582:	f1 11       	cpse	r31, r1
    2584:	f8 cf       	rjmp	.-16     	; 0x2576 <__floatsisf+0x1c>
    2586:	fa f4       	brpl	.+62     	; 0x25c6 <__floatsisf+0x6c>
    2588:	bb 0f       	add	r27, r27
    258a:	11 f4       	brne	.+4      	; 0x2590 <__floatsisf+0x36>
    258c:	60 ff       	sbrs	r22, 0
    258e:	1b c0       	rjmp	.+54     	; 0x25c6 <__floatsisf+0x6c>
    2590:	6f 5f       	subi	r22, 0xFF	; 255
    2592:	7f 4f       	sbci	r23, 0xFF	; 255
    2594:	8f 4f       	sbci	r24, 0xFF	; 255
    2596:	9f 4f       	sbci	r25, 0xFF	; 255
    2598:	16 c0       	rjmp	.+44     	; 0x25c6 <__floatsisf+0x6c>
    259a:	88 23       	and	r24, r24
    259c:	11 f0       	breq	.+4      	; 0x25a2 <__floatsisf+0x48>
    259e:	96 e9       	ldi	r25, 0x96	; 150
    25a0:	11 c0       	rjmp	.+34     	; 0x25c4 <__floatsisf+0x6a>
    25a2:	77 23       	and	r23, r23
    25a4:	21 f0       	breq	.+8      	; 0x25ae <__floatsisf+0x54>
    25a6:	9e e8       	ldi	r25, 0x8E	; 142
    25a8:	87 2f       	mov	r24, r23
    25aa:	76 2f       	mov	r23, r22
    25ac:	05 c0       	rjmp	.+10     	; 0x25b8 <__floatsisf+0x5e>
    25ae:	66 23       	and	r22, r22
    25b0:	71 f0       	breq	.+28     	; 0x25ce <__floatsisf+0x74>
    25b2:	96 e8       	ldi	r25, 0x86	; 134
    25b4:	86 2f       	mov	r24, r22
    25b6:	70 e0       	ldi	r23, 0x00	; 0
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	2a f0       	brmi	.+10     	; 0x25c6 <__floatsisf+0x6c>
    25bc:	9a 95       	dec	r25
    25be:	66 0f       	add	r22, r22
    25c0:	77 1f       	adc	r23, r23
    25c2:	88 1f       	adc	r24, r24
    25c4:	da f7       	brpl	.-10     	; 0x25bc <__floatsisf+0x62>
    25c6:	88 0f       	add	r24, r24
    25c8:	96 95       	lsr	r25
    25ca:	87 95       	ror	r24
    25cc:	97 f9       	bld	r25, 7
    25ce:	08 95       	ret

000025d0 <__fp_split3>:
    25d0:	57 fd       	sbrc	r21, 7
    25d2:	90 58       	subi	r25, 0x80	; 128
    25d4:	44 0f       	add	r20, r20
    25d6:	55 1f       	adc	r21, r21
    25d8:	59 f0       	breq	.+22     	; 0x25f0 <__fp_splitA+0x10>
    25da:	5f 3f       	cpi	r21, 0xFF	; 255
    25dc:	71 f0       	breq	.+28     	; 0x25fa <__fp_splitA+0x1a>
    25de:	47 95       	ror	r20

000025e0 <__fp_splitA>:
    25e0:	88 0f       	add	r24, r24
    25e2:	97 fb       	bst	r25, 7
    25e4:	99 1f       	adc	r25, r25
    25e6:	61 f0       	breq	.+24     	; 0x2600 <__fp_splitA+0x20>
    25e8:	9f 3f       	cpi	r25, 0xFF	; 255
    25ea:	79 f0       	breq	.+30     	; 0x260a <__fp_splitA+0x2a>
    25ec:	87 95       	ror	r24
    25ee:	08 95       	ret
    25f0:	12 16       	cp	r1, r18
    25f2:	13 06       	cpc	r1, r19
    25f4:	14 06       	cpc	r1, r20
    25f6:	55 1f       	adc	r21, r21
    25f8:	f2 cf       	rjmp	.-28     	; 0x25de <__fp_split3+0xe>
    25fa:	46 95       	lsr	r20
    25fc:	f1 df       	rcall	.-30     	; 0x25e0 <__fp_splitA>
    25fe:	08 c0       	rjmp	.+16     	; 0x2610 <__fp_splitA+0x30>
    2600:	16 16       	cp	r1, r22
    2602:	17 06       	cpc	r1, r23
    2604:	18 06       	cpc	r1, r24
    2606:	99 1f       	adc	r25, r25
    2608:	f1 cf       	rjmp	.-30     	; 0x25ec <__fp_splitA+0xc>
    260a:	86 95       	lsr	r24
    260c:	71 05       	cpc	r23, r1
    260e:	61 05       	cpc	r22, r1
    2610:	08 94       	sec
    2612:	08 95       	ret

00002614 <__fp_zero>:
    2614:	e8 94       	clt

00002616 <__fp_szero>:
    2616:	bb 27       	eor	r27, r27
    2618:	66 27       	eor	r22, r22
    261a:	77 27       	eor	r23, r23
    261c:	cb 01       	movw	r24, r22
    261e:	97 f9       	bld	r25, 7
    2620:	08 95       	ret

00002622 <__mulsf3>:
    2622:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3x>
    2626:	0c 94 95 13 	jmp	0x272a	; 0x272a <__fp_round>
    262a:	0e 94 87 13 	call	0x270e	; 0x270e <__fp_pscA>
    262e:	38 f0       	brcs	.+14     	; 0x263e <__mulsf3+0x1c>
    2630:	0e 94 8e 13 	call	0x271c	; 0x271c <__fp_pscB>
    2634:	20 f0       	brcs	.+8      	; 0x263e <__mulsf3+0x1c>
    2636:	95 23       	and	r25, r21
    2638:	11 f0       	breq	.+4      	; 0x263e <__mulsf3+0x1c>
    263a:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__fp_inf>
    263e:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__fp_nan>
    2642:	11 24       	eor	r1, r1
    2644:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__fp_szero>

00002648 <__mulsf3x>:
    2648:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <__fp_split3>
    264c:	70 f3       	brcs	.-36     	; 0x262a <__mulsf3+0x8>

0000264e <__mulsf3_pse>:
    264e:	95 9f       	mul	r25, r21
    2650:	c1 f3       	breq	.-16     	; 0x2642 <__mulsf3+0x20>
    2652:	95 0f       	add	r25, r21
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	55 1f       	adc	r21, r21
    2658:	62 9f       	mul	r22, r18
    265a:	f0 01       	movw	r30, r0
    265c:	72 9f       	mul	r23, r18
    265e:	bb 27       	eor	r27, r27
    2660:	f0 0d       	add	r31, r0
    2662:	b1 1d       	adc	r27, r1
    2664:	63 9f       	mul	r22, r19
    2666:	aa 27       	eor	r26, r26
    2668:	f0 0d       	add	r31, r0
    266a:	b1 1d       	adc	r27, r1
    266c:	aa 1f       	adc	r26, r26
    266e:	64 9f       	mul	r22, r20
    2670:	66 27       	eor	r22, r22
    2672:	b0 0d       	add	r27, r0
    2674:	a1 1d       	adc	r26, r1
    2676:	66 1f       	adc	r22, r22
    2678:	82 9f       	mul	r24, r18
    267a:	22 27       	eor	r18, r18
    267c:	b0 0d       	add	r27, r0
    267e:	a1 1d       	adc	r26, r1
    2680:	62 1f       	adc	r22, r18
    2682:	73 9f       	mul	r23, r19
    2684:	b0 0d       	add	r27, r0
    2686:	a1 1d       	adc	r26, r1
    2688:	62 1f       	adc	r22, r18
    268a:	83 9f       	mul	r24, r19
    268c:	a0 0d       	add	r26, r0
    268e:	61 1d       	adc	r22, r1
    2690:	22 1f       	adc	r18, r18
    2692:	74 9f       	mul	r23, r20
    2694:	33 27       	eor	r19, r19
    2696:	a0 0d       	add	r26, r0
    2698:	61 1d       	adc	r22, r1
    269a:	23 1f       	adc	r18, r19
    269c:	84 9f       	mul	r24, r20
    269e:	60 0d       	add	r22, r0
    26a0:	21 1d       	adc	r18, r1
    26a2:	82 2f       	mov	r24, r18
    26a4:	76 2f       	mov	r23, r22
    26a6:	6a 2f       	mov	r22, r26
    26a8:	11 24       	eor	r1, r1
    26aa:	9f 57       	subi	r25, 0x7F	; 127
    26ac:	50 40       	sbci	r21, 0x00	; 0
    26ae:	9a f0       	brmi	.+38     	; 0x26d6 <__mulsf3_pse+0x88>
    26b0:	f1 f0       	breq	.+60     	; 0x26ee <__mulsf3_pse+0xa0>
    26b2:	88 23       	and	r24, r24
    26b4:	4a f0       	brmi	.+18     	; 0x26c8 <__mulsf3_pse+0x7a>
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	bb 1f       	adc	r27, r27
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	91 50       	subi	r25, 0x01	; 1
    26c4:	50 40       	sbci	r21, 0x00	; 0
    26c6:	a9 f7       	brne	.-22     	; 0x26b2 <__mulsf3_pse+0x64>
    26c8:	9e 3f       	cpi	r25, 0xFE	; 254
    26ca:	51 05       	cpc	r21, r1
    26cc:	80 f0       	brcs	.+32     	; 0x26ee <__mulsf3_pse+0xa0>
    26ce:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__fp_inf>
    26d2:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <__fp_szero>
    26d6:	5f 3f       	cpi	r21, 0xFF	; 255
    26d8:	e4 f3       	brlt	.-8      	; 0x26d2 <__mulsf3_pse+0x84>
    26da:	98 3e       	cpi	r25, 0xE8	; 232
    26dc:	d4 f3       	brlt	.-12     	; 0x26d2 <__mulsf3_pse+0x84>
    26de:	86 95       	lsr	r24
    26e0:	77 95       	ror	r23
    26e2:	67 95       	ror	r22
    26e4:	b7 95       	ror	r27
    26e6:	f7 95       	ror	r31
    26e8:	e7 95       	ror	r30
    26ea:	9f 5f       	subi	r25, 0xFF	; 255
    26ec:	c1 f7       	brne	.-16     	; 0x26de <__mulsf3_pse+0x90>
    26ee:	fe 2b       	or	r31, r30
    26f0:	88 0f       	add	r24, r24
    26f2:	91 1d       	adc	r25, r1
    26f4:	96 95       	lsr	r25
    26f6:	87 95       	ror	r24
    26f8:	97 f9       	bld	r25, 7
    26fa:	08 95       	ret

000026fc <__fp_inf>:
    26fc:	97 f9       	bld	r25, 7
    26fe:	9f 67       	ori	r25, 0x7F	; 127
    2700:	80 e8       	ldi	r24, 0x80	; 128
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	08 95       	ret

00002708 <__fp_nan>:
    2708:	9f ef       	ldi	r25, 0xFF	; 255
    270a:	80 ec       	ldi	r24, 0xC0	; 192
    270c:	08 95       	ret

0000270e <__fp_pscA>:
    270e:	00 24       	eor	r0, r0
    2710:	0a 94       	dec	r0
    2712:	16 16       	cp	r1, r22
    2714:	17 06       	cpc	r1, r23
    2716:	18 06       	cpc	r1, r24
    2718:	09 06       	cpc	r0, r25
    271a:	08 95       	ret

0000271c <__fp_pscB>:
    271c:	00 24       	eor	r0, r0
    271e:	0a 94       	dec	r0
    2720:	12 16       	cp	r1, r18
    2722:	13 06       	cpc	r1, r19
    2724:	14 06       	cpc	r1, r20
    2726:	05 06       	cpc	r0, r21
    2728:	08 95       	ret

0000272a <__fp_round>:
    272a:	09 2e       	mov	r0, r25
    272c:	03 94       	inc	r0
    272e:	00 0c       	add	r0, r0
    2730:	11 f4       	brne	.+4      	; 0x2736 <__fp_round+0xc>
    2732:	88 23       	and	r24, r24
    2734:	52 f0       	brmi	.+20     	; 0x274a <__fp_round+0x20>
    2736:	bb 0f       	add	r27, r27
    2738:	40 f4       	brcc	.+16     	; 0x274a <__fp_round+0x20>
    273a:	bf 2b       	or	r27, r31
    273c:	11 f4       	brne	.+4      	; 0x2742 <__fp_round+0x18>
    273e:	60 ff       	sbrs	r22, 0
    2740:	04 c0       	rjmp	.+8      	; 0x274a <__fp_round+0x20>
    2742:	6f 5f       	subi	r22, 0xFF	; 255
    2744:	7f 4f       	sbci	r23, 0xFF	; 255
    2746:	8f 4f       	sbci	r24, 0xFF	; 255
    2748:	9f 4f       	sbci	r25, 0xFF	; 255
    274a:	08 95       	ret

0000274c <__udivmodsi4>:
    274c:	a1 e2       	ldi	r26, 0x21	; 33
    274e:	1a 2e       	mov	r1, r26
    2750:	aa 1b       	sub	r26, r26
    2752:	bb 1b       	sub	r27, r27
    2754:	fd 01       	movw	r30, r26
    2756:	0d c0       	rjmp	.+26     	; 0x2772 <__udivmodsi4_ep>

00002758 <__udivmodsi4_loop>:
    2758:	aa 1f       	adc	r26, r26
    275a:	bb 1f       	adc	r27, r27
    275c:	ee 1f       	adc	r30, r30
    275e:	ff 1f       	adc	r31, r31
    2760:	a2 17       	cp	r26, r18
    2762:	b3 07       	cpc	r27, r19
    2764:	e4 07       	cpc	r30, r20
    2766:	f5 07       	cpc	r31, r21
    2768:	20 f0       	brcs	.+8      	; 0x2772 <__udivmodsi4_ep>
    276a:	a2 1b       	sub	r26, r18
    276c:	b3 0b       	sbc	r27, r19
    276e:	e4 0b       	sbc	r30, r20
    2770:	f5 0b       	sbc	r31, r21

00002772 <__udivmodsi4_ep>:
    2772:	66 1f       	adc	r22, r22
    2774:	77 1f       	adc	r23, r23
    2776:	88 1f       	adc	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	1a 94       	dec	r1
    277c:	69 f7       	brne	.-38     	; 0x2758 <__udivmodsi4_loop>
    277e:	60 95       	com	r22
    2780:	70 95       	com	r23
    2782:	80 95       	com	r24
    2784:	90 95       	com	r25
    2786:	9b 01       	movw	r18, r22
    2788:	ac 01       	movw	r20, r24
    278a:	bd 01       	movw	r22, r26
    278c:	cf 01       	movw	r24, r30
    278e:	08 95       	ret

00002790 <__divmodsi4>:
    2790:	05 2e       	mov	r0, r21
    2792:	97 fb       	bst	r25, 7
    2794:	1e f4       	brtc	.+6      	; 0x279c <__divmodsi4+0xc>
    2796:	00 94       	com	r0
    2798:	0e 94 df 13 	call	0x27be	; 0x27be <__negsi2>
    279c:	57 fd       	sbrc	r21, 7
    279e:	07 d0       	rcall	.+14     	; 0x27ae <__divmodsi4_neg2>
    27a0:	0e 94 a6 13 	call	0x274c	; 0x274c <__udivmodsi4>
    27a4:	07 fc       	sbrc	r0, 7
    27a6:	03 d0       	rcall	.+6      	; 0x27ae <__divmodsi4_neg2>
    27a8:	4e f4       	brtc	.+18     	; 0x27bc <__divmodsi4_exit>
    27aa:	0c 94 df 13 	jmp	0x27be	; 0x27be <__negsi2>

000027ae <__divmodsi4_neg2>:
    27ae:	50 95       	com	r21
    27b0:	40 95       	com	r20
    27b2:	30 95       	com	r19
    27b4:	21 95       	neg	r18
    27b6:	3f 4f       	sbci	r19, 0xFF	; 255
    27b8:	4f 4f       	sbci	r20, 0xFF	; 255
    27ba:	5f 4f       	sbci	r21, 0xFF	; 255

000027bc <__divmodsi4_exit>:
    27bc:	08 95       	ret

000027be <__negsi2>:
    27be:	90 95       	com	r25
    27c0:	80 95       	com	r24
    27c2:	70 95       	com	r23
    27c4:	61 95       	neg	r22
    27c6:	7f 4f       	sbci	r23, 0xFF	; 255
    27c8:	8f 4f       	sbci	r24, 0xFF	; 255
    27ca:	9f 4f       	sbci	r25, 0xFF	; 255
    27cc:	08 95       	ret

000027ce <do_rand>:
    27ce:	8f 92       	push	r8
    27d0:	9f 92       	push	r9
    27d2:	af 92       	push	r10
    27d4:	bf 92       	push	r11
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	cf 93       	push	r28
    27e0:	df 93       	push	r29
    27e2:	ec 01       	movw	r28, r24
    27e4:	68 81       	ld	r22, Y
    27e6:	79 81       	ldd	r23, Y+1	; 0x01
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	9b 81       	ldd	r25, Y+3	; 0x03
    27ec:	61 15       	cp	r22, r1
    27ee:	71 05       	cpc	r23, r1
    27f0:	81 05       	cpc	r24, r1
    27f2:	91 05       	cpc	r25, r1
    27f4:	21 f4       	brne	.+8      	; 0x27fe <do_rand+0x30>
    27f6:	64 e2       	ldi	r22, 0x24	; 36
    27f8:	79 ed       	ldi	r23, 0xD9	; 217
    27fa:	8b e5       	ldi	r24, 0x5B	; 91
    27fc:	97 e0       	ldi	r25, 0x07	; 7
    27fe:	2d e1       	ldi	r18, 0x1D	; 29
    2800:	33 ef       	ldi	r19, 0xF3	; 243
    2802:	41 e0       	ldi	r20, 0x01	; 1
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	0e 94 c8 13 	call	0x2790	; 0x2790 <__divmodsi4>
    280a:	49 01       	movw	r8, r18
    280c:	5a 01       	movw	r10, r20
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	a7 ea       	ldi	r26, 0xA7	; 167
    2814:	b1 e4       	ldi	r27, 0x41	; 65
    2816:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__muluhisi3>
    281a:	6b 01       	movw	r12, r22
    281c:	7c 01       	movw	r14, r24
    281e:	ac ee       	ldi	r26, 0xEC	; 236
    2820:	b4 ef       	ldi	r27, 0xF4	; 244
    2822:	a5 01       	movw	r20, r10
    2824:	94 01       	movw	r18, r8
    2826:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulohisi3>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	8c 0d       	add	r24, r12
    2830:	9d 1d       	adc	r25, r13
    2832:	ae 1d       	adc	r26, r14
    2834:	bf 1d       	adc	r27, r15
    2836:	b7 ff       	sbrs	r27, 7
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <do_rand+0x72>
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	a1 09       	sbc	r26, r1
    283e:	b0 48       	sbci	r27, 0x80	; 128
    2840:	88 83       	st	Y, r24
    2842:	99 83       	std	Y+1, r25	; 0x01
    2844:	aa 83       	std	Y+2, r26	; 0x02
    2846:	bb 83       	std	Y+3, r27	; 0x03
    2848:	9f 77       	andi	r25, 0x7F	; 127
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	08 95       	ret

00002860 <rand_r>:
    2860:	0e 94 e7 13 	call	0x27ce	; 0x27ce <do_rand>
    2864:	08 95       	ret

00002866 <rand>:
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <do_rand>
    286e:	08 95       	ret

00002870 <srand>:
    2870:	a0 e0       	ldi	r26, 0x00	; 0
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2878:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    287c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2880:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2884:	08 95       	ret

00002886 <random_r>:
    2886:	8f 92       	push	r8
    2888:	9f 92       	push	r9
    288a:	af 92       	push	r10
    288c:	bf 92       	push	r11
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	ec 01       	movw	r28, r24
    289c:	68 81       	ld	r22, Y
    289e:	79 81       	ldd	r23, Y+1	; 0x01
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	61 15       	cp	r22, r1
    28a6:	71 05       	cpc	r23, r1
    28a8:	81 05       	cpc	r24, r1
    28aa:	91 05       	cpc	r25, r1
    28ac:	21 f4       	brne	.+8      	; 0x28b6 <random_r+0x30>
    28ae:	64 e2       	ldi	r22, 0x24	; 36
    28b0:	79 ed       	ldi	r23, 0xD9	; 217
    28b2:	8b e5       	ldi	r24, 0x5B	; 91
    28b4:	97 e0       	ldi	r25, 0x07	; 7
    28b6:	2d e1       	ldi	r18, 0x1D	; 29
    28b8:	33 ef       	ldi	r19, 0xF3	; 243
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	0e 94 c8 13 	call	0x2790	; 0x2790 <__divmodsi4>
    28c2:	49 01       	movw	r8, r18
    28c4:	5a 01       	movw	r10, r20
    28c6:	9b 01       	movw	r18, r22
    28c8:	ac 01       	movw	r20, r24
    28ca:	a7 ea       	ldi	r26, 0xA7	; 167
    28cc:	b1 e4       	ldi	r27, 0x41	; 65
    28ce:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__muluhisi3>
    28d2:	6b 01       	movw	r12, r22
    28d4:	7c 01       	movw	r14, r24
    28d6:	ac ee       	ldi	r26, 0xEC	; 236
    28d8:	b4 ef       	ldi	r27, 0xF4	; 244
    28da:	a5 01       	movw	r20, r10
    28dc:	94 01       	movw	r18, r8
    28de:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulohisi3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8c 0d       	add	r24, r12
    28e8:	9d 1d       	adc	r25, r13
    28ea:	ae 1d       	adc	r26, r14
    28ec:	bf 1d       	adc	r27, r15
    28ee:	b7 ff       	sbrs	r27, 7
    28f0:	03 c0       	rjmp	.+6      	; 0x28f8 <random_r+0x72>
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	a1 09       	sbc	r26, r1
    28f6:	b0 48       	sbci	r27, 0x80	; 128
    28f8:	88 83       	st	Y, r24
    28fa:	99 83       	std	Y+1, r25	; 0x01
    28fc:	aa 83       	std	Y+2, r26	; 0x02
    28fe:	bb 83       	std	Y+3, r27	; 0x03
    2900:	bc 01       	movw	r22, r24
    2902:	cd 01       	movw	r24, r26
    2904:	9f 77       	andi	r25, 0x7F	; 127
    2906:	df 91       	pop	r29
    2908:	cf 91       	pop	r28
    290a:	ff 90       	pop	r15
    290c:	ef 90       	pop	r14
    290e:	df 90       	pop	r13
    2910:	cf 90       	pop	r12
    2912:	bf 90       	pop	r11
    2914:	af 90       	pop	r10
    2916:	9f 90       	pop	r9
    2918:	8f 90       	pop	r8
    291a:	08 95       	ret

0000291c <random>:
    291c:	8f 92       	push	r8
    291e:	9f 92       	push	r9
    2920:	af 92       	push	r10
    2922:	bf 92       	push	r11
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ef 92       	push	r14
    292a:	ff 92       	push	r15
    292c:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2930:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    2934:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    2938:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    293c:	61 15       	cp	r22, r1
    293e:	71 05       	cpc	r23, r1
    2940:	81 05       	cpc	r24, r1
    2942:	91 05       	cpc	r25, r1
    2944:	21 f4       	brne	.+8      	; 0x294e <random+0x32>
    2946:	64 e2       	ldi	r22, 0x24	; 36
    2948:	79 ed       	ldi	r23, 0xD9	; 217
    294a:	8b e5       	ldi	r24, 0x5B	; 91
    294c:	97 e0       	ldi	r25, 0x07	; 7
    294e:	2d e1       	ldi	r18, 0x1D	; 29
    2950:	33 ef       	ldi	r19, 0xF3	; 243
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	50 e0       	ldi	r21, 0x00	; 0
    2956:	0e 94 c8 13 	call	0x2790	; 0x2790 <__divmodsi4>
    295a:	49 01       	movw	r8, r18
    295c:	5a 01       	movw	r10, r20
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	a7 ea       	ldi	r26, 0xA7	; 167
    2964:	b1 e4       	ldi	r27, 0x41	; 65
    2966:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__muluhisi3>
    296a:	6b 01       	movw	r12, r22
    296c:	7c 01       	movw	r14, r24
    296e:	ac ee       	ldi	r26, 0xEC	; 236
    2970:	b4 ef       	ldi	r27, 0xF4	; 244
    2972:	a5 01       	movw	r20, r10
    2974:	94 01       	movw	r18, r8
    2976:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulohisi3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	8c 0d       	add	r24, r12
    2980:	9d 1d       	adc	r25, r13
    2982:	ae 1d       	adc	r26, r14
    2984:	bf 1d       	adc	r27, r15
    2986:	b7 ff       	sbrs	r27, 7
    2988:	03 c0       	rjmp	.+6      	; 0x2990 <random+0x74>
    298a:	01 97       	sbiw	r24, 0x01	; 1
    298c:	a1 09       	sbc	r26, r1
    298e:	b0 48       	sbci	r27, 0x80	; 128
    2990:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2994:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2998:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    299c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    29a0:	bc 01       	movw	r22, r24
    29a2:	cd 01       	movw	r24, r26
    29a4:	9f 77       	andi	r25, 0x7F	; 127
    29a6:	ff 90       	pop	r15
    29a8:	ef 90       	pop	r14
    29aa:	df 90       	pop	r13
    29ac:	cf 90       	pop	r12
    29ae:	bf 90       	pop	r11
    29b0:	af 90       	pop	r10
    29b2:	9f 90       	pop	r9
    29b4:	8f 90       	pop	r8
    29b6:	08 95       	ret

000029b8 <srandom>:
    29b8:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    29bc:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    29c0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    29c4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    29c8:	08 95       	ret

000029ca <fgetc>:
    29ca:	cf 93       	push	r28
    29cc:	df 93       	push	r29
    29ce:	ec 01       	movw	r28, r24
    29d0:	2b 81       	ldd	r18, Y+3	; 0x03
    29d2:	20 ff       	sbrs	r18, 0
    29d4:	33 c0       	rjmp	.+102    	; 0x2a3c <fgetc+0x72>
    29d6:	26 ff       	sbrs	r18, 6
    29d8:	0a c0       	rjmp	.+20     	; 0x29ee <fgetc+0x24>
    29da:	2f 7b       	andi	r18, 0xBF	; 191
    29dc:	2b 83       	std	Y+3, r18	; 0x03
    29de:	8e 81       	ldd	r24, Y+6	; 0x06
    29e0:	9f 81       	ldd	r25, Y+7	; 0x07
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	9f 83       	std	Y+7, r25	; 0x07
    29e6:	8e 83       	std	Y+6, r24	; 0x06
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	90 e0       	ldi	r25, 0x00	; 0
    29ec:	29 c0       	rjmp	.+82     	; 0x2a40 <fgetc+0x76>
    29ee:	22 ff       	sbrs	r18, 2
    29f0:	0f c0       	rjmp	.+30     	; 0x2a10 <fgetc+0x46>
    29f2:	e8 81       	ld	r30, Y
    29f4:	f9 81       	ldd	r31, Y+1	; 0x01
    29f6:	80 81       	ld	r24, Z
    29f8:	08 2e       	mov	r0, r24
    29fa:	00 0c       	add	r0, r0
    29fc:	99 0b       	sbc	r25, r25
    29fe:	00 97       	sbiw	r24, 0x00	; 0
    2a00:	19 f4       	brne	.+6      	; 0x2a08 <fgetc+0x3e>
    2a02:	20 62       	ori	r18, 0x20	; 32
    2a04:	2b 83       	std	Y+3, r18	; 0x03
    2a06:	1a c0       	rjmp	.+52     	; 0x2a3c <fgetc+0x72>
    2a08:	31 96       	adiw	r30, 0x01	; 1
    2a0a:	f9 83       	std	Y+1, r31	; 0x01
    2a0c:	e8 83       	st	Y, r30
    2a0e:	0e c0       	rjmp	.+28     	; 0x2a2c <fgetc+0x62>
    2a10:	ea 85       	ldd	r30, Y+10	; 0x0a
    2a12:	fb 85       	ldd	r31, Y+11	; 0x0b
    2a14:	09 95       	icall
    2a16:	97 ff       	sbrs	r25, 7
    2a18:	09 c0       	rjmp	.+18     	; 0x2a2c <fgetc+0x62>
    2a1a:	2b 81       	ldd	r18, Y+3	; 0x03
    2a1c:	01 96       	adiw	r24, 0x01	; 1
    2a1e:	11 f0       	breq	.+4      	; 0x2a24 <fgetc+0x5a>
    2a20:	80 e2       	ldi	r24, 0x20	; 32
    2a22:	01 c0       	rjmp	.+2      	; 0x2a26 <fgetc+0x5c>
    2a24:	80 e1       	ldi	r24, 0x10	; 16
    2a26:	82 2b       	or	r24, r18
    2a28:	8b 83       	std	Y+3, r24	; 0x03
    2a2a:	08 c0       	rjmp	.+16     	; 0x2a3c <fgetc+0x72>
    2a2c:	2e 81       	ldd	r18, Y+6	; 0x06
    2a2e:	3f 81       	ldd	r19, Y+7	; 0x07
    2a30:	2f 5f       	subi	r18, 0xFF	; 255
    2a32:	3f 4f       	sbci	r19, 0xFF	; 255
    2a34:	3f 83       	std	Y+7, r19	; 0x07
    2a36:	2e 83       	std	Y+6, r18	; 0x06
    2a38:	99 27       	eor	r25, r25
    2a3a:	02 c0       	rjmp	.+4      	; 0x2a40 <fgetc+0x76>
    2a3c:	8f ef       	ldi	r24, 0xFF	; 255
    2a3e:	9f ef       	ldi	r25, 0xFF	; 255
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	08 95       	ret

00002a46 <printf>:
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e9 e2       	ldi	r30, 0x29	; 41
    2a4c:	f5 e1       	ldi	r31, 0x15	; 21
    2a4e:	0c 94 8d 18 	jmp	0x311a	; 0x311a <__prologue_saves__+0x20>
    2a52:	ae 01       	movw	r20, r28
    2a54:	4b 5f       	subi	r20, 0xFB	; 251
    2a56:	5f 4f       	sbci	r21, 0xFF	; 255
    2a58:	fa 01       	movw	r30, r20
    2a5a:	61 91       	ld	r22, Z+
    2a5c:	71 91       	ld	r23, Z+
    2a5e:	af 01       	movw	r20, r30
    2a60:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <__iob+0x2>
    2a64:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <__iob+0x3>
    2a68:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <vfprintf>
    2a6c:	e2 e0       	ldi	r30, 0x02	; 2
    2a6e:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__epilogue_restores__+0x20>

00002a72 <printf_P>:
    2a72:	a0 e0       	ldi	r26, 0x00	; 0
    2a74:	b0 e0       	ldi	r27, 0x00	; 0
    2a76:	ef e3       	ldi	r30, 0x3F	; 63
    2a78:	f5 e1       	ldi	r31, 0x15	; 21
    2a7a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <__prologue_saves__+0x1c>
    2a7e:	ae 01       	movw	r20, r28
    2a80:	49 5f       	subi	r20, 0xF9	; 249
    2a82:	5f 4f       	sbci	r21, 0xFF	; 255
    2a84:	da 01       	movw	r26, r20
    2a86:	6d 91       	ld	r22, X+
    2a88:	7d 91       	ld	r23, X+
    2a8a:	ad 01       	movw	r20, r26
    2a8c:	0e ed       	ldi	r16, 0xDE	; 222
    2a8e:	13 e0       	ldi	r17, 0x03	; 3
    2a90:	f8 01       	movw	r30, r16
    2a92:	82 81       	ldd	r24, Z+2	; 0x02
    2a94:	93 81       	ldd	r25, Z+3	; 0x03
    2a96:	dc 01       	movw	r26, r24
    2a98:	13 96       	adiw	r26, 0x03	; 3
    2a9a:	2c 91       	ld	r18, X
    2a9c:	13 97       	sbiw	r26, 0x03	; 3
    2a9e:	28 60       	ori	r18, 0x08	; 8
    2aa0:	13 96       	adiw	r26, 0x03	; 3
    2aa2:	2c 93       	st	X, r18
    2aa4:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <vfprintf>
    2aa8:	d8 01       	movw	r26, r16
    2aaa:	12 96       	adiw	r26, 0x02	; 2
    2aac:	ed 91       	ld	r30, X+
    2aae:	fc 91       	ld	r31, X
    2ab0:	13 97       	sbiw	r26, 0x03	; 3
    2ab2:	23 81       	ldd	r18, Z+3	; 0x03
    2ab4:	27 7f       	andi	r18, 0xF7	; 247
    2ab6:	23 83       	std	Z+3, r18	; 0x03
    2ab8:	e4 e0       	ldi	r30, 0x04	; 4
    2aba:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__epilogue_restores__+0x1c>

00002abe <putchar>:
    2abe:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <__iob+0x2>
    2ac2:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <__iob+0x3>
    2ac6:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2aca:	08 95       	ret

00002acc <puts>:
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <__iob+0x2>
    2ad8:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <__iob+0x3>
    2adc:	23 81       	ldd	r18, Z+3	; 0x03
    2ade:	21 ff       	sbrs	r18, 1
    2ae0:	1b c0       	rjmp	.+54     	; 0x2b18 <puts+0x4c>
    2ae2:	8c 01       	movw	r16, r24
    2ae4:	d0 e0       	ldi	r29, 0x00	; 0
    2ae6:	c0 e0       	ldi	r28, 0x00	; 0
    2ae8:	f8 01       	movw	r30, r16
    2aea:	81 91       	ld	r24, Z+
    2aec:	8f 01       	movw	r16, r30
    2aee:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <__iob+0x2>
    2af2:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <__iob+0x3>
    2af6:	db 01       	movw	r26, r22
    2af8:	18 96       	adiw	r26, 0x08	; 8
    2afa:	ed 91       	ld	r30, X+
    2afc:	fc 91       	ld	r31, X
    2afe:	19 97       	sbiw	r26, 0x09	; 9
    2b00:	88 23       	and	r24, r24
    2b02:	31 f0       	breq	.+12     	; 0x2b10 <puts+0x44>
    2b04:	09 95       	icall
    2b06:	89 2b       	or	r24, r25
    2b08:	79 f3       	breq	.-34     	; 0x2ae8 <puts+0x1c>
    2b0a:	df ef       	ldi	r29, 0xFF	; 255
    2b0c:	cf ef       	ldi	r28, 0xFF	; 255
    2b0e:	ec cf       	rjmp	.-40     	; 0x2ae8 <puts+0x1c>
    2b10:	8a e0       	ldi	r24, 0x0A	; 10
    2b12:	09 95       	icall
    2b14:	89 2b       	or	r24, r25
    2b16:	19 f0       	breq	.+6      	; 0x2b1e <puts+0x52>
    2b18:	8f ef       	ldi	r24, 0xFF	; 255
    2b1a:	9f ef       	ldi	r25, 0xFF	; 255
    2b1c:	02 c0       	rjmp	.+4      	; 0x2b22 <puts+0x56>
    2b1e:	8d 2f       	mov	r24, r29
    2b20:	9c 2f       	mov	r25, r28
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <vfprintf>:
    2b2c:	ab e0       	ldi	r26, 0x0B	; 11
    2b2e:	b0 e0       	ldi	r27, 0x00	; 0
    2b30:	ec e9       	ldi	r30, 0x9C	; 156
    2b32:	f5 e1       	ldi	r31, 0x15	; 21
    2b34:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <__prologue_saves__>
    2b38:	6c 01       	movw	r12, r24
    2b3a:	7b 01       	movw	r14, r22
    2b3c:	8a 01       	movw	r16, r20
    2b3e:	fc 01       	movw	r30, r24
    2b40:	17 82       	std	Z+7, r1	; 0x07
    2b42:	16 82       	std	Z+6, r1	; 0x06
    2b44:	83 81       	ldd	r24, Z+3	; 0x03
    2b46:	81 ff       	sbrs	r24, 1
    2b48:	cc c1       	rjmp	.+920    	; 0x2ee2 <vfprintf+0x3b6>
    2b4a:	ce 01       	movw	r24, r28
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	3c 01       	movw	r6, r24
    2b50:	f6 01       	movw	r30, r12
    2b52:	93 81       	ldd	r25, Z+3	; 0x03
    2b54:	f7 01       	movw	r30, r14
    2b56:	93 fd       	sbrc	r25, 3
    2b58:	85 91       	lpm	r24, Z+
    2b5a:	93 ff       	sbrs	r25, 3
    2b5c:	81 91       	ld	r24, Z+
    2b5e:	7f 01       	movw	r14, r30
    2b60:	88 23       	and	r24, r24
    2b62:	09 f4       	brne	.+2      	; 0x2b66 <vfprintf+0x3a>
    2b64:	ba c1       	rjmp	.+884    	; 0x2eda <vfprintf+0x3ae>
    2b66:	85 32       	cpi	r24, 0x25	; 37
    2b68:	39 f4       	brne	.+14     	; 0x2b78 <vfprintf+0x4c>
    2b6a:	93 fd       	sbrc	r25, 3
    2b6c:	85 91       	lpm	r24, Z+
    2b6e:	93 ff       	sbrs	r25, 3
    2b70:	81 91       	ld	r24, Z+
    2b72:	7f 01       	movw	r14, r30
    2b74:	85 32       	cpi	r24, 0x25	; 37
    2b76:	29 f4       	brne	.+10     	; 0x2b82 <vfprintf+0x56>
    2b78:	b6 01       	movw	r22, r12
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2b80:	e7 cf       	rjmp	.-50     	; 0x2b50 <vfprintf+0x24>
    2b82:	91 2c       	mov	r9, r1
    2b84:	21 2c       	mov	r2, r1
    2b86:	31 2c       	mov	r3, r1
    2b88:	ff e1       	ldi	r31, 0x1F	; 31
    2b8a:	f3 15       	cp	r31, r3
    2b8c:	d8 f0       	brcs	.+54     	; 0x2bc4 <vfprintf+0x98>
    2b8e:	8b 32       	cpi	r24, 0x2B	; 43
    2b90:	79 f0       	breq	.+30     	; 0x2bb0 <vfprintf+0x84>
    2b92:	38 f4       	brcc	.+14     	; 0x2ba2 <vfprintf+0x76>
    2b94:	80 32       	cpi	r24, 0x20	; 32
    2b96:	79 f0       	breq	.+30     	; 0x2bb6 <vfprintf+0x8a>
    2b98:	83 32       	cpi	r24, 0x23	; 35
    2b9a:	a1 f4       	brne	.+40     	; 0x2bc4 <vfprintf+0x98>
    2b9c:	23 2d       	mov	r18, r3
    2b9e:	20 61       	ori	r18, 0x10	; 16
    2ba0:	1d c0       	rjmp	.+58     	; 0x2bdc <vfprintf+0xb0>
    2ba2:	8d 32       	cpi	r24, 0x2D	; 45
    2ba4:	61 f0       	breq	.+24     	; 0x2bbe <vfprintf+0x92>
    2ba6:	80 33       	cpi	r24, 0x30	; 48
    2ba8:	69 f4       	brne	.+26     	; 0x2bc4 <vfprintf+0x98>
    2baa:	23 2d       	mov	r18, r3
    2bac:	21 60       	ori	r18, 0x01	; 1
    2bae:	16 c0       	rjmp	.+44     	; 0x2bdc <vfprintf+0xb0>
    2bb0:	83 2d       	mov	r24, r3
    2bb2:	82 60       	ori	r24, 0x02	; 2
    2bb4:	38 2e       	mov	r3, r24
    2bb6:	e3 2d       	mov	r30, r3
    2bb8:	e4 60       	ori	r30, 0x04	; 4
    2bba:	3e 2e       	mov	r3, r30
    2bbc:	2a c0       	rjmp	.+84     	; 0x2c12 <vfprintf+0xe6>
    2bbe:	f3 2d       	mov	r31, r3
    2bc0:	f8 60       	ori	r31, 0x08	; 8
    2bc2:	1d c0       	rjmp	.+58     	; 0x2bfe <vfprintf+0xd2>
    2bc4:	37 fc       	sbrc	r3, 7
    2bc6:	2d c0       	rjmp	.+90     	; 0x2c22 <vfprintf+0xf6>
    2bc8:	20 ed       	ldi	r18, 0xD0	; 208
    2bca:	28 0f       	add	r18, r24
    2bcc:	2a 30       	cpi	r18, 0x0A	; 10
    2bce:	40 f0       	brcs	.+16     	; 0x2be0 <vfprintf+0xb4>
    2bd0:	8e 32       	cpi	r24, 0x2E	; 46
    2bd2:	b9 f4       	brne	.+46     	; 0x2c02 <vfprintf+0xd6>
    2bd4:	36 fc       	sbrc	r3, 6
    2bd6:	81 c1       	rjmp	.+770    	; 0x2eda <vfprintf+0x3ae>
    2bd8:	23 2d       	mov	r18, r3
    2bda:	20 64       	ori	r18, 0x40	; 64
    2bdc:	32 2e       	mov	r3, r18
    2bde:	19 c0       	rjmp	.+50     	; 0x2c12 <vfprintf+0xe6>
    2be0:	36 fe       	sbrs	r3, 6
    2be2:	06 c0       	rjmp	.+12     	; 0x2bf0 <vfprintf+0xc4>
    2be4:	8a e0       	ldi	r24, 0x0A	; 10
    2be6:	98 9e       	mul	r9, r24
    2be8:	20 0d       	add	r18, r0
    2bea:	11 24       	eor	r1, r1
    2bec:	92 2e       	mov	r9, r18
    2bee:	11 c0       	rjmp	.+34     	; 0x2c12 <vfprintf+0xe6>
    2bf0:	ea e0       	ldi	r30, 0x0A	; 10
    2bf2:	2e 9e       	mul	r2, r30
    2bf4:	20 0d       	add	r18, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	22 2e       	mov	r2, r18
    2bfa:	f3 2d       	mov	r31, r3
    2bfc:	f0 62       	ori	r31, 0x20	; 32
    2bfe:	3f 2e       	mov	r3, r31
    2c00:	08 c0       	rjmp	.+16     	; 0x2c12 <vfprintf+0xe6>
    2c02:	8c 36       	cpi	r24, 0x6C	; 108
    2c04:	21 f4       	brne	.+8      	; 0x2c0e <vfprintf+0xe2>
    2c06:	83 2d       	mov	r24, r3
    2c08:	80 68       	ori	r24, 0x80	; 128
    2c0a:	38 2e       	mov	r3, r24
    2c0c:	02 c0       	rjmp	.+4      	; 0x2c12 <vfprintf+0xe6>
    2c0e:	88 36       	cpi	r24, 0x68	; 104
    2c10:	41 f4       	brne	.+16     	; 0x2c22 <vfprintf+0xf6>
    2c12:	f7 01       	movw	r30, r14
    2c14:	93 fd       	sbrc	r25, 3
    2c16:	85 91       	lpm	r24, Z+
    2c18:	93 ff       	sbrs	r25, 3
    2c1a:	81 91       	ld	r24, Z+
    2c1c:	7f 01       	movw	r14, r30
    2c1e:	81 11       	cpse	r24, r1
    2c20:	b3 cf       	rjmp	.-154    	; 0x2b88 <vfprintf+0x5c>
    2c22:	98 2f       	mov	r25, r24
    2c24:	9f 7d       	andi	r25, 0xDF	; 223
    2c26:	95 54       	subi	r25, 0x45	; 69
    2c28:	93 30       	cpi	r25, 0x03	; 3
    2c2a:	28 f4       	brcc	.+10     	; 0x2c36 <vfprintf+0x10a>
    2c2c:	0c 5f       	subi	r16, 0xFC	; 252
    2c2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c30:	9f e3       	ldi	r25, 0x3F	; 63
    2c32:	99 83       	std	Y+1, r25	; 0x01
    2c34:	0d c0       	rjmp	.+26     	; 0x2c50 <vfprintf+0x124>
    2c36:	83 36       	cpi	r24, 0x63	; 99
    2c38:	31 f0       	breq	.+12     	; 0x2c46 <vfprintf+0x11a>
    2c3a:	83 37       	cpi	r24, 0x73	; 115
    2c3c:	71 f0       	breq	.+28     	; 0x2c5a <vfprintf+0x12e>
    2c3e:	83 35       	cpi	r24, 0x53	; 83
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <vfprintf+0x118>
    2c42:	59 c0       	rjmp	.+178    	; 0x2cf6 <vfprintf+0x1ca>
    2c44:	21 c0       	rjmp	.+66     	; 0x2c88 <vfprintf+0x15c>
    2c46:	f8 01       	movw	r30, r16
    2c48:	80 81       	ld	r24, Z
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	0e 5f       	subi	r16, 0xFE	; 254
    2c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c50:	88 24       	eor	r8, r8
    2c52:	83 94       	inc	r8
    2c54:	91 2c       	mov	r9, r1
    2c56:	53 01       	movw	r10, r6
    2c58:	13 c0       	rjmp	.+38     	; 0x2c80 <vfprintf+0x154>
    2c5a:	28 01       	movw	r4, r16
    2c5c:	f2 e0       	ldi	r31, 0x02	; 2
    2c5e:	4f 0e       	add	r4, r31
    2c60:	51 1c       	adc	r5, r1
    2c62:	f8 01       	movw	r30, r16
    2c64:	a0 80       	ld	r10, Z
    2c66:	b1 80       	ldd	r11, Z+1	; 0x01
    2c68:	36 fe       	sbrs	r3, 6
    2c6a:	03 c0       	rjmp	.+6      	; 0x2c72 <vfprintf+0x146>
    2c6c:	69 2d       	mov	r22, r9
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	02 c0       	rjmp	.+4      	; 0x2c76 <vfprintf+0x14a>
    2c72:	6f ef       	ldi	r22, 0xFF	; 255
    2c74:	7f ef       	ldi	r23, 0xFF	; 255
    2c76:	c5 01       	movw	r24, r10
    2c78:	0e 94 82 17 	call	0x2f04	; 0x2f04 <strnlen>
    2c7c:	4c 01       	movw	r8, r24
    2c7e:	82 01       	movw	r16, r4
    2c80:	f3 2d       	mov	r31, r3
    2c82:	ff 77       	andi	r31, 0x7F	; 127
    2c84:	3f 2e       	mov	r3, r31
    2c86:	16 c0       	rjmp	.+44     	; 0x2cb4 <vfprintf+0x188>
    2c88:	28 01       	movw	r4, r16
    2c8a:	22 e0       	ldi	r18, 0x02	; 2
    2c8c:	42 0e       	add	r4, r18
    2c8e:	51 1c       	adc	r5, r1
    2c90:	f8 01       	movw	r30, r16
    2c92:	a0 80       	ld	r10, Z
    2c94:	b1 80       	ldd	r11, Z+1	; 0x01
    2c96:	36 fe       	sbrs	r3, 6
    2c98:	03 c0       	rjmp	.+6      	; 0x2ca0 <vfprintf+0x174>
    2c9a:	69 2d       	mov	r22, r9
    2c9c:	70 e0       	ldi	r23, 0x00	; 0
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <vfprintf+0x178>
    2ca0:	6f ef       	ldi	r22, 0xFF	; 255
    2ca2:	7f ef       	ldi	r23, 0xFF	; 255
    2ca4:	c5 01       	movw	r24, r10
    2ca6:	0e 94 77 17 	call	0x2eee	; 0x2eee <strnlen_P>
    2caa:	4c 01       	movw	r8, r24
    2cac:	f3 2d       	mov	r31, r3
    2cae:	f0 68       	ori	r31, 0x80	; 128
    2cb0:	3f 2e       	mov	r3, r31
    2cb2:	82 01       	movw	r16, r4
    2cb4:	33 fc       	sbrc	r3, 3
    2cb6:	1b c0       	rjmp	.+54     	; 0x2cee <vfprintf+0x1c2>
    2cb8:	82 2d       	mov	r24, r2
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	88 16       	cp	r8, r24
    2cbe:	99 06       	cpc	r9, r25
    2cc0:	b0 f4       	brcc	.+44     	; 0x2cee <vfprintf+0x1c2>
    2cc2:	b6 01       	movw	r22, r12
    2cc4:	80 e2       	ldi	r24, 0x20	; 32
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ccc:	2a 94       	dec	r2
    2cce:	f4 cf       	rjmp	.-24     	; 0x2cb8 <vfprintf+0x18c>
    2cd0:	f5 01       	movw	r30, r10
    2cd2:	37 fc       	sbrc	r3, 7
    2cd4:	85 91       	lpm	r24, Z+
    2cd6:	37 fe       	sbrs	r3, 7
    2cd8:	81 91       	ld	r24, Z+
    2cda:	5f 01       	movw	r10, r30
    2cdc:	b6 01       	movw	r22, r12
    2cde:	90 e0       	ldi	r25, 0x00	; 0
    2ce0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ce4:	21 10       	cpse	r2, r1
    2ce6:	2a 94       	dec	r2
    2ce8:	21 e0       	ldi	r18, 0x01	; 1
    2cea:	82 1a       	sub	r8, r18
    2cec:	91 08       	sbc	r9, r1
    2cee:	81 14       	cp	r8, r1
    2cf0:	91 04       	cpc	r9, r1
    2cf2:	71 f7       	brne	.-36     	; 0x2cd0 <vfprintf+0x1a4>
    2cf4:	e8 c0       	rjmp	.+464    	; 0x2ec6 <vfprintf+0x39a>
    2cf6:	84 36       	cpi	r24, 0x64	; 100
    2cf8:	11 f0       	breq	.+4      	; 0x2cfe <vfprintf+0x1d2>
    2cfa:	89 36       	cpi	r24, 0x69	; 105
    2cfc:	41 f5       	brne	.+80     	; 0x2d4e <vfprintf+0x222>
    2cfe:	f8 01       	movw	r30, r16
    2d00:	37 fe       	sbrs	r3, 7
    2d02:	07 c0       	rjmp	.+14     	; 0x2d12 <vfprintf+0x1e6>
    2d04:	60 81       	ld	r22, Z
    2d06:	71 81       	ldd	r23, Z+1	; 0x01
    2d08:	82 81       	ldd	r24, Z+2	; 0x02
    2d0a:	93 81       	ldd	r25, Z+3	; 0x03
    2d0c:	0c 5f       	subi	r16, 0xFC	; 252
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	08 c0       	rjmp	.+16     	; 0x2d22 <vfprintf+0x1f6>
    2d12:	60 81       	ld	r22, Z
    2d14:	71 81       	ldd	r23, Z+1	; 0x01
    2d16:	07 2e       	mov	r0, r23
    2d18:	00 0c       	add	r0, r0
    2d1a:	88 0b       	sbc	r24, r24
    2d1c:	99 0b       	sbc	r25, r25
    2d1e:	0e 5f       	subi	r16, 0xFE	; 254
    2d20:	1f 4f       	sbci	r17, 0xFF	; 255
    2d22:	f3 2d       	mov	r31, r3
    2d24:	ff 76       	andi	r31, 0x6F	; 111
    2d26:	3f 2e       	mov	r3, r31
    2d28:	97 ff       	sbrs	r25, 7
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <vfprintf+0x212>
    2d2c:	90 95       	com	r25
    2d2e:	80 95       	com	r24
    2d30:	70 95       	com	r23
    2d32:	61 95       	neg	r22
    2d34:	7f 4f       	sbci	r23, 0xFF	; 255
    2d36:	8f 4f       	sbci	r24, 0xFF	; 255
    2d38:	9f 4f       	sbci	r25, 0xFF	; 255
    2d3a:	f0 68       	ori	r31, 0x80	; 128
    2d3c:	3f 2e       	mov	r3, r31
    2d3e:	2a e0       	ldi	r18, 0x0A	; 10
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	a3 01       	movw	r20, r6
    2d44:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__ultoa_invert>
    2d48:	88 2e       	mov	r8, r24
    2d4a:	86 18       	sub	r8, r6
    2d4c:	45 c0       	rjmp	.+138    	; 0x2dd8 <vfprintf+0x2ac>
    2d4e:	85 37       	cpi	r24, 0x75	; 117
    2d50:	31 f4       	brne	.+12     	; 0x2d5e <vfprintf+0x232>
    2d52:	23 2d       	mov	r18, r3
    2d54:	2f 7e       	andi	r18, 0xEF	; 239
    2d56:	b2 2e       	mov	r11, r18
    2d58:	2a e0       	ldi	r18, 0x0A	; 10
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	25 c0       	rjmp	.+74     	; 0x2da8 <vfprintf+0x27c>
    2d5e:	93 2d       	mov	r25, r3
    2d60:	99 7f       	andi	r25, 0xF9	; 249
    2d62:	b9 2e       	mov	r11, r25
    2d64:	8f 36       	cpi	r24, 0x6F	; 111
    2d66:	c1 f0       	breq	.+48     	; 0x2d98 <vfprintf+0x26c>
    2d68:	18 f4       	brcc	.+6      	; 0x2d70 <vfprintf+0x244>
    2d6a:	88 35       	cpi	r24, 0x58	; 88
    2d6c:	79 f0       	breq	.+30     	; 0x2d8c <vfprintf+0x260>
    2d6e:	b5 c0       	rjmp	.+362    	; 0x2eda <vfprintf+0x3ae>
    2d70:	80 37       	cpi	r24, 0x70	; 112
    2d72:	19 f0       	breq	.+6      	; 0x2d7a <vfprintf+0x24e>
    2d74:	88 37       	cpi	r24, 0x78	; 120
    2d76:	21 f0       	breq	.+8      	; 0x2d80 <vfprintf+0x254>
    2d78:	b0 c0       	rjmp	.+352    	; 0x2eda <vfprintf+0x3ae>
    2d7a:	e9 2f       	mov	r30, r25
    2d7c:	e0 61       	ori	r30, 0x10	; 16
    2d7e:	be 2e       	mov	r11, r30
    2d80:	b4 fe       	sbrs	r11, 4
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <vfprintf+0x272>
    2d84:	fb 2d       	mov	r31, r11
    2d86:	f4 60       	ori	r31, 0x04	; 4
    2d88:	bf 2e       	mov	r11, r31
    2d8a:	09 c0       	rjmp	.+18     	; 0x2d9e <vfprintf+0x272>
    2d8c:	34 fe       	sbrs	r3, 4
    2d8e:	0a c0       	rjmp	.+20     	; 0x2da4 <vfprintf+0x278>
    2d90:	29 2f       	mov	r18, r25
    2d92:	26 60       	ori	r18, 0x06	; 6
    2d94:	b2 2e       	mov	r11, r18
    2d96:	06 c0       	rjmp	.+12     	; 0x2da4 <vfprintf+0x278>
    2d98:	28 e0       	ldi	r18, 0x08	; 8
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	05 c0       	rjmp	.+10     	; 0x2da8 <vfprintf+0x27c>
    2d9e:	20 e1       	ldi	r18, 0x10	; 16
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	02 c0       	rjmp	.+4      	; 0x2da8 <vfprintf+0x27c>
    2da4:	20 e1       	ldi	r18, 0x10	; 16
    2da6:	32 e0       	ldi	r19, 0x02	; 2
    2da8:	f8 01       	movw	r30, r16
    2daa:	b7 fe       	sbrs	r11, 7
    2dac:	07 c0       	rjmp	.+14     	; 0x2dbc <vfprintf+0x290>
    2dae:	60 81       	ld	r22, Z
    2db0:	71 81       	ldd	r23, Z+1	; 0x01
    2db2:	82 81       	ldd	r24, Z+2	; 0x02
    2db4:	93 81       	ldd	r25, Z+3	; 0x03
    2db6:	0c 5f       	subi	r16, 0xFC	; 252
    2db8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dba:	06 c0       	rjmp	.+12     	; 0x2dc8 <vfprintf+0x29c>
    2dbc:	60 81       	ld	r22, Z
    2dbe:	71 81       	ldd	r23, Z+1	; 0x01
    2dc0:	80 e0       	ldi	r24, 0x00	; 0
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 5f       	subi	r16, 0xFE	; 254
    2dc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc8:	a3 01       	movw	r20, r6
    2dca:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <__ultoa_invert>
    2dce:	88 2e       	mov	r8, r24
    2dd0:	86 18       	sub	r8, r6
    2dd2:	fb 2d       	mov	r31, r11
    2dd4:	ff 77       	andi	r31, 0x7F	; 127
    2dd6:	3f 2e       	mov	r3, r31
    2dd8:	36 fe       	sbrs	r3, 6
    2dda:	0d c0       	rjmp	.+26     	; 0x2df6 <vfprintf+0x2ca>
    2ddc:	23 2d       	mov	r18, r3
    2dde:	2e 7f       	andi	r18, 0xFE	; 254
    2de0:	a2 2e       	mov	r10, r18
    2de2:	89 14       	cp	r8, r9
    2de4:	58 f4       	brcc	.+22     	; 0x2dfc <vfprintf+0x2d0>
    2de6:	34 fe       	sbrs	r3, 4
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <vfprintf+0x2d4>
    2dea:	32 fc       	sbrc	r3, 2
    2dec:	09 c0       	rjmp	.+18     	; 0x2e00 <vfprintf+0x2d4>
    2dee:	83 2d       	mov	r24, r3
    2df0:	8e 7e       	andi	r24, 0xEE	; 238
    2df2:	a8 2e       	mov	r10, r24
    2df4:	05 c0       	rjmp	.+10     	; 0x2e00 <vfprintf+0x2d4>
    2df6:	b8 2c       	mov	r11, r8
    2df8:	a3 2c       	mov	r10, r3
    2dfa:	03 c0       	rjmp	.+6      	; 0x2e02 <vfprintf+0x2d6>
    2dfc:	b8 2c       	mov	r11, r8
    2dfe:	01 c0       	rjmp	.+2      	; 0x2e02 <vfprintf+0x2d6>
    2e00:	b9 2c       	mov	r11, r9
    2e02:	a4 fe       	sbrs	r10, 4
    2e04:	0f c0       	rjmp	.+30     	; 0x2e24 <vfprintf+0x2f8>
    2e06:	fe 01       	movw	r30, r28
    2e08:	e8 0d       	add	r30, r8
    2e0a:	f1 1d       	adc	r31, r1
    2e0c:	80 81       	ld	r24, Z
    2e0e:	80 33       	cpi	r24, 0x30	; 48
    2e10:	21 f4       	brne	.+8      	; 0x2e1a <vfprintf+0x2ee>
    2e12:	9a 2d       	mov	r25, r10
    2e14:	99 7e       	andi	r25, 0xE9	; 233
    2e16:	a9 2e       	mov	r10, r25
    2e18:	09 c0       	rjmp	.+18     	; 0x2e2c <vfprintf+0x300>
    2e1a:	a2 fe       	sbrs	r10, 2
    2e1c:	06 c0       	rjmp	.+12     	; 0x2e2a <vfprintf+0x2fe>
    2e1e:	b3 94       	inc	r11
    2e20:	b3 94       	inc	r11
    2e22:	04 c0       	rjmp	.+8      	; 0x2e2c <vfprintf+0x300>
    2e24:	8a 2d       	mov	r24, r10
    2e26:	86 78       	andi	r24, 0x86	; 134
    2e28:	09 f0       	breq	.+2      	; 0x2e2c <vfprintf+0x300>
    2e2a:	b3 94       	inc	r11
    2e2c:	a3 fc       	sbrc	r10, 3
    2e2e:	11 c0       	rjmp	.+34     	; 0x2e52 <vfprintf+0x326>
    2e30:	a0 fe       	sbrs	r10, 0
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <vfprintf+0x314>
    2e34:	b2 14       	cp	r11, r2
    2e36:	88 f4       	brcc	.+34     	; 0x2e5a <vfprintf+0x32e>
    2e38:	28 0c       	add	r2, r8
    2e3a:	92 2c       	mov	r9, r2
    2e3c:	9b 18       	sub	r9, r11
    2e3e:	0e c0       	rjmp	.+28     	; 0x2e5c <vfprintf+0x330>
    2e40:	b2 14       	cp	r11, r2
    2e42:	60 f4       	brcc	.+24     	; 0x2e5c <vfprintf+0x330>
    2e44:	b6 01       	movw	r22, r12
    2e46:	80 e2       	ldi	r24, 0x20	; 32
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2e4e:	b3 94       	inc	r11
    2e50:	f7 cf       	rjmp	.-18     	; 0x2e40 <vfprintf+0x314>
    2e52:	b2 14       	cp	r11, r2
    2e54:	18 f4       	brcc	.+6      	; 0x2e5c <vfprintf+0x330>
    2e56:	2b 18       	sub	r2, r11
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <vfprintf+0x332>
    2e5a:	98 2c       	mov	r9, r8
    2e5c:	21 2c       	mov	r2, r1
    2e5e:	a4 fe       	sbrs	r10, 4
    2e60:	10 c0       	rjmp	.+32     	; 0x2e82 <vfprintf+0x356>
    2e62:	b6 01       	movw	r22, r12
    2e64:	80 e3       	ldi	r24, 0x30	; 48
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2e6c:	a2 fe       	sbrs	r10, 2
    2e6e:	17 c0       	rjmp	.+46     	; 0x2e9e <vfprintf+0x372>
    2e70:	a1 fc       	sbrc	r10, 1
    2e72:	03 c0       	rjmp	.+6      	; 0x2e7a <vfprintf+0x34e>
    2e74:	88 e7       	ldi	r24, 0x78	; 120
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <vfprintf+0x352>
    2e7a:	88 e5       	ldi	r24, 0x58	; 88
    2e7c:	90 e0       	ldi	r25, 0x00	; 0
    2e7e:	b6 01       	movw	r22, r12
    2e80:	0c c0       	rjmp	.+24     	; 0x2e9a <vfprintf+0x36e>
    2e82:	8a 2d       	mov	r24, r10
    2e84:	86 78       	andi	r24, 0x86	; 134
    2e86:	59 f0       	breq	.+22     	; 0x2e9e <vfprintf+0x372>
    2e88:	a1 fe       	sbrs	r10, 1
    2e8a:	02 c0       	rjmp	.+4      	; 0x2e90 <vfprintf+0x364>
    2e8c:	8b e2       	ldi	r24, 0x2B	; 43
    2e8e:	01 c0       	rjmp	.+2      	; 0x2e92 <vfprintf+0x366>
    2e90:	80 e2       	ldi	r24, 0x20	; 32
    2e92:	a7 fc       	sbrc	r10, 7
    2e94:	8d e2       	ldi	r24, 0x2D	; 45
    2e96:	b6 01       	movw	r22, r12
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2e9e:	89 14       	cp	r8, r9
    2ea0:	38 f4       	brcc	.+14     	; 0x2eb0 <vfprintf+0x384>
    2ea2:	b6 01       	movw	r22, r12
    2ea4:	80 e3       	ldi	r24, 0x30	; 48
    2ea6:	90 e0       	ldi	r25, 0x00	; 0
    2ea8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2eac:	9a 94       	dec	r9
    2eae:	f7 cf       	rjmp	.-18     	; 0x2e9e <vfprintf+0x372>
    2eb0:	8a 94       	dec	r8
    2eb2:	f3 01       	movw	r30, r6
    2eb4:	e8 0d       	add	r30, r8
    2eb6:	f1 1d       	adc	r31, r1
    2eb8:	80 81       	ld	r24, Z
    2eba:	b6 01       	movw	r22, r12
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ec2:	81 10       	cpse	r8, r1
    2ec4:	f5 cf       	rjmp	.-22     	; 0x2eb0 <vfprintf+0x384>
    2ec6:	22 20       	and	r2, r2
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <vfprintf+0x3a0>
    2eca:	42 ce       	rjmp	.-892    	; 0x2b50 <vfprintf+0x24>
    2ecc:	b6 01       	movw	r22, r12
    2ece:	80 e2       	ldi	r24, 0x20	; 32
    2ed0:	90 e0       	ldi	r25, 0x00	; 0
    2ed2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <fputc>
    2ed6:	2a 94       	dec	r2
    2ed8:	f6 cf       	rjmp	.-20     	; 0x2ec6 <vfprintf+0x39a>
    2eda:	f6 01       	movw	r30, r12
    2edc:	86 81       	ldd	r24, Z+6	; 0x06
    2ede:	97 81       	ldd	r25, Z+7	; 0x07
    2ee0:	02 c0       	rjmp	.+4      	; 0x2ee6 <vfprintf+0x3ba>
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	9f ef       	ldi	r25, 0xFF	; 255
    2ee6:	2b 96       	adiw	r28, 0x0b	; 11
    2ee8:	e2 e1       	ldi	r30, 0x12	; 18
    2eea:	0c 94 99 18 	jmp	0x3132	; 0x3132 <__epilogue_restores__>

00002eee <strnlen_P>:
    2eee:	fc 01       	movw	r30, r24
    2ef0:	05 90       	lpm	r0, Z+
    2ef2:	61 50       	subi	r22, 0x01	; 1
    2ef4:	70 40       	sbci	r23, 0x00	; 0
    2ef6:	01 10       	cpse	r0, r1
    2ef8:	d8 f7       	brcc	.-10     	; 0x2ef0 <strnlen_P+0x2>
    2efa:	80 95       	com	r24
    2efc:	90 95       	com	r25
    2efe:	8e 0f       	add	r24, r30
    2f00:	9f 1f       	adc	r25, r31
    2f02:	08 95       	ret

00002f04 <strnlen>:
    2f04:	fc 01       	movw	r30, r24
    2f06:	61 50       	subi	r22, 0x01	; 1
    2f08:	70 40       	sbci	r23, 0x00	; 0
    2f0a:	01 90       	ld	r0, Z+
    2f0c:	01 10       	cpse	r0, r1
    2f0e:	d8 f7       	brcc	.-10     	; 0x2f06 <strnlen+0x2>
    2f10:	80 95       	com	r24
    2f12:	90 95       	com	r25
    2f14:	8e 0f       	add	r24, r30
    2f16:	9f 1f       	adc	r25, r31
    2f18:	08 95       	ret

00002f1a <fputc>:
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	fb 01       	movw	r30, r22
    2f24:	23 81       	ldd	r18, Z+3	; 0x03
    2f26:	21 fd       	sbrc	r18, 1
    2f28:	03 c0       	rjmp	.+6      	; 0x2f30 <fputc+0x16>
    2f2a:	8f ef       	ldi	r24, 0xFF	; 255
    2f2c:	9f ef       	ldi	r25, 0xFF	; 255
    2f2e:	2c c0       	rjmp	.+88     	; 0x2f88 <fputc+0x6e>
    2f30:	22 ff       	sbrs	r18, 2
    2f32:	16 c0       	rjmp	.+44     	; 0x2f60 <fputc+0x46>
    2f34:	46 81       	ldd	r20, Z+6	; 0x06
    2f36:	57 81       	ldd	r21, Z+7	; 0x07
    2f38:	24 81       	ldd	r18, Z+4	; 0x04
    2f3a:	35 81       	ldd	r19, Z+5	; 0x05
    2f3c:	42 17       	cp	r20, r18
    2f3e:	53 07       	cpc	r21, r19
    2f40:	44 f4       	brge	.+16     	; 0x2f52 <fputc+0x38>
    2f42:	a0 81       	ld	r26, Z
    2f44:	b1 81       	ldd	r27, Z+1	; 0x01
    2f46:	9d 01       	movw	r18, r26
    2f48:	2f 5f       	subi	r18, 0xFF	; 255
    2f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4c:	31 83       	std	Z+1, r19	; 0x01
    2f4e:	20 83       	st	Z, r18
    2f50:	8c 93       	st	X, r24
    2f52:	26 81       	ldd	r18, Z+6	; 0x06
    2f54:	37 81       	ldd	r19, Z+7	; 0x07
    2f56:	2f 5f       	subi	r18, 0xFF	; 255
    2f58:	3f 4f       	sbci	r19, 0xFF	; 255
    2f5a:	37 83       	std	Z+7, r19	; 0x07
    2f5c:	26 83       	std	Z+6, r18	; 0x06
    2f5e:	14 c0       	rjmp	.+40     	; 0x2f88 <fputc+0x6e>
    2f60:	8b 01       	movw	r16, r22
    2f62:	ec 01       	movw	r28, r24
    2f64:	fb 01       	movw	r30, r22
    2f66:	00 84       	ldd	r0, Z+8	; 0x08
    2f68:	f1 85       	ldd	r31, Z+9	; 0x09
    2f6a:	e0 2d       	mov	r30, r0
    2f6c:	09 95       	icall
    2f6e:	89 2b       	or	r24, r25
    2f70:	e1 f6       	brne	.-72     	; 0x2f2a <fputc+0x10>
    2f72:	d8 01       	movw	r26, r16
    2f74:	16 96       	adiw	r26, 0x06	; 6
    2f76:	8d 91       	ld	r24, X+
    2f78:	9c 91       	ld	r25, X
    2f7a:	17 97       	sbiw	r26, 0x07	; 7
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	17 96       	adiw	r26, 0x07	; 7
    2f80:	9c 93       	st	X, r25
    2f82:	8e 93       	st	-X, r24
    2f84:	16 97       	sbiw	r26, 0x06	; 6
    2f86:	ce 01       	movw	r24, r28
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	08 95       	ret

00002f92 <__ultoa_invert>:
    2f92:	fa 01       	movw	r30, r20
    2f94:	aa 27       	eor	r26, r26
    2f96:	28 30       	cpi	r18, 0x08	; 8
    2f98:	51 f1       	breq	.+84     	; 0x2fee <__ultoa_invert+0x5c>
    2f9a:	20 31       	cpi	r18, 0x10	; 16
    2f9c:	81 f1       	breq	.+96     	; 0x2ffe <__ultoa_invert+0x6c>
    2f9e:	e8 94       	clt
    2fa0:	6f 93       	push	r22
    2fa2:	6e 7f       	andi	r22, 0xFE	; 254
    2fa4:	6e 5f       	subi	r22, 0xFE	; 254
    2fa6:	7f 4f       	sbci	r23, 0xFF	; 255
    2fa8:	8f 4f       	sbci	r24, 0xFF	; 255
    2faa:	9f 4f       	sbci	r25, 0xFF	; 255
    2fac:	af 4f       	sbci	r26, 0xFF	; 255
    2fae:	b1 e0       	ldi	r27, 0x01	; 1
    2fb0:	3e d0       	rcall	.+124    	; 0x302e <__ultoa_invert+0x9c>
    2fb2:	b4 e0       	ldi	r27, 0x04	; 4
    2fb4:	3c d0       	rcall	.+120    	; 0x302e <__ultoa_invert+0x9c>
    2fb6:	67 0f       	add	r22, r23
    2fb8:	78 1f       	adc	r23, r24
    2fba:	89 1f       	adc	r24, r25
    2fbc:	9a 1f       	adc	r25, r26
    2fbe:	a1 1d       	adc	r26, r1
    2fc0:	68 0f       	add	r22, r24
    2fc2:	79 1f       	adc	r23, r25
    2fc4:	8a 1f       	adc	r24, r26
    2fc6:	91 1d       	adc	r25, r1
    2fc8:	a1 1d       	adc	r26, r1
    2fca:	6a 0f       	add	r22, r26
    2fcc:	71 1d       	adc	r23, r1
    2fce:	81 1d       	adc	r24, r1
    2fd0:	91 1d       	adc	r25, r1
    2fd2:	a1 1d       	adc	r26, r1
    2fd4:	20 d0       	rcall	.+64     	; 0x3016 <__ultoa_invert+0x84>
    2fd6:	09 f4       	brne	.+2      	; 0x2fda <__ultoa_invert+0x48>
    2fd8:	68 94       	set
    2fda:	3f 91       	pop	r19
    2fdc:	2a e0       	ldi	r18, 0x0A	; 10
    2fde:	26 9f       	mul	r18, r22
    2fe0:	11 24       	eor	r1, r1
    2fe2:	30 19       	sub	r19, r0
    2fe4:	30 5d       	subi	r19, 0xD0	; 208
    2fe6:	31 93       	st	Z+, r19
    2fe8:	de f6       	brtc	.-74     	; 0x2fa0 <__ultoa_invert+0xe>
    2fea:	cf 01       	movw	r24, r30
    2fec:	08 95       	ret
    2fee:	46 2f       	mov	r20, r22
    2ff0:	47 70       	andi	r20, 0x07	; 7
    2ff2:	40 5d       	subi	r20, 0xD0	; 208
    2ff4:	41 93       	st	Z+, r20
    2ff6:	b3 e0       	ldi	r27, 0x03	; 3
    2ff8:	0f d0       	rcall	.+30     	; 0x3018 <__ultoa_invert+0x86>
    2ffa:	c9 f7       	brne	.-14     	; 0x2fee <__ultoa_invert+0x5c>
    2ffc:	f6 cf       	rjmp	.-20     	; 0x2fea <__ultoa_invert+0x58>
    2ffe:	46 2f       	mov	r20, r22
    3000:	4f 70       	andi	r20, 0x0F	; 15
    3002:	40 5d       	subi	r20, 0xD0	; 208
    3004:	4a 33       	cpi	r20, 0x3A	; 58
    3006:	18 f0       	brcs	.+6      	; 0x300e <__ultoa_invert+0x7c>
    3008:	49 5d       	subi	r20, 0xD9	; 217
    300a:	31 fd       	sbrc	r19, 1
    300c:	40 52       	subi	r20, 0x20	; 32
    300e:	41 93       	st	Z+, r20
    3010:	02 d0       	rcall	.+4      	; 0x3016 <__ultoa_invert+0x84>
    3012:	a9 f7       	brne	.-22     	; 0x2ffe <__ultoa_invert+0x6c>
    3014:	ea cf       	rjmp	.-44     	; 0x2fea <__ultoa_invert+0x58>
    3016:	b4 e0       	ldi	r27, 0x04	; 4
    3018:	a6 95       	lsr	r26
    301a:	97 95       	ror	r25
    301c:	87 95       	ror	r24
    301e:	77 95       	ror	r23
    3020:	67 95       	ror	r22
    3022:	ba 95       	dec	r27
    3024:	c9 f7       	brne	.-14     	; 0x3018 <__ultoa_invert+0x86>
    3026:	00 97       	sbiw	r24, 0x00	; 0
    3028:	61 05       	cpc	r22, r1
    302a:	71 05       	cpc	r23, r1
    302c:	08 95       	ret
    302e:	9b 01       	movw	r18, r22
    3030:	ac 01       	movw	r20, r24
    3032:	0a 2e       	mov	r0, r26
    3034:	06 94       	lsr	r0
    3036:	57 95       	ror	r21
    3038:	47 95       	ror	r20
    303a:	37 95       	ror	r19
    303c:	27 95       	ror	r18
    303e:	ba 95       	dec	r27
    3040:	c9 f7       	brne	.-14     	; 0x3034 <__ultoa_invert+0xa2>
    3042:	62 0f       	add	r22, r18
    3044:	73 1f       	adc	r23, r19
    3046:	84 1f       	adc	r24, r20
    3048:	95 1f       	adc	r25, r21
    304a:	a0 1d       	adc	r26, r0
    304c:	08 95       	ret

0000304e <eeprom_read_block>:
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22

00003052 <eeprom_read_blraw>:
    3052:	fc 01       	movw	r30, r24
    3054:	f9 99       	sbic	0x1f, 1	; 31
    3056:	fe cf       	rjmp	.-4      	; 0x3054 <eeprom_read_blraw+0x2>
    3058:	06 c0       	rjmp	.+12     	; 0x3066 <eeprom_read_blraw+0x14>
    305a:	f2 bd       	out	0x22, r31	; 34
    305c:	e1 bd       	out	0x21, r30	; 33
    305e:	f8 9a       	sbi	0x1f, 0	; 31
    3060:	31 96       	adiw	r30, 0x01	; 1
    3062:	00 b4       	in	r0, 0x20	; 32
    3064:	0d 92       	st	X+, r0
    3066:	41 50       	subi	r20, 0x01	; 1
    3068:	50 40       	sbci	r21, 0x00	; 0
    306a:	b8 f7       	brcc	.-18     	; 0x305a <eeprom_read_blraw+0x8>
    306c:	08 95       	ret

0000306e <eeprom_read_byte>:
    306e:	f9 99       	sbic	0x1f, 1	; 31
    3070:	fe cf       	rjmp	.-4      	; 0x306e <eeprom_read_byte>
    3072:	92 bd       	out	0x22, r25	; 34
    3074:	81 bd       	out	0x21, r24	; 33
    3076:	f8 9a       	sbi	0x1f, 0	; 31
    3078:	99 27       	eor	r25, r25
    307a:	80 b5       	in	r24, 0x20	; 32
    307c:	08 95       	ret

0000307e <eeprom_read_dword>:
    307e:	a6 e1       	ldi	r26, 0x16	; 22
    3080:	b0 e0       	ldi	r27, 0x00	; 0
    3082:	44 e0       	ldi	r20, 0x04	; 4
    3084:	50 e0       	ldi	r21, 0x00	; 0
    3086:	0c 94 29 18 	jmp	0x3052	; 0x3052 <eeprom_read_blraw>

0000308a <eeprom_write_block>:
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	03 c0       	rjmp	.+6      	; 0x3096 <eeprom_write_block+0xc>
    3090:	2d 91       	ld	r18, X+
    3092:	0e 94 50 18 	call	0x30a0	; 0x30a0 <eeprom_write_r18>
    3096:	41 50       	subi	r20, 0x01	; 1
    3098:	50 40       	sbci	r21, 0x00	; 0
    309a:	d0 f7       	brcc	.-12     	; 0x3090 <eeprom_write_block+0x6>
    309c:	08 95       	ret

0000309e <eeprom_write_byte>:
    309e:	26 2f       	mov	r18, r22

000030a0 <eeprom_write_r18>:
    30a0:	f9 99       	sbic	0x1f, 1	; 31
    30a2:	fe cf       	rjmp	.-4      	; 0x30a0 <eeprom_write_r18>
    30a4:	1f ba       	out	0x1f, r1	; 31
    30a6:	92 bd       	out	0x22, r25	; 34
    30a8:	81 bd       	out	0x21, r24	; 33
    30aa:	20 bd       	out	0x20, r18	; 32
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	fa 9a       	sbi	0x1f, 2	; 31
    30b2:	f9 9a       	sbi	0x1f, 1	; 31
    30b4:	0f be       	out	0x3f, r0	; 63
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	08 95       	ret

000030ba <eeprom_write_dword>:
    30ba:	24 2f       	mov	r18, r20
    30bc:	0e 94 50 18 	call	0x30a0	; 0x30a0 <eeprom_write_r18>
    30c0:	25 2f       	mov	r18, r21
    30c2:	0e 94 50 18 	call	0x30a0	; 0x30a0 <eeprom_write_r18>
    30c6:	0c 94 65 18 	jmp	0x30ca	; 0x30ca <eeprom_write_word>

000030ca <eeprom_write_word>:
    30ca:	0e 94 4f 18 	call	0x309e	; 0x309e <eeprom_write_byte>
    30ce:	27 2f       	mov	r18, r23
    30d0:	0c 94 50 18 	jmp	0x30a0	; 0x30a0 <eeprom_write_r18>

000030d4 <__muluhisi3>:
    30d4:	0e 94 b4 18 	call	0x3168	; 0x3168 <__umulhisi3>
    30d8:	a5 9f       	mul	r26, r21
    30da:	90 0d       	add	r25, r0
    30dc:	b4 9f       	mul	r27, r20
    30de:	90 0d       	add	r25, r0
    30e0:	a4 9f       	mul	r26, r20
    30e2:	80 0d       	add	r24, r0
    30e4:	91 1d       	adc	r25, r1
    30e6:	11 24       	eor	r1, r1
    30e8:	08 95       	ret

000030ea <__mulshisi3>:
    30ea:	b7 ff       	sbrs	r27, 7
    30ec:	0c 94 6a 18 	jmp	0x30d4	; 0x30d4 <__muluhisi3>

000030f0 <__mulohisi3>:
    30f0:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__muluhisi3>
    30f4:	82 1b       	sub	r24, r18
    30f6:	93 0b       	sbc	r25, r19
    30f8:	08 95       	ret

000030fa <__prologue_saves__>:
    30fa:	2f 92       	push	r2
    30fc:	3f 92       	push	r3
    30fe:	4f 92       	push	r4
    3100:	5f 92       	push	r5
    3102:	6f 92       	push	r6
    3104:	7f 92       	push	r7
    3106:	8f 92       	push	r8
    3108:	9f 92       	push	r9
    310a:	af 92       	push	r10
    310c:	bf 92       	push	r11
    310e:	cf 92       	push	r12
    3110:	df 92       	push	r13
    3112:	ef 92       	push	r14
    3114:	ff 92       	push	r15
    3116:	0f 93       	push	r16
    3118:	1f 93       	push	r17
    311a:	cf 93       	push	r28
    311c:	df 93       	push	r29
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	ca 1b       	sub	r28, r26
    3124:	db 0b       	sbc	r29, r27
    3126:	0f b6       	in	r0, 0x3f	; 63
    3128:	f8 94       	cli
    312a:	de bf       	out	0x3e, r29	; 62
    312c:	0f be       	out	0x3f, r0	; 63
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	09 94       	ijmp

00003132 <__epilogue_restores__>:
    3132:	2a 88       	ldd	r2, Y+18	; 0x12
    3134:	39 88       	ldd	r3, Y+17	; 0x11
    3136:	48 88       	ldd	r4, Y+16	; 0x10
    3138:	5f 84       	ldd	r5, Y+15	; 0x0f
    313a:	6e 84       	ldd	r6, Y+14	; 0x0e
    313c:	7d 84       	ldd	r7, Y+13	; 0x0d
    313e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3140:	9b 84       	ldd	r9, Y+11	; 0x0b
    3142:	aa 84       	ldd	r10, Y+10	; 0x0a
    3144:	b9 84       	ldd	r11, Y+9	; 0x09
    3146:	c8 84       	ldd	r12, Y+8	; 0x08
    3148:	df 80       	ldd	r13, Y+7	; 0x07
    314a:	ee 80       	ldd	r14, Y+6	; 0x06
    314c:	fd 80       	ldd	r15, Y+5	; 0x05
    314e:	0c 81       	ldd	r16, Y+4	; 0x04
    3150:	1b 81       	ldd	r17, Y+3	; 0x03
    3152:	aa 81       	ldd	r26, Y+2	; 0x02
    3154:	b9 81       	ldd	r27, Y+1	; 0x01
    3156:	ce 0f       	add	r28, r30
    3158:	d1 1d       	adc	r29, r1
    315a:	0f b6       	in	r0, 0x3f	; 63
    315c:	f8 94       	cli
    315e:	de bf       	out	0x3e, r29	; 62
    3160:	0f be       	out	0x3f, r0	; 63
    3162:	cd bf       	out	0x3d, r28	; 61
    3164:	ed 01       	movw	r28, r26
    3166:	08 95       	ret

00003168 <__umulhisi3>:
    3168:	a2 9f       	mul	r26, r18
    316a:	b0 01       	movw	r22, r0
    316c:	b3 9f       	mul	r27, r19
    316e:	c0 01       	movw	r24, r0
    3170:	a3 9f       	mul	r26, r19
    3172:	70 0d       	add	r23, r0
    3174:	81 1d       	adc	r24, r1
    3176:	11 24       	eor	r1, r1
    3178:	91 1d       	adc	r25, r1
    317a:	b2 9f       	mul	r27, r18
    317c:	70 0d       	add	r23, r0
    317e:	81 1d       	adc	r24, r1
    3180:	11 24       	eor	r1, r1
    3182:	91 1d       	adc	r25, r1
    3184:	08 95       	ret

00003186 <_exit>:
    3186:	f8 94       	cli

00003188 <__stop_program>:
    3188:	ff cf       	rjmp	.-2      	; 0x3188 <__stop_program>
