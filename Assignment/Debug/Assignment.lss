
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00003142  000031d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003142  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000180  00800248  00800248  0000331e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000331e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000337c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000788  00000000  00000000  000033c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006868  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002282  00000000  00000000  0000a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038f3  00000000  00000000  0000c632  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001090  00000000  00000000  0000ff28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a1c  00000000  00000000  00010fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e4b  00000000  00000000  000129d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  0001581f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 75 0e 	jmp	0x1cea	; 0x1cea <__vector_20>
      54:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2599>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2597>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2114>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2112>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2066>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2062>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2058>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2048>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2033>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	e2 e4       	ldi	r30, 0x42	; 66
     1fa:	f1 e3       	ldi	r31, 0x31	; 49
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a8 34       	cpi	r26, 0x48	; 72
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	a8 e4       	ldi	r26, 0x48	; 72
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a8 3c       	cpi	r26, 0xC8	; 200
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 48 0b 	call	0x1690	; 0x1690 <main>
     21c:	0c 94 9f 18 	jmp	0x313e	; 0x313e <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e7 5b       	subi	r30, 0xB7	; 183
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	e8 5b       	subi	r30, 0xB8	; 184
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 48 02 	lds	r20, 0x0248	; 0x800248 <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 51 02 	lds	r18, 0x0251	; 0x800251 <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 48 02 	lds	r30, 0x0248	; 0x800248 <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 48 02 	sts	0x0248, r18	; 0x800248 <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e7 5b       	subi	r30, 0xB7	; 183
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 51 02 	sts	0x0251, r20	; 0x800251 <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <init_buzzer>:
}


int buzzer_times(void){
	return buzzer_time;
}
     344:	08 95       	ret

00000346 <buzzer_time_left>:
     346:	cf 92       	push	r12
     348:	df 92       	push	r13
     34a:	ef 92       	push	r14
     34c:	ff 92       	push	r15
     34e:	0f 93       	push	r16
     350:	1f 93       	push	r17
     352:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
     356:	40 91 52 02 	lds	r20, 0x0252	; 0x800252 <buzzer_time>
     35a:	50 91 53 02 	lds	r21, 0x0253	; 0x800253 <buzzer_time+0x1>
     35e:	6a 01       	movw	r12, r20
     360:	55 0f       	add	r21, r21
     362:	ee 08       	sbc	r14, r14
     364:	ff 08       	sbc	r15, r15
     366:	00 91 97 02 	lds	r16, 0x0297	; 0x800297 <clock_at_tone_start>
     36a:	10 91 98 02 	lds	r17, 0x0298	; 0x800298 <clock_at_tone_start+0x1>
     36e:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <clock_at_tone_start+0x2>
     372:	30 91 9a 02 	lds	r19, 0x029A	; 0x80029a <clock_at_tone_start+0x3>
     376:	c0 0e       	add	r12, r16
     378:	d1 1e       	adc	r13, r17
     37a:	e2 1e       	adc	r14, r18
     37c:	f3 1e       	adc	r15, r19
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	6c 15       	cp	r22, r12
     384:	7d 05       	cpc	r23, r13
     386:	8e 05       	cpc	r24, r14
     388:	9f 05       	cpc	r25, r15
     38a:	10 f0       	brcs	.+4      	; 0x390 <buzzer_time_left+0x4a>
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	c9 01       	movw	r24, r18
     392:	1f 91       	pop	r17
     394:	0f 91       	pop	r16
     396:	ff 90       	pop	r15
     398:	ef 90       	pop	r14
     39a:	df 90       	pop	r13
     39c:	cf 90       	pop	r12
     39e:	08 95       	ret

000003a0 <next_buzzer_tone>:

void next_buzzer_tone(void){
	current_index ++;
     3a0:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <current_index>
     3a4:	ef 5f       	subi	r30, 0xFF	; 255
     3a6:	e0 93 94 02 	sts	0x0294, r30	; 0x800294 <current_index>
	//printf("next tone");
	change_OCR1A(current_tone->buzzer_OCR1A[current_index]);
     3aa:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <current_tone>
     3ae:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <current_tone+0x1>
     3b2:	f0 e0       	ldi	r31, 0x00	; 0
     3b4:	ee 0f       	add	r30, r30
     3b6:	ff 1f       	adc	r31, r31
     3b8:	8d 91       	ld	r24, X+
     3ba:	9c 91       	ld	r25, X
     3bc:	e8 0f       	add	r30, r24
     3be:	f9 1f       	adc	r31, r25
     3c0:	80 81       	ld	r24, Z
     3c2:	91 81       	ldd	r25, Z+1	; 0x01
     3c4:	0e 94 51 12 	call	0x24a2	; 0x24a2 <change_OCR1A>
	//  printf_P(PSTR("ptr: %d, ocr1a: %d\n"), buzzer_pointer, buzzer_OCR1A[buzzer_pointer]);
	//change_timer_one_frequency(buzzer_frequencies[buzzer_pointer]);

	clock_at_tone_start = get_clock_ticks();
     3c8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
     3cc:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <clock_at_tone_start>
     3d0:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <clock_at_tone_start+0x1>
     3d4:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <clock_at_tone_start+0x2>
     3d8:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <clock_at_tone_start+0x3>
	
	//  How long this should be
	buzzer_time = (*current_tone).durations[current_index];
     3dc:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <current_tone>
     3e0:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <current_tone+0x1>
     3e4:	e0 91 94 02 	lds	r30, 0x0294	; 0x800294 <current_index>
     3e8:	f0 e0       	ldi	r31, 0x00	; 0
     3ea:	ee 0f       	add	r30, r30
     3ec:	ff 1f       	adc	r31, r31
     3ee:	12 96       	adiw	r26, 0x02	; 2
     3f0:	8d 91       	ld	r24, X+
     3f2:	9c 91       	ld	r25, X
     3f4:	13 97       	sbiw	r26, 0x03	; 3
     3f6:	e8 0f       	add	r30, r24
     3f8:	f9 1f       	adc	r31, r25
     3fa:	80 81       	ld	r24, Z
     3fc:	91 81       	ldd	r25, Z+1	; 0x01
     3fe:	90 93 53 02 	sts	0x0253, r25	; 0x800253 <buzzer_time+0x1>
     402:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <buzzer_time>
     406:	08 95       	ret

00000408 <reset_buzzer>:
}


void reset_buzzer(void){
	DDRD &= ~(1<<5);
     408:	55 98       	cbi	0x0a, 5	; 10
	//current_index = -1; 
	//printf_P(PSTR("ended")); 
	current_tone = NULL; 
     40a:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <current_tone+0x1>
     40e:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <current_tone>
     412:	08 95       	ret

00000414 <play_start_game_sound_effect>:
}

void play_start_game_sound_effect(void){
	current_tone = &Begin_tone;
     414:	8d e0       	ldi	r24, 0x0D	; 13
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <current_tone+0x1>
     41c:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <current_tone>
	current_index = -1;
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <current_index>
	next_buzzer_tone();
     426:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <next_buzzer_tone>
	if(sound_effects_on_mode()){
		enable_timer_one();
     42a:	0e 94 56 12 	call	0x24ac	; 0x24ac <enable_timer_one>
     42e:	08 95       	ret

00000430 <play_eating_food_sound_effect>:
	}
}

void play_eating_food_sound_effect(void){
	current_tone = &Eat_tone;
     430:	88 e0       	ldi	r24, 0x08	; 8
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <current_tone+0x1>
     438:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <current_tone>
	current_index = -1;
     43c:	8f ef       	ldi	r24, 0xFF	; 255
     43e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <current_index>
	next_buzzer_tone();
     442:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <next_buzzer_tone>
	if(sound_effects_on_mode()){
		enable_timer_one();
     446:	0e 94 56 12 	call	0x24ac	; 0x24ac <enable_timer_one>
     44a:	08 95       	ret

0000044c <last_tone_in_sequence>:
// 	}
// }


int last_tone_in_sequence(void){
	return current_index+1 >= current_tone->length;
     44c:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <current_index>
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	2f 5f       	subi	r18, 0xFF	; 255
     454:	3f 4f       	sbci	r19, 0xFF	; 255
     456:	e0 91 95 02 	lds	r30, 0x0295	; 0x800295 <current_tone>
     45a:	f0 91 96 02 	lds	r31, 0x0296	; 0x800296 <current_tone+0x1>
     45e:	44 81       	ldd	r20, Z+4	; 0x04
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	24 17       	cp	r18, r20
     468:	35 07       	cpc	r19, r21
     46a:	14 f4       	brge	.+4      	; 0x470 <last_tone_in_sequence+0x24>
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	90 e0       	ldi	r25, 0x00	; 0
}
     470:	08 95       	ret

00000472 <handle_buzzer_loop>:
		}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     472:	0e 94 a3 01 	call	0x346	; 0x346 <buzzer_time_left>
     476:	89 2b       	or	r24, r25
     478:	39 f4       	brne	.+14     	; 0x488 <handle_buzzer_loop+0x16>
     47a:	0e 94 26 02 	call	0x44c	; 0x44c <last_tone_in_sequence>
     47e:	89 2b       	or	r24, r25
     480:	19 f0       	breq	.+6      	; 0x488 <handle_buzzer_loop+0x16>
		//move_cursor(10, 7);
		//printf("END TONE \n");
		reset_buzzer();
     482:	0e 94 04 02 	call	0x408	; 0x408 <reset_buzzer>
     486:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     488:	0e 94 a3 01 	call	0x346	; 0x346 <buzzer_time_left>
     48c:	89 2b       	or	r24, r25
     48e:	11 f4       	brne	.+4      	; 0x494 <handle_buzzer_loop+0x22>
		next_buzzer_tone();
     490:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <next_buzzer_tone>
     494:	08 95       	ret

00000496 <EEPROM_has_saved_game>:
	};
	


uint8_t EEPROM_has_saved_game(void){
	uint32_t current_signature = eeprom_read_dword(SAVE_GAME_SIGNATURE_MEMORY); 
     496:	80 e8       	ldi	r24, 0x80	; 128
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	0e 94 1b 18 	call	0x3036	; 0x3036 <eeprom_read_dword>
	return (current_signature == SAVE_GAME_SIGNATURE); 
     49e:	21 e0       	ldi	r18, 0x01	; 1
     4a0:	61 15       	cp	r22, r1
     4a2:	72 41       	sbci	r23, 0x12	; 18
     4a4:	81 05       	cpc	r24, r1
     4a6:	91 05       	cpc	r25, r1
     4a8:	09 f0       	breq	.+2      	; 0x4ac <EEPROM_has_saved_game+0x16>
     4aa:	20 e0       	ldi	r18, 0x00	; 0
}
     4ac:	82 2f       	mov	r24, r18
     4ae:	08 95       	ret

000004b0 <save_game_to_EPPROM>:

void save_game_to_EPPROM(void){
     4b0:	df 92       	push	r13
     4b2:	ef 92       	push	r14
     4b4:	ff 92       	push	r15
     4b6:	0f 93       	push	r16
     4b8:	1f 93       	push	r17
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	cd b7       	in	r28, 0x3d	; 61
     4c0:	de b7       	in	r29, 0x3e	; 62
     4c2:	62 97       	sbiw	r28, 0x12	; 18
     4c4:	0f b6       	in	r0, 0x3f	; 63
     4c6:	f8 94       	cli
     4c8:	de bf       	out	0x3e, r29	; 62
     4ca:	0f be       	out	0x3f, r0	; 63
     4cc:	cd bf       	out	0x3d, r28	; 61
	cli();
     4ce:	f8 94       	cli
	// Save the Food Positions
	eeprom_write_dword(SAVE_GAME_SIGNATURE_MEMORY, SAVE_GAME_SIGNATURE);
     4d0:	40 e0       	ldi	r20, 0x00	; 0
     4d2:	52 e1       	ldi	r21, 0x12	; 18
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	70 e0       	ldi	r23, 0x00	; 0
     4d8:	80 e8       	ldi	r24, 0x80	; 128
     4da:	91 e0       	ldi	r25, 0x01	; 1
     4dc:	0e 94 39 18 	call	0x3072	; 0x3072 <eeprom_write_dword>
	
	struct Game_Save_Data new_saved_game; 
	new_saved_game.food_one =get_position_of_food(0);
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 79 07 	call	0xef2	; 0xef2 <get_position_of_food>
     4e6:	89 83       	std	Y+1, r24	; 0x01
	new_saved_game.food_two =get_position_of_food(1);
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 79 07 	call	0xef2	; 0xef2 <get_position_of_food>
     4ee:	8a 83       	std	Y+2, r24	; 0x02
	new_saved_game.food_three =get_position_of_food(2);
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	0e 94 79 07 	call	0xef2	; 0xef2 <get_position_of_food>
     4f6:	8b 83       	std	Y+3, r24	; 0x03
	new_saved_game.food_four = get_position_of_food(3);
     4f8:	83 e0       	ldi	r24, 0x03	; 3
     4fa:	0e 94 79 07 	call	0xef2	; 0xef2 <get_position_of_food>
     4fe:	8c 83       	std	Y+4, r24	; 0x04
	new_saved_game.rat = get_rat_position(); 
     500:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <get_rat_position>
     504:	8e 83       	std	Y+6, r24	; 0x06
	new_saved_game.game_score = get_score(); 
     506:	0e 94 97 0c 	call	0x192e	; 0x192e <get_score>
     50a:	69 87       	std	Y+9, r22	; 0x09
     50c:	7a 87       	std	Y+10, r23	; 0x0a
     50e:	8b 87       	std	Y+11, r24	; 0x0b
     510:	9c 87       	std	Y+12, r25	; 0x0c
	new_saved_game.game_speed = get_current_game_speed(); 
     512:	0e 94 5f 08 	call	0x10be	; 0x10be <get_current_game_speed>
     516:	98 87       	std	Y+8, r25	; 0x08
     518:	8f 83       	std	Y+7, r24	; 0x07
	new_saved_game.snake_length = get_snake_length(); 
     51a:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <get_snake_length>
     51e:	8d 87       	std	Y+13, r24	; 0x0d
	new_saved_game.clock_ticks = get_clock_ticks(); 
     520:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
     524:	09 2e       	mov	r0, r25
     526:	00 0c       	add	r0, r0
     528:	aa 0b       	sbc	r26, r26
     52a:	bb 0b       	sbc	r27, r27
     52c:	8e 87       	std	Y+14, r24	; 0x0e
     52e:	9f 87       	std	Y+15, r25	; 0x0f
     530:	a8 8b       	std	Y+16, r26	; 0x10
     532:	b9 8b       	std	Y+17, r27	; 0x11
	new_saved_game.snake_direction = get_current_drn(); 
     534:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <get_current_drn>
     538:	8a 8b       	std	Y+18, r24	; 0x12
	
	//  Save Rat Position and Superfood position if superfood is currently on. 
	if (superfood_is_on_board()){
     53a:	0e 94 67 10 	call	0x20ce	; 0x20ce <superfood_is_on_board>
     53e:	88 23       	and	r24, r24
     540:	21 f0       	breq	.+8      	; 0x54a <save_game_to_EPPROM+0x9a>
		new_saved_game.superfood = get_superfood_position();
     542:	0e 94 b1 10 	call	0x2162	; 0x2162 <get_superfood_position>
     546:	8d 83       	std	Y+5, r24	; 0x05
     548:	02 c0       	rjmp	.+4      	; 0x54e <save_game_to_EPPROM+0x9e>
	} else{
		new_saved_game.superfood =  0x08; 
     54a:	88 e0       	ldi	r24, 0x08	; 8
     54c:	8d 83       	std	Y+5, r24	; 0x05
	}
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 
     54e:	42 e1       	ldi	r20, 0x12	; 18
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	60 ea       	ldi	r22, 0xA0	; 160
     554:	71 e0       	ldi	r23, 0x01	; 1
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
     55e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <get_snake_tail_index>
     562:	18 2f       	mov	r17, r24
     564:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <get_snake_head_index>
     568:	81 17       	cp	r24, r17
     56a:	08 f0       	brcs	.+2      	; 0x56e <save_game_to_EPPROM+0xbe>
     56c:	43 c0       	rjmp	.+134    	; 0x5f4 <save_game_to_EPPROM+0x144>
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     56e:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <get_snake_tail_index>
     572:	d8 2e       	mov	r13, r24
     574:	08 2f       	mov	r16, r24
     576:	10 e0       	ldi	r17, 0x00	; 0
     578:	01 32       	cpi	r16, 0x21	; 33
     57a:	11 05       	cpc	r17, r1
     57c:	1c f5       	brge	.+70     	; 0x5c4 <save_game_to_EPPROM+0x114>
     57e:	0f 2e       	mov	r0, r31
     580:	f0 e3       	ldi	r31, 0x30	; 48
     582:	ef 2e       	mov	r14, r31
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	ff 2e       	mov	r15, r31
     588:	f0 2d       	mov	r31, r0
			eeprom_write_byte(current_snake_position_memory, 
     58a:	80 2f       	mov	r24, r16
     58c:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <get_snake_position_at_index>
     590:	68 2f       	mov	r22, r24
     592:	c7 01       	movw	r24, r14
     594:	0e 94 2b 18 	call	0x3056	; 0x3056 <eeprom_write_byte>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
     598:	88 e0       	ldi	r24, 0x08	; 8
     59a:	e8 0e       	add	r14, r24
     59c:	f1 1c       	adc	r15, r1
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     59e:	0f 5f       	subi	r16, 0xFF	; 255
     5a0:	1f 4f       	sbci	r17, 0xFF	; 255
     5a2:	01 32       	cpi	r16, 0x21	; 33
     5a4:	11 05       	cpc	r17, r1
     5a6:	89 f7       	brne	.-30     	; 0x58a <save_game_to_EPPROM+0xda>
     5a8:	0d 2d       	mov	r16, r13
     5aa:	10 e0       	ldi	r17, 0x00	; 0
     5ac:	11 95       	neg	r17
     5ae:	01 95       	neg	r16
     5b0:	11 09       	sbc	r17, r1
     5b2:	00 0f       	add	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	00 0f       	add	r16, r16
     5b8:	11 1f       	adc	r17, r17
     5ba:	00 0f       	add	r16, r16
     5bc:	11 1f       	adc	r17, r17
     5be:	08 5c       	subi	r16, 0xC8	; 200
     5c0:	1c 4f       	sbci	r17, 0xFC	; 252
     5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <save_game_to_EPPROM+0x118>
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     5c4:	00 e3       	ldi	r16, 0x30	; 48
     5c6:	12 e0       	ldi	r17, 0x02	; 2
     5c8:	e1 2c       	mov	r14, r1
     5ca:	f1 2c       	mov	r15, r1
     5cc:	0c c0       	rjmp	.+24     	; 0x5e6 <save_game_to_EPPROM+0x136>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
			eeprom_write_byte(current_snake_position_memory,
     5ce:	8e 2d       	mov	r24, r14
     5d0:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <get_snake_position_at_index>
     5d4:	68 2f       	mov	r22, r24
     5d6:	c8 01       	movw	r24, r16
     5d8:	0e 94 2b 18 	call	0x3056	; 0x3056 <eeprom_write_byte>
			get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory +=0x08;
     5dc:	08 5f       	subi	r16, 0xF8	; 248
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
			eeprom_write_byte(current_snake_position_memory, 
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
     5e0:	8f ef       	ldi	r24, 0xFF	; 255
     5e2:	e8 1a       	sub	r14, r24
     5e4:	f8 0a       	sbc	r15, r24
     5e6:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <get_snake_head_index>
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	8e 15       	cp	r24, r14
     5ee:	9f 05       	cpc	r25, r15
     5f0:	74 f7       	brge	.-36     	; 0x5ce <save_game_to_EPPROM+0x11e>
     5f2:	19 c0       	rjmp	.+50     	; 0x626 <save_game_to_EPPROM+0x176>
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     5f4:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <get_snake_tail_index>
     5f8:	e8 2e       	mov	r14, r24
     5fa:	f1 2c       	mov	r15, r1
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     5fc:	00 e3       	ldi	r16, 0x30	; 48
     5fe:	12 e0       	ldi	r17, 0x02	; 2
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     600:	0c c0       	rjmp	.+24     	; 0x61a <save_game_to_EPPROM+0x16a>
			eeprom_write_byte(current_snake_position_memory, get_snake_position_at_index(i));
     602:	8e 2d       	mov	r24, r14
     604:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <get_snake_position_at_index>
     608:	68 2f       	mov	r22, r24
     60a:	c8 01       	movw	r24, r16
     60c:	0e 94 2b 18 	call	0x3056	; 0x3056 <eeprom_write_byte>
			current_snake_position_memory +=0x08;
     610:	08 5f       	subi	r16, 0xF8	; 248
     612:	1f 4f       	sbci	r17, 0xFF	; 255
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	e8 1a       	sub	r14, r24
     618:	f8 0a       	sbc	r15, r24
     61a:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <get_snake_head_index>
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	8e 15       	cp	r24, r14
     622:	9f 05       	cpc	r25, r15
     624:	74 f7       	brge	.-36     	; 0x602 <save_game_to_EPPROM+0x152>
			
		}
	}
	
	//  Add an invalid PosnType byte to signify the end of the snake positions. 
	eeprom_write_byte(current_snake_position_memory,0x08);
     626:	68 e0       	ldi	r22, 0x08	; 8
     628:	c8 01       	movw	r24, r16
     62a:	0e 94 2b 18 	call	0x3056	; 0x3056 <eeprom_write_byte>
	//print_save_details();
	sei();
     62e:	78 94       	sei

}
     630:	62 96       	adiw	r28, 0x12	; 18
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	08 95       	ret

0000064c <add_food_to_board>:
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
	}
}

void add_food_to_board(PosnType food_pos){
     64c:	cf 93       	push	r28
     64e:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     650:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <is_position_valid>
     654:	88 23       	and	r24, r24
     656:	99 f0       	breq	.+38     	; 0x67e <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     658:	e0 91 a0 02 	lds	r30, 0x02A0	; 0x8002a0 <numFoodItems>
     65c:	0e 2e       	mov	r0, r30
     65e:	00 0c       	add	r0, r0
     660:	ff 0b       	sbc	r31, r31
     662:	ef 55       	subi	r30, 0x5F	; 95
     664:	fd 4f       	sbci	r31, 0xFD	; 253
     666:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     668:	63 e3       	ldi	r22, 0x33	; 51
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	8c 2f       	mov	r24, r28
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
		numFoodItems++; 
     674:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <numFoodItems>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <numFoodItems>
	}
}
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <load_rat_from_EEPROM>:
void load_rat_from_EEPROM(PosnType rat_pos){
     682:	cf 93       	push	r28
     684:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     686:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <is_position_valid>
     68a:	88 23       	and	r24, r24
     68c:	21 f0       	breq	.+8      	; 0x696 <load_rat_from_EEPROM+0x14>
		set_rat_at_pos(rat_pos); 
     68e:	8c 2f       	mov	r24, r28
     690:	0e 94 67 0b 	call	0x16ce	; 0x16ce <set_rat_at_pos>
     694:	02 c0       	rjmp	.+4      	; 0x69a <load_rat_from_EEPROM+0x18>
	}else{
		add_new_rat_position();
     696:	0e 94 04 0c 	call	0x1808	; 0x1808 <add_new_rat_position>
	}
}
     69a:	cf 91       	pop	r28
     69c:	08 95       	ret

0000069e <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(PosnType super_food){
     69e:	cf 93       	push	r28
     6a0:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     6a2:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <is_position_valid>
     6a6:	88 23       	and	r24, r24
     6a8:	21 f0       	breq	.+8      	; 0x6b2 <load_superfood_from_EEPROM+0x14>
		load_superfood(super_food);
     6aa:	8c 2f       	mov	r24, r28
     6ac:	0e 94 61 10 	call	0x20c2	; 0x20c2 <load_superfood>
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <load_superfood_from_EEPROM+0x18>
	}else{
		remove_superfood_from_board(); 
     6b2:	0e 94 90 10 	call	0x2120	; 0x2120 <remove_superfood_from_board>
	}
}
     6b6:	cf 91       	pop	r28
     6b8:	08 95       	ret

000006ba <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 15 0f 	call	0x1e2a	; 0x1e2a <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     6c8:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <get_snake_length>
     6cc:	81 50       	subi	r24, 0x01	; 1
     6ce:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <set_snake_head_pointer>
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
     6d2:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     6d4:	c0 e3       	ldi	r28, 0x30	; 48
     6d6:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     6d8:	ce 01       	movw	r24, r28
     6da:	0e 94 13 18 	call	0x3026	; 0x3026 <eeprom_read_byte>
     6de:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     6e0:	61 2f       	mov	r22, r17
     6e2:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     6e6:	60 ef       	ldi	r22, 0xF0	; 240
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	80 2f       	mov	r24, r16
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
		snake_memory_position +=8; 
     6f2:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     6f4:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     6f6:	ce 01       	movw	r24, r28
     6f8:	0e 94 13 18 	call	0x3026	; 0x3026 <eeprom_read_byte>
     6fc:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <is_position_valid>
     700:	81 11       	cpse	r24, r1
     702:	ea cf       	rjmp	.-44     	; 0x6d8 <load_snake_from_EPPROM+0x1e>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     704:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <get_snake_head_position>
     708:	6f e0       	ldi	r22, 0x0F	; 15
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>

}
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	1f 91       	pop	r17
     718:	0f 91       	pop	r16
     71a:	08 95       	ret

0000071c <new_game_from_EEPROM>:
	//print_save_details();
	sei();

}

void new_game_from_EEPROM(void){
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	62 97       	sbiw	r28, 0x12	; 18
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
	if(EEPROM_has_saved_game()){
     730:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_has_saved_game>
     734:	88 23       	and	r24, r24
     736:	09 f4       	brne	.+2      	; 0x73a <new_game_from_EEPROM+0x1e>
     738:	48 c0       	rjmp	.+144    	; 0x7ca <new_game_from_EEPROM+0xae>
		clear_terminal(); 
     73a:	0e 94 44 11 	call	0x2288	; 0x2288 <clear_terminal>
		ledmatrix_clear();
     73e:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ledmatrix_clear>
		init_score_on_terminal();
     742:	0e 94 8d 11 	call	0x231a	; 0x231a <init_score_on_terminal>
		
		struct Game_Save_Data game_from_EEPROM; 
		eeprom_read_block(&game_from_EEPROM, SAVED_DATA_START, 18); 
     746:	42 e1       	ldi	r20, 0x12	; 18
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	60 ea       	ldi	r22, 0xA0	; 160
     74c:	71 e0       	ldi	r23, 0x01	; 1
     74e:	ce 01       	movw	r24, r28
     750:	01 96       	adiw	r24, 0x01	; 1
     752:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
		
		// Methods from init_game(); 
		set_score(game_from_EEPROM.game_score);
     756:	69 85       	ldd	r22, Y+9	; 0x09
     758:	7a 85       	ldd	r23, Y+10	; 0x0a
     75a:	8b 85       	ldd	r24, Y+11	; 0x0b
     75c:	9c 85       	ldd	r25, Y+12	; 0x0c
     75e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <set_score>
		set_clock_ticks(game_from_EEPROM.clock_ticks); 
     762:	6e 85       	ldd	r22, Y+14	; 0x0e
     764:	7f 85       	ldd	r23, Y+15	; 0x0f
     766:	88 89       	ldd	r24, Y+16	; 0x10
     768:	99 89       	ldd	r25, Y+17	; 0x11
     76a:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <set_clock_ticks>
		update_terminal_score(); 
     76e:	0e 94 a8 11 	call	0x2350	; 0x2350 <update_terminal_score>
		set_game_speed(game_from_EEPROM.game_speed);
     772:	8f 81       	ldd	r24, Y+7	; 0x07
     774:	98 85       	ldd	r25, Y+8	; 0x08
     776:	0e 94 64 08 	call	0x10c8	; 0x10c8 <set_game_speed>
		load_rat_from_EEPROM(game_from_EEPROM.rat);
     77a:	8e 81       	ldd	r24, Y+6	; 0x06
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 41 03 	call	0x682	; 0x682 <load_rat_from_EEPROM>
		initialise_timer_one();
     782:	0e 94 3a 12 	call	0x2474	; 0x2474 <initialise_timer_one>
	
		// Init food, rats, superfood and snake
		add_food_to_board(game_from_EEPROM.food_one);
     786:	89 81       	ldd	r24, Y+1	; 0x01
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	0e 94 26 03 	call	0x64c	; 0x64c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_two);
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 26 03 	call	0x64c	; 0x64c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_three);
     796:	8b 81       	ldd	r24, Y+3	; 0x03
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 26 03 	call	0x64c	; 0x64c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_four);
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 26 03 	call	0x64c	; 0x64c <add_food_to_board>
		load_superfood_from_EEPROM( game_from_EEPROM.superfood);
     7a6:	8d 81       	ldd	r24, Y+5	; 0x05
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	0e 94 4f 03 	call	0x69e	; 0x69e <load_superfood_from_EEPROM>
		set_snake_length(game_from_EEPROM.snake_length); 
     7ae:	8d 85       	ldd	r24, Y+13	; 0x0d
     7b0:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <set_snake_length>
		reset_snake_drn(game_from_EEPROM.snake_direction); 
     7b4:	8a 89       	ldd	r24, Y+18	; 0x12
     7b6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <reset_snake_drn>
		load_snake_from_EPPROM();
     7ba:	0e 94 5d 03 	call	0x6ba	; 0x6ba <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     7be:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     7c2:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     7c6:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <load_EEPROM_data_on_next_game>
	}
}
     7ca:	62 96       	adiw	r28, 0x12	; 18
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
     7d6:	df 91       	pop	r29
     7d8:	cf 91       	pop	r28
     7da:	08 95       	ret

000007dc <move_place_down>:
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
		
	clear_terminal();
}

void move_place_down(uint16_t mem_position){
     7dc:	0f 93       	push	r16
     7de:	1f 93       	push	r17
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	27 97       	sbiw	r28, 0x07	; 7
     7ea:	0f b6       	in	r0, 0x3f	; 63
     7ec:	f8 94       	cli
     7ee:	de bf       	out	0x3e, r29	; 62
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	cd bf       	out	0x3d, r28	; 61
     7f4:	8c 01       	movw	r16, r24
	struct High_Score_Place high_score_place;
	eeprom_read_block(&high_score_place, mem_position, 7); 
     7f6:	47 e0       	ldi	r20, 0x07	; 7
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	bc 01       	movw	r22, r24
     7fc:	ce 01       	movw	r24, r28
     7fe:	01 96       	adiw	r24, 0x01	; 1
     800:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
	eeprom_write_block(&high_score_place, mem_position +64, 7);
     804:	b8 01       	movw	r22, r16
     806:	60 5c       	subi	r22, 0xC0	; 192
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	47 e0       	ldi	r20, 0x07	; 7
     80c:	50 e0       	ldi	r21, 0x00	; 0
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>
}
     816:	27 96       	adiw	r28, 0x07	; 7
     818:	0f b6       	in	r0, 0x3f	; 63
     81a:	f8 94       	cli
     81c:	de bf       	out	0x3e, r29	; 62
     81e:	0f be       	out	0x3f, r0	; 63
     820:	cd bf       	out	0x3d, r28	; 61
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	08 95       	ret

0000082c <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(NAME_FOUR); 
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 ee 03 	call	0x7dc	; 0x7dc <move_place_down>
     834:	08 95       	ret

00000836 <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     836:	0e 94 16 04 	call	0x82c	; 0x82c <move_four_place_down>
	move_place_down(NAME_THREE);
     83a:	80 ec       	ldi	r24, 0xC0	; 192
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 ee 03 	call	0x7dc	; 0x7dc <move_place_down>
     842:	08 95       	ret

00000844 <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     844:	0e 94 1b 04 	call	0x836	; 0x836 <move_three_place_down>
	move_place_down(NAME_TWO);
     848:	80 e8       	ldi	r24, 0x80	; 128
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 ee 03 	call	0x7dc	; 0x7dc <move_place_down>
     850:	08 95       	ret

00000852 <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     852:	0e 94 22 04 	call	0x844	; 0x844 <move_two_place_down>
	move_place_down(NAME_ONE);
     856:	80 e4       	ldi	r24, 0x40	; 64
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 ee 03 	call	0x7dc	; 0x7dc <move_place_down>
     85e:	08 95       	ret

00000860 <initialise_EEPROM>:
}

void initialise_EEPROM(void){
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62
     868:	27 97       	sbiw	r28, 0x07	; 7
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     874:	44 e3       	ldi	r20, 0x34	; 52
     876:	52 e1       	ldi	r21, 0x12	; 18
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 39 18 	call	0x3072	; 0x3072 <eeprom_write_dword>
	struct High_Score_Place empty_score_place;
	empty_score_place.name[0] = ' ';
     884:	80 e2       	ldi	r24, 0x20	; 32
     886:	89 83       	std	Y+1, r24	; 0x01
	empty_score_place.name[1] = ' ';
     888:	8a 83       	std	Y+2, r24	; 0x02
	empty_score_place.name[2] = ' ';
     88a:	8b 83       	std	Y+3, r24	; 0x03
	empty_score_place.score = 0; 
     88c:	1c 82       	std	Y+4, r1	; 0x04
     88e:	1d 82       	std	Y+5, r1	; 0x05
     890:	1e 82       	std	Y+6, r1	; 0x06
     892:	1f 82       	std	Y+7, r1	; 0x07
	eeprom_write_block(&empty_score_place, NAME_ONE, 7);
     894:	47 e0       	ldi	r20, 0x07	; 7
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	60 e4       	ldi	r22, 0x40	; 64
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_TWO, 7);
     8a4:	47 e0       	ldi	r20, 0x07	; 7
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	60 e8       	ldi	r22, 0x80	; 128
     8aa:	70 e0       	ldi	r23, 0x00	; 0
     8ac:	ce 01       	movw	r24, r28
     8ae:	01 96       	adiw	r24, 0x01	; 1
     8b0:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_THREE, 7);
     8b4:	47 e0       	ldi	r20, 0x07	; 7
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	60 ec       	ldi	r22, 0xC0	; 192
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
     8c0:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FOUR, 7);
     8c4:	47 e0       	ldi	r20, 0x07	; 7
     8c6:	50 e0       	ldi	r21, 0x00	; 0
     8c8:	60 e0       	ldi	r22, 0x00	; 0
     8ca:	71 e0       	ldi	r23, 0x01	; 1
     8cc:	ce 01       	movw	r24, r28
     8ce:	01 96       	adiw	r24, 0x01	; 1
     8d0:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FIVE, 7);
     8d4:	47 e0       	ldi	r20, 0x07	; 7
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	60 e4       	ldi	r22, 0x40	; 64
     8da:	71 e0       	ldi	r23, 0x01	; 1
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>

	}
     8e4:	27 96       	adiw	r28, 0x07	; 7
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	df 91       	pop	r29
     8f2:	cf 91       	pop	r28
     8f4:	08 95       	ret

000008f6 <EEPROM_High_Score_has_been_initialised>:


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 1b 18 	call	0x3036	; 0x3036 <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     8fe:	21 e0       	ldi	r18, 0x01	; 1
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	64 33       	cpi	r22, 0x34	; 52
     904:	72 41       	sbci	r23, 0x12	; 18
     906:	81 05       	cpc	r24, r1
     908:	91 05       	cpc	r25, r1
     90a:	11 f0       	breq	.+4      	; 0x910 <__stack+0x11>
     90c:	20 e0       	ldi	r18, 0x00	; 0
     90e:	30 e0       	ldi	r19, 0x00	; 0
}
     910:	c9 01       	movw	r24, r18
     912:	08 95       	ret

00000914 <is_high_score>:
struct High_Score_Place {
	char name[3];
	uint32_t score;
};

uint8_t is_high_score(void){
     914:	cf 92       	push	r12
     916:	df 92       	push	r13
     918:	ef 92       	push	r14
     91a:	ff 92       	push	r15
     91c:	cf 93       	push	r28
     91e:	df 93       	push	r29
     920:	cd b7       	in	r28, 0x3d	; 61
     922:	de b7       	in	r29, 0x3e	; 62
     924:	27 97       	sbiw	r28, 0x07	; 7
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
	uint32_t score = get_score();
     930:	0e 94 97 0c 	call	0x192e	; 0x192e <get_score>
     934:	6b 01       	movw	r12, r22
     936:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place;
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     938:	47 e0       	ldi	r20, 0x07	; 7
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e4       	ldi	r22, 0x40	; 64
     93e:	71 e0       	ldi	r23, 0x01	; 1
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
     948:	8c 81       	ldd	r24, Y+4	; 0x04
     94a:	9d 81       	ldd	r25, Y+5	; 0x05
     94c:	ae 81       	ldd	r26, Y+6	; 0x06
     94e:	bf 81       	ldd	r27, Y+7	; 0x07
     950:	c8 16       	cp	r12, r24
     952:	d9 06       	cpc	r13, r25
     954:	ea 06       	cpc	r14, r26
     956:	fb 06       	cpc	r15, r27
     958:	40 f4       	brcc	.+16     	; 0x96a <is_high_score+0x56>
     95a:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_High_Score_has_been_initialised>
     95e:	21 e0       	ldi	r18, 0x01	; 1
     960:	89 2b       	or	r24, r25
     962:	09 f0       	breq	.+2      	; 0x966 <is_high_score+0x52>
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	82 2f       	mov	r24, r18
     968:	01 c0       	rjmp	.+2      	; 0x96c <is_high_score+0x58>
     96a:	81 e0       	ldi	r24, 0x01	; 1
}
     96c:	27 96       	adiw	r28, 0x07	; 7
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	08 95       	ret

00000986 <high_score_position>:

uint16_t high_score_position(void){
     986:	cf 92       	push	r12
     988:	df 92       	push	r13
     98a:	ef 92       	push	r14
     98c:	ff 92       	push	r15
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
     996:	27 97       	sbiw	r28, 0x07	; 7
     998:	0f b6       	in	r0, 0x3f	; 63
     99a:	f8 94       	cli
     99c:	de bf       	out	0x3e, r29	; 62
     99e:	0f be       	out	0x3f, r0	; 63
     9a0:	cd bf       	out	0x3d, r28	; 61
	if (!(EEPROM_High_Score_has_been_initialised())){
     9a2:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_High_Score_has_been_initialised>
     9a6:	89 2b       	or	r24, r25
     9a8:	09 f4       	brne	.+2      	; 0x9ac <high_score_position+0x26>
     9aa:	5b c0       	rjmp	.+182    	; 0xa62 <high_score_position+0xdc>
		return NAME_ONE;
	}
	
	uint32_t score = get_score(); 
     9ac:	0e 94 97 0c 	call	0x192e	; 0x192e <get_score>
     9b0:	6b 01       	movw	r12, r22
     9b2:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);
     9b4:	47 e0       	ldi	r20, 0x07	; 7
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e4       	ldi	r22, 0x40	; 64
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>

	if (score> current_score_place.score){
     9c4:	8c 81       	ldd	r24, Y+4	; 0x04
     9c6:	9d 81       	ldd	r25, Y+5	; 0x05
     9c8:	ae 81       	ldd	r26, Y+6	; 0x06
     9ca:	bf 81       	ldd	r27, Y+7	; 0x07
     9cc:	8c 15       	cp	r24, r12
     9ce:	9d 05       	cpc	r25, r13
     9d0:	ae 05       	cpc	r26, r14
     9d2:	bf 05       	cpc	r27, r15
     9d4:	08 f4       	brcc	.+2      	; 0x9d8 <high_score_position+0x52>
     9d6:	48 c0       	rjmp	.+144    	; 0xa68 <high_score_position+0xe2>
		return NAME_ONE;
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
     9d8:	47 e0       	ldi	r20, 0x07	; 7
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e8       	ldi	r22, 0x80	; 128
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	ce 01       	movw	r24, r28
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
	if (score> current_score_place.score){
     9e8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ea:	9d 81       	ldd	r25, Y+5	; 0x05
     9ec:	ae 81       	ldd	r26, Y+6	; 0x06
     9ee:	bf 81       	ldd	r27, Y+7	; 0x07
     9f0:	8c 15       	cp	r24, r12
     9f2:	9d 05       	cpc	r25, r13
     9f4:	ae 05       	cpc	r26, r14
     9f6:	bf 05       	cpc	r27, r15
     9f8:	d0 f1       	brcs	.+116    	; 0xa6e <high_score_position+0xe8>
		return NAME_TWO;
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
     9fa:	47 e0       	ldi	r20, 0x07	; 7
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 ec       	ldi	r22, 0xC0	; 192
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	ce 01       	movw	r24, r28
     a04:	01 96       	adiw	r24, 0x01	; 1
     a06:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
	if (score> current_score_place.score){
     a0a:	8c 81       	ldd	r24, Y+4	; 0x04
     a0c:	9d 81       	ldd	r25, Y+5	; 0x05
     a0e:	ae 81       	ldd	r26, Y+6	; 0x06
     a10:	bf 81       	ldd	r27, Y+7	; 0x07
     a12:	8c 15       	cp	r24, r12
     a14:	9d 05       	cpc	r25, r13
     a16:	ae 05       	cpc	r26, r14
     a18:	bf 05       	cpc	r27, r15
     a1a:	60 f1       	brcs	.+88     	; 0xa74 <high_score_position+0xee>
		return NAME_THREE;
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
     a1c:	47 e0       	ldi	r20, 0x07	; 7
     a1e:	50 e0       	ldi	r21, 0x00	; 0
     a20:	60 e0       	ldi	r22, 0x00	; 0
     a22:	71 e0       	ldi	r23, 0x01	; 1
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
	if (score> current_score_place.score){
     a2c:	8c 81       	ldd	r24, Y+4	; 0x04
     a2e:	9d 81       	ldd	r25, Y+5	; 0x05
     a30:	ae 81       	ldd	r26, Y+6	; 0x06
     a32:	bf 81       	ldd	r27, Y+7	; 0x07
     a34:	8c 15       	cp	r24, r12
     a36:	9d 05       	cpc	r25, r13
     a38:	ae 05       	cpc	r26, r14
     a3a:	bf 05       	cpc	r27, r15
     a3c:	f0 f0       	brcs	.+60     	; 0xa7a <high_score_position+0xf4>
		return NAME_FOUR;
	}
	
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     a3e:	47 e0       	ldi	r20, 0x07	; 7
     a40:	50 e0       	ldi	r21, 0x00	; 0
     a42:	60 e4       	ldi	r22, 0x40	; 64
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	ce 01       	movw	r24, r28
     a48:	01 96       	adiw	r24, 0x01	; 1
     a4a:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
	if (score> current_score_place.score){
     a4e:	8c 81       	ldd	r24, Y+4	; 0x04
     a50:	9d 81       	ldd	r25, Y+5	; 0x05
     a52:	ae 81       	ldd	r26, Y+6	; 0x06
     a54:	bf 81       	ldd	r27, Y+7	; 0x07
     a56:	8c 15       	cp	r24, r12
     a58:	9d 05       	cpc	r25, r13
     a5a:	ae 05       	cpc	r26, r14
     a5c:	bf 05       	cpc	r27, r15
     a5e:	80 f0       	brcs	.+32     	; 0xa80 <high_score_position+0xfa>
		return NAME_FIVE;
	}
}
     a60:	11 c0       	rjmp	.+34     	; 0xa84 <high_score_position+0xfe>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return NAME_ONE;
     a62:	80 e4       	ldi	r24, 0x40	; 64
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e c0       	rjmp	.+28     	; 0xa84 <high_score_position+0xfe>
	uint32_t score = get_score(); 
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);

	if (score> current_score_place.score){
		return NAME_ONE;
     a68:	80 e4       	ldi	r24, 0x40	; 64
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0b c0       	rjmp	.+22     	; 0xa84 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
	if (score> current_score_place.score){
		return NAME_TWO;
     a6e:	80 e8       	ldi	r24, 0x80	; 128
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
	if (score> current_score_place.score){
		return NAME_THREE;
     a74:	80 ec       	ldi	r24, 0xC0	; 192
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	05 c0       	rjmp	.+10     	; 0xa84 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
	if (score> current_score_place.score){
		return NAME_FOUR;
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	91 e0       	ldi	r25, 0x01	; 1
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
	if (score> current_score_place.score){
		return NAME_FIVE;
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     a84:	27 96       	adiw	r28, 0x07	; 7
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	f8 94       	cli
     a8a:	de bf       	out	0x3e, r29	; 62
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	cd bf       	out	0x3d, r28	; 61
     a90:	df 91       	pop	r29
     a92:	cf 91       	pop	r28
     a94:	ff 90       	pop	r15
     a96:	ef 90       	pop	r14
     a98:	df 90       	pop	r13
     a9a:	cf 90       	pop	r12
     a9c:	08 95       	ret

00000a9e <handle_sequence_into_EEPFROM>:
				current_high_score_name[2] = ' ';
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	cd b7       	in	r28, 0x3d	; 61
     aa8:	de b7       	in	r29, 0x3e	; 62
     aaa:	27 97       	sbiw	r28, 0x07	; 7
     aac:	0f b6       	in	r0, 0x3f	; 63
     aae:	f8 94       	cli
     ab0:	de bf       	out	0x3e, r29	; 62
     ab2:	0f be       	out	0x3f, r0	; 63
     ab4:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     ab6:	44 e3       	ldi	r20, 0x34	; 52
     ab8:	52 e1       	ldi	r21, 0x12	; 18
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 39 18 	call	0x3072	; 0x3072 <eeprom_write_dword>
	uint16_t score_position= high_score_position();
     ac6:	0e 94 c3 04 	call	0x986	; 0x986 <high_score_position>
     aca:	8c 01       	movw	r16, r24
		switch(score_position){
     acc:	80 38       	cpi	r24, 0x80	; 128
     ace:	91 05       	cpc	r25, r1
     ad0:	91 f0       	breq	.+36     	; 0xaf6 <handle_sequence_into_EEPFROM+0x58>
     ad2:	20 f4       	brcc	.+8      	; 0xadc <handle_sequence_into_EEPFROM+0x3e>
     ad4:	80 34       	cpi	r24, 0x40	; 64
     ad6:	91 05       	cpc	r25, r1
     ad8:	89 f0       	breq	.+34     	; 0xafc <handle_sequence_into_EEPFROM+0x5e>
     ada:	12 c0       	rjmp	.+36     	; 0xb00 <handle_sequence_into_EEPFROM+0x62>
     adc:	80 3c       	cpi	r24, 0xC0	; 192
     ade:	91 05       	cpc	r25, r1
     ae0:	39 f0       	breq	.+14     	; 0xaf0 <handle_sequence_into_EEPFROM+0x52>
     ae2:	01 15       	cp	r16, r1
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	18 07       	cpc	r17, r24
     ae8:	59 f4       	brne	.+22     	; 0xb00 <handle_sequence_into_EEPFROM+0x62>
			case NAME_FOUR: move_four_place_down(); break;
     aea:	0e 94 16 04 	call	0x82c	; 0x82c <move_four_place_down>
     aee:	08 c0       	rjmp	.+16     	; 0xb00 <handle_sequence_into_EEPFROM+0x62>
			case NAME_THREE: move_three_place_down(); break;
     af0:	0e 94 1b 04 	call	0x836	; 0x836 <move_three_place_down>
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <handle_sequence_into_EEPFROM+0x62>
			case NAME_TWO: move_two_place_down(); break;
     af6:	0e 94 22 04 	call	0x844	; 0x844 <move_two_place_down>
     afa:	02 c0       	rjmp	.+4      	; 0xb00 <handle_sequence_into_EEPFROM+0x62>
			case NAME_ONE: move_one_place_down(); break;
     afc:	0e 94 29 04 	call	0x852	; 0x852 <move_one_place_down>
		}
	struct High_Score_Place new_score; 
	new_score.name[0] = current_high_score_name[0];
     b00:	e4 e5       	ldi	r30, 0x54	; 84
     b02:	f2 e0       	ldi	r31, 0x02	; 2
     b04:	80 81       	ld	r24, Z
     b06:	89 83       	std	Y+1, r24	; 0x01
	new_score.name[1] = current_high_score_name[1];
     b08:	81 81       	ldd	r24, Z+1	; 0x01
     b0a:	8a 83       	std	Y+2, r24	; 0x02
	new_score.name[2] = current_high_score_name[2];
     b0c:	82 81       	ldd	r24, Z+2	; 0x02
     b0e:	8b 83       	std	Y+3, r24	; 0x03
	new_score.score = get_score();
     b10:	0e 94 97 0c 	call	0x192e	; 0x192e <get_score>
     b14:	6c 83       	std	Y+4, r22	; 0x04
     b16:	7d 83       	std	Y+5, r23	; 0x05
     b18:	8e 83       	std	Y+6, r24	; 0x06
     b1a:	9f 83       	std	Y+7, r25	; 0x07
	
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
     b1c:	47 e0       	ldi	r20, 0x07	; 7
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	b8 01       	movw	r22, r16
     b22:	ce 01       	movw	r24, r28
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	0e 94 21 18 	call	0x3042	; 0x3042 <eeprom_write_block>
		
	clear_terminal();
     b2a:	0e 94 44 11 	call	0x2288	; 0x2288 <clear_terminal>
}
     b2e:	27 96       	adiw	r28, 0x07	; 7
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	de bf       	out	0x3e, r29	; 62
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	cd bf       	out	0x3d, r28	; 61
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	0f 91       	pop	r16
     b42:	08 95       	ret

00000b44 <set_high_score_name>:
	if (score> current_score_place.score){
		return NAME_FIVE;
	}
}

void set_high_score_name(void){
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
	move_cursor(10,8);
     b50:	68 e0       	ldi	r22, 0x08	; 8
     b52:	8a e0       	ldi	r24, 0x0A	; 10
     b54:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     b58:	86 e4       	ldi	r24, 0x46	; 70
     b5a:	91 e0       	ldi	r25, 0x01	; 1
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f2 ec       	ldi	r31, 0xC2	; 194
     b70:	ef 2e       	mov	r14, r31
     b72:	f3 e0       	ldi	r31, 0x03	; 3
     b74:	ff 2e       	mov	r15, r31
     b76:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     b78:	0e 94 63 11 	call	0x22c6	; 0x22c6 <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     b7c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <serial_input_available>
     b80:	88 23       	and	r24, r24
     b82:	d1 f3       	breq	.-12     	; 0xb78 <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     b84:	f7 01       	movw	r30, r14
     b86:	80 81       	ld	r24, Z
     b88:	91 81       	ldd	r25, Z+1	; 0x01
     b8a:	0e 94 c1 14 	call	0x2982	; 0x2982 <fgetc>
     b8e:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     b90:	98 2f       	mov	r25, r24
     b92:	91 54       	subi	r25, 0x41	; 65
     b94:	9a 33       	cpi	r25, 0x3A	; 58
     b96:	98 f4       	brcc	.+38     	; 0xbbe <set_high_score_name+0x7a>
     b98:	03 30       	cpi	r16, 0x03	; 3
     b9a:	11 05       	cpc	r17, r1
     b9c:	84 f4       	brge	.+32     	; 0xbbe <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     b9e:	69 e0       	ldi	r22, 0x09	; 9
     ba0:	8a e0       	ldi	r24, 0x0A	; 10
     ba2:	80 0f       	add	r24, r16
     ba4:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     ba8:	f8 01       	movw	r30, r16
     baa:	ec 5a       	subi	r30, 0xAC	; 172
     bac:	fd 4f       	sbci	r31, 0xFD	; 253
     bae:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     bb0:	ce 01       	movw	r24, r28
     bb2:	99 27       	eor	r25, r25
     bb4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <putchar>
				score_name_pointer++;
     bb8:	0f 5f       	subi	r16, 0xFF	; 255
     bba:	1f 4f       	sbci	r17, 0xFF	; 255
     bbc:	dd cf       	rjmp	.-70     	; 0xb78 <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>1){
     bbe:	8a 30       	cpi	r24, 0x0A	; 10
     bc0:	21 f4       	brne	.+8      	; 0xbca <set_high_score_name+0x86>
     bc2:	02 30       	cpi	r16, 0x02	; 2
     bc4:	11 05       	cpc	r17, r1
     bc6:	c4 f2       	brlt	.-80     	; 0xb78 <set_high_score_name+0x34>
     bc8:	11 c0       	rjmp	.+34     	; 0xbec <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     bca:	8f 37       	cpi	r24, 0x7F	; 127
     bcc:	a9 f6       	brne	.-86     	; 0xb78 <set_high_score_name+0x34>
				printf("%c", ' ');
     bce:	80 e2       	ldi	r24, 0x20	; 32
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     bd6:	10 16       	cp	r1, r16
     bd8:	11 06       	cpc	r1, r17
     bda:	14 f4       	brge	.+4      	; 0xbe0 <set_high_score_name+0x9c>
     bdc:	01 50       	subi	r16, 0x01	; 1
     bde:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     be0:	69 e0       	ldi	r22, 0x09	; 9
     be2:	8a e0       	ldi	r24, 0x0A	; 10
     be4:	80 0f       	add	r24, r16
     be6:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
     bea:	c6 cf       	rjmp	.-116    	; 0xb78 <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     bec:	f9 99       	sbic	0x1f, 1	; 31
     bee:	fe cf       	rjmp	.-4      	; 0xbec <set_high_score_name+0xa8>
				handle_sequence_into_EEPFROM();
     bf0:	0e 94 4f 05 	call	0xa9e	; 0xa9e <handle_sequence_into_EEPFROM>
				current_high_score_name[0] = ' ';
     bf4:	e4 e5       	ldi	r30, 0x54	; 84
     bf6:	f2 e0       	ldi	r31, 0x02	; 2
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	80 83       	st	Z, r24
				current_high_score_name[1] = ' ';
     bfc:	81 83       	std	Z+1, r24	; 0x01
				current_high_score_name[2] = ' ';
     bfe:	82 83       	std	Z+2, r24	; 0x02
				break; 
			}
		}
	}
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	08 95       	ret

00000c0e <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	27 97       	sbiw	r28, 0x07	; 7
     c18:	0f b6       	in	r0, 0x3f	; 63
     c1a:	f8 94       	cli
     c1c:	de bf       	out	0x3e, r29	; 62
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	cd bf       	out	0x3d, r28	; 61
	move_cursor(10,11);
     c22:	6b e0       	ldi	r22, 0x0B	; 11
     c24:	8a e0       	ldi	r24, 0x0A	; 10
     c26:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     c2a:	8c e7       	ldi	r24, 0x7C	; 124
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	9f 93       	push	r25
     c30:	8f 93       	push	r24
     c32:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
	move_cursor(10,13);
     c36:	6d e0       	ldi	r22, 0x0D	; 13
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     c3e:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EEPROM_High_Score_has_been_initialised>
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	89 2b       	or	r24, r25
     c48:	09 f4       	brne	.+2      	; 0xc4c <display_EEPROM_high_score+0x3e>
     c4a:	b6 c0       	rjmp	.+364    	; 0xdb8 <display_EEPROM_high_score+0x1aa>
		struct High_Score_Place score_place_to_display; 
		eeprom_read_block(&score_place_to_display, NAME_ONE, 7);
     c4c:	47 e0       	ldi	r20, 0x07	; 7
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	60 e4       	ldi	r22, 0x40	; 64
     c52:	70 e0       	ldi	r23, 0x00	; 0
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
		printf("First: %c%c%c %d", score_place_to_display.name[0], 
     c5c:	8f 81       	ldd	r24, Y+7	; 0x07
     c5e:	8f 93       	push	r24
     c60:	8e 81       	ldd	r24, Y+6	; 0x06
     c62:	8f 93       	push	r24
     c64:	8d 81       	ldd	r24, Y+5	; 0x05
     c66:	8f 93       	push	r24
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	8f 93       	push	r24
     c6c:	8b 81       	ldd	r24, Y+3	; 0x03
     c6e:	1f 92       	push	r1
     c70:	8f 93       	push	r24
     c72:	8a 81       	ldd	r24, Y+2	; 0x02
     c74:	1f 92       	push	r1
     c76:	8f 93       	push	r24
     c78:	89 81       	ldd	r24, Y+1	; 0x01
     c7a:	1f 92       	push	r1
     c7c:	8f 93       	push	r24
     c7e:	8f e7       	ldi	r24, 0x7F	; 127
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	9f 93       	push	r25
     c84:	8f 93       	push	r24
     c86:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
									score_place_to_display.name[1], 
									score_place_to_display.name[2], 
									score_place_to_display.score);
		
		move_cursor(10,14);					
     c8a:	6e e0       	ldi	r22, 0x0E	; 14
     c8c:	8a e0       	ldi	r24, 0x0A	; 10
     c8e:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
		
		eeprom_read_block(&score_place_to_display, NAME_TWO, 7);
     c92:	47 e0       	ldi	r20, 0x07	; 7
     c94:	50 e0       	ldi	r21, 0x00	; 0
     c96:	60 e8       	ldi	r22, 0x80	; 128
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	ce 01       	movw	r24, r28
     c9c:	01 96       	adiw	r24, 0x01	; 1
     c9e:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
		printf("Second: %c%c%c %d", score_place_to_display.name[0],
     ca2:	8f 81       	ldd	r24, Y+7	; 0x07
     ca4:	8f 93       	push	r24
     ca6:	8e 81       	ldd	r24, Y+6	; 0x06
     ca8:	8f 93       	push	r24
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	8f 93       	push	r24
     cae:	8c 81       	ldd	r24, Y+4	; 0x04
     cb0:	8f 93       	push	r24
     cb2:	8b 81       	ldd	r24, Y+3	; 0x03
     cb4:	1f 92       	push	r1
     cb6:	8f 93       	push	r24
     cb8:	8a 81       	ldd	r24, Y+2	; 0x02
     cba:	1f 92       	push	r1
     cbc:	8f 93       	push	r24
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	1f 92       	push	r1
     cc2:	8f 93       	push	r24
     cc4:	80 e9       	ldi	r24, 0x90	; 144
     cc6:	91 e0       	ldi	r25, 0x01	; 1
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,15);
     cd0:	6f e0       	ldi	r22, 0x0F	; 15
     cd2:	8a e0       	ldi	r24, 0x0A	; 10
     cd4:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_THREE, 7);
     cd8:	47 e0       	ldi	r20, 0x07	; 7
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 ec       	ldi	r22, 0xC0	; 192
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
		printf("Third: %c%c%c %d", score_place_to_display.name[0],
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	8f 93       	push	r24
     cec:	8e 81       	ldd	r24, Y+6	; 0x06
     cee:	8f 93       	push	r24
     cf0:	8d 81       	ldd	r24, Y+5	; 0x05
     cf2:	8f 93       	push	r24
     cf4:	8c 81       	ldd	r24, Y+4	; 0x04
     cf6:	8f 93       	push	r24
     cf8:	8b 81       	ldd	r24, Y+3	; 0x03
     cfa:	1f 92       	push	r1
     cfc:	8f 93       	push	r24
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	1f 92       	push	r1
     d02:	8f 93       	push	r24
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	1f 92       	push	r1
     d08:	8f 93       	push	r24
     d0a:	82 ea       	ldi	r24, 0xA2	; 162
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,16);
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	de bf       	out	0x3e, r29	; 62
     d1c:	0f be       	out	0x3f, r0	; 63
     d1e:	cd bf       	out	0x3d, r28	; 61
     d20:	60 e1       	ldi	r22, 0x10	; 16
     d22:	8a e0       	ldi	r24, 0x0A	; 10
     d24:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FOUR, 7);
     d28:	47 e0       	ldi	r20, 0x07	; 7
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	60 e0       	ldi	r22, 0x00	; 0
     d2e:	71 e0       	ldi	r23, 0x01	; 1
     d30:	ce 01       	movw	r24, r28
     d32:	01 96       	adiw	r24, 0x01	; 1
     d34:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
		printf("Fourth: %c%c%c %d", score_place_to_display.name[0],
     d38:	8f 81       	ldd	r24, Y+7	; 0x07
     d3a:	8f 93       	push	r24
     d3c:	8e 81       	ldd	r24, Y+6	; 0x06
     d3e:	8f 93       	push	r24
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	8f 93       	push	r24
     d44:	8c 81       	ldd	r24, Y+4	; 0x04
     d46:	8f 93       	push	r24
     d48:	8b 81       	ldd	r24, Y+3	; 0x03
     d4a:	1f 92       	push	r1
     d4c:	8f 93       	push	r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	1f 92       	push	r1
     d52:	8f 93       	push	r24
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	1f 92       	push	r1
     d58:	8f 93       	push	r24
     d5a:	83 eb       	ldi	r24, 0xB3	; 179
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	9f 93       	push	r25
     d60:	8f 93       	push	r24
     d62:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,17);
     d66:	61 e1       	ldi	r22, 0x11	; 17
     d68:	8a e0       	ldi	r24, 0x0A	; 10
     d6a:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FIVE, 7);
     d6e:	47 e0       	ldi	r20, 0x07	; 7
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	60 e4       	ldi	r22, 0x40	; 64
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	ce 01       	movw	r24, r28
     d78:	01 96       	adiw	r24, 0x01	; 1
     d7a:	0e 94 03 18 	call	0x3006	; 0x3006 <eeprom_read_block>
		printf("Fifth: %c%c%c %d", score_place_to_display.name[0],
     d7e:	8f 81       	ldd	r24, Y+7	; 0x07
     d80:	8f 93       	push	r24
     d82:	8e 81       	ldd	r24, Y+6	; 0x06
     d84:	8f 93       	push	r24
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	8f 93       	push	r24
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	8f 93       	push	r24
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	1f 92       	push	r1
     d92:	8f 93       	push	r24
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	1f 92       	push	r1
     d98:	8f 93       	push	r24
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	1f 92       	push	r1
     d9e:	8f 93       	push	r24
     da0:	85 ec       	ldi	r24, 0xC5	; 197
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	9f 93       	push	r25
     da6:	8f 93       	push	r24
     da8:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
     dac:	0f b6       	in	r0, 0x3f	; 63
     dae:	f8 94       	cli
     db0:	de bf       	out	0x3e, r29	; 62
     db2:	0f be       	out	0x3f, r0	; 63
     db4:	cd bf       	out	0x3d, r28	; 61
     db6:	0a c0       	rjmp	.+20     	; 0xdcc <display_EEPROM_high_score+0x1be>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
	}
	else{
		initialise_EEPROM();
     db8:	0e 94 30 04 	call	0x860	; 0x860 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     dbc:	86 ed       	ldi	r24, 0xD6	; 214
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	9f 93       	push	r25
     dc2:	8f 93       	push	r24
     dc4:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
	}

}
     dcc:	27 96       	adiw	r28, 0x07	; 7
     dce:	0f b6       	in	r0, 0x3f	; 63
     dd0:	f8 94       	cli
     dd2:	de bf       	out	0x3e, r29	; 62
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	cd bf       	out	0x3d, r28	; 61
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     dde:	10 92 a0 02 	sts	0x02A0, r1	; 0x8002a0 <numFoodItems>
     de2:	08 95       	ret

00000de4 <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     de4:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <numFoodItems>
     de8:	13 16       	cp	r1, r19
     dea:	84 f4       	brge	.+32     	; 0xe0c <food_at+0x28>
        if(foodPositions[id] == posn) {
     dec:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <foodPositions>
     df0:	89 17       	cp	r24, r25
     df2:	71 f0       	breq	.+28     	; 0xe10 <food_at+0x2c>
     df4:	e2 ea       	ldi	r30, 0xA2	; 162
     df6:	f2 e0       	ldi	r31, 0x02	; 2
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <food_at+0x1e>
     dfc:	21 91       	ld	r18, Z+
     dfe:	28 17       	cp	r18, r24
     e00:	49 f0       	breq	.+18     	; 0xe14 <food_at+0x30>
     e02:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e04:	39 13       	cpse	r19, r25
     e06:	fa cf       	rjmp	.-12     	; 0xdfc <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     e08:	8f ef       	ldi	r24, 0xFF	; 255
     e0a:	08 95       	ret
     e0c:	8f ef       	ldi	r24, 0xFF	; 255
     e0e:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	08 95       	ret
     e14:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     e16:	08 95       	ret

00000e18 <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     e18:	0e 94 f2 06 	call	0xde4	; 0xde4 <food_at>
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	8f 3f       	cpi	r24, 0xFF	; 255
     e20:	09 f4       	brne	.+2      	; 0xe24 <is_food_at+0xc>
     e22:	90 e0       	ldi	r25, 0x00	; 0
}
     e24:	89 2f       	mov	r24, r25
     e26:	08 95       	ret

00000e28 <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     e28:	ff 92       	push	r15
     e2a:	0f 93       	push	r16
     e2c:	1f 93       	push	r17
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     e32:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <numFoodItems>
     e36:	88 30       	cpi	r24, 0x08	; 8
     e38:	0c f0       	brlt	.+2      	; 0xe3c <add_food_item+0x14>
     e3a:	44 c0       	rjmp	.+136    	; 0xec4 <add_food_item+0x9c>
     e3c:	00 e0       	ldi	r16, 0x00	; 0
     e3e:	10 e0       	ldi	r17, 0x00	; 0
     e40:	d0 e0       	ldi	r29, 0x00	; 0
     e42:	c0 e0       	ldi	r28, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <add_food_item+0x22>
     e46:	0f 5f       	subi	r16, 0xFF	; 255
     e48:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     e4a:	2c 2f       	mov	r18, r28
     e4c:	cc 0f       	add	r28, r28
     e4e:	33 0b       	sbc	r19, r19
     e50:	2d 5f       	subi	r18, 0xFD	; 253
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	20 0f       	add	r18, r16
     e56:	31 1f       	adc	r19, r17
     e58:	2f 70       	andi	r18, 0x0F	; 15
     e5a:	30 78       	andi	r19, 0x80	; 128
     e5c:	33 23       	and	r19, r19
     e5e:	34 f4       	brge	.+12     	; 0xe6c <add_food_item+0x44>
     e60:	21 50       	subi	r18, 0x01	; 1
     e62:	31 09       	sbc	r19, r1
     e64:	20 6f       	ori	r18, 0xF0	; 240
     e66:	3f 6f       	ori	r19, 0xFF	; 255
     e68:	2f 5f       	subi	r18, 0xFF	; 255
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	82 2f       	mov	r24, r18
     e6e:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     e70:	6d 2f       	mov	r22, r29
     e72:	dd 0f       	add	r29, r29
     e74:	77 0b       	sbc	r23, r23
     e76:	6b 5f       	subi	r22, 0xFB	; 251
     e78:	7f 4f       	sbci	r23, 0xFF	; 255
     e7a:	67 70       	andi	r22, 0x07	; 7
     e7c:	70 78       	andi	r23, 0x80	; 128
     e7e:	77 23       	and	r23, r23
     e80:	34 f4       	brge	.+12     	; 0xe8e <add_food_item+0x66>
     e82:	61 50       	subi	r22, 0x01	; 1
     e84:	71 09       	sbc	r23, r1
     e86:	68 6f       	ori	r22, 0xF8	; 248
     e88:	7f 6f       	ori	r23, 0xFF	; 255
     e8a:	6f 5f       	subi	r22, 0xFF	; 255
     e8c:	7f 4f       	sbci	r23, 0xFF	; 255
     e8e:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     e90:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
     e94:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     e96:	03 36       	cpi	r16, 0x63	; 99
     e98:	11 05       	cpc	r17, r1
     e9a:	b1 f0       	breq	.+44     	; 0xec8 <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     e9c:	0e 94 56 0f 	call	0x1eac	; 0x1eac <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     ea0:	81 11       	cpse	r24, r1
     ea2:	d1 cf       	rjmp	.-94     	; 0xe46 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     ea4:	8f 2d       	mov	r24, r15
     ea6:	0e 94 0c 07 	call	0xe18	; 0xe18 <is_food_at>
     eaa:	81 11       	cpse	r24, r1
     eac:	cc cf       	rjmp	.-104    	; 0xe46 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     eae:	8f 2d       	mov	r24, r15
     eb0:	0e 94 b4 10 	call	0x2168	; 0x2168 <is_superfood_at>
     eb4:	81 11       	cpse	r24, r1
     eb6:	c7 cf       	rjmp	.-114    	; 0xe46 <add_food_item+0x1e>
     eb8:	8f 2d       	mov	r24, r15
     eba:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <is_rat_at>
     ebe:	81 11       	cpse	r24, r1
     ec0:	c2 cf       	rjmp	.-124    	; 0xe46 <add_food_item+0x1e>
     ec2:	04 c0       	rjmp	.+8      	; 0xecc <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     ec4:	88 e0       	ldi	r24, 0x08	; 8
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     ec8:	88 e0       	ldi	r24, 0x08	; 8
     eca:	0d c0       	rjmp	.+26     	; 0xee6 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     ecc:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <numFoodItems>
	foodPositions[newFoodID] = test_position;
     ed0:	e8 2f       	mov	r30, r24
     ed2:	08 2e       	mov	r0, r24
     ed4:	00 0c       	add	r0, r0
     ed6:	ff 0b       	sbc	r31, r31
     ed8:	ef 55       	subi	r30, 0x5F	; 95
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	f0 82       	st	Z, r15
	numFoodItems++;
     ede:	8f 5f       	subi	r24, 0xFF	; 255
     ee0:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     ee4:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     ee6:	df 91       	pop	r29
     ee8:	cf 91       	pop	r28
     eea:	1f 91       	pop	r17
     eec:	0f 91       	pop	r16
     eee:	ff 90       	pop	r15
     ef0:	08 95       	ret

00000ef2 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     ef2:	e8 2f       	mov	r30, r24
     ef4:	88 0f       	add	r24, r24
     ef6:	ff 0b       	sbc	r31, r31
     ef8:	ef 55       	subi	r30, 0x5F	; 95
     efa:	fd 4f       	sbci	r31, 0xFD	; 253
}
     efc:	80 81       	ld	r24, Z
     efe:	08 95       	ret

00000f00 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     f00:	88 23       	and	r24, r24
     f02:	b4 f0       	brlt	.+44     	; 0xf30 <remove_food+0x30>
     f04:	20 91 a0 02 	lds	r18, 0x02A0	; 0x8002a0 <numFoodItems>
     f08:	82 17       	cp	r24, r18
     f0a:	94 f4       	brge	.+36     	; 0xf30 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f0c:	8f 5f       	subi	r24, 0xFF	; 255
     f0e:	82 17       	cp	r24, r18
     f10:	64 f4       	brge	.+24     	; 0xf2a <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     f12:	e8 2f       	mov	r30, r24
     f14:	08 2e       	mov	r0, r24
     f16:	00 0c       	add	r0, r0
     f18:	ff 0b       	sbc	r31, r31
     f1a:	ef 55       	subi	r30, 0x5F	; 95
     f1c:	fd 4f       	sbci	r31, 0xFD	; 253
     f1e:	90 81       	ld	r25, Z
     f20:	31 97       	sbiw	r30, 0x01	; 1
     f22:	90 83       	st	Z, r25
     f24:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f26:	82 17       	cp	r24, r18
     f28:	a4 f3       	brlt	.-24     	; 0xf12 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     f2a:	21 50       	subi	r18, 0x01	; 1
     f2c:	20 93 a0 02 	sts	0x02A0, r18	; 0x8002a0 <numFoodItems>
     f30:	08 95       	ret

00000f32 <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
     f32:	1f 93       	push	r17
     f34:	cf 93       	push	r28
     f36:	df 93       	push	r29
     f38:	c8 2f       	mov	r28, r24
     f3a:	16 2f       	mov	r17, r22
     f3c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
     f40:	d8 2f       	mov	r29, r24
     f42:	8c 2f       	mov	r24, r28
     f44:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
     f48:	41 2f       	mov	r20, r17
     f4a:	6d 2f       	mov	r22, r29
     f4c:	0e 94 20 09 	call	0x1240	; 0x1240 <ledmatrix_update_pixel>
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	08 95       	ret

00000f58 <init_game>:
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ledmatrix_clear>
     f60:	0e 94 8d 11 	call	0x231a	; 0x231a <init_score_on_terminal>
     f64:	88 e5       	ldi	r24, 0x58	; 88
     f66:	92 e0       	ldi	r25, 0x02	; 2
     f68:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <current_speed+0x1>
     f6c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <current_speed>
     f70:	0e 94 04 0c 	call	0x1808	; 0x1808 <add_new_rat_position>
     f74:	0e 94 0a 02 	call	0x414	; 0x414 <play_start_game_sound_effect>
     f78:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <init_snake>
     f7c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <get_snake_head_position>
     f80:	6f e0       	ldi	r22, 0x0F	; 15
     f82:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
     f86:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <get_snake_tail_position>
     f8a:	60 ef       	ldi	r22, 0xF0	; 240
     f8c:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
     f90:	0e 94 ef 06 	call	0xdde	; 0xdde <init_food>
     f94:	c3 e0       	ldi	r28, 0x03	; 3
     f96:	0e 94 14 07 	call	0xe28	; 0xe28 <add_food_item>
     f9a:	d8 2f       	mov	r29, r24
     f9c:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <is_position_valid>
     fa0:	88 23       	and	r24, r24
     fa2:	21 f0       	breq	.+8      	; 0xfac <init_game+0x54>
     fa4:	63 e3       	ldi	r22, 0x33	; 51
     fa6:	8d 2f       	mov	r24, r29
     fa8:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
     fac:	c1 50       	subi	r28, 0x01	; 1
     fae:	99 f7       	brne	.-26     	; 0xf96 <init_game+0x3e>
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <increase_game_speed>:
     fb6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <current_speed>
     fba:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <current_speed+0x1>
     fbe:	8b 3f       	cpi	r24, 0xFB	; 251
     fc0:	91 05       	cpc	r25, r1
     fc2:	a4 f0       	brlt	.+40     	; 0xfec <increase_game_speed+0x36>
     fc4:	60 91 2e 01 	lds	r22, 0x012E	; 0x80012e <current_speed>
     fc8:	70 91 2f 01 	lds	r23, 0x012F	; 0x80012f <current_speed+0x1>
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 87 12 	call	0x250e	; 0x250e <__floatunsisf>
     fd4:	26 e6       	ldi	r18, 0x66	; 102
     fd6:	36 e6       	ldi	r19, 0x66	; 102
     fd8:	46 e6       	ldi	r20, 0x66	; 102
     fda:	5f e3       	ldi	r21, 0x3F	; 63
     fdc:	0e 94 15 13 	call	0x262a	; 0x262a <__mulsf3>
     fe0:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__fixunssfsi>
     fe4:	70 93 2f 01 	sts	0x012F, r23	; 0x80012f <current_speed+0x1>
     fe8:	60 93 2e 01 	sts	0x012E, r22	; 0x80012e <current_speed>
     fec:	08 95       	ret

00000fee <attempt_to_move_snake_forward>:
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
     ff2:	cf 93       	push	r28
     ff4:	df 93       	push	r29
     ff6:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <get_snake_head_position>
     ffa:	d8 2f       	mov	r29, r24
     ffc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <advance_snake_head>
    1000:	c8 2f       	mov	r28, r24
    1002:	88 23       	and	r24, r24
    1004:	0c f4       	brge	.+2      	; 0x1008 <attempt_to_move_snake_forward+0x1a>
    1006:	55 c0       	rjmp	.+170    	; 0x10b2 <attempt_to_move_snake_forward+0xc4>
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 82 0c 	call	0x1904	; 0x1904 <add_to_score>
    1010:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <get_snake_head_position>
    1014:	18 2f       	mov	r17, r24
    1016:	8e ef       	ldi	r24, 0xFE	; 254
    1018:	8c 0f       	add	r24, r28
    101a:	82 30       	cpi	r24, 0x02	; 2
    101c:	c0 f4       	brcc	.+48     	; 0x104e <attempt_to_move_snake_forward+0x60>
    101e:	81 2f       	mov	r24, r17
    1020:	0e 94 f2 06 	call	0xde4	; 0xde4 <food_at>
    1024:	0e 94 80 07 	call	0xf00	; 0xf00 <remove_food>
    1028:	0e 94 18 02 	call	0x430	; 0x430 <play_eating_food_sound_effect>
    102c:	82 e0       	ldi	r24, 0x02	; 2
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 82 0c 	call	0x1904	; 0x1904 <add_to_score>
    1034:	0e 94 db 07 	call	0xfb6	; 0xfb6 <increase_game_speed>
    1038:	0e 94 14 07 	call	0xe28	; 0xe28 <add_food_item>
    103c:	08 2f       	mov	r16, r24
    103e:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <is_position_valid>
    1042:	88 23       	and	r24, r24
    1044:	21 f0       	breq	.+8      	; 0x104e <attempt_to_move_snake_forward+0x60>
    1046:	63 e3       	ldi	r22, 0x33	; 51
    1048:	80 2f       	mov	r24, r16
    104a:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
    104e:	8c ef       	ldi	r24, 0xFC	; 252
    1050:	8c 0f       	add	r24, r28
    1052:	82 30       	cpi	r24, 0x02	; 2
    1054:	50 f4       	brcc	.+20     	; 0x106a <attempt_to_move_snake_forward+0x7c>
    1056:	0e 94 a8 10 	call	0x2150	; 0x2150 <eat_superfood_from_board>
    105a:	89 e0       	ldi	r24, 0x09	; 9
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 82 0c 	call	0x1904	; 0x1904 <add_to_score>
    1062:	0e 94 db 07 	call	0xfb6	; 0xfb6 <increase_game_speed>
    1066:	0e 94 18 02 	call	0x430	; 0x430 <play_eating_food_sound_effect>
    106a:	8a ef       	ldi	r24, 0xFA	; 250
    106c:	8c 0f       	add	r24, r28
    106e:	82 30       	cpi	r24, 0x02	; 2
    1070:	50 f4       	brcc	.+20     	; 0x1086 <attempt_to_move_snake_forward+0x98>
    1072:	0e 94 04 0c 	call	0x1808	; 0x1808 <add_new_rat_position>
    1076:	84 e0       	ldi	r24, 0x04	; 4
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 82 0c 	call	0x1904	; 0x1904 <add_to_score>
    107e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <increase_game_speed>
    1082:	0e 94 18 02 	call	0x430	; 0x430 <play_eating_food_sound_effect>
    1086:	cd 7f       	andi	r28, 0xFD	; 253
    1088:	c1 30       	cpi	r28, 0x01	; 1
    108a:	11 f0       	breq	.+4      	; 0x1090 <attempt_to_move_snake_forward+0xa2>
    108c:	c5 30       	cpi	r28, 0x05	; 5
    108e:	29 f4       	brne	.+10     	; 0x109a <attempt_to_move_snake_forward+0xac>
    1090:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <advance_snake_tail>
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
    109a:	60 ef       	ldi	r22, 0xF0	; 240
    109c:	8d 2f       	mov	r24, r29
    109e:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
    10a2:	6f e0       	ldi	r22, 0x0F	; 15
    10a4:	81 2f       	mov	r24, r17
    10a6:	0e 94 99 07 	call	0xf32	; 0xf32 <update_display_at_position>
    10aa:	0e 94 a8 11 	call	0x2350	; 0x2350 <update_terminal_score>
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <attempt_to_move_snake_forward+0xc6>
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
    10b8:	1f 91       	pop	r17
    10ba:	0f 91       	pop	r16
    10bc:	08 95       	ret

000010be <get_current_game_speed>:
    10be:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <current_speed>
    10c2:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <current_speed+0x1>
    10c6:	08 95       	ret

000010c8 <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    10c8:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <current_speed+0x1>
    10cc:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <current_speed>
    10d0:	08 95       	ret

000010d2 <init_joystick>:
	uint16_t value;
	uint8_t x_or_y = 0;	/* 0 = x, 1 = y */

void init_joystick(void){
	/* Set up the serial port for stdin communication at 19200 baud, no echo */
	init_serial_stdio(19200,0);
    10d2:	40 e0       	ldi	r20, 0x00	; 0
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	7b e4       	ldi	r23, 0x4B	; 75
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <init_serial_stdio>
	
	/* Turn on global interrupts */
	sei();
    10e0:	78 94       	sei
	
	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
    10e2:	80 e4       	ldi	r24, 0x40	; 64
    10e4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    10e8:	86 e8       	ldi	r24, 0x86	; 134
    10ea:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	/* Print a welcome message
	*/
	printf("ADC Test\n");
    10ee:	88 ef       	ldi	r24, 0xF8	; 248
    10f0:	91 e0       	ldi	r25, 0x01	; 1
    10f2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <puts>
    10f6:	08 95       	ret

000010f8 <read_joystick>:
}

uint8_t read_joystick(void){
	 // Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	if(x_or_y == 0) {
    10f8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <x_or_y>
    10fc:	81 11       	cpse	r24, r1
    10fe:	06 c0       	rjmp	.+12     	; 0x110c <read_joystick+0x14>
		ADMUX &= ~1;
    1100:	ec e7       	ldi	r30, 0x7C	; 124
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8e 7f       	andi	r24, 0xFE	; 254
    1108:	80 83       	st	Z, r24
    110a:	05 c0       	rjmp	.+10     	; 0x1116 <read_joystick+0x1e>
		} else {
		ADMUX |= 1;
    110c:	ec e7       	ldi	r30, 0x7C	; 124
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	81 60       	ori	r24, 0x01	; 1
    1114:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    1116:	ea e7       	ldi	r30, 0x7A	; 122
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	80 64       	ori	r24, 0x40	; 64
    111e:	80 83       	st	Z, r24

	while(ADCSRA & (1<<ADSC)) {
    1120:	80 81       	ld	r24, Z
    1122:	86 fd       	sbrc	r24, 6
    1124:	fd cf       	rjmp	.-6      	; 0x1120 <read_joystick+0x28>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
    1126:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    112a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    112e:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <value+0x1>
    1132:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <value>
	if(x_or_y == 0) {
    1136:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <x_or_y>
    113a:	21 11       	cpse	r18, r1
    113c:	0d c0       	rjmp	.+26     	; 0x1158 <read_joystick+0x60>
		printf("X: %4d ", value);
    113e:	9f 93       	push	r25
    1140:	8f 93       	push	r24
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	92 e0       	ldi	r25, 0x02	; 2
    1146:	9f 93       	push	r25
    1148:	8f 93       	push	r24
    114a:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	0c c0       	rjmp	.+24     	; 0x1170 <read_joystick+0x78>
		} else {
		printf("Y: %4d\n", value);
    1158:	9f 93       	push	r25
    115a:	8f 93       	push	r24
    115c:	89 e0       	ldi	r24, 0x09	; 9
    115e:	92 e0       	ldi	r25, 0x02	; 2
    1160:	9f 93       	push	r25
    1162:	8f 93       	push	r24
    1164:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
    1168:	0f 90       	pop	r0
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
	}
	// Next time through the loop, do the other direction
	x_or_y ^= 1;
    1170:	90 91 57 02 	lds	r25, 0x0257	; 0x800257 <x_or_y>
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	89 27       	eor	r24, r25
    1178:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <x_or_y>
	return value; 
}
    117c:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <value>
    1180:	08 95       	ret

00001182 <get_joystick_direction>:

int8_t get_joystick_direction(void){
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
	int8_t y_axis, x_axis; 
	
	if (x_or_y){
    118a:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <x_or_y>
    118e:	88 23       	and	r24, r24
    1190:	79 f0       	breq	.+30     	; 0x11b0 <get_joystick_direction+0x2e>
		y_axis = read_joystick() - middle_value; 
    1192:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <read_joystick>
    1196:	00 e3       	ldi	r16, 0x30	; 48
    1198:	11 e0       	ldi	r17, 0x01	; 1
    119a:	f8 01       	movw	r30, r16
    119c:	90 81       	ld	r25, Z
    119e:	d8 2f       	mov	r29, r24
    11a0:	d9 1b       	sub	r29, r25
		x_axis = read_joystick()-middle_value; 
    11a2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <read_joystick>
    11a6:	f8 01       	movw	r30, r16
    11a8:	90 81       	ld	r25, Z
    11aa:	c8 2f       	mov	r28, r24
    11ac:	c9 1b       	sub	r28, r25
    11ae:	0e c0       	rjmp	.+28     	; 0x11cc <get_joystick_direction+0x4a>
	}else{
		x_axis =read_joystick() - middle_value;
    11b0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <read_joystick>
    11b4:	00 e3       	ldi	r16, 0x30	; 48
    11b6:	11 e0       	ldi	r17, 0x01	; 1
    11b8:	f8 01       	movw	r30, r16
    11ba:	90 81       	ld	r25, Z
    11bc:	c8 2f       	mov	r28, r24
    11be:	c9 1b       	sub	r28, r25
		y_axis = read_joystick() - middle_value; 			
    11c0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <read_joystick>
    11c4:	f8 01       	movw	r30, r16
    11c6:	90 81       	ld	r25, Z
    11c8:	d8 2f       	mov	r29, r24
    11ca:	d9 1b       	sub	r29, r25
		}
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
    11cc:	8d 2f       	mov	r24, r29
    11ce:	0d 2e       	mov	r0, r29
    11d0:	00 0c       	add	r0, r0
    11d2:	99 0b       	sbc	r25, r25
    11d4:	99 23       	and	r25, r25
    11d6:	1c f4       	brge	.+6      	; 0x11de <get_joystick_direction+0x5c>
    11d8:	91 95       	neg	r25
    11da:	81 95       	neg	r24
    11dc:	91 09       	sbc	r25, r1
    11de:	9c 01       	movw	r18, r24
    11e0:	8c 2f       	mov	r24, r28
    11e2:	0c 2e       	mov	r0, r28
    11e4:	00 0c       	add	r0, r0
    11e6:	99 0b       	sbc	r25, r25
    11e8:	99 23       	and	r25, r25
    11ea:	1c f4       	brge	.+6      	; 0x11f2 <get_joystick_direction+0x70>
    11ec:	91 95       	neg	r25
    11ee:	81 95       	neg	r24
    11f0:	91 09       	sbc	r25, r1
    11f2:	82 17       	cp	r24, r18
    11f4:	93 07       	cpc	r25, r19
    11f6:	5c f4       	brge	.+22     	; 0x120e <get_joystick_direction+0x8c>
    11f8:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <minimum_threshold>
    11fc:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <minimum_threshold+0x1>
    1200:	42 17       	cp	r20, r18
    1202:	53 07       	cpc	r21, r19
    1204:	20 f4       	brcc	.+8      	; 0x120e <get_joystick_direction+0x8c>
		if (y_axis >0){return SNAKE_UP;}
    1206:	1d 16       	cp	r1, r29
    1208:	6c f0       	brlt	.+26     	; 0x1224 <get_joystick_direction+0xa2>
			else{return SNAKE_DOWN;}
    120a:	82 e0       	ldi	r24, 0x02	; 2
    120c:	10 c0       	rjmp	.+32     	; 0x122e <get_joystick_direction+0xac>
	}else if(abs(x_axis) >minimum_threshold){
    120e:	20 91 32 01 	lds	r18, 0x0132	; 0x800132 <minimum_threshold>
    1212:	30 91 33 01 	lds	r19, 0x0133	; 0x800133 <minimum_threshold+0x1>
    1216:	28 17       	cp	r18, r24
    1218:	39 07       	cpc	r19, r25
    121a:	30 f4       	brcc	.+12     	; 0x1228 <get_joystick_direction+0xa6>
		if (x_axis >0){return SNAKE_RIGHT;}
    121c:	1c 16       	cp	r1, r28
    121e:	34 f0       	brlt	.+12     	; 0x122c <get_joystick_direction+0xaa>
			else{return SNAKE_LEFT;}
    1220:	83 e0       	ldi	r24, 0x03	; 3
    1222:	05 c0       	rjmp	.+10     	; 0x122e <get_joystick_direction+0xac>
		x_axis =read_joystick() - middle_value;
		y_axis = read_joystick() - middle_value; 			
		}
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
		if (y_axis >0){return SNAKE_UP;}
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	03 c0       	rjmp	.+6      	; 0x122e <get_joystick_direction+0xac>
	}else if(abs(x_axis) >minimum_threshold){
		if (x_axis >0){return SNAKE_RIGHT;}
			else{return SNAKE_LEFT;}
	
	}
	return -1; 
    1228:	8f ef       	ldi	r24, 0xFF	; 255
    122a:	01 c0       	rjmp	.+2      	; 0x122e <get_joystick_direction+0xac>
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
		if (y_axis >0){return SNAKE_UP;}
			else{return SNAKE_DOWN;}
	}else if(abs(x_axis) >minimum_threshold){
		if (x_axis >0){return SNAKE_RIGHT;}
    122c:	81 e0       	ldi	r24, 0x01	; 1
			else{return SNAKE_LEFT;}
	
	}
	return -1; 
} 
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1238:	80 e8       	ldi	r24, 0x80	; 128
    123a:	0e 94 33 10 	call	0x2066	; 0x2066 <spi_setup_master>
    123e:	08 95       	ret

00001240 <ledmatrix_update_pixel>:
    1240:	1f 93       	push	r17
    1242:	cf 93       	push	r28
    1244:	df 93       	push	r29
    1246:	80 31       	cpi	r24, 0x10	; 16
    1248:	b0 f4       	brcc	.+44     	; 0x1276 <ledmatrix_update_pixel+0x36>
    124a:	68 30       	cpi	r22, 0x08	; 8
    124c:	a0 f4       	brcc	.+40     	; 0x1276 <ledmatrix_update_pixel+0x36>
    124e:	14 2f       	mov	r17, r20
    1250:	c6 2f       	mov	r28, r22
    1252:	d8 2f       	mov	r29, r24
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    125a:	6c 2f       	mov	r22, r28
    125c:	67 70       	andi	r22, 0x07	; 7
    125e:	80 e1       	ldi	r24, 0x10	; 16
    1260:	68 9f       	mul	r22, r24
    1262:	90 01       	movw	r18, r0
    1264:	11 24       	eor	r1, r1
    1266:	8d 2f       	mov	r24, r29
    1268:	8f 70       	andi	r24, 0x0F	; 15
    126a:	82 2b       	or	r24, r18
    126c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    1270:	81 2f       	mov	r24, r17
    1272:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	08 95       	ret

0000127e <ledmatrix_update_column>:
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
    1286:	80 31       	cpi	r24, 0x10	; 16
    1288:	90 f4       	brcc	.+36     	; 0x12ae <ledmatrix_update_column+0x30>
    128a:	8b 01       	movw	r16, r22
    128c:	c8 2f       	mov	r28, r24
    128e:	83 e0       	ldi	r24, 0x03	; 3
    1290:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    1294:	8c 2f       	mov	r24, r28
    1296:	8f 70       	andi	r24, 0x0F	; 15
    1298:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    129c:	e8 01       	movw	r28, r16
    129e:	08 5f       	subi	r16, 0xF8	; 248
    12a0:	1f 4f       	sbci	r17, 0xFF	; 255
    12a2:	89 91       	ld	r24, Y+
    12a4:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    12a8:	c0 17       	cp	r28, r16
    12aa:	d1 07       	cpc	r29, r17
    12ac:	d1 f7       	brne	.-12     	; 0x12a2 <ledmatrix_update_column+0x24>
    12ae:	df 91       	pop	r29
    12b0:	cf 91       	pop	r28
    12b2:	1f 91       	pop	r17
    12b4:	0f 91       	pop	r16
    12b6:	08 95       	ret

000012b8 <ledmatrix_shift_display_left>:
    12b8:	84 e0       	ldi	r24, 0x04	; 4
    12ba:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    12c4:	08 95       	ret

000012c6 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    12c6:	8f e0       	ldi	r24, 0x0F	; 15
    12c8:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <spi_send_byte>
    12cc:	08 95       	ret

000012ce <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    12ce:	82 95       	swap	r24
    12d0:	8f 70       	andi	r24, 0x0F	; 15
    12d2:	08 95       	ret

000012d4 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    12d4:	8f 70       	andi	r24, 0x0F	; 15
    12d6:	08 95       	ret

000012d8 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    12d8:	83 fb       	bst	r24, 3
    12da:	88 27       	eor	r24, r24
    12dc:	80 f9       	bld	r24, 0
}
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	89 27       	eor	r24, r25
    12e2:	08 95       	ret

000012e4 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    12e4:	20 e1       	ldi	r18, 0x10	; 16
    12e6:	82 9f       	mul	r24, r18
    12e8:	c0 01       	movw	r24, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	67 70       	andi	r22, 0x07	; 7
}
    12ee:	86 2b       	or	r24, r22
    12f0:	08 95       	ret

000012f2 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    12f2:	0e 94 1c 09 	call	0x1238	; 0x1238 <ledmatrix_setup>
	init_joystick();
    12f6:	0e 94 69 08 	call	0x10d2	; 0x10d2 <init_joystick>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    12fa:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	7b e4       	ldi	r23, 0x4B	; 75
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    130c:	0e 94 c1 11 	call	0x2382	; 0x2382 <init_timer0>
	
	// Turn on global interrupts
	sei();
    1310:	78 94       	sei
    1312:	08 95       	ret

00001314 <splash_screen>:
}

void splash_screen(void) {
    1314:	ff 92       	push	r15
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    131e:	80 e0       	ldi	r24, 0x00	; 0
    1320:	0e 94 4d 11 	call	0x229a	; 0x229a <set_display_attribute>
	clear_terminal();
    1324:	0e 94 44 11 	call	0x2288	; 0x2288 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1328:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <hide_cursor>
	display_start_terminal_screen();
    132c:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1330:	0e 94 63 09 	call	0x12c6	; 0x12c6 <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    1334:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1336:	0f 2e       	mov	r0, r31
    1338:	ff e0       	ldi	r31, 0x0F	; 15
    133a:	ff 2e       	mov	r15, r31
    133c:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    133e:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1340:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1342:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    1344:	6c 2f       	mov	r22, r28
    1346:	81 e1       	ldi	r24, 0x11	; 17
    1348:	92 e0       	ldi	r25, 0x02	; 2
    134a:	0e 94 a9 0c 	call	0x1952	; 0x1952 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    134e:	0d c0       	rjmp	.+26     	; 0x136a <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1350:	2f e7       	ldi	r18, 0x7F	; 127
    1352:	8c e2       	ldi	r24, 0x2C	; 44
    1354:	93 e0       	ldi	r25, 0x03	; 3
    1356:	21 50       	subi	r18, 0x01	; 1
    1358:	80 40       	sbci	r24, 0x00	; 0
    135a:	90 40       	sbci	r25, 0x00	; 0
    135c:	e1 f7       	brne	.-8      	; 0x1356 <splash_screen+0x42>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <splash_screen+0x4c>
    1360:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    1362:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1366:	8f 3f       	cpi	r24, 0xFF	; 255
    1368:	a9 f5       	brne	.+106    	; 0x13d4 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    136a:	0e 94 b8 0c 	call	0x1970	; 0x1970 <scroll_display>
    136e:	81 11       	cpse	r24, r1
    1370:	ef cf       	rjmp	.-34     	; 0x1350 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    1372:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <random>
    1376:	dc 01       	movw	r26, r24
    1378:	cb 01       	movw	r24, r22
    137a:	83 70       	andi	r24, 0x03	; 3
    137c:	99 27       	eor	r25, r25
    137e:	aa 27       	eor	r26, r26
    1380:	b0 78       	andi	r27, 0x80	; 128
    1382:	bb 23       	and	r27, r27
    1384:	54 f4       	brge	.+20     	; 0x139a <splash_screen+0x86>
    1386:	01 97       	sbiw	r24, 0x01	; 1
    1388:	a1 09       	sbc	r26, r1
    138a:	b1 09       	sbc	r27, r1
    138c:	8c 6f       	ori	r24, 0xFC	; 252
    138e:	9f 6f       	ori	r25, 0xFF	; 255
    1390:	af 6f       	ori	r26, 0xFF	; 255
    1392:	bf 6f       	ori	r27, 0xFF	; 255
    1394:	01 96       	adiw	r24, 0x01	; 1
    1396:	a1 1d       	adc	r26, r1
    1398:	b1 1d       	adc	r27, r1
    139a:	81 30       	cpi	r24, 0x01	; 1
    139c:	91 05       	cpc	r25, r1
    139e:	a1 05       	cpc	r26, r1
    13a0:	b1 05       	cpc	r27, r1
    13a2:	91 f0       	breq	.+36     	; 0x13c8 <splash_screen+0xb4>
    13a4:	2c f4       	brge	.+10     	; 0x13b0 <splash_screen+0x9c>
    13a6:	89 2b       	or	r24, r25
    13a8:	8a 2b       	or	r24, r26
    13aa:	8b 2b       	or	r24, r27
    13ac:	59 f0       	breq	.+22     	; 0x13c4 <splash_screen+0xb0>
    13ae:	ca cf       	rjmp	.-108    	; 0x1344 <splash_screen+0x30>
    13b0:	82 30       	cpi	r24, 0x02	; 2
    13b2:	91 05       	cpc	r25, r1
    13b4:	a1 05       	cpc	r26, r1
    13b6:	b1 05       	cpc	r27, r1
    13b8:	49 f0       	breq	.+18     	; 0x13cc <splash_screen+0xb8>
    13ba:	03 97       	sbiw	r24, 0x03	; 3
    13bc:	a1 05       	cpc	r26, r1
    13be:	b1 05       	cpc	r27, r1
    13c0:	39 f0       	breq	.+14     	; 0x13d0 <splash_screen+0xbc>
    13c2:	c0 cf       	rjmp	.-128    	; 0x1344 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    13c4:	cd 2f       	mov	r28, r29
    13c6:	be cf       	rjmp	.-132    	; 0x1344 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    13c8:	cf 2d       	mov	r28, r15
    13ca:	bc cf       	rjmp	.-136    	; 0x1344 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    13cc:	c0 2f       	mov	r28, r16
    13ce:	ba cf       	rjmp	.-140    	; 0x1344 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    13d0:	c1 2f       	mov	r28, r17
    13d2:	b8 cf       	rjmp	.-144    	; 0x1344 <splash_screen+0x30>
		}
	}
}
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	08 95       	ret

000013e0 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    13e0:	0e 94 44 11 	call	0x2288	; 0x2288 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    13e4:	0e 94 ac 07 	call	0xf58	; 0xf58 <init_game>
		
	// Initialise the score
	init_score();
    13e8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    13ec:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    13f0:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <clear_serial_input_buffer>
    13f4:	08 95       	ret

000013f6 <play_game>:
}

void play_game(void) {
    13f6:	4f 92       	push	r4
    13f8:	5f 92       	push	r5
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    1414:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    1418:	4b 01       	movw	r8, r22
    141a:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    141c:	00 e0       	ldi	r16, 0x00	; 0
    141e:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1420:	0f 2e       	mov	r0, r31
    1422:	ff ed       	ldi	r31, 0xDF	; 223
    1424:	7f 2e       	mov	r7, r31
    1426:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1428:	0f 2e       	mov	r0, r31
    142a:	f2 ec       	ldi	r31, 0xC2	; 194
    142c:	4f 2e       	mov	r4, r31
    142e:	f3 e0       	ldi	r31, 0x03	; 3
    1430:	5f 2e       	mov	r5, r31
    1432:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
		if(time_to_add_superfood()){
    1434:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <time_to_add_superfood>
    1438:	81 11       	cpse	r24, r1
		add_superfood_to_board();}
    143a:	0e 94 c1 10 	call	0x2182	; 0x2182 <add_superfood_to_board>
		if(time_to_remove_superfood()){
    143e:	0e 94 80 10 	call	0x2100	; 0x2100 <time_to_remove_superfood>
    1442:	81 11       	cpse	r24, r1
		remove_superfood_from_board();}
    1444:	0e 94 90 10 	call	0x2120	; 0x2120 <remove_superfood_from_board>
		if(is_time_to_move_rat()){move_rat();}
    1448:	0e 94 67 0c 	call	0x18ce	; 0x18ce <is_time_to_move_rat>
    144c:	81 11       	cpse	r24, r1
    144e:	0e 94 87 0b 	call	0x170e	; 0x170e <move_rat>
		handle_buzzer_loop();
    1452:	0e 94 39 02 	call	0x472	; 0x472 <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    1456:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <timer_is_paused>
    145a:	89 2b       	or	r24, r25
    145c:	19 f0       	breq	.+6      	; 0x1464 <play_game+0x6e>
			button = -1;
			empty_button_queue();
    145e:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    1462:	06 c0       	rjmp	.+12     	; 0x1470 <play_game+0x7a>
			}else{
		button = button_pushed();}
    1464:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1468:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    146a:	8f 3f       	cpi	r24, 0xFF	; 255
    146c:	09 f0       	breq	.+2      	; 0x1470 <play_game+0x7a>
    146e:	9a c0       	rjmp	.+308    	; 0x15a4 <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    1470:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <serial_input_available>
    1474:	88 23       	and	r24, r24
    1476:	09 f4       	brne	.+2      	; 0x147a <play_game+0x84>
    1478:	a4 c0       	rjmp	.+328    	; 0x15c2 <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    147a:	f2 01       	movw	r30, r4
    147c:	80 81       	ld	r24, Z
    147e:	91 81       	ldd	r25, Z+1	; 0x01
    1480:	0e 94 c1 14 	call	0x2982	; 0x2982 <fgetc>
    1484:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1486:	01 11       	cpse	r16, r1
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <play_game+0x9a>
    148a:	8b 31       	cpi	r24, 0x1B	; 27
    148c:	51 f4       	brne	.+20     	; 0x14a2 <play_game+0xac>
    148e:	96 c0       	rjmp	.+300    	; 0x15bc <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1490:	01 30       	cpi	r16, 0x01	; 1
    1492:	19 f4       	brne	.+6      	; 0x149a <play_game+0xa4>
    1494:	8b 35       	cpi	r24, 0x5B	; 91
    1496:	29 f4       	brne	.+10     	; 0x14a2 <play_game+0xac>
    1498:	93 c0       	rjmp	.+294    	; 0x15c0 <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    149a:	02 30       	cpi	r16, 0x02	; 2
    149c:	09 f4       	brne	.+2      	; 0x14a0 <play_game+0xaa>
    149e:	88 c0       	rjmp	.+272    	; 0x15b0 <play_game+0x1ba>
    14a0:	7b c0       	rjmp	.+246    	; 0x1598 <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    14a2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <timer_is_paused>
    14a6:	89 2b       	or	r24, r25
    14a8:	09 f0       	breq	.+2      	; 0x14ac <play_game+0xb6>
    14aa:	3f c0       	rjmp	.+126    	; 0x152a <play_game+0x134>
    14ac:	08 c0       	rjmp	.+16     	; 0x14be <play_game+0xc8>
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    14ae:	d1 11       	cpse	r29, r1
    14b0:	09 c0       	rjmp	.+18     	; 0x14c4 <play_game+0xce>
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    14b4:	00 e0       	ldi	r16, 0x00	; 0
	if(!(timer_is_paused())){
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <set_snake_dirn>
    14bc:	50 c0       	rjmp	.+160    	; 0x155e <play_game+0x168>
    14be:	00 e0       	ldi	r16, 0x00	; 0
    14c0:	d1 2f       	mov	r29, r17
    14c2:	01 c0       	rjmp	.+2      	; 0x14c6 <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    14c4:	c1 2f       	mov	r28, r17
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    14c6:	d2 30       	cpi	r29, 0x02	; 2
    14c8:	19 f0       	breq	.+6      	; 0x14d0 <play_game+0xda>
    14ca:	81 2f       	mov	r24, r17
    14cc:	81 34       	cpi	r24, 0x41	; 65
    14ce:	21 f4       	brne	.+8      	; 0x14d8 <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    14d0:	80 e0       	ldi	r24, 0x00	; 0
    14d2:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <set_snake_dirn>
    14d6:	43 c0       	rjmp	.+134    	; 0x155e <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    14d8:	d3 30       	cpi	r29, 0x03	; 3
    14da:	11 f0       	breq	.+4      	; 0x14e0 <play_game+0xea>
    14dc:	84 34       	cpi	r24, 0x44	; 68
    14de:	21 f4       	brne	.+8      	; 0x14e8 <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <set_snake_dirn>
    14e6:	3b c0       	rjmp	.+118    	; 0x155e <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    14e8:	d1 30       	cpi	r29, 0x01	; 1
    14ea:	11 f0       	breq	.+4      	; 0x14f0 <play_game+0xfa>
    14ec:	82 34       	cpi	r24, 0x42	; 66
    14ee:	29 f4       	brne	.+10     	; 0x14fa <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    14f0:	82 e0       	ldi	r24, 0x02	; 2
    14f2:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <set_snake_dirn>
    14f6:	33 c0       	rjmp	.+102    	; 0x155e <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    14f8:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    14fa:	8c 2f       	mov	r24, r28
    14fc:	8f 7d       	andi	r24, 0xDF	; 223
    14fe:	80 35       	cpi	r24, 0x50	; 80
    1500:	19 f4       	brne	.+6      	; 0x1508 <play_game+0x112>
			toggle_timer_clock();
    1502:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <toggle_timer_clock>
    1506:	2b c0       	rjmp	.+86     	; 0x155e <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    1508:	c3 37       	cpi	r28, 0x73	; 115
    150a:	19 f4       	brne	.+6      	; 0x1512 <play_game+0x11c>
			save_game_to_EPPROM();
    150c:	0e 94 58 02 	call	0x4b0	; 0x4b0 <save_game_to_EPPROM>
    1510:	26 c0       	rjmp	.+76     	; 0x155e <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1512:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_has_saved_game>
    1516:	88 23       	and	r24, r24
    1518:	11 f1       	breq	.+68     	; 0x155e <play_game+0x168>
    151a:	8c 2f       	mov	r24, r28
    151c:	8f 7d       	andi	r24, 0xDF	; 223
    151e:	8f 34       	cpi	r24, 0x4F	; 79
    1520:	f1 f4       	brne	.+60     	; 0x155e <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <load_EEPROM_data_on_next_game>
 			break;
    1528:	62 c0       	rjmp	.+196    	; 0x15ee <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    152a:	8c 2f       	mov	r24, r28
    152c:	8f 7d       	andi	r24, 0xDF	; 223
    152e:	80 35       	cpi	r24, 0x50	; 80
    1530:	21 f4       	brne	.+8      	; 0x153a <play_game+0x144>
			toggle_timer_clock();
    1532:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <toggle_timer_clock>
    1536:	00 e0       	ldi	r16, 0x00	; 0
    1538:	12 c0       	rjmp	.+36     	; 0x155e <play_game+0x168>
    153a:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    153c:	83 35       	cpi	r24, 0x53	; 83
    153e:	19 f4       	brne	.+6      	; 0x1546 <play_game+0x150>
			save_game_to_EPPROM();
    1540:	0e 94 58 02 	call	0x4b0	; 0x4b0 <save_game_to_EPPROM>
    1544:	0c c0       	rjmp	.+24     	; 0x155e <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1546:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_has_saved_game>
    154a:	88 23       	and	r24, r24
    154c:	41 f0       	breq	.+16     	; 0x155e <play_game+0x168>
    154e:	8c 2f       	mov	r24, r28
    1550:	8f 7d       	andi	r24, 0xDF	; 223
    1552:	8f 34       	cpi	r24, 0x4F	; 79
    1554:	21 f4       	brne	.+8      	; 0x155e <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <load_EEPROM_data_on_next_game>
			break;
    155c:	48 c0       	rjmp	.+144    	; 0x15ee <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    155e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    1562:	6b 01       	movw	r12, r22
    1564:	7c 01       	movw	r14, r24
    1566:	0e 94 5f 08 	call	0x10be	; 0x10be <get_current_game_speed>
    156a:	09 2e       	mov	r0, r25
    156c:	00 0c       	add	r0, r0
    156e:	aa 0b       	sbc	r26, r26
    1570:	bb 0b       	sbc	r27, r27
    1572:	88 0d       	add	r24, r8
    1574:	99 1d       	adc	r25, r9
    1576:	aa 1d       	adc	r26, r10
    1578:	bb 1d       	adc	r27, r11
    157a:	c8 16       	cp	r12, r24
    157c:	d9 06       	cpc	r13, r25
    157e:	ea 06       	cpc	r14, r26
    1580:	fb 06       	cpc	r15, r27
    1582:	08 f4       	brcc	.+2      	; 0x1586 <play_game+0x190>
    1584:	57 cf       	rjmp	.-338    	; 0x1434 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    1586:	0e 94 f7 07 	call	0xfee	; 0xfee <attempt_to_move_snake_forward>
    158a:	88 23       	and	r24, r24
    158c:	81 f1       	breq	.+96     	; 0x15ee <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    158e:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    1592:	4b 01       	movw	r8, r22
    1594:	5c 01       	movw	r10, r24
    1596:	4e cf       	rjmp	.-356    	; 0x1434 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1598:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <timer_is_paused>
    159c:	89 2b       	or	r24, r25
    159e:	09 f4       	brne	.+2      	; 0x15a2 <play_game+0x1ac>
    15a0:	ab cf       	rjmp	.-170    	; 0x14f8 <play_game+0x102>
    15a2:	c3 cf       	rjmp	.-122    	; 0x152a <play_game+0x134>
    15a4:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <timer_is_paused>
    15a8:	89 2b       	or	r24, r25
    15aa:	09 f4       	brne	.+2      	; 0x15ae <play_game+0x1b8>
    15ac:	80 cf       	rjmp	.-256    	; 0x14ae <play_game+0xb8>
    15ae:	1c c0       	rjmp	.+56     	; 0x15e8 <play_game+0x1f2>
    15b0:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <timer_is_paused>
    15b4:	89 2b       	or	r24, r25
    15b6:	51 f0       	breq	.+20     	; 0x15cc <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15b8:	00 e0       	ldi	r16, 0x00	; 0
    15ba:	13 c0       	rjmp	.+38     	; 0x15e2 <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    15bc:	01 e0       	ldi	r16, 0x01	; 1
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    15c0:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    15c2:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <timer_is_paused>
    15c6:	89 2b       	or	r24, r25
    15c8:	61 f4       	brne	.+24     	; 0x15e2 <play_game+0x1ec>
    15ca:	08 c0       	rjmp	.+16     	; 0x15dc <play_game+0x1e6>
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15cc:	c3 34       	cpi	r28, 0x43	; 67
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <play_game+0x1dc>
    15d0:	71 cf       	rjmp	.-286    	; 0x14b4 <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    15d2:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15d4:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    15d6:	c1 2f       	mov	r28, r17
			}
		}
	if(!(timer_is_paused())){
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    15d8:	d1 2f       	mov	r29, r17
    15da:	78 cf       	rjmp	.-272    	; 0x14cc <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15dc:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_has_saved_game>
    15e0:	be cf       	rjmp	.-132    	; 0x155e <play_game+0x168>
    15e2:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    15e4:	87 2d       	mov	r24, r7
    15e6:	aa cf       	rjmp	.-172    	; 0x153c <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    15e8:	0e 94 4b 02 	call	0x496	; 0x496 <EEPROM_has_saved_game>
    15ec:	b8 cf       	rjmp	.-144    	; 0x155e <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    15ee:	df 91       	pop	r29
    15f0:	cf 91       	pop	r28
    15f2:	1f 91       	pop	r17
    15f4:	0f 91       	pop	r16
    15f6:	ff 90       	pop	r15
    15f8:	ef 90       	pop	r14
    15fa:	df 90       	pop	r13
    15fc:	cf 90       	pop	r12
    15fe:	bf 90       	pop	r11
    1600:	af 90       	pop	r10
    1602:	9f 90       	pop	r9
    1604:	8f 90       	pop	r8
    1606:	7f 90       	pop	r7
    1608:	5f 90       	pop	r5
    160a:	4f 90       	pop	r4
    160c:	08 95       	ret

0000160e <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    160e:	0e 94 44 11 	call	0x2288	; 0x2288 <clear_terminal>
	move_cursor(10,5);
    1612:	65 e0       	ldi	r22, 0x05	; 5
    1614:	8a e0       	ldi	r24, 0x0A	; 10
    1616:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    161a:	8c ea       	ldi	r24, 0xAC	; 172
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	9f 93       	push	r25
    1620:	8f 93       	push	r24
    1622:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
	move_cursor(10,7);
    1626:	67 e0       	ldi	r22, 0x07	; 7
    1628:	8a e0       	ldi	r24, 0x0A	; 10
    162a:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf("Score: %lu", get_score());
    162e:	0e 94 97 0c 	call	0x192e	; 0x192e <get_score>
    1632:	9f 93       	push	r25
    1634:	8f 93       	push	r24
    1636:	7f 93       	push	r23
    1638:	6f 93       	push	r22
    163a:	83 e2       	ldi	r24, 0x23	; 35
    163c:	92 e0       	ldi	r25, 0x02	; 2
    163e:	9f 93       	push	r25
    1640:	8f 93       	push	r24
    1642:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
	display_EEPROM_high_score();
    1646:	0e 94 07 06 	call	0xc0e	; 0xc0e <display_EEPROM_high_score>

	if (is_high_score()){
    164a:	0e 94 8a 04 	call	0x914	; 0x914 <is_high_score>
    164e:	2d b7       	in	r18, 0x3d	; 61
    1650:	3e b7       	in	r19, 0x3e	; 62
    1652:	28 5f       	subi	r18, 0xF8	; 248
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	3e bf       	out	0x3e, r19	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	2d bf       	out	0x3d, r18	; 61
    1660:	81 11       	cpse	r24, r1
		set_high_score_name();	
    1662:	0e 94 a2 05 	call	0xb44	; 0xb44 <set_high_score_name>
	}
	move_cursor(10,9);
    1666:	69 e0       	ldi	r22, 0x09	; 9
    1668:	8a e0       	ldi	r24, 0x0A	; 10
    166a:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    166e:	8e e8       	ldi	r24, 0x8E	; 142
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	9f 93       	push	r25
    1674:	8f 93       	push	r24
    1676:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
	display_EEPROM_high_score(); 
    167a:	0e 94 07 06 	call	0xc0e	; 0xc0e <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1686:	8f 3f       	cpi	r24, 0xFF	; 255
    1688:	e1 f3       	breq	.-8      	; 0x1682 <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    168a:	0e 94 44 11 	call	0x2288	; 0x2288 <clear_terminal>
    168e:	08 95       	ret

00001690 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    1690:	0e 94 79 09 	call	0x12f2	; 0x12f2 <initialise_hardware>
	DDRC = 0xff;
    1694:	8f ef       	ldi	r24, 0xFF	; 255
    1696:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<2);
    1698:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    169a:	53 98       	cbi	0x0a, 3	; 10
	initialise_timer_one();
    169c:	0e 94 3a 12 	call	0x2474	; 0x2474 <initialise_timer_one>

	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    16a0:	0e 94 8a 09 	call	0x1314	; 0x1314 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    16a4:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <load_EEPROM_data_on_next_game>
    16a8:	88 23       	and	r24, r24
    16aa:	19 f0       	breq	.+6      	; 0x16b2 <main+0x22>
    16ac:	0e 94 8e 03 	call	0x71c	; 0x71c <new_game_from_EEPROM>
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <main+0x26>
			else{new_game();}
    16b2:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <new_game>
		play_game();
    16b6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    16ba:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <load_EEPROM_data_on_next_game>
    16be:	81 11       	cpse	r24, r1
    16c0:	f1 cf       	rjmp	.-30     	; 0x16a4 <main+0x14>
    16c2:	0e 94 07 0b 	call	0x160e	; 0x160e <handle_game_over>
    16c6:	ee cf       	rjmp	.-36     	; 0x16a4 <main+0x14>

000016c8 <get_rat_position>:
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
		}
	return 0; 
}
    16c8:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    16cc:	08 95       	ret

000016ce <set_rat_at_pos>:
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	c8 2f       	mov	r28, r24
    16d4:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    16d8:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    16dc:	d8 2f       	mov	r29, r24
    16de:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    16e2:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	6d 2f       	mov	r22, r29
    16ea:	0e 94 20 09 	call	0x1240	; 0x1240 <ledmatrix_update_pixel>
    16ee:	c0 93 ab 02 	sts	0x02AB, r28	; 0x8002ab <rat_position>
    16f2:	8c 2f       	mov	r24, r28
    16f4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    16f8:	d8 2f       	mov	r29, r24
    16fa:	8c 2f       	mov	r24, r28
    16fc:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    1700:	43 e3       	ldi	r20, 0x33	; 51
    1702:	6d 2f       	mov	r22, r29
    1704:	0e 94 20 09 	call	0x1240	; 0x1240 <ledmatrix_update_pixel>
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <move_rat>:
    170e:	1f 93       	push	r17
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    171c:	18 2f       	mov	r17, r24
    171e:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
    1722:	83 70       	andi	r24, 0x03	; 3
    1724:	90 78       	andi	r25, 0x80	; 128
    1726:	99 23       	and	r25, r25
    1728:	24 f4       	brge	.+8      	; 0x1732 <move_rat+0x24>
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	8c 6f       	ori	r24, 0xFC	; 252
    172e:	9f 6f       	ori	r25, 0xFF	; 255
    1730:	01 96       	adiw	r24, 0x01	; 1
    1732:	c8 2f       	mov	r28, r24
    1734:	d0 e0       	ldi	r29, 0x00	; 0
    1736:	c1 30       	cpi	r28, 0x01	; 1
    1738:	a9 f0       	breq	.+42     	; 0x1764 <move_rat+0x56>
    173a:	28 f0       	brcs	.+10     	; 0x1746 <move_rat+0x38>
    173c:	c2 30       	cpi	r28, 0x02	; 2
    173e:	09 f1       	breq	.+66     	; 0x1782 <move_rat+0x74>
    1740:	c3 30       	cpi	r28, 0x03	; 3
    1742:	71 f1       	breq	.+92     	; 0x17a0 <move_rat+0x92>
    1744:	3b c0       	rjmp	.+118    	; 0x17bc <move_rat+0xae>
    1746:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    174a:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    174e:	18 2f       	mov	r17, r24
    1750:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    1754:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	61 0f       	add	r22, r17
    175c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    1760:	18 2f       	mov	r17, r24
    1762:	2c c0       	rjmp	.+88     	; 0x17bc <move_rat+0xae>
    1764:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    1768:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    176c:	18 2f       	mov	r17, r24
    176e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    1772:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    1776:	6f ef       	ldi	r22, 0xFF	; 255
    1778:	61 0f       	add	r22, r17
    177a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    177e:	18 2f       	mov	r17, r24
    1780:	1d c0       	rjmp	.+58     	; 0x17bc <move_rat+0xae>
    1782:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    1786:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    178a:	18 2f       	mov	r17, r24
    178c:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    1790:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    1794:	61 2f       	mov	r22, r17
    1796:	8f 5f       	subi	r24, 0xFF	; 255
    1798:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    179c:	18 2f       	mov	r17, r24
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <move_rat+0xae>
    17a0:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    17a4:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    17a8:	18 2f       	mov	r17, r24
    17aa:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    17ae:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    17b2:	61 2f       	mov	r22, r17
    17b4:	81 50       	subi	r24, 0x01	; 1
    17b6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    17ba:	18 2f       	mov	r17, r24
    17bc:	df 5f       	subi	r29, 0xFF	; 255
    17be:	8c 2f       	mov	r24, r28
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	01 96       	adiw	r24, 0x01	; 1
    17c4:	83 70       	andi	r24, 0x03	; 3
    17c6:	90 78       	andi	r25, 0x80	; 128
    17c8:	99 23       	and	r25, r25
    17ca:	24 f4       	brge	.+8      	; 0x17d4 <move_rat+0xc6>
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	8c 6f       	ori	r24, 0xFC	; 252
    17d0:	9f 6f       	ori	r25, 0xFF	; 255
    17d2:	01 96       	adiw	r24, 0x01	; 1
    17d4:	c8 2f       	mov	r28, r24
    17d6:	81 2f       	mov	r24, r17
    17d8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <is_snake_at>
    17dc:	88 23       	and	r24, r24
    17de:	21 f0       	breq	.+8      	; 0x17e8 <move_rat+0xda>
    17e0:	d4 30       	cpi	r29, 0x04	; 4
    17e2:	09 f0       	breq	.+2      	; 0x17e6 <move_rat+0xd8>
    17e4:	a8 cf       	rjmp	.-176    	; 0x1736 <move_rat+0x28>
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <move_rat+0xde>
    17e8:	d5 30       	cpi	r29, 0x05	; 5
    17ea:	18 f4       	brcc	.+6      	; 0x17f2 <move_rat+0xe4>
    17ec:	81 2f       	mov	r24, r17
    17ee:	0e 94 67 0b 	call	0x16ce	; 0x16ce <set_rat_at_pos>
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	08 95       	ret

000017fa <is_rat_at>:

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    17fa:	91 e0       	ldi	r25, 0x01	; 1
    17fc:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <rat_position>
    1800:	28 13       	cpse	r18, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
}
    1804:	89 2f       	mov	r24, r25
    1806:	08 95       	ret

00001808 <add_new_rat_position>:

void add_new_rat_position(void){
    1808:	1f 93       	push	r17
    180a:	cf 93       	push	r28
    180c:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    180e:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
    1812:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1814:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
        test_position = position(x,y);
    1818:	bc 01       	movw	r22, r24
    181a:	67 70       	andi	r22, 0x07	; 7
    181c:	70 78       	andi	r23, 0x80	; 128
    181e:	77 23       	and	r23, r23
    1820:	34 f4       	brge	.+12     	; 0x182e <add_new_rat_position+0x26>
    1822:	61 50       	subi	r22, 0x01	; 1
    1824:	71 09       	sbc	r23, r1
    1826:	68 6f       	ori	r22, 0xF8	; 248
    1828:	7f 6f       	ori	r23, 0xFF	; 255
    182a:	6f 5f       	subi	r22, 0xFF	; 255
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	ce 01       	movw	r24, r28
    1830:	8f 70       	andi	r24, 0x0F	; 15
    1832:	90 78       	andi	r25, 0x80	; 128
    1834:	99 23       	and	r25, r25
    1836:	24 f4       	brge	.+8      	; 0x1840 <add_new_rat_position+0x38>
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	80 6f       	ori	r24, 0xF0	; 240
    183c:	9f 6f       	ori	r25, 0xFF	; 255
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    1844:	c8 2f       	mov	r28, r24
    1846:	13 e6       	ldi	r17, 0x63	; 99
    1848:	1e c0       	rjmp	.+60     	; 0x1886 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    184a:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
    184e:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1850:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
        test_position = position(x,y);
    1854:	bc 01       	movw	r22, r24
    1856:	67 70       	andi	r22, 0x07	; 7
    1858:	70 78       	andi	r23, 0x80	; 128
    185a:	77 23       	and	r23, r23
    185c:	34 f4       	brge	.+12     	; 0x186a <add_new_rat_position+0x62>
    185e:	61 50       	subi	r22, 0x01	; 1
    1860:	71 09       	sbc	r23, r1
    1862:	68 6f       	ori	r22, 0xF8	; 248
    1864:	7f 6f       	ori	r23, 0xFF	; 255
    1866:	6f 5f       	subi	r22, 0xFF	; 255
    1868:	7f 4f       	sbci	r23, 0xFF	; 255
    186a:	ce 01       	movw	r24, r28
    186c:	8f 70       	andi	r24, 0x0F	; 15
    186e:	90 78       	andi	r25, 0x80	; 128
    1870:	99 23       	and	r25, r25
    1872:	24 f4       	brge	.+8      	; 0x187c <add_new_rat_position+0x74>
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	80 6f       	ori	r24, 0xF0	; 240
    1878:	9f 6f       	ori	r25, 0xFF	; 255
    187a:	01 96       	adiw	r24, 0x01	; 1
    187c:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    1880:	c8 2f       	mov	r28, r24
    1882:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1884:	91 f0       	breq	.+36     	; 0x18aa <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1886:	8c 2f       	mov	r24, r28
    1888:	0e 94 56 0f 	call	0x1eac	; 0x1eac <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    188c:	81 11       	cpse	r24, r1
    188e:	dd cf       	rjmp	.-70     	; 0x184a <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    1890:	8c 2f       	mov	r24, r28
    1892:	0e 94 0c 07 	call	0xe18	; 0xe18 <is_food_at>
    1896:	81 11       	cpse	r24, r1
    1898:	d8 cf       	rjmp	.-80     	; 0x184a <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    189a:	0e 94 b1 10 	call	0x2162	; 0x2162 <get_superfood_position>
    189e:	8c 17       	cp	r24, r28
    18a0:	a1 f2       	breq	.-88     	; 0x184a <add_new_rat_position+0x42>
    18a2:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    18a6:	8c 17       	cp	r24, r28
    18a8:	81 f2       	breq	.-96     	; 0x184a <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    18aa:	c0 93 ab 02 	sts	0x02AB, r28	; 0x8002ab <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_LIGHT_YELLOW);
    18ae:	8c 2f       	mov	r24, r28
    18b0:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    18b4:	c8 2f       	mov	r28, r24
    18b6:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <rat_position>
    18ba:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    18be:	43 e3       	ldi	r20, 0x33	; 51
    18c0:	6c 2f       	mov	r22, r28
    18c2:	0e 94 20 09 	call	0x1240	; 0x1240 <ledmatrix_update_pixel>
}
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	08 95       	ret

000018ce <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    18ce:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    18d2:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <RAT_WAIT_TIME>
    18d6:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <RAT_WAIT_TIME+0x1>
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	50 e0       	ldi	r21, 0x00	; 0
    18de:	0e 94 82 13 	call	0x2704	; 0x2704 <__udivmodsi4>
    18e2:	21 e0       	ldi	r18, 0x01	; 1
    18e4:	67 2b       	or	r22, r23
    18e6:	68 2b       	or	r22, r24
    18e8:	69 2b       	or	r22, r25
    18ea:	09 f0       	breq	.+2      	; 0x18ee <is_time_to_move_rat+0x20>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
}
    18ee:	82 2f       	mov	r24, r18
    18f0:	08 95       	ret

000018f2 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    18f2:	10 92 59 02 	sts	0x0259, r1	; 0x800259 <score>
    18f6:	10 92 5a 02 	sts	0x025A, r1	; 0x80025a <score+0x1>
    18fa:	10 92 5b 02 	sts	0x025B, r1	; 0x80025b <score+0x2>
    18fe:	10 92 5c 02 	sts	0x025C, r1	; 0x80025c <score+0x3>
    1902:	08 95       	ret

00001904 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1904:	40 91 59 02 	lds	r20, 0x0259	; 0x800259 <score>
    1908:	50 91 5a 02 	lds	r21, 0x025A	; 0x80025a <score+0x1>
    190c:	60 91 5b 02 	lds	r22, 0x025B	; 0x80025b <score+0x2>
    1910:	70 91 5c 02 	lds	r23, 0x025C	; 0x80025c <score+0x3>
    1914:	48 0f       	add	r20, r24
    1916:	59 1f       	adc	r21, r25
    1918:	61 1d       	adc	r22, r1
    191a:	71 1d       	adc	r23, r1
    191c:	40 93 59 02 	sts	0x0259, r20	; 0x800259 <score>
    1920:	50 93 5a 02 	sts	0x025A, r21	; 0x80025a <score+0x1>
    1924:	60 93 5b 02 	sts	0x025B, r22	; 0x80025b <score+0x2>
    1928:	70 93 5c 02 	sts	0x025C, r23	; 0x80025c <score+0x3>
    192c:	08 95       	ret

0000192e <get_score>:
}

uint32_t get_score(void) {
	return score;
    192e:	60 91 59 02 	lds	r22, 0x0259	; 0x800259 <score>
    1932:	70 91 5a 02 	lds	r23, 0x025A	; 0x80025a <score+0x1>
    1936:	80 91 5b 02 	lds	r24, 0x025B	; 0x80025b <score+0x2>
    193a:	90 91 5c 02 	lds	r25, 0x025C	; 0x80025c <score+0x3>
}
    193e:	08 95       	ret

00001940 <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    1940:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <score>
    1944:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <score+0x1>
    1948:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <score+0x2>
    194c:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <score+0x3>
    1950:	08 95       	ret

00001952 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1952:	60 93 36 01 	sts	0x0136, r22	; 0x800136 <colour>
	display_string = string_to_display;
    1956:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <display_string+0x1>
    195a:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <display_string>
	next_col_ptr = 0;
    195e:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <next_col_ptr+0x1>
    1962:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <next_col_ptr>
	next_char_to_display = 0;
    1966:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <next_char_to_display+0x1>
    196a:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <next_char_to_display>
    196e:	08 95       	ret

00001970 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1970:	0f 93       	push	r16
    1972:	1f 93       	push	r17
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	28 97       	sbiw	r28, 0x08	; 8
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1988:	e0 91 62 02 	lds	r30, 0x0262	; 0x800262 <next_col_ptr>
    198c:	f0 91 63 02 	lds	r31, 0x0263	; 0x800263 <next_col_ptr+0x1>
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	81 f0       	breq	.+32     	; 0x19b4 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1994:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1996:	10 ff       	sbrs	r17, 0
    1998:	06 c0       	rjmp	.+12     	; 0x19a6 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    199a:	10 92 63 02 	sts	0x0263, r1	; 0x800263 <next_col_ptr+0x1>
    199e:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19a2:	00 e0       	ldi	r16, 0x00	; 0
    19a4:	6b c0       	rjmp	.+214    	; 0x1a7c <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    19a6:	31 96       	adiw	r30, 0x01	; 1
    19a8:	f0 93 63 02 	sts	0x0263, r31	; 0x800263 <next_col_ptr+0x1>
    19ac:	e0 93 62 02 	sts	0x0262, r30	; 0x800262 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19b0:	00 e0       	ldi	r16, 0x00	; 0
    19b2:	64 c0       	rjmp	.+200    	; 0x1a7c <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    19b4:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <next_char_to_display>
    19b8:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <next_char_to_display+0x1>
    19bc:	30 97       	sbiw	r30, 0x00	; 0
    19be:	09 f4       	brne	.+2      	; 0x19c2 <scroll_display+0x52>
    19c0:	49 c0       	rjmp	.+146    	; 0x1a54 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    19c2:	cf 01       	movw	r24, r30
    19c4:	01 96       	adiw	r24, 0x01	; 1
    19c6:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <next_char_to_display+0x1>
    19ca:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <next_char_to_display>
    19ce:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    19d0:	e1 11       	cpse	r30, r1
    19d2:	0a c0       	rjmp	.+20     	; 0x19e8 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    19d4:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <next_char_to_display+0x1>
    19d8:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <next_char_to_display>
			shift_countdown = 16;
    19dc:	80 e1       	ldi	r24, 0x10	; 16
    19de:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19e2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19e4:	10 e0       	ldi	r17, 0x00	; 0
    19e6:	4a c0       	rjmp	.+148    	; 0x1a7c <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    19e8:	8f e9       	ldi	r24, 0x9F	; 159
    19ea:	8e 0f       	add	r24, r30
    19ec:	8a 31       	cpi	r24, 0x1A	; 26
    19ee:	70 f4       	brcc	.+28     	; 0x1a0c <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	e8 5f       	subi	r30, 0xF8	; 248
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	85 91       	lpm	r24, Z+
    19fc:	94 91       	lpm	r25, Z
    19fe:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <next_col_ptr+0x1>
    1a02:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a06:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a08:	10 e0       	ldi	r17, 0x00	; 0
    1a0a:	38 c0       	rjmp	.+112    	; 0x1a7c <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1a0c:	8f eb       	ldi	r24, 0xBF	; 191
    1a0e:	8e 0f       	add	r24, r30
    1a10:	8a 31       	cpi	r24, 0x1A	; 26
    1a12:	70 f4       	brcc	.+28     	; 0x1a30 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	e8 5b       	subi	r30, 0xB8	; 184
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	85 91       	lpm	r24, Z+
    1a20:	94 91       	lpm	r25, Z
    1a22:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <next_col_ptr+0x1>
    1a26:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a2a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a2c:	10 e0       	ldi	r17, 0x00	; 0
    1a2e:	26 c0       	rjmp	.+76     	; 0x1a7c <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1a30:	80 ed       	ldi	r24, 0xD0	; 208
    1a32:	8e 0f       	add	r24, r30
    1a34:	8a 30       	cpi	r24, 0x0A	; 10
    1a36:	00 f5       	brcc	.+64     	; 0x1a78 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	ee 0f       	add	r30, r30
    1a3c:	ff 1f       	adc	r31, r31
    1a3e:	ea 5a       	subi	r30, 0xAA	; 170
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	85 91       	lpm	r24, Z+
    1a44:	94 91       	lpm	r25, Z
    1a46:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <next_col_ptr+0x1>
    1a4a:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a4e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a50:	10 e0       	ldi	r17, 0x00	; 0
    1a52:	14 c0       	rjmp	.+40     	; 0x1a7c <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1a54:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <display_string>
    1a58:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a5c:	01 e0       	ldi	r16, 0x01	; 1
    1a5e:	00 97       	sbiw	r24, 0x00	; 0
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <scroll_display+0xf4>
    1a62:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1a64:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <next_char_to_display+0x1>
    1a68:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <next_char_to_display>
		display_string = 0;
    1a6c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <display_string+0x1>
    1a70:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a74:	10 e0       	ldi	r17, 0x00	; 0
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a78:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1a7c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1a80:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <colour>
    1a84:	fe 01       	movw	r30, r28
    1a86:	38 96       	adiw	r30, 0x08	; 8
    1a88:	ce 01       	movw	r24, r28
    1a8a:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1a8c:	11 23       	and	r17, r17
    1a8e:	14 f4       	brge	.+4      	; 0x1a94 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1a90:	20 83       	st	Z, r18
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1a94:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1a96:	11 0f       	add	r17, r17
    1a98:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1a9a:	e8 17       	cp	r30, r24
    1a9c:	f9 07       	cpc	r31, r25
    1a9e:	b1 f7       	brne	.-20     	; 0x1a8c <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1aa0:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1aa2:	be 01       	movw	r22, r28
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f e0       	ldi	r24, 0x0F	; 15
    1aaa:	0e 94 3f 09 	call	0x127e	; 0x127e <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1aae:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <shift_countdown.1854>
    1ab2:	88 23       	and	r24, r24
    1ab4:	89 f0       	breq	.+34     	; 0x1ad8 <scroll_display+0x168>
		shift_countdown--;
    1ab6:	81 50       	subi	r24, 0x01	; 1
    1ab8:	80 93 5d 02 	sts	0x025D, r24	; 0x80025d <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1abc:	00 23       	and	r16, r16
    1abe:	11 f0       	breq	.+4      	; 0x1ac4 <scroll_display+0x154>
    1ac0:	88 23       	and	r24, r24
    1ac2:	11 f0       	breq	.+4      	; 0x1ac8 <scroll_display+0x158>
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	03 c0       	rjmp	.+6      	; 0x1ace <scroll_display+0x15e>
    1ac8:	91 e0       	ldi	r25, 0x01	; 1
    1aca:	01 c0       	rjmp	.+2      	; 0x1ace <scroll_display+0x15e>
    1acc:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	99 23       	and	r25, r25
    1ad2:	29 f0       	breq	.+10     	; 0x1ade <scroll_display+0x16e>
    1ad4:	80 e0       	ldi	r24, 0x00	; 0
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1ad8:	00 23       	and	r16, r16
    1ada:	a1 f3       	breq	.-24     	; 0x1ac4 <scroll_display+0x154>
    1adc:	f7 cf       	rjmp	.-18     	; 0x1acc <scroll_display+0x15c>
	return !finished;
}
    1ade:	28 96       	adiw	r28, 0x08	; 8
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1af4:	cf 93       	push	r28
    1af6:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1af8:	8a 30       	cpi	r24, 0x0A	; 10
    1afa:	19 f4       	brne	.+6      	; 0x1b02 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1afc:	8d e0       	ldi	r24, 0x0D	; 13
    1afe:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1b02:	9f b7       	in	r25, 0x3f	; 63
    1b04:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1b08:	99 23       	and	r25, r25
    1b0a:	29 f1       	breq	.+74     	; 0x1b56 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1b0c:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1b10:	8f 3f       	cpi	r24, 0xFF	; 255
    1b12:	d1 f3       	breq	.-12     	; 0x1b08 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1b14:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1b16:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <out_insert_pos>
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	8e 0f       	add	r24, r30
    1b1e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <out_insert_pos>
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	e2 55       	subi	r30, 0x52	; 82
    1b26:	fd 4f       	sbci	r31, 0xFD	; 253
    1b28:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1b2a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1b2e:	8f 5f       	subi	r24, 0xFF	; 255
    1b30:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1b34:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <out_insert_pos>
    1b38:	8f 3f       	cpi	r24, 0xFF	; 255
    1b3a:	11 f4       	brne	.+4      	; 0x1b40 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1b3c:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1b40:	e1 ec       	ldi	r30, 0xC1	; 193
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	80 62       	ori	r24, 0x20	; 32
    1b48:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1b4a:	99 23       	and	r25, r25
    1b4c:	39 f0       	breq	.+14     	; 0x1b5c <uart_put_char+0x68>
		sei();
    1b4e:	78 94       	sei
	}
	return 0;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	05 c0       	rjmp	.+10     	; 0x1b60 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
}
    1b60:	cf 91       	pop	r28
    1b62:	08 95       	ret

00001b64 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1b64:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1b68:	88 23       	and	r24, r24
    1b6a:	e1 f3       	breq	.-8      	; 0x1b64 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1b6c:	2f b7       	in	r18, 0x3f	; 63
    1b6e:	20 78       	andi	r18, 0x80	; 128
	cli();
    1b70:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1b72:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <input_insert_pos>
    1b76:	30 91 bf 03 	lds	r19, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	83 1b       	sub	r24, r19
    1b7e:	91 09       	sbc	r25, r1
    1b80:	5a f4       	brpl	.+22     	; 0x1b98 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b82:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <input_insert_pos>
    1b86:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	e8 1b       	sub	r30, r24
    1b8e:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b90:	e2 54       	subi	r30, 0x42	; 66
    1b92:	fc 4f       	sbci	r31, 0xFC	; 252
    1b94:	80 81       	ld	r24, Z
    1b96:	0a c0       	rjmp	.+20     	; 0x1bac <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1b98:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <input_insert_pos>
    1b9c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	e8 1b       	sub	r30, r24
    1ba4:	f1 09       	sbc	r31, r1
    1ba6:	e2 55       	subi	r30, 0x52	; 82
    1ba8:	fc 4f       	sbci	r31, 0xFC	; 252
    1baa:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1bac:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1bb0:	91 50       	subi	r25, 0x01	; 1
    1bb2:	90 93 bf 03 	sts	0x03BF, r25	; 0x8003bf <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1bb6:	22 23       	and	r18, r18
    1bb8:	09 f0       	breq	.+2      	; 0x1bbc <uart_get_char+0x58>
		sei();
    1bba:	78 94       	sei
	}	
	return c;
}
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	08 95       	ret

00001bc0 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1bc0:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <out_insert_pos>
	bytes_in_out_buffer = 0;
    1bc4:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <bytes_in_out_buffer>
	input_insert_pos = 0;
    1bc8:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <input_insert_pos>
	bytes_in_input_buffer = 0;
    1bcc:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <bytes_in_input_buffer>
	input_overrun = 0;
    1bd0:	10 92 be 03 	sts	0x03BE, r1	; 0x8003be <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1bd4:	40 93 64 02 	sts	0x0264, r20	; 0x800264 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	88 0f       	add	r24, r24
    1bde:	99 1f       	adc	r25, r25
    1be0:	aa 1f       	adc	r26, r26
    1be2:	bb 1f       	adc	r27, r27
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	aa 1f       	adc	r26, r26
    1bea:	bb 1f       	adc	r27, r27
    1bec:	9c 01       	movw	r18, r24
    1bee:	ad 01       	movw	r20, r26
    1bf0:	22 0f       	add	r18, r18
    1bf2:	33 1f       	adc	r19, r19
    1bf4:	44 1f       	adc	r20, r20
    1bf6:	55 1f       	adc	r21, r21
    1bf8:	60 e0       	ldi	r22, 0x00	; 0
    1bfa:	72 e1       	ldi	r23, 0x12	; 18
    1bfc:	8a e7       	ldi	r24, 0x7A	; 122
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    1c04:	ba 01       	movw	r22, r20
    1c06:	a9 01       	movw	r20, r18
    1c08:	4f 5f       	subi	r20, 0xFF	; 255
    1c0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c0c:	6f 4f       	sbci	r22, 0xFF	; 255
    1c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c10:	db 01       	movw	r26, r22
    1c12:	ca 01       	movw	r24, r20
    1c14:	1a f4       	brpl	.+6      	; 0x1c1c <init_serial_stdio+0x5c>
    1c16:	01 96       	adiw	r24, 0x01	; 1
    1c18:	a1 1d       	adc	r26, r1
    1c1a:	b1 1d       	adc	r27, r1
    1c1c:	b5 95       	asr	r27
    1c1e:	a7 95       	ror	r26
    1c20:	97 95       	ror	r25
    1c22:	87 95       	ror	r24
    1c24:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1c26:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1c2a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1c2e:	e1 ec       	ldi	r30, 0xC1	; 193
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	88 e1       	ldi	r24, 0x18	; 24
    1c34:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1c36:	80 81       	ld	r24, Z
    1c38:	80 68       	ori	r24, 0x80	; 128
    1c3a:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1c3c:	e2 ec       	ldi	r30, 0xC2	; 194
    1c3e:	f3 e0       	ldi	r31, 0x03	; 3
    1c40:	87 e3       	ldi	r24, 0x37	; 55
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	93 83       	std	Z+3, r25	; 0x03
    1c46:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
    1c4c:	08 95       	ret

00001c4e <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1c4e:	90 91 bf 03 	lds	r25, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	91 11       	cpse	r25, r1
    1c56:	01 c0       	rjmp	.+2      	; 0x1c5a <serial_input_available+0xc>
    1c58:	80 e0       	ldi	r24, 0x00	; 0
}
    1c5a:	08 95       	ret

00001c5c <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1c5c:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <input_insert_pos>
	bytes_in_input_buffer = 0;
    1c60:	10 92 bf 03 	sts	0x03BF, r1	; 0x8003bf <bytes_in_input_buffer>
    1c64:	08 95       	ret

00001c66 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	2f 93       	push	r18
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	ef 93       	push	r30
    1c78:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1c7a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1c7e:	88 23       	and	r24, r24
    1c80:	29 f1       	breq	.+74     	; 0x1ccc <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1c82:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <out_insert_pos>
    1c86:	20 91 ad 02 	lds	r18, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	82 1b       	sub	r24, r18
    1c8e:	91 09       	sbc	r25, r1
    1c90:	5a f4       	brpl	.+22     	; 0x1ca8 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c92:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <out_insert_pos>
    1c96:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	e8 1b       	sub	r30, r24
    1c9e:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1ca0:	e3 55       	subi	r30, 0x53	; 83
    1ca2:	fc 4f       	sbci	r31, 0xFC	; 252
    1ca4:	90 81       	ld	r25, Z
    1ca6:	0a c0       	rjmp	.+20     	; 0x1cbc <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1ca8:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <out_insert_pos>
    1cac:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	e8 1b       	sub	r30, r24
    1cb4:	f1 09       	sbc	r31, r1
    1cb6:	e2 55       	subi	r30, 0x52	; 82
    1cb8:	fd 4f       	sbci	r31, 0xFD	; 253
    1cba:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1cbc:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1cc0:	81 50       	subi	r24, 0x01	; 1
    1cc2:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1cc6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1ccc:	e1 ec       	ldi	r30, 0xC1	; 193
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7d       	andi	r24, 0xDF	; 223
    1cd4:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	9f 91       	pop	r25
    1cdc:	8f 91       	pop	r24
    1cde:	2f 91       	pop	r18
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti

00001cea <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1cea:	1f 92       	push	r1
    1cec:	0f 92       	push	r0
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	0f 92       	push	r0
    1cf2:	11 24       	eor	r1, r1
    1cf4:	2f 93       	push	r18
    1cf6:	3f 93       	push	r19
    1cf8:	4f 93       	push	r20
    1cfa:	5f 93       	push	r21
    1cfc:	6f 93       	push	r22
    1cfe:	7f 93       	push	r23
    1d00:	8f 93       	push	r24
    1d02:	9f 93       	push	r25
    1d04:	af 93       	push	r26
    1d06:	bf 93       	push	r27
    1d08:	cf 93       	push	r28
    1d0a:	ef 93       	push	r30
    1d0c:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1d0e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1d12:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <do_echo>
    1d16:	88 23       	and	r24, r24
    1d18:	49 f0       	breq	.+18     	; 0x1d2c <__vector_20+0x42>
    1d1a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <bytes_in_out_buffer>
    1d1e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d20:	29 f0       	breq	.+10     	; 0x1d2c <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1d22:	60 e0       	ldi	r22, 0x00	; 0
    1d24:	70 e0       	ldi	r23, 0x00	; 0
    1d26:	8c 2f       	mov	r24, r28
    1d28:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1d2c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1d30:	80 31       	cpi	r24, 0x10	; 16
    1d32:	20 f0       	brcs	.+8      	; 0x1d3c <__vector_20+0x52>
		input_overrun = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	80 93 be 03 	sts	0x03BE, r24	; 0x8003be <input_overrun>
    1d3a:	18 c0       	rjmp	.+48     	; 0x1d6c <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1d3c:	cd 30       	cpi	r28, 0x0D	; 13
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <__vector_20+0x58>
			c = '\n';
    1d40:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1d42:	e0 91 ad 03 	lds	r30, 0x03AD	; 0x8003ad <input_insert_pos>
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	8e 0f       	add	r24, r30
    1d4a:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <input_insert_pos>
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	e2 55       	subi	r30, 0x52	; 82
    1d52:	fc 4f       	sbci	r31, 0xFC	; 252
    1d54:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1d56:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <bytes_in_input_buffer>
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1d60:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <input_insert_pos>
    1d64:	80 31       	cpi	r24, 0x10	; 16
    1d66:	11 f4       	brne	.+4      	; 0x1d6c <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1d68:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <input_insert_pos>
		}
	}
}
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	cf 91       	pop	r28
    1d72:	bf 91       	pop	r27
    1d74:	af 91       	pop	r26
    1d76:	9f 91       	pop	r25
    1d78:	8f 91       	pop	r24
    1d7a:	7f 91       	pop	r23
    1d7c:	6f 91       	pop	r22
    1d7e:	5f 91       	pop	r21
    1d80:	4f 91       	pop	r20
    1d82:	3f 91       	pop	r19
    1d84:	2f 91       	pop	r18
    1d86:	0f 90       	pop	r0
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	0f 90       	pop	r0
    1d8c:	1f 90       	pop	r1
    1d8e:	18 95       	reti

00001d90 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1d90:	0f 93       	push	r16
    1d92:	1f 93       	push	r17
    1d94:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1d96:	82 e0       	ldi	r24, 0x02	; 2
    1d98:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <snakeLength>
	snakeTailIndex = 0;
    1d9c:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <snakeTailIndex>
	snakeHeadIndex = 1;
    1da0:	c1 e0       	ldi	r28, 0x01	; 1
    1da2:	c0 93 68 02 	sts	0x0268, r28	; 0x800268 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1da6:	61 e0       	ldi	r22, 0x01	; 1
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    1dae:	0a e6       	ldi	r16, 0x6A	; 106
    1db0:	12 e0       	ldi	r17, 0x02	; 2
    1db2:	f8 01       	movw	r30, r16
    1db4:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1db6:	61 e0       	ldi	r22, 0x01	; 1
    1db8:	82 e0       	ldi	r24, 0x02	; 2
    1dba:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1dc2:	c0 93 66 02 	sts	0x0266, r28	; 0x800266 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1dc6:	c0 93 65 02 	sts	0x0265, r28	; 0x800265 <nextSnakeDirn>
}
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	08 95       	ret

00001dd2 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1dd2:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <snakeHeadIndex>
    1dd6:	0e 2e       	mov	r0, r30
    1dd8:	00 0c       	add	r0, r0
    1dda:	ff 0b       	sbc	r31, r31
    1ddc:	e6 59       	subi	r30, 0x96	; 150
    1dde:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1de0:	80 81       	ld	r24, Z
    1de2:	08 95       	ret

00001de4 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1de4:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <curSnakeDirn>
	nextSnakeDirn = dirn;
    1de8:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <nextSnakeDirn>
    1dec:	08 95       	ret

00001dee <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1dee:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <snakeTailIndex>
    1df2:	0e 2e       	mov	r0, r30
    1df4:	00 0c       	add	r0, r0
    1df6:	ff 0b       	sbc	r31, r31
    1df8:	e6 59       	subi	r30, 0x96	; 150
    1dfa:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1dfc:	80 81       	ld	r24, Z
    1dfe:	08 95       	ret

00001e00 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1e00:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <snakeLength>
    1e04:	08 95       	ret

00001e06 <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1e06:	e8 2f       	mov	r30, r24
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	e6 59       	subi	r30, 0x96	; 150
    1e0c:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1e0e:	80 81       	ld	r24, Z
    1e10:	08 95       	ret

00001e12 <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1e12:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <snakeLength>
    1e16:	08 95       	ret

00001e18 <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1e18:	e6 2f       	mov	r30, r22
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	e6 59       	subi	r30, 0x96	; 150
    1e1e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e20:	80 83       	st	Z, r24
    1e22:	08 95       	ret

00001e24 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1e24:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <snakeHeadIndex>
    1e28:	08 95       	ret

00001e2a <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1e2a:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <snakeTailIndex>
    1e2e:	08 95       	ret

00001e30 <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1e30:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <snakeHeadIndex>
    1e34:	08 95       	ret

00001e36 <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1e36:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <snakeTailIndex>
    1e3a:	08 95       	ret

00001e3c <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1e3c:	80 91 66 02 	lds	r24, 0x0266	; 0x800266 <curSnakeDirn>
    1e40:	08 95       	ret

00001e42 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1e42:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <snakeTailIndex>
    1e46:	e9 2f       	mov	r30, r25
    1e48:	09 2e       	mov	r0, r25
    1e4a:	00 0c       	add	r0, r0
    1e4c:	ff 0b       	sbc	r31, r31
    1e4e:	e6 59       	subi	r30, 0x96	; 150
    1e50:	fd 4f       	sbci	r31, 0xFD	; 253
    1e52:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1e54:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1e56:	91 32       	cpi	r25, 0x21	; 33
    1e58:	19 f0       	breq	.+6      	; 0x1e60 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1e5a:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <snakeTailIndex>
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1e60:	10 92 67 02 	sts	0x0267, r1	; 0x800267 <snakeTailIndex>
	}
	snakeLength--;
    1e64:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <snakeLength>
    1e68:	91 50       	subi	r25, 0x01	; 1
    1e6a:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <snakeLength>
	
	return prev_tail_position;
}
    1e6e:	08 95       	ret

00001e70 <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1e70:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <curSnakeDirn>
    1e74:	91 30       	cpi	r25, 0x01	; 1
    1e76:	a9 f0       	breq	.+42     	; 0x1ea2 <set_snake_dirn+0x32>
    1e78:	28 f0       	brcs	.+10     	; 0x1e84 <set_snake_dirn+0x14>
    1e7a:	92 30       	cpi	r25, 0x02	; 2
    1e7c:	41 f0       	breq	.+16     	; 0x1e8e <set_snake_dirn+0x1e>
    1e7e:	93 30       	cpi	r25, 0x03	; 3
    1e80:	59 f0       	breq	.+22     	; 0x1e98 <set_snake_dirn+0x28>
    1e82:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1e84:	82 30       	cpi	r24, 0x02	; 2
    1e86:	89 f0       	breq	.+34     	; 0x1eaa <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e88:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <nextSnakeDirn>
    1e8c:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1e8e:	88 23       	and	r24, r24
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e92:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <nextSnakeDirn>
    1e96:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	39 f0       	breq	.+14     	; 0x1eaa <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e9c:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <nextSnakeDirn>
    1ea0:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	11 f0       	breq	.+4      	; 0x1eaa <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1ea6:	80 93 65 02 	sts	0x0265, r24	; 0x800265 <nextSnakeDirn>
    1eaa:	08 95       	ret

00001eac <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1eac:	90 91 67 02 	lds	r25, 0x0267	; 0x800267 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1eb0:	30 91 68 02 	lds	r19, 0x0268	; 0x800268 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1eb6:	0d c0       	rjmp	.+26     	; 0x1ed2 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1eb8:	e9 2f       	mov	r30, r25
    1eba:	09 2e       	mov	r0, r25
    1ebc:	00 0c       	add	r0, r0
    1ebe:	ff 0b       	sbc	r31, r31
    1ec0:	e6 59       	subi	r30, 0x96	; 150
    1ec2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec4:	20 81       	ld	r18, Z
    1ec6:	28 17       	cp	r18, r24
    1ec8:	89 f0       	breq	.+34     	; 0x1eec <is_snake_at+0x40>
    1eca:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1ecc:	91 32       	cpi	r25, 0x21	; 33
    1ece:	0c f0       	brlt	.+2      	; 0x1ed2 <is_snake_at+0x26>
			index = 0;
    1ed0:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1ed2:	93 13       	cpse	r25, r19
    1ed4:	f1 cf       	rjmp	.-30     	; 0x1eb8 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1ed6:	e3 2f       	mov	r30, r19
    1ed8:	33 0f       	add	r19, r19
    1eda:	ff 0b       	sbc	r31, r31
    1edc:	e6 59       	subi	r30, 0x96	; 150
    1ede:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	20 81       	ld	r18, Z
    1ee4:	28 17       	cp	r18, r24
    1ee6:	19 f0       	breq	.+6      	; 0x1eee <is_snake_at+0x42>
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	01 c0       	rjmp	.+2      	; 0x1eee <is_snake_at+0x42>
    1eec:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1eee:	89 2f       	mov	r24, r25
    1ef0:	08 95       	ret

00001ef2 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1efa:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <snakeLength>
    1efe:	81 32       	cpi	r24, 0x21	; 33
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <advance_snake_head+0x12>
    1f02:	a1 c0       	rjmp	.+322    	; 0x2046 <advance_snake_head+0x154>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1f04:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <snakeHeadIndex>
    1f08:	0e 2e       	mov	r0, r30
    1f0a:	00 0c       	add	r0, r0
    1f0c:	ff 0b       	sbc	r31, r31
    1f0e:	e6 59       	subi	r30, 0x96	; 150
    1f10:	fd 4f       	sbci	r31, 0xFD	; 253
    1f12:	80 81       	ld	r24, Z
    1f14:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    1f18:	18 2f       	mov	r17, r24
    1f1a:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1f1c:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <snakeHeadIndex>
    1f20:	0e 2e       	mov	r0, r30
    1f22:	00 0c       	add	r0, r0
    1f24:	ff 0b       	sbc	r31, r31
    1f26:	e6 59       	subi	r30, 0x96	; 150
    1f28:	fd 4f       	sbci	r31, 0xFD	; 253
    1f2a:	80 81       	ld	r24, Z
    1f2c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    1f30:	08 2f       	mov	r16, r24
    1f32:	d8 2f       	mov	r29, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
	if (get_joystick_direction() !=-1){
    1f34:	0e 94 c1 08 	call	0x1182	; 0x1182 <get_joystick_direction>
    1f38:	8f 3f       	cpi	r24, 0xFF	; 255
    1f3a:	61 f0       	breq	.+24     	; 0x1f54 <advance_snake_head+0x62>
		printf(get_joystick_direction());
    1f3c:	0e 94 c1 08 	call	0x1182	; 0x1182 <get_joystick_direction>
    1f40:	28 2f       	mov	r18, r24
    1f42:	08 2e       	mov	r0, r24
    1f44:	00 0c       	add	r0, r0
    1f46:	33 0b       	sbc	r19, r19
    1f48:	3f 93       	push	r19
    1f4a:	8f 93       	push	r24
    1f4c:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
	}
    switch (nextSnakeDirn) {
    1f54:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <nextSnakeDirn>
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	59 f0       	breq	.+22     	; 0x1f72 <advance_snake_head+0x80>
    1f5c:	28 f0       	brcs	.+10     	; 0x1f68 <advance_snake_head+0x76>
    1f5e:	82 30       	cpi	r24, 0x02	; 2
    1f60:	69 f0       	breq	.+26     	; 0x1f7c <advance_snake_head+0x8a>
    1f62:	83 30       	cpi	r24, 0x03	; 3
    1f64:	81 f0       	breq	.+32     	; 0x1f86 <advance_snake_head+0x94>
    1f66:	1b c0       	rjmp	.+54     	; 0x1f9e <advance_snake_head+0xac>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1f68:	d7 30       	cpi	r29, 0x07	; 7
    1f6a:	91 f0       	breq	.+36     	; 0x1f90 <advance_snake_head+0x9e>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    1f6c:	d1 e0       	ldi	r29, 0x01	; 1
    1f6e:	d0 0f       	add	r29, r16
    1f70:	16 c0       	rjmp	.+44     	; 0x1f9e <advance_snake_head+0xac>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1f72:	cf 30       	cpi	r28, 0x0F	; 15
    1f74:	79 f0       	breq	.+30     	; 0x1f94 <advance_snake_head+0xa2>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1f76:	c1 e0       	ldi	r28, 0x01	; 1
    1f78:	c1 0f       	add	r28, r17
    1f7a:	11 c0       	rjmp	.+34     	; 0x1f9e <advance_snake_head+0xac>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    1f7c:	dd 23       	and	r29, r29
    1f7e:	61 f0       	breq	.+24     	; 0x1f98 <advance_snake_head+0xa6>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    1f80:	df ef       	ldi	r29, 0xFF	; 255
    1f82:	d0 0f       	add	r29, r16
    1f84:	0c c0       	rjmp	.+24     	; 0x1f9e <advance_snake_head+0xac>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    1f86:	cc 23       	and	r28, r28
    1f88:	49 f0       	breq	.+18     	; 0x1f9c <advance_snake_head+0xaa>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    1f8a:	cf ef       	ldi	r28, 0xFF	; 255
    1f8c:	c1 0f       	add	r28, r17
    1f8e:	07 c0       	rjmp	.+14     	; 0x1f9e <advance_snake_head+0xac>
	}
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1f90:	d0 e0       	ldi	r29, 0x00	; 0
    1f92:	05 c0       	rjmp	.+10     	; 0x1f9e <advance_snake_head+0xac>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1f94:	c0 e0       	ldi	r28, 0x00	; 0
    1f96:	03 c0       	rjmp	.+6      	; 0x1f9e <advance_snake_head+0xac>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    1f98:	d7 e0       	ldi	r29, 0x07	; 7
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <advance_snake_head+0xac>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    1f9c:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    1f9e:	6d 2f       	mov	r22, r29
    1fa0:	8c 2f       	mov	r24, r28
    1fa2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    1fa6:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    1fa8:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <nextSnakeDirn>
    1fac:	90 91 66 02 	lds	r25, 0x0266	; 0x800266 <curSnakeDirn>
    1fb0:	98 13       	cpse	r25, r24
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1fb2:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <curSnakeDirn>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1fb6:	8c 2f       	mov	r24, r28
    1fb8:	0e 94 56 0f 	call	0x1eac	; 0x1eac <is_snake_at>
    1fbc:	88 23       	and	r24, r24
    1fbe:	51 f0       	breq	.+20     	; 0x1fd4 <advance_snake_head+0xe2>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1fc0:	e0 91 67 02 	lds	r30, 0x0267	; 0x800267 <snakeTailIndex>
    1fc4:	0e 2e       	mov	r0, r30
    1fc6:	00 0c       	add	r0, r0
    1fc8:	ff 0b       	sbc	r31, r31
    1fca:	e6 59       	subi	r30, 0x96	; 150
    1fcc:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1fce:	80 81       	ld	r24, Z
    1fd0:	c8 13       	cpse	r28, r24
    1fd2:	3b c0       	rjmp	.+118    	; 0x204a <advance_snake_head+0x158>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1fd4:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <snakeHeadIndex>
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1fda:	81 32       	cpi	r24, 0x21	; 33
    1fdc:	19 f0       	breq	.+6      	; 0x1fe4 <advance_snake_head+0xf2>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1fde:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <snakeHeadIndex>
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <advance_snake_head+0xf6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1fe4:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1fe8:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <snakeHeadIndex>
    1fec:	0e 2e       	mov	r0, r30
    1fee:	00 0c       	add	r0, r0
    1ff0:	ff 0b       	sbc	r31, r31
    1ff2:	e6 59       	subi	r30, 0x96	; 150
    1ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff6:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1ff8:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <snakeLength>
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    2002:	8c 2f       	mov	r24, r28
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <is_rat_at>
    200a:	89 2b       	or	r24, r25
    200c:	31 f0       	breq	.+12     	; 0x201a <advance_snake_head+0x128>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    200e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <snakeLength>
    2012:	81 32       	cpi	r24, 0x21	; 33
    2014:	e0 f0       	brcs	.+56     	; 0x204e <advance_snake_head+0x15c>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    2016:	87 e0       	ldi	r24, 0x07	; 7
    2018:	21 c0       	rjmp	.+66     	; 0x205c <advance_snake_head+0x16a>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    201a:	8c 2f       	mov	r24, r28
    201c:	0e 94 b4 10 	call	0x2168	; 0x2168 <is_superfood_at>
    2020:	88 23       	and	r24, r24
    2022:	31 f0       	breq	.+12     	; 0x2030 <advance_snake_head+0x13e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    2024:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <snakeLength>
    2028:	81 32       	cpi	r24, 0x21	; 33
    202a:	98 f0       	brcs	.+38     	; 0x2052 <advance_snake_head+0x160>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    202c:	85 e0       	ldi	r24, 0x05	; 5
    202e:	16 c0       	rjmp	.+44     	; 0x205c <advance_snake_head+0x16a>
		}
	}
	if(is_food_at(newHeadPosn)) {
    2030:	8c 2f       	mov	r24, r28
    2032:	0e 94 0c 07 	call	0xe18	; 0xe18 <is_food_at>
    2036:	88 23       	and	r24, r24
    2038:	71 f0       	breq	.+28     	; 0x2056 <advance_snake_head+0x164>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    203a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <snakeLength>
    203e:	81 32       	cpi	r24, 0x21	; 33
    2040:	60 f0       	brcs	.+24     	; 0x205a <advance_snake_head+0x168>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	0b c0       	rjmp	.+22     	; 0x205c <advance_snake_head+0x16a>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    2046:	8d ef       	ldi	r24, 0xFD	; 253
    2048:	09 c0       	rjmp	.+18     	; 0x205c <advance_snake_head+0x16a>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    204a:	8e ef       	ldi	r24, 0xFE	; 254
    204c:	07 c0       	rjmp	.+14     	; 0x205c <advance_snake_head+0x16a>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    204e:	86 e0       	ldi	r24, 0x06	; 6
    2050:	05 c0       	rjmp	.+10     	; 0x205c <advance_snake_head+0x16a>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    2052:	84 e0       	ldi	r24, 0x04	; 4
    2054:	03 c0       	rjmp	.+6      	; 0x205c <advance_snake_head+0x16a>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	01 c0       	rjmp	.+2      	; 0x205c <advance_snake_head+0x16a>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    205a:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    205c:	df 91       	pop	r29
    205e:	cf 91       	pop	r28
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	08 95       	ret

00002066 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2066:	94 b1       	in	r25, 0x04	; 4
    2068:	90 6b       	ori	r25, 0xB0	; 176
    206a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    206c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    206e:	90 e5       	ldi	r25, 0x50	; 80
    2070:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2072:	88 30       	cpi	r24, 0x08	; 8
    2074:	21 f0       	breq	.+8      	; 0x207e <spi_setup_master+0x18>
    2076:	80 32       	cpi	r24, 0x20	; 32
    2078:	11 f0       	breq	.+4      	; 0x207e <spi_setup_master+0x18>
    207a:	82 30       	cpi	r24, 0x02	; 2
    207c:	19 f4       	brne	.+6      	; 0x2084 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    207e:	91 e0       	ldi	r25, 0x01	; 1
    2080:	9d bd       	out	0x2d, r25	; 45
			break;
    2082:	01 c0       	rjmp	.+2      	; 0x2086 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2084:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2086:	80 32       	cpi	r24, 0x20	; 32
    2088:	69 f0       	breq	.+26     	; 0x20a4 <spi_setup_master+0x3e>
    208a:	28 f4       	brcc	.+10     	; 0x2096 <spi_setup_master+0x30>
    208c:	88 30       	cpi	r24, 0x08	; 8
    208e:	71 f0       	breq	.+28     	; 0x20ac <spi_setup_master+0x46>
    2090:	80 31       	cpi	r24, 0x10	; 16
    2092:	61 f0       	breq	.+24     	; 0x20ac <spi_setup_master+0x46>
    2094:	0e c0       	rjmp	.+28     	; 0x20b2 <spi_setup_master+0x4c>
    2096:	80 34       	cpi	r24, 0x40	; 64
    2098:	29 f0       	breq	.+10     	; 0x20a4 <spi_setup_master+0x3e>
    209a:	80 38       	cpi	r24, 0x80	; 128
    209c:	51 f4       	brne	.+20     	; 0x20b2 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    209e:	8c b5       	in	r24, 0x2c	; 44
    20a0:	81 60       	ori	r24, 0x01	; 1
    20a2:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    20a4:	8c b5       	in	r24, 0x2c	; 44
    20a6:	82 60       	ori	r24, 0x02	; 2
    20a8:	8c bd       	out	0x2c, r24	; 44
			break;
    20aa:	03 c0       	rjmp	.+6      	; 0x20b2 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    20ac:	8c b5       	in	r24, 0x2c	; 44
    20ae:	81 60       	ori	r24, 0x01	; 1
    20b0:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    20b2:	2c 98       	cbi	0x05, 4	; 5
    20b4:	08 95       	ret

000020b6 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    20b6:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    20b8:	0d b4       	in	r0, 0x2d	; 45
    20ba:	07 fe       	sbrs	r0, 7
    20bc:	fd cf       	rjmp	.-6      	; 0x20b8 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    20be:	8e b5       	in	r24, 0x2e	; 46
    20c0:	08 95       	ret

000020c2 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    20c2:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <superfood_position>
	superfood_on_board = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <superfood_on_board>
}
    20cc:	08 95       	ret

000020ce <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    20ce:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <superfood_on_board>
    20d2:	08 95       	ret

000020d4 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    20d4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    20d8:	68 59       	subi	r22, 0x98	; 152
    20da:	7a 43       	sbci	r23, 0x3A	; 58
    20dc:	81 09       	sbc	r24, r1
    20de:	91 09       	sbc	r25, r1
    20e0:	20 e2       	ldi	r18, 0x20	; 32
    20e2:	3e e4       	ldi	r19, 0x4E	; 78
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	0e 94 82 13 	call	0x2704	; 0x2704 <__udivmodsi4>
    20ec:	67 2b       	or	r22, r23
    20ee:	68 2b       	or	r22, r24
    20f0:	69 2b       	or	r22, r25
    20f2:	21 f4       	brne	.+8      	; 0x20fc <time_to_add_superfood+0x28>
    20f4:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	08 95       	ret
    20fc:	80 e0       	ldi	r24, 0x00	; 0
}
    20fe:	08 95       	ret

00002100 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    2100:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <get_clock_ticks>
    2104:	20 e2       	ldi	r18, 0x20	; 32
    2106:	3e e4       	ldi	r19, 0x4E	; 78
    2108:	40 e0       	ldi	r20, 0x00	; 0
    210a:	50 e0       	ldi	r21, 0x00	; 0
    210c:	0e 94 82 13 	call	0x2704	; 0x2704 <__udivmodsi4>
    2110:	21 e0       	ldi	r18, 0x01	; 1
    2112:	67 2b       	or	r22, r23
    2114:	68 2b       	or	r22, r24
    2116:	69 2b       	or	r22, r25
    2118:	09 f0       	breq	.+2      	; 0x211c <time_to_remove_superfood+0x1c>
    211a:	20 e0       	ldi	r18, 0x00	; 0
}
    211c:	82 2f       	mov	r24, r18
    211e:	08 95       	ret

00002120 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    2120:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    2122:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <superfood_position>
    2126:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    212a:	c8 2f       	mov	r28, r24
    212c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <superfood_position>
    2130:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    2134:	40 e0       	ldi	r20, 0x00	; 0
    2136:	6c 2f       	mov	r22, r28
    2138:	0e 94 20 09 	call	0x1240	; 0x1240 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    2144:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <superfood_position>
	superfood_on_board = 0; 
    2148:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <superfood_on_board>
}
    214c:	cf 91       	pop	r28
    214e:	08 95       	ret

00002150 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    2150:	60 e0       	ldi	r22, 0x00	; 0
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    2158:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <superfood_position>
	superfood_on_board = 0;
    215c:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <superfood_on_board>
    2160:	08 95       	ret

00002162 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    2162:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <superfood_position>
    2166:	08 95       	ret

00002168 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    2168:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <superfood_on_board>
    216c:	99 23       	and	r25, r25
    216e:	39 f0       	breq	.+14     	; 0x217e <is_superfood_at+0x16>
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <superfood_position>
    2176:	28 13       	cpse	r18, r24
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	89 2f       	mov	r24, r25
    217c:	08 95       	ret
    217e:	80 e0       	ldi	r24, 0x00	; 0
}
    2180:	08 95       	ret

00002182 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    2188:	0e 94 90 10 	call	0x2120	; 0x2120 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    218c:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
    2190:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    2192:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
		test_position = position(x,y);
    2196:	bc 01       	movw	r22, r24
    2198:	67 70       	andi	r22, 0x07	; 7
    219a:	70 78       	andi	r23, 0x80	; 128
    219c:	77 23       	and	r23, r23
    219e:	34 f4       	brge	.+12     	; 0x21ac <add_superfood_to_board+0x2a>
    21a0:	61 50       	subi	r22, 0x01	; 1
    21a2:	71 09       	sbc	r23, r1
    21a4:	68 6f       	ori	r22, 0xF8	; 248
    21a6:	7f 6f       	ori	r23, 0xFF	; 255
    21a8:	6f 5f       	subi	r22, 0xFF	; 255
    21aa:	7f 4f       	sbci	r23, 0xFF	; 255
    21ac:	ce 01       	movw	r24, r28
    21ae:	8f 70       	andi	r24, 0x0F	; 15
    21b0:	90 78       	andi	r25, 0x80	; 128
    21b2:	99 23       	and	r25, r25
    21b4:	24 f4       	brge	.+8      	; 0x21be <add_superfood_to_board+0x3c>
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	80 6f       	ori	r24, 0xF0	; 240
    21ba:	9f 6f       	ori	r25, 0xFF	; 255
    21bc:	01 96       	adiw	r24, 0x01	; 1
    21be:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    21c2:	c8 2f       	mov	r28, r24
    21c4:	13 e6       	ldi	r17, 0x63	; 99
    21c6:	1e c0       	rjmp	.+60     	; 0x2204 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    21c8:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
    21cc:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    21ce:	0e 94 0f 14 	call	0x281e	; 0x281e <rand>
		test_position = position(x,y);
    21d2:	bc 01       	movw	r22, r24
    21d4:	67 70       	andi	r22, 0x07	; 7
    21d6:	70 78       	andi	r23, 0x80	; 128
    21d8:	77 23       	and	r23, r23
    21da:	34 f4       	brge	.+12     	; 0x21e8 <add_superfood_to_board+0x66>
    21dc:	61 50       	subi	r22, 0x01	; 1
    21de:	71 09       	sbc	r23, r1
    21e0:	68 6f       	ori	r22, 0xF8	; 248
    21e2:	7f 6f       	ori	r23, 0xFF	; 255
    21e4:	6f 5f       	subi	r22, 0xFF	; 255
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	ce 01       	movw	r24, r28
    21ea:	8f 70       	andi	r24, 0x0F	; 15
    21ec:	90 78       	andi	r25, 0x80	; 128
    21ee:	99 23       	and	r25, r25
    21f0:	24 f4       	brge	.+8      	; 0x21fa <add_superfood_to_board+0x78>
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	80 6f       	ori	r24, 0xF0	; 240
    21f6:	9f 6f       	ori	r25, 0xFF	; 255
    21f8:	01 96       	adiw	r24, 0x01	; 1
    21fa:	0e 94 72 09 	call	0x12e4	; 0x12e4 <position>
    21fe:	c8 2f       	mov	r28, r24
    2200:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    2202:	a1 f0       	breq	.+40     	; 0x222c <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    2204:	8c 2f       	mov	r24, r28
    2206:	0e 94 56 0f 	call	0x1eac	; 0x1eac <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    220a:	81 11       	cpse	r24, r1
    220c:	dd cf       	rjmp	.-70     	; 0x21c8 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    220e:	8c 2f       	mov	r24, r28
    2210:	0e 94 0c 07 	call	0xe18	; 0xe18 <is_food_at>
    2214:	81 11       	cpse	r24, r1
    2216:	d8 cf       	rjmp	.-80     	; 0x21c8 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    2218:	8c 2f       	mov	r24, r28
    221a:	0e 94 b4 10 	call	0x2168	; 0x2168 <is_superfood_at>
    221e:	81 11       	cpse	r24, r1
    2220:	d3 cf       	rjmp	.-90     	; 0x21c8 <add_superfood_to_board+0x46>
    2222:	8c 2f       	mov	r24, r28
    2224:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <is_rat_at>
    2228:	81 11       	cpse	r24, r1
    222a:	ce cf       	rjmp	.-100    	; 0x21c8 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    222c:	c0 93 c0 03 	sts	0x03C0, r28	; 0x8003c0 <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    2230:	8c 2f       	mov	r24, r28
    2232:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <y_position>
    2236:	c8 2f       	mov	r28, r24
    2238:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <superfood_position>
    223c:	0e 94 67 09 	call	0x12ce	; 0x12ce <x_position>
    2240:	4c e3       	ldi	r20, 0x3C	; 60
    2242:	6c 2f       	mov	r22, r28
    2244:	0e 94 20 09 	call	0x1240	; 0x1240 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <superfood_on_board>
}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	08 95       	ret

00002256 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    2256:	28 2f       	mov	r18, r24
    2258:	08 2e       	mov	r0, r24
    225a:	00 0c       	add	r0, r0
    225c:	33 0b       	sbc	r19, r19
    225e:	3f 93       	push	r19
    2260:	8f 93       	push	r24
    2262:	86 2f       	mov	r24, r22
    2264:	06 2e       	mov	r0, r22
    2266:	00 0c       	add	r0, r0
    2268:	99 0b       	sbc	r25, r25
    226a:	9f 93       	push	r25
    226c:	6f 93       	push	r22
    226e:	8d ed       	ldi	r24, 0xDD	; 221
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	9f 93       	push	r25
    2274:	8f 93       	push	r24
    2276:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	0f 90       	pop	r0
    2286:	08 95       	ret

00002288 <clear_terminal>:
    2288:	88 ed       	ldi	r24, 0xD8	; 216
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	9f 93       	push	r25
    228e:	8f 93       	push	r24
    2290:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	08 95       	ret

0000229a <set_display_attribute>:
    229a:	1f 92       	push	r1
    229c:	8f 93       	push	r24
    229e:	82 ed       	ldi	r24, 0xD2	; 210
    22a0:	91 e0       	ldi	r25, 0x01	; 1
    22a2:	9f 93       	push	r25
    22a4:	8f 93       	push	r24
    22a6:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	08 95       	ret

000022b4 <hide_cursor>:
    22b4:	8b ec       	ldi	r24, 0xCB	; 203
    22b6:	91 e0       	ldi	r25, 0x01	; 1
    22b8:	9f 93       	push	r25
    22ba:	8f 93       	push	r24
    22bc:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	08 95       	ret

000022c6 <show_cursor>:
    22c6:	84 ec       	ldi	r24, 0xC4	; 196
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	9f 93       	push	r25
    22cc:	8f 93       	push	r24
    22ce:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	08 95       	ret

000022d8 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    22d8:	63 e0       	ldi	r22, 0x03	; 3
    22da:	83 e0       	ldi	r24, 0x03	; 3
    22dc:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf_P(PSTR("Snake"));
    22e0:	8e eb       	ldi	r24, 0xBE	; 190
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	9f 93       	push	r25
    22e6:	8f 93       	push	r24
    22e8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>

	move_cursor(3,5);
    22ec:	65 e0       	ldi	r22, 0x05	; 5
    22ee:	83 e0       	ldi	r24, 0x03	; 3
    22f0:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    22f4:	80 e2       	ldi	r24, 0x20	; 32
    22f6:	0e 94 4d 11 	call	0x229a	; 0x229a <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    22fa:	84 e9       	ldi	r24, 0x94	; 148
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	9f 93       	push	r25
    2300:	8f 93       	push	r24
    2302:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    2306:	85 e2       	ldi	r24, 0x25	; 37
    2308:	0e 94 4d 11 	call	0x229a	; 0x229a <set_display_attribute>
	display_EEPROM_high_score();
    230c:	0e 94 07 06 	call	0xc0e	; 0xc0e <display_EEPROM_high_score>
}
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	08 95       	ret

0000231a <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    231a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <hide_cursor>
	
	move_cursor(10,1);
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	8a e0       	ldi	r24, 0x0A	; 10
    2322:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf("Snake");
    2326:	8e e2       	ldi	r24, 0x2E	; 46
    2328:	92 e0       	ldi	r25, 0x02	; 2
    232a:	9f 93       	push	r25
    232c:	8f 93       	push	r24
    232e:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>

	move_cursor(1,3);
    2332:	63 e0       	ldi	r22, 0x03	; 3
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf("Score:  ");
    233a:	84 e3       	ldi	r24, 0x34	; 52
    233c:	92 e0       	ldi	r25, 0x02	; 2
    233e:	9f 93       	push	r25
    2340:	8f 93       	push	r24
    2342:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
	
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	08 95       	ret

00002350 <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    2350:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <hide_cursor>
	move_cursor(1, 3);
    2354:	63 e0       	ldi	r22, 0x03	; 3
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	0e 94 2b 11 	call	0x2256	; 0x2256 <move_cursor>
	printf("Score: %8u", get_score());
    235c:	0e 94 97 0c 	call	0x192e	; 0x192e <get_score>
    2360:	9f 93       	push	r25
    2362:	8f 93       	push	r24
    2364:	7f 93       	push	r23
    2366:	6f 93       	push	r22
    2368:	8d e3       	ldi	r24, 0x3D	; 61
    236a:	92 e0       	ldi	r25, 0x02	; 2
    236c:	9f 93       	push	r25
    236e:	8f 93       	push	r24
    2370:	0e 94 ff 14 	call	0x29fe	; 0x29fe <printf>
}
    2374:	0f 90       	pop	r0
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	08 95       	ret

00002382 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    2382:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <clock_ticks>
    2386:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <clock_ticks+0x1>
    238a:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <clock_ticks+0x2>
    238e:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2392:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2394:	8c e7       	ldi	r24, 0x7C	; 124
    2396:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    2398:	82 e0       	ldi	r24, 0x02	; 2
    239a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    239c:	83 e0       	ldi	r24, 0x03	; 3
    239e:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    23a0:	ee e6       	ldi	r30, 0x6E	; 110
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	80 81       	ld	r24, Z
    23a6:	82 60       	ori	r24, 0x02	; 2
    23a8:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    23aa:	85 b3       	in	r24, 0x15	; 21
    23ac:	82 70       	andi	r24, 0x02	; 2
    23ae:	85 bb       	out	0x15, r24	; 21
    23b0:	08 95       	ret

000023b2 <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    23b2:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <unpaused_game>
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	89 1b       	sub	r24, r25
    23ba:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <unpaused_game>
    23be:	08 95       	ret

000023c0 <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    23c0:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <unpaused_game>
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	22 23       	and	r18, r18
    23ca:	11 f0       	breq	.+4      	; 0x23d0 <timer_is_paused+0x10>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    23d0:	08 95       	ret

000023d2 <get_clock_ticks>:
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	// uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
	cli();
    23d2:	f8 94       	cli
	return_value = clock_ticks;
    23d4:	60 91 8b 02 	lds	r22, 0x028B	; 0x80028b <clock_ticks>
    23d8:	70 91 8c 02 	lds	r23, 0x028C	; 0x80028c <clock_ticks+0x1>
    23dc:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <clock_ticks+0x2>
    23e0:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <clock_ticks+0x3>
	//if(interrupts_were_on) {
	sei();
    23e4:	78 94       	sei
	//}
	return return_value;
}
    23e6:	08 95       	ret

000023e8 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	//uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
	cli();
    23e8:	f8 94       	cli
	clock_ticks =clock;
    23ea:	60 93 8b 02 	sts	0x028B, r22	; 0x80028b <clock_ticks>
    23ee:	70 93 8c 02 	sts	0x028C, r23	; 0x80028c <clock_ticks+0x1>
    23f2:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <clock_ticks+0x2>
    23f6:	90 93 8e 02 	sts	0x028E, r25	; 0x80028e <clock_ticks+0x3>
	sei();
    23fa:	78 94       	sei
    23fc:	08 95       	ret

000023fe <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
	if(unpaused_game){
    2420:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <unpaused_game>
    2424:	88 23       	and	r24, r24
    2426:	99 f0       	breq	.+38     	; 0x244e <__vector_16+0x50>
		clock_ticks++;
    2428:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <clock_ticks>
    242c:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <clock_ticks+0x1>
    2430:	a0 91 8d 02 	lds	r26, 0x028D	; 0x80028d <clock_ticks+0x2>
    2434:	b0 91 8e 02 	lds	r27, 0x028E	; 0x80028e <clock_ticks+0x3>
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	a1 1d       	adc	r26, r1
    243c:	b1 1d       	adc	r27, r1
    243e:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <clock_ticks>
    2442:	90 93 8c 02 	sts	0x028C, r25	; 0x80028c <clock_ticks+0x1>
    2446:	a0 93 8d 02 	sts	0x028D, r26	; 0x80028d <clock_ticks+0x2>
    244a:	b0 93 8e 02 	sts	0x028E, r27	; 0x80028e <clock_ticks+0x3>
	}
	handle_buzzer_loop();
    244e:	0e 94 39 02 	call	0x472	; 0x472 <handle_buzzer_loop>
}
    2452:	ff 91       	pop	r31
    2454:	ef 91       	pop	r30
    2456:	bf 91       	pop	r27
    2458:	af 91       	pop	r26
    245a:	9f 91       	pop	r25
    245c:	8f 91       	pop	r24
    245e:	7f 91       	pop	r23
    2460:	6f 91       	pop	r22
    2462:	5f 91       	pop	r21
    2464:	4f 91       	pop	r20
    2466:	3f 91       	pop	r19
    2468:	2f 91       	pop	r18
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti

00002474 <initialise_timer_one>:

}
void change_timer_one_frequency(int new_frequency){
	//
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    2474:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2478:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    247c:	e1 e8       	ldi	r30, 0x81	; 129
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8a 60       	ori	r24, 0x0A	; 10
    2484:	80 83       	st	Z, r24
    2486:	80 e4       	ldi	r24, 0x40	; 64
    2488:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    248c:	88 ee       	ldi	r24, 0xE8	; 232
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2494:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2498:	55 98       	cbi	0x0a, 5	; 10
    249a:	53 98       	cbi	0x0a, 3	; 10
    249c:	0e 94 a2 01 	call	0x344	; 0x344 <init_buzzer>
    24a0:	08 95       	ret

000024a2 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A);
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    24a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    24a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    24aa:	08 95       	ret

000024ac <enable_timer_one>:
}
void enable_timer_one(void){
	DDRD |= (1<<5);
    24ac:	55 9a       	sbi	0x0a, 5	; 10
    24ae:	08 95       	ret

000024b0 <__fixunssfsi>:
    24b0:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <__fp_splitA>
    24b4:	88 f0       	brcs	.+34     	; 0x24d8 <__fixunssfsi+0x28>
    24b6:	9f 57       	subi	r25, 0x7F	; 127
    24b8:	98 f0       	brcs	.+38     	; 0x24e0 <__fixunssfsi+0x30>
    24ba:	b9 2f       	mov	r27, r25
    24bc:	99 27       	eor	r25, r25
    24be:	b7 51       	subi	r27, 0x17	; 23
    24c0:	b0 f0       	brcs	.+44     	; 0x24ee <__fixunssfsi+0x3e>
    24c2:	e1 f0       	breq	.+56     	; 0x24fc <__fixunssfsi+0x4c>
    24c4:	66 0f       	add	r22, r22
    24c6:	77 1f       	adc	r23, r23
    24c8:	88 1f       	adc	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	1a f0       	brmi	.+6      	; 0x24d4 <__fixunssfsi+0x24>
    24ce:	ba 95       	dec	r27
    24d0:	c9 f7       	brne	.-14     	; 0x24c4 <__fixunssfsi+0x14>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <__fixunssfsi+0x4c>
    24d4:	b1 30       	cpi	r27, 0x01	; 1
    24d6:	91 f0       	breq	.+36     	; 0x24fc <__fixunssfsi+0x4c>
    24d8:	0e 94 0e 13 	call	0x261c	; 0x261c <__fp_zero>
    24dc:	b1 e0       	ldi	r27, 0x01	; 1
    24de:	08 95       	ret
    24e0:	0c 94 0e 13 	jmp	0x261c	; 0x261c <__fp_zero>
    24e4:	67 2f       	mov	r22, r23
    24e6:	78 2f       	mov	r23, r24
    24e8:	88 27       	eor	r24, r24
    24ea:	b8 5f       	subi	r27, 0xF8	; 248
    24ec:	39 f0       	breq	.+14     	; 0x24fc <__fixunssfsi+0x4c>
    24ee:	b9 3f       	cpi	r27, 0xF9	; 249
    24f0:	cc f3       	brlt	.-14     	; 0x24e4 <__fixunssfsi+0x34>
    24f2:	86 95       	lsr	r24
    24f4:	77 95       	ror	r23
    24f6:	67 95       	ror	r22
    24f8:	b3 95       	inc	r27
    24fa:	d9 f7       	brne	.-10     	; 0x24f2 <__fixunssfsi+0x42>
    24fc:	3e f4       	brtc	.+14     	; 0x250c <__fixunssfsi+0x5c>
    24fe:	90 95       	com	r25
    2500:	80 95       	com	r24
    2502:	70 95       	com	r23
    2504:	61 95       	neg	r22
    2506:	7f 4f       	sbci	r23, 0xFF	; 255
    2508:	8f 4f       	sbci	r24, 0xFF	; 255
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	08 95       	ret

0000250e <__floatunsisf>:
    250e:	e8 94       	clt
    2510:	09 c0       	rjmp	.+18     	; 0x2524 <__floatsisf+0x12>

00002512 <__floatsisf>:
    2512:	97 fb       	bst	r25, 7
    2514:	3e f4       	brtc	.+14     	; 0x2524 <__floatsisf+0x12>
    2516:	90 95       	com	r25
    2518:	80 95       	com	r24
    251a:	70 95       	com	r23
    251c:	61 95       	neg	r22
    251e:	7f 4f       	sbci	r23, 0xFF	; 255
    2520:	8f 4f       	sbci	r24, 0xFF	; 255
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	99 23       	and	r25, r25
    2526:	a9 f0       	breq	.+42     	; 0x2552 <__floatsisf+0x40>
    2528:	f9 2f       	mov	r31, r25
    252a:	96 e9       	ldi	r25, 0x96	; 150
    252c:	bb 27       	eor	r27, r27
    252e:	93 95       	inc	r25
    2530:	f6 95       	lsr	r31
    2532:	87 95       	ror	r24
    2534:	77 95       	ror	r23
    2536:	67 95       	ror	r22
    2538:	b7 95       	ror	r27
    253a:	f1 11       	cpse	r31, r1
    253c:	f8 cf       	rjmp	.-16     	; 0x252e <__floatsisf+0x1c>
    253e:	fa f4       	brpl	.+62     	; 0x257e <__floatsisf+0x6c>
    2540:	bb 0f       	add	r27, r27
    2542:	11 f4       	brne	.+4      	; 0x2548 <__floatsisf+0x36>
    2544:	60 ff       	sbrs	r22, 0
    2546:	1b c0       	rjmp	.+54     	; 0x257e <__floatsisf+0x6c>
    2548:	6f 5f       	subi	r22, 0xFF	; 255
    254a:	7f 4f       	sbci	r23, 0xFF	; 255
    254c:	8f 4f       	sbci	r24, 0xFF	; 255
    254e:	9f 4f       	sbci	r25, 0xFF	; 255
    2550:	16 c0       	rjmp	.+44     	; 0x257e <__floatsisf+0x6c>
    2552:	88 23       	and	r24, r24
    2554:	11 f0       	breq	.+4      	; 0x255a <__floatsisf+0x48>
    2556:	96 e9       	ldi	r25, 0x96	; 150
    2558:	11 c0       	rjmp	.+34     	; 0x257c <__floatsisf+0x6a>
    255a:	77 23       	and	r23, r23
    255c:	21 f0       	breq	.+8      	; 0x2566 <__floatsisf+0x54>
    255e:	9e e8       	ldi	r25, 0x8E	; 142
    2560:	87 2f       	mov	r24, r23
    2562:	76 2f       	mov	r23, r22
    2564:	05 c0       	rjmp	.+10     	; 0x2570 <__floatsisf+0x5e>
    2566:	66 23       	and	r22, r22
    2568:	71 f0       	breq	.+28     	; 0x2586 <__floatsisf+0x74>
    256a:	96 e8       	ldi	r25, 0x86	; 134
    256c:	86 2f       	mov	r24, r22
    256e:	70 e0       	ldi	r23, 0x00	; 0
    2570:	60 e0       	ldi	r22, 0x00	; 0
    2572:	2a f0       	brmi	.+10     	; 0x257e <__floatsisf+0x6c>
    2574:	9a 95       	dec	r25
    2576:	66 0f       	add	r22, r22
    2578:	77 1f       	adc	r23, r23
    257a:	88 1f       	adc	r24, r24
    257c:	da f7       	brpl	.-10     	; 0x2574 <__floatsisf+0x62>
    257e:	88 0f       	add	r24, r24
    2580:	96 95       	lsr	r25
    2582:	87 95       	ror	r24
    2584:	97 f9       	bld	r25, 7
    2586:	08 95       	ret

00002588 <__fp_inf>:
    2588:	97 f9       	bld	r25, 7
    258a:	9f 67       	ori	r25, 0x7F	; 127
    258c:	80 e8       	ldi	r24, 0x80	; 128
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	08 95       	ret

00002594 <__fp_nan>:
    2594:	9f ef       	ldi	r25, 0xFF	; 255
    2596:	80 ec       	ldi	r24, 0xC0	; 192
    2598:	08 95       	ret

0000259a <__fp_pscA>:
    259a:	00 24       	eor	r0, r0
    259c:	0a 94       	dec	r0
    259e:	16 16       	cp	r1, r22
    25a0:	17 06       	cpc	r1, r23
    25a2:	18 06       	cpc	r1, r24
    25a4:	09 06       	cpc	r0, r25
    25a6:	08 95       	ret

000025a8 <__fp_pscB>:
    25a8:	00 24       	eor	r0, r0
    25aa:	0a 94       	dec	r0
    25ac:	12 16       	cp	r1, r18
    25ae:	13 06       	cpc	r1, r19
    25b0:	14 06       	cpc	r1, r20
    25b2:	05 06       	cpc	r0, r21
    25b4:	08 95       	ret

000025b6 <__fp_round>:
    25b6:	09 2e       	mov	r0, r25
    25b8:	03 94       	inc	r0
    25ba:	00 0c       	add	r0, r0
    25bc:	11 f4       	brne	.+4      	; 0x25c2 <__fp_round+0xc>
    25be:	88 23       	and	r24, r24
    25c0:	52 f0       	brmi	.+20     	; 0x25d6 <__fp_round+0x20>
    25c2:	bb 0f       	add	r27, r27
    25c4:	40 f4       	brcc	.+16     	; 0x25d6 <__fp_round+0x20>
    25c6:	bf 2b       	or	r27, r31
    25c8:	11 f4       	brne	.+4      	; 0x25ce <__fp_round+0x18>
    25ca:	60 ff       	sbrs	r22, 0
    25cc:	04 c0       	rjmp	.+8      	; 0x25d6 <__fp_round+0x20>
    25ce:	6f 5f       	subi	r22, 0xFF	; 255
    25d0:	7f 4f       	sbci	r23, 0xFF	; 255
    25d2:	8f 4f       	sbci	r24, 0xFF	; 255
    25d4:	9f 4f       	sbci	r25, 0xFF	; 255
    25d6:	08 95       	ret

000025d8 <__fp_split3>:
    25d8:	57 fd       	sbrc	r21, 7
    25da:	90 58       	subi	r25, 0x80	; 128
    25dc:	44 0f       	add	r20, r20
    25de:	55 1f       	adc	r21, r21
    25e0:	59 f0       	breq	.+22     	; 0x25f8 <__fp_splitA+0x10>
    25e2:	5f 3f       	cpi	r21, 0xFF	; 255
    25e4:	71 f0       	breq	.+28     	; 0x2602 <__fp_splitA+0x1a>
    25e6:	47 95       	ror	r20

000025e8 <__fp_splitA>:
    25e8:	88 0f       	add	r24, r24
    25ea:	97 fb       	bst	r25, 7
    25ec:	99 1f       	adc	r25, r25
    25ee:	61 f0       	breq	.+24     	; 0x2608 <__fp_splitA+0x20>
    25f0:	9f 3f       	cpi	r25, 0xFF	; 255
    25f2:	79 f0       	breq	.+30     	; 0x2612 <__fp_splitA+0x2a>
    25f4:	87 95       	ror	r24
    25f6:	08 95       	ret
    25f8:	12 16       	cp	r1, r18
    25fa:	13 06       	cpc	r1, r19
    25fc:	14 06       	cpc	r1, r20
    25fe:	55 1f       	adc	r21, r21
    2600:	f2 cf       	rjmp	.-28     	; 0x25e6 <__fp_split3+0xe>
    2602:	46 95       	lsr	r20
    2604:	f1 df       	rcall	.-30     	; 0x25e8 <__fp_splitA>
    2606:	08 c0       	rjmp	.+16     	; 0x2618 <__fp_splitA+0x30>
    2608:	16 16       	cp	r1, r22
    260a:	17 06       	cpc	r1, r23
    260c:	18 06       	cpc	r1, r24
    260e:	99 1f       	adc	r25, r25
    2610:	f1 cf       	rjmp	.-30     	; 0x25f4 <__fp_splitA+0xc>
    2612:	86 95       	lsr	r24
    2614:	71 05       	cpc	r23, r1
    2616:	61 05       	cpc	r22, r1
    2618:	08 94       	sec
    261a:	08 95       	ret

0000261c <__fp_zero>:
    261c:	e8 94       	clt

0000261e <__fp_szero>:
    261e:	bb 27       	eor	r27, r27
    2620:	66 27       	eor	r22, r22
    2622:	77 27       	eor	r23, r23
    2624:	cb 01       	movw	r24, r22
    2626:	97 f9       	bld	r25, 7
    2628:	08 95       	ret

0000262a <__mulsf3>:
    262a:	0e 94 28 13 	call	0x2650	; 0x2650 <__mulsf3x>
    262e:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__fp_round>
    2632:	0e 94 cd 12 	call	0x259a	; 0x259a <__fp_pscA>
    2636:	38 f0       	brcs	.+14     	; 0x2646 <__mulsf3+0x1c>
    2638:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__fp_pscB>
    263c:	20 f0       	brcs	.+8      	; 0x2646 <__mulsf3+0x1c>
    263e:	95 23       	and	r25, r21
    2640:	11 f0       	breq	.+4      	; 0x2646 <__mulsf3+0x1c>
    2642:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__fp_inf>
    2646:	0c 94 ca 12 	jmp	0x2594	; 0x2594 <__fp_nan>
    264a:	11 24       	eor	r1, r1
    264c:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__fp_szero>

00002650 <__mulsf3x>:
    2650:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <__fp_split3>
    2654:	70 f3       	brcs	.-36     	; 0x2632 <__mulsf3+0x8>

00002656 <__mulsf3_pse>:
    2656:	95 9f       	mul	r25, r21
    2658:	c1 f3       	breq	.-16     	; 0x264a <__mulsf3+0x20>
    265a:	95 0f       	add	r25, r21
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	55 1f       	adc	r21, r21
    2660:	62 9f       	mul	r22, r18
    2662:	f0 01       	movw	r30, r0
    2664:	72 9f       	mul	r23, r18
    2666:	bb 27       	eor	r27, r27
    2668:	f0 0d       	add	r31, r0
    266a:	b1 1d       	adc	r27, r1
    266c:	63 9f       	mul	r22, r19
    266e:	aa 27       	eor	r26, r26
    2670:	f0 0d       	add	r31, r0
    2672:	b1 1d       	adc	r27, r1
    2674:	aa 1f       	adc	r26, r26
    2676:	64 9f       	mul	r22, r20
    2678:	66 27       	eor	r22, r22
    267a:	b0 0d       	add	r27, r0
    267c:	a1 1d       	adc	r26, r1
    267e:	66 1f       	adc	r22, r22
    2680:	82 9f       	mul	r24, r18
    2682:	22 27       	eor	r18, r18
    2684:	b0 0d       	add	r27, r0
    2686:	a1 1d       	adc	r26, r1
    2688:	62 1f       	adc	r22, r18
    268a:	73 9f       	mul	r23, r19
    268c:	b0 0d       	add	r27, r0
    268e:	a1 1d       	adc	r26, r1
    2690:	62 1f       	adc	r22, r18
    2692:	83 9f       	mul	r24, r19
    2694:	a0 0d       	add	r26, r0
    2696:	61 1d       	adc	r22, r1
    2698:	22 1f       	adc	r18, r18
    269a:	74 9f       	mul	r23, r20
    269c:	33 27       	eor	r19, r19
    269e:	a0 0d       	add	r26, r0
    26a0:	61 1d       	adc	r22, r1
    26a2:	23 1f       	adc	r18, r19
    26a4:	84 9f       	mul	r24, r20
    26a6:	60 0d       	add	r22, r0
    26a8:	21 1d       	adc	r18, r1
    26aa:	82 2f       	mov	r24, r18
    26ac:	76 2f       	mov	r23, r22
    26ae:	6a 2f       	mov	r22, r26
    26b0:	11 24       	eor	r1, r1
    26b2:	9f 57       	subi	r25, 0x7F	; 127
    26b4:	50 40       	sbci	r21, 0x00	; 0
    26b6:	9a f0       	brmi	.+38     	; 0x26de <__mulsf3_pse+0x88>
    26b8:	f1 f0       	breq	.+60     	; 0x26f6 <__mulsf3_pse+0xa0>
    26ba:	88 23       	and	r24, r24
    26bc:	4a f0       	brmi	.+18     	; 0x26d0 <__mulsf3_pse+0x7a>
    26be:	ee 0f       	add	r30, r30
    26c0:	ff 1f       	adc	r31, r31
    26c2:	bb 1f       	adc	r27, r27
    26c4:	66 1f       	adc	r22, r22
    26c6:	77 1f       	adc	r23, r23
    26c8:	88 1f       	adc	r24, r24
    26ca:	91 50       	subi	r25, 0x01	; 1
    26cc:	50 40       	sbci	r21, 0x00	; 0
    26ce:	a9 f7       	brne	.-22     	; 0x26ba <__mulsf3_pse+0x64>
    26d0:	9e 3f       	cpi	r25, 0xFE	; 254
    26d2:	51 05       	cpc	r21, r1
    26d4:	80 f0       	brcs	.+32     	; 0x26f6 <__mulsf3_pse+0xa0>
    26d6:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__fp_inf>
    26da:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__fp_szero>
    26de:	5f 3f       	cpi	r21, 0xFF	; 255
    26e0:	e4 f3       	brlt	.-8      	; 0x26da <__mulsf3_pse+0x84>
    26e2:	98 3e       	cpi	r25, 0xE8	; 232
    26e4:	d4 f3       	brlt	.-12     	; 0x26da <__mulsf3_pse+0x84>
    26e6:	86 95       	lsr	r24
    26e8:	77 95       	ror	r23
    26ea:	67 95       	ror	r22
    26ec:	b7 95       	ror	r27
    26ee:	f7 95       	ror	r31
    26f0:	e7 95       	ror	r30
    26f2:	9f 5f       	subi	r25, 0xFF	; 255
    26f4:	c1 f7       	brne	.-16     	; 0x26e6 <__mulsf3_pse+0x90>
    26f6:	fe 2b       	or	r31, r30
    26f8:	88 0f       	add	r24, r24
    26fa:	91 1d       	adc	r25, r1
    26fc:	96 95       	lsr	r25
    26fe:	87 95       	ror	r24
    2700:	97 f9       	bld	r25, 7
    2702:	08 95       	ret

00002704 <__udivmodsi4>:
    2704:	a1 e2       	ldi	r26, 0x21	; 33
    2706:	1a 2e       	mov	r1, r26
    2708:	aa 1b       	sub	r26, r26
    270a:	bb 1b       	sub	r27, r27
    270c:	fd 01       	movw	r30, r26
    270e:	0d c0       	rjmp	.+26     	; 0x272a <__udivmodsi4_ep>

00002710 <__udivmodsi4_loop>:
    2710:	aa 1f       	adc	r26, r26
    2712:	bb 1f       	adc	r27, r27
    2714:	ee 1f       	adc	r30, r30
    2716:	ff 1f       	adc	r31, r31
    2718:	a2 17       	cp	r26, r18
    271a:	b3 07       	cpc	r27, r19
    271c:	e4 07       	cpc	r30, r20
    271e:	f5 07       	cpc	r31, r21
    2720:	20 f0       	brcs	.+8      	; 0x272a <__udivmodsi4_ep>
    2722:	a2 1b       	sub	r26, r18
    2724:	b3 0b       	sbc	r27, r19
    2726:	e4 0b       	sbc	r30, r20
    2728:	f5 0b       	sbc	r31, r21

0000272a <__udivmodsi4_ep>:
    272a:	66 1f       	adc	r22, r22
    272c:	77 1f       	adc	r23, r23
    272e:	88 1f       	adc	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	1a 94       	dec	r1
    2734:	69 f7       	brne	.-38     	; 0x2710 <__udivmodsi4_loop>
    2736:	60 95       	com	r22
    2738:	70 95       	com	r23
    273a:	80 95       	com	r24
    273c:	90 95       	com	r25
    273e:	9b 01       	movw	r18, r22
    2740:	ac 01       	movw	r20, r24
    2742:	bd 01       	movw	r22, r26
    2744:	cf 01       	movw	r24, r30
    2746:	08 95       	ret

00002748 <__divmodsi4>:
    2748:	05 2e       	mov	r0, r21
    274a:	97 fb       	bst	r25, 7
    274c:	1e f4       	brtc	.+6      	; 0x2754 <__divmodsi4+0xc>
    274e:	00 94       	com	r0
    2750:	0e 94 bb 13 	call	0x2776	; 0x2776 <__negsi2>
    2754:	57 fd       	sbrc	r21, 7
    2756:	07 d0       	rcall	.+14     	; 0x2766 <__divmodsi4_neg2>
    2758:	0e 94 82 13 	call	0x2704	; 0x2704 <__udivmodsi4>
    275c:	07 fc       	sbrc	r0, 7
    275e:	03 d0       	rcall	.+6      	; 0x2766 <__divmodsi4_neg2>
    2760:	4e f4       	brtc	.+18     	; 0x2774 <__divmodsi4_exit>
    2762:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <__negsi2>

00002766 <__divmodsi4_neg2>:
    2766:	50 95       	com	r21
    2768:	40 95       	com	r20
    276a:	30 95       	com	r19
    276c:	21 95       	neg	r18
    276e:	3f 4f       	sbci	r19, 0xFF	; 255
    2770:	4f 4f       	sbci	r20, 0xFF	; 255
    2772:	5f 4f       	sbci	r21, 0xFF	; 255

00002774 <__divmodsi4_exit>:
    2774:	08 95       	ret

00002776 <__negsi2>:
    2776:	90 95       	com	r25
    2778:	80 95       	com	r24
    277a:	70 95       	com	r23
    277c:	61 95       	neg	r22
    277e:	7f 4f       	sbci	r23, 0xFF	; 255
    2780:	8f 4f       	sbci	r24, 0xFF	; 255
    2782:	9f 4f       	sbci	r25, 0xFF	; 255
    2784:	08 95       	ret

00002786 <do_rand>:
    2786:	8f 92       	push	r8
    2788:	9f 92       	push	r9
    278a:	af 92       	push	r10
    278c:	bf 92       	push	r11
    278e:	cf 92       	push	r12
    2790:	df 92       	push	r13
    2792:	ef 92       	push	r14
    2794:	ff 92       	push	r15
    2796:	cf 93       	push	r28
    2798:	df 93       	push	r29
    279a:	ec 01       	movw	r28, r24
    279c:	68 81       	ld	r22, Y
    279e:	79 81       	ldd	r23, Y+1	; 0x01
    27a0:	8a 81       	ldd	r24, Y+2	; 0x02
    27a2:	9b 81       	ldd	r25, Y+3	; 0x03
    27a4:	61 15       	cp	r22, r1
    27a6:	71 05       	cpc	r23, r1
    27a8:	81 05       	cpc	r24, r1
    27aa:	91 05       	cpc	r25, r1
    27ac:	21 f4       	brne	.+8      	; 0x27b6 <do_rand+0x30>
    27ae:	64 e2       	ldi	r22, 0x24	; 36
    27b0:	79 ed       	ldi	r23, 0xD9	; 217
    27b2:	8b e5       	ldi	r24, 0x5B	; 91
    27b4:	97 e0       	ldi	r25, 0x07	; 7
    27b6:	2d e1       	ldi	r18, 0x1D	; 29
    27b8:	33 ef       	ldi	r19, 0xF3	; 243
    27ba:	41 e0       	ldi	r20, 0x01	; 1
    27bc:	50 e0       	ldi	r21, 0x00	; 0
    27be:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    27c2:	49 01       	movw	r8, r18
    27c4:	5a 01       	movw	r10, r20
    27c6:	9b 01       	movw	r18, r22
    27c8:	ac 01       	movw	r20, r24
    27ca:	a7 ea       	ldi	r26, 0xA7	; 167
    27cc:	b1 e4       	ldi	r27, 0x41	; 65
    27ce:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    27d2:	6b 01       	movw	r12, r22
    27d4:	7c 01       	movw	r14, r24
    27d6:	ac ee       	ldi	r26, 0xEC	; 236
    27d8:	b4 ef       	ldi	r27, 0xF4	; 244
    27da:	a5 01       	movw	r20, r10
    27dc:	94 01       	movw	r18, r8
    27de:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__mulohisi3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	8c 0d       	add	r24, r12
    27e8:	9d 1d       	adc	r25, r13
    27ea:	ae 1d       	adc	r26, r14
    27ec:	bf 1d       	adc	r27, r15
    27ee:	b7 ff       	sbrs	r27, 7
    27f0:	03 c0       	rjmp	.+6      	; 0x27f8 <do_rand+0x72>
    27f2:	01 97       	sbiw	r24, 0x01	; 1
    27f4:	a1 09       	sbc	r26, r1
    27f6:	b0 48       	sbci	r27, 0x80	; 128
    27f8:	88 83       	st	Y, r24
    27fa:	99 83       	std	Y+1, r25	; 0x01
    27fc:	aa 83       	std	Y+2, r26	; 0x02
    27fe:	bb 83       	std	Y+3, r27	; 0x03
    2800:	9f 77       	andi	r25, 0x7F	; 127
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	ff 90       	pop	r15
    2808:	ef 90       	pop	r14
    280a:	df 90       	pop	r13
    280c:	cf 90       	pop	r12
    280e:	bf 90       	pop	r11
    2810:	af 90       	pop	r10
    2812:	9f 90       	pop	r9
    2814:	8f 90       	pop	r8
    2816:	08 95       	ret

00002818 <rand_r>:
    2818:	0e 94 c3 13 	call	0x2786	; 0x2786 <do_rand>
    281c:	08 95       	ret

0000281e <rand>:
    281e:	80 e0       	ldi	r24, 0x00	; 0
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	0e 94 c3 13 	call	0x2786	; 0x2786 <do_rand>
    2826:	08 95       	ret

00002828 <srand>:
    2828:	a0 e0       	ldi	r26, 0x00	; 0
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2830:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2834:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2838:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    283c:	08 95       	ret

0000283e <random_r>:
    283e:	8f 92       	push	r8
    2840:	9f 92       	push	r9
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	ec 01       	movw	r28, r24
    2854:	68 81       	ld	r22, Y
    2856:	79 81       	ldd	r23, Y+1	; 0x01
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	9b 81       	ldd	r25, Y+3	; 0x03
    285c:	61 15       	cp	r22, r1
    285e:	71 05       	cpc	r23, r1
    2860:	81 05       	cpc	r24, r1
    2862:	91 05       	cpc	r25, r1
    2864:	21 f4       	brne	.+8      	; 0x286e <random_r+0x30>
    2866:	64 e2       	ldi	r22, 0x24	; 36
    2868:	79 ed       	ldi	r23, 0xD9	; 217
    286a:	8b e5       	ldi	r24, 0x5B	; 91
    286c:	97 e0       	ldi	r25, 0x07	; 7
    286e:	2d e1       	ldi	r18, 0x1D	; 29
    2870:	33 ef       	ldi	r19, 0xF3	; 243
    2872:	41 e0       	ldi	r20, 0x01	; 1
    2874:	50 e0       	ldi	r21, 0x00	; 0
    2876:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    287a:	49 01       	movw	r8, r18
    287c:	5a 01       	movw	r10, r20
    287e:	9b 01       	movw	r18, r22
    2880:	ac 01       	movw	r20, r24
    2882:	a7 ea       	ldi	r26, 0xA7	; 167
    2884:	b1 e4       	ldi	r27, 0x41	; 65
    2886:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    288a:	6b 01       	movw	r12, r22
    288c:	7c 01       	movw	r14, r24
    288e:	ac ee       	ldi	r26, 0xEC	; 236
    2890:	b4 ef       	ldi	r27, 0xF4	; 244
    2892:	a5 01       	movw	r20, r10
    2894:	94 01       	movw	r18, r8
    2896:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__mulohisi3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8c 0d       	add	r24, r12
    28a0:	9d 1d       	adc	r25, r13
    28a2:	ae 1d       	adc	r26, r14
    28a4:	bf 1d       	adc	r27, r15
    28a6:	b7 ff       	sbrs	r27, 7
    28a8:	03 c0       	rjmp	.+6      	; 0x28b0 <random_r+0x72>
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	a1 09       	sbc	r26, r1
    28ae:	b0 48       	sbci	r27, 0x80	; 128
    28b0:	88 83       	st	Y, r24
    28b2:	99 83       	std	Y+1, r25	; 0x01
    28b4:	aa 83       	std	Y+2, r26	; 0x02
    28b6:	bb 83       	std	Y+3, r27	; 0x03
    28b8:	bc 01       	movw	r22, r24
    28ba:	cd 01       	movw	r24, r26
    28bc:	9f 77       	andi	r25, 0x7F	; 127
    28be:	df 91       	pop	r29
    28c0:	cf 91       	pop	r28
    28c2:	ff 90       	pop	r15
    28c4:	ef 90       	pop	r14
    28c6:	df 90       	pop	r13
    28c8:	cf 90       	pop	r12
    28ca:	bf 90       	pop	r11
    28cc:	af 90       	pop	r10
    28ce:	9f 90       	pop	r9
    28d0:	8f 90       	pop	r8
    28d2:	08 95       	ret

000028d4 <random>:
    28d4:	8f 92       	push	r8
    28d6:	9f 92       	push	r9
    28d8:	af 92       	push	r10
    28da:	bf 92       	push	r11
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    28e8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    28ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    28f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    28f4:	61 15       	cp	r22, r1
    28f6:	71 05       	cpc	r23, r1
    28f8:	81 05       	cpc	r24, r1
    28fa:	91 05       	cpc	r25, r1
    28fc:	21 f4       	brne	.+8      	; 0x2906 <random+0x32>
    28fe:	64 e2       	ldi	r22, 0x24	; 36
    2900:	79 ed       	ldi	r23, 0xD9	; 217
    2902:	8b e5       	ldi	r24, 0x5B	; 91
    2904:	97 e0       	ldi	r25, 0x07	; 7
    2906:	2d e1       	ldi	r18, 0x1D	; 29
    2908:	33 ef       	ldi	r19, 0xF3	; 243
    290a:	41 e0       	ldi	r20, 0x01	; 1
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	0e 94 a4 13 	call	0x2748	; 0x2748 <__divmodsi4>
    2912:	49 01       	movw	r8, r18
    2914:	5a 01       	movw	r10, r20
    2916:	9b 01       	movw	r18, r22
    2918:	ac 01       	movw	r20, r24
    291a:	a7 ea       	ldi	r26, 0xA7	; 167
    291c:	b1 e4       	ldi	r27, 0x41	; 65
    291e:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    2922:	6b 01       	movw	r12, r22
    2924:	7c 01       	movw	r14, r24
    2926:	ac ee       	ldi	r26, 0xEC	; 236
    2928:	b4 ef       	ldi	r27, 0xF4	; 244
    292a:	a5 01       	movw	r20, r10
    292c:	94 01       	movw	r18, r8
    292e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <__mulohisi3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	8c 0d       	add	r24, r12
    2938:	9d 1d       	adc	r25, r13
    293a:	ae 1d       	adc	r26, r14
    293c:	bf 1d       	adc	r27, r15
    293e:	b7 ff       	sbrs	r27, 7
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <random+0x74>
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	a1 09       	sbc	r26, r1
    2946:	b0 48       	sbci	r27, 0x80	; 128
    2948:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    294c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2950:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2954:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	9f 77       	andi	r25, 0x7F	; 127
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	df 90       	pop	r13
    2964:	cf 90       	pop	r12
    2966:	bf 90       	pop	r11
    2968:	af 90       	pop	r10
    296a:	9f 90       	pop	r9
    296c:	8f 90       	pop	r8
    296e:	08 95       	ret

00002970 <srandom>:
    2970:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2974:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2978:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    297c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2980:	08 95       	ret

00002982 <fgetc>:
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	ec 01       	movw	r28, r24
    2988:	2b 81       	ldd	r18, Y+3	; 0x03
    298a:	20 ff       	sbrs	r18, 0
    298c:	33 c0       	rjmp	.+102    	; 0x29f4 <fgetc+0x72>
    298e:	26 ff       	sbrs	r18, 6
    2990:	0a c0       	rjmp	.+20     	; 0x29a6 <fgetc+0x24>
    2992:	2f 7b       	andi	r18, 0xBF	; 191
    2994:	2b 83       	std	Y+3, r18	; 0x03
    2996:	8e 81       	ldd	r24, Y+6	; 0x06
    2998:	9f 81       	ldd	r25, Y+7	; 0x07
    299a:	01 96       	adiw	r24, 0x01	; 1
    299c:	9f 83       	std	Y+7, r25	; 0x07
    299e:	8e 83       	std	Y+6, r24	; 0x06
    29a0:	8a 81       	ldd	r24, Y+2	; 0x02
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	29 c0       	rjmp	.+82     	; 0x29f8 <fgetc+0x76>
    29a6:	22 ff       	sbrs	r18, 2
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <fgetc+0x46>
    29aa:	e8 81       	ld	r30, Y
    29ac:	f9 81       	ldd	r31, Y+1	; 0x01
    29ae:	80 81       	ld	r24, Z
    29b0:	08 2e       	mov	r0, r24
    29b2:	00 0c       	add	r0, r0
    29b4:	99 0b       	sbc	r25, r25
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	19 f4       	brne	.+6      	; 0x29c0 <fgetc+0x3e>
    29ba:	20 62       	ori	r18, 0x20	; 32
    29bc:	2b 83       	std	Y+3, r18	; 0x03
    29be:	1a c0       	rjmp	.+52     	; 0x29f4 <fgetc+0x72>
    29c0:	31 96       	adiw	r30, 0x01	; 1
    29c2:	f9 83       	std	Y+1, r31	; 0x01
    29c4:	e8 83       	st	Y, r30
    29c6:	0e c0       	rjmp	.+28     	; 0x29e4 <fgetc+0x62>
    29c8:	ea 85       	ldd	r30, Y+10	; 0x0a
    29ca:	fb 85       	ldd	r31, Y+11	; 0x0b
    29cc:	09 95       	icall
    29ce:	97 ff       	sbrs	r25, 7
    29d0:	09 c0       	rjmp	.+18     	; 0x29e4 <fgetc+0x62>
    29d2:	2b 81       	ldd	r18, Y+3	; 0x03
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	11 f0       	breq	.+4      	; 0x29dc <fgetc+0x5a>
    29d8:	80 e2       	ldi	r24, 0x20	; 32
    29da:	01 c0       	rjmp	.+2      	; 0x29de <fgetc+0x5c>
    29dc:	80 e1       	ldi	r24, 0x10	; 16
    29de:	82 2b       	or	r24, r18
    29e0:	8b 83       	std	Y+3, r24	; 0x03
    29e2:	08 c0       	rjmp	.+16     	; 0x29f4 <fgetc+0x72>
    29e4:	2e 81       	ldd	r18, Y+6	; 0x06
    29e6:	3f 81       	ldd	r19, Y+7	; 0x07
    29e8:	2f 5f       	subi	r18, 0xFF	; 255
    29ea:	3f 4f       	sbci	r19, 0xFF	; 255
    29ec:	3f 83       	std	Y+7, r19	; 0x07
    29ee:	2e 83       	std	Y+6, r18	; 0x06
    29f0:	99 27       	eor	r25, r25
    29f2:	02 c0       	rjmp	.+4      	; 0x29f8 <fgetc+0x76>
    29f4:	8f ef       	ldi	r24, 0xFF	; 255
    29f6:	9f ef       	ldi	r25, 0xFF	; 255
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	08 95       	ret

000029fe <printf>:
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	b0 e0       	ldi	r27, 0x00	; 0
    2a02:	e5 e0       	ldi	r30, 0x05	; 5
    2a04:	f5 e1       	ldi	r31, 0x15	; 21
    2a06:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__prologue_saves__+0x20>
    2a0a:	ae 01       	movw	r20, r28
    2a0c:	4b 5f       	subi	r20, 0xFB	; 251
    2a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a10:	fa 01       	movw	r30, r20
    2a12:	61 91       	ld	r22, Z+
    2a14:	71 91       	ld	r23, Z+
    2a16:	af 01       	movw	r20, r30
    2a18:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <__iob+0x2>
    2a1c:	90 91 c5 03 	lds	r25, 0x03C5	; 0x8003c5 <__iob+0x3>
    2a20:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <vfprintf>
    2a24:	e2 e0       	ldi	r30, 0x02	; 2
    2a26:	0c 94 85 18 	jmp	0x310a	; 0x310a <__epilogue_restores__+0x20>

00002a2a <printf_P>:
    2a2a:	a0 e0       	ldi	r26, 0x00	; 0
    2a2c:	b0 e0       	ldi	r27, 0x00	; 0
    2a2e:	eb e1       	ldi	r30, 0x1B	; 27
    2a30:	f5 e1       	ldi	r31, 0x15	; 21
    2a32:	0c 94 67 18 	jmp	0x30ce	; 0x30ce <__prologue_saves__+0x1c>
    2a36:	ae 01       	movw	r20, r28
    2a38:	49 5f       	subi	r20, 0xF9	; 249
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a3c:	da 01       	movw	r26, r20
    2a3e:	6d 91       	ld	r22, X+
    2a40:	7d 91       	ld	r23, X+
    2a42:	ad 01       	movw	r20, r26
    2a44:	02 ec       	ldi	r16, 0xC2	; 194
    2a46:	13 e0       	ldi	r17, 0x03	; 3
    2a48:	f8 01       	movw	r30, r16
    2a4a:	82 81       	ldd	r24, Z+2	; 0x02
    2a4c:	93 81       	ldd	r25, Z+3	; 0x03
    2a4e:	dc 01       	movw	r26, r24
    2a50:	13 96       	adiw	r26, 0x03	; 3
    2a52:	2c 91       	ld	r18, X
    2a54:	13 97       	sbiw	r26, 0x03	; 3
    2a56:	28 60       	ori	r18, 0x08	; 8
    2a58:	13 96       	adiw	r26, 0x03	; 3
    2a5a:	2c 93       	st	X, r18
    2a5c:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <vfprintf>
    2a60:	d8 01       	movw	r26, r16
    2a62:	12 96       	adiw	r26, 0x02	; 2
    2a64:	ed 91       	ld	r30, X+
    2a66:	fc 91       	ld	r31, X
    2a68:	13 97       	sbiw	r26, 0x03	; 3
    2a6a:	23 81       	ldd	r18, Z+3	; 0x03
    2a6c:	27 7f       	andi	r18, 0xF7	; 247
    2a6e:	23 83       	std	Z+3, r18	; 0x03
    2a70:	e4 e0       	ldi	r30, 0x04	; 4
    2a72:	0c 94 83 18 	jmp	0x3106	; 0x3106 <__epilogue_restores__+0x1c>

00002a76 <putchar>:
    2a76:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <__iob+0x2>
    2a7a:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <__iob+0x3>
    2a7e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2a82:	08 95       	ret

00002a84 <puts>:
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	e0 91 c4 03 	lds	r30, 0x03C4	; 0x8003c4 <__iob+0x2>
    2a90:	f0 91 c5 03 	lds	r31, 0x03C5	; 0x8003c5 <__iob+0x3>
    2a94:	23 81       	ldd	r18, Z+3	; 0x03
    2a96:	21 ff       	sbrs	r18, 1
    2a98:	1b c0       	rjmp	.+54     	; 0x2ad0 <puts+0x4c>
    2a9a:	8c 01       	movw	r16, r24
    2a9c:	d0 e0       	ldi	r29, 0x00	; 0
    2a9e:	c0 e0       	ldi	r28, 0x00	; 0
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	81 91       	ld	r24, Z+
    2aa4:	8f 01       	movw	r16, r30
    2aa6:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <__iob+0x2>
    2aaa:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <__iob+0x3>
    2aae:	db 01       	movw	r26, r22
    2ab0:	18 96       	adiw	r26, 0x08	; 8
    2ab2:	ed 91       	ld	r30, X+
    2ab4:	fc 91       	ld	r31, X
    2ab6:	19 97       	sbiw	r26, 0x09	; 9
    2ab8:	88 23       	and	r24, r24
    2aba:	31 f0       	breq	.+12     	; 0x2ac8 <puts+0x44>
    2abc:	09 95       	icall
    2abe:	89 2b       	or	r24, r25
    2ac0:	79 f3       	breq	.-34     	; 0x2aa0 <puts+0x1c>
    2ac2:	df ef       	ldi	r29, 0xFF	; 255
    2ac4:	cf ef       	ldi	r28, 0xFF	; 255
    2ac6:	ec cf       	rjmp	.-40     	; 0x2aa0 <puts+0x1c>
    2ac8:	8a e0       	ldi	r24, 0x0A	; 10
    2aca:	09 95       	icall
    2acc:	89 2b       	or	r24, r25
    2ace:	19 f0       	breq	.+6      	; 0x2ad6 <puts+0x52>
    2ad0:	8f ef       	ldi	r24, 0xFF	; 255
    2ad2:	9f ef       	ldi	r25, 0xFF	; 255
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <puts+0x56>
    2ad6:	8d 2f       	mov	r24, r29
    2ad8:	9c 2f       	mov	r25, r28
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	0f 91       	pop	r16
    2ae2:	08 95       	ret

00002ae4 <vfprintf>:
    2ae4:	ab e0       	ldi	r26, 0x0B	; 11
    2ae6:	b0 e0       	ldi	r27, 0x00	; 0
    2ae8:	e8 e7       	ldi	r30, 0x78	; 120
    2aea:	f5 e1       	ldi	r31, 0x15	; 21
    2aec:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__prologue_saves__>
    2af0:	6c 01       	movw	r12, r24
    2af2:	7b 01       	movw	r14, r22
    2af4:	8a 01       	movw	r16, r20
    2af6:	fc 01       	movw	r30, r24
    2af8:	17 82       	std	Z+7, r1	; 0x07
    2afa:	16 82       	std	Z+6, r1	; 0x06
    2afc:	83 81       	ldd	r24, Z+3	; 0x03
    2afe:	81 ff       	sbrs	r24, 1
    2b00:	cc c1       	rjmp	.+920    	; 0x2e9a <vfprintf+0x3b6>
    2b02:	ce 01       	movw	r24, r28
    2b04:	01 96       	adiw	r24, 0x01	; 1
    2b06:	3c 01       	movw	r6, r24
    2b08:	f6 01       	movw	r30, r12
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	f7 01       	movw	r30, r14
    2b0e:	93 fd       	sbrc	r25, 3
    2b10:	85 91       	lpm	r24, Z+
    2b12:	93 ff       	sbrs	r25, 3
    2b14:	81 91       	ld	r24, Z+
    2b16:	7f 01       	movw	r14, r30
    2b18:	88 23       	and	r24, r24
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <vfprintf+0x3a>
    2b1c:	ba c1       	rjmp	.+884    	; 0x2e92 <vfprintf+0x3ae>
    2b1e:	85 32       	cpi	r24, 0x25	; 37
    2b20:	39 f4       	brne	.+14     	; 0x2b30 <vfprintf+0x4c>
    2b22:	93 fd       	sbrc	r25, 3
    2b24:	85 91       	lpm	r24, Z+
    2b26:	93 ff       	sbrs	r25, 3
    2b28:	81 91       	ld	r24, Z+
    2b2a:	7f 01       	movw	r14, r30
    2b2c:	85 32       	cpi	r24, 0x25	; 37
    2b2e:	29 f4       	brne	.+10     	; 0x2b3a <vfprintf+0x56>
    2b30:	b6 01       	movw	r22, r12
    2b32:	90 e0       	ldi	r25, 0x00	; 0
    2b34:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2b38:	e7 cf       	rjmp	.-50     	; 0x2b08 <vfprintf+0x24>
    2b3a:	91 2c       	mov	r9, r1
    2b3c:	21 2c       	mov	r2, r1
    2b3e:	31 2c       	mov	r3, r1
    2b40:	ff e1       	ldi	r31, 0x1F	; 31
    2b42:	f3 15       	cp	r31, r3
    2b44:	d8 f0       	brcs	.+54     	; 0x2b7c <vfprintf+0x98>
    2b46:	8b 32       	cpi	r24, 0x2B	; 43
    2b48:	79 f0       	breq	.+30     	; 0x2b68 <vfprintf+0x84>
    2b4a:	38 f4       	brcc	.+14     	; 0x2b5a <vfprintf+0x76>
    2b4c:	80 32       	cpi	r24, 0x20	; 32
    2b4e:	79 f0       	breq	.+30     	; 0x2b6e <vfprintf+0x8a>
    2b50:	83 32       	cpi	r24, 0x23	; 35
    2b52:	a1 f4       	brne	.+40     	; 0x2b7c <vfprintf+0x98>
    2b54:	23 2d       	mov	r18, r3
    2b56:	20 61       	ori	r18, 0x10	; 16
    2b58:	1d c0       	rjmp	.+58     	; 0x2b94 <vfprintf+0xb0>
    2b5a:	8d 32       	cpi	r24, 0x2D	; 45
    2b5c:	61 f0       	breq	.+24     	; 0x2b76 <vfprintf+0x92>
    2b5e:	80 33       	cpi	r24, 0x30	; 48
    2b60:	69 f4       	brne	.+26     	; 0x2b7c <vfprintf+0x98>
    2b62:	23 2d       	mov	r18, r3
    2b64:	21 60       	ori	r18, 0x01	; 1
    2b66:	16 c0       	rjmp	.+44     	; 0x2b94 <vfprintf+0xb0>
    2b68:	83 2d       	mov	r24, r3
    2b6a:	82 60       	ori	r24, 0x02	; 2
    2b6c:	38 2e       	mov	r3, r24
    2b6e:	e3 2d       	mov	r30, r3
    2b70:	e4 60       	ori	r30, 0x04	; 4
    2b72:	3e 2e       	mov	r3, r30
    2b74:	2a c0       	rjmp	.+84     	; 0x2bca <vfprintf+0xe6>
    2b76:	f3 2d       	mov	r31, r3
    2b78:	f8 60       	ori	r31, 0x08	; 8
    2b7a:	1d c0       	rjmp	.+58     	; 0x2bb6 <vfprintf+0xd2>
    2b7c:	37 fc       	sbrc	r3, 7
    2b7e:	2d c0       	rjmp	.+90     	; 0x2bda <vfprintf+0xf6>
    2b80:	20 ed       	ldi	r18, 0xD0	; 208
    2b82:	28 0f       	add	r18, r24
    2b84:	2a 30       	cpi	r18, 0x0A	; 10
    2b86:	40 f0       	brcs	.+16     	; 0x2b98 <vfprintf+0xb4>
    2b88:	8e 32       	cpi	r24, 0x2E	; 46
    2b8a:	b9 f4       	brne	.+46     	; 0x2bba <vfprintf+0xd6>
    2b8c:	36 fc       	sbrc	r3, 6
    2b8e:	81 c1       	rjmp	.+770    	; 0x2e92 <vfprintf+0x3ae>
    2b90:	23 2d       	mov	r18, r3
    2b92:	20 64       	ori	r18, 0x40	; 64
    2b94:	32 2e       	mov	r3, r18
    2b96:	19 c0       	rjmp	.+50     	; 0x2bca <vfprintf+0xe6>
    2b98:	36 fe       	sbrs	r3, 6
    2b9a:	06 c0       	rjmp	.+12     	; 0x2ba8 <vfprintf+0xc4>
    2b9c:	8a e0       	ldi	r24, 0x0A	; 10
    2b9e:	98 9e       	mul	r9, r24
    2ba0:	20 0d       	add	r18, r0
    2ba2:	11 24       	eor	r1, r1
    2ba4:	92 2e       	mov	r9, r18
    2ba6:	11 c0       	rjmp	.+34     	; 0x2bca <vfprintf+0xe6>
    2ba8:	ea e0       	ldi	r30, 0x0A	; 10
    2baa:	2e 9e       	mul	r2, r30
    2bac:	20 0d       	add	r18, r0
    2bae:	11 24       	eor	r1, r1
    2bb0:	22 2e       	mov	r2, r18
    2bb2:	f3 2d       	mov	r31, r3
    2bb4:	f0 62       	ori	r31, 0x20	; 32
    2bb6:	3f 2e       	mov	r3, r31
    2bb8:	08 c0       	rjmp	.+16     	; 0x2bca <vfprintf+0xe6>
    2bba:	8c 36       	cpi	r24, 0x6C	; 108
    2bbc:	21 f4       	brne	.+8      	; 0x2bc6 <vfprintf+0xe2>
    2bbe:	83 2d       	mov	r24, r3
    2bc0:	80 68       	ori	r24, 0x80	; 128
    2bc2:	38 2e       	mov	r3, r24
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <vfprintf+0xe6>
    2bc6:	88 36       	cpi	r24, 0x68	; 104
    2bc8:	41 f4       	brne	.+16     	; 0x2bda <vfprintf+0xf6>
    2bca:	f7 01       	movw	r30, r14
    2bcc:	93 fd       	sbrc	r25, 3
    2bce:	85 91       	lpm	r24, Z+
    2bd0:	93 ff       	sbrs	r25, 3
    2bd2:	81 91       	ld	r24, Z+
    2bd4:	7f 01       	movw	r14, r30
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	b3 cf       	rjmp	.-154    	; 0x2b40 <vfprintf+0x5c>
    2bda:	98 2f       	mov	r25, r24
    2bdc:	9f 7d       	andi	r25, 0xDF	; 223
    2bde:	95 54       	subi	r25, 0x45	; 69
    2be0:	93 30       	cpi	r25, 0x03	; 3
    2be2:	28 f4       	brcc	.+10     	; 0x2bee <vfprintf+0x10a>
    2be4:	0c 5f       	subi	r16, 0xFC	; 252
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	9f e3       	ldi	r25, 0x3F	; 63
    2bea:	99 83       	std	Y+1, r25	; 0x01
    2bec:	0d c0       	rjmp	.+26     	; 0x2c08 <vfprintf+0x124>
    2bee:	83 36       	cpi	r24, 0x63	; 99
    2bf0:	31 f0       	breq	.+12     	; 0x2bfe <vfprintf+0x11a>
    2bf2:	83 37       	cpi	r24, 0x73	; 115
    2bf4:	71 f0       	breq	.+28     	; 0x2c12 <vfprintf+0x12e>
    2bf6:	83 35       	cpi	r24, 0x53	; 83
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <vfprintf+0x118>
    2bfa:	59 c0       	rjmp	.+178    	; 0x2cae <vfprintf+0x1ca>
    2bfc:	21 c0       	rjmp	.+66     	; 0x2c40 <vfprintf+0x15c>
    2bfe:	f8 01       	movw	r30, r16
    2c00:	80 81       	ld	r24, Z
    2c02:	89 83       	std	Y+1, r24	; 0x01
    2c04:	0e 5f       	subi	r16, 0xFE	; 254
    2c06:	1f 4f       	sbci	r17, 0xFF	; 255
    2c08:	88 24       	eor	r8, r8
    2c0a:	83 94       	inc	r8
    2c0c:	91 2c       	mov	r9, r1
    2c0e:	53 01       	movw	r10, r6
    2c10:	13 c0       	rjmp	.+38     	; 0x2c38 <vfprintf+0x154>
    2c12:	28 01       	movw	r4, r16
    2c14:	f2 e0       	ldi	r31, 0x02	; 2
    2c16:	4f 0e       	add	r4, r31
    2c18:	51 1c       	adc	r5, r1
    2c1a:	f8 01       	movw	r30, r16
    2c1c:	a0 80       	ld	r10, Z
    2c1e:	b1 80       	ldd	r11, Z+1	; 0x01
    2c20:	36 fe       	sbrs	r3, 6
    2c22:	03 c0       	rjmp	.+6      	; 0x2c2a <vfprintf+0x146>
    2c24:	69 2d       	mov	r22, r9
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	02 c0       	rjmp	.+4      	; 0x2c2e <vfprintf+0x14a>
    2c2a:	6f ef       	ldi	r22, 0xFF	; 255
    2c2c:	7f ef       	ldi	r23, 0xFF	; 255
    2c2e:	c5 01       	movw	r24, r10
    2c30:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <strnlen>
    2c34:	4c 01       	movw	r8, r24
    2c36:	82 01       	movw	r16, r4
    2c38:	f3 2d       	mov	r31, r3
    2c3a:	ff 77       	andi	r31, 0x7F	; 127
    2c3c:	3f 2e       	mov	r3, r31
    2c3e:	16 c0       	rjmp	.+44     	; 0x2c6c <vfprintf+0x188>
    2c40:	28 01       	movw	r4, r16
    2c42:	22 e0       	ldi	r18, 0x02	; 2
    2c44:	42 0e       	add	r4, r18
    2c46:	51 1c       	adc	r5, r1
    2c48:	f8 01       	movw	r30, r16
    2c4a:	a0 80       	ld	r10, Z
    2c4c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c4e:	36 fe       	sbrs	r3, 6
    2c50:	03 c0       	rjmp	.+6      	; 0x2c58 <vfprintf+0x174>
    2c52:	69 2d       	mov	r22, r9
    2c54:	70 e0       	ldi	r23, 0x00	; 0
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <vfprintf+0x178>
    2c58:	6f ef       	ldi	r22, 0xFF	; 255
    2c5a:	7f ef       	ldi	r23, 0xFF	; 255
    2c5c:	c5 01       	movw	r24, r10
    2c5e:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <strnlen_P>
    2c62:	4c 01       	movw	r8, r24
    2c64:	f3 2d       	mov	r31, r3
    2c66:	f0 68       	ori	r31, 0x80	; 128
    2c68:	3f 2e       	mov	r3, r31
    2c6a:	82 01       	movw	r16, r4
    2c6c:	33 fc       	sbrc	r3, 3
    2c6e:	1b c0       	rjmp	.+54     	; 0x2ca6 <vfprintf+0x1c2>
    2c70:	82 2d       	mov	r24, r2
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	88 16       	cp	r8, r24
    2c76:	99 06       	cpc	r9, r25
    2c78:	b0 f4       	brcc	.+44     	; 0x2ca6 <vfprintf+0x1c2>
    2c7a:	b6 01       	movw	r22, r12
    2c7c:	80 e2       	ldi	r24, 0x20	; 32
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2c84:	2a 94       	dec	r2
    2c86:	f4 cf       	rjmp	.-24     	; 0x2c70 <vfprintf+0x18c>
    2c88:	f5 01       	movw	r30, r10
    2c8a:	37 fc       	sbrc	r3, 7
    2c8c:	85 91       	lpm	r24, Z+
    2c8e:	37 fe       	sbrs	r3, 7
    2c90:	81 91       	ld	r24, Z+
    2c92:	5f 01       	movw	r10, r30
    2c94:	b6 01       	movw	r22, r12
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2c9c:	21 10       	cpse	r2, r1
    2c9e:	2a 94       	dec	r2
    2ca0:	21 e0       	ldi	r18, 0x01	; 1
    2ca2:	82 1a       	sub	r8, r18
    2ca4:	91 08       	sbc	r9, r1
    2ca6:	81 14       	cp	r8, r1
    2ca8:	91 04       	cpc	r9, r1
    2caa:	71 f7       	brne	.-36     	; 0x2c88 <vfprintf+0x1a4>
    2cac:	e8 c0       	rjmp	.+464    	; 0x2e7e <vfprintf+0x39a>
    2cae:	84 36       	cpi	r24, 0x64	; 100
    2cb0:	11 f0       	breq	.+4      	; 0x2cb6 <vfprintf+0x1d2>
    2cb2:	89 36       	cpi	r24, 0x69	; 105
    2cb4:	41 f5       	brne	.+80     	; 0x2d06 <vfprintf+0x222>
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	37 fe       	sbrs	r3, 7
    2cba:	07 c0       	rjmp	.+14     	; 0x2cca <vfprintf+0x1e6>
    2cbc:	60 81       	ld	r22, Z
    2cbe:	71 81       	ldd	r23, Z+1	; 0x01
    2cc0:	82 81       	ldd	r24, Z+2	; 0x02
    2cc2:	93 81       	ldd	r25, Z+3	; 0x03
    2cc4:	0c 5f       	subi	r16, 0xFC	; 252
    2cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc8:	08 c0       	rjmp	.+16     	; 0x2cda <vfprintf+0x1f6>
    2cca:	60 81       	ld	r22, Z
    2ccc:	71 81       	ldd	r23, Z+1	; 0x01
    2cce:	07 2e       	mov	r0, r23
    2cd0:	00 0c       	add	r0, r0
    2cd2:	88 0b       	sbc	r24, r24
    2cd4:	99 0b       	sbc	r25, r25
    2cd6:	0e 5f       	subi	r16, 0xFE	; 254
    2cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cda:	f3 2d       	mov	r31, r3
    2cdc:	ff 76       	andi	r31, 0x6F	; 111
    2cde:	3f 2e       	mov	r3, r31
    2ce0:	97 ff       	sbrs	r25, 7
    2ce2:	09 c0       	rjmp	.+18     	; 0x2cf6 <vfprintf+0x212>
    2ce4:	90 95       	com	r25
    2ce6:	80 95       	com	r24
    2ce8:	70 95       	com	r23
    2cea:	61 95       	neg	r22
    2cec:	7f 4f       	sbci	r23, 0xFF	; 255
    2cee:	8f 4f       	sbci	r24, 0xFF	; 255
    2cf0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cf2:	f0 68       	ori	r31, 0x80	; 128
    2cf4:	3f 2e       	mov	r3, r31
    2cf6:	2a e0       	ldi	r18, 0x0A	; 10
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	a3 01       	movw	r20, r6
    2cfc:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__ultoa_invert>
    2d00:	88 2e       	mov	r8, r24
    2d02:	86 18       	sub	r8, r6
    2d04:	45 c0       	rjmp	.+138    	; 0x2d90 <vfprintf+0x2ac>
    2d06:	85 37       	cpi	r24, 0x75	; 117
    2d08:	31 f4       	brne	.+12     	; 0x2d16 <vfprintf+0x232>
    2d0a:	23 2d       	mov	r18, r3
    2d0c:	2f 7e       	andi	r18, 0xEF	; 239
    2d0e:	b2 2e       	mov	r11, r18
    2d10:	2a e0       	ldi	r18, 0x0A	; 10
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	25 c0       	rjmp	.+74     	; 0x2d60 <vfprintf+0x27c>
    2d16:	93 2d       	mov	r25, r3
    2d18:	99 7f       	andi	r25, 0xF9	; 249
    2d1a:	b9 2e       	mov	r11, r25
    2d1c:	8f 36       	cpi	r24, 0x6F	; 111
    2d1e:	c1 f0       	breq	.+48     	; 0x2d50 <vfprintf+0x26c>
    2d20:	18 f4       	brcc	.+6      	; 0x2d28 <vfprintf+0x244>
    2d22:	88 35       	cpi	r24, 0x58	; 88
    2d24:	79 f0       	breq	.+30     	; 0x2d44 <vfprintf+0x260>
    2d26:	b5 c0       	rjmp	.+362    	; 0x2e92 <vfprintf+0x3ae>
    2d28:	80 37       	cpi	r24, 0x70	; 112
    2d2a:	19 f0       	breq	.+6      	; 0x2d32 <vfprintf+0x24e>
    2d2c:	88 37       	cpi	r24, 0x78	; 120
    2d2e:	21 f0       	breq	.+8      	; 0x2d38 <vfprintf+0x254>
    2d30:	b0 c0       	rjmp	.+352    	; 0x2e92 <vfprintf+0x3ae>
    2d32:	e9 2f       	mov	r30, r25
    2d34:	e0 61       	ori	r30, 0x10	; 16
    2d36:	be 2e       	mov	r11, r30
    2d38:	b4 fe       	sbrs	r11, 4
    2d3a:	0d c0       	rjmp	.+26     	; 0x2d56 <vfprintf+0x272>
    2d3c:	fb 2d       	mov	r31, r11
    2d3e:	f4 60       	ori	r31, 0x04	; 4
    2d40:	bf 2e       	mov	r11, r31
    2d42:	09 c0       	rjmp	.+18     	; 0x2d56 <vfprintf+0x272>
    2d44:	34 fe       	sbrs	r3, 4
    2d46:	0a c0       	rjmp	.+20     	; 0x2d5c <vfprintf+0x278>
    2d48:	29 2f       	mov	r18, r25
    2d4a:	26 60       	ori	r18, 0x06	; 6
    2d4c:	b2 2e       	mov	r11, r18
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <vfprintf+0x278>
    2d50:	28 e0       	ldi	r18, 0x08	; 8
    2d52:	30 e0       	ldi	r19, 0x00	; 0
    2d54:	05 c0       	rjmp	.+10     	; 0x2d60 <vfprintf+0x27c>
    2d56:	20 e1       	ldi	r18, 0x10	; 16
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	02 c0       	rjmp	.+4      	; 0x2d60 <vfprintf+0x27c>
    2d5c:	20 e1       	ldi	r18, 0x10	; 16
    2d5e:	32 e0       	ldi	r19, 0x02	; 2
    2d60:	f8 01       	movw	r30, r16
    2d62:	b7 fe       	sbrs	r11, 7
    2d64:	07 c0       	rjmp	.+14     	; 0x2d74 <vfprintf+0x290>
    2d66:	60 81       	ld	r22, Z
    2d68:	71 81       	ldd	r23, Z+1	; 0x01
    2d6a:	82 81       	ldd	r24, Z+2	; 0x02
    2d6c:	93 81       	ldd	r25, Z+3	; 0x03
    2d6e:	0c 5f       	subi	r16, 0xFC	; 252
    2d70:	1f 4f       	sbci	r17, 0xFF	; 255
    2d72:	06 c0       	rjmp	.+12     	; 0x2d80 <vfprintf+0x29c>
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	0e 5f       	subi	r16, 0xFE	; 254
    2d7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d80:	a3 01       	movw	r20, r6
    2d82:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <__ultoa_invert>
    2d86:	88 2e       	mov	r8, r24
    2d88:	86 18       	sub	r8, r6
    2d8a:	fb 2d       	mov	r31, r11
    2d8c:	ff 77       	andi	r31, 0x7F	; 127
    2d8e:	3f 2e       	mov	r3, r31
    2d90:	36 fe       	sbrs	r3, 6
    2d92:	0d c0       	rjmp	.+26     	; 0x2dae <vfprintf+0x2ca>
    2d94:	23 2d       	mov	r18, r3
    2d96:	2e 7f       	andi	r18, 0xFE	; 254
    2d98:	a2 2e       	mov	r10, r18
    2d9a:	89 14       	cp	r8, r9
    2d9c:	58 f4       	brcc	.+22     	; 0x2db4 <vfprintf+0x2d0>
    2d9e:	34 fe       	sbrs	r3, 4
    2da0:	0b c0       	rjmp	.+22     	; 0x2db8 <vfprintf+0x2d4>
    2da2:	32 fc       	sbrc	r3, 2
    2da4:	09 c0       	rjmp	.+18     	; 0x2db8 <vfprintf+0x2d4>
    2da6:	83 2d       	mov	r24, r3
    2da8:	8e 7e       	andi	r24, 0xEE	; 238
    2daa:	a8 2e       	mov	r10, r24
    2dac:	05 c0       	rjmp	.+10     	; 0x2db8 <vfprintf+0x2d4>
    2dae:	b8 2c       	mov	r11, r8
    2db0:	a3 2c       	mov	r10, r3
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <vfprintf+0x2d6>
    2db4:	b8 2c       	mov	r11, r8
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <vfprintf+0x2d6>
    2db8:	b9 2c       	mov	r11, r9
    2dba:	a4 fe       	sbrs	r10, 4
    2dbc:	0f c0       	rjmp	.+30     	; 0x2ddc <vfprintf+0x2f8>
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e8 0d       	add	r30, r8
    2dc2:	f1 1d       	adc	r31, r1
    2dc4:	80 81       	ld	r24, Z
    2dc6:	80 33       	cpi	r24, 0x30	; 48
    2dc8:	21 f4       	brne	.+8      	; 0x2dd2 <vfprintf+0x2ee>
    2dca:	9a 2d       	mov	r25, r10
    2dcc:	99 7e       	andi	r25, 0xE9	; 233
    2dce:	a9 2e       	mov	r10, r25
    2dd0:	09 c0       	rjmp	.+18     	; 0x2de4 <vfprintf+0x300>
    2dd2:	a2 fe       	sbrs	r10, 2
    2dd4:	06 c0       	rjmp	.+12     	; 0x2de2 <vfprintf+0x2fe>
    2dd6:	b3 94       	inc	r11
    2dd8:	b3 94       	inc	r11
    2dda:	04 c0       	rjmp	.+8      	; 0x2de4 <vfprintf+0x300>
    2ddc:	8a 2d       	mov	r24, r10
    2dde:	86 78       	andi	r24, 0x86	; 134
    2de0:	09 f0       	breq	.+2      	; 0x2de4 <vfprintf+0x300>
    2de2:	b3 94       	inc	r11
    2de4:	a3 fc       	sbrc	r10, 3
    2de6:	11 c0       	rjmp	.+34     	; 0x2e0a <vfprintf+0x326>
    2de8:	a0 fe       	sbrs	r10, 0
    2dea:	06 c0       	rjmp	.+12     	; 0x2df8 <vfprintf+0x314>
    2dec:	b2 14       	cp	r11, r2
    2dee:	88 f4       	brcc	.+34     	; 0x2e12 <vfprintf+0x32e>
    2df0:	28 0c       	add	r2, r8
    2df2:	92 2c       	mov	r9, r2
    2df4:	9b 18       	sub	r9, r11
    2df6:	0e c0       	rjmp	.+28     	; 0x2e14 <vfprintf+0x330>
    2df8:	b2 14       	cp	r11, r2
    2dfa:	60 f4       	brcc	.+24     	; 0x2e14 <vfprintf+0x330>
    2dfc:	b6 01       	movw	r22, r12
    2dfe:	80 e2       	ldi	r24, 0x20	; 32
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2e06:	b3 94       	inc	r11
    2e08:	f7 cf       	rjmp	.-18     	; 0x2df8 <vfprintf+0x314>
    2e0a:	b2 14       	cp	r11, r2
    2e0c:	18 f4       	brcc	.+6      	; 0x2e14 <vfprintf+0x330>
    2e0e:	2b 18       	sub	r2, r11
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <vfprintf+0x332>
    2e12:	98 2c       	mov	r9, r8
    2e14:	21 2c       	mov	r2, r1
    2e16:	a4 fe       	sbrs	r10, 4
    2e18:	10 c0       	rjmp	.+32     	; 0x2e3a <vfprintf+0x356>
    2e1a:	b6 01       	movw	r22, r12
    2e1c:	80 e3       	ldi	r24, 0x30	; 48
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2e24:	a2 fe       	sbrs	r10, 2
    2e26:	17 c0       	rjmp	.+46     	; 0x2e56 <vfprintf+0x372>
    2e28:	a1 fc       	sbrc	r10, 1
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <vfprintf+0x34e>
    2e2c:	88 e7       	ldi	r24, 0x78	; 120
    2e2e:	90 e0       	ldi	r25, 0x00	; 0
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <vfprintf+0x352>
    2e32:	88 e5       	ldi	r24, 0x58	; 88
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	b6 01       	movw	r22, r12
    2e38:	0c c0       	rjmp	.+24     	; 0x2e52 <vfprintf+0x36e>
    2e3a:	8a 2d       	mov	r24, r10
    2e3c:	86 78       	andi	r24, 0x86	; 134
    2e3e:	59 f0       	breq	.+22     	; 0x2e56 <vfprintf+0x372>
    2e40:	a1 fe       	sbrs	r10, 1
    2e42:	02 c0       	rjmp	.+4      	; 0x2e48 <vfprintf+0x364>
    2e44:	8b e2       	ldi	r24, 0x2B	; 43
    2e46:	01 c0       	rjmp	.+2      	; 0x2e4a <vfprintf+0x366>
    2e48:	80 e2       	ldi	r24, 0x20	; 32
    2e4a:	a7 fc       	sbrc	r10, 7
    2e4c:	8d e2       	ldi	r24, 0x2D	; 45
    2e4e:	b6 01       	movw	r22, r12
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2e56:	89 14       	cp	r8, r9
    2e58:	38 f4       	brcc	.+14     	; 0x2e68 <vfprintf+0x384>
    2e5a:	b6 01       	movw	r22, r12
    2e5c:	80 e3       	ldi	r24, 0x30	; 48
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2e64:	9a 94       	dec	r9
    2e66:	f7 cf       	rjmp	.-18     	; 0x2e56 <vfprintf+0x372>
    2e68:	8a 94       	dec	r8
    2e6a:	f3 01       	movw	r30, r6
    2e6c:	e8 0d       	add	r30, r8
    2e6e:	f1 1d       	adc	r31, r1
    2e70:	80 81       	ld	r24, Z
    2e72:	b6 01       	movw	r22, r12
    2e74:	90 e0       	ldi	r25, 0x00	; 0
    2e76:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2e7a:	81 10       	cpse	r8, r1
    2e7c:	f5 cf       	rjmp	.-22     	; 0x2e68 <vfprintf+0x384>
    2e7e:	22 20       	and	r2, r2
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <vfprintf+0x3a0>
    2e82:	42 ce       	rjmp	.-892    	; 0x2b08 <vfprintf+0x24>
    2e84:	b6 01       	movw	r22, r12
    2e86:	80 e2       	ldi	r24, 0x20	; 32
    2e88:	90 e0       	ldi	r25, 0x00	; 0
    2e8a:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <fputc>
    2e8e:	2a 94       	dec	r2
    2e90:	f6 cf       	rjmp	.-20     	; 0x2e7e <vfprintf+0x39a>
    2e92:	f6 01       	movw	r30, r12
    2e94:	86 81       	ldd	r24, Z+6	; 0x06
    2e96:	97 81       	ldd	r25, Z+7	; 0x07
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <vfprintf+0x3ba>
    2e9a:	8f ef       	ldi	r24, 0xFF	; 255
    2e9c:	9f ef       	ldi	r25, 0xFF	; 255
    2e9e:	2b 96       	adiw	r28, 0x0b	; 11
    2ea0:	e2 e1       	ldi	r30, 0x12	; 18
    2ea2:	0c 94 75 18 	jmp	0x30ea	; 0x30ea <__epilogue_restores__>

00002ea6 <strnlen_P>:
    2ea6:	fc 01       	movw	r30, r24
    2ea8:	05 90       	lpm	r0, Z+
    2eaa:	61 50       	subi	r22, 0x01	; 1
    2eac:	70 40       	sbci	r23, 0x00	; 0
    2eae:	01 10       	cpse	r0, r1
    2eb0:	d8 f7       	brcc	.-10     	; 0x2ea8 <strnlen_P+0x2>
    2eb2:	80 95       	com	r24
    2eb4:	90 95       	com	r25
    2eb6:	8e 0f       	add	r24, r30
    2eb8:	9f 1f       	adc	r25, r31
    2eba:	08 95       	ret

00002ebc <strnlen>:
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	61 50       	subi	r22, 0x01	; 1
    2ec0:	70 40       	sbci	r23, 0x00	; 0
    2ec2:	01 90       	ld	r0, Z+
    2ec4:	01 10       	cpse	r0, r1
    2ec6:	d8 f7       	brcc	.-10     	; 0x2ebe <strnlen+0x2>
    2ec8:	80 95       	com	r24
    2eca:	90 95       	com	r25
    2ecc:	8e 0f       	add	r24, r30
    2ece:	9f 1f       	adc	r25, r31
    2ed0:	08 95       	ret

00002ed2 <fputc>:
    2ed2:	0f 93       	push	r16
    2ed4:	1f 93       	push	r17
    2ed6:	cf 93       	push	r28
    2ed8:	df 93       	push	r29
    2eda:	fb 01       	movw	r30, r22
    2edc:	23 81       	ldd	r18, Z+3	; 0x03
    2ede:	21 fd       	sbrc	r18, 1
    2ee0:	03 c0       	rjmp	.+6      	; 0x2ee8 <fputc+0x16>
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	9f ef       	ldi	r25, 0xFF	; 255
    2ee6:	2c c0       	rjmp	.+88     	; 0x2f40 <fputc+0x6e>
    2ee8:	22 ff       	sbrs	r18, 2
    2eea:	16 c0       	rjmp	.+44     	; 0x2f18 <fputc+0x46>
    2eec:	46 81       	ldd	r20, Z+6	; 0x06
    2eee:	57 81       	ldd	r21, Z+7	; 0x07
    2ef0:	24 81       	ldd	r18, Z+4	; 0x04
    2ef2:	35 81       	ldd	r19, Z+5	; 0x05
    2ef4:	42 17       	cp	r20, r18
    2ef6:	53 07       	cpc	r21, r19
    2ef8:	44 f4       	brge	.+16     	; 0x2f0a <fputc+0x38>
    2efa:	a0 81       	ld	r26, Z
    2efc:	b1 81       	ldd	r27, Z+1	; 0x01
    2efe:	9d 01       	movw	r18, r26
    2f00:	2f 5f       	subi	r18, 0xFF	; 255
    2f02:	3f 4f       	sbci	r19, 0xFF	; 255
    2f04:	31 83       	std	Z+1, r19	; 0x01
    2f06:	20 83       	st	Z, r18
    2f08:	8c 93       	st	X, r24
    2f0a:	26 81       	ldd	r18, Z+6	; 0x06
    2f0c:	37 81       	ldd	r19, Z+7	; 0x07
    2f0e:	2f 5f       	subi	r18, 0xFF	; 255
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	37 83       	std	Z+7, r19	; 0x07
    2f14:	26 83       	std	Z+6, r18	; 0x06
    2f16:	14 c0       	rjmp	.+40     	; 0x2f40 <fputc+0x6e>
    2f18:	8b 01       	movw	r16, r22
    2f1a:	ec 01       	movw	r28, r24
    2f1c:	fb 01       	movw	r30, r22
    2f1e:	00 84       	ldd	r0, Z+8	; 0x08
    2f20:	f1 85       	ldd	r31, Z+9	; 0x09
    2f22:	e0 2d       	mov	r30, r0
    2f24:	09 95       	icall
    2f26:	89 2b       	or	r24, r25
    2f28:	e1 f6       	brne	.-72     	; 0x2ee2 <fputc+0x10>
    2f2a:	d8 01       	movw	r26, r16
    2f2c:	16 96       	adiw	r26, 0x06	; 6
    2f2e:	8d 91       	ld	r24, X+
    2f30:	9c 91       	ld	r25, X
    2f32:	17 97       	sbiw	r26, 0x07	; 7
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	17 96       	adiw	r26, 0x07	; 7
    2f38:	9c 93       	st	X, r25
    2f3a:	8e 93       	st	-X, r24
    2f3c:	16 97       	sbiw	r26, 0x06	; 6
    2f3e:	ce 01       	movw	r24, r28
    2f40:	df 91       	pop	r29
    2f42:	cf 91       	pop	r28
    2f44:	1f 91       	pop	r17
    2f46:	0f 91       	pop	r16
    2f48:	08 95       	ret

00002f4a <__ultoa_invert>:
    2f4a:	fa 01       	movw	r30, r20
    2f4c:	aa 27       	eor	r26, r26
    2f4e:	28 30       	cpi	r18, 0x08	; 8
    2f50:	51 f1       	breq	.+84     	; 0x2fa6 <__ultoa_invert+0x5c>
    2f52:	20 31       	cpi	r18, 0x10	; 16
    2f54:	81 f1       	breq	.+96     	; 0x2fb6 <__ultoa_invert+0x6c>
    2f56:	e8 94       	clt
    2f58:	6f 93       	push	r22
    2f5a:	6e 7f       	andi	r22, 0xFE	; 254
    2f5c:	6e 5f       	subi	r22, 0xFE	; 254
    2f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f60:	8f 4f       	sbci	r24, 0xFF	; 255
    2f62:	9f 4f       	sbci	r25, 0xFF	; 255
    2f64:	af 4f       	sbci	r26, 0xFF	; 255
    2f66:	b1 e0       	ldi	r27, 0x01	; 1
    2f68:	3e d0       	rcall	.+124    	; 0x2fe6 <__ultoa_invert+0x9c>
    2f6a:	b4 e0       	ldi	r27, 0x04	; 4
    2f6c:	3c d0       	rcall	.+120    	; 0x2fe6 <__ultoa_invert+0x9c>
    2f6e:	67 0f       	add	r22, r23
    2f70:	78 1f       	adc	r23, r24
    2f72:	89 1f       	adc	r24, r25
    2f74:	9a 1f       	adc	r25, r26
    2f76:	a1 1d       	adc	r26, r1
    2f78:	68 0f       	add	r22, r24
    2f7a:	79 1f       	adc	r23, r25
    2f7c:	8a 1f       	adc	r24, r26
    2f7e:	91 1d       	adc	r25, r1
    2f80:	a1 1d       	adc	r26, r1
    2f82:	6a 0f       	add	r22, r26
    2f84:	71 1d       	adc	r23, r1
    2f86:	81 1d       	adc	r24, r1
    2f88:	91 1d       	adc	r25, r1
    2f8a:	a1 1d       	adc	r26, r1
    2f8c:	20 d0       	rcall	.+64     	; 0x2fce <__ultoa_invert+0x84>
    2f8e:	09 f4       	brne	.+2      	; 0x2f92 <__ultoa_invert+0x48>
    2f90:	68 94       	set
    2f92:	3f 91       	pop	r19
    2f94:	2a e0       	ldi	r18, 0x0A	; 10
    2f96:	26 9f       	mul	r18, r22
    2f98:	11 24       	eor	r1, r1
    2f9a:	30 19       	sub	r19, r0
    2f9c:	30 5d       	subi	r19, 0xD0	; 208
    2f9e:	31 93       	st	Z+, r19
    2fa0:	de f6       	brtc	.-74     	; 0x2f58 <__ultoa_invert+0xe>
    2fa2:	cf 01       	movw	r24, r30
    2fa4:	08 95       	ret
    2fa6:	46 2f       	mov	r20, r22
    2fa8:	47 70       	andi	r20, 0x07	; 7
    2faa:	40 5d       	subi	r20, 0xD0	; 208
    2fac:	41 93       	st	Z+, r20
    2fae:	b3 e0       	ldi	r27, 0x03	; 3
    2fb0:	0f d0       	rcall	.+30     	; 0x2fd0 <__ultoa_invert+0x86>
    2fb2:	c9 f7       	brne	.-14     	; 0x2fa6 <__ultoa_invert+0x5c>
    2fb4:	f6 cf       	rjmp	.-20     	; 0x2fa2 <__ultoa_invert+0x58>
    2fb6:	46 2f       	mov	r20, r22
    2fb8:	4f 70       	andi	r20, 0x0F	; 15
    2fba:	40 5d       	subi	r20, 0xD0	; 208
    2fbc:	4a 33       	cpi	r20, 0x3A	; 58
    2fbe:	18 f0       	brcs	.+6      	; 0x2fc6 <__ultoa_invert+0x7c>
    2fc0:	49 5d       	subi	r20, 0xD9	; 217
    2fc2:	31 fd       	sbrc	r19, 1
    2fc4:	40 52       	subi	r20, 0x20	; 32
    2fc6:	41 93       	st	Z+, r20
    2fc8:	02 d0       	rcall	.+4      	; 0x2fce <__ultoa_invert+0x84>
    2fca:	a9 f7       	brne	.-22     	; 0x2fb6 <__ultoa_invert+0x6c>
    2fcc:	ea cf       	rjmp	.-44     	; 0x2fa2 <__ultoa_invert+0x58>
    2fce:	b4 e0       	ldi	r27, 0x04	; 4
    2fd0:	a6 95       	lsr	r26
    2fd2:	97 95       	ror	r25
    2fd4:	87 95       	ror	r24
    2fd6:	77 95       	ror	r23
    2fd8:	67 95       	ror	r22
    2fda:	ba 95       	dec	r27
    2fdc:	c9 f7       	brne	.-14     	; 0x2fd0 <__ultoa_invert+0x86>
    2fde:	00 97       	sbiw	r24, 0x00	; 0
    2fe0:	61 05       	cpc	r22, r1
    2fe2:	71 05       	cpc	r23, r1
    2fe4:	08 95       	ret
    2fe6:	9b 01       	movw	r18, r22
    2fe8:	ac 01       	movw	r20, r24
    2fea:	0a 2e       	mov	r0, r26
    2fec:	06 94       	lsr	r0
    2fee:	57 95       	ror	r21
    2ff0:	47 95       	ror	r20
    2ff2:	37 95       	ror	r19
    2ff4:	27 95       	ror	r18
    2ff6:	ba 95       	dec	r27
    2ff8:	c9 f7       	brne	.-14     	; 0x2fec <__ultoa_invert+0xa2>
    2ffa:	62 0f       	add	r22, r18
    2ffc:	73 1f       	adc	r23, r19
    2ffe:	84 1f       	adc	r24, r20
    3000:	95 1f       	adc	r25, r21
    3002:	a0 1d       	adc	r26, r0
    3004:	08 95       	ret

00003006 <eeprom_read_block>:
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22

0000300a <eeprom_read_blraw>:
    300a:	fc 01       	movw	r30, r24
    300c:	f9 99       	sbic	0x1f, 1	; 31
    300e:	fe cf       	rjmp	.-4      	; 0x300c <eeprom_read_blraw+0x2>
    3010:	06 c0       	rjmp	.+12     	; 0x301e <eeprom_read_blraw+0x14>
    3012:	f2 bd       	out	0x22, r31	; 34
    3014:	e1 bd       	out	0x21, r30	; 33
    3016:	f8 9a       	sbi	0x1f, 0	; 31
    3018:	31 96       	adiw	r30, 0x01	; 1
    301a:	00 b4       	in	r0, 0x20	; 32
    301c:	0d 92       	st	X+, r0
    301e:	41 50       	subi	r20, 0x01	; 1
    3020:	50 40       	sbci	r21, 0x00	; 0
    3022:	b8 f7       	brcc	.-18     	; 0x3012 <eeprom_read_blraw+0x8>
    3024:	08 95       	ret

00003026 <eeprom_read_byte>:
    3026:	f9 99       	sbic	0x1f, 1	; 31
    3028:	fe cf       	rjmp	.-4      	; 0x3026 <eeprom_read_byte>
    302a:	92 bd       	out	0x22, r25	; 34
    302c:	81 bd       	out	0x21, r24	; 33
    302e:	f8 9a       	sbi	0x1f, 0	; 31
    3030:	99 27       	eor	r25, r25
    3032:	80 b5       	in	r24, 0x20	; 32
    3034:	08 95       	ret

00003036 <eeprom_read_dword>:
    3036:	a6 e1       	ldi	r26, 0x16	; 22
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	44 e0       	ldi	r20, 0x04	; 4
    303c:	50 e0       	ldi	r21, 0x00	; 0
    303e:	0c 94 05 18 	jmp	0x300a	; 0x300a <eeprom_read_blraw>

00003042 <eeprom_write_block>:
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	03 c0       	rjmp	.+6      	; 0x304e <eeprom_write_block+0xc>
    3048:	2d 91       	ld	r18, X+
    304a:	0e 94 2c 18 	call	0x3058	; 0x3058 <eeprom_write_r18>
    304e:	41 50       	subi	r20, 0x01	; 1
    3050:	50 40       	sbci	r21, 0x00	; 0
    3052:	d0 f7       	brcc	.-12     	; 0x3048 <eeprom_write_block+0x6>
    3054:	08 95       	ret

00003056 <eeprom_write_byte>:
    3056:	26 2f       	mov	r18, r22

00003058 <eeprom_write_r18>:
    3058:	f9 99       	sbic	0x1f, 1	; 31
    305a:	fe cf       	rjmp	.-4      	; 0x3058 <eeprom_write_r18>
    305c:	1f ba       	out	0x1f, r1	; 31
    305e:	92 bd       	out	0x22, r25	; 34
    3060:	81 bd       	out	0x21, r24	; 33
    3062:	20 bd       	out	0x20, r18	; 32
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	fa 9a       	sbi	0x1f, 2	; 31
    306a:	f9 9a       	sbi	0x1f, 1	; 31
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	08 95       	ret

00003072 <eeprom_write_dword>:
    3072:	24 2f       	mov	r18, r20
    3074:	0e 94 2c 18 	call	0x3058	; 0x3058 <eeprom_write_r18>
    3078:	25 2f       	mov	r18, r21
    307a:	0e 94 2c 18 	call	0x3058	; 0x3058 <eeprom_write_r18>
    307e:	0c 94 41 18 	jmp	0x3082	; 0x3082 <eeprom_write_word>

00003082 <eeprom_write_word>:
    3082:	0e 94 2b 18 	call	0x3056	; 0x3056 <eeprom_write_byte>
    3086:	27 2f       	mov	r18, r23
    3088:	0c 94 2c 18 	jmp	0x3058	; 0x3058 <eeprom_write_r18>

0000308c <__muluhisi3>:
    308c:	0e 94 90 18 	call	0x3120	; 0x3120 <__umulhisi3>
    3090:	a5 9f       	mul	r26, r21
    3092:	90 0d       	add	r25, r0
    3094:	b4 9f       	mul	r27, r20
    3096:	90 0d       	add	r25, r0
    3098:	a4 9f       	mul	r26, r20
    309a:	80 0d       	add	r24, r0
    309c:	91 1d       	adc	r25, r1
    309e:	11 24       	eor	r1, r1
    30a0:	08 95       	ret

000030a2 <__mulshisi3>:
    30a2:	b7 ff       	sbrs	r27, 7
    30a4:	0c 94 46 18 	jmp	0x308c	; 0x308c <__muluhisi3>

000030a8 <__mulohisi3>:
    30a8:	0e 94 46 18 	call	0x308c	; 0x308c <__muluhisi3>
    30ac:	82 1b       	sub	r24, r18
    30ae:	93 0b       	sbc	r25, r19
    30b0:	08 95       	ret

000030b2 <__prologue_saves__>:
    30b2:	2f 92       	push	r2
    30b4:	3f 92       	push	r3
    30b6:	4f 92       	push	r4
    30b8:	5f 92       	push	r5
    30ba:	6f 92       	push	r6
    30bc:	7f 92       	push	r7
    30be:	8f 92       	push	r8
    30c0:	9f 92       	push	r9
    30c2:	af 92       	push	r10
    30c4:	bf 92       	push	r11
    30c6:	cf 92       	push	r12
    30c8:	df 92       	push	r13
    30ca:	ef 92       	push	r14
    30cc:	ff 92       	push	r15
    30ce:	0f 93       	push	r16
    30d0:	1f 93       	push	r17
    30d2:	cf 93       	push	r28
    30d4:	df 93       	push	r29
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
    30da:	ca 1b       	sub	r28, r26
    30dc:	db 0b       	sbc	r29, r27
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	09 94       	ijmp

000030ea <__epilogue_restores__>:
    30ea:	2a 88       	ldd	r2, Y+18	; 0x12
    30ec:	39 88       	ldd	r3, Y+17	; 0x11
    30ee:	48 88       	ldd	r4, Y+16	; 0x10
    30f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    30f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    30f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    30f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    30f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    30fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    30fc:	b9 84       	ldd	r11, Y+9	; 0x09
    30fe:	c8 84       	ldd	r12, Y+8	; 0x08
    3100:	df 80       	ldd	r13, Y+7	; 0x07
    3102:	ee 80       	ldd	r14, Y+6	; 0x06
    3104:	fd 80       	ldd	r15, Y+5	; 0x05
    3106:	0c 81       	ldd	r16, Y+4	; 0x04
    3108:	1b 81       	ldd	r17, Y+3	; 0x03
    310a:	aa 81       	ldd	r26, Y+2	; 0x02
    310c:	b9 81       	ldd	r27, Y+1	; 0x01
    310e:	ce 0f       	add	r28, r30
    3110:	d1 1d       	adc	r29, r1
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	ed 01       	movw	r28, r26
    311e:	08 95       	ret

00003120 <__umulhisi3>:
    3120:	a2 9f       	mul	r26, r18
    3122:	b0 01       	movw	r22, r0
    3124:	b3 9f       	mul	r27, r19
    3126:	c0 01       	movw	r24, r0
    3128:	a3 9f       	mul	r26, r19
    312a:	70 0d       	add	r23, r0
    312c:	81 1d       	adc	r24, r1
    312e:	11 24       	eor	r1, r1
    3130:	91 1d       	adc	r25, r1
    3132:	b2 9f       	mul	r27, r18
    3134:	70 0d       	add	r23, r0
    3136:	81 1d       	adc	r24, r1
    3138:	11 24       	eor	r1, r1
    313a:	91 1d       	adc	r25, r1
    313c:	08 95       	ret

0000313e <_exit>:
    313e:	f8 94       	cli

00003140 <__stop_program>:
    3140:	ff cf       	rjmp	.-2      	; 0x3140 <__stop_program>
