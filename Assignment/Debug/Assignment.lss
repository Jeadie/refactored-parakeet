
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000196  00800100  000031da  0000326e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000031da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  00800296  00800296  00003404  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003404  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003460  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000740  00000000  00000000  000034a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000682b  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002089  00000000  00000000  0000a40b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037cf  00000000  00000000  0000c494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001140  00000000  00000000  0000fc64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c8  00000000  00000000  00010da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003478  00000000  00000000  0001266c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00015ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 85 12 	jmp	0x250a	; 0x250a <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 e5 0e 	jmp	0x1dca	; 0x1dca <__vector_20>
      54:	0c 94 a3 0e 	jmp	0x1d46	; 0x1d46 <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2556>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2554>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2112>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2110>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2064>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2060>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2056>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2046>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2031>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	ea ed       	ldi	r30, 0xDA	; 218
     1fa:	f1 e3       	ldi	r31, 0x31	; 49
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a6 39       	cpi	r26, 0x96	; 150
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	a6 e9       	ldi	r26, 0x96	; 150
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	ad 31       	cpi	r26, 0x1D	; 29
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <main>
     21c:	0c 94 eb 18 	jmp	0x31d6	; 0x31d6 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e9 56       	subi	r30, 0x69	; 105
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	ea 56       	subi	r30, 0x6A	; 106
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 96 02 	lds	r25, 0x0296	; 0x800296 <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 96 02 	sts	0x0296, r25	; 0x800296 <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e9 56       	subi	r30, 0x69	; 105
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 9f 02 	sts	0x029F, r20	; 0x80029f <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     344:	89 b1       	in	r24, 0x09	; 9
     346:	83 fb       	bst	r24, 3
     348:	88 27       	eor	r24, r24
     34a:	80 f9       	bld	r24, 0
     34c:	08 95       	ret

0000034e <buzzer_time_left>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
     35e:	40 91 a0 02 	lds	r20, 0x02A0	; 0x8002a0 <buzzer_time>
     362:	50 91 a1 02 	lds	r21, 0x02A1	; 0x8002a1 <buzzer_time+0x1>
     366:	6a 01       	movw	r12, r20
     368:	55 0f       	add	r21, r21
     36a:	ee 08       	sbc	r14, r14
     36c:	ff 08       	sbc	r15, r15
     36e:	00 91 f3 02 	lds	r16, 0x02F3	; 0x8002f3 <clock_at_tone_start>
     372:	10 91 f4 02 	lds	r17, 0x02F4	; 0x8002f4 <clock_at_tone_start+0x1>
     376:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <clock_at_tone_start+0x2>
     37a:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <clock_at_tone_start+0x3>
     37e:	c0 0e       	add	r12, r16
     380:	d1 1e       	adc	r13, r17
     382:	e2 1e       	adc	r14, r18
     384:	f3 1e       	adc	r15, r19
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	6c 15       	cp	r22, r12
     38c:	7d 05       	cpc	r23, r13
     38e:	8e 05       	cpc	r24, r14
     390:	9f 05       	cpc	r25, r15
     392:	10 f0       	brcs	.+4      	; 0x398 <buzzer_time_left+0x4a>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	c9 01       	movw	r24, r18
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <next_buzzer_tone>:
     3a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     3ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	e1 52       	subi	r30, 0x21	; 33
     3c2:	fd 4f       	sbci	r31, 0xFD	; 253
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <change_OCR1A>
     3cc:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
     3d0:	60 93 f3 02 	sts	0x02F3, r22	; 0x8002f3 <clock_at_tone_start>
     3d4:	70 93 f4 02 	sts	0x02F4, r23	; 0x8002f4 <clock_at_tone_start+0x1>
     3d8:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <clock_at_tone_start+0x2>
     3dc:	90 93 f6 02 	sts	0x02F6, r25	; 0x8002f6 <clock_at_tone_start+0x3>
     3e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     3e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	e7 51       	subi	r30, 0x17	; 23
     3ee:	fd 4f       	sbci	r31, 0xFD	; 253
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <buzzer_time+0x1>
     3f8:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <buzzer_time>
     3fc:	08 95       	ret

000003fe <reset_buzzer>:
     3fe:	55 98       	cbi	0x0a, 5	; 10
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
     404:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     408:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     40c:	08 95       	ret

0000040e <play_start_game_sound_effect>:
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <number_of_tones+0x1>
     416:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <number_of_tones>
     41a:	e9 ee       	ldi	r30, 0xE9	; 233
     41c:	f2 e0       	ldi	r31, 0x02	; 2
     41e:	84 ef       	ldi	r24, 0xF4	; 244
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	28 ec       	ldi	r18, 0xC8	; 200
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	33 83       	std	Z+3, r19	; 0x03
     42c:	22 83       	std	Z+2, r18	; 0x02
     42e:	95 83       	std	Z+5, r25	; 0x05
     430:	84 83       	std	Z+4, r24	; 0x04
     432:	ef ed       	ldi	r30, 0xDF	; 223
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
     43e:	28 ee       	ldi	r18, 0xE8	; 232
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	33 83       	std	Z+3, r19	; 0x03
     444:	22 83       	std	Z+2, r18	; 0x02
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     452:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     45a:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     45e:	81 11       	cpse	r24, r1
     460:	0e 94 d6 12 	call	0x25ac	; 0x25ac <enable_timer_one>
     464:	08 95       	ret

00000466 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <number_of_tones+0x1>
     46e:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <number_of_tones>
		buzzer_durations[0] = 50;
     472:	e9 ee       	ldi	r30, 0xE9	; 233
     474:	f2 e0       	ldi	r31, 0x02	; 2
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     486:	ef ed       	ldi	r30, 0xDF	; 223
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	80 ed       	ldi	r24, 0xD0	; 208
     48c:	97 e0       	ldi	r25, 0x07	; 7
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	93 83       	std	Z+3, r25	; 0x03
     498:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     4a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     4aa:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     4ae:	81 11       	cpse	r24, r1
			enable_timer_one();
     4b0:	0e 94 d6 12 	call	0x25ac	; 0x25ac <enable_timer_one>
     4b4:	08 95       	ret

000004b6 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     4b6:	20 91 dd 02 	lds	r18, 0x02DD	; 0x8002dd <number_of_tones>
     4ba:	30 91 de 02 	lds	r19, 0x02DE	; 0x8002de <number_of_tones+0x1>
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	31 09       	sbc	r19, r1
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     4ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     4ce:	42 17       	cp	r20, r18
     4d0:	53 07       	cpc	r21, r19
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <last_tone_in_sequence+0x22>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	}
     4d8:	08 95       	ret

000004da <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4da:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4de:	89 2b       	or	r24, r25
     4e0:	59 f4       	brne	.+22     	; 0x4f8 <handle_buzzer_loop+0x1e>
     4e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <last_tone_in_sequence>
     4e6:	89 2b       	or	r24, r25
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     4ea:	67 e0       	ldi	r22, 0x07	; 7
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     4f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <reset_buzzer>
     4f6:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4f8:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4fc:	89 2b       	or	r24, r25
     4fe:	11 f4       	brne	.+4      	; 0x504 <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     500:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     504:	08 95       	ret

00000506 <EEPROM_has_saved_game>:
#include <avr/interrupt.h>
#include "EEPROM_Game_Save.h"
#include <avr/eeprom.h>

uint8_t EEPROM_has_saved_game(void){
	uint32_t current_signature = eeprom_read_dword(SAVE_GAME_SIGNATURE_MEMORY); 
     506:	80 e8       	ldi	r24, 0x80	; 128
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
	return (current_signature == SAVE_GAME_SIGNATURE); 
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	61 15       	cp	r22, r1
     512:	72 41       	sbci	r23, 0x12	; 18
     514:	81 05       	cpc	r24, r1
     516:	91 05       	cpc	r25, r1
     518:	09 f0       	breq	.+2      	; 0x51c <EEPROM_has_saved_game+0x16>
     51a:	20 e0       	ldi	r18, 0x00	; 0
}
     51c:	82 2f       	mov	r24, r18
     51e:	08 95       	ret

00000520 <print_save_details>:
	print_save_details();
	sei();

}
void print_save_details(void){
	printf("F1 :%u \n", eeprom_read_byte(FOOD_ONE));
     520:	80 ea       	ldi	r24, 0xA0	; 160
     522:	91 e0       	ldi	r25, 0x01	; 1
     524:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     528:	1f 92       	push	r1
     52a:	8f 93       	push	r24
     52c:	82 e3       	ldi	r24, 0x32	; 50
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	9f 93       	push	r25
     532:	8f 93       	push	r24
     534:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("F2 :%u \n", eeprom_read_byte(FOOD_TWO));
     538:	88 ea       	ldi	r24, 0xA8	; 168
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     540:	1f 92       	push	r1
     542:	8f 93       	push	r24
     544:	8b e3       	ldi	r24, 0x3B	; 59
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	9f 93       	push	r25
     54a:	8f 93       	push	r24
     54c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("F3:%u \n", eeprom_read_byte(FOOD_THREE));
     550:	80 eb       	ldi	r24, 0xB0	; 176
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     558:	1f 92       	push	r1
     55a:	8f 93       	push	r24
     55c:	84 e4       	ldi	r24, 0x44	; 68
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("F4 :%u \n", eeprom_read_byte(FOOD_FOUR));
     568:	88 eb       	ldi	r24, 0xB8	; 184
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     570:	1f 92       	push	r1
     572:	8f 93       	push	r24
     574:	8c e4       	ldi	r24, 0x4C	; 76
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	9f 93       	push	r25
     57a:	8f 93       	push	r24
     57c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("S1 :%u \n", eeprom_read_byte(SUPERFOOD));
     580:	88 ec       	ldi	r24, 0xC8	; 200
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     588:	1f 92       	push	r1
     58a:	8f 93       	push	r24
     58c:	85 e5       	ldi	r24, 0x55	; 85
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("R1 :%u \n", eeprom_read_byte(RAT));
     598:	80 ec       	ldi	r24, 0xC0	; 192
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     5a0:	1f 92       	push	r1
     5a2:	8f 93       	push	r24
     5a4:	8e e5       	ldi	r24, 0x5E	; 94
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("Game Speed :%u \n", eeprom_read_word(GAME_SPEED));
     5b0:	80 ed       	ldi	r24, 0xD0	; 208
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 61 18 	call	0x30c2	; 0x30c2 <eeprom_read_word>
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	87 e6       	ldi	r24, 0x67	; 103
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	9f 93       	push	r25
     5c2:	8f 93       	push	r24
     5c4:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("G Score :%lu \n", eeprom_read_dword(GAME_SCORE));  // not working
     5c8:	80 ee       	ldi	r24, 0xE0	; 224
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     5d0:	9f 93       	push	r25
     5d2:	8f 93       	push	r24
     5d4:	7f 93       	push	r23
     5d6:	6f 93       	push	r22
     5d8:	88 e7       	ldi	r24, 0x78	; 120
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	9f 93       	push	r25
     5de:	8f 93       	push	r24
     5e0:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("Snake Length :%u \n", eeprom_read_byte(SNAKE_LENGTH));
     5e4:	8d b7       	in	r24, 0x3d	; 61
     5e6:	9e b7       	in	r25, 0x3e	; 62
     5e8:	82 96       	adiw	r24, 0x22	; 34
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	9e bf       	out	0x3e, r25	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	8d bf       	out	0x3d, r24	; 61
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	92 e0       	ldi	r25, 0x02	; 2
     5f8:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     5fc:	1f 92       	push	r1
     5fe:	8f 93       	push	r24
     600:	87 e8       	ldi	r24, 0x87	; 135
     602:	91 e0       	ldi	r25, 0x01	; 1
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("Snake Head :%u \n", eeprom_read_byte(SNAKE_POSITION_HEAD)); // not working
     60c:	88 e1       	ldi	r24, 0x18	; 24
     60e:	92 e0       	ldi	r25, 0x02	; 2
     610:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     614:	1f 92       	push	r1
     616:	8f 93       	push	r24
     618:	8a e9       	ldi	r24, 0x9A	; 154
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	printf("G time :%lu \n", eeprom_read_dword(CLOCK_TICKS));
     624:	88 e0       	ldi	r24, 0x08	; 8
     626:	92 e0       	ldi	r25, 0x02	; 2
     628:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     62c:	9f 93       	push	r25
     62e:	8f 93       	push	r24
     630:	7f 93       	push	r23
     632:	6f 93       	push	r22
     634:	8b ea       	ldi	r24, 0xAB	; 171
     636:	91 e0       	ldi	r25, 0x01	; 1
     638:	9f 93       	push	r25
     63a:	8f 93       	push	r24
     63c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	
}
     640:	8d b7       	in	r24, 0x3d	; 61
     642:	9e b7       	in	r25, 0x3e	; 62
     644:	0e 96       	adiw	r24, 0x0e	; 14
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	9e bf       	out	0x3e, r25	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	8d bf       	out	0x3d, r24	; 61
     650:	08 95       	ret

00000652 <save_game_to_EPPROM>:
uint8_t EEPROM_has_saved_game(void){
	uint32_t current_signature = eeprom_read_dword(SAVE_GAME_SIGNATURE_MEMORY); 
	return (current_signature == SAVE_GAME_SIGNATURE); 
}

void save_game_to_EPPROM(void){
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
	cli();
     65a:	f8 94       	cli
	// Save the Food Positions
	eeprom_write_dword(SAVE_GAME_SIGNATURE_MEMORY, SAVE_GAME_SIGNATURE); 
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	52 e1       	ldi	r21, 0x12	; 18
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	80 e8       	ldi	r24, 0x80	; 128
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_byte(FOOD_ONE, get_position_of_food(0));//  | (get_position_of_food(1) <<8) | (get_position_of_food(2)) <<16));
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	0e 94 4e 08 	call	0x109c	; 0x109c <get_position_of_food>
     672:	68 2f       	mov	r22, r24
     674:	80 ea       	ldi	r24, 0xA0	; 160
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(FOOD_TWO, get_position_of_food(1));
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 4e 08 	call	0x109c	; 0x109c <get_position_of_food>
     682:	68 2f       	mov	r22, r24
     684:	88 ea       	ldi	r24, 0xA8	; 168
     686:	91 e0       	ldi	r25, 0x01	; 1
     688:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(FOOD_THREE, get_position_of_food(2));
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	0e 94 4e 08 	call	0x109c	; 0x109c <get_position_of_food>
     692:	68 2f       	mov	r22, r24
     694:	80 eb       	ldi	r24, 0xB0	; 176
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(FOOD_FOUR, get_position_of_food(3));
     69c:	83 e0       	ldi	r24, 0x03	; 3
     69e:	0e 94 4e 08 	call	0x109c	; 0x109c <get_position_of_food>
     6a2:	68 2f       	mov	r22, r24
     6a4:	88 eb       	ldi	r24, 0xB8	; 184
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	
	//  Save Rat Position and Superfood position if superfood is currently on. 
	eeprom_write_byte(RAT, get_rat_position());
     6ac:	0e 94 86 0b 	call	0x170c	; 0x170c <get_rat_position>
     6b0:	68 2f       	mov	r22, r24
     6b2:	80 ec       	ldi	r24, 0xC0	; 192
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	if (superfood_is_on_board()){
     6ba:	0e 94 b7 10 	call	0x216e	; 0x216e <superfood_is_on_board>
     6be:	88 23       	and	r24, r24
     6c0:	41 f0       	breq	.+16     	; 0x6d2 <save_game_to_EPPROM+0x80>
		eeprom_write_byte(SUPERFOOD, get_superfood_position());
     6c2:	0e 94 01 11 	call	0x2202	; 0x2202 <get_superfood_position>
     6c6:	68 2f       	mov	r22, r24
     6c8:	88 ec       	ldi	r24, 0xC8	; 200
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
     6d0:	05 c0       	rjmp	.+10     	; 0x6dc <save_game_to_EPPROM+0x8a>
	} else{
		eeprom_write_byte(SUPERFOOD, 0x08);
     6d2:	68 e0       	ldi	r22, 0x08	; 8
     6d4:	88 ec       	ldi	r24, 0xC8	; 200
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	}
	
	//  Save general game values
	eeprom_write_word(GAME_SPEED, get_current_game_speed());
     6dc:	0e 94 36 09 	call	0x126c	; 0x126c <get_current_game_speed>
     6e0:	bc 01       	movw	r22, r24
     6e2:	80 ed       	ldi	r24, 0xD0	; 208
     6e4:	91 e0       	ldi	r25, 0x01	; 1
     6e6:	0e 94 7d 18 	call	0x30fa	; 0x30fa <eeprom_write_word>
	eeprom_write_dword(GAME_SCORE, get_score());
     6ea:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     6ee:	ac 01       	movw	r20, r24
     6f0:	99 0f       	add	r25, r25
     6f2:	66 0b       	sbc	r22, r22
     6f4:	77 0b       	sbc	r23, r23
     6f6:	80 ee       	ldi	r24, 0xE0	; 224
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_byte(SNAKE_LENGTH, get_snake_length());
     6fe:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <get_snake_length>
     702:	68 2f       	mov	r22, r24
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_dword(CLOCK_TICKS, get_clock_ticks());
     70c:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
     710:	ac 01       	movw	r20, r24
     712:	99 0f       	add	r25, r25
     714:	66 0b       	sbc	r22, r22
     716:	77 0b       	sbc	r23, r23
     718:	88 e0       	ldi	r24, 0x08	; 8
     71a:	92 e0       	ldi	r25, 0x02	; 2
     71c:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = 0; 
	
	//  Add each PosnType of the orderedSnake. 
	
	if (get_snake_tail_position()> get_snake_head_position()){
     720:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <get_snake_tail_position>
     724:	c8 2f       	mov	r28, r24
     726:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
     72a:	8c 17       	cp	r24, r28
     72c:	48 f5       	brcc	.+82     	; 0x780 <save_game_to_EPPROM+0x12e>
		//SSSH-------------------------TSSS
		for (int i = get_snake_head_position(); i>=0; i--){
     72e:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
     732:	08 2f       	mov	r16, r24
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	c0 e0       	ldi	r28, 0x00	; 0
     738:	d0 e0       	ldi	r29, 0x00	; 0
			eeprom_write_byte(SNAKE_POSITION_HEAD + current_snake_position_memory, 
     73a:	80 2f       	mov	r24, r16
     73c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_position_at_index>
     740:	68 2f       	mov	r22, r24
     742:	ce 01       	movw	r24, r28
     744:	88 5e       	subi	r24, 0xE8	; 232
     746:	9d 4f       	sbci	r25, 0xFD	; 253
     748:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
							 get_snake_position_at_index(i));
			current_snake_position_memory +=8;
     74c:	28 96       	adiw	r28, 0x08	; 8
	
	//  Add each PosnType of the orderedSnake. 
	
	if (get_snake_tail_position()> get_snake_head_position()){
		//SSSH-------------------------TSSS
		for (int i = get_snake_head_position(); i>=0; i--){
     74e:	01 50       	subi	r16, 0x01	; 1
     750:	11 09       	sbc	r17, r1
     752:	9a f7       	brpl	.-26     	; 0x73a <save_game_to_EPPROM+0xe8>
     754:	00 e2       	ldi	r16, 0x20	; 32
     756:	10 e0       	ldi	r17, 0x00	; 0
     758:	0c c0       	rjmp	.+24     	; 0x772 <save_game_to_EPPROM+0x120>
			eeprom_write_byte(SNAKE_POSITION_HEAD + current_snake_position_memory, 
							 get_snake_position_at_index(i));
			current_snake_position_memory +=8;
		}
		for (int i = MAX_SNAKE_SIZE; i>= get_snake_tail_position(); i--){
			eeprom_write_byte(SNAKE_POSITION_HEAD + current_snake_position_memory,
     75a:	80 2f       	mov	r24, r16
     75c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_position_at_index>
     760:	68 2f       	mov	r22, r24
     762:	ce 01       	movw	r24, r28
     764:	88 5e       	subi	r24, 0xE8	; 232
     766:	9d 4f       	sbci	r25, 0xFD	; 253
     768:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
			get_snake_position_at_index(i));
			current_snake_position_memory +=8;
     76c:	28 96       	adiw	r28, 0x08	; 8
		for (int i = get_snake_head_position(); i>=0; i--){
			eeprom_write_byte(SNAKE_POSITION_HEAD + current_snake_position_memory, 
							 get_snake_position_at_index(i));
			current_snake_position_memory +=8;
		}
		for (int i = MAX_SNAKE_SIZE; i>= get_snake_tail_position(); i--){
     76e:	01 50       	subi	r16, 0x01	; 1
     770:	11 09       	sbc	r17, r1
     772:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <get_snake_tail_position>
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	08 17       	cp	r16, r24
     77a:	19 07       	cpc	r17, r25
     77c:	74 f7       	brge	.-36     	; 0x75a <save_game_to_EPPROM+0x108>
     77e:	19 c0       	rjmp	.+50     	; 0x7b2 <save_game_to_EPPROM+0x160>
			get_snake_position_at_index(i));
			current_snake_position_memory +=8;
		}
		}else{
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_position(); i<=get_snake_head_position(); i++){
     780:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <get_snake_tail_position>
     784:	08 2f       	mov	r16, r24
     786:	10 e0       	ldi	r17, 0x00	; 0
	eeprom_write_dword(GAME_SCORE, get_score());
	eeprom_write_byte(SNAKE_LENGTH, get_snake_length());
	eeprom_write_dword(CLOCK_TICKS, get_clock_ticks());
	
	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = 0; 
     788:	c0 e0       	ldi	r28, 0x00	; 0
     78a:	d0 e0       	ldi	r29, 0x00	; 0
			get_snake_position_at_index(i));
			current_snake_position_memory +=8;
		}
		}else{
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_position(); i<=get_snake_head_position(); i++){
     78c:	0c c0       	rjmp	.+24     	; 0x7a6 <save_game_to_EPPROM+0x154>
			eeprom_write_byte(SNAKE_POSITION_HEAD + current_snake_position_memory, get_snake_position_at_index(i));
     78e:	80 2f       	mov	r24, r16
     790:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <get_snake_position_at_index>
     794:	68 2f       	mov	r22, r24
     796:	ce 01       	movw	r24, r28
     798:	88 5e       	subi	r24, 0xE8	; 232
     79a:	9d 4f       	sbci	r25, 0xFD	; 253
     79c:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
			current_snake_position_memory +=8;
     7a0:	28 96       	adiw	r28, 0x08	; 8
			get_snake_position_at_index(i));
			current_snake_position_memory +=8;
		}
		}else{
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_position(); i<=get_snake_head_position(); i++){
     7a2:	0f 5f       	subi	r16, 0xFF	; 255
     7a4:	1f 4f       	sbci	r17, 0xFF	; 255
     7a6:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	80 17       	cp	r24, r16
     7ae:	91 07       	cpc	r25, r17
     7b0:	74 f7       	brge	.-36     	; 0x78e <save_game_to_EPPROM+0x13c>
			current_snake_position_memory +=8;
		}
	}
	
	//  Add an invalid PosnType byte to signify the end of the snake positions. 
	eeprom_write_byte(SNAKE_POSITION_HEAD + current_snake_position_memory,0x08);
     7b2:	68 e0       	ldi	r22, 0x08	; 8
     7b4:	ce 01       	movw	r24, r28
     7b6:	88 5e       	subi	r24, 0xE8	; 232
     7b8:	9d 4f       	sbci	r25, 0xFD	; 253
     7ba:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	print_save_details();
     7be:	0e 94 90 02 	call	0x520	; 0x520 <print_save_details>
	sei();
     7c2:	78 94       	sei

}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <add_food_to_board>:
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
	add_food_to_board(food_four);
}

void add_food_to_board(PosnType food_pos){
     7ce:	cf 93       	push	r28
     7d0:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     7d2:	0e 94 92 09 	call	0x1324	; 0x1324 <is_position_valid>
     7d6:	88 23       	and	r24, r24
     7d8:	99 f0       	breq	.+38     	; 0x800 <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     7da:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <numFoodItems>
     7de:	0e 2e       	mov	r0, r30
     7e0:	00 0c       	add	r0, r0
     7e2:	ff 0b       	sbc	r31, r31
     7e4:	e8 50       	subi	r30, 0x08	; 8
     7e6:	fd 4f       	sbci	r31, 0xFD	; 253
     7e8:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     7ea:	63 e3       	ldi	r22, 0x33	; 51
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	8c 2f       	mov	r24, r28
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
		numFoodItems++; 
     7f6:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <numFoodItems>
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <numFoodItems>
	}
}
     800:	cf 91       	pop	r28
     802:	08 95       	ret

00000804 <load_food_from_EEPROM>:
		load_EEPROM_data_on_next_game =0;
	}
}

void load_food_from_EEPROM(void){
	init_food();
     804:	0e 94 c4 07 	call	0xf88	; 0xf88 <init_food>
	PosnType food_one = eeprom_read_byte(FOOD_ONE);
     808:	80 ea       	ldi	r24, 0xA0	; 160
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
	add_food_to_board(food_one);
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 e7 03 	call	0x7ce	; 0x7ce <add_food_to_board>
	PosnType food_two = eeprom_read_byte(FOOD_TWO);
     816:	88 ea       	ldi	r24, 0xA8	; 168
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
	add_food_to_board(food_two);
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 e7 03 	call	0x7ce	; 0x7ce <add_food_to_board>
	
	PosnType food_three = eeprom_read_byte(FOOD_THREE);
     824:	80 eb       	ldi	r24, 0xB0	; 176
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
	add_food_to_board(food_three);	
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <add_food_to_board>
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
     832:	88 eb       	ldi	r24, 0xB8	; 184
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
	add_food_to_board(food_four);
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <add_food_to_board>
     840:	08 95       	ret

00000842 <load_rat_from_EEPROM>:
		foodPositions[numFoodItems] = food_pos;
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
		numFoodItems++; 
	}
}
void load_rat_from_EEPROM(void){
     842:	cf 93       	push	r28
	PosnType rat_pos = eeprom_read_byte(RAT); 
     844:	80 ec       	ldi	r24, 0xC0	; 192
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     84c:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     84e:	0e 94 92 09 	call	0x1324	; 0x1324 <is_position_valid>
     852:	88 23       	and	r24, r24
     854:	21 f0       	breq	.+8      	; 0x85e <load_rat_from_EEPROM+0x1c>
		set_rat_at_pos(rat_pos); 
     856:	8c 2f       	mov	r24, r28
     858:	0e 94 89 0b 	call	0x1712	; 0x1712 <set_rat_at_pos>
     85c:	02 c0       	rjmp	.+4      	; 0x862 <load_rat_from_EEPROM+0x20>
	}else{
		add_new_rat_position();
     85e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <add_new_rat_position>
	}
}
     862:	cf 91       	pop	r28
     864:	08 95       	ret

00000866 <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(void){
     866:	cf 93       	push	r28
	PosnType super_food = eeprom_read_byte(SUPERFOOD); 
     868:	88 ec       	ldi	r24, 0xC8	; 200
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     870:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     872:	0e 94 92 09 	call	0x1324	; 0x1324 <is_position_valid>
     876:	88 23       	and	r24, r24
     878:	21 f0       	breq	.+8      	; 0x882 <load_superfood_from_EEPROM+0x1c>
		load_superfood(super_food);
     87a:	8c 2f       	mov	r24, r28
     87c:	0e 94 b1 10 	call	0x2162	; 0x2162 <load_superfood>
     880:	02 c0       	rjmp	.+4      	; 0x886 <load_superfood_from_EEPROM+0x20>
	}else{
		remove_superfood_from_board(); 
     882:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <remove_superfood_from_board>
	}
}
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     88a:	0f 93       	push	r16
     88c:	1f 93       	push	r17
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_HEAD;
	uint8_t snake_length  = eeprom_read_byte(SNAKE_LENGTH);
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	92 e0       	ldi	r25, 0x02	; 2
     896:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     89a:	c8 2f       	mov	r28, r24
	uint8_t snakePosition_index = 0; 
	set_snake_head_pointer(0);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <set_snake_head_pointer>
	set_snake_tail_pointer(snake_length -1); 
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	8c 0f       	add	r24, r28
     8a6:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <set_snake_tail_pointer>
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_HEAD;
	uint8_t snake_length  = eeprom_read_byte(SNAKE_LENGTH);
	uint8_t snakePosition_index = 0; 
     8aa:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_HEAD;
     8ac:	c8 e1       	ldi	r28, 0x18	; 24
     8ae:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_head_pointer(0);
	set_snake_tail_pointer(snake_length -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     8b0:	ce 01       	movw	r24, r28
     8b2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     8b6:	08 2f       	mov	r16, r24
		set_snake_position_in_array(snake_position, snakePosition_index); 
     8b8:	61 2f       	mov	r22, r17
     8ba:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     8be:	60 ef       	ldi	r22, 0xF0	; 240
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	80 2f       	mov	r24, r16
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
		snake_memory_position +=8; 
     8ca:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     8cc:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     8ce:	ce 01       	movw	r24, r28
     8d0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     8d4:	0e 94 92 09 	call	0x1324	; 0x1324 <is_position_valid>
     8d8:	81 11       	cpse	r24, r1
     8da:	ea cf       	rjmp	.-44     	; 0x8b0 <load_snake_from_EPPROM+0x26>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     8dc:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
     8e0:	6f e0       	ldi	r22, 0x0F	; 15
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <new_game_from_EEPROM>:
	printf("G time :%lu \n", eeprom_read_dword(CLOCK_TICKS));
	
}

void new_game_from_EEPROM(void){
	if(EEPROM_has_saved_game()){
     8f4:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
     8f8:	88 23       	and	r24, r24
     8fa:	e1 f0       	breq	.+56     	; 0x934 <__stack+0x35>
		clear_terminal(); 
     8fc:	0e 94 94 11 	call	0x2328	; 0x2328 <clear_terminal>
	
		// Methods from init_game(); 
		ledmatrix_clear();
     900:	0e 94 89 09 	call	0x1312	; 0x1312 <ledmatrix_clear>
		init_score_on_terminal();
     904:	0e 94 dd 11 	call	0x23ba	; 0x23ba <init_score_on_terminal>
		reset_game_speed();
     908:	0e 94 3b 09 	call	0x1276	; 0x1276 <reset_game_speed>
		add_new_rat_position();
     90c:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <add_new_rat_position>
		initialise_timer_one();
     910:	0e 94 bc 12 	call	0x2578	; 0x2578 <initialise_timer_one>
		play_start_game_sound_effect();
     914:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
	
		// Init food, rats, superfood and snake
		load_food_from_EEPROM();
     918:	0e 94 02 04 	call	0x804	; 0x804 <load_food_from_EEPROM>
		load_rat_from_EEPROM();
     91c:	0e 94 21 04 	call	0x842	; 0x842 <load_rat_from_EEPROM>
		load_superfood_from_EEPROM();
     920:	0e 94 33 04 	call	0x866	; 0x866 <load_superfood_from_EEPROM>
		load_snake_from_EPPROM();
     924:	0e 94 45 04 	call	0x88a	; 0x88a <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     928:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     92c:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     930:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <load_EEPROM_data_on_next_game>
     934:	08 95       	ret

00000936 <high_score_name_position>:

uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
     936:	81 15       	cp	r24, r1
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	92 07       	cpc	r25, r18
     93c:	e9 f0       	breq	.+58     	; 0x978 <high_score_name_position+0x42>
     93e:	38 f4       	brcc	.+14     	; 0x94e <high_score_name_position+0x18>
     940:	80 3c       	cpi	r24, 0xC0	; 192
     942:	91 05       	cpc	r25, r1
     944:	91 f0       	breq	.+36     	; 0x96a <high_score_name_position+0x34>
     946:	80 3e       	cpi	r24, 0xE0	; 224
     948:	91 05       	cpc	r25, r1
     94a:	61 f0       	breq	.+24     	; 0x964 <high_score_name_position+0x2e>
     94c:	11 c0       	rjmp	.+34     	; 0x970 <high_score_name_position+0x3a>
     94e:	80 32       	cpi	r24, 0x20	; 32
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	92 07       	cpc	r25, r18
     954:	21 f0       	breq	.+8      	; 0x95e <high_score_name_position+0x28>
     956:	80 34       	cpi	r24, 0x40	; 64
     958:	91 40       	sbci	r25, 0x01	; 1
     95a:	59 f0       	breq	.+22     	; 0x972 <high_score_name_position+0x3c>
     95c:	09 c0       	rjmp	.+18     	; 0x970 <high_score_name_position+0x3a>
		case SCORE_FIVE: return NAME_FIVE; break; 
		case SCORE_FOUR: return NAME_FOUR; break;
     95e:	80 e8       	ldi	r24, 0x80	; 128
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	08 95       	ret
		case SCORE_THREE: return NAME_THREE; break;
		case SCORE_TWO: return NAME_TWO; break;
     964:	80 e4       	ldi	r24, 0x40	; 64
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	08 95       	ret
		case SCORE_ONE: return NAME_ONE; break;
     96a:	80 e2       	ldi	r24, 0x20	; 32
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	08 95       	ret
	}
}
     970:	08 95       	ret
uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
		case SCORE_FIVE: return NAME_FIVE; break; 
     972:	80 ea       	ldi	r24, 0xA0	; 160
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	08 95       	ret
		case SCORE_FOUR: return NAME_FOUR; break;
		case SCORE_THREE: return NAME_THREE; break;
     978:	80 e6       	ldi	r24, 0x60	; 96
     97a:	90 e0       	ldi	r25, 0x00	; 0
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}
     97c:	08 95       	ret

0000097e <move_place_down>:
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
	
	clear_terminal();
}

void move_place_down(uint16_t score_position, uint16_t name_position){
     97e:	8f 92       	push	r8
     980:	9f 92       	push	r9
     982:	af 92       	push	r10
     984:	bf 92       	push	r11
     986:	df 92       	push	r13
     988:	ef 92       	push	r14
     98a:	ff 92       	push	r15
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	8c 01       	movw	r16, r24
     996:	eb 01       	movw	r28, r22
	uint32_t score = eeprom_read_dword(score_position); 
     998:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     99c:	4b 01       	movw	r8, r22
     99e:	5c 01       	movw	r10, r24
	uint8_t char1 = eeprom_read_byte(name_position);
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     9a6:	d8 2e       	mov	r13, r24
	uint8_t char2 = eeprom_read_byte(name_position+0x08);
     9a8:	ce 01       	movw	r24, r28
     9aa:	08 96       	adiw	r24, 0x08	; 8
     9ac:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     9b0:	e8 2e       	mov	r14, r24
	uint8_t char3 = eeprom_read_byte(name_position+0x10);
     9b2:	ce 01       	movw	r24, r28
     9b4:	40 96       	adiw	r24, 0x10	; 16
     9b6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     9ba:	f8 2e       	mov	r15, r24
	eeprom_write_dword((score_position+0x20), score); 
     9bc:	b5 01       	movw	r22, r10
     9be:	a4 01       	movw	r20, r8
     9c0:	c8 01       	movw	r24, r16
     9c2:	80 96       	adiw	r24, 0x20	; 32
     9c4:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_byte(name_position +0x20, char1);
     9c8:	6d 2d       	mov	r22, r13
     9ca:	ce 01       	movw	r24, r28
     9cc:	80 96       	adiw	r24, 0x20	; 32
     9ce:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(name_position +0x28, char2);
     9d2:	6e 2d       	mov	r22, r14
     9d4:	ce 01       	movw	r24, r28
     9d6:	88 96       	adiw	r24, 0x28	; 40
     9d8:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(name_position +0x30, char3);
     9dc:	6f 2d       	mov	r22, r15
     9de:	ce 01       	movw	r24, r28
     9e0:	c0 96       	adiw	r24, 0x30	; 48
     9e2:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	1f 91       	pop	r17
     9ec:	0f 91       	pop	r16
     9ee:	ff 90       	pop	r15
     9f0:	ef 90       	pop	r14
     9f2:	df 90       	pop	r13
     9f4:	bf 90       	pop	r11
     9f6:	af 90       	pop	r10
     9f8:	9f 90       	pop	r9
     9fa:	8f 90       	pop	r8
     9fc:	08 95       	ret

000009fe <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(SCORE_FOUR, NAME_FOUR); 
     9fe:	60 e8       	ldi	r22, 0x80	; 128
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 bf 04 	call	0x97e	; 0x97e <move_place_down>
     a0a:	08 95       	ret

00000a0c <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     a0c:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_four_place_down>
	move_place_down(SCORE_THREE, NAME_THREE);
     a10:	60 e6       	ldi	r22, 0x60	; 96
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	0e 94 bf 04 	call	0x97e	; 0x97e <move_place_down>
     a1c:	08 95       	ret

00000a1e <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     a1e:	0e 94 06 05 	call	0xa0c	; 0xa0c <move_three_place_down>
	move_place_down(SCORE_TWO, NAME_TWO);
     a22:	60 e4       	ldi	r22, 0x40	; 64
     a24:	70 e0       	ldi	r23, 0x00	; 0
     a26:	80 ee       	ldi	r24, 0xE0	; 224
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0e 94 bf 04 	call	0x97e	; 0x97e <move_place_down>
     a2e:	08 95       	ret

00000a30 <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     a30:	0e 94 0f 05 	call	0xa1e	; 0xa1e <move_two_place_down>
	move_place_down(SCORE_ONE, NAME_ONE);
     a34:	60 e2       	ldi	r22, 0x20	; 32
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	80 ec       	ldi	r24, 0xC0	; 192
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0e 94 bf 04 	call	0x97e	; 0x97e <move_place_down>
     a40:	08 95       	ret

00000a42 <reset_name_at_memory_position>:
	reset_name_at_memory_position(NAME_FOUR);
	reset_name_at_memory_position(NAME_FIVE);
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
	}
	
void reset_name_at_memory_position(uint16_t mem_pos){
     a42:	cf 93       	push	r28
     a44:	df 93       	push	r29
     a46:	ec 01       	movw	r28, r24
	eeprom_write_byte(mem_pos, UNDERSCORE);
     a48:	6f e5       	ldi	r22, 0x5F	; 95
     a4a:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x08, UNDERSCORE);
     a4e:	6f e5       	ldi	r22, 0x5F	; 95
     a50:	ce 01       	movw	r24, r28
     a52:	08 96       	adiw	r24, 0x08	; 8
     a54:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
     a58:	6f e5       	ldi	r22, 0x5F	; 95
     a5a:	ce 01       	movw	r24, r28
     a5c:	40 96       	adiw	r24, 0x10	; 16
     a5e:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
}
     a62:	df 91       	pop	r29
     a64:	cf 91       	pop	r28
     a66:	08 95       	ret

00000a68 <initialise_EEPROM>:
	move_two_place_down();
	move_place_down(SCORE_ONE, NAME_ONE);
}

void initialise_EEPROM(void){
	eeprom_write_dword(SCORE_ONE, 0x00);
     a68:	40 e0       	ldi	r20, 0x00	; 0
     a6a:	50 e0       	ldi	r21, 0x00	; 0
     a6c:	ba 01       	movw	r22, r20
     a6e:	80 ec       	ldi	r24, 0xC0	; 192
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_dword(SCORE_TWO, 0x00);
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	ba 01       	movw	r22, r20
     a7c:	80 ee       	ldi	r24, 0xE0	; 224
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_dword(SCORE_THREE, 0x00);
     a84:	40 e0       	ldi	r20, 0x00	; 0
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	ba 01       	movw	r22, r20
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_dword(SCORE_FOUR, 0x00);
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	ba 01       	movw	r22, r20
     a98:	80 e2       	ldi	r24, 0x20	; 32
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_dword(SCORE_FIVE, 0x00);
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	ba 01       	movw	r22, r20
     aa6:	80 e4       	ldi	r24, 0x40	; 64
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	reset_name_at_memory_position(NAME_ONE);
     aae:	80 e2       	ldi	r24, 0x20	; 32
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 21 05 	call	0xa42	; 0xa42 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_TWO);
     ab6:	80 e4       	ldi	r24, 0x40	; 64
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	0e 94 21 05 	call	0xa42	; 0xa42 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_THREE);
     abe:	80 e6       	ldi	r24, 0x60	; 96
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 21 05 	call	0xa42	; 0xa42 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FOUR);
     ac6:	80 e8       	ldi	r24, 0x80	; 128
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 21 05 	call	0xa42	; 0xa42 <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FIVE);
     ace:	80 ea       	ldi	r24, 0xA0	; 160
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 21 05 	call	0xa42	; 0xa42 <reset_name_at_memory_position>
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     ad6:	44 e3       	ldi	r20, 0x34	; 52
     ad8:	52 e1       	ldi	r21, 0x12	; 18
     ada:	60 e0       	ldi	r22, 0x00	; 0
     adc:	70 e0       	ldi	r23, 0x00	; 0
     ade:	80 e6       	ldi	r24, 0x60	; 96
     ae0:	91 e0       	ldi	r25, 0x01	; 1
     ae2:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
     ae6:	08 95       	ret

00000ae8 <EEPROM_High_Score_has_been_initialised>:
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
}


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     ae8:	80 e6       	ldi	r24, 0x60	; 96
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     af0:	21 e0       	ldi	r18, 0x01	; 1
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	64 33       	cpi	r22, 0x34	; 52
     af6:	72 41       	sbci	r23, 0x12	; 18
     af8:	81 05       	cpc	r24, r1
     afa:	91 05       	cpc	r25, r1
     afc:	11 f0       	breq	.+4      	; 0xb02 <EEPROM_High_Score_has_been_initialised+0x1a>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
}
     b02:	c9 01       	movw	r24, r18
     b04:	08 95       	ret

00000b06 <is_high_score>:
#include <avr/eeprom.h>
#include "terminalio.h"


static char current_high_score_name[4]; 
uint8_t is_high_score(void){
     b06:	cf 92       	push	r12
     b08:	df 92       	push	r13
     b0a:	ef 92       	push	r14
     b0c:	ff 92       	push	r15
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
     b0e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     b12:	6b 01       	movw	r12, r22
     b14:	7c 01       	movw	r14, r24
     b16:	80 e4       	ldi	r24, 0x40	; 64
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     b1e:	c6 16       	cp	r12, r22
     b20:	d7 06       	cpc	r13, r23
     b22:	e8 06       	cpc	r14, r24
     b24:	f9 06       	cpc	r15, r25
     b26:	40 f4       	brcc	.+16     	; 0xb38 <is_high_score+0x32>
     b28:	0e 94 74 05 	call	0xae8	; 0xae8 <EEPROM_High_Score_has_been_initialised>
     b2c:	21 e0       	ldi	r18, 0x01	; 1
     b2e:	89 2b       	or	r24, r25
     b30:	09 f0       	breq	.+2      	; 0xb34 <is_high_score+0x2e>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	82 2f       	mov	r24, r18
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <is_high_score+0x34>
     b38:	81 e0       	ldi	r24, 0x01	; 1
}
     b3a:	ff 90       	pop	r15
     b3c:	ef 90       	pop	r14
     b3e:	df 90       	pop	r13
     b40:	cf 90       	pop	r12
     b42:	08 95       	ret

00000b44 <high_score_position>:
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}

uint16_t high_score_position(void){
     b44:	cf 92       	push	r12
     b46:	df 92       	push	r13
     b48:	ef 92       	push	r14
     b4a:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     b4c:	0e 94 74 05 	call	0xae8	; 0xae8 <EEPROM_High_Score_has_been_initialised>
     b50:	89 2b       	or	r24, r25
     b52:	09 f4       	brne	.+2      	; 0xb56 <high_score_position+0x12>
     b54:	42 c0       	rjmp	.+132    	; 0xbda <high_score_position+0x96>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     b56:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     b5a:	6b 01       	movw	r12, r22
     b5c:	7c 01       	movw	r14, r24
     b5e:	80 ec       	ldi	r24, 0xC0	; 192
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     b66:	6c 15       	cp	r22, r12
     b68:	7d 05       	cpc	r23, r13
     b6a:	8e 05       	cpc	r24, r14
     b6c:	9f 05       	cpc	r25, r15
     b6e:	c0 f1       	brcs	.+112    	; 0xbe0 <high_score_position+0x9c>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     b70:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     b74:	6b 01       	movw	r12, r22
     b76:	7c 01       	movw	r14, r24
     b78:	80 ee       	ldi	r24, 0xE0	; 224
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     b80:	6c 15       	cp	r22, r12
     b82:	7d 05       	cpc	r23, r13
     b84:	8e 05       	cpc	r24, r14
     b86:	9f 05       	cpc	r25, r15
     b88:	70 f1       	brcs	.+92     	; 0xbe6 <high_score_position+0xa2>
		return SCORE_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     b8a:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     b8e:	6b 01       	movw	r12, r22
     b90:	7c 01       	movw	r14, r24
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     b9a:	6c 15       	cp	r22, r12
     b9c:	7d 05       	cpc	r23, r13
     b9e:	8e 05       	cpc	r24, r14
     ba0:	9f 05       	cpc	r25, r15
     ba2:	20 f1       	brcs	.+72     	; 0xbec <high_score_position+0xa8>
		return SCORE_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     ba4:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     ba8:	6b 01       	movw	r12, r22
     baa:	7c 01       	movw	r14, r24
     bac:	80 e2       	ldi	r24, 0x20	; 32
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     bb4:	6c 15       	cp	r22, r12
     bb6:	7d 05       	cpc	r23, r13
     bb8:	8e 05       	cpc	r24, r14
     bba:	9f 05       	cpc	r25, r15
     bbc:	d0 f0       	brcs	.+52     	; 0xbf2 <high_score_position+0xae>
		return SCORE_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     bbe:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     bc2:	6b 01       	movw	r12, r22
     bc4:	7c 01       	movw	r14, r24
     bc6:	80 e4       	ldi	r24, 0x40	; 64
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     bce:	6c 15       	cp	r22, r12
     bd0:	7d 05       	cpc	r23, r13
     bd2:	8e 05       	cpc	r24, r14
     bd4:	9f 05       	cpc	r25, r15
     bd6:	80 f0       	brcs	.+32     	; 0xbf8 <high_score_position+0xb4>
		return SCORE_FIVE;
	}
}
     bd8:	11 c0       	rjmp	.+34     	; 0xbfc <high_score_position+0xb8>
	}
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return SCORE_ONE;
     bda:	80 ec       	ldi	r24, 0xC0	; 192
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e c0       	rjmp	.+28     	; 0xbfc <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return SCORE_ONE;
     be0:	80 ec       	ldi	r24, 0xC0	; 192
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0b c0       	rjmp	.+22     	; 0xbfc <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return SCORE_TWO;
     be6:	80 ee       	ldi	r24, 0xE0	; 224
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	08 c0       	rjmp	.+16     	; 0xbfc <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return SCORE_THREE;
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	91 e0       	ldi	r25, 0x01	; 1
     bf0:	05 c0       	rjmp	.+10     	; 0xbfc <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return SCORE_FOUR;
     bf2:	80 e2       	ldi	r24, 0x20	; 32
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
     bf8:	80 e4       	ldi	r24, 0x40	; 64
     bfa:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	08 95       	ret

00000c06 <handle_sequence_into_EEPFROM>:
				handle_sequence_into_EEPFROM();
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     c06:	cf 92       	push	r12
     c08:	df 92       	push	r13
     c0a:	ef 92       	push	r14
     c0c:	ff 92       	push	r15
     c0e:	1f 93       	push	r17
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     c14:	44 e3       	ldi	r20, 0x34	; 52
     c16:	52 e1       	ldi	r21, 0x12	; 18
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	70 e0       	ldi	r23, 0x00	; 0
     c1c:	80 e6       	ldi	r24, 0x60	; 96
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	switch(high_score_position()){
     c24:	0e 94 a2 05 	call	0xb44	; 0xb44 <high_score_position>
     c28:	80 3e       	cpi	r24, 0xE0	; 224
     c2a:	91 05       	cpc	r25, r1
     c2c:	91 f0       	breq	.+36     	; 0xc52 <handle_sequence_into_EEPFROM+0x4c>
     c2e:	20 f4       	brcc	.+8      	; 0xc38 <handle_sequence_into_EEPFROM+0x32>
     c30:	80 3c       	cpi	r24, 0xC0	; 192
     c32:	91 05       	cpc	r25, r1
     c34:	89 f0       	breq	.+34     	; 0xc58 <handle_sequence_into_EEPFROM+0x52>
     c36:	12 c0       	rjmp	.+36     	; 0xc5c <handle_sequence_into_EEPFROM+0x56>
     c38:	81 15       	cp	r24, r1
     c3a:	21 e0       	ldi	r18, 0x01	; 1
     c3c:	92 07       	cpc	r25, r18
     c3e:	31 f0       	breq	.+12     	; 0xc4c <handle_sequence_into_EEPFROM+0x46>
     c40:	80 32       	cpi	r24, 0x20	; 32
     c42:	91 40       	sbci	r25, 0x01	; 1
     c44:	59 f4       	brne	.+22     	; 0xc5c <handle_sequence_into_EEPFROM+0x56>
		case SCORE_FOUR: move_four_place_down(); break; 
     c46:	0e 94 ff 04 	call	0x9fe	; 0x9fe <move_four_place_down>
     c4a:	08 c0       	rjmp	.+16     	; 0xc5c <handle_sequence_into_EEPFROM+0x56>
		case SCORE_THREE: move_three_place_down(); break; 
     c4c:	0e 94 06 05 	call	0xa0c	; 0xa0c <move_three_place_down>
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <handle_sequence_into_EEPFROM+0x56>
		case SCORE_TWO: move_two_place_down(); break;
     c52:	0e 94 0f 05 	call	0xa1e	; 0xa1e <move_two_place_down>
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <handle_sequence_into_EEPFROM+0x56>
		case SCORE_ONE: move_one_place_down(); break; 
     c58:	0e 94 18 05 	call	0xa30	; 0xa30 <move_one_place_down>
	}
	
	eeprom_write_dword(high_score_position(), get_score());
     c5c:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
     c64:	0e 94 a2 05 	call	0xb44	; 0xb44 <high_score_position>
     c68:	b7 01       	movw	r22, r14
     c6a:	a6 01       	movw	r20, r12
     c6c:	0e 94 75 18 	call	0x30ea	; 0x30ea <eeprom_write_dword>
	eeprom_write_byte(high_score_name_position(high_score_position()), current_high_score_name[0]);
     c70:	c2 ea       	ldi	r28, 0xA2	; 162
     c72:	d2 e0       	ldi	r29, 0x02	; 2
     c74:	18 81       	ld	r17, Y
     c76:	0e 94 a2 05 	call	0xb44	; 0xb44 <high_score_position>
     c7a:	0e 94 9b 04 	call	0x936	; 0x936 <high_score_name_position>
     c7e:	61 2f       	mov	r22, r17
     c80:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x08, current_high_score_name[1]);
     c84:	19 81       	ldd	r17, Y+1	; 0x01
     c86:	0e 94 a2 05 	call	0xb44	; 0xb44 <high_score_position>
     c8a:	0e 94 9b 04 	call	0x936	; 0x936 <high_score_name_position>
     c8e:	61 2f       	mov	r22, r17
     c90:	08 96       	adiw	r24, 0x08	; 8
     c92:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
     c96:	ca 81       	ldd	r28, Y+2	; 0x02
     c98:	0e 94 a2 05 	call	0xb44	; 0xb44 <high_score_position>
     c9c:	0e 94 9b 04 	call	0x936	; 0x936 <high_score_name_position>
     ca0:	6c 2f       	mov	r22, r28
     ca2:	40 96       	adiw	r24, 0x10	; 16
     ca4:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
	
	clear_terminal();
     ca8:	0e 94 94 11 	call	0x2328	; 0x2328 <clear_terminal>
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	08 95       	ret

00000cbc <set_high_score_name>:
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
	}
}

void set_high_score_name(void){
     cbc:	ef 92       	push	r14
     cbe:	ff 92       	push	r15
     cc0:	0f 93       	push	r16
     cc2:	1f 93       	push	r17
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
	move_cursor(10,8);
     cc8:	68 e0       	ldi	r22, 0x08	; 8
     cca:	8a e0       	ldi	r24, 0x0A	; 10
     ccc:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     cd0:	89 eb       	ldi	r24, 0xB9	; 185
     cd2:	91 e0       	ldi	r25, 0x01	; 1
     cd4:	9f 93       	push	r25
     cd6:	8f 93       	push	r24
     cd8:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     ce0:	00 e0       	ldi	r16, 0x00	; 0
     ce2:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     ce4:	0f 2e       	mov	r0, r31
     ce6:	f7 e1       	ldi	r31, 0x17	; 23
     ce8:	ef 2e       	mov	r14, r31
     cea:	f4 e0       	ldi	r31, 0x04	; 4
     cec:	ff 2e       	mov	r15, r31
     cee:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     cf0:	0e 94 b3 11 	call	0x2366	; 0x2366 <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     cf4:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <serial_input_available>
     cf8:	88 23       	and	r24, r24
     cfa:	d1 f3       	breq	.-12     	; 0xcf0 <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     cfc:	f7 01       	movw	r30, r14
     cfe:	80 81       	ld	r24, Z
     d00:	91 81       	ldd	r25, Z+1	; 0x01
     d02:	0e 94 41 15 	call	0x2a82	; 0x2a82 <fgetc>
     d06:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     d08:	98 2f       	mov	r25, r24
     d0a:	91 54       	subi	r25, 0x41	; 65
     d0c:	9a 33       	cpi	r25, 0x3A	; 58
     d0e:	98 f4       	brcc	.+38     	; 0xd36 <set_high_score_name+0x7a>
     d10:	03 30       	cpi	r16, 0x03	; 3
     d12:	11 05       	cpc	r17, r1
     d14:	84 f4       	brge	.+32     	; 0xd36 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     d16:	69 e0       	ldi	r22, 0x09	; 9
     d18:	8a e0       	ldi	r24, 0x0A	; 10
     d1a:	80 0f       	add	r24, r16
     d1c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     d20:	f8 01       	movw	r30, r16
     d22:	ee 55       	subi	r30, 0x5E	; 94
     d24:	fd 4f       	sbci	r31, 0xFD	; 253
     d26:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     d28:	ce 01       	movw	r24, r28
     d2a:	99 27       	eor	r25, r25
     d2c:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <putchar>
				score_name_pointer++;
     d30:	0f 5f       	subi	r16, 0xFF	; 255
     d32:	1f 4f       	sbci	r17, 0xFF	; 255
     d34:	dd cf       	rjmp	.-70     	; 0xcf0 <set_high_score_name+0x34>
			}else if(serial_input =='\n'){
     d36:	8a 30       	cpi	r24, 0x0A	; 10
     d38:	89 f0       	breq	.+34     	; 0xd5c <set_high_score_name+0xa0>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     d3a:	8f 37       	cpi	r24, 0x7F	; 127
     d3c:	c9 f6       	brne	.-78     	; 0xcf0 <set_high_score_name+0x34>
				printf("%c", ' ');
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     d46:	10 16       	cp	r1, r16
     d48:	11 06       	cpc	r1, r17
     d4a:	14 f4       	brge	.+4      	; 0xd50 <set_high_score_name+0x94>
     d4c:	01 50       	subi	r16, 0x01	; 1
     d4e:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     d50:	69 e0       	ldi	r22, 0x09	; 9
     d52:	8a e0       	ldi	r24, 0x0A	; 10
     d54:	80 0f       	add	r24, r16
     d56:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
     d5a:	ca cf       	rjmp	.-108    	; 0xcf0 <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     d5c:	f9 99       	sbic	0x1f, 1	; 31
     d5e:	fe cf       	rjmp	.-4      	; 0xd5c <set_high_score_name+0xa0>
				handle_sequence_into_EEPFROM();
     d60:	0e 94 03 06 	call	0xc06	; 0xc06 <handle_sequence_into_EEPFROM>
				break; 
			}
		}
	}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	1f 91       	pop	r17
     d6a:	0f 91       	pop	r16
     d6c:	ff 90       	pop	r15
     d6e:	ef 90       	pop	r14
     d70:	08 95       	ret

00000d72 <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
	move_cursor(10,11);
     d7e:	6b e0       	ldi	r22, 0x0B	; 11
     d80:	8a e0       	ldi	r24, 0x0A	; 10
     d82:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     d86:	8c e7       	ldi	r24, 0x7C	; 124
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	9f 93       	push	r25
     d8c:	8f 93       	push	r24
     d8e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
	move_cursor(10,13);
     d92:	6d e0       	ldi	r22, 0x0D	; 13
     d94:	8a e0       	ldi	r24, 0x0A	; 10
     d96:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     d9a:	0e 94 74 05 	call	0xae8	; 0xae8 <EEPROM_High_Score_has_been_initialised>
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	89 2b       	or	r24, r25
     da4:	09 f4       	brne	.+2      	; 0xda8 <display_EEPROM_high_score+0x36>
     da6:	df c0       	rjmp	.+446    	; 0xf66 <display_EEPROM_high_score+0x1f4>

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     da8:	80 ec       	ldi	r24, 0xC0	; 192
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     db0:	16 2f       	mov	r17, r22
     db2:	07 2f       	mov	r16, r23
     db4:	f8 2e       	mov	r15, r24
     db6:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
     db8:	80 e3       	ldi	r24, 0x30	; 48
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     dc0:	d8 2f       	mov	r29, r24
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
									eeprom_read_byte(NAME_ONE+0x08), 
     dc2:	88 e2       	ldi	r24, 0x28	; 40
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     dca:	c8 2f       	mov	r28, r24
	printf_P(PSTR("###HIGH SCORES###"));
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     dcc:	80 e2       	ldi	r24, 0x20	; 32
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	1f 92       	push	r1
     dde:	df 93       	push	r29
     de0:	1f 92       	push	r1
     de2:	cf 93       	push	r28
     de4:	1f 92       	push	r1
     de6:	8f 93       	push	r24
     de8:	82 ef       	ldi	r24, 0xF2	; 242
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	9f 93       	push	r25
     dee:	8f 93       	push	r24
     df0:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
     df4:	6e e0       	ldi	r22, 0x0E	; 14
     df6:	8a e0       	ldi	r24, 0x0A	; 10
     df8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     dfc:	80 ee       	ldi	r24, 0xE0	; 224
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     e04:	16 2f       	mov	r17, r22
     e06:	07 2f       	mov	r16, r23
     e08:	f8 2e       	mov	r15, r24
     e0a:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
     e0c:	80 e5       	ldi	r24, 0x50	; 80
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     e14:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
									eeprom_read_byte(NAME_TWO+0x08),
     e16:	88 e4       	ldi	r24, 0x48	; 72
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     e1e:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     e20:	80 e4       	ldi	r24, 0x40	; 64
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	1f 92       	push	r1
     e32:	df 93       	push	r29
     e34:	1f 92       	push	r1
     e36:	cf 93       	push	r28
     e38:	1f 92       	push	r1
     e3a:	8f 93       	push	r24
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	92 e0       	ldi	r25, 0x02	; 2
     e40:	9f 93       	push	r25
     e42:	8f 93       	push	r24
     e44:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);
     e48:	6f e0       	ldi	r22, 0x0F	; 15
     e4a:	8a e0       	ldi	r24, 0x0A	; 10
     e4c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     e58:	16 2f       	mov	r17, r22
     e5a:	07 2f       	mov	r16, r23
     e5c:	f8 2e       	mov	r15, r24
     e5e:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
     e60:	80 e7       	ldi	r24, 0x70	; 112
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     e68:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
									eeprom_read_byte(NAME_THREE +8),
     e6a:	88 e6       	ldi	r24, 0x68	; 104
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     e72:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     e74:	80 e6       	ldi	r24, 0x60	; 96
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	1f 92       	push	r1
     e86:	df 93       	push	r29
     e88:	1f 92       	push	r1
     e8a:	cf 93       	push	r28
     e8c:	1f 92       	push	r1
     e8e:	8f 93       	push	r24
     e90:	85 e1       	ldi	r24, 0x15	; 21
     e92:	92 e0       	ldi	r25, 0x02	; 2
     e94:	9f 93       	push	r25
     e96:	8f 93       	push	r24
     e98:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);
     e9c:	8d b7       	in	r24, 0x3d	; 61
     e9e:	9e b7       	in	r25, 0x3e	; 62
     ea0:	84 96       	adiw	r24, 0x24	; 36
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	9e bf       	out	0x3e, r25	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	8d bf       	out	0x3d, r24	; 61
     eac:	60 e1       	ldi	r22, 0x10	; 16
     eae:	8a e0       	ldi	r24, 0x0A	; 10
     eb0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     eb4:	80 e2       	ldi	r24, 0x20	; 32
     eb6:	91 e0       	ldi	r25, 0x01	; 1
     eb8:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     ebc:	16 2f       	mov	r17, r22
     ebe:	07 2f       	mov	r16, r23
     ec0:	f8 2e       	mov	r15, r24
     ec2:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
     ec4:	80 e9       	ldi	r24, 0x90	; 144
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     ecc:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
									eeprom_read_byte(NAME_FOUR+8),
     ece:	88 e8       	ldi	r24, 0x88	; 136
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     ed6:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     ed8:	80 e8       	ldi	r24, 0x80	; 128
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	1f 92       	push	r1
     eea:	df 93       	push	r29
     eec:	1f 92       	push	r1
     eee:	cf 93       	push	r28
     ef0:	1f 92       	push	r1
     ef2:	8f 93       	push	r24
     ef4:	86 e2       	ldi	r24, 0x26	; 38
     ef6:	92 e0       	ldi	r25, 0x02	; 2
     ef8:	9f 93       	push	r25
     efa:	8f 93       	push	r24
     efc:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);
     f00:	61 e1       	ldi	r22, 0x11	; 17
     f02:	8a e0       	ldi	r24, 0x0A	; 10
     f04:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     f08:	80 e4       	ldi	r24, 0x40	; 64
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <eeprom_read_dword>
     f10:	16 2f       	mov	r17, r22
     f12:	07 2f       	mov	r16, r23
     f14:	f8 2e       	mov	r15, r24
     f16:	e9 2e       	mov	r14, r25
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
     f18:	80 eb       	ldi	r24, 0xB0	; 176
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     f20:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
								eeprom_read_byte(NAME_FIVE+8),
     f22:	88 ea       	ldi	r24, 0xA8	; 168
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     f2a:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     f2c:	80 ea       	ldi	r24, 0xA0	; 160
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	0e 94 53 18 	call	0x30a6	; 0x30a6 <eeprom_read_byte>
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	1f 92       	push	r1
     f3e:	df 93       	push	r29
     f40:	1f 92       	push	r1
     f42:	cf 93       	push	r28
     f44:	1f 92       	push	r1
     f46:	8f 93       	push	r24
     f48:	88 e3       	ldi	r24, 0x38	; 56
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	9f 93       	push	r25
     f4e:	8f 93       	push	r24
     f50:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
     f54:	8d b7       	in	r24, 0x3d	; 61
     f56:	9e b7       	in	r25, 0x3e	; 62
     f58:	48 96       	adiw	r24, 0x18	; 24
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	9e bf       	out	0x3e, r25	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	8d bf       	out	0x3d, r24	; 61
     f64:	0a c0       	rjmp	.+20     	; 0xf7a <display_EEPROM_high_score+0x208>
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
								eeprom_read_dword(SCORE_FIVE));
	}
	else{
		initialise_EEPROM();
     f66:	0e 94 34 05 	call	0xa68	; 0xa68 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     f6a:	88 e4       	ldi	r24, 0x48	; 72
     f6c:	92 e0       	ldi	r25, 0x02	; 2
     f6e:	9f 93       	push	r25
     f70:	8f 93       	push	r24
     f72:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
	}

}
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	ff 90       	pop	r15
     f84:	ef 90       	pop	r14
     f86:	08 95       	ret

00000f88 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     f88:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <numFoodItems>
     f8c:	08 95       	ret

00000f8e <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     f8e:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <numFoodItems>
     f92:	13 16       	cp	r1, r19
     f94:	84 f4       	brge	.+32     	; 0xfb6 <food_at+0x28>
        if(foodPositions[id] == posn) {
     f96:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <foodPositions>
     f9a:	89 17       	cp	r24, r25
     f9c:	71 f0       	breq	.+28     	; 0xfba <food_at+0x2c>
     f9e:	e9 ef       	ldi	r30, 0xF9	; 249
     fa0:	f2 e0       	ldi	r31, 0x02	; 2
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <food_at+0x1e>
     fa6:	21 91       	ld	r18, Z+
     fa8:	28 17       	cp	r18, r24
     faa:	49 f0       	breq	.+18     	; 0xfbe <food_at+0x30>
     fac:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     fae:	39 13       	cpse	r19, r25
     fb0:	fa cf       	rjmp	.-12     	; 0xfa6 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     fb2:	8f ef       	ldi	r24, 0xFF	; 255
     fb4:	08 95       	ret
     fb6:	8f ef       	ldi	r24, 0xFF	; 255
     fb8:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret
     fbe:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     fc0:	08 95       	ret

00000fc2 <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     fc2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <food_at>
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	8f 3f       	cpi	r24, 0xFF	; 255
     fca:	09 f4       	brne	.+2      	; 0xfce <is_food_at+0xc>
     fcc:	90 e0       	ldi	r25, 0x00	; 0
}
     fce:	89 2f       	mov	r24, r25
     fd0:	08 95       	ret

00000fd2 <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
     fd6:	1f 93       	push	r17
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     fdc:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <numFoodItems>
     fe0:	88 30       	cpi	r24, 0x08	; 8
     fe2:	0c f0       	brlt	.+2      	; 0xfe6 <add_food_item+0x14>
     fe4:	44 c0       	rjmp	.+136    	; 0x106e <add_food_item+0x9c>
     fe6:	00 e0       	ldi	r16, 0x00	; 0
     fe8:	10 e0       	ldi	r17, 0x00	; 0
     fea:	d0 e0       	ldi	r29, 0x00	; 0
     fec:	c0 e0       	ldi	r28, 0x00	; 0
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <add_food_item+0x22>
     ff0:	0f 5f       	subi	r16, 0xFF	; 255
     ff2:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     ff4:	2c 2f       	mov	r18, r28
     ff6:	cc 0f       	add	r28, r28
     ff8:	33 0b       	sbc	r19, r19
     ffa:	2d 5f       	subi	r18, 0xFD	; 253
     ffc:	3f 4f       	sbci	r19, 0xFF	; 255
     ffe:	20 0f       	add	r18, r16
    1000:	31 1f       	adc	r19, r17
    1002:	2f 70       	andi	r18, 0x0F	; 15
    1004:	30 78       	andi	r19, 0x80	; 128
    1006:	33 23       	and	r19, r19
    1008:	34 f4       	brge	.+12     	; 0x1016 <add_food_item+0x44>
    100a:	21 50       	subi	r18, 0x01	; 1
    100c:	31 09       	sbc	r19, r1
    100e:	20 6f       	ori	r18, 0xF0	; 240
    1010:	3f 6f       	ori	r19, 0xFF	; 255
    1012:	2f 5f       	subi	r18, 0xFF	; 255
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	82 2f       	mov	r24, r18
    1018:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
    101a:	6d 2f       	mov	r22, r29
    101c:	dd 0f       	add	r29, r29
    101e:	77 0b       	sbc	r23, r23
    1020:	6b 5f       	subi	r22, 0xFB	; 251
    1022:	7f 4f       	sbci	r23, 0xFF	; 255
    1024:	67 70       	andi	r22, 0x07	; 7
    1026:	70 78       	andi	r23, 0x80	; 128
    1028:	77 23       	and	r23, r23
    102a:	34 f4       	brge	.+12     	; 0x1038 <add_food_item+0x66>
    102c:	61 50       	subi	r22, 0x01	; 1
    102e:	71 09       	sbc	r23, r1
    1030:	68 6f       	ori	r22, 0xF8	; 248
    1032:	7f 6f       	ori	r23, 0xFF	; 255
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
    103a:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    103e:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1040:	03 36       	cpi	r16, 0x63	; 99
    1042:	11 05       	cpc	r17, r1
    1044:	b1 f0       	breq	.+44     	; 0x1072 <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
    1046:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
    104a:	81 11       	cpse	r24, r1
    104c:	d1 cf       	rjmp	.-94     	; 0xff0 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
    104e:	8f 2d       	mov	r24, r15
    1050:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <is_food_at>
    1054:	81 11       	cpse	r24, r1
    1056:	cc cf       	rjmp	.-104    	; 0xff0 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1058:	8f 2d       	mov	r24, r15
    105a:	0e 94 04 11 	call	0x2208	; 0x2208 <is_superfood_at>
    105e:	81 11       	cpse	r24, r1
    1060:	c7 cf       	rjmp	.-114    	; 0xff0 <add_food_item+0x1e>
    1062:	8f 2d       	mov	r24, r15
    1064:	0e 94 76 0c 	call	0x18ec	; 0x18ec <is_rat_at>
    1068:	81 11       	cpse	r24, r1
    106a:	c2 cf       	rjmp	.-124    	; 0xff0 <add_food_item+0x1e>
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
    106e:	88 e0       	ldi	r24, 0x08	; 8
    1070:	0f c0       	rjmp	.+30     	; 0x1090 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	0d c0       	rjmp	.+26     	; 0x1090 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
    1076:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <numFoodItems>
	foodPositions[newFoodID] = test_position;
    107a:	e8 2f       	mov	r30, r24
    107c:	08 2e       	mov	r0, r24
    107e:	00 0c       	add	r0, r0
    1080:	ff 0b       	sbc	r31, r31
    1082:	e8 50       	subi	r30, 0x08	; 8
    1084:	fd 4f       	sbci	r31, 0xFD	; 253
    1086:	f0 82       	st	Z, r15
	numFoodItems++;
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
    108e:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	08 95       	ret

0000109c <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
    109c:	e8 2f       	mov	r30, r24
    109e:	88 0f       	add	r24, r24
    10a0:	ff 0b       	sbc	r31, r31
    10a2:	e8 50       	subi	r30, 0x08	; 8
    10a4:	fd 4f       	sbci	r31, 0xFD	; 253
}
    10a6:	80 81       	ld	r24, Z
    10a8:	08 95       	ret

000010aa <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
    10aa:	88 23       	and	r24, r24
    10ac:	b4 f0       	brlt	.+44     	; 0x10da <remove_food+0x30>
    10ae:	20 91 f7 02 	lds	r18, 0x02F7	; 0x8002f7 <numFoodItems>
    10b2:	82 17       	cp	r24, r18
    10b4:	94 f4       	brge	.+36     	; 0x10da <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    10b6:	8f 5f       	subi	r24, 0xFF	; 255
    10b8:	82 17       	cp	r24, r18
    10ba:	64 f4       	brge	.+24     	; 0x10d4 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
    10bc:	e8 2f       	mov	r30, r24
    10be:	08 2e       	mov	r0, r24
    10c0:	00 0c       	add	r0, r0
    10c2:	ff 0b       	sbc	r31, r31
    10c4:	e8 50       	subi	r30, 0x08	; 8
    10c6:	fd 4f       	sbci	r31, 0xFD	; 253
    10c8:	90 81       	ld	r25, Z
    10ca:	31 97       	sbiw	r30, 0x01	; 1
    10cc:	90 83       	st	Z, r25
    10ce:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
    10d0:	82 17       	cp	r24, r18
    10d2:	a4 f3       	brlt	.-24     	; 0x10bc <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	20 93 f7 02 	sts	0x02F7, r18	; 0x8002f7 <numFoodItems>
    10da:	08 95       	ret

000010dc <update_display_at_position>:
#define FOOD_COLOUR			COLOUR_LIGHT_YELLOW
#define BACKGROUND_COLOUR	COLOUR_BLACK
#define SUPERFOOD_COLOUR    COLOUR_ORANGE

// Helper function
void update_display_at_position(PosnType posn, PixelColour colour) {
    10dc:	1f 93       	push	r17
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	c8 2f       	mov	r28, r24
    10e4:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
    10e6:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    10ea:	d8 2f       	mov	r29, r24
    10ec:	8c 2f       	mov	r24, r28
    10ee:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    10f2:	41 2f       	mov	r20, r17
    10f4:	6d 2f       	mov	r22, r29
    10f6:	0e 94 46 09 	call	0x128c	; 0x128c <ledmatrix_update_pixel>
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	08 95       	ret

00001102 <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
    1106:	0e 94 89 09 	call	0x1312	; 0x1312 <ledmatrix_clear>
	init_score_on_terminal();
    110a:	0e 94 dd 11 	call	0x23ba	; 0x23ba <init_score_on_terminal>

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
    110e:	88 e5       	ldi	r24, 0x58	; 88
    1110:	92 e0       	ldi	r25, 0x02	; 2
    1112:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1116:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
void init_game(void) {
	// Clear display
	ledmatrix_clear();
	init_score_on_terminal();
	reset_game_speed();
	add_new_rat_position();
    111a:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <add_new_rat_position>
	initialise_timer_one();
    111e:	0e 94 bc 12 	call	0x2578	; 0x2578 <initialise_timer_one>
	play_start_game_sound_effect();
    1122:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
    1126:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
    112a:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
    112e:	6f e0       	ldi	r22, 0x0F	; 15
    1130:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
    1134:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <get_snake_tail_position>
    1138:	60 ef       	ldi	r22, 0xF0	; 240
    113a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
    113e:	0e 94 c4 07 	call	0xf88	; 0xf88 <init_food>
    1142:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
    1144:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <add_food_item>
    1148:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
    114a:	0e 94 92 09 	call	0x1324	; 0x1324 <is_position_valid>
    114e:	88 23       	and	r24, r24
    1150:	21 f0       	breq	.+8      	; 0x115a <init_game+0x58>
			update_display_at_position(food_position, FOOD_COLOUR);
    1152:	63 e3       	ldi	r22, 0x33	; 51
    1154:	8d 2f       	mov	r24, r29
    1156:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
    115a:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
    115c:	99 f7       	brne	.-26     	; 0x1144 <init_game+0x42>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
    115e:	df 91       	pop	r29
    1160:	cf 91       	pop	r28
    1162:	08 95       	ret

00001164 <increase_game_speed>:
		current_speed *= 0.90;
	}
}

int get_current_game_speed(void){
	return current_speed;
    1164:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    1168:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>

	return 1;
}

void increase_game_speed(void){
	if (get_current_game_speed()>250){
    116c:	8b 3f       	cpi	r24, 0xFB	; 251
    116e:	91 05       	cpc	r25, r1
    1170:	a4 f0       	brlt	.+40     	; 0x119a <increase_game_speed+0x36>
		current_speed *= 0.90;
    1172:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
    1176:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 07 13 	call	0x260e	; 0x260e <__floatunsisf>
    1182:	26 e6       	ldi	r18, 0x66	; 102
    1184:	36 e6       	ldi	r19, 0x66	; 102
    1186:	46 e6       	ldi	r20, 0x66	; 102
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 6d 13 	call	0x26da	; 0x26da <__mulsf3>
    118e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
    1192:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
    1196:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
    119a:	08 95       	ret

0000119c <attempt_to_move_snake_forward>:
		}
	}	
}

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	cf 93       	push	r28
    11a2:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
    11a4:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
    11a8:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
    11aa:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <advance_snake_head>
    11ae:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
    11b0:	88 23       	and	r24, r24
    11b2:	0c f4       	brge	.+2      	; 0x11b6 <attempt_to_move_snake_forward+0x1a>
    11b4:	55 c0       	rjmp	.+170    	; 0x1260 <attempt_to_move_snake_forward+0xc4>
	}
// 	if(move_result ==1){
// 		play_snake_move_sound_effect(); 
// 	}

	add_to_score(1);
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <add_to_score>
	PosnType new_head_position = get_snake_head_position();
    11be:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <get_snake_head_position>
    11c2:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
    11c4:	8e ef       	ldi	r24, 0xFE	; 254
    11c6:	8c 0f       	add	r24, r28
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	c0 f4       	brcc	.+48     	; 0x11fc <attempt_to_move_snake_forward+0x60>
		// remove food item
		int8_t foodID = food_at(new_head_position);
    11cc:	81 2f       	mov	r24, r17
    11ce:	0e 94 c7 07 	call	0xf8e	; 0xf8e <food_at>
		remove_food(foodID);
    11d2:	0e 94 55 08 	call	0x10aa	; 0x10aa <remove_food>
		play_eating_food_sound_effect();
    11d6:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>

		//  Account for additional two points for eating food. 
		add_to_score(2);
    11da:	82 e0       	ldi	r24, 0x02	; 2
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <add_to_score>
		increase_game_speed();
    11e2:	0e 94 b2 08 	call	0x1164	; 0x1164 <increase_game_speed>
		
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
    11e6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <add_food_item>
    11ea:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
    11ec:	0e 94 92 09 	call	0x1324	; 0x1324 <is_position_valid>
    11f0:	88 23       	and	r24, r24
    11f2:	21 f0       	breq	.+8      	; 0x11fc <attempt_to_move_snake_forward+0x60>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
    11f4:	63 e3       	ldi	r22, 0x33	; 51
    11f6:	80 2f       	mov	r24, r16
    11f8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
		}
	}
	if(move_result == ATE_SUPERFOOD || move_result == ATE_SUPERFOOD_BUT_CANT_GROW){
    11fc:	8c ef       	ldi	r24, 0xFC	; 252
    11fe:	8c 0f       	add	r24, r28
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	50 f4       	brcc	.+20     	; 0x1218 <attempt_to_move_snake_forward+0x7c>
		eat_superfood_from_board();
    1204:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <eat_superfood_from_board>
		add_to_score(9);
    1208:	89 e0       	ldi	r24, 0x09	; 9
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <add_to_score>
		increase_game_speed();
    1210:	0e 94 b2 08 	call	0x1164	; 0x1164 <increase_game_speed>
		
		play_eating_food_sound_effect();
    1214:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>

	}
	
	if(move_result == ATE_RAT || move_result == ATE_RAT_BUT_CANT_GROW){
    1218:	8a ef       	ldi	r24, 0xFA	; 250
    121a:	8c 0f       	add	r24, r28
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	50 f4       	brcc	.+20     	; 0x1234 <attempt_to_move_snake_forward+0x98>
		add_new_rat_position();
    1220:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <add_new_rat_position>
		add_to_score(4);
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <add_to_score>
		increase_game_speed();
    122c:	0e 94 b2 08 	call	0x1164	; 0x1164 <increase_game_speed>
		play_eating_food_sound_effect();
    1230:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	// display the snake head at that position.
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW ||
    1234:	cd 7f       	andi	r28, 0xFD	; 253
    1236:	c1 30       	cpi	r28, 0x01	; 1
    1238:	11 f0       	breq	.+4      	; 0x123e <attempt_to_move_snake_forward+0xa2>
    123a:	c5 30       	cpi	r28, 0x05	; 5
    123c:	29 f4       	brne	.+10     	; 0x1248 <attempt_to_move_snake_forward+0xac>
		 move_result == ATE_SUPERFOOD_BUT_CANT_GROW || move_result == ATE_RAT_BUT_CANT_GROW) {

		//  Because Score has changed, update Score on Terminal
		PosnType prev_tail_posn = advance_snake_tail();
    123e:	0e 94 80 0f 	call	0x1f00	; 0x1f00 <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
	}

	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
    1248:	60 ef       	ldi	r22, 0xF0	; 240
    124a:	8d 2f       	mov	r24, r29
    124c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
    1250:	6f e0       	ldi	r22, 0x0F	; 15
    1252:	81 2f       	mov	r24, r17
    1254:	0e 94 6e 08 	call	0x10dc	; 0x10dc <update_display_at_position>
	update_terminal_score();	
    1258:	0e 94 06 12 	call	0x240c	; 0x240c <update_terminal_score>

	return 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	01 c0       	rjmp	.+2      	; 0x1262 <attempt_to_move_snake_forward+0xc6>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
    1260:	80 e0       	ldi	r24, 0x00	; 0
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	update_terminal_score();	

	return 1;
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	08 95       	ret

0000126c <get_current_game_speed>:
		current_speed *= 0.90;
	}
}

int get_current_game_speed(void){
	return current_speed;
    126c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    1270:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
}
    1274:	08 95       	ret

00001276 <reset_game_speed>:
void reset_game_speed(void){
	current_speed = 600;
    1276:	88 e5       	ldi	r24, 0x58	; 88
    1278:	92 e0       	ldi	r25, 0x02	; 2
    127a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    127e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    1282:	08 95       	ret

00001284 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1284:	80 e8       	ldi	r24, 0x80	; 128
    1286:	0e 94 83 10 	call	0x2106	; 0x2106 <spi_setup_master>
    128a:	08 95       	ret

0000128c <ledmatrix_update_pixel>:
    128c:	1f 93       	push	r17
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	80 31       	cpi	r24, 0x10	; 16
    1294:	b0 f4       	brcc	.+44     	; 0x12c2 <ledmatrix_update_pixel+0x36>
    1296:	68 30       	cpi	r22, 0x08	; 8
    1298:	a0 f4       	brcc	.+40     	; 0x12c2 <ledmatrix_update_pixel+0x36>
    129a:	14 2f       	mov	r17, r20
    129c:	c6 2f       	mov	r28, r22
    129e:	d8 2f       	mov	r29, r24
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    12a6:	6c 2f       	mov	r22, r28
    12a8:	67 70       	andi	r22, 0x07	; 7
    12aa:	80 e1       	ldi	r24, 0x10	; 16
    12ac:	68 9f       	mul	r22, r24
    12ae:	90 01       	movw	r18, r0
    12b0:	11 24       	eor	r1, r1
    12b2:	8d 2f       	mov	r24, r29
    12b4:	8f 70       	andi	r24, 0x0F	; 15
    12b6:	82 2b       	or	r24, r18
    12b8:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    12bc:	81 2f       	mov	r24, r17
    12be:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	08 95       	ret

000012ca <ledmatrix_update_column>:
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	80 31       	cpi	r24, 0x10	; 16
    12d4:	90 f4       	brcc	.+36     	; 0x12fa <ledmatrix_update_column+0x30>
    12d6:	8b 01       	movw	r16, r22
    12d8:	c8 2f       	mov	r28, r24
    12da:	83 e0       	ldi	r24, 0x03	; 3
    12dc:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    12e0:	8c 2f       	mov	r24, r28
    12e2:	8f 70       	andi	r24, 0x0F	; 15
    12e4:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    12e8:	e8 01       	movw	r28, r16
    12ea:	08 5f       	subi	r16, 0xF8	; 248
    12ec:	1f 4f       	sbci	r17, 0xFF	; 255
    12ee:	89 91       	ld	r24, Y+
    12f0:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    12f4:	c0 17       	cp	r28, r16
    12f6:	d1 07       	cpc	r29, r17
    12f8:	d1 f7       	brne	.-12     	; 0x12ee <ledmatrix_update_column+0x24>
    12fa:	df 91       	pop	r29
    12fc:	cf 91       	pop	r28
    12fe:	1f 91       	pop	r17
    1300:	0f 91       	pop	r16
    1302:	08 95       	ret

00001304 <ledmatrix_shift_display_left>:
    1304:	84 e0       	ldi	r24, 0x04	; 4
    1306:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    130a:	82 e0       	ldi	r24, 0x02	; 2
    130c:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    1310:	08 95       	ret

00001312 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    1312:	8f e0       	ldi	r24, 0x0F	; 15
    1314:	0e 94 ab 10 	call	0x2156	; 0x2156 <spi_send_byte>
    1318:	08 95       	ret

0000131a <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    131a:	82 95       	swap	r24
    131c:	8f 70       	andi	r24, 0x0F	; 15
    131e:	08 95       	ret

00001320 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    1320:	8f 70       	andi	r24, 0x0F	; 15
    1322:	08 95       	ret

00001324 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    1324:	83 fb       	bst	r24, 3
    1326:	88 27       	eor	r24, r24
    1328:	80 f9       	bld	r24, 0
}
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	89 27       	eor	r24, r25
    132e:	08 95       	ret

00001330 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    1330:	20 e1       	ldi	r18, 0x10	; 16
    1332:	82 9f       	mul	r24, r18
    1334:	c0 01       	movw	r24, r0
    1336:	11 24       	eor	r1, r1
    1338:	67 70       	andi	r22, 0x07	; 7
}
    133a:	86 2b       	or	r24, r22
    133c:	08 95       	ret

0000133e <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    133e:	0e 94 42 09 	call	0x1284	; 0x1284 <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    1342:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	7b e4       	ldi	r23, 0x4B	; 75
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	0e 94 50 0e 	call	0x1ca0	; 0x1ca0 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    1354:	0e 94 1f 12 	call	0x243e	; 0x243e <init_timer0>
	
	// Turn on global interrupts
	sei();
    1358:	78 94       	sei
    135a:	08 95       	ret

0000135c <splash_screen>:
}

void splash_screen(void) {
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 9d 11 	call	0x233a	; 0x233a <set_display_attribute>
	clear_terminal();
    136c:	0e 94 94 11 	call	0x2328	; 0x2328 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1370:	0e 94 aa 11 	call	0x2354	; 0x2354 <hide_cursor>
	display_start_terminal_screen();
    1374:	0e 94 bc 11 	call	0x2378	; 0x2378 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1378:	0e 94 89 09 	call	0x1312	; 0x1312 <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    137c:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    137e:	0f 2e       	mov	r0, r31
    1380:	ff e0       	ldi	r31, 0x0F	; 15
    1382:	ff 2e       	mov	r15, r31
    1384:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    1386:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1388:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    138a:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    138c:	6c 2f       	mov	r22, r28
    138e:	8a e6       	ldi	r24, 0x6A	; 106
    1390:	92 e0       	ldi	r25, 0x02	; 2
    1392:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1396:	0d c0       	rjmp	.+26     	; 0x13b2 <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1398:	2f e7       	ldi	r18, 0x7F	; 127
    139a:	8c e2       	ldi	r24, 0x2C	; 44
    139c:	93 e0       	ldi	r25, 0x03	; 3
    139e:	21 50       	subi	r18, 0x01	; 1
    13a0:	80 40       	sbci	r24, 0x00	; 0
    13a2:	90 40       	sbci	r25, 0x00	; 0
    13a4:	e1 f7       	brne	.-8      	; 0x139e <splash_screen+0x42>
    13a6:	00 c0       	rjmp	.+0      	; 0x13a8 <splash_screen+0x4c>
    13a8:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    13aa:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    13ae:	8f 3f       	cpi	r24, 0xFF	; 255
    13b0:	a9 f5       	brne	.+106    	; 0x141c <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    13b2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <scroll_display>
    13b6:	81 11       	cpse	r24, r1
    13b8:	ef cf       	rjmp	.-34     	; 0x1398 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    13ba:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <random>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	83 70       	andi	r24, 0x03	; 3
    13c4:	99 27       	eor	r25, r25
    13c6:	aa 27       	eor	r26, r26
    13c8:	b0 78       	andi	r27, 0x80	; 128
    13ca:	bb 23       	and	r27, r27
    13cc:	54 f4       	brge	.+20     	; 0x13e2 <splash_screen+0x86>
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	a1 09       	sbc	r26, r1
    13d2:	b1 09       	sbc	r27, r1
    13d4:	8c 6f       	ori	r24, 0xFC	; 252
    13d6:	9f 6f       	ori	r25, 0xFF	; 255
    13d8:	af 6f       	ori	r26, 0xFF	; 255
    13da:	bf 6f       	ori	r27, 0xFF	; 255
    13dc:	01 96       	adiw	r24, 0x01	; 1
    13de:	a1 1d       	adc	r26, r1
    13e0:	b1 1d       	adc	r27, r1
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	a1 05       	cpc	r26, r1
    13e8:	b1 05       	cpc	r27, r1
    13ea:	91 f0       	breq	.+36     	; 0x1410 <splash_screen+0xb4>
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <splash_screen+0x9c>
    13ee:	89 2b       	or	r24, r25
    13f0:	8a 2b       	or	r24, r26
    13f2:	8b 2b       	or	r24, r27
    13f4:	59 f0       	breq	.+22     	; 0x140c <splash_screen+0xb0>
    13f6:	ca cf       	rjmp	.-108    	; 0x138c <splash_screen+0x30>
    13f8:	82 30       	cpi	r24, 0x02	; 2
    13fa:	91 05       	cpc	r25, r1
    13fc:	a1 05       	cpc	r26, r1
    13fe:	b1 05       	cpc	r27, r1
    1400:	49 f0       	breq	.+18     	; 0x1414 <splash_screen+0xb8>
    1402:	03 97       	sbiw	r24, 0x03	; 3
    1404:	a1 05       	cpc	r26, r1
    1406:	b1 05       	cpc	r27, r1
    1408:	39 f0       	breq	.+14     	; 0x1418 <splash_screen+0xbc>
    140a:	c0 cf       	rjmp	.-128    	; 0x138c <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    140c:	cd 2f       	mov	r28, r29
    140e:	be cf       	rjmp	.-132    	; 0x138c <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    1410:	cf 2d       	mov	r28, r15
    1412:	bc cf       	rjmp	.-136    	; 0x138c <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    1414:	c0 2f       	mov	r28, r16
    1416:	ba cf       	rjmp	.-140    	; 0x138c <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    1418:	c1 2f       	mov	r28, r17
    141a:	b8 cf       	rjmp	.-144    	; 0x138c <splash_screen+0x30>
		}
	}
}
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	08 95       	ret

00001428 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    1428:	0e 94 94 11 	call	0x2328	; 0x2328 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    142c:	0e 94 81 08 	call	0x1102	; 0x1102 <init_game>
		
	// Initialise the score
	init_score();
    1430:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    1434:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    1438:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <clear_serial_input_buffer>
    143c:	08 95       	ret

0000143e <play_game>:
}

void play_game(void) {
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	7f 92       	push	r7
    1444:	8f 92       	push	r8
    1446:	9f 92       	push	r9
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    145c:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    1460:	4b 01       	movw	r8, r22
    1462:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1464:	00 e0       	ldi	r16, 0x00	; 0
    1466:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1468:	0f 2e       	mov	r0, r31
    146a:	ff ed       	ldi	r31, 0xDF	; 223
    146c:	7f 2e       	mov	r7, r31
    146e:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1470:	0f 2e       	mov	r0, r31
    1472:	f7 e1       	ldi	r31, 0x17	; 23
    1474:	4f 2e       	mov	r4, r31
    1476:	f4 e0       	ldi	r31, 0x04	; 4
    1478:	5f 2e       	mov	r5, r31
    147a:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    147c:	0e 94 ba 10 	call	0x2174	; 0x2174 <time_to_add_superfood>
    1480:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    1482:	0e 94 11 11 	call	0x2222	; 0x2222 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    1486:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <time_to_remove_superfood>
    148a:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    148c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    1490:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <is_time_to_move_rat>
    1494:	81 11       	cpse	r24, r1
    1496:	0e 94 00 0c 	call	0x1800	; 0x1800 <move_rat>
			handle_buzzer_loop();
    149a:	0e 94 6d 02 	call	0x4da	; 0x4da <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    149e:	0e 94 3e 12 	call	0x247c	; 0x247c <timer_is_paused>
    14a2:	89 2b       	or	r24, r25
    14a4:	19 f0       	breq	.+6      	; 0x14ac <play_game+0x6e>
			button = -1;
			empty_button_queue();
    14a6:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <play_game+0x7a>
			}else{
		button = button_pushed();}
    14ac:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    14b0:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    14b2:	8f 3f       	cpi	r24, 0xFF	; 255
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <play_game+0x7a>
    14b6:	9a c0       	rjmp	.+308    	; 0x15ec <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    14b8:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <serial_input_available>
    14bc:	88 23       	and	r24, r24
    14be:	09 f4       	brne	.+2      	; 0x14c2 <play_game+0x84>
    14c0:	a4 c0       	rjmp	.+328    	; 0x160a <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    14c2:	f2 01       	movw	r30, r4
    14c4:	80 81       	ld	r24, Z
    14c6:	91 81       	ldd	r25, Z+1	; 0x01
    14c8:	0e 94 41 15 	call	0x2a82	; 0x2a82 <fgetc>
    14cc:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    14ce:	01 11       	cpse	r16, r1
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <play_game+0x9a>
    14d2:	8b 31       	cpi	r24, 0x1B	; 27
    14d4:	51 f4       	brne	.+20     	; 0x14ea <play_game+0xac>
    14d6:	96 c0       	rjmp	.+300    	; 0x1604 <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    14d8:	01 30       	cpi	r16, 0x01	; 1
    14da:	19 f4       	brne	.+6      	; 0x14e2 <play_game+0xa4>
    14dc:	8b 35       	cpi	r24, 0x5B	; 91
    14de:	29 f4       	brne	.+10     	; 0x14ea <play_game+0xac>
    14e0:	93 c0       	rjmp	.+294    	; 0x1608 <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    14e2:	02 30       	cpi	r16, 0x02	; 2
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <play_game+0xaa>
    14e6:	88 c0       	rjmp	.+272    	; 0x15f8 <play_game+0x1ba>
    14e8:	7b c0       	rjmp	.+246    	; 0x15e0 <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    14ea:	0e 94 3e 12 	call	0x247c	; 0x247c <timer_is_paused>
    14ee:	89 2b       	or	r24, r25
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <play_game+0xb6>
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <play_game+0x134>
    14f4:	08 c0       	rjmp	.+16     	; 0x1506 <play_game+0xc8>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    14f6:	d1 11       	cpse	r29, r1
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <play_game+0xce>
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    14fc:	00 e0       	ldi	r16, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <set_snake_dirn>
    1504:	50 c0       	rjmp	.+160    	; 0x15a6 <play_game+0x168>
    1506:	00 e0       	ldi	r16, 0x00	; 0
    1508:	d1 2f       	mov	r29, r17
    150a:	01 c0       	rjmp	.+2      	; 0x150e <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    150c:	c1 2f       	mov	r28, r17
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    150e:	d2 30       	cpi	r29, 0x02	; 2
    1510:	19 f0       	breq	.+6      	; 0x1518 <play_game+0xda>
    1512:	81 2f       	mov	r24, r17
    1514:	81 34       	cpi	r24, 0x41	; 65
    1516:	21 f4       	brne	.+8      	; 0x1520 <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <set_snake_dirn>
    151e:	43 c0       	rjmp	.+134    	; 0x15a6 <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    1520:	d3 30       	cpi	r29, 0x03	; 3
    1522:	11 f0       	breq	.+4      	; 0x1528 <play_game+0xea>
    1524:	84 34       	cpi	r24, 0x44	; 68
    1526:	21 f4       	brne	.+8      	; 0x1530 <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    1528:	83 e0       	ldi	r24, 0x03	; 3
    152a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <set_snake_dirn>
    152e:	3b c0       	rjmp	.+118    	; 0x15a6 <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    1530:	d1 30       	cpi	r29, 0x01	; 1
    1532:	11 f0       	breq	.+4      	; 0x1538 <play_game+0xfa>
    1534:	82 34       	cpi	r24, 0x42	; 66
    1536:	29 f4       	brne	.+10     	; 0x1542 <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <set_snake_dirn>
    153e:	33 c0       	rjmp	.+102    	; 0x15a6 <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1540:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    1542:	8c 2f       	mov	r24, r28
    1544:	8f 7d       	andi	r24, 0xDF	; 223
    1546:	80 35       	cpi	r24, 0x50	; 80
    1548:	19 f4       	brne	.+6      	; 0x1550 <play_game+0x112>
			toggle_timer_clock();
    154a:	0e 94 37 12 	call	0x246e	; 0x246e <toggle_timer_clock>
    154e:	2b c0       	rjmp	.+86     	; 0x15a6 <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    1550:	c3 37       	cpi	r28, 0x73	; 115
    1552:	19 f4       	brne	.+6      	; 0x155a <play_game+0x11c>
			save_game_to_EPPROM();
    1554:	0e 94 29 03 	call	0x652	; 0x652 <save_game_to_EPPROM>
    1558:	26 c0       	rjmp	.+76     	; 0x15a6 <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    155a:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    155e:	89 2b       	or	r24, r25
    1560:	11 f1       	breq	.+68     	; 0x15a6 <play_game+0x168>
    1562:	8c 2f       	mov	r24, r28
    1564:	8f 7d       	andi	r24, 0xDF	; 223
    1566:	8f 34       	cpi	r24, 0x4F	; 79
    1568:	f1 f4       	brne	.+60     	; 0x15a6 <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <load_EEPROM_data_on_next_game>
 			break;
    1570:	62 c0       	rjmp	.+196    	; 0x1636 <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1572:	8c 2f       	mov	r24, r28
    1574:	8f 7d       	andi	r24, 0xDF	; 223
    1576:	80 35       	cpi	r24, 0x50	; 80
    1578:	21 f4       	brne	.+8      	; 0x1582 <play_game+0x144>
			toggle_timer_clock();
    157a:	0e 94 37 12 	call	0x246e	; 0x246e <toggle_timer_clock>
    157e:	00 e0       	ldi	r16, 0x00	; 0
    1580:	12 c0       	rjmp	.+36     	; 0x15a6 <play_game+0x168>
    1582:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    1584:	83 35       	cpi	r24, 0x53	; 83
    1586:	19 f4       	brne	.+6      	; 0x158e <play_game+0x150>
			save_game_to_EPPROM();
    1588:	0e 94 29 03 	call	0x652	; 0x652 <save_game_to_EPPROM>
    158c:	0c c0       	rjmp	.+24     	; 0x15a6 <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    158e:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1592:	89 2b       	or	r24, r25
    1594:	41 f0       	breq	.+16     	; 0x15a6 <play_game+0x168>
    1596:	8c 2f       	mov	r24, r28
    1598:	8f 7d       	andi	r24, 0xDF	; 223
    159a:	8f 34       	cpi	r24, 0x4F	; 79
    159c:	21 f4       	brne	.+8      	; 0x15a6 <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <load_EEPROM_data_on_next_game>
			break;
    15a4:	48 c0       	rjmp	.+144    	; 0x1636 <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    15a6:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    15aa:	6b 01       	movw	r12, r22
    15ac:	7c 01       	movw	r14, r24
    15ae:	0e 94 36 09 	call	0x126c	; 0x126c <get_current_game_speed>
    15b2:	09 2e       	mov	r0, r25
    15b4:	00 0c       	add	r0, r0
    15b6:	aa 0b       	sbc	r26, r26
    15b8:	bb 0b       	sbc	r27, r27
    15ba:	88 0d       	add	r24, r8
    15bc:	99 1d       	adc	r25, r9
    15be:	aa 1d       	adc	r26, r10
    15c0:	bb 1d       	adc	r27, r11
    15c2:	c8 16       	cp	r12, r24
    15c4:	d9 06       	cpc	r13, r25
    15c6:	ea 06       	cpc	r14, r26
    15c8:	fb 06       	cpc	r15, r27
    15ca:	08 f4       	brcc	.+2      	; 0x15ce <play_game+0x190>
    15cc:	57 cf       	rjmp	.-338    	; 0x147c <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    15ce:	0e 94 ce 08 	call	0x119c	; 0x119c <attempt_to_move_snake_forward>
    15d2:	88 23       	and	r24, r24
    15d4:	81 f1       	breq	.+96     	; 0x1636 <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    15d6:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    15da:	4b 01       	movw	r8, r22
    15dc:	5c 01       	movw	r10, r24
    15de:	4e cf       	rjmp	.-356    	; 0x147c <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    15e0:	0e 94 3e 12 	call	0x247c	; 0x247c <timer_is_paused>
    15e4:	89 2b       	or	r24, r25
    15e6:	09 f4       	brne	.+2      	; 0x15ea <play_game+0x1ac>
    15e8:	ab cf       	rjmp	.-170    	; 0x1540 <play_game+0x102>
    15ea:	c3 cf       	rjmp	.-122    	; 0x1572 <play_game+0x134>
    15ec:	0e 94 3e 12 	call	0x247c	; 0x247c <timer_is_paused>
    15f0:	89 2b       	or	r24, r25
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <play_game+0x1b8>
    15f4:	80 cf       	rjmp	.-256    	; 0x14f6 <play_game+0xb8>
    15f6:	1c c0       	rjmp	.+56     	; 0x1630 <play_game+0x1f2>
    15f8:	0e 94 3e 12 	call	0x247c	; 0x247c <timer_is_paused>
    15fc:	89 2b       	or	r24, r25
    15fe:	51 f0       	breq	.+20     	; 0x1614 <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1600:	00 e0       	ldi	r16, 0x00	; 0
    1602:	13 c0       	rjmp	.+38     	; 0x162a <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1604:	01 e0       	ldi	r16, 0x01	; 1
    1606:	01 c0       	rjmp	.+2      	; 0x160a <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1608:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    160a:	0e 94 3e 12 	call	0x247c	; 0x247c <timer_is_paused>
    160e:	89 2b       	or	r24, r25
    1610:	61 f4       	brne	.+24     	; 0x162a <play_game+0x1ec>
    1612:	08 c0       	rjmp	.+16     	; 0x1624 <play_game+0x1e6>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1614:	c3 34       	cpi	r28, 0x43	; 67
    1616:	09 f4       	brne	.+2      	; 0x161a <play_game+0x1dc>
    1618:	71 cf       	rjmp	.-286    	; 0x14fc <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    161a:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    161c:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    161e:	c1 2f       	mov	r28, r17
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1620:	d1 2f       	mov	r29, r17
    1622:	78 cf       	rjmp	.-272    	; 0x1514 <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1624:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1628:	be cf       	rjmp	.-132    	; 0x15a6 <play_game+0x168>
    162a:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    162c:	87 2d       	mov	r24, r7
    162e:	aa cf       	rjmp	.-172    	; 0x1584 <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1630:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1634:	b8 cf       	rjmp	.-144    	; 0x15a6 <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    1636:	df 91       	pop	r29
    1638:	cf 91       	pop	r28
    163a:	1f 91       	pop	r17
    163c:	0f 91       	pop	r16
    163e:	ff 90       	pop	r15
    1640:	ef 90       	pop	r14
    1642:	df 90       	pop	r13
    1644:	cf 90       	pop	r12
    1646:	bf 90       	pop	r11
    1648:	af 90       	pop	r10
    164a:	9f 90       	pop	r9
    164c:	8f 90       	pop	r8
    164e:	7f 90       	pop	r7
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	08 95       	ret

00001656 <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    1656:	0e 94 94 11 	call	0x2328	; 0x2328 <clear_terminal>
	move_cursor(10,5);
    165a:	65 e0       	ldi	r22, 0x05	; 5
    165c:	8a e0       	ldi	r24, 0x0A	; 10
    165e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1662:	8c ea       	ldi	r24, 0xAC	; 172
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9f 93       	push	r25
    1668:	8f 93       	push	r24
    166a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
	move_cursor(10,7);
    166e:	67 e0       	ldi	r22, 0x07	; 7
    1670:	8a e0       	ldi	r24, 0x0A	; 10
    1672:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf("Score: %u", get_score());
    1676:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	7f 93       	push	r23
    1680:	6f 93       	push	r22
    1682:	8c e7       	ldi	r24, 0x7C	; 124
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	9f 93       	push	r25
    1688:	8f 93       	push	r24
    168a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	display_EEPROM_high_score();
    168e:	0e 94 b9 06 	call	0xd72	; 0xd72 <display_EEPROM_high_score>

	if (is_high_score()){
    1692:	0e 94 83 05 	call	0xb06	; 0xb06 <is_high_score>
    1696:	2d b7       	in	r18, 0x3d	; 61
    1698:	3e b7       	in	r19, 0x3e	; 62
    169a:	28 5f       	subi	r18, 0xF8	; 248
    169c:	3f 4f       	sbci	r19, 0xFF	; 255
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	3e bf       	out	0x3e, r19	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	2d bf       	out	0x3d, r18	; 61
    16a8:	81 11       	cpse	r24, r1
		set_high_score_name();	
    16aa:	0e 94 5e 06 	call	0xcbc	; 0xcbc <set_high_score_name>
	}
	move_cursor(10,9);
    16ae:	69 e0       	ldi	r22, 0x09	; 9
    16b0:	8a e0       	ldi	r24, 0x0A	; 10
    16b2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    16b6:	8e e8       	ldi	r24, 0x8E	; 142
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	9f 93       	push	r25
    16bc:	8f 93       	push	r24
    16be:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
	display_EEPROM_high_score(); 
    16c2:	0e 94 b9 06 	call	0xd72	; 0xd72 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    16ce:	8f 3f       	cpi	r24, 0xFF	; 255
    16d0:	e1 f3       	breq	.-8      	; 0x16ca <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    16d2:	0e 94 94 11 	call	0x2328	; 0x2328 <clear_terminal>
    16d6:	08 95       	ret

000016d8 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    16d8:	0e 94 9f 09 	call	0x133e	; 0x133e <initialise_hardware>
	DDRA = 0xff;
    16dc:	8f ef       	ldi	r24, 0xFF	; 255
    16de:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    16e0:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    16e2:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    16e4:	0e 94 ae 09 	call	0x135c	; 0x135c <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    16e8:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <load_EEPROM_data_on_next_game>
    16ec:	88 23       	and	r24, r24
    16ee:	19 f0       	breq	.+6      	; 0x16f6 <main+0x1e>
    16f0:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <new_game_from_EEPROM>
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <main+0x22>
			else{new_game();}
    16f6:	0e 94 14 0a 	call	0x1428	; 0x1428 <new_game>
		play_game();
    16fa:	0e 94 1f 0a 	call	0x143e	; 0x143e <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    16fe:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <load_EEPROM_data_on_next_game>
    1702:	81 11       	cpse	r24, r1
    1704:	f1 cf       	rjmp	.-30     	; 0x16e8 <main+0x10>
    1706:	0e 94 2b 0b 	call	0x1656	; 0x1656 <handle_game_over>
    170a:	ee cf       	rjmp	.-36     	; 0x16e8 <main+0x10>

0000170c <get_rat_position>:

uint16_t RAT_WAIT_TIME = 1200;

PosnType get_rat_position(void){
	return rat_position;
}
    170c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1710:	08 95       	ret

00001712 <set_rat_at_pos>:

void set_rat_at_pos(PosnType new_pos){
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	c8 2f       	mov	r28, r24
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_BLACK);
    1718:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    171c:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    1720:	d8 2f       	mov	r29, r24
    1722:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1726:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	6d 2f       	mov	r22, r29
    172e:	0e 94 46 09 	call	0x128c	; 0x128c <ledmatrix_update_pixel>
	rat_position = new_pos;
    1732:	c0 93 00 03 	sts	0x0300, r28	; 0x800300 <rat_position>
	ledmatrix_update_pixel(x_position(new_pos), y_position(new_pos), COLOUR_LIGHT_YELLOW);
    1736:	8c 2f       	mov	r24, r28
    1738:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    173c:	d8 2f       	mov	r29, r24
    173e:	8c 2f       	mov	r24, r28
    1740:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    1744:	43 e3       	ldi	r20, 0x33	; 51
    1746:	6d 2f       	mov	r22, r29
    1748:	0e 94 46 09 	call	0x128c	; 0x128c <ledmatrix_update_pixel>

}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <is_item_at>:

uint8_t is_item_at(PosnType position){
    1752:	cf 93       	push	r28
    1754:	c8 2f       	mov	r28, r24
	if (is_snake_at(position) || is_food_at(position)|| is_superfood_at(position)){
    1756:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <is_snake_at>
    175a:	81 11       	cpse	r24, r1
    175c:	0d c0       	rjmp	.+26     	; 0x1778 <is_item_at+0x26>
    175e:	8c 2f       	mov	r24, r28
    1760:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <is_food_at>
    1764:	81 11       	cpse	r24, r1
    1766:	0a c0       	rjmp	.+20     	; 0x177c <is_item_at+0x2a>
    1768:	8c 2f       	mov	r24, r28
    176a:	0e 94 04 11 	call	0x2208	; 0x2208 <is_superfood_at>
		return 1;
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	81 11       	cpse	r24, r1
    1772:	05 c0       	rjmp	.+10     	; 0x177e <is_item_at+0x2c>
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	03 c0       	rjmp	.+6      	; 0x177e <is_item_at+0x2c>
    1778:	91 e0       	ldi	r25, 0x01	; 1
    177a:	01 c0       	rjmp	.+2      	; 0x177e <is_item_at+0x2c>
    177c:	91 e0       	ldi	r25, 0x01	; 1
	}
	return 0;
}
    177e:	89 2f       	mov	r24, r25
    1780:	cf 91       	pop	r28
    1782:	08 95       	ret

00001784 <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    1784:	1f 93       	push	r17
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    178c:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1790:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    1794:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    1796:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    179a:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    179e:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	8c 0f       	add	r24, r28
    17a4:	8e 30       	cpi	r24, 0x0E	; 14
    17a6:	20 f4       	brcc	.+8      	; 0x17b0 <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    17a8:	8f ef       	ldi	r24, 0xFF	; 255
    17aa:	8d 0f       	add	r24, r29
    17ac:	86 30       	cpi	r24, 0x06	; 6
    17ae:	e8 f0       	brcs	.+58     	; 0x17ea <rat_jumped_the_board+0x66>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
    17b0:	c1 11       	cpse	r28, r1
    17b2:	06 c0       	rjmp	.+12     	; 0x17c0 <rat_jumped_the_board+0x3c>
    17b4:	81 2f       	mov	r24, r17
    17b6:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    17ba:	8f 30       	cpi	r24, 0x0F	; 15
    17bc:	41 f4       	brne	.+16     	; 0x17ce <rat_jumped_the_board+0x4a>
    17be:	17 c0       	rjmp	.+46     	; 0x17ee <rat_jumped_the_board+0x6a>
    17c0:	cf 30       	cpi	r28, 0x0F	; 15
    17c2:	29 f4       	brne	.+10     	; 0x17ce <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
    17c4:	81 2f       	mov	r24, r17
    17c6:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    17ca:	88 23       	and	r24, r24
    17cc:	91 f0       	breq	.+36     	; 0x17f2 <rat_jumped_the_board+0x6e>
    17ce:	d1 11       	cpse	r29, r1
    17d0:	05 c0       	rjmp	.+10     	; 0x17dc <rat_jumped_the_board+0x58>
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    17d2:	81 2f       	mov	r24, r17
    17d4:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	0e c0       	rjmp	.+28     	; 0x17f8 <rat_jumped_the_board+0x74>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    17dc:	d7 30       	cpi	r29, 0x07	; 7
    17de:	59 f4       	brne	.+22     	; 0x17f6 <rat_jumped_the_board+0x72>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
    17e0:	81 2f       	mov	r24, r17
    17e2:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
			return 1; 
		}
	return 1; 
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	07 c0       	rjmp	.+14     	; 0x17f8 <rat_jumped_the_board+0x74>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	05 c0       	rjmp	.+10     	; 0x17f8 <rat_jumped_the_board+0x74>
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	03 c0       	rjmp	.+6      	; 0x17f8 <rat_jumped_the_board+0x74>
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <rat_jumped_the_board+0x74>
		}
	return 1; 
    17f6:	81 e0       	ldi	r24, 0x01	; 1
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	08 95       	ret

00001800 <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    1800:	0f 93       	push	r16
    1802:	1f 93       	push	r17
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1810:	08 2f       	mov	r16, r24
	uint8_t move_option = rand()%4; 
    1812:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
    1816:	83 70       	andi	r24, 0x03	; 3
    1818:	90 78       	andi	r25, 0x80	; 128
    181a:	99 23       	and	r25, r25
    181c:	24 f4       	brge	.+8      	; 0x1826 <move_rat+0x26>
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	8c 6f       	ori	r24, 0xFC	; 252
    1822:	9f 6f       	ori	r25, 0xFF	; 255
    1824:	01 96       	adiw	r24, 0x01	; 1
	return 0;
}

void move_rat(void){
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
    1826:	10 e0       	ldi	r17, 0x00	; 0
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    1828:	c8 2f       	mov	r28, r24
    182a:	d0 e0       	ldi	r29, 0x00	; 0
    182c:	c1 30       	cpi	r28, 0x01	; 1
    182e:	d1 05       	cpc	r29, r1
    1830:	d1 f0       	breq	.+52     	; 0x1866 <move_rat+0x66>
    1832:	1c f4       	brge	.+6      	; 0x183a <move_rat+0x3a>
    1834:	20 97       	sbiw	r28, 0x00	; 0
    1836:	41 f0       	breq	.+16     	; 0x1848 <move_rat+0x48>
    1838:	42 c0       	rjmp	.+132    	; 0x18be <move_rat+0xbe>
    183a:	c2 30       	cpi	r28, 0x02	; 2
    183c:	d1 05       	cpc	r29, r1
    183e:	11 f1       	breq	.+68     	; 0x1884 <move_rat+0x84>
    1840:	c3 30       	cpi	r28, 0x03	; 3
    1842:	d1 05       	cpc	r29, r1
    1844:	71 f1       	breq	.+92     	; 0x18a2 <move_rat+0xa2>
    1846:	3b c0       	rjmp	.+118    	; 0x18be <move_rat+0xbe>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    1848:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    184c:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    1850:	08 2f       	mov	r16, r24
    1852:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1856:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    185a:	61 e0       	ldi	r22, 0x01	; 1
    185c:	60 0f       	add	r22, r16
    185e:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1862:	08 2f       	mov	r16, r24
			break; 
    1864:	2c c0       	rjmp	.+88     	; 0x18be <move_rat+0xbe>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    1866:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    186a:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    186e:	08 2f       	mov	r16, r24
    1870:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1874:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    1878:	6f ef       	ldi	r22, 0xFF	; 255
    187a:	60 0f       	add	r22, r16
    187c:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1880:	08 2f       	mov	r16, r24
			break;
    1882:	1d c0       	rjmp	.+58     	; 0x18be <move_rat+0xbe>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    1884:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1888:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    188c:	08 2f       	mov	r16, r24
    188e:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1892:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    1896:	60 2f       	mov	r22, r16
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    189e:	08 2f       	mov	r16, r24
			break;
    18a0:	0e c0       	rjmp	.+28     	; 0x18be <move_rat+0xbe>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    18a2:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    18a6:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    18aa:	08 2f       	mov	r16, r24
    18ac:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    18b0:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    18b4:	60 2f       	mov	r22, r16
    18b6:	81 50       	subi	r24, 0x01	; 1
    18b8:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    18bc:	08 2f       	mov	r16, r24
			break;
			
		}
		attempts ++;
    18be:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_item_at(new_rat_pos) && (attempts <4) && (rat_jumped_the_board(new_rat_pos)));
    18c0:	80 2f       	mov	r24, r16
    18c2:	0e 94 a9 0b 	call	0x1752	; 0x1752 <is_item_at>
    18c6:	88 23       	and	r24, r24
    18c8:	39 f0       	breq	.+14     	; 0x18d8 <move_rat+0xd8>
    18ca:	14 30       	cpi	r17, 0x04	; 4
    18cc:	39 f0       	breq	.+14     	; 0x18dc <move_rat+0xdc>
    18ce:	80 2f       	mov	r24, r16
    18d0:	0e 94 c2 0b 	call	0x1784	; 0x1784 <rat_jumped_the_board>
    18d4:	81 11       	cpse	r24, r1
    18d6:	aa cf       	rjmp	.-172    	; 0x182c <move_rat+0x2c>
	
	if (attempts<=4){
    18d8:	15 30       	cpi	r17, 0x05	; 5
    18da:	18 f4       	brcc	.+6      	; 0x18e2 <move_rat+0xe2>
		set_rat_at_pos(new_rat_pos); 
    18dc:	80 2f       	mov	r24, r16
    18de:	0e 94 89 0b 	call	0x1712	; 0x1712 <set_rat_at_pos>
	}
	}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0f 91       	pop	r16
    18ea:	08 95       	ret

000018ec <is_rat_at>:
		}
	return 1; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    18ec:	91 e0       	ldi	r25, 0x01	; 1
    18ee:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <rat_position>
    18f2:	28 13       	cpse	r18, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
}
    18f6:	89 2f       	mov	r24, r25
    18f8:	08 95       	ret

000018fa <add_new_rat_position>:

void add_new_rat_position(void){
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1900:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
    1904:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1906:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
        test_position = position(x,y);
    190a:	bc 01       	movw	r22, r24
    190c:	67 70       	andi	r22, 0x07	; 7
    190e:	70 78       	andi	r23, 0x80	; 128
    1910:	77 23       	and	r23, r23
    1912:	34 f4       	brge	.+12     	; 0x1920 <add_new_rat_position+0x26>
    1914:	61 50       	subi	r22, 0x01	; 1
    1916:	71 09       	sbc	r23, r1
    1918:	68 6f       	ori	r22, 0xF8	; 248
    191a:	7f 6f       	ori	r23, 0xFF	; 255
    191c:	6f 5f       	subi	r22, 0xFF	; 255
    191e:	7f 4f       	sbci	r23, 0xFF	; 255
    1920:	ce 01       	movw	r24, r28
    1922:	8f 70       	andi	r24, 0x0F	; 15
    1924:	90 78       	andi	r25, 0x80	; 128
    1926:	99 23       	and	r25, r25
    1928:	24 f4       	brge	.+8      	; 0x1932 <add_new_rat_position+0x38>
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	80 6f       	ori	r24, 0xF0	; 240
    192e:	9f 6f       	ori	r25, 0xFF	; 255
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1936:	c8 2f       	mov	r28, r24
    1938:	13 e6       	ldi	r17, 0x63	; 99
    193a:	1e c0       	rjmp	.+60     	; 0x1978 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    193c:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
    1940:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1942:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
        test_position = position(x,y);
    1946:	bc 01       	movw	r22, r24
    1948:	67 70       	andi	r22, 0x07	; 7
    194a:	70 78       	andi	r23, 0x80	; 128
    194c:	77 23       	and	r23, r23
    194e:	34 f4       	brge	.+12     	; 0x195c <add_new_rat_position+0x62>
    1950:	61 50       	subi	r22, 0x01	; 1
    1952:	71 09       	sbc	r23, r1
    1954:	68 6f       	ori	r22, 0xF8	; 248
    1956:	7f 6f       	ori	r23, 0xFF	; 255
    1958:	6f 5f       	subi	r22, 0xFF	; 255
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	ce 01       	movw	r24, r28
    195e:	8f 70       	andi	r24, 0x0F	; 15
    1960:	90 78       	andi	r25, 0x80	; 128
    1962:	99 23       	and	r25, r25
    1964:	24 f4       	brge	.+8      	; 0x196e <add_new_rat_position+0x74>
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	80 6f       	ori	r24, 0xF0	; 240
    196a:	9f 6f       	ori	r25, 0xFF	; 255
    196c:	01 96       	adiw	r24, 0x01	; 1
    196e:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1972:	c8 2f       	mov	r28, r24
    1974:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1976:	91 f0       	breq	.+36     	; 0x199c <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1978:	8c 2f       	mov	r24, r28
    197a:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    197e:	81 11       	cpse	r24, r1
    1980:	dd cf       	rjmp	.-70     	; 0x193c <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    1982:	8c 2f       	mov	r24, r28
    1984:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <is_food_at>
    1988:	81 11       	cpse	r24, r1
    198a:	d8 cf       	rjmp	.-80     	; 0x193c <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    198c:	0e 94 01 11 	call	0x2202	; 0x2202 <get_superfood_position>
    1990:	8c 17       	cp	r24, r28
    1992:	a1 f2       	breq	.-88     	; 0x193c <add_new_rat_position+0x42>
    1994:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    1998:	8c 17       	cp	r24, r28
    199a:	81 f2       	breq	.-96     	; 0x193c <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    199c:	c0 93 00 03 	sts	0x0300, r28	; 0x800300 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    19a0:	8c 2f       	mov	r24, r28
    19a2:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    19a6:	c8 2f       	mov	r28, r24
    19a8:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <rat_position>
    19ac:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    19b0:	4c e3       	ldi	r20, 0x3C	; 60
    19b2:	6c 2f       	mov	r22, r28
    19b4:	0e 94 46 09 	call	0x128c	; 0x128c <ledmatrix_update_pixel>
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	08 95       	ret

000019c0 <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    19c0:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    19c4:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    19c8:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    19cc:	40 e0       	ldi	r20, 0x00	; 0
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodsi4>
    19d4:	21 e0       	ldi	r18, 0x01	; 1
    19d6:	67 2b       	or	r22, r23
    19d8:	68 2b       	or	r22, r24
    19da:	69 2b       	or	r22, r25
    19dc:	09 f0       	breq	.+2      	; 0x19e0 <is_time_to_move_rat+0x20>
    19de:	20 e0       	ldi	r18, 0x00	; 0
}
    19e0:	82 2f       	mov	r24, r18
    19e2:	08 95       	ret

000019e4 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    19e4:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <score>
    19e8:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <score+0x1>
    19ec:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <score+0x2>
    19f0:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <score+0x3>
    19f4:	08 95       	ret

000019f6 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    19f6:	40 91 a7 02 	lds	r20, 0x02A7	; 0x8002a7 <score>
    19fa:	50 91 a8 02 	lds	r21, 0x02A8	; 0x8002a8 <score+0x1>
    19fe:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <score+0x2>
    1a02:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <score+0x3>
    1a06:	48 0f       	add	r20, r24
    1a08:	59 1f       	adc	r21, r25
    1a0a:	61 1d       	adc	r22, r1
    1a0c:	71 1d       	adc	r23, r1
    1a0e:	40 93 a7 02 	sts	0x02A7, r20	; 0x8002a7 <score>
    1a12:	50 93 a8 02 	sts	0x02A8, r21	; 0x8002a8 <score+0x1>
    1a16:	60 93 a9 02 	sts	0x02A9, r22	; 0x8002a9 <score+0x2>
    1a1a:	70 93 aa 02 	sts	0x02AA, r23	; 0x8002aa <score+0x3>
    1a1e:	08 95       	ret

00001a20 <get_score>:
}

uint32_t get_score(void) {
	return score;
    1a20:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <score>
    1a24:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <score+0x1>
    1a28:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <score+0x2>
    1a2c:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <score+0x3>
}
    1a30:	08 95       	ret

00001a32 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1a32:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    1a36:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <display_string+0x1>
    1a3a:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <display_string>
	next_col_ptr = 0;
    1a3e:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <next_col_ptr+0x1>
    1a42:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <next_col_ptr>
	next_char_to_display = 0;
    1a46:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <next_char_to_display+0x1>
    1a4a:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <next_char_to_display>
    1a4e:	08 95       	ret

00001a50 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1a50:	0f 93       	push	r16
    1a52:	1f 93       	push	r17
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	28 97       	sbiw	r28, 0x08	; 8
    1a5e:	0f b6       	in	r0, 0x3f	; 63
    1a60:	f8 94       	cli
    1a62:	de bf       	out	0x3e, r29	; 62
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1a68:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <next_col_ptr>
    1a6c:	f0 91 b1 02 	lds	r31, 0x02B1	; 0x8002b1 <next_col_ptr+0x1>
    1a70:	30 97       	sbiw	r30, 0x00	; 0
    1a72:	81 f0       	breq	.+32     	; 0x1a94 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1a74:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1a76:	10 ff       	sbrs	r17, 0
    1a78:	06 c0       	rjmp	.+12     	; 0x1a86 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1a7a:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <next_col_ptr+0x1>
    1a7e:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	6b c0       	rjmp	.+214    	; 0x1b5c <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1a86:	31 96       	adiw	r30, 0x01	; 1
    1a88:	f0 93 b1 02 	sts	0x02B1, r31	; 0x8002b1 <next_col_ptr+0x1>
    1a8c:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a90:	00 e0       	ldi	r16, 0x00	; 0
    1a92:	64 c0       	rjmp	.+200    	; 0x1b5c <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1a94:	e0 91 ac 02 	lds	r30, 0x02AC	; 0x8002ac <next_char_to_display>
    1a98:	f0 91 ad 02 	lds	r31, 0x02AD	; 0x8002ad <next_char_to_display+0x1>
    1a9c:	30 97       	sbiw	r30, 0x00	; 0
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <scroll_display+0x52>
    1aa0:	49 c0       	rjmp	.+146    	; 0x1b34 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1aa2:	cf 01       	movw	r24, r30
    1aa4:	01 96       	adiw	r24, 0x01	; 1
    1aa6:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <next_char_to_display+0x1>
    1aaa:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <next_char_to_display>
    1aae:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1ab0:	e1 11       	cpse	r30, r1
    1ab2:	0a c0       	rjmp	.+20     	; 0x1ac8 <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1ab4:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <next_char_to_display+0x1>
    1ab8:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <next_char_to_display>
			shift_countdown = 16;
    1abc:	80 e1       	ldi	r24, 0x10	; 16
    1abe:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ac2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    1ac6:	4a c0       	rjmp	.+148    	; 0x1b5c <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1ac8:	8f e9       	ldi	r24, 0x9F	; 159
    1aca:	8e 0f       	add	r24, r30
    1acc:	8a 31       	cpi	r24, 0x1A	; 26
    1ace:	70 f4       	brcc	.+28     	; 0x1aec <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1ad0:	f0 e0       	ldi	r31, 0x00	; 0
    1ad2:	ee 0f       	add	r30, r30
    1ad4:	ff 1f       	adc	r31, r31
    1ad6:	e8 5f       	subi	r30, 0xF8	; 248
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	85 91       	lpm	r24, Z+
    1adc:	94 91       	lpm	r25, Z
    1ade:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <next_col_ptr+0x1>
    1ae2:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ae6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ae8:	10 e0       	ldi	r17, 0x00	; 0
    1aea:	38 c0       	rjmp	.+112    	; 0x1b5c <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1aec:	8f eb       	ldi	r24, 0xBF	; 191
    1aee:	8e 0f       	add	r24, r30
    1af0:	8a 31       	cpi	r24, 0x1A	; 26
    1af2:	70 f4       	brcc	.+28     	; 0x1b10 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	ee 0f       	add	r30, r30
    1af8:	ff 1f       	adc	r31, r31
    1afa:	e8 5b       	subi	r30, 0xB8	; 184
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	85 91       	lpm	r24, Z+
    1b00:	94 91       	lpm	r25, Z
    1b02:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <next_col_ptr+0x1>
    1b06:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
    1b0e:	26 c0       	rjmp	.+76     	; 0x1b5c <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1b10:	80 ed       	ldi	r24, 0xD0	; 208
    1b12:	8e 0f       	add	r24, r30
    1b14:	8a 30       	cpi	r24, 0x0A	; 10
    1b16:	00 f5       	brcc	.+64     	; 0x1b58 <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	ea 5a       	subi	r30, 0xAA	; 170
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	85 91       	lpm	r24, Z+
    1b24:	94 91       	lpm	r25, Z
    1b26:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <next_col_ptr+0x1>
    1b2a:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b30:	10 e0       	ldi	r17, 0x00	; 0
    1b32:	14 c0       	rjmp	.+40     	; 0x1b5c <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1b34:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <display_string>
    1b38:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b3c:	01 e0       	ldi	r16, 0x01	; 1
    1b3e:	00 97       	sbiw	r24, 0x00	; 0
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <scroll_display+0xf4>
    1b42:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1b44:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <next_char_to_display+0x1>
    1b48:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <next_char_to_display>
		display_string = 0;
    1b4c:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <display_string+0x1>
    1b50:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b58:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b5a:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1b5c:	0e 94 82 09 	call	0x1304	; 0x1304 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1b60:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    1b64:	fe 01       	movw	r30, r28
    1b66:	38 96       	adiw	r30, 0x08	; 8
    1b68:	ce 01       	movw	r24, r28
    1b6a:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1b6c:	11 23       	and	r17, r17
    1b6e:	14 f4       	brge	.+4      	; 0x1b74 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1b70:	20 83       	st	Z, r18
    1b72:	01 c0       	rjmp	.+2      	; 0x1b76 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1b74:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1b76:	11 0f       	add	r17, r17
    1b78:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1b7a:	e8 17       	cp	r30, r24
    1b7c:	f9 07       	cpc	r31, r25
    1b7e:	b1 f7       	brne	.-20     	; 0x1b6c <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1b80:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1b82:	be 01       	movw	r22, r28
    1b84:	6f 5f       	subi	r22, 0xFF	; 255
    1b86:	7f 4f       	sbci	r23, 0xFF	; 255
    1b88:	8f e0       	ldi	r24, 0x0F	; 15
    1b8a:	0e 94 65 09 	call	0x12ca	; 0x12ca <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1b8e:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <shift_countdown.1854>
    1b92:	88 23       	and	r24, r24
    1b94:	89 f0       	breq	.+34     	; 0x1bb8 <scroll_display+0x168>
		shift_countdown--;
    1b96:	81 50       	subi	r24, 0x01	; 1
    1b98:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1b9c:	00 23       	and	r16, r16
    1b9e:	11 f0       	breq	.+4      	; 0x1ba4 <scroll_display+0x154>
    1ba0:	88 23       	and	r24, r24
    1ba2:	11 f0       	breq	.+4      	; 0x1ba8 <scroll_display+0x158>
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	03 c0       	rjmp	.+6      	; 0x1bae <scroll_display+0x15e>
    1ba8:	91 e0       	ldi	r25, 0x01	; 1
    1baa:	01 c0       	rjmp	.+2      	; 0x1bae <scroll_display+0x15e>
    1bac:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1bae:	81 e0       	ldi	r24, 0x01	; 1
    1bb0:	99 23       	and	r25, r25
    1bb2:	29 f0       	breq	.+10     	; 0x1bbe <scroll_display+0x16e>
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	03 c0       	rjmp	.+6      	; 0x1bbe <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1bb8:	00 23       	and	r16, r16
    1bba:	a1 f3       	breq	.-24     	; 0x1ba4 <scroll_display+0x154>
    1bbc:	f7 cf       	rjmp	.-18     	; 0x1bac <scroll_display+0x15c>
	return !finished;
}
    1bbe:	28 96       	adiw	r28, 0x08	; 8
    1bc0:	0f b6       	in	r0, 0x3f	; 63
    1bc2:	f8 94       	cli
    1bc4:	de bf       	out	0x3e, r29	; 62
    1bc6:	0f be       	out	0x3f, r0	; 63
    1bc8:	cd bf       	out	0x3d, r28	; 61
    1bca:	df 91       	pop	r29
    1bcc:	cf 91       	pop	r28
    1bce:	1f 91       	pop	r17
    1bd0:	0f 91       	pop	r16
    1bd2:	08 95       	ret

00001bd4 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1bd4:	cf 93       	push	r28
    1bd6:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1bd8:	8a 30       	cpi	r24, 0x0A	; 10
    1bda:	19 f4       	brne	.+6      	; 0x1be2 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1bdc:	8d e0       	ldi	r24, 0x0D	; 13
    1bde:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1be2:	9f b7       	in	r25, 0x3f	; 63
    1be4:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1be8:	99 23       	and	r25, r25
    1bea:	29 f1       	breq	.+74     	; 0x1c36 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1bec:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf2:	d1 f3       	breq	.-12     	; 0x1be8 <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1bf4:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1bf6:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <out_insert_pos>
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	8e 0f       	add	r24, r30
    1bfe:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <out_insert_pos>
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	ed 5f       	subi	r30, 0xFD	; 253
    1c06:	fc 4f       	sbci	r31, 0xFC	; 252
    1c08:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1c0a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1c0e:	8f 5f       	subi	r24, 0xFF	; 255
    1c10:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1c14:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <out_insert_pos>
    1c18:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1a:	11 f4       	brne	.+4      	; 0x1c20 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1c1c:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1c20:	e1 ec       	ldi	r30, 0xC1	; 193
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	80 62       	ori	r24, 0x20	; 32
    1c28:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1c2a:	99 23       	and	r25, r25
    1c2c:	39 f0       	breq	.+14     	; 0x1c3c <uart_put_char+0x68>
		sei();
    1c2e:	78 94       	sei
	}
	return 0;
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	05 c0       	rjmp	.+10     	; 0x1c40 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
}
    1c40:	cf 91       	pop	r28
    1c42:	08 95       	ret

00001c44 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1c44:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1c48:	88 23       	and	r24, r24
    1c4a:	e1 f3       	breq	.-8      	; 0x1c44 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1c4c:	2f b7       	in	r18, 0x3f	; 63
    1c4e:	20 78       	andi	r18, 0x80	; 128
	cli();
    1c50:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1c52:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <input_insert_pos>
    1c56:	30 91 14 04 	lds	r19, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	83 1b       	sub	r24, r19
    1c5e:	91 09       	sbc	r25, r1
    1c60:	5a f4       	brpl	.+22     	; 0x1c78 <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c62:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <input_insert_pos>
    1c66:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	e8 1b       	sub	r30, r24
    1c6e:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c70:	ed 5e       	subi	r30, 0xED	; 237
    1c72:	fb 4f       	sbci	r31, 0xFB	; 251
    1c74:	80 81       	ld	r24, Z
    1c76:	0a c0       	rjmp	.+20     	; 0x1c8c <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1c78:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <input_insert_pos>
    1c7c:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	e8 1b       	sub	r30, r24
    1c84:	f1 09       	sbc	r31, r1
    1c86:	ed 5f       	subi	r30, 0xFD	; 253
    1c88:	fb 4f       	sbci	r31, 0xFB	; 251
    1c8a:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1c8c:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1c90:	91 50       	subi	r25, 0x01	; 1
    1c92:	90 93 14 04 	sts	0x0414, r25	; 0x800414 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1c96:	22 23       	and	r18, r18
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <uart_get_char+0x58>
		sei();
    1c9a:	78 94       	sei
	}	
	return c;
}
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	08 95       	ret

00001ca0 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1ca0:	10 92 01 03 	sts	0x0301, r1	; 0x800301 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1ca4:	10 92 02 03 	sts	0x0302, r1	; 0x800302 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1ca8:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1cac:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <bytes_in_input_buffer>
	input_overrun = 0;
    1cb0:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1cb4:	40 93 b2 02 	sts	0x02B2, r20	; 0x8002b2 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	aa 1f       	adc	r26, r26
    1cc2:	bb 1f       	adc	r27, r27
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	aa 1f       	adc	r26, r26
    1cca:	bb 1f       	adc	r27, r27
    1ccc:	9c 01       	movw	r18, r24
    1cce:	ad 01       	movw	r20, r26
    1cd0:	22 0f       	add	r18, r18
    1cd2:	33 1f       	adc	r19, r19
    1cd4:	44 1f       	adc	r20, r20
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	72 e1       	ldi	r23, 0x12	; 18
    1cdc:	8a e7       	ldi	r24, 0x7A	; 122
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	0e 94 24 14 	call	0x2848	; 0x2848 <__divmodsi4>
    1ce4:	ba 01       	movw	r22, r20
    1ce6:	a9 01       	movw	r20, r18
    1ce8:	4f 5f       	subi	r20, 0xFF	; 255
    1cea:	5f 4f       	sbci	r21, 0xFF	; 255
    1cec:	6f 4f       	sbci	r22, 0xFF	; 255
    1cee:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf0:	db 01       	movw	r26, r22
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	1a f4       	brpl	.+6      	; 0x1cfc <init_serial_stdio+0x5c>
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	a1 1d       	adc	r26, r1
    1cfa:	b1 1d       	adc	r27, r1
    1cfc:	b5 95       	asr	r27
    1cfe:	a7 95       	ror	r26
    1d00:	97 95       	ror	r25
    1d02:	87 95       	ror	r24
    1d04:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1d06:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1d0a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1d0e:	e1 ec       	ldi	r30, 0xC1	; 193
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	88 e1       	ldi	r24, 0x18	; 24
    1d14:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1d16:	80 81       	ld	r24, Z
    1d18:	80 68       	ori	r24, 0x80	; 128
    1d1a:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1d1c:	e7 e1       	ldi	r30, 0x17	; 23
    1d1e:	f4 e0       	ldi	r31, 0x04	; 4
    1d20:	8f e0       	ldi	r24, 0x0F	; 15
    1d22:	91 e0       	ldi	r25, 0x01	; 1
    1d24:	93 83       	std	Z+3, r25	; 0x03
    1d26:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	08 95       	ret

00001d2e <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1d2e:	90 91 14 04 	lds	r25, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	91 11       	cpse	r25, r1
    1d36:	01 c0       	rjmp	.+2      	; 0x1d3a <serial_input_available+0xc>
    1d38:	80 e0       	ldi	r24, 0x00	; 0
}
    1d3a:	08 95       	ret

00001d3c <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1d3c:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1d40:	10 92 14 04 	sts	0x0414, r1	; 0x800414 <bytes_in_input_buffer>
    1d44:	08 95       	ret

00001d46 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1d46:	1f 92       	push	r1
    1d48:	0f 92       	push	r0
    1d4a:	0f b6       	in	r0, 0x3f	; 63
    1d4c:	0f 92       	push	r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	2f 93       	push	r18
    1d52:	8f 93       	push	r24
    1d54:	9f 93       	push	r25
    1d56:	ef 93       	push	r30
    1d58:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1d5a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1d5e:	88 23       	and	r24, r24
    1d60:	29 f1       	breq	.+74     	; 0x1dac <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1d62:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <out_insert_pos>
    1d66:	20 91 02 03 	lds	r18, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	82 1b       	sub	r24, r18
    1d6e:	91 09       	sbc	r25, r1
    1d70:	5a f4       	brpl	.+22     	; 0x1d88 <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d72:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <out_insert_pos>
    1d76:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	e8 1b       	sub	r30, r24
    1d7e:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d80:	ee 5f       	subi	r30, 0xFE	; 254
    1d82:	fb 4f       	sbci	r31, 0xFB	; 251
    1d84:	90 81       	ld	r25, Z
    1d86:	0a c0       	rjmp	.+20     	; 0x1d9c <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1d88:	e0 91 01 03 	lds	r30, 0x0301	; 0x800301 <out_insert_pos>
    1d8c:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	e8 1b       	sub	r30, r24
    1d94:	f1 09       	sbc	r31, r1
    1d96:	ed 5f       	subi	r30, 0xFD	; 253
    1d98:	fc 4f       	sbci	r31, 0xFC	; 252
    1d9a:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1d9c:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1da0:	81 50       	subi	r24, 0x01	; 1
    1da2:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1da6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1daa:	05 c0       	rjmp	.+10     	; 0x1db6 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1dac:	e1 ec       	ldi	r30, 0xC1	; 193
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	8f 7d       	andi	r24, 0xDF	; 223
    1db4:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1db6:	ff 91       	pop	r31
    1db8:	ef 91       	pop	r30
    1dba:	9f 91       	pop	r25
    1dbc:	8f 91       	pop	r24
    1dbe:	2f 91       	pop	r18
    1dc0:	0f 90       	pop	r0
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	0f 90       	pop	r0
    1dc6:	1f 90       	pop	r1
    1dc8:	18 95       	reti

00001dca <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1dca:	1f 92       	push	r1
    1dcc:	0f 92       	push	r0
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	0f 92       	push	r0
    1dd2:	11 24       	eor	r1, r1
    1dd4:	2f 93       	push	r18
    1dd6:	3f 93       	push	r19
    1dd8:	4f 93       	push	r20
    1dda:	5f 93       	push	r21
    1ddc:	6f 93       	push	r22
    1dde:	7f 93       	push	r23
    1de0:	8f 93       	push	r24
    1de2:	9f 93       	push	r25
    1de4:	af 93       	push	r26
    1de6:	bf 93       	push	r27
    1de8:	cf 93       	push	r28
    1dea:	ef 93       	push	r30
    1dec:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1dee:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1df2:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <do_echo>
    1df6:	88 23       	and	r24, r24
    1df8:	49 f0       	breq	.+18     	; 0x1e0c <__vector_20+0x42>
    1dfa:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <bytes_in_out_buffer>
    1dfe:	8f 3f       	cpi	r24, 0xFF	; 255
    1e00:	29 f0       	breq	.+10     	; 0x1e0c <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	8c 2f       	mov	r24, r28
    1e08:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1e0c:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1e10:	80 31       	cpi	r24, 0x10	; 16
    1e12:	20 f0       	brcs	.+8      	; 0x1e1c <__vector_20+0x52>
		input_overrun = 1;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 13 04 	sts	0x0413, r24	; 0x800413 <input_overrun>
    1e1a:	18 c0       	rjmp	.+48     	; 0x1e4c <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1e1c:	cd 30       	cpi	r28, 0x0D	; 13
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <__vector_20+0x58>
			c = '\n';
    1e20:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1e22:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <input_insert_pos>
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	8e 0f       	add	r24, r30
    1e2a:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <input_insert_pos>
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	ed 5f       	subi	r30, 0xFD	; 253
    1e32:	fb 4f       	sbci	r31, 0xFB	; 251
    1e34:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1e36:	80 91 14 04 	lds	r24, 0x0414	; 0x800414 <bytes_in_input_buffer>
    1e3a:	8f 5f       	subi	r24, 0xFF	; 255
    1e3c:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1e40:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <input_insert_pos>
    1e44:	80 31       	cpi	r24, 0x10	; 16
    1e46:	11 f4       	brne	.+4      	; 0x1e4c <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1e48:	10 92 02 04 	sts	0x0402, r1	; 0x800402 <input_insert_pos>
		}
	}
}
    1e4c:	ff 91       	pop	r31
    1e4e:	ef 91       	pop	r30
    1e50:	cf 91       	pop	r28
    1e52:	bf 91       	pop	r27
    1e54:	af 91       	pop	r26
    1e56:	9f 91       	pop	r25
    1e58:	8f 91       	pop	r24
    1e5a:	7f 91       	pop	r23
    1e5c:	6f 91       	pop	r22
    1e5e:	5f 91       	pop	r21
    1e60:	4f 91       	pop	r20
    1e62:	3f 91       	pop	r19
    1e64:	2f 91       	pop	r18
    1e66:	0f 90       	pop	r0
    1e68:	0f be       	out	0x3f, r0	; 63
    1e6a:	0f 90       	pop	r0
    1e6c:	1f 90       	pop	r1
    1e6e:	18 95       	reti

00001e70 <init_snake>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
}
void set_snake_length(uint8_t length){
	snakeLength = length;
    1e70:	0f 93       	push	r16
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	82 e0       	ldi	r24, 0x02	; 2
    1e78:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <snakeLength>
    1e7c:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <snakeTailIndex>
    1e80:	c1 e0       	ldi	r28, 0x01	; 1
    1e82:	c0 93 b6 02 	sts	0x02B6, r28	; 0x8002b6 <snakeHeadIndex>
    1e86:	61 e0       	ldi	r22, 0x01	; 1
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1e8e:	08 eb       	ldi	r16, 0xB8	; 184
    1e90:	12 e0       	ldi	r17, 0x02	; 2
    1e92:	f8 01       	movw	r30, r16
    1e94:	80 83       	st	Z, r24
    1e96:	61 e0       	ldi	r22, 0x01	; 1
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	81 83       	std	Z+1, r24	; 0x01
    1ea2:	c0 93 b4 02 	sts	0x02B4, r28	; 0x8002b4 <curSnakeDirn>
    1ea6:	c0 93 b3 02 	sts	0x02B3, r28	; 0x8002b3 <nextSnakeDirn>
    1eaa:	cf 91       	pop	r28
    1eac:	1f 91       	pop	r17
    1eae:	0f 91       	pop	r16
    1eb0:	08 95       	ret

00001eb2 <get_snake_head_position>:
    1eb2:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <snakeHeadIndex>
    1eb6:	0e 2e       	mov	r0, r30
    1eb8:	00 0c       	add	r0, r0
    1eba:	ff 0b       	sbc	r31, r31
    1ebc:	e8 54       	subi	r30, 0x48	; 72
    1ebe:	fd 4f       	sbci	r31, 0xFD	; 253
    1ec0:	80 81       	ld	r24, Z
    1ec2:	08 95       	ret

00001ec4 <get_snake_tail_position>:
    1ec4:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <snakeTailIndex>
    1ec8:	0e 2e       	mov	r0, r30
    1eca:	00 0c       	add	r0, r0
    1ecc:	ff 0b       	sbc	r31, r31
    1ece:	e8 54       	subi	r30, 0x48	; 72
    1ed0:	fd 4f       	sbci	r31, 0xFD	; 253
    1ed2:	80 81       	ld	r24, Z
    1ed4:	08 95       	ret

00001ed6 <get_snake_length>:
    1ed6:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <snakeLength>
    1eda:	08 95       	ret

00001edc <get_snake_position_at_index>:
    1edc:	e8 2f       	mov	r30, r24
    1ede:	f0 e0       	ldi	r31, 0x00	; 0
    1ee0:	e8 54       	subi	r30, 0x48	; 72
    1ee2:	fd 4f       	sbci	r31, 0xFD	; 253
    1ee4:	80 81       	ld	r24, Z
    1ee6:	08 95       	ret

00001ee8 <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1ee8:	e6 2f       	mov	r30, r22
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	e8 54       	subi	r30, 0x48	; 72
    1eee:	fd 4f       	sbci	r31, 0xFD	; 253
    1ef0:	80 83       	st	Z, r24
    1ef2:	08 95       	ret

00001ef4 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1ef4:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <snakeHeadIndex>
    1ef8:	08 95       	ret

00001efa <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1efa:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <snakeTailIndex>
    1efe:	08 95       	ret

00001f00 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1f00:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <snakeTailIndex>
    1f04:	e9 2f       	mov	r30, r25
    1f06:	09 2e       	mov	r0, r25
    1f08:	00 0c       	add	r0, r0
    1f0a:	ff 0b       	sbc	r31, r31
    1f0c:	e8 54       	subi	r30, 0x48	; 72
    1f0e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f10:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1f12:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1f14:	91 32       	cpi	r25, 0x21	; 33
    1f16:	19 f0       	breq	.+6      	; 0x1f1e <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1f18:	90 93 b5 02 	sts	0x02B5, r25	; 0x8002b5 <snakeTailIndex>
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1f1e:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <snakeTailIndex>
	}
	snakeLength--;
    1f22:	90 91 b7 02 	lds	r25, 0x02B7	; 0x8002b7 <snakeLength>
    1f26:	91 50       	subi	r25, 0x01	; 1
    1f28:	90 93 b7 02 	sts	0x02B7, r25	; 0x8002b7 <snakeLength>
	
	return prev_tail_position;
}
    1f2c:	08 95       	ret

00001f2e <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1f2e:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <curSnakeDirn>
    1f32:	91 30       	cpi	r25, 0x01	; 1
    1f34:	a9 f0       	breq	.+42     	; 0x1f60 <set_snake_dirn+0x32>
    1f36:	28 f0       	brcs	.+10     	; 0x1f42 <set_snake_dirn+0x14>
    1f38:	92 30       	cpi	r25, 0x02	; 2
    1f3a:	41 f0       	breq	.+16     	; 0x1f4c <set_snake_dirn+0x1e>
    1f3c:	93 30       	cpi	r25, 0x03	; 3
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <set_snake_dirn+0x28>
    1f40:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1f42:	82 30       	cpi	r24, 0x02	; 2
    1f44:	89 f0       	breq	.+34     	; 0x1f68 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f46:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <nextSnakeDirn>
    1f4a:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1f4c:	88 23       	and	r24, r24
    1f4e:	61 f0       	breq	.+24     	; 0x1f68 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f50:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <nextSnakeDirn>
    1f54:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	39 f0       	breq	.+14     	; 0x1f68 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f5a:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <nextSnakeDirn>
    1f5e:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1f60:	83 30       	cpi	r24, 0x03	; 3
    1f62:	11 f0       	breq	.+4      	; 0x1f68 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f64:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <nextSnakeDirn>
    1f68:	08 95       	ret

00001f6a <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1f6a:	90 91 b5 02 	lds	r25, 0x02B5	; 0x8002b5 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1f6e:	30 91 b6 02 	lds	r19, 0x02B6	; 0x8002b6 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1f72:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1f74:	0d c0       	rjmp	.+26     	; 0x1f90 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1f76:	e9 2f       	mov	r30, r25
    1f78:	09 2e       	mov	r0, r25
    1f7a:	00 0c       	add	r0, r0
    1f7c:	ff 0b       	sbc	r31, r31
    1f7e:	e8 54       	subi	r30, 0x48	; 72
    1f80:	fd 4f       	sbci	r31, 0xFD	; 253
    1f82:	20 81       	ld	r18, Z
    1f84:	28 17       	cp	r18, r24
    1f86:	89 f0       	breq	.+34     	; 0x1faa <is_snake_at+0x40>
    1f88:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1f8a:	91 32       	cpi	r25, 0x21	; 33
    1f8c:	0c f0       	brlt	.+2      	; 0x1f90 <is_snake_at+0x26>
			index = 0;
    1f8e:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1f90:	93 13       	cpse	r25, r19
    1f92:	f1 cf       	rjmp	.-30     	; 0x1f76 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1f94:	e3 2f       	mov	r30, r19
    1f96:	33 0f       	add	r19, r19
    1f98:	ff 0b       	sbc	r31, r31
    1f9a:	e8 54       	subi	r30, 0x48	; 72
    1f9c:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1f9e:	91 e0       	ldi	r25, 0x01	; 1
    1fa0:	20 81       	ld	r18, Z
    1fa2:	28 17       	cp	r18, r24
    1fa4:	19 f0       	breq	.+6      	; 0x1fac <is_snake_at+0x42>
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <is_snake_at+0x42>
    1faa:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1fac:	89 2f       	mov	r24, r25
    1fae:	08 95       	ret

00001fb0 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1fb4:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <snakeLength>
    1fb8:	81 32       	cpi	r24, 0x21	; 33
    1fba:	08 f0       	brcs	.+2      	; 0x1fbe <advance_snake_head+0xe>
    1fbc:	96 c0       	rjmp	.+300    	; 0x20ea <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1fbe:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <snakeHeadIndex>
    1fc2:	0e 2e       	mov	r0, r30
    1fc4:	00 0c       	add	r0, r0
    1fc6:	ff 0b       	sbc	r31, r31
    1fc8:	e8 54       	subi	r30, 0x48	; 72
    1fca:	fd 4f       	sbci	r31, 0xFD	; 253
    1fcc:	80 81       	ld	r24, Z
    1fce:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    1fd2:	d8 2f       	mov	r29, r24
    1fd4:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1fd6:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <snakeHeadIndex>
    1fda:	0e 2e       	mov	r0, r30
    1fdc:	00 0c       	add	r0, r0
    1fde:	ff 0b       	sbc	r31, r31
    1fe0:	e8 54       	subi	r30, 0x48	; 72
    1fe2:	fd 4f       	sbci	r31, 0xFD	; 253
    1fe4:	80 81       	ld	r24, Z
    1fe6:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    1fea:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1fec:	90 91 b3 02 	lds	r25, 0x02B3	; 0x8002b3 <nextSnakeDirn>
    1ff0:	91 30       	cpi	r25, 0x01	; 1
    1ff2:	59 f0       	breq	.+22     	; 0x200a <advance_snake_head+0x5a>
    1ff4:	28 f0       	brcs	.+10     	; 0x2000 <advance_snake_head+0x50>
    1ff6:	92 30       	cpi	r25, 0x02	; 2
    1ff8:	69 f0       	breq	.+26     	; 0x2014 <advance_snake_head+0x64>
    1ffa:	93 30       	cpi	r25, 0x03	; 3
    1ffc:	81 f0       	breq	.+32     	; 0x201e <advance_snake_head+0x6e>
    1ffe:	1b c0       	rjmp	.+54     	; 0x2036 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    2000:	87 30       	cpi	r24, 0x07	; 7
    2002:	91 f0       	breq	.+36     	; 0x2028 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	68 0f       	add	r22, r24
    2008:	16 c0       	rjmp	.+44     	; 0x2036 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    200a:	df 30       	cpi	r29, 0x0F	; 15
    200c:	79 f0       	breq	.+30     	; 0x202c <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    200e:	c1 e0       	ldi	r28, 0x01	; 1
    2010:	cd 0f       	add	r28, r29
    2012:	11 c0       	rjmp	.+34     	; 0x2036 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    2014:	88 23       	and	r24, r24
    2016:	61 f0       	breq	.+24     	; 0x2030 <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    2018:	6f ef       	ldi	r22, 0xFF	; 255
    201a:	68 0f       	add	r22, r24
    201c:	0c c0       	rjmp	.+24     	; 0x2036 <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    201e:	dd 23       	and	r29, r29
    2020:	49 f0       	breq	.+18     	; 0x2034 <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    2022:	cf ef       	ldi	r28, 0xFF	; 255
    2024:	cd 0f       	add	r28, r29
    2026:	07 c0       	rjmp	.+14     	; 0x2036 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    2028:	60 e0       	ldi	r22, 0x00	; 0
    202a:	05 c0       	rjmp	.+10     	; 0x2036 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    202c:	c0 e0       	ldi	r28, 0x00	; 0
    202e:	03 c0       	rjmp	.+6      	; 0x2036 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    2030:	67 e0       	ldi	r22, 0x07	; 7
    2032:	01 c0       	rjmp	.+2      	; 0x2036 <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    2034:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    2036:	8c 2f       	mov	r24, r28
    2038:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    203c:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    203e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <nextSnakeDirn>
    2042:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <curSnakeDirn>
    2046:	98 17       	cp	r25, r24
    2048:	41 f0       	breq	.+16     	; 0x205a <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    204a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    204e:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
    2052:	89 2b       	or	r24, r25
    2054:	11 f0       	breq	.+4      	; 0x205a <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    2056:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    205a:	8c 2f       	mov	r24, r28
    205c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <is_snake_at>
    2060:	88 23       	and	r24, r24
    2062:	51 f0       	breq	.+20     	; 0x2078 <advance_snake_head+0xc8>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    2064:	e0 91 b5 02 	lds	r30, 0x02B5	; 0x8002b5 <snakeTailIndex>
    2068:	0e 2e       	mov	r0, r30
    206a:	00 0c       	add	r0, r0
    206c:	ff 0b       	sbc	r31, r31
    206e:	e8 54       	subi	r30, 0x48	; 72
    2070:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    2072:	80 81       	ld	r24, Z
    2074:	c8 13       	cpse	r28, r24
    2076:	3b c0       	rjmp	.+118    	; 0x20ee <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    2078:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <snakeHeadIndex>
    207c:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    207e:	81 32       	cpi	r24, 0x21	; 33
    2080:	19 f0       	breq	.+6      	; 0x2088 <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    2082:	80 93 b6 02 	sts	0x02B6, r24	; 0x8002b6 <snakeHeadIndex>
    2086:	02 c0       	rjmp	.+4      	; 0x208c <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    2088:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    208c:	e0 91 b6 02 	lds	r30, 0x02B6	; 0x8002b6 <snakeHeadIndex>
    2090:	0e 2e       	mov	r0, r30
    2092:	00 0c       	add	r0, r0
    2094:	ff 0b       	sbc	r31, r31
    2096:	e8 54       	subi	r30, 0x48	; 72
    2098:	fd 4f       	sbci	r31, 0xFD	; 253
    209a:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    209c:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <snakeLength>
    20a0:	8f 5f       	subi	r24, 0xFF	; 255
    20a2:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    20a6:	8c 2f       	mov	r24, r28
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 94 76 0c 	call	0x18ec	; 0x18ec <is_rat_at>
    20ae:	89 2b       	or	r24, r25
    20b0:	31 f0       	breq	.+12     	; 0x20be <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20b2:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <snakeLength>
    20b6:	81 32       	cpi	r24, 0x21	; 33
    20b8:	e0 f0       	brcs	.+56     	; 0x20f2 <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    20ba:	87 e0       	ldi	r24, 0x07	; 7
    20bc:	21 c0       	rjmp	.+66     	; 0x2100 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    20be:	8c 2f       	mov	r24, r28
    20c0:	0e 94 04 11 	call	0x2208	; 0x2208 <is_superfood_at>
    20c4:	88 23       	and	r24, r24
    20c6:	31 f0       	breq	.+12     	; 0x20d4 <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20c8:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <snakeLength>
    20cc:	81 32       	cpi	r24, 0x21	; 33
    20ce:	98 f0       	brcs	.+38     	; 0x20f6 <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    20d0:	85 e0       	ldi	r24, 0x05	; 5
    20d2:	16 c0       	rjmp	.+44     	; 0x2100 <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    20d4:	8c 2f       	mov	r24, r28
    20d6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <is_food_at>
    20da:	88 23       	and	r24, r24
    20dc:	71 f0       	breq	.+28     	; 0x20fa <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20de:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <snakeLength>
    20e2:	81 32       	cpi	r24, 0x21	; 33
    20e4:	60 f0       	brcs	.+24     	; 0x20fe <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	0b c0       	rjmp	.+22     	; 0x2100 <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    20ea:	8d ef       	ldi	r24, 0xFD	; 253
    20ec:	09 c0       	rjmp	.+18     	; 0x2100 <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    20ee:	8e ef       	ldi	r24, 0xFE	; 254
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    20f2:	86 e0       	ldi	r24, 0x06	; 6
    20f4:	05 c0       	rjmp	.+10     	; 0x2100 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    20f6:	84 e0       	ldi	r24, 0x04	; 4
    20f8:	03 c0       	rjmp	.+6      	; 0x2100 <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	01 c0       	rjmp	.+2      	; 0x2100 <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    20fe:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    2100:	df 91       	pop	r29
    2102:	cf 91       	pop	r28
    2104:	08 95       	ret

00002106 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2106:	94 b1       	in	r25, 0x04	; 4
    2108:	90 6b       	ori	r25, 0xB0	; 176
    210a:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    210c:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    210e:	90 e5       	ldi	r25, 0x50	; 80
    2110:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2112:	88 30       	cpi	r24, 0x08	; 8
    2114:	21 f0       	breq	.+8      	; 0x211e <spi_setup_master+0x18>
    2116:	80 32       	cpi	r24, 0x20	; 32
    2118:	11 f0       	breq	.+4      	; 0x211e <spi_setup_master+0x18>
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	19 f4       	brne	.+6      	; 0x2124 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	9d bd       	out	0x2d, r25	; 45
			break;
    2122:	01 c0       	rjmp	.+2      	; 0x2126 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2124:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2126:	80 32       	cpi	r24, 0x20	; 32
    2128:	69 f0       	breq	.+26     	; 0x2144 <spi_setup_master+0x3e>
    212a:	28 f4       	brcc	.+10     	; 0x2136 <spi_setup_master+0x30>
    212c:	88 30       	cpi	r24, 0x08	; 8
    212e:	71 f0       	breq	.+28     	; 0x214c <spi_setup_master+0x46>
    2130:	80 31       	cpi	r24, 0x10	; 16
    2132:	61 f0       	breq	.+24     	; 0x214c <spi_setup_master+0x46>
    2134:	0e c0       	rjmp	.+28     	; 0x2152 <spi_setup_master+0x4c>
    2136:	80 34       	cpi	r24, 0x40	; 64
    2138:	29 f0       	breq	.+10     	; 0x2144 <spi_setup_master+0x3e>
    213a:	80 38       	cpi	r24, 0x80	; 128
    213c:	51 f4       	brne	.+20     	; 0x2152 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    213e:	8c b5       	in	r24, 0x2c	; 44
    2140:	81 60       	ori	r24, 0x01	; 1
    2142:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    2144:	8c b5       	in	r24, 0x2c	; 44
    2146:	82 60       	ori	r24, 0x02	; 2
    2148:	8c bd       	out	0x2c, r24	; 44
			break;
    214a:	03 c0       	rjmp	.+6      	; 0x2152 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    214c:	8c b5       	in	r24, 0x2c	; 44
    214e:	81 60       	ori	r24, 0x01	; 1
    2150:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2152:	2c 98       	cbi	0x05, 4	; 5
    2154:	08 95       	ret

00002156 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    2156:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    2158:	0d b4       	in	r0, 0x2d	; 45
    215a:	07 fe       	sbrs	r0, 7
    215c:	fd cf       	rjmp	.-6      	; 0x2158 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    215e:	8e b5       	in	r24, 0x2e	; 46
    2160:	08 95       	ret

00002162 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    2162:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <superfood_position>
	superfood_on_board = 1;
    2166:	81 e0       	ldi	r24, 0x01	; 1
    2168:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <superfood_on_board>
}
    216c:	08 95       	ret

0000216e <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    216e:	80 91 16 04 	lds	r24, 0x0416	; 0x800416 <superfood_on_board>
    2172:	08 95       	ret

00002174 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    2174:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    2178:	68 59       	subi	r22, 0x98	; 152
    217a:	7a 43       	sbci	r23, 0x3A	; 58
    217c:	81 09       	sbc	r24, r1
    217e:	91 09       	sbc	r25, r1
    2180:	20 e2       	ldi	r18, 0x20	; 32
    2182:	3e e4       	ldi	r19, 0x4E	; 78
    2184:	40 e0       	ldi	r20, 0x00	; 0
    2186:	50 e0       	ldi	r21, 0x00	; 0
    2188:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodsi4>
    218c:	67 2b       	or	r22, r23
    218e:	68 2b       	or	r22, r24
    2190:	69 2b       	or	r22, r25
    2192:	21 f4       	brne	.+8      	; 0x219c <time_to_add_superfood+0x28>
    2194:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	08 95       	ret
    219c:	80 e0       	ldi	r24, 0x00	; 0
}
    219e:	08 95       	ret

000021a0 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    21a0:	0e 94 46 12 	call	0x248c	; 0x248c <get_clock_ticks>
    21a4:	20 e2       	ldi	r18, 0x20	; 32
    21a6:	3e e4       	ldi	r19, 0x4E	; 78
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	50 e0       	ldi	r21, 0x00	; 0
    21ac:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodsi4>
    21b0:	21 e0       	ldi	r18, 0x01	; 1
    21b2:	67 2b       	or	r22, r23
    21b4:	68 2b       	or	r22, r24
    21b6:	69 2b       	or	r22, r25
    21b8:	09 f0       	breq	.+2      	; 0x21bc <time_to_remove_superfood+0x1c>
    21ba:	20 e0       	ldi	r18, 0x00	; 0
}
    21bc:	82 2f       	mov	r24, r18
    21be:	08 95       	ret

000021c0 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    21c0:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    21c2:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <superfood_position>
    21c6:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    21ca:	c8 2f       	mov	r28, r24
    21cc:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <superfood_position>
    21d0:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	6c 2f       	mov	r22, r28
    21d8:	0e 94 46 09 	call	0x128c	; 0x128c <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    21e4:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <superfood_position>
	superfood_on_board = 0; 
    21e8:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <superfood_on_board>
}
    21ec:	cf 91       	pop	r28
    21ee:	08 95       	ret

000021f0 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    21f0:	60 e0       	ldi	r22, 0x00	; 0
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    21f8:	80 93 15 04 	sts	0x0415, r24	; 0x800415 <superfood_position>
	superfood_on_board = 0;
    21fc:	10 92 16 04 	sts	0x0416, r1	; 0x800416 <superfood_on_board>
    2200:	08 95       	ret

00002202 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    2202:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <superfood_position>
    2206:	08 95       	ret

00002208 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    2208:	90 91 16 04 	lds	r25, 0x0416	; 0x800416 <superfood_on_board>
    220c:	99 23       	and	r25, r25
    220e:	39 f0       	breq	.+14     	; 0x221e <is_superfood_at+0x16>
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	20 91 15 04 	lds	r18, 0x0415	; 0x800415 <superfood_position>
    2216:	28 13       	cpse	r18, r24
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	89 2f       	mov	r24, r25
    221c:	08 95       	ret
    221e:	80 e0       	ldi	r24, 0x00	; 0
}
    2220:	08 95       	ret

00002222 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    2222:	1f 93       	push	r17
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    2228:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    222c:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
    2230:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    2232:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
		test_position = position(x,y);
    2236:	bc 01       	movw	r22, r24
    2238:	67 70       	andi	r22, 0x07	; 7
    223a:	70 78       	andi	r23, 0x80	; 128
    223c:	77 23       	and	r23, r23
    223e:	34 f4       	brge	.+12     	; 0x224c <add_superfood_to_board+0x2a>
    2240:	61 50       	subi	r22, 0x01	; 1
    2242:	71 09       	sbc	r23, r1
    2244:	68 6f       	ori	r22, 0xF8	; 248
    2246:	7f 6f       	ori	r23, 0xFF	; 255
    2248:	6f 5f       	subi	r22, 0xFF	; 255
    224a:	7f 4f       	sbci	r23, 0xFF	; 255
    224c:	ce 01       	movw	r24, r28
    224e:	8f 70       	andi	r24, 0x0F	; 15
    2250:	90 78       	andi	r25, 0x80	; 128
    2252:	99 23       	and	r25, r25
    2254:	24 f4       	brge	.+8      	; 0x225e <add_superfood_to_board+0x3c>
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	80 6f       	ori	r24, 0xF0	; 240
    225a:	9f 6f       	ori	r25, 0xFF	; 255
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    2262:	c8 2f       	mov	r28, r24
    2264:	13 e6       	ldi	r17, 0x63	; 99
    2266:	1e c0       	rjmp	.+60     	; 0x22a4 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    2268:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
    226c:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    226e:	0e 94 8f 14 	call	0x291e	; 0x291e <rand>
		test_position = position(x,y);
    2272:	bc 01       	movw	r22, r24
    2274:	67 70       	andi	r22, 0x07	; 7
    2276:	70 78       	andi	r23, 0x80	; 128
    2278:	77 23       	and	r23, r23
    227a:	34 f4       	brge	.+12     	; 0x2288 <add_superfood_to_board+0x66>
    227c:	61 50       	subi	r22, 0x01	; 1
    227e:	71 09       	sbc	r23, r1
    2280:	68 6f       	ori	r22, 0xF8	; 248
    2282:	7f 6f       	ori	r23, 0xFF	; 255
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	ce 01       	movw	r24, r28
    228a:	8f 70       	andi	r24, 0x0F	; 15
    228c:	90 78       	andi	r25, 0x80	; 128
    228e:	99 23       	and	r25, r25
    2290:	24 f4       	brge	.+8      	; 0x229a <add_superfood_to_board+0x78>
    2292:	01 97       	sbiw	r24, 0x01	; 1
    2294:	80 6f       	ori	r24, 0xF0	; 240
    2296:	9f 6f       	ori	r25, 0xFF	; 255
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	0e 94 98 09 	call	0x1330	; 0x1330 <position>
    229e:	c8 2f       	mov	r28, r24
    22a0:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22a2:	a1 f0       	breq	.+40     	; 0x22cc <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    22a4:	8c 2f       	mov	r24, r28
    22a6:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    22aa:	81 11       	cpse	r24, r1
    22ac:	dd cf       	rjmp	.-70     	; 0x2268 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    22ae:	8c 2f       	mov	r24, r28
    22b0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <is_food_at>
    22b4:	81 11       	cpse	r24, r1
    22b6:	d8 cf       	rjmp	.-80     	; 0x2268 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22b8:	8c 2f       	mov	r24, r28
    22ba:	0e 94 04 11 	call	0x2208	; 0x2208 <is_superfood_at>
    22be:	81 11       	cpse	r24, r1
    22c0:	d3 cf       	rjmp	.-90     	; 0x2268 <add_superfood_to_board+0x46>
    22c2:	8c 2f       	mov	r24, r28
    22c4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <is_rat_at>
    22c8:	81 11       	cpse	r24, r1
    22ca:	ce cf       	rjmp	.-100    	; 0x2268 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    22cc:	c0 93 15 04 	sts	0x0415, r28	; 0x800415 <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    22d0:	8c 2f       	mov	r24, r28
    22d2:	0e 94 90 09 	call	0x1320	; 0x1320 <y_position>
    22d6:	c8 2f       	mov	r28, r24
    22d8:	80 91 15 04 	lds	r24, 0x0415	; 0x800415 <superfood_position>
    22dc:	0e 94 8d 09 	call	0x131a	; 0x131a <x_position>
    22e0:	4c e3       	ldi	r20, 0x3C	; 60
    22e2:	6c 2f       	mov	r22, r28
    22e4:	0e 94 46 09 	call	0x128c	; 0x128c <ledmatrix_update_pixel>
	superfood_on_board = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	80 93 16 04 	sts	0x0416, r24	; 0x800416 <superfood_on_board>
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	08 95       	ret

000022f6 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    22f6:	28 2f       	mov	r18, r24
    22f8:	08 2e       	mov	r0, r24
    22fa:	00 0c       	add	r0, r0
    22fc:	33 0b       	sbc	r19, r19
    22fe:	3f 93       	push	r19
    2300:	8f 93       	push	r24
    2302:	86 2f       	mov	r24, r22
    2304:	06 2e       	mov	r0, r22
    2306:	00 0c       	add	r0, r0
    2308:	99 0b       	sbc	r25, r25
    230a:	9f 93       	push	r25
    230c:	6f 93       	push	r22
    230e:	8d ed       	ldi	r24, 0xDD	; 221
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	9f 93       	push	r25
    2314:	8f 93       	push	r24
    2316:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	08 95       	ret

00002328 <clear_terminal>:
    2328:	88 ed       	ldi	r24, 0xD8	; 216
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	9f 93       	push	r25
    232e:	8f 93       	push	r24
    2330:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	08 95       	ret

0000233a <set_display_attribute>:
    233a:	1f 92       	push	r1
    233c:	8f 93       	push	r24
    233e:	82 ed       	ldi	r24, 0xD2	; 210
    2340:	91 e0       	ldi	r25, 0x01	; 1
    2342:	9f 93       	push	r25
    2344:	8f 93       	push	r24
    2346:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	08 95       	ret

00002354 <hide_cursor>:
    2354:	8b ec       	ldi	r24, 0xCB	; 203
    2356:	91 e0       	ldi	r25, 0x01	; 1
    2358:	9f 93       	push	r25
    235a:	8f 93       	push	r24
    235c:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	08 95       	ret

00002366 <show_cursor>:
    2366:	84 ec       	ldi	r24, 0xC4	; 196
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	9f 93       	push	r25
    236c:	8f 93       	push	r24
    236e:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
    2372:	0f 90       	pop	r0
    2374:	0f 90       	pop	r0
    2376:	08 95       	ret

00002378 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    2378:	63 e0       	ldi	r22, 0x03	; 3
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf_P(PSTR("Snake"));
    2380:	8e eb       	ldi	r24, 0xBE	; 190
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	9f 93       	push	r25
    2386:	8f 93       	push	r24
    2388:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>

	move_cursor(3,5);
    238c:	65 e0       	ldi	r22, 0x05	; 5
    238e:	83 e0       	ldi	r24, 0x03	; 3
    2390:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    2394:	80 e2       	ldi	r24, 0x20	; 32
    2396:	0e 94 9d 11 	call	0x233a	; 0x233a <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    239a:	84 e9       	ldi	r24, 0x94	; 148
    239c:	91 e0       	ldi	r25, 0x01	; 1
    239e:	9f 93       	push	r25
    23a0:	8f 93       	push	r24
    23a2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    23a6:	85 e2       	ldi	r24, 0x25	; 37
    23a8:	0e 94 9d 11 	call	0x233a	; 0x233a <set_display_attribute>
	display_EEPROM_high_score();
    23ac:	0e 94 b9 06 	call	0xd72	; 0xd72 <display_EEPROM_high_score>
}
    23b0:	0f 90       	pop	r0
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	08 95       	ret

000023ba <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    23ba:	0e 94 aa 11 	call	0x2354	; 0x2354 <hide_cursor>
	
	move_cursor(10,1);
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	8a e0       	ldi	r24, 0x0A	; 10
    23c2:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf("Snake");
    23c6:	86 e8       	ldi	r24, 0x86	; 134
    23c8:	92 e0       	ldi	r25, 0x02	; 2
    23ca:	9f 93       	push	r25
    23cc:	8f 93       	push	r24
    23ce:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>

	move_cursor(1,3);
    23d2:	63 e0       	ldi	r22, 0x03	; 3
    23d4:	81 e0       	ldi	r24, 0x01	; 1
    23d6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf("Score: 0", get_score());
    23da:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
    23de:	9f 93       	push	r25
    23e0:	8f 93       	push	r24
    23e2:	7f 93       	push	r23
    23e4:	6f 93       	push	r22
    23e6:	8c e8       	ldi	r24, 0x8C	; 140
    23e8:	92 e0       	ldi	r25, 0x02	; 2
    23ea:	9f 93       	push	r25
    23ec:	8f 93       	push	r24
    23ee:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
	move_cursor(10,3);
    23f2:	63 e0       	ldi	r22, 0x03	; 3
    23f4:	8a e0       	ldi	r24, 0x0A	; 10
    23f6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
}
    23fa:	8d b7       	in	r24, 0x3d	; 61
    23fc:	9e b7       	in	r25, 0x3e	; 62
    23fe:	08 96       	adiw	r24, 0x08	; 8
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	9e bf       	out	0x3e, r25	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	8d bf       	out	0x3d, r24	; 61
    240a:	08 95       	ret

0000240c <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    240c:	0e 94 aa 11 	call	0x2354	; 0x2354 <hide_cursor>
	move_cursor(1,3);
    2410:	63 e0       	ldi	r22, 0x03	; 3
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <move_cursor>
	printf("Score: %u", get_score());
    2418:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <get_score>
    241c:	9f 93       	push	r25
    241e:	8f 93       	push	r24
    2420:	7f 93       	push	r23
    2422:	6f 93       	push	r22
    2424:	8c e7       	ldi	r24, 0x7C	; 124
    2426:	92 e0       	ldi	r25, 0x02	; 2
    2428:	9f 93       	push	r25
    242a:	8f 93       	push	r24
    242c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <printf>
}
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	0f 90       	pop	r0
    2436:	0f 90       	pop	r0
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	08 95       	ret

0000243e <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    243e:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <clock_ticks>
    2442:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <clock_ticks+0x1>
    2446:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <clock_ticks+0x2>
    244a:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    244e:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2450:	8c e7       	ldi	r24, 0x7C	; 124
    2452:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    2454:	82 e0       	ldi	r24, 0x02	; 2
    2456:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    2458:	83 e0       	ldi	r24, 0x03	; 3
    245a:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    245c:	ee e6       	ldi	r30, 0x6E	; 110
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	82 60       	ori	r24, 0x02	; 2
    2464:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    2466:	85 b3       	in	r24, 0x15	; 21
    2468:	82 70       	andi	r24, 0x02	; 2
    246a:	85 bb       	out	0x15, r24	; 21
    246c:	08 95       	ret

0000246e <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	//unpaused_game = 1- unpaused_game;
	TIMSK0 ^= (1<<OCIE0A);
    246e:	ee e6       	ldi	r30, 0x6E	; 110
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	90 81       	ld	r25, Z
    2474:	82 e0       	ldi	r24, 0x02	; 2
    2476:	89 27       	eor	r24, r25
    2478:	80 83       	st	Z, r24
    247a:	08 95       	ret

0000247c <timer_is_paused>:
}
int timer_is_paused(void){
	//return !unpaused_game;
	return !(TIMSK0 & (1<<OCIE0A)); 
    247c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    2480:	86 95       	lsr	r24
    2482:	91 e0       	ldi	r25, 0x01	; 1
    2484:	89 27       	eor	r24, r25
}
    2486:	81 70       	andi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	08 95       	ret

0000248c <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    248c:	2f b7       	in	r18, 0x3f	; 63
	cli();
    248e:	f8 94       	cli
	return_value = clock_ticks;
    2490:	60 91 d9 02 	lds	r22, 0x02D9	; 0x8002d9 <clock_ticks>
    2494:	70 91 da 02 	lds	r23, 0x02DA	; 0x8002da <clock_ticks+0x1>
    2498:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <clock_ticks+0x2>
    249c:	90 91 dc 02 	lds	r25, 0x02DC	; 0x8002dc <clock_ticks+0x3>
	if(interrupts_were_on) {
    24a0:	22 23       	and	r18, r18
    24a2:	0c f4       	brge	.+2      	; 0x24a6 <get_clock_ticks+0x1a>
		sei();
    24a4:	78 94       	sei
	}
	return return_value;
}
    24a6:	08 95       	ret

000024a8 <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    24a8:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <SSD_CC_value>
    24ac:	88 23       	and	r24, r24
    24ae:	81 f0       	breq	.+32     	; 0x24d0 <display_SSD_value+0x28>
		PORTD |= (1<<2);
    24b0:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    24b2:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <get_snake_length>
    24b6:	ed ec       	ldi	r30, 0xCD	; 205
    24b8:	8e 9f       	mul	r24, r30
    24ba:	e1 2d       	mov	r30, r1
    24bc:	11 24       	eor	r1, r1
    24be:	e6 95       	lsr	r30
    24c0:	e6 95       	lsr	r30
    24c2:	e6 95       	lsr	r30
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	e9 5d       	subi	r30, 0xD9	; 217
    24c8:	fe 4f       	sbci	r31, 0xFE	; 254
    24ca:	80 81       	ld	r24, Z
    24cc:	82 b9       	out	0x02, r24	; 2
    24ce:	16 c0       	rjmp	.+44     	; 0x24fc <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    24d0:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    24d2:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <get_snake_length>
    24d6:	9d ec       	ldi	r25, 0xCD	; 205
    24d8:	89 9f       	mul	r24, r25
    24da:	91 2d       	mov	r25, r1
    24dc:	11 24       	eor	r1, r1
    24de:	96 95       	lsr	r25
    24e0:	96 95       	lsr	r25
    24e2:	96 95       	lsr	r25
    24e4:	99 0f       	add	r25, r25
    24e6:	29 2f       	mov	r18, r25
    24e8:	22 0f       	add	r18, r18
    24ea:	22 0f       	add	r18, r18
    24ec:	92 0f       	add	r25, r18
    24ee:	89 1b       	sub	r24, r25
    24f0:	e8 2f       	mov	r30, r24
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	e3 5e       	subi	r30, 0xE3	; 227
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	80 81       	ld	r24, Z
    24fa:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    24fc:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <SSD_CC_value>
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	89 1b       	sub	r24, r25
    2504:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <SSD_CC_value>
    2508:	08 95       	ret

0000250a <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    250a:	1f 92       	push	r1
    250c:	0f 92       	push	r0
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	0f 92       	push	r0
    2512:	11 24       	eor	r1, r1
    2514:	2f 93       	push	r18
    2516:	3f 93       	push	r19
    2518:	4f 93       	push	r20
    251a:	5f 93       	push	r21
    251c:	6f 93       	push	r22
    251e:	7f 93       	push	r23
    2520:	8f 93       	push	r24
    2522:	9f 93       	push	r25
    2524:	af 93       	push	r26
    2526:	bf 93       	push	r27
    2528:	ef 93       	push	r30
    252a:	ff 93       	push	r31
	// TODO: 
	clock_ticks++;
    252c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <clock_ticks>
    2530:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <clock_ticks+0x1>
    2534:	a0 91 db 02 	lds	r26, 0x02DB	; 0x8002db <clock_ticks+0x2>
    2538:	b0 91 dc 02 	lds	r27, 0x02DC	; 0x8002dc <clock_ticks+0x3>
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	a1 1d       	adc	r26, r1
    2540:	b1 1d       	adc	r27, r1
    2542:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <clock_ticks>
    2546:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <clock_ticks+0x1>
    254a:	a0 93 db 02 	sts	0x02DB, r26	; 0x8002db <clock_ticks+0x2>
    254e:	b0 93 dc 02 	sts	0x02DC, r27	; 0x8002dc <clock_ticks+0x3>
	display_SSD_value();
    2552:	0e 94 54 12 	call	0x24a8	; 0x24a8 <display_SSD_value>
}
    2556:	ff 91       	pop	r31
    2558:	ef 91       	pop	r30
    255a:	bf 91       	pop	r27
    255c:	af 91       	pop	r26
    255e:	9f 91       	pop	r25
    2560:	8f 91       	pop	r24
    2562:	7f 91       	pop	r23
    2564:	6f 91       	pop	r22
    2566:	5f 91       	pop	r21
    2568:	4f 91       	pop	r20
    256a:	3f 91       	pop	r19
    256c:	2f 91       	pop	r18
    256e:	0f 90       	pop	r0
    2570:	0f be       	out	0x3f, r0	; 63
    2572:	0f 90       	pop	r0
    2574:	1f 90       	pop	r1
    2576:	18 95       	reti

00002578 <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    2578:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    257c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    2580:	e1 e8       	ldi	r30, 0x81	; 129
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	8a 60       	ori	r24, 0x0A	; 10
    2588:	80 83       	st	Z, r24
    258a:	80 e4       	ldi	r24, 0x40	; 64
    258c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2590:	88 ee       	ldi	r24, 0xE8	; 232
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2598:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    259c:	55 98       	cbi	0x0a, 5	; 10
    259e:	53 98       	cbi	0x0a, 3	; 10
    25a0:	08 95       	ret

000025a2 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    25a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    25a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    25aa:	08 95       	ret

000025ac <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    25ac:	55 9a       	sbi	0x0a, 5	; 10
    25ae:	08 95       	ret

000025b0 <__fixunssfsi>:
    25b0:	0e 94 4c 13 	call	0x2698	; 0x2698 <__fp_splitA>
    25b4:	88 f0       	brcs	.+34     	; 0x25d8 <__fixunssfsi+0x28>
    25b6:	9f 57       	subi	r25, 0x7F	; 127
    25b8:	98 f0       	brcs	.+38     	; 0x25e0 <__fixunssfsi+0x30>
    25ba:	b9 2f       	mov	r27, r25
    25bc:	99 27       	eor	r25, r25
    25be:	b7 51       	subi	r27, 0x17	; 23
    25c0:	b0 f0       	brcs	.+44     	; 0x25ee <__fixunssfsi+0x3e>
    25c2:	e1 f0       	breq	.+56     	; 0x25fc <__fixunssfsi+0x4c>
    25c4:	66 0f       	add	r22, r22
    25c6:	77 1f       	adc	r23, r23
    25c8:	88 1f       	adc	r24, r24
    25ca:	99 1f       	adc	r25, r25
    25cc:	1a f0       	brmi	.+6      	; 0x25d4 <__fixunssfsi+0x24>
    25ce:	ba 95       	dec	r27
    25d0:	c9 f7       	brne	.-14     	; 0x25c4 <__fixunssfsi+0x14>
    25d2:	14 c0       	rjmp	.+40     	; 0x25fc <__fixunssfsi+0x4c>
    25d4:	b1 30       	cpi	r27, 0x01	; 1
    25d6:	91 f0       	breq	.+36     	; 0x25fc <__fixunssfsi+0x4c>
    25d8:	0e 94 66 13 	call	0x26cc	; 0x26cc <__fp_zero>
    25dc:	b1 e0       	ldi	r27, 0x01	; 1
    25de:	08 95       	ret
    25e0:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__fp_zero>
    25e4:	67 2f       	mov	r22, r23
    25e6:	78 2f       	mov	r23, r24
    25e8:	88 27       	eor	r24, r24
    25ea:	b8 5f       	subi	r27, 0xF8	; 248
    25ec:	39 f0       	breq	.+14     	; 0x25fc <__fixunssfsi+0x4c>
    25ee:	b9 3f       	cpi	r27, 0xF9	; 249
    25f0:	cc f3       	brlt	.-14     	; 0x25e4 <__fixunssfsi+0x34>
    25f2:	86 95       	lsr	r24
    25f4:	77 95       	ror	r23
    25f6:	67 95       	ror	r22
    25f8:	b3 95       	inc	r27
    25fa:	d9 f7       	brne	.-10     	; 0x25f2 <__fixunssfsi+0x42>
    25fc:	3e f4       	brtc	.+14     	; 0x260c <__fixunssfsi+0x5c>
    25fe:	90 95       	com	r25
    2600:	80 95       	com	r24
    2602:	70 95       	com	r23
    2604:	61 95       	neg	r22
    2606:	7f 4f       	sbci	r23, 0xFF	; 255
    2608:	8f 4f       	sbci	r24, 0xFF	; 255
    260a:	9f 4f       	sbci	r25, 0xFF	; 255
    260c:	08 95       	ret

0000260e <__floatunsisf>:
    260e:	e8 94       	clt
    2610:	09 c0       	rjmp	.+18     	; 0x2624 <__floatsisf+0x12>

00002612 <__floatsisf>:
    2612:	97 fb       	bst	r25, 7
    2614:	3e f4       	brtc	.+14     	; 0x2624 <__floatsisf+0x12>
    2616:	90 95       	com	r25
    2618:	80 95       	com	r24
    261a:	70 95       	com	r23
    261c:	61 95       	neg	r22
    261e:	7f 4f       	sbci	r23, 0xFF	; 255
    2620:	8f 4f       	sbci	r24, 0xFF	; 255
    2622:	9f 4f       	sbci	r25, 0xFF	; 255
    2624:	99 23       	and	r25, r25
    2626:	a9 f0       	breq	.+42     	; 0x2652 <__floatsisf+0x40>
    2628:	f9 2f       	mov	r31, r25
    262a:	96 e9       	ldi	r25, 0x96	; 150
    262c:	bb 27       	eor	r27, r27
    262e:	93 95       	inc	r25
    2630:	f6 95       	lsr	r31
    2632:	87 95       	ror	r24
    2634:	77 95       	ror	r23
    2636:	67 95       	ror	r22
    2638:	b7 95       	ror	r27
    263a:	f1 11       	cpse	r31, r1
    263c:	f8 cf       	rjmp	.-16     	; 0x262e <__floatsisf+0x1c>
    263e:	fa f4       	brpl	.+62     	; 0x267e <__floatsisf+0x6c>
    2640:	bb 0f       	add	r27, r27
    2642:	11 f4       	brne	.+4      	; 0x2648 <__floatsisf+0x36>
    2644:	60 ff       	sbrs	r22, 0
    2646:	1b c0       	rjmp	.+54     	; 0x267e <__floatsisf+0x6c>
    2648:	6f 5f       	subi	r22, 0xFF	; 255
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	16 c0       	rjmp	.+44     	; 0x267e <__floatsisf+0x6c>
    2652:	88 23       	and	r24, r24
    2654:	11 f0       	breq	.+4      	; 0x265a <__floatsisf+0x48>
    2656:	96 e9       	ldi	r25, 0x96	; 150
    2658:	11 c0       	rjmp	.+34     	; 0x267c <__floatsisf+0x6a>
    265a:	77 23       	and	r23, r23
    265c:	21 f0       	breq	.+8      	; 0x2666 <__floatsisf+0x54>
    265e:	9e e8       	ldi	r25, 0x8E	; 142
    2660:	87 2f       	mov	r24, r23
    2662:	76 2f       	mov	r23, r22
    2664:	05 c0       	rjmp	.+10     	; 0x2670 <__floatsisf+0x5e>
    2666:	66 23       	and	r22, r22
    2668:	71 f0       	breq	.+28     	; 0x2686 <__floatsisf+0x74>
    266a:	96 e8       	ldi	r25, 0x86	; 134
    266c:	86 2f       	mov	r24, r22
    266e:	70 e0       	ldi	r23, 0x00	; 0
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	2a f0       	brmi	.+10     	; 0x267e <__floatsisf+0x6c>
    2674:	9a 95       	dec	r25
    2676:	66 0f       	add	r22, r22
    2678:	77 1f       	adc	r23, r23
    267a:	88 1f       	adc	r24, r24
    267c:	da f7       	brpl	.-10     	; 0x2674 <__floatsisf+0x62>
    267e:	88 0f       	add	r24, r24
    2680:	96 95       	lsr	r25
    2682:	87 95       	ror	r24
    2684:	97 f9       	bld	r25, 7
    2686:	08 95       	ret

00002688 <__fp_split3>:
    2688:	57 fd       	sbrc	r21, 7
    268a:	90 58       	subi	r25, 0x80	; 128
    268c:	44 0f       	add	r20, r20
    268e:	55 1f       	adc	r21, r21
    2690:	59 f0       	breq	.+22     	; 0x26a8 <__fp_splitA+0x10>
    2692:	5f 3f       	cpi	r21, 0xFF	; 255
    2694:	71 f0       	breq	.+28     	; 0x26b2 <__fp_splitA+0x1a>
    2696:	47 95       	ror	r20

00002698 <__fp_splitA>:
    2698:	88 0f       	add	r24, r24
    269a:	97 fb       	bst	r25, 7
    269c:	99 1f       	adc	r25, r25
    269e:	61 f0       	breq	.+24     	; 0x26b8 <__fp_splitA+0x20>
    26a0:	9f 3f       	cpi	r25, 0xFF	; 255
    26a2:	79 f0       	breq	.+30     	; 0x26c2 <__fp_splitA+0x2a>
    26a4:	87 95       	ror	r24
    26a6:	08 95       	ret
    26a8:	12 16       	cp	r1, r18
    26aa:	13 06       	cpc	r1, r19
    26ac:	14 06       	cpc	r1, r20
    26ae:	55 1f       	adc	r21, r21
    26b0:	f2 cf       	rjmp	.-28     	; 0x2696 <__fp_split3+0xe>
    26b2:	46 95       	lsr	r20
    26b4:	f1 df       	rcall	.-30     	; 0x2698 <__fp_splitA>
    26b6:	08 c0       	rjmp	.+16     	; 0x26c8 <__fp_splitA+0x30>
    26b8:	16 16       	cp	r1, r22
    26ba:	17 06       	cpc	r1, r23
    26bc:	18 06       	cpc	r1, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	f1 cf       	rjmp	.-30     	; 0x26a4 <__fp_splitA+0xc>
    26c2:	86 95       	lsr	r24
    26c4:	71 05       	cpc	r23, r1
    26c6:	61 05       	cpc	r22, r1
    26c8:	08 94       	sec
    26ca:	08 95       	ret

000026cc <__fp_zero>:
    26cc:	e8 94       	clt

000026ce <__fp_szero>:
    26ce:	bb 27       	eor	r27, r27
    26d0:	66 27       	eor	r22, r22
    26d2:	77 27       	eor	r23, r23
    26d4:	cb 01       	movw	r24, r22
    26d6:	97 f9       	bld	r25, 7
    26d8:	08 95       	ret

000026da <__mulsf3>:
    26da:	0e 94 80 13 	call	0x2700	; 0x2700 <__mulsf3x>
    26de:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__fp_round>
    26e2:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <__fp_pscA>
    26e6:	38 f0       	brcs	.+14     	; 0x26f6 <__mulsf3+0x1c>
    26e8:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <__fp_pscB>
    26ec:	20 f0       	brcs	.+8      	; 0x26f6 <__mulsf3+0x1c>
    26ee:	95 23       	and	r25, r21
    26f0:	11 f0       	breq	.+4      	; 0x26f6 <__mulsf3+0x1c>
    26f2:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__fp_inf>
    26f6:	0c 94 e0 13 	jmp	0x27c0	; 0x27c0 <__fp_nan>
    26fa:	11 24       	eor	r1, r1
    26fc:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__fp_szero>

00002700 <__mulsf3x>:
    2700:	0e 94 44 13 	call	0x2688	; 0x2688 <__fp_split3>
    2704:	70 f3       	brcs	.-36     	; 0x26e2 <__mulsf3+0x8>

00002706 <__mulsf3_pse>:
    2706:	95 9f       	mul	r25, r21
    2708:	c1 f3       	breq	.-16     	; 0x26fa <__mulsf3+0x20>
    270a:	95 0f       	add	r25, r21
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	55 1f       	adc	r21, r21
    2710:	62 9f       	mul	r22, r18
    2712:	f0 01       	movw	r30, r0
    2714:	72 9f       	mul	r23, r18
    2716:	bb 27       	eor	r27, r27
    2718:	f0 0d       	add	r31, r0
    271a:	b1 1d       	adc	r27, r1
    271c:	63 9f       	mul	r22, r19
    271e:	aa 27       	eor	r26, r26
    2720:	f0 0d       	add	r31, r0
    2722:	b1 1d       	adc	r27, r1
    2724:	aa 1f       	adc	r26, r26
    2726:	64 9f       	mul	r22, r20
    2728:	66 27       	eor	r22, r22
    272a:	b0 0d       	add	r27, r0
    272c:	a1 1d       	adc	r26, r1
    272e:	66 1f       	adc	r22, r22
    2730:	82 9f       	mul	r24, r18
    2732:	22 27       	eor	r18, r18
    2734:	b0 0d       	add	r27, r0
    2736:	a1 1d       	adc	r26, r1
    2738:	62 1f       	adc	r22, r18
    273a:	73 9f       	mul	r23, r19
    273c:	b0 0d       	add	r27, r0
    273e:	a1 1d       	adc	r26, r1
    2740:	62 1f       	adc	r22, r18
    2742:	83 9f       	mul	r24, r19
    2744:	a0 0d       	add	r26, r0
    2746:	61 1d       	adc	r22, r1
    2748:	22 1f       	adc	r18, r18
    274a:	74 9f       	mul	r23, r20
    274c:	33 27       	eor	r19, r19
    274e:	a0 0d       	add	r26, r0
    2750:	61 1d       	adc	r22, r1
    2752:	23 1f       	adc	r18, r19
    2754:	84 9f       	mul	r24, r20
    2756:	60 0d       	add	r22, r0
    2758:	21 1d       	adc	r18, r1
    275a:	82 2f       	mov	r24, r18
    275c:	76 2f       	mov	r23, r22
    275e:	6a 2f       	mov	r22, r26
    2760:	11 24       	eor	r1, r1
    2762:	9f 57       	subi	r25, 0x7F	; 127
    2764:	50 40       	sbci	r21, 0x00	; 0
    2766:	9a f0       	brmi	.+38     	; 0x278e <__mulsf3_pse+0x88>
    2768:	f1 f0       	breq	.+60     	; 0x27a6 <__mulsf3_pse+0xa0>
    276a:	88 23       	and	r24, r24
    276c:	4a f0       	brmi	.+18     	; 0x2780 <__mulsf3_pse+0x7a>
    276e:	ee 0f       	add	r30, r30
    2770:	ff 1f       	adc	r31, r31
    2772:	bb 1f       	adc	r27, r27
    2774:	66 1f       	adc	r22, r22
    2776:	77 1f       	adc	r23, r23
    2778:	88 1f       	adc	r24, r24
    277a:	91 50       	subi	r25, 0x01	; 1
    277c:	50 40       	sbci	r21, 0x00	; 0
    277e:	a9 f7       	brne	.-22     	; 0x276a <__mulsf3_pse+0x64>
    2780:	9e 3f       	cpi	r25, 0xFE	; 254
    2782:	51 05       	cpc	r21, r1
    2784:	80 f0       	brcs	.+32     	; 0x27a6 <__mulsf3_pse+0xa0>
    2786:	0c 94 da 13 	jmp	0x27b4	; 0x27b4 <__fp_inf>
    278a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__fp_szero>
    278e:	5f 3f       	cpi	r21, 0xFF	; 255
    2790:	e4 f3       	brlt	.-8      	; 0x278a <__mulsf3_pse+0x84>
    2792:	98 3e       	cpi	r25, 0xE8	; 232
    2794:	d4 f3       	brlt	.-12     	; 0x278a <__mulsf3_pse+0x84>
    2796:	86 95       	lsr	r24
    2798:	77 95       	ror	r23
    279a:	67 95       	ror	r22
    279c:	b7 95       	ror	r27
    279e:	f7 95       	ror	r31
    27a0:	e7 95       	ror	r30
    27a2:	9f 5f       	subi	r25, 0xFF	; 255
    27a4:	c1 f7       	brne	.-16     	; 0x2796 <__mulsf3_pse+0x90>
    27a6:	fe 2b       	or	r31, r30
    27a8:	88 0f       	add	r24, r24
    27aa:	91 1d       	adc	r25, r1
    27ac:	96 95       	lsr	r25
    27ae:	87 95       	ror	r24
    27b0:	97 f9       	bld	r25, 7
    27b2:	08 95       	ret

000027b4 <__fp_inf>:
    27b4:	97 f9       	bld	r25, 7
    27b6:	9f 67       	ori	r25, 0x7F	; 127
    27b8:	80 e8       	ldi	r24, 0x80	; 128
    27ba:	70 e0       	ldi	r23, 0x00	; 0
    27bc:	60 e0       	ldi	r22, 0x00	; 0
    27be:	08 95       	ret

000027c0 <__fp_nan>:
    27c0:	9f ef       	ldi	r25, 0xFF	; 255
    27c2:	80 ec       	ldi	r24, 0xC0	; 192
    27c4:	08 95       	ret

000027c6 <__fp_pscA>:
    27c6:	00 24       	eor	r0, r0
    27c8:	0a 94       	dec	r0
    27ca:	16 16       	cp	r1, r22
    27cc:	17 06       	cpc	r1, r23
    27ce:	18 06       	cpc	r1, r24
    27d0:	09 06       	cpc	r0, r25
    27d2:	08 95       	ret

000027d4 <__fp_pscB>:
    27d4:	00 24       	eor	r0, r0
    27d6:	0a 94       	dec	r0
    27d8:	12 16       	cp	r1, r18
    27da:	13 06       	cpc	r1, r19
    27dc:	14 06       	cpc	r1, r20
    27de:	05 06       	cpc	r0, r21
    27e0:	08 95       	ret

000027e2 <__fp_round>:
    27e2:	09 2e       	mov	r0, r25
    27e4:	03 94       	inc	r0
    27e6:	00 0c       	add	r0, r0
    27e8:	11 f4       	brne	.+4      	; 0x27ee <__fp_round+0xc>
    27ea:	88 23       	and	r24, r24
    27ec:	52 f0       	brmi	.+20     	; 0x2802 <__fp_round+0x20>
    27ee:	bb 0f       	add	r27, r27
    27f0:	40 f4       	brcc	.+16     	; 0x2802 <__fp_round+0x20>
    27f2:	bf 2b       	or	r27, r31
    27f4:	11 f4       	brne	.+4      	; 0x27fa <__fp_round+0x18>
    27f6:	60 ff       	sbrs	r22, 0
    27f8:	04 c0       	rjmp	.+8      	; 0x2802 <__fp_round+0x20>
    27fa:	6f 5f       	subi	r22, 0xFF	; 255
    27fc:	7f 4f       	sbci	r23, 0xFF	; 255
    27fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2800:	9f 4f       	sbci	r25, 0xFF	; 255
    2802:	08 95       	ret

00002804 <__udivmodsi4>:
    2804:	a1 e2       	ldi	r26, 0x21	; 33
    2806:	1a 2e       	mov	r1, r26
    2808:	aa 1b       	sub	r26, r26
    280a:	bb 1b       	sub	r27, r27
    280c:	fd 01       	movw	r30, r26
    280e:	0d c0       	rjmp	.+26     	; 0x282a <__udivmodsi4_ep>

00002810 <__udivmodsi4_loop>:
    2810:	aa 1f       	adc	r26, r26
    2812:	bb 1f       	adc	r27, r27
    2814:	ee 1f       	adc	r30, r30
    2816:	ff 1f       	adc	r31, r31
    2818:	a2 17       	cp	r26, r18
    281a:	b3 07       	cpc	r27, r19
    281c:	e4 07       	cpc	r30, r20
    281e:	f5 07       	cpc	r31, r21
    2820:	20 f0       	brcs	.+8      	; 0x282a <__udivmodsi4_ep>
    2822:	a2 1b       	sub	r26, r18
    2824:	b3 0b       	sbc	r27, r19
    2826:	e4 0b       	sbc	r30, r20
    2828:	f5 0b       	sbc	r31, r21

0000282a <__udivmodsi4_ep>:
    282a:	66 1f       	adc	r22, r22
    282c:	77 1f       	adc	r23, r23
    282e:	88 1f       	adc	r24, r24
    2830:	99 1f       	adc	r25, r25
    2832:	1a 94       	dec	r1
    2834:	69 f7       	brne	.-38     	; 0x2810 <__udivmodsi4_loop>
    2836:	60 95       	com	r22
    2838:	70 95       	com	r23
    283a:	80 95       	com	r24
    283c:	90 95       	com	r25
    283e:	9b 01       	movw	r18, r22
    2840:	ac 01       	movw	r20, r24
    2842:	bd 01       	movw	r22, r26
    2844:	cf 01       	movw	r24, r30
    2846:	08 95       	ret

00002848 <__divmodsi4>:
    2848:	05 2e       	mov	r0, r21
    284a:	97 fb       	bst	r25, 7
    284c:	1e f4       	brtc	.+6      	; 0x2854 <__divmodsi4+0xc>
    284e:	00 94       	com	r0
    2850:	0e 94 3b 14 	call	0x2876	; 0x2876 <__negsi2>
    2854:	57 fd       	sbrc	r21, 7
    2856:	07 d0       	rcall	.+14     	; 0x2866 <__divmodsi4_neg2>
    2858:	0e 94 02 14 	call	0x2804	; 0x2804 <__udivmodsi4>
    285c:	07 fc       	sbrc	r0, 7
    285e:	03 d0       	rcall	.+6      	; 0x2866 <__divmodsi4_neg2>
    2860:	4e f4       	brtc	.+18     	; 0x2874 <__divmodsi4_exit>
    2862:	0c 94 3b 14 	jmp	0x2876	; 0x2876 <__negsi2>

00002866 <__divmodsi4_neg2>:
    2866:	50 95       	com	r21
    2868:	40 95       	com	r20
    286a:	30 95       	com	r19
    286c:	21 95       	neg	r18
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    2870:	4f 4f       	sbci	r20, 0xFF	; 255
    2872:	5f 4f       	sbci	r21, 0xFF	; 255

00002874 <__divmodsi4_exit>:
    2874:	08 95       	ret

00002876 <__negsi2>:
    2876:	90 95       	com	r25
    2878:	80 95       	com	r24
    287a:	70 95       	com	r23
    287c:	61 95       	neg	r22
    287e:	7f 4f       	sbci	r23, 0xFF	; 255
    2880:	8f 4f       	sbci	r24, 0xFF	; 255
    2882:	9f 4f       	sbci	r25, 0xFF	; 255
    2884:	08 95       	ret

00002886 <do_rand>:
    2886:	8f 92       	push	r8
    2888:	9f 92       	push	r9
    288a:	af 92       	push	r10
    288c:	bf 92       	push	r11
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	cf 93       	push	r28
    2898:	df 93       	push	r29
    289a:	ec 01       	movw	r28, r24
    289c:	68 81       	ld	r22, Y
    289e:	79 81       	ldd	r23, Y+1	; 0x01
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	61 15       	cp	r22, r1
    28a6:	71 05       	cpc	r23, r1
    28a8:	81 05       	cpc	r24, r1
    28aa:	91 05       	cpc	r25, r1
    28ac:	21 f4       	brne	.+8      	; 0x28b6 <do_rand+0x30>
    28ae:	64 e2       	ldi	r22, 0x24	; 36
    28b0:	79 ed       	ldi	r23, 0xD9	; 217
    28b2:	8b e5       	ldi	r24, 0x5B	; 91
    28b4:	97 e0       	ldi	r25, 0x07	; 7
    28b6:	2d e1       	ldi	r18, 0x1D	; 29
    28b8:	33 ef       	ldi	r19, 0xF3	; 243
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	0e 94 24 14 	call	0x2848	; 0x2848 <__divmodsi4>
    28c2:	49 01       	movw	r8, r18
    28c4:	5a 01       	movw	r10, r20
    28c6:	9b 01       	movw	r18, r22
    28c8:	ac 01       	movw	r20, r24
    28ca:	a7 ea       	ldi	r26, 0xA7	; 167
    28cc:	b1 e4       	ldi	r27, 0x41	; 65
    28ce:	0e 94 92 18 	call	0x3124	; 0x3124 <__muluhisi3>
    28d2:	6b 01       	movw	r12, r22
    28d4:	7c 01       	movw	r14, r24
    28d6:	ac ee       	ldi	r26, 0xEC	; 236
    28d8:	b4 ef       	ldi	r27, 0xF4	; 244
    28da:	a5 01       	movw	r20, r10
    28dc:	94 01       	movw	r18, r8
    28de:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulohisi3>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	8c 0d       	add	r24, r12
    28e8:	9d 1d       	adc	r25, r13
    28ea:	ae 1d       	adc	r26, r14
    28ec:	bf 1d       	adc	r27, r15
    28ee:	b7 ff       	sbrs	r27, 7
    28f0:	03 c0       	rjmp	.+6      	; 0x28f8 <do_rand+0x72>
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	a1 09       	sbc	r26, r1
    28f6:	b0 48       	sbci	r27, 0x80	; 128
    28f8:	88 83       	st	Y, r24
    28fa:	99 83       	std	Y+1, r25	; 0x01
    28fc:	aa 83       	std	Y+2, r26	; 0x02
    28fe:	bb 83       	std	Y+3, r27	; 0x03
    2900:	9f 77       	andi	r25, 0x7F	; 127
    2902:	df 91       	pop	r29
    2904:	cf 91       	pop	r28
    2906:	ff 90       	pop	r15
    2908:	ef 90       	pop	r14
    290a:	df 90       	pop	r13
    290c:	cf 90       	pop	r12
    290e:	bf 90       	pop	r11
    2910:	af 90       	pop	r10
    2912:	9f 90       	pop	r9
    2914:	8f 90       	pop	r8
    2916:	08 95       	ret

00002918 <rand_r>:
    2918:	0e 94 43 14 	call	0x2886	; 0x2886 <do_rand>
    291c:	08 95       	ret

0000291e <rand>:
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	91 e0       	ldi	r25, 0x01	; 1
    2922:	0e 94 43 14 	call	0x2886	; 0x2886 <do_rand>
    2926:	08 95       	ret

00002928 <srand>:
    2928:	a0 e0       	ldi	r26, 0x00	; 0
    292a:	b0 e0       	ldi	r27, 0x00	; 0
    292c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2930:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2934:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2938:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    293c:	08 95       	ret

0000293e <random_r>:
    293e:	8f 92       	push	r8
    2940:	9f 92       	push	r9
    2942:	af 92       	push	r10
    2944:	bf 92       	push	r11
    2946:	cf 92       	push	r12
    2948:	df 92       	push	r13
    294a:	ef 92       	push	r14
    294c:	ff 92       	push	r15
    294e:	cf 93       	push	r28
    2950:	df 93       	push	r29
    2952:	ec 01       	movw	r28, r24
    2954:	68 81       	ld	r22, Y
    2956:	79 81       	ldd	r23, Y+1	; 0x01
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	61 15       	cp	r22, r1
    295e:	71 05       	cpc	r23, r1
    2960:	81 05       	cpc	r24, r1
    2962:	91 05       	cpc	r25, r1
    2964:	21 f4       	brne	.+8      	; 0x296e <random_r+0x30>
    2966:	64 e2       	ldi	r22, 0x24	; 36
    2968:	79 ed       	ldi	r23, 0xD9	; 217
    296a:	8b e5       	ldi	r24, 0x5B	; 91
    296c:	97 e0       	ldi	r25, 0x07	; 7
    296e:	2d e1       	ldi	r18, 0x1D	; 29
    2970:	33 ef       	ldi	r19, 0xF3	; 243
    2972:	41 e0       	ldi	r20, 0x01	; 1
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	0e 94 24 14 	call	0x2848	; 0x2848 <__divmodsi4>
    297a:	49 01       	movw	r8, r18
    297c:	5a 01       	movw	r10, r20
    297e:	9b 01       	movw	r18, r22
    2980:	ac 01       	movw	r20, r24
    2982:	a7 ea       	ldi	r26, 0xA7	; 167
    2984:	b1 e4       	ldi	r27, 0x41	; 65
    2986:	0e 94 92 18 	call	0x3124	; 0x3124 <__muluhisi3>
    298a:	6b 01       	movw	r12, r22
    298c:	7c 01       	movw	r14, r24
    298e:	ac ee       	ldi	r26, 0xEC	; 236
    2990:	b4 ef       	ldi	r27, 0xF4	; 244
    2992:	a5 01       	movw	r20, r10
    2994:	94 01       	movw	r18, r8
    2996:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulohisi3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	8c 0d       	add	r24, r12
    29a0:	9d 1d       	adc	r25, r13
    29a2:	ae 1d       	adc	r26, r14
    29a4:	bf 1d       	adc	r27, r15
    29a6:	b7 ff       	sbrs	r27, 7
    29a8:	03 c0       	rjmp	.+6      	; 0x29b0 <random_r+0x72>
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	a1 09       	sbc	r26, r1
    29ae:	b0 48       	sbci	r27, 0x80	; 128
    29b0:	88 83       	st	Y, r24
    29b2:	99 83       	std	Y+1, r25	; 0x01
    29b4:	aa 83       	std	Y+2, r26	; 0x02
    29b6:	bb 83       	std	Y+3, r27	; 0x03
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	9f 77       	andi	r25, 0x7F	; 127
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	df 90       	pop	r13
    29c8:	cf 90       	pop	r12
    29ca:	bf 90       	pop	r11
    29cc:	af 90       	pop	r10
    29ce:	9f 90       	pop	r9
    29d0:	8f 90       	pop	r8
    29d2:	08 95       	ret

000029d4 <random>:
    29d4:	8f 92       	push	r8
    29d6:	9f 92       	push	r9
    29d8:	af 92       	push	r10
    29da:	bf 92       	push	r11
    29dc:	cf 92       	push	r12
    29de:	df 92       	push	r13
    29e0:	ef 92       	push	r14
    29e2:	ff 92       	push	r15
    29e4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    29e8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    29ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    29f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    29f4:	61 15       	cp	r22, r1
    29f6:	71 05       	cpc	r23, r1
    29f8:	81 05       	cpc	r24, r1
    29fa:	91 05       	cpc	r25, r1
    29fc:	21 f4       	brne	.+8      	; 0x2a06 <random+0x32>
    29fe:	64 e2       	ldi	r22, 0x24	; 36
    2a00:	79 ed       	ldi	r23, 0xD9	; 217
    2a02:	8b e5       	ldi	r24, 0x5B	; 91
    2a04:	97 e0       	ldi	r25, 0x07	; 7
    2a06:	2d e1       	ldi	r18, 0x1D	; 29
    2a08:	33 ef       	ldi	r19, 0xF3	; 243
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	50 e0       	ldi	r21, 0x00	; 0
    2a0e:	0e 94 24 14 	call	0x2848	; 0x2848 <__divmodsi4>
    2a12:	49 01       	movw	r8, r18
    2a14:	5a 01       	movw	r10, r20
    2a16:	9b 01       	movw	r18, r22
    2a18:	ac 01       	movw	r20, r24
    2a1a:	a7 ea       	ldi	r26, 0xA7	; 167
    2a1c:	b1 e4       	ldi	r27, 0x41	; 65
    2a1e:	0e 94 92 18 	call	0x3124	; 0x3124 <__muluhisi3>
    2a22:	6b 01       	movw	r12, r22
    2a24:	7c 01       	movw	r14, r24
    2a26:	ac ee       	ldi	r26, 0xEC	; 236
    2a28:	b4 ef       	ldi	r27, 0xF4	; 244
    2a2a:	a5 01       	movw	r20, r10
    2a2c:	94 01       	movw	r18, r8
    2a2e:	0e 94 a0 18 	call	0x3140	; 0x3140 <__mulohisi3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	8c 0d       	add	r24, r12
    2a38:	9d 1d       	adc	r25, r13
    2a3a:	ae 1d       	adc	r26, r14
    2a3c:	bf 1d       	adc	r27, r15
    2a3e:	b7 ff       	sbrs	r27, 7
    2a40:	03 c0       	rjmp	.+6      	; 0x2a48 <random+0x74>
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	a1 09       	sbc	r26, r1
    2a46:	b0 48       	sbci	r27, 0x80	; 128
    2a48:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2a4c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2a50:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2a54:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2a58:	bc 01       	movw	r22, r24
    2a5a:	cd 01       	movw	r24, r26
    2a5c:	9f 77       	andi	r25, 0x7F	; 127
    2a5e:	ff 90       	pop	r15
    2a60:	ef 90       	pop	r14
    2a62:	df 90       	pop	r13
    2a64:	cf 90       	pop	r12
    2a66:	bf 90       	pop	r11
    2a68:	af 90       	pop	r10
    2a6a:	9f 90       	pop	r9
    2a6c:	8f 90       	pop	r8
    2a6e:	08 95       	ret

00002a70 <srandom>:
    2a70:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2a74:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2a78:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2a7c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2a80:	08 95       	ret

00002a82 <fgetc>:
    2a82:	cf 93       	push	r28
    2a84:	df 93       	push	r29
    2a86:	ec 01       	movw	r28, r24
    2a88:	2b 81       	ldd	r18, Y+3	; 0x03
    2a8a:	20 ff       	sbrs	r18, 0
    2a8c:	33 c0       	rjmp	.+102    	; 0x2af4 <fgetc+0x72>
    2a8e:	26 ff       	sbrs	r18, 6
    2a90:	0a c0       	rjmp	.+20     	; 0x2aa6 <fgetc+0x24>
    2a92:	2f 7b       	andi	r18, 0xBF	; 191
    2a94:	2b 83       	std	Y+3, r18	; 0x03
    2a96:	8e 81       	ldd	r24, Y+6	; 0x06
    2a98:	9f 81       	ldd	r25, Y+7	; 0x07
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	9f 83       	std	Y+7, r25	; 0x07
    2a9e:	8e 83       	std	Y+6, r24	; 0x06
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	29 c0       	rjmp	.+82     	; 0x2af8 <fgetc+0x76>
    2aa6:	22 ff       	sbrs	r18, 2
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <fgetc+0x46>
    2aaa:	e8 81       	ld	r30, Y
    2aac:	f9 81       	ldd	r31, Y+1	; 0x01
    2aae:	80 81       	ld	r24, Z
    2ab0:	08 2e       	mov	r0, r24
    2ab2:	00 0c       	add	r0, r0
    2ab4:	99 0b       	sbc	r25, r25
    2ab6:	00 97       	sbiw	r24, 0x00	; 0
    2ab8:	19 f4       	brne	.+6      	; 0x2ac0 <fgetc+0x3e>
    2aba:	20 62       	ori	r18, 0x20	; 32
    2abc:	2b 83       	std	Y+3, r18	; 0x03
    2abe:	1a c0       	rjmp	.+52     	; 0x2af4 <fgetc+0x72>
    2ac0:	31 96       	adiw	r30, 0x01	; 1
    2ac2:	f9 83       	std	Y+1, r31	; 0x01
    2ac4:	e8 83       	st	Y, r30
    2ac6:	0e c0       	rjmp	.+28     	; 0x2ae4 <fgetc+0x62>
    2ac8:	ea 85       	ldd	r30, Y+10	; 0x0a
    2aca:	fb 85       	ldd	r31, Y+11	; 0x0b
    2acc:	09 95       	icall
    2ace:	97 ff       	sbrs	r25, 7
    2ad0:	09 c0       	rjmp	.+18     	; 0x2ae4 <fgetc+0x62>
    2ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    2ad4:	01 96       	adiw	r24, 0x01	; 1
    2ad6:	11 f0       	breq	.+4      	; 0x2adc <fgetc+0x5a>
    2ad8:	80 e2       	ldi	r24, 0x20	; 32
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <fgetc+0x5c>
    2adc:	80 e1       	ldi	r24, 0x10	; 16
    2ade:	82 2b       	or	r24, r18
    2ae0:	8b 83       	std	Y+3, r24	; 0x03
    2ae2:	08 c0       	rjmp	.+16     	; 0x2af4 <fgetc+0x72>
    2ae4:	2e 81       	ldd	r18, Y+6	; 0x06
    2ae6:	3f 81       	ldd	r19, Y+7	; 0x07
    2ae8:	2f 5f       	subi	r18, 0xFF	; 255
    2aea:	3f 4f       	sbci	r19, 0xFF	; 255
    2aec:	3f 83       	std	Y+7, r19	; 0x07
    2aee:	2e 83       	std	Y+6, r18	; 0x06
    2af0:	99 27       	eor	r25, r25
    2af2:	02 c0       	rjmp	.+4      	; 0x2af8 <fgetc+0x76>
    2af4:	8f ef       	ldi	r24, 0xFF	; 255
    2af6:	9f ef       	ldi	r25, 0xFF	; 255
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	08 95       	ret

00002afe <printf>:
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	e5 e8       	ldi	r30, 0x85	; 133
    2b04:	f5 e1       	ldi	r31, 0x15	; 21
    2b06:	0c 94 b5 18 	jmp	0x316a	; 0x316a <__prologue_saves__+0x20>
    2b0a:	ae 01       	movw	r20, r28
    2b0c:	4b 5f       	subi	r20, 0xFB	; 251
    2b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b10:	fa 01       	movw	r30, r20
    2b12:	61 91       	ld	r22, Z+
    2b14:	71 91       	ld	r23, Z+
    2b16:	af 01       	movw	r20, r30
    2b18:	80 91 19 04 	lds	r24, 0x0419	; 0x800419 <__iob+0x2>
    2b1c:	90 91 1a 04 	lds	r25, 0x041A	; 0x80041a <__iob+0x3>
    2b20:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vfprintf>
    2b24:	e2 e0       	ldi	r30, 0x02	; 2
    2b26:	0c 94 d1 18 	jmp	0x31a2	; 0x31a2 <__epilogue_restores__+0x20>

00002b2a <printf_P>:
    2b2a:	a0 e0       	ldi	r26, 0x00	; 0
    2b2c:	b0 e0       	ldi	r27, 0x00	; 0
    2b2e:	eb e9       	ldi	r30, 0x9B	; 155
    2b30:	f5 e1       	ldi	r31, 0x15	; 21
    2b32:	0c 94 b3 18 	jmp	0x3166	; 0x3166 <__prologue_saves__+0x1c>
    2b36:	ae 01       	movw	r20, r28
    2b38:	49 5f       	subi	r20, 0xF9	; 249
    2b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3c:	da 01       	movw	r26, r20
    2b3e:	6d 91       	ld	r22, X+
    2b40:	7d 91       	ld	r23, X+
    2b42:	ad 01       	movw	r20, r26
    2b44:	07 e1       	ldi	r16, 0x17	; 23
    2b46:	14 e0       	ldi	r17, 0x04	; 4
    2b48:	f8 01       	movw	r30, r16
    2b4a:	82 81       	ldd	r24, Z+2	; 0x02
    2b4c:	93 81       	ldd	r25, Z+3	; 0x03
    2b4e:	dc 01       	movw	r26, r24
    2b50:	13 96       	adiw	r26, 0x03	; 3
    2b52:	2c 91       	ld	r18, X
    2b54:	13 97       	sbiw	r26, 0x03	; 3
    2b56:	28 60       	ori	r18, 0x08	; 8
    2b58:	13 96       	adiw	r26, 0x03	; 3
    2b5a:	2c 93       	st	X, r18
    2b5c:	0e 94 c2 15 	call	0x2b84	; 0x2b84 <vfprintf>
    2b60:	d8 01       	movw	r26, r16
    2b62:	12 96       	adiw	r26, 0x02	; 2
    2b64:	ed 91       	ld	r30, X+
    2b66:	fc 91       	ld	r31, X
    2b68:	13 97       	sbiw	r26, 0x03	; 3
    2b6a:	23 81       	ldd	r18, Z+3	; 0x03
    2b6c:	27 7f       	andi	r18, 0xF7	; 247
    2b6e:	23 83       	std	Z+3, r18	; 0x03
    2b70:	e4 e0       	ldi	r30, 0x04	; 4
    2b72:	0c 94 cf 18 	jmp	0x319e	; 0x319e <__epilogue_restores__+0x1c>

00002b76 <putchar>:
    2b76:	60 91 19 04 	lds	r22, 0x0419	; 0x800419 <__iob+0x2>
    2b7a:	70 91 1a 04 	lds	r23, 0x041A	; 0x80041a <__iob+0x3>
    2b7e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2b82:	08 95       	ret

00002b84 <vfprintf>:
    2b84:	ab e0       	ldi	r26, 0x0B	; 11
    2b86:	b0 e0       	ldi	r27, 0x00	; 0
    2b88:	e8 ec       	ldi	r30, 0xC8	; 200
    2b8a:	f5 e1       	ldi	r31, 0x15	; 21
    2b8c:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__prologue_saves__>
    2b90:	6c 01       	movw	r12, r24
    2b92:	7b 01       	movw	r14, r22
    2b94:	8a 01       	movw	r16, r20
    2b96:	fc 01       	movw	r30, r24
    2b98:	17 82       	std	Z+7, r1	; 0x07
    2b9a:	16 82       	std	Z+6, r1	; 0x06
    2b9c:	83 81       	ldd	r24, Z+3	; 0x03
    2b9e:	81 ff       	sbrs	r24, 1
    2ba0:	cc c1       	rjmp	.+920    	; 0x2f3a <vfprintf+0x3b6>
    2ba2:	ce 01       	movw	r24, r28
    2ba4:	01 96       	adiw	r24, 0x01	; 1
    2ba6:	3c 01       	movw	r6, r24
    2ba8:	f6 01       	movw	r30, r12
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	f7 01       	movw	r30, r14
    2bae:	93 fd       	sbrc	r25, 3
    2bb0:	85 91       	lpm	r24, Z+
    2bb2:	93 ff       	sbrs	r25, 3
    2bb4:	81 91       	ld	r24, Z+
    2bb6:	7f 01       	movw	r14, r30
    2bb8:	88 23       	and	r24, r24
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <vfprintf+0x3a>
    2bbc:	ba c1       	rjmp	.+884    	; 0x2f32 <vfprintf+0x3ae>
    2bbe:	85 32       	cpi	r24, 0x25	; 37
    2bc0:	39 f4       	brne	.+14     	; 0x2bd0 <vfprintf+0x4c>
    2bc2:	93 fd       	sbrc	r25, 3
    2bc4:	85 91       	lpm	r24, Z+
    2bc6:	93 ff       	sbrs	r25, 3
    2bc8:	81 91       	ld	r24, Z+
    2bca:	7f 01       	movw	r14, r30
    2bcc:	85 32       	cpi	r24, 0x25	; 37
    2bce:	29 f4       	brne	.+10     	; 0x2bda <vfprintf+0x56>
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2bd8:	e7 cf       	rjmp	.-50     	; 0x2ba8 <vfprintf+0x24>
    2bda:	91 2c       	mov	r9, r1
    2bdc:	21 2c       	mov	r2, r1
    2bde:	31 2c       	mov	r3, r1
    2be0:	ff e1       	ldi	r31, 0x1F	; 31
    2be2:	f3 15       	cp	r31, r3
    2be4:	d8 f0       	brcs	.+54     	; 0x2c1c <vfprintf+0x98>
    2be6:	8b 32       	cpi	r24, 0x2B	; 43
    2be8:	79 f0       	breq	.+30     	; 0x2c08 <vfprintf+0x84>
    2bea:	38 f4       	brcc	.+14     	; 0x2bfa <vfprintf+0x76>
    2bec:	80 32       	cpi	r24, 0x20	; 32
    2bee:	79 f0       	breq	.+30     	; 0x2c0e <vfprintf+0x8a>
    2bf0:	83 32       	cpi	r24, 0x23	; 35
    2bf2:	a1 f4       	brne	.+40     	; 0x2c1c <vfprintf+0x98>
    2bf4:	23 2d       	mov	r18, r3
    2bf6:	20 61       	ori	r18, 0x10	; 16
    2bf8:	1d c0       	rjmp	.+58     	; 0x2c34 <vfprintf+0xb0>
    2bfa:	8d 32       	cpi	r24, 0x2D	; 45
    2bfc:	61 f0       	breq	.+24     	; 0x2c16 <vfprintf+0x92>
    2bfe:	80 33       	cpi	r24, 0x30	; 48
    2c00:	69 f4       	brne	.+26     	; 0x2c1c <vfprintf+0x98>
    2c02:	23 2d       	mov	r18, r3
    2c04:	21 60       	ori	r18, 0x01	; 1
    2c06:	16 c0       	rjmp	.+44     	; 0x2c34 <vfprintf+0xb0>
    2c08:	83 2d       	mov	r24, r3
    2c0a:	82 60       	ori	r24, 0x02	; 2
    2c0c:	38 2e       	mov	r3, r24
    2c0e:	e3 2d       	mov	r30, r3
    2c10:	e4 60       	ori	r30, 0x04	; 4
    2c12:	3e 2e       	mov	r3, r30
    2c14:	2a c0       	rjmp	.+84     	; 0x2c6a <vfprintf+0xe6>
    2c16:	f3 2d       	mov	r31, r3
    2c18:	f8 60       	ori	r31, 0x08	; 8
    2c1a:	1d c0       	rjmp	.+58     	; 0x2c56 <vfprintf+0xd2>
    2c1c:	37 fc       	sbrc	r3, 7
    2c1e:	2d c0       	rjmp	.+90     	; 0x2c7a <vfprintf+0xf6>
    2c20:	20 ed       	ldi	r18, 0xD0	; 208
    2c22:	28 0f       	add	r18, r24
    2c24:	2a 30       	cpi	r18, 0x0A	; 10
    2c26:	40 f0       	brcs	.+16     	; 0x2c38 <vfprintf+0xb4>
    2c28:	8e 32       	cpi	r24, 0x2E	; 46
    2c2a:	b9 f4       	brne	.+46     	; 0x2c5a <vfprintf+0xd6>
    2c2c:	36 fc       	sbrc	r3, 6
    2c2e:	81 c1       	rjmp	.+770    	; 0x2f32 <vfprintf+0x3ae>
    2c30:	23 2d       	mov	r18, r3
    2c32:	20 64       	ori	r18, 0x40	; 64
    2c34:	32 2e       	mov	r3, r18
    2c36:	19 c0       	rjmp	.+50     	; 0x2c6a <vfprintf+0xe6>
    2c38:	36 fe       	sbrs	r3, 6
    2c3a:	06 c0       	rjmp	.+12     	; 0x2c48 <vfprintf+0xc4>
    2c3c:	8a e0       	ldi	r24, 0x0A	; 10
    2c3e:	98 9e       	mul	r9, r24
    2c40:	20 0d       	add	r18, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	92 2e       	mov	r9, r18
    2c46:	11 c0       	rjmp	.+34     	; 0x2c6a <vfprintf+0xe6>
    2c48:	ea e0       	ldi	r30, 0x0A	; 10
    2c4a:	2e 9e       	mul	r2, r30
    2c4c:	20 0d       	add	r18, r0
    2c4e:	11 24       	eor	r1, r1
    2c50:	22 2e       	mov	r2, r18
    2c52:	f3 2d       	mov	r31, r3
    2c54:	f0 62       	ori	r31, 0x20	; 32
    2c56:	3f 2e       	mov	r3, r31
    2c58:	08 c0       	rjmp	.+16     	; 0x2c6a <vfprintf+0xe6>
    2c5a:	8c 36       	cpi	r24, 0x6C	; 108
    2c5c:	21 f4       	brne	.+8      	; 0x2c66 <vfprintf+0xe2>
    2c5e:	83 2d       	mov	r24, r3
    2c60:	80 68       	ori	r24, 0x80	; 128
    2c62:	38 2e       	mov	r3, r24
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <vfprintf+0xe6>
    2c66:	88 36       	cpi	r24, 0x68	; 104
    2c68:	41 f4       	brne	.+16     	; 0x2c7a <vfprintf+0xf6>
    2c6a:	f7 01       	movw	r30, r14
    2c6c:	93 fd       	sbrc	r25, 3
    2c6e:	85 91       	lpm	r24, Z+
    2c70:	93 ff       	sbrs	r25, 3
    2c72:	81 91       	ld	r24, Z+
    2c74:	7f 01       	movw	r14, r30
    2c76:	81 11       	cpse	r24, r1
    2c78:	b3 cf       	rjmp	.-154    	; 0x2be0 <vfprintf+0x5c>
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	9f 7d       	andi	r25, 0xDF	; 223
    2c7e:	95 54       	subi	r25, 0x45	; 69
    2c80:	93 30       	cpi	r25, 0x03	; 3
    2c82:	28 f4       	brcc	.+10     	; 0x2c8e <vfprintf+0x10a>
    2c84:	0c 5f       	subi	r16, 0xFC	; 252
    2c86:	1f 4f       	sbci	r17, 0xFF	; 255
    2c88:	9f e3       	ldi	r25, 0x3F	; 63
    2c8a:	99 83       	std	Y+1, r25	; 0x01
    2c8c:	0d c0       	rjmp	.+26     	; 0x2ca8 <vfprintf+0x124>
    2c8e:	83 36       	cpi	r24, 0x63	; 99
    2c90:	31 f0       	breq	.+12     	; 0x2c9e <vfprintf+0x11a>
    2c92:	83 37       	cpi	r24, 0x73	; 115
    2c94:	71 f0       	breq	.+28     	; 0x2cb2 <vfprintf+0x12e>
    2c96:	83 35       	cpi	r24, 0x53	; 83
    2c98:	09 f0       	breq	.+2      	; 0x2c9c <vfprintf+0x118>
    2c9a:	59 c0       	rjmp	.+178    	; 0x2d4e <vfprintf+0x1ca>
    2c9c:	21 c0       	rjmp	.+66     	; 0x2ce0 <vfprintf+0x15c>
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	80 81       	ld	r24, Z
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	0e 5f       	subi	r16, 0xFE	; 254
    2ca6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ca8:	88 24       	eor	r8, r8
    2caa:	83 94       	inc	r8
    2cac:	91 2c       	mov	r9, r1
    2cae:	53 01       	movw	r10, r6
    2cb0:	13 c0       	rjmp	.+38     	; 0x2cd8 <vfprintf+0x154>
    2cb2:	28 01       	movw	r4, r16
    2cb4:	f2 e0       	ldi	r31, 0x02	; 2
    2cb6:	4f 0e       	add	r4, r31
    2cb8:	51 1c       	adc	r5, r1
    2cba:	f8 01       	movw	r30, r16
    2cbc:	a0 80       	ld	r10, Z
    2cbe:	b1 80       	ldd	r11, Z+1	; 0x01
    2cc0:	36 fe       	sbrs	r3, 6
    2cc2:	03 c0       	rjmp	.+6      	; 0x2cca <vfprintf+0x146>
    2cc4:	69 2d       	mov	r22, r9
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <vfprintf+0x14a>
    2cca:	6f ef       	ldi	r22, 0xFF	; 255
    2ccc:	7f ef       	ldi	r23, 0xFF	; 255
    2cce:	c5 01       	movw	r24, r10
    2cd0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <strnlen>
    2cd4:	4c 01       	movw	r8, r24
    2cd6:	82 01       	movw	r16, r4
    2cd8:	f3 2d       	mov	r31, r3
    2cda:	ff 77       	andi	r31, 0x7F	; 127
    2cdc:	3f 2e       	mov	r3, r31
    2cde:	16 c0       	rjmp	.+44     	; 0x2d0c <vfprintf+0x188>
    2ce0:	28 01       	movw	r4, r16
    2ce2:	22 e0       	ldi	r18, 0x02	; 2
    2ce4:	42 0e       	add	r4, r18
    2ce6:	51 1c       	adc	r5, r1
    2ce8:	f8 01       	movw	r30, r16
    2cea:	a0 80       	ld	r10, Z
    2cec:	b1 80       	ldd	r11, Z+1	; 0x01
    2cee:	36 fe       	sbrs	r3, 6
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <vfprintf+0x174>
    2cf2:	69 2d       	mov	r22, r9
    2cf4:	70 e0       	ldi	r23, 0x00	; 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <vfprintf+0x178>
    2cf8:	6f ef       	ldi	r22, 0xFF	; 255
    2cfa:	7f ef       	ldi	r23, 0xFF	; 255
    2cfc:	c5 01       	movw	r24, r10
    2cfe:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <strnlen_P>
    2d02:	4c 01       	movw	r8, r24
    2d04:	f3 2d       	mov	r31, r3
    2d06:	f0 68       	ori	r31, 0x80	; 128
    2d08:	3f 2e       	mov	r3, r31
    2d0a:	82 01       	movw	r16, r4
    2d0c:	33 fc       	sbrc	r3, 3
    2d0e:	1b c0       	rjmp	.+54     	; 0x2d46 <vfprintf+0x1c2>
    2d10:	82 2d       	mov	r24, r2
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	88 16       	cp	r8, r24
    2d16:	99 06       	cpc	r9, r25
    2d18:	b0 f4       	brcc	.+44     	; 0x2d46 <vfprintf+0x1c2>
    2d1a:	b6 01       	movw	r22, r12
    2d1c:	80 e2       	ldi	r24, 0x20	; 32
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2d24:	2a 94       	dec	r2
    2d26:	f4 cf       	rjmp	.-24     	; 0x2d10 <vfprintf+0x18c>
    2d28:	f5 01       	movw	r30, r10
    2d2a:	37 fc       	sbrc	r3, 7
    2d2c:	85 91       	lpm	r24, Z+
    2d2e:	37 fe       	sbrs	r3, 7
    2d30:	81 91       	ld	r24, Z+
    2d32:	5f 01       	movw	r10, r30
    2d34:	b6 01       	movw	r22, r12
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2d3c:	21 10       	cpse	r2, r1
    2d3e:	2a 94       	dec	r2
    2d40:	21 e0       	ldi	r18, 0x01	; 1
    2d42:	82 1a       	sub	r8, r18
    2d44:	91 08       	sbc	r9, r1
    2d46:	81 14       	cp	r8, r1
    2d48:	91 04       	cpc	r9, r1
    2d4a:	71 f7       	brne	.-36     	; 0x2d28 <vfprintf+0x1a4>
    2d4c:	e8 c0       	rjmp	.+464    	; 0x2f1e <vfprintf+0x39a>
    2d4e:	84 36       	cpi	r24, 0x64	; 100
    2d50:	11 f0       	breq	.+4      	; 0x2d56 <vfprintf+0x1d2>
    2d52:	89 36       	cpi	r24, 0x69	; 105
    2d54:	41 f5       	brne	.+80     	; 0x2da6 <vfprintf+0x222>
    2d56:	f8 01       	movw	r30, r16
    2d58:	37 fe       	sbrs	r3, 7
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <vfprintf+0x1e6>
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	0c 5f       	subi	r16, 0xFC	; 252
    2d66:	1f 4f       	sbci	r17, 0xFF	; 255
    2d68:	08 c0       	rjmp	.+16     	; 0x2d7a <vfprintf+0x1f6>
    2d6a:	60 81       	ld	r22, Z
    2d6c:	71 81       	ldd	r23, Z+1	; 0x01
    2d6e:	07 2e       	mov	r0, r23
    2d70:	00 0c       	add	r0, r0
    2d72:	88 0b       	sbc	r24, r24
    2d74:	99 0b       	sbc	r25, r25
    2d76:	0e 5f       	subi	r16, 0xFE	; 254
    2d78:	1f 4f       	sbci	r17, 0xFF	; 255
    2d7a:	f3 2d       	mov	r31, r3
    2d7c:	ff 76       	andi	r31, 0x6F	; 111
    2d7e:	3f 2e       	mov	r3, r31
    2d80:	97 ff       	sbrs	r25, 7
    2d82:	09 c0       	rjmp	.+18     	; 0x2d96 <vfprintf+0x212>
    2d84:	90 95       	com	r25
    2d86:	80 95       	com	r24
    2d88:	70 95       	com	r23
    2d8a:	61 95       	neg	r22
    2d8c:	7f 4f       	sbci	r23, 0xFF	; 255
    2d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    2d90:	9f 4f       	sbci	r25, 0xFF	; 255
    2d92:	f0 68       	ori	r31, 0x80	; 128
    2d94:	3f 2e       	mov	r3, r31
    2d96:	2a e0       	ldi	r18, 0x0A	; 10
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	a3 01       	movw	r20, r6
    2d9c:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__ultoa_invert>
    2da0:	88 2e       	mov	r8, r24
    2da2:	86 18       	sub	r8, r6
    2da4:	45 c0       	rjmp	.+138    	; 0x2e30 <vfprintf+0x2ac>
    2da6:	85 37       	cpi	r24, 0x75	; 117
    2da8:	31 f4       	brne	.+12     	; 0x2db6 <vfprintf+0x232>
    2daa:	23 2d       	mov	r18, r3
    2dac:	2f 7e       	andi	r18, 0xEF	; 239
    2dae:	b2 2e       	mov	r11, r18
    2db0:	2a e0       	ldi	r18, 0x0A	; 10
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	25 c0       	rjmp	.+74     	; 0x2e00 <vfprintf+0x27c>
    2db6:	93 2d       	mov	r25, r3
    2db8:	99 7f       	andi	r25, 0xF9	; 249
    2dba:	b9 2e       	mov	r11, r25
    2dbc:	8f 36       	cpi	r24, 0x6F	; 111
    2dbe:	c1 f0       	breq	.+48     	; 0x2df0 <vfprintf+0x26c>
    2dc0:	18 f4       	brcc	.+6      	; 0x2dc8 <vfprintf+0x244>
    2dc2:	88 35       	cpi	r24, 0x58	; 88
    2dc4:	79 f0       	breq	.+30     	; 0x2de4 <vfprintf+0x260>
    2dc6:	b5 c0       	rjmp	.+362    	; 0x2f32 <vfprintf+0x3ae>
    2dc8:	80 37       	cpi	r24, 0x70	; 112
    2dca:	19 f0       	breq	.+6      	; 0x2dd2 <vfprintf+0x24e>
    2dcc:	88 37       	cpi	r24, 0x78	; 120
    2dce:	21 f0       	breq	.+8      	; 0x2dd8 <vfprintf+0x254>
    2dd0:	b0 c0       	rjmp	.+352    	; 0x2f32 <vfprintf+0x3ae>
    2dd2:	e9 2f       	mov	r30, r25
    2dd4:	e0 61       	ori	r30, 0x10	; 16
    2dd6:	be 2e       	mov	r11, r30
    2dd8:	b4 fe       	sbrs	r11, 4
    2dda:	0d c0       	rjmp	.+26     	; 0x2df6 <vfprintf+0x272>
    2ddc:	fb 2d       	mov	r31, r11
    2dde:	f4 60       	ori	r31, 0x04	; 4
    2de0:	bf 2e       	mov	r11, r31
    2de2:	09 c0       	rjmp	.+18     	; 0x2df6 <vfprintf+0x272>
    2de4:	34 fe       	sbrs	r3, 4
    2de6:	0a c0       	rjmp	.+20     	; 0x2dfc <vfprintf+0x278>
    2de8:	29 2f       	mov	r18, r25
    2dea:	26 60       	ori	r18, 0x06	; 6
    2dec:	b2 2e       	mov	r11, r18
    2dee:	06 c0       	rjmp	.+12     	; 0x2dfc <vfprintf+0x278>
    2df0:	28 e0       	ldi	r18, 0x08	; 8
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	05 c0       	rjmp	.+10     	; 0x2e00 <vfprintf+0x27c>
    2df6:	20 e1       	ldi	r18, 0x10	; 16
    2df8:	30 e0       	ldi	r19, 0x00	; 0
    2dfa:	02 c0       	rjmp	.+4      	; 0x2e00 <vfprintf+0x27c>
    2dfc:	20 e1       	ldi	r18, 0x10	; 16
    2dfe:	32 e0       	ldi	r19, 0x02	; 2
    2e00:	f8 01       	movw	r30, r16
    2e02:	b7 fe       	sbrs	r11, 7
    2e04:	07 c0       	rjmp	.+14     	; 0x2e14 <vfprintf+0x290>
    2e06:	60 81       	ld	r22, Z
    2e08:	71 81       	ldd	r23, Z+1	; 0x01
    2e0a:	82 81       	ldd	r24, Z+2	; 0x02
    2e0c:	93 81       	ldd	r25, Z+3	; 0x03
    2e0e:	0c 5f       	subi	r16, 0xFC	; 252
    2e10:	1f 4f       	sbci	r17, 0xFF	; 255
    2e12:	06 c0       	rjmp	.+12     	; 0x2e20 <vfprintf+0x29c>
    2e14:	60 81       	ld	r22, Z
    2e16:	71 81       	ldd	r23, Z+1	; 0x01
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	0e 5f       	subi	r16, 0xFE	; 254
    2e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e20:	a3 01       	movw	r20, r6
    2e22:	0e 94 f5 17 	call	0x2fea	; 0x2fea <__ultoa_invert>
    2e26:	88 2e       	mov	r8, r24
    2e28:	86 18       	sub	r8, r6
    2e2a:	fb 2d       	mov	r31, r11
    2e2c:	ff 77       	andi	r31, 0x7F	; 127
    2e2e:	3f 2e       	mov	r3, r31
    2e30:	36 fe       	sbrs	r3, 6
    2e32:	0d c0       	rjmp	.+26     	; 0x2e4e <vfprintf+0x2ca>
    2e34:	23 2d       	mov	r18, r3
    2e36:	2e 7f       	andi	r18, 0xFE	; 254
    2e38:	a2 2e       	mov	r10, r18
    2e3a:	89 14       	cp	r8, r9
    2e3c:	58 f4       	brcc	.+22     	; 0x2e54 <vfprintf+0x2d0>
    2e3e:	34 fe       	sbrs	r3, 4
    2e40:	0b c0       	rjmp	.+22     	; 0x2e58 <vfprintf+0x2d4>
    2e42:	32 fc       	sbrc	r3, 2
    2e44:	09 c0       	rjmp	.+18     	; 0x2e58 <vfprintf+0x2d4>
    2e46:	83 2d       	mov	r24, r3
    2e48:	8e 7e       	andi	r24, 0xEE	; 238
    2e4a:	a8 2e       	mov	r10, r24
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <vfprintf+0x2d4>
    2e4e:	b8 2c       	mov	r11, r8
    2e50:	a3 2c       	mov	r10, r3
    2e52:	03 c0       	rjmp	.+6      	; 0x2e5a <vfprintf+0x2d6>
    2e54:	b8 2c       	mov	r11, r8
    2e56:	01 c0       	rjmp	.+2      	; 0x2e5a <vfprintf+0x2d6>
    2e58:	b9 2c       	mov	r11, r9
    2e5a:	a4 fe       	sbrs	r10, 4
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <vfprintf+0x2f8>
    2e5e:	fe 01       	movw	r30, r28
    2e60:	e8 0d       	add	r30, r8
    2e62:	f1 1d       	adc	r31, r1
    2e64:	80 81       	ld	r24, Z
    2e66:	80 33       	cpi	r24, 0x30	; 48
    2e68:	21 f4       	brne	.+8      	; 0x2e72 <vfprintf+0x2ee>
    2e6a:	9a 2d       	mov	r25, r10
    2e6c:	99 7e       	andi	r25, 0xE9	; 233
    2e6e:	a9 2e       	mov	r10, r25
    2e70:	09 c0       	rjmp	.+18     	; 0x2e84 <vfprintf+0x300>
    2e72:	a2 fe       	sbrs	r10, 2
    2e74:	06 c0       	rjmp	.+12     	; 0x2e82 <vfprintf+0x2fe>
    2e76:	b3 94       	inc	r11
    2e78:	b3 94       	inc	r11
    2e7a:	04 c0       	rjmp	.+8      	; 0x2e84 <vfprintf+0x300>
    2e7c:	8a 2d       	mov	r24, r10
    2e7e:	86 78       	andi	r24, 0x86	; 134
    2e80:	09 f0       	breq	.+2      	; 0x2e84 <vfprintf+0x300>
    2e82:	b3 94       	inc	r11
    2e84:	a3 fc       	sbrc	r10, 3
    2e86:	11 c0       	rjmp	.+34     	; 0x2eaa <vfprintf+0x326>
    2e88:	a0 fe       	sbrs	r10, 0
    2e8a:	06 c0       	rjmp	.+12     	; 0x2e98 <vfprintf+0x314>
    2e8c:	b2 14       	cp	r11, r2
    2e8e:	88 f4       	brcc	.+34     	; 0x2eb2 <vfprintf+0x32e>
    2e90:	28 0c       	add	r2, r8
    2e92:	92 2c       	mov	r9, r2
    2e94:	9b 18       	sub	r9, r11
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <vfprintf+0x330>
    2e98:	b2 14       	cp	r11, r2
    2e9a:	60 f4       	brcc	.+24     	; 0x2eb4 <vfprintf+0x330>
    2e9c:	b6 01       	movw	r22, r12
    2e9e:	80 e2       	ldi	r24, 0x20	; 32
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2ea6:	b3 94       	inc	r11
    2ea8:	f7 cf       	rjmp	.-18     	; 0x2e98 <vfprintf+0x314>
    2eaa:	b2 14       	cp	r11, r2
    2eac:	18 f4       	brcc	.+6      	; 0x2eb4 <vfprintf+0x330>
    2eae:	2b 18       	sub	r2, r11
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <vfprintf+0x332>
    2eb2:	98 2c       	mov	r9, r8
    2eb4:	21 2c       	mov	r2, r1
    2eb6:	a4 fe       	sbrs	r10, 4
    2eb8:	10 c0       	rjmp	.+32     	; 0x2eda <vfprintf+0x356>
    2eba:	b6 01       	movw	r22, r12
    2ebc:	80 e3       	ldi	r24, 0x30	; 48
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2ec4:	a2 fe       	sbrs	r10, 2
    2ec6:	17 c0       	rjmp	.+46     	; 0x2ef6 <vfprintf+0x372>
    2ec8:	a1 fc       	sbrc	r10, 1
    2eca:	03 c0       	rjmp	.+6      	; 0x2ed2 <vfprintf+0x34e>
    2ecc:	88 e7       	ldi	r24, 0x78	; 120
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <vfprintf+0x352>
    2ed2:	88 e5       	ldi	r24, 0x58	; 88
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	b6 01       	movw	r22, r12
    2ed8:	0c c0       	rjmp	.+24     	; 0x2ef2 <vfprintf+0x36e>
    2eda:	8a 2d       	mov	r24, r10
    2edc:	86 78       	andi	r24, 0x86	; 134
    2ede:	59 f0       	breq	.+22     	; 0x2ef6 <vfprintf+0x372>
    2ee0:	a1 fe       	sbrs	r10, 1
    2ee2:	02 c0       	rjmp	.+4      	; 0x2ee8 <vfprintf+0x364>
    2ee4:	8b e2       	ldi	r24, 0x2B	; 43
    2ee6:	01 c0       	rjmp	.+2      	; 0x2eea <vfprintf+0x366>
    2ee8:	80 e2       	ldi	r24, 0x20	; 32
    2eea:	a7 fc       	sbrc	r10, 7
    2eec:	8d e2       	ldi	r24, 0x2D	; 45
    2eee:	b6 01       	movw	r22, r12
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2ef6:	89 14       	cp	r8, r9
    2ef8:	38 f4       	brcc	.+14     	; 0x2f08 <vfprintf+0x384>
    2efa:	b6 01       	movw	r22, r12
    2efc:	80 e3       	ldi	r24, 0x30	; 48
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2f04:	9a 94       	dec	r9
    2f06:	f7 cf       	rjmp	.-18     	; 0x2ef6 <vfprintf+0x372>
    2f08:	8a 94       	dec	r8
    2f0a:	f3 01       	movw	r30, r6
    2f0c:	e8 0d       	add	r30, r8
    2f0e:	f1 1d       	adc	r31, r1
    2f10:	80 81       	ld	r24, Z
    2f12:	b6 01       	movw	r22, r12
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2f1a:	81 10       	cpse	r8, r1
    2f1c:	f5 cf       	rjmp	.-22     	; 0x2f08 <vfprintf+0x384>
    2f1e:	22 20       	and	r2, r2
    2f20:	09 f4       	brne	.+2      	; 0x2f24 <vfprintf+0x3a0>
    2f22:	42 ce       	rjmp	.-892    	; 0x2ba8 <vfprintf+0x24>
    2f24:	b6 01       	movw	r22, r12
    2f26:	80 e2       	ldi	r24, 0x20	; 32
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <fputc>
    2f2e:	2a 94       	dec	r2
    2f30:	f6 cf       	rjmp	.-20     	; 0x2f1e <vfprintf+0x39a>
    2f32:	f6 01       	movw	r30, r12
    2f34:	86 81       	ldd	r24, Z+6	; 0x06
    2f36:	97 81       	ldd	r25, Z+7	; 0x07
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <vfprintf+0x3ba>
    2f3a:	8f ef       	ldi	r24, 0xFF	; 255
    2f3c:	9f ef       	ldi	r25, 0xFF	; 255
    2f3e:	2b 96       	adiw	r28, 0x0b	; 11
    2f40:	e2 e1       	ldi	r30, 0x12	; 18
    2f42:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <__epilogue_restores__>

00002f46 <strnlen_P>:
    2f46:	fc 01       	movw	r30, r24
    2f48:	05 90       	lpm	r0, Z+
    2f4a:	61 50       	subi	r22, 0x01	; 1
    2f4c:	70 40       	sbci	r23, 0x00	; 0
    2f4e:	01 10       	cpse	r0, r1
    2f50:	d8 f7       	brcc	.-10     	; 0x2f48 <strnlen_P+0x2>
    2f52:	80 95       	com	r24
    2f54:	90 95       	com	r25
    2f56:	8e 0f       	add	r24, r30
    2f58:	9f 1f       	adc	r25, r31
    2f5a:	08 95       	ret

00002f5c <strnlen>:
    2f5c:	fc 01       	movw	r30, r24
    2f5e:	61 50       	subi	r22, 0x01	; 1
    2f60:	70 40       	sbci	r23, 0x00	; 0
    2f62:	01 90       	ld	r0, Z+
    2f64:	01 10       	cpse	r0, r1
    2f66:	d8 f7       	brcc	.-10     	; 0x2f5e <strnlen+0x2>
    2f68:	80 95       	com	r24
    2f6a:	90 95       	com	r25
    2f6c:	8e 0f       	add	r24, r30
    2f6e:	9f 1f       	adc	r25, r31
    2f70:	08 95       	ret

00002f72 <fputc>:
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	fb 01       	movw	r30, r22
    2f7c:	23 81       	ldd	r18, Z+3	; 0x03
    2f7e:	21 fd       	sbrc	r18, 1
    2f80:	03 c0       	rjmp	.+6      	; 0x2f88 <fputc+0x16>
    2f82:	8f ef       	ldi	r24, 0xFF	; 255
    2f84:	9f ef       	ldi	r25, 0xFF	; 255
    2f86:	2c c0       	rjmp	.+88     	; 0x2fe0 <fputc+0x6e>
    2f88:	22 ff       	sbrs	r18, 2
    2f8a:	16 c0       	rjmp	.+44     	; 0x2fb8 <fputc+0x46>
    2f8c:	46 81       	ldd	r20, Z+6	; 0x06
    2f8e:	57 81       	ldd	r21, Z+7	; 0x07
    2f90:	24 81       	ldd	r18, Z+4	; 0x04
    2f92:	35 81       	ldd	r19, Z+5	; 0x05
    2f94:	42 17       	cp	r20, r18
    2f96:	53 07       	cpc	r21, r19
    2f98:	44 f4       	brge	.+16     	; 0x2faa <fputc+0x38>
    2f9a:	a0 81       	ld	r26, Z
    2f9c:	b1 81       	ldd	r27, Z+1	; 0x01
    2f9e:	9d 01       	movw	r18, r26
    2fa0:	2f 5f       	subi	r18, 0xFF	; 255
    2fa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa4:	31 83       	std	Z+1, r19	; 0x01
    2fa6:	20 83       	st	Z, r18
    2fa8:	8c 93       	st	X, r24
    2faa:	26 81       	ldd	r18, Z+6	; 0x06
    2fac:	37 81       	ldd	r19, Z+7	; 0x07
    2fae:	2f 5f       	subi	r18, 0xFF	; 255
    2fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fb2:	37 83       	std	Z+7, r19	; 0x07
    2fb4:	26 83       	std	Z+6, r18	; 0x06
    2fb6:	14 c0       	rjmp	.+40     	; 0x2fe0 <fputc+0x6e>
    2fb8:	8b 01       	movw	r16, r22
    2fba:	ec 01       	movw	r28, r24
    2fbc:	fb 01       	movw	r30, r22
    2fbe:	00 84       	ldd	r0, Z+8	; 0x08
    2fc0:	f1 85       	ldd	r31, Z+9	; 0x09
    2fc2:	e0 2d       	mov	r30, r0
    2fc4:	09 95       	icall
    2fc6:	89 2b       	or	r24, r25
    2fc8:	e1 f6       	brne	.-72     	; 0x2f82 <fputc+0x10>
    2fca:	d8 01       	movw	r26, r16
    2fcc:	16 96       	adiw	r26, 0x06	; 6
    2fce:	8d 91       	ld	r24, X+
    2fd0:	9c 91       	ld	r25, X
    2fd2:	17 97       	sbiw	r26, 0x07	; 7
    2fd4:	01 96       	adiw	r24, 0x01	; 1
    2fd6:	17 96       	adiw	r26, 0x07	; 7
    2fd8:	9c 93       	st	X, r25
    2fda:	8e 93       	st	-X, r24
    2fdc:	16 97       	sbiw	r26, 0x06	; 6
    2fde:	ce 01       	movw	r24, r28
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	08 95       	ret

00002fea <__ultoa_invert>:
    2fea:	fa 01       	movw	r30, r20
    2fec:	aa 27       	eor	r26, r26
    2fee:	28 30       	cpi	r18, 0x08	; 8
    2ff0:	51 f1       	breq	.+84     	; 0x3046 <__ultoa_invert+0x5c>
    2ff2:	20 31       	cpi	r18, 0x10	; 16
    2ff4:	81 f1       	breq	.+96     	; 0x3056 <__ultoa_invert+0x6c>
    2ff6:	e8 94       	clt
    2ff8:	6f 93       	push	r22
    2ffa:	6e 7f       	andi	r22, 0xFE	; 254
    2ffc:	6e 5f       	subi	r22, 0xFE	; 254
    2ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    3000:	8f 4f       	sbci	r24, 0xFF	; 255
    3002:	9f 4f       	sbci	r25, 0xFF	; 255
    3004:	af 4f       	sbci	r26, 0xFF	; 255
    3006:	b1 e0       	ldi	r27, 0x01	; 1
    3008:	3e d0       	rcall	.+124    	; 0x3086 <__ultoa_invert+0x9c>
    300a:	b4 e0       	ldi	r27, 0x04	; 4
    300c:	3c d0       	rcall	.+120    	; 0x3086 <__ultoa_invert+0x9c>
    300e:	67 0f       	add	r22, r23
    3010:	78 1f       	adc	r23, r24
    3012:	89 1f       	adc	r24, r25
    3014:	9a 1f       	adc	r25, r26
    3016:	a1 1d       	adc	r26, r1
    3018:	68 0f       	add	r22, r24
    301a:	79 1f       	adc	r23, r25
    301c:	8a 1f       	adc	r24, r26
    301e:	91 1d       	adc	r25, r1
    3020:	a1 1d       	adc	r26, r1
    3022:	6a 0f       	add	r22, r26
    3024:	71 1d       	adc	r23, r1
    3026:	81 1d       	adc	r24, r1
    3028:	91 1d       	adc	r25, r1
    302a:	a1 1d       	adc	r26, r1
    302c:	20 d0       	rcall	.+64     	; 0x306e <__ultoa_invert+0x84>
    302e:	09 f4       	brne	.+2      	; 0x3032 <__ultoa_invert+0x48>
    3030:	68 94       	set
    3032:	3f 91       	pop	r19
    3034:	2a e0       	ldi	r18, 0x0A	; 10
    3036:	26 9f       	mul	r18, r22
    3038:	11 24       	eor	r1, r1
    303a:	30 19       	sub	r19, r0
    303c:	30 5d       	subi	r19, 0xD0	; 208
    303e:	31 93       	st	Z+, r19
    3040:	de f6       	brtc	.-74     	; 0x2ff8 <__ultoa_invert+0xe>
    3042:	cf 01       	movw	r24, r30
    3044:	08 95       	ret
    3046:	46 2f       	mov	r20, r22
    3048:	47 70       	andi	r20, 0x07	; 7
    304a:	40 5d       	subi	r20, 0xD0	; 208
    304c:	41 93       	st	Z+, r20
    304e:	b3 e0       	ldi	r27, 0x03	; 3
    3050:	0f d0       	rcall	.+30     	; 0x3070 <__ultoa_invert+0x86>
    3052:	c9 f7       	brne	.-14     	; 0x3046 <__ultoa_invert+0x5c>
    3054:	f6 cf       	rjmp	.-20     	; 0x3042 <__ultoa_invert+0x58>
    3056:	46 2f       	mov	r20, r22
    3058:	4f 70       	andi	r20, 0x0F	; 15
    305a:	40 5d       	subi	r20, 0xD0	; 208
    305c:	4a 33       	cpi	r20, 0x3A	; 58
    305e:	18 f0       	brcs	.+6      	; 0x3066 <__ultoa_invert+0x7c>
    3060:	49 5d       	subi	r20, 0xD9	; 217
    3062:	31 fd       	sbrc	r19, 1
    3064:	40 52       	subi	r20, 0x20	; 32
    3066:	41 93       	st	Z+, r20
    3068:	02 d0       	rcall	.+4      	; 0x306e <__ultoa_invert+0x84>
    306a:	a9 f7       	brne	.-22     	; 0x3056 <__ultoa_invert+0x6c>
    306c:	ea cf       	rjmp	.-44     	; 0x3042 <__ultoa_invert+0x58>
    306e:	b4 e0       	ldi	r27, 0x04	; 4
    3070:	a6 95       	lsr	r26
    3072:	97 95       	ror	r25
    3074:	87 95       	ror	r24
    3076:	77 95       	ror	r23
    3078:	67 95       	ror	r22
    307a:	ba 95       	dec	r27
    307c:	c9 f7       	brne	.-14     	; 0x3070 <__ultoa_invert+0x86>
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	61 05       	cpc	r22, r1
    3082:	71 05       	cpc	r23, r1
    3084:	08 95       	ret
    3086:	9b 01       	movw	r18, r22
    3088:	ac 01       	movw	r20, r24
    308a:	0a 2e       	mov	r0, r26
    308c:	06 94       	lsr	r0
    308e:	57 95       	ror	r21
    3090:	47 95       	ror	r20
    3092:	37 95       	ror	r19
    3094:	27 95       	ror	r18
    3096:	ba 95       	dec	r27
    3098:	c9 f7       	brne	.-14     	; 0x308c <__ultoa_invert+0xa2>
    309a:	62 0f       	add	r22, r18
    309c:	73 1f       	adc	r23, r19
    309e:	84 1f       	adc	r24, r20
    30a0:	95 1f       	adc	r25, r21
    30a2:	a0 1d       	adc	r26, r0
    30a4:	08 95       	ret

000030a6 <eeprom_read_byte>:
    30a6:	f9 99       	sbic	0x1f, 1	; 31
    30a8:	fe cf       	rjmp	.-4      	; 0x30a6 <eeprom_read_byte>
    30aa:	92 bd       	out	0x22, r25	; 34
    30ac:	81 bd       	out	0x21, r24	; 33
    30ae:	f8 9a       	sbi	0x1f, 0	; 31
    30b0:	99 27       	eor	r25, r25
    30b2:	80 b5       	in	r24, 0x20	; 32
    30b4:	08 95       	ret

000030b6 <eeprom_read_dword>:
    30b6:	a6 e1       	ldi	r26, 0x16	; 22
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	44 e0       	ldi	r20, 0x04	; 4
    30bc:	50 e0       	ldi	r21, 0x00	; 0
    30be:	0c 94 84 18 	jmp	0x3108	; 0x3108 <eeprom_read_blraw>

000030c2 <eeprom_read_word>:
    30c2:	a8 e1       	ldi	r26, 0x18	; 24
    30c4:	b0 e0       	ldi	r27, 0x00	; 0
    30c6:	42 e0       	ldi	r20, 0x02	; 2
    30c8:	50 e0       	ldi	r21, 0x00	; 0
    30ca:	0c 94 84 18 	jmp	0x3108	; 0x3108 <eeprom_read_blraw>

000030ce <eeprom_write_byte>:
    30ce:	26 2f       	mov	r18, r22

000030d0 <eeprom_write_r18>:
    30d0:	f9 99       	sbic	0x1f, 1	; 31
    30d2:	fe cf       	rjmp	.-4      	; 0x30d0 <eeprom_write_r18>
    30d4:	1f ba       	out	0x1f, r1	; 31
    30d6:	92 bd       	out	0x22, r25	; 34
    30d8:	81 bd       	out	0x21, r24	; 33
    30da:	20 bd       	out	0x20, r18	; 32
    30dc:	0f b6       	in	r0, 0x3f	; 63
    30de:	f8 94       	cli
    30e0:	fa 9a       	sbi	0x1f, 2	; 31
    30e2:	f9 9a       	sbi	0x1f, 1	; 31
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	01 96       	adiw	r24, 0x01	; 1
    30e8:	08 95       	ret

000030ea <eeprom_write_dword>:
    30ea:	24 2f       	mov	r18, r20
    30ec:	0e 94 68 18 	call	0x30d0	; 0x30d0 <eeprom_write_r18>
    30f0:	25 2f       	mov	r18, r21
    30f2:	0e 94 68 18 	call	0x30d0	; 0x30d0 <eeprom_write_r18>
    30f6:	0c 94 7d 18 	jmp	0x30fa	; 0x30fa <eeprom_write_word>

000030fa <eeprom_write_word>:
    30fa:	0e 94 67 18 	call	0x30ce	; 0x30ce <eeprom_write_byte>
    30fe:	27 2f       	mov	r18, r23
    3100:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <eeprom_write_r18>

00003104 <eeprom_read_block>:
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22

00003108 <eeprom_read_blraw>:
    3108:	fc 01       	movw	r30, r24
    310a:	f9 99       	sbic	0x1f, 1	; 31
    310c:	fe cf       	rjmp	.-4      	; 0x310a <eeprom_read_blraw+0x2>
    310e:	06 c0       	rjmp	.+12     	; 0x311c <eeprom_read_blraw+0x14>
    3110:	f2 bd       	out	0x22, r31	; 34
    3112:	e1 bd       	out	0x21, r30	; 33
    3114:	f8 9a       	sbi	0x1f, 0	; 31
    3116:	31 96       	adiw	r30, 0x01	; 1
    3118:	00 b4       	in	r0, 0x20	; 32
    311a:	0d 92       	st	X+, r0
    311c:	41 50       	subi	r20, 0x01	; 1
    311e:	50 40       	sbci	r21, 0x00	; 0
    3120:	b8 f7       	brcc	.-18     	; 0x3110 <eeprom_read_blraw+0x8>
    3122:	08 95       	ret

00003124 <__muluhisi3>:
    3124:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <__umulhisi3>
    3128:	a5 9f       	mul	r26, r21
    312a:	90 0d       	add	r25, r0
    312c:	b4 9f       	mul	r27, r20
    312e:	90 0d       	add	r25, r0
    3130:	a4 9f       	mul	r26, r20
    3132:	80 0d       	add	r24, r0
    3134:	91 1d       	adc	r25, r1
    3136:	11 24       	eor	r1, r1
    3138:	08 95       	ret

0000313a <__mulshisi3>:
    313a:	b7 ff       	sbrs	r27, 7
    313c:	0c 94 92 18 	jmp	0x3124	; 0x3124 <__muluhisi3>

00003140 <__mulohisi3>:
    3140:	0e 94 92 18 	call	0x3124	; 0x3124 <__muluhisi3>
    3144:	82 1b       	sub	r24, r18
    3146:	93 0b       	sbc	r25, r19
    3148:	08 95       	ret

0000314a <__prologue_saves__>:
    314a:	2f 92       	push	r2
    314c:	3f 92       	push	r3
    314e:	4f 92       	push	r4
    3150:	5f 92       	push	r5
    3152:	6f 92       	push	r6
    3154:	7f 92       	push	r7
    3156:	8f 92       	push	r8
    3158:	9f 92       	push	r9
    315a:	af 92       	push	r10
    315c:	bf 92       	push	r11
    315e:	cf 92       	push	r12
    3160:	df 92       	push	r13
    3162:	ef 92       	push	r14
    3164:	ff 92       	push	r15
    3166:	0f 93       	push	r16
    3168:	1f 93       	push	r17
    316a:	cf 93       	push	r28
    316c:	df 93       	push	r29
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	ca 1b       	sub	r28, r26
    3174:	db 0b       	sbc	r29, r27
    3176:	0f b6       	in	r0, 0x3f	; 63
    3178:	f8 94       	cli
    317a:	de bf       	out	0x3e, r29	; 62
    317c:	0f be       	out	0x3f, r0	; 63
    317e:	cd bf       	out	0x3d, r28	; 61
    3180:	09 94       	ijmp

00003182 <__epilogue_restores__>:
    3182:	2a 88       	ldd	r2, Y+18	; 0x12
    3184:	39 88       	ldd	r3, Y+17	; 0x11
    3186:	48 88       	ldd	r4, Y+16	; 0x10
    3188:	5f 84       	ldd	r5, Y+15	; 0x0f
    318a:	6e 84       	ldd	r6, Y+14	; 0x0e
    318c:	7d 84       	ldd	r7, Y+13	; 0x0d
    318e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3190:	9b 84       	ldd	r9, Y+11	; 0x0b
    3192:	aa 84       	ldd	r10, Y+10	; 0x0a
    3194:	b9 84       	ldd	r11, Y+9	; 0x09
    3196:	c8 84       	ldd	r12, Y+8	; 0x08
    3198:	df 80       	ldd	r13, Y+7	; 0x07
    319a:	ee 80       	ldd	r14, Y+6	; 0x06
    319c:	fd 80       	ldd	r15, Y+5	; 0x05
    319e:	0c 81       	ldd	r16, Y+4	; 0x04
    31a0:	1b 81       	ldd	r17, Y+3	; 0x03
    31a2:	aa 81       	ldd	r26, Y+2	; 0x02
    31a4:	b9 81       	ldd	r27, Y+1	; 0x01
    31a6:	ce 0f       	add	r28, r30
    31a8:	d1 1d       	adc	r29, r1
    31aa:	0f b6       	in	r0, 0x3f	; 63
    31ac:	f8 94       	cli
    31ae:	de bf       	out	0x3e, r29	; 62
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	cd bf       	out	0x3d, r28	; 61
    31b4:	ed 01       	movw	r28, r26
    31b6:	08 95       	ret

000031b8 <__umulhisi3>:
    31b8:	a2 9f       	mul	r26, r18
    31ba:	b0 01       	movw	r22, r0
    31bc:	b3 9f       	mul	r27, r19
    31be:	c0 01       	movw	r24, r0
    31c0:	a3 9f       	mul	r26, r19
    31c2:	70 0d       	add	r23, r0
    31c4:	81 1d       	adc	r24, r1
    31c6:	11 24       	eor	r1, r1
    31c8:	91 1d       	adc	r25, r1
    31ca:	b2 9f       	mul	r27, r18
    31cc:	70 0d       	add	r23, r0
    31ce:	81 1d       	adc	r24, r1
    31d0:	11 24       	eor	r1, r1
    31d2:	91 1d       	adc	r25, r1
    31d4:	08 95       	ret

000031d6 <_exit>:
    31d6:	f8 94       	cli

000031d8 <__stop_program>:
    31d8:	ff cf       	rjmp	.-2      	; 0x31d8 <__stop_program>
