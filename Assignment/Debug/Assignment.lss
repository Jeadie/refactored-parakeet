
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00002e7c  00002f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000187  0080020e  0080020e  0000301e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000301e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000006e0  00000000  00000000  000030c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005e4f  00000000  00000000  000037a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000200b  00000000  00000000  000095ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000348b  00000000  00000000  0000b5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001004  00000000  00000000  0000ea88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000017c0  00000000  00000000  0000fa8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fe1  00000000  00000000  0001124c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000520  00000000  00000000  0001422d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__vector_20>
      54:	0c 94 e4 0c 	jmp	0x19c8	; 0x19c8 <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2540>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2538>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2112>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2110>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2064>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2060>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2056>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2046>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2031>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	ec e7       	ldi	r30, 0x7C	; 124
     1fa:	fe e2       	ldi	r31, 0x2E	; 46
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	ae 30       	cpi	r26, 0x0E	; 14
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	ae e0       	ldi	r26, 0x0E	; 14
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a5 39       	cpi	r26, 0x95	; 149
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 ad 09 	call	0x135a	; 0x135a <main>
     21c:	0c 94 3c 17 	jmp	0x2e78	; 0x2e78 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e1 5f       	subi	r30, 0xF1	; 241
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	e2 5f       	subi	r30, 0xF2	; 242
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 0e 02 	lds	r20, 0x020E	; 0x80020e <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 0e 02 	lds	r25, 0x020E	; 0x80020e <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 0e 02 	sts	0x020E, r25	; 0x80020e <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 17 02 	lds	r18, 0x0217	; 0x800217 <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e1 5f       	subi	r30, 0xF1	; 241
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 0e 02 	lds	r18, 0x020E	; 0x80020e <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 17 02 	sts	0x0217, r20	; 0x800217 <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     344:	89 b1       	in	r24, 0x09	; 9
     346:	83 fb       	bst	r24, 3
     348:	88 27       	eor	r24, r24
     34a:	80 f9       	bld	r24, 0
     34c:	08 95       	ret

0000034e <buzzer_time_left>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
     35e:	40 91 18 02 	lds	r20, 0x0218	; 0x800218 <buzzer_time>
     362:	50 91 19 02 	lds	r21, 0x0219	; 0x800219 <buzzer_time+0x1>
     366:	6a 01       	movw	r12, r20
     368:	55 0f       	add	r21, r21
     36a:	ee 08       	sbc	r14, r14
     36c:	ff 08       	sbc	r15, r15
     36e:	00 91 6b 02 	lds	r16, 0x026B	; 0x80026b <clock_at_tone_start>
     372:	10 91 6c 02 	lds	r17, 0x026C	; 0x80026c <clock_at_tone_start+0x1>
     376:	20 91 6d 02 	lds	r18, 0x026D	; 0x80026d <clock_at_tone_start+0x2>
     37a:	30 91 6e 02 	lds	r19, 0x026E	; 0x80026e <clock_at_tone_start+0x3>
     37e:	c0 0e       	add	r12, r16
     380:	d1 1e       	adc	r13, r17
     382:	e2 1e       	adc	r14, r18
     384:	f3 1e       	adc	r15, r19
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	6c 15       	cp	r22, r12
     38c:	7d 05       	cpc	r23, r13
     38e:	8e 05       	cpc	r24, r14
     390:	9f 05       	cpc	r25, r15
     392:	10 f0       	brcs	.+4      	; 0x398 <buzzer_time_left+0x4a>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	c9 01       	movw	r24, r18
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <next_buzzer_tone>:
     3a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     3ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	e9 5a       	subi	r30, 0xA9	; 169
     3c2:	fd 4f       	sbci	r31, 0xFD	; 253
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	0e 94 28 11 	call	0x2250	; 0x2250 <change_OCR1A>
     3cc:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
     3d0:	60 93 6b 02 	sts	0x026B, r22	; 0x80026b <clock_at_tone_start>
     3d4:	70 93 6c 02 	sts	0x026C, r23	; 0x80026c <clock_at_tone_start+0x1>
     3d8:	80 93 6d 02 	sts	0x026D, r24	; 0x80026d <clock_at_tone_start+0x2>
     3dc:	90 93 6e 02 	sts	0x026E, r25	; 0x80026e <clock_at_tone_start+0x3>
     3e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     3e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	ef 59       	subi	r30, 0x9F	; 159
     3ee:	fd 4f       	sbci	r31, 0xFD	; 253
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <buzzer_time+0x1>
     3f8:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <buzzer_time>
     3fc:	08 95       	ret

000003fe <reset_buzzer>:
     3fe:	55 98       	cbi	0x0a, 5	; 10
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
     404:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     408:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     40c:	08 95       	ret

0000040e <play_start_game_sound_effect>:
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <number_of_tones+0x1>
     416:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <number_of_tones>
     41a:	e1 e6       	ldi	r30, 0x61	; 97
     41c:	f2 e0       	ldi	r31, 0x02	; 2
     41e:	84 ef       	ldi	r24, 0xF4	; 244
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	28 ec       	ldi	r18, 0xC8	; 200
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	33 83       	std	Z+3, r19	; 0x03
     42c:	22 83       	std	Z+2, r18	; 0x02
     42e:	95 83       	std	Z+5, r25	; 0x05
     430:	84 83       	std	Z+4, r24	; 0x04
     432:	e7 e5       	ldi	r30, 0x57	; 87
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
     43e:	28 ee       	ldi	r18, 0xE8	; 232
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	33 83       	std	Z+3, r19	; 0x03
     444:	22 83       	std	Z+2, r18	; 0x02
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     452:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     45a:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     45e:	81 11       	cpse	r24, r1
     460:	0e 94 2d 11 	call	0x225a	; 0x225a <enable_timer_one>
     464:	08 95       	ret

00000466 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <number_of_tones+0x1>
     46e:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <number_of_tones>
		buzzer_durations[0] = 50;
     472:	e1 e6       	ldi	r30, 0x61	; 97
     474:	f2 e0       	ldi	r31, 0x02	; 2
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     486:	e7 e5       	ldi	r30, 0x57	; 87
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	80 ed       	ldi	r24, 0xD0	; 208
     48c:	97 e0       	ldi	r25, 0x07	; 7
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	93 83       	std	Z+3, r25	; 0x03
     498:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     4a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     4aa:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     4ae:	81 11       	cpse	r24, r1
			enable_timer_one();
     4b0:	0e 94 2d 11 	call	0x225a	; 0x225a <enable_timer_one>
     4b4:	08 95       	ret

000004b6 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     4b6:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <number_of_tones>
     4ba:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <number_of_tones+0x1>
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	31 09       	sbc	r19, r1
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     4ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     4ce:	42 17       	cp	r20, r18
     4d0:	53 07       	cpc	r21, r19
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <last_tone_in_sequence+0x22>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	}
     4d8:	08 95       	ret

000004da <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4da:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4de:	89 2b       	or	r24, r25
     4e0:	59 f4       	brne	.+22     	; 0x4f8 <handle_buzzer_loop+0x1e>
     4e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <last_tone_in_sequence>
     4e6:	89 2b       	or	r24, r25
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     4ea:	67 e0       	ldi	r22, 0x07	; 7
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     4f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <reset_buzzer>
     4f6:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4f8:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4fc:	89 2b       	or	r24, r25
     4fe:	11 f4       	brne	.+4      	; 0x504 <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     500:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     504:	08 95       	ret

00000506 <save_game_to_EPPROM>:
	if(is_position_valid(super_food)){
		load_superfood(super_food);
	}else{
		remove_superfood_from_board(); 
	}
}
     506:	0f 93       	push	r16
     508:	1f 93       	push	r17
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	f8 94       	cli
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	88 e4       	ldi	r24, 0x48	; 72
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_position_of_food>
     520:	68 2f       	mov	r22, r24
     522:	80 e5       	ldi	r24, 0x50	; 80
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_position_of_food>
     530:	68 2f       	mov	r22, r24
     532:	88 e5       	ldi	r24, 0x58	; 88
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     53a:	82 e0       	ldi	r24, 0x02	; 2
     53c:	0e 94 aa 06 	call	0xd54	; 0xd54 <get_position_of_food>
     540:	68 2f       	mov	r22, r24
     542:	80 e6       	ldi	r24, 0x60	; 96
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     54a:	0e 94 c7 09 	call	0x138e	; 0x138e <get_rat_position>
     54e:	68 2f       	mov	r22, r24
     550:	88 e6       	ldi	r24, 0x68	; 104
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     558:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <superfood_is_on_board>
     55c:	88 23       	and	r24, r24
     55e:	41 f0       	breq	.+16     	; 0x570 <save_game_to_EPPROM+0x6a>
     560:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <get_superfood_position>
     564:	68 2f       	mov	r22, r24
     566:	80 e7       	ldi	r24, 0x70	; 112
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     56e:	05 c0       	rjmp	.+10     	; 0x57a <save_game_to_EPPROM+0x74>
     570:	68 e0       	ldi	r22, 0x08	; 8
     572:	80 e7       	ldi	r24, 0x70	; 112
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     57a:	0e 94 92 07 	call	0xf24	; 0xf24 <get_current_game_speed>
     57e:	bc 01       	movw	r22, r24
     580:	88 e7       	ldi	r24, 0x78	; 120
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <eeprom_write_word>
     588:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     58c:	ac 01       	movw	r20, r24
     58e:	99 0f       	add	r25, r25
     590:	66 0b       	sbc	r22, r22
     592:	77 0b       	sbc	r23, r23
     594:	88 e8       	ldi	r24, 0x88	; 136
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
     59c:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <get_snake_length>
     5a0:	68 2f       	mov	r22, r24
     5a2:	88 ea       	ldi	r24, 0xA8	; 168
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     5aa:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
     5ae:	ac 01       	movw	r20, r24
     5b0:	99 0f       	add	r25, r25
     5b2:	66 0b       	sbc	r22, r22
     5b4:	77 0b       	sbc	r23, r23
     5b6:	80 eb       	ldi	r24, 0xB0	; 176
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
     5be:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <get_snake_in_order>
     5c2:	8c 01       	movw	r16, r24
     5c4:	c0 e0       	ldi	r28, 0x00	; 0
     5c6:	d0 e0       	ldi	r29, 0x00	; 0
     5c8:	09 c0       	rjmp	.+18     	; 0x5dc <save_game_to_EPPROM+0xd6>
     5ca:	f8 01       	movw	r30, r16
     5cc:	60 81       	ld	r22, Z
     5ce:	80 ec       	ldi	r24, 0xC0	; 192
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     5d6:	29 96       	adiw	r28, 0x09	; 9
     5d8:	07 5f       	subi	r16, 0xF7	; 247
     5da:	1f 4f       	sbci	r17, 0xFF	; 255
     5dc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <get_snake_length>
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	c8 17       	cp	r28, r24
     5e4:	d9 07       	cpc	r29, r25
     5e6:	8c f3       	brlt	.-30     	; 0x5ca <save_game_to_EPPROM+0xc4>
     5e8:	68 e0       	ldi	r22, 0x08	; 8
     5ea:	80 ec       	ldi	r24, 0xC0	; 192
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     5f2:	78 94       	sei
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	08 95       	ret

000005fe <new_game_from_EEPROM>:
	
		sei();

}

void new_game_from_EEPROM(void){
     5fe:	08 95       	ret

00000600 <high_score_name_position>:

uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
     600:	81 15       	cp	r24, r1
     602:	21 e0       	ldi	r18, 0x01	; 1
     604:	92 07       	cpc	r25, r18
     606:	e9 f0       	breq	.+58     	; 0x642 <high_score_name_position+0x42>
     608:	38 f4       	brcc	.+14     	; 0x618 <high_score_name_position+0x18>
     60a:	80 3c       	cpi	r24, 0xC0	; 192
     60c:	91 05       	cpc	r25, r1
     60e:	91 f0       	breq	.+36     	; 0x634 <high_score_name_position+0x34>
     610:	80 3e       	cpi	r24, 0xE0	; 224
     612:	91 05       	cpc	r25, r1
     614:	61 f0       	breq	.+24     	; 0x62e <high_score_name_position+0x2e>
     616:	11 c0       	rjmp	.+34     	; 0x63a <high_score_name_position+0x3a>
     618:	80 32       	cpi	r24, 0x20	; 32
     61a:	21 e0       	ldi	r18, 0x01	; 1
     61c:	92 07       	cpc	r25, r18
     61e:	21 f0       	breq	.+8      	; 0x628 <high_score_name_position+0x28>
     620:	80 34       	cpi	r24, 0x40	; 64
     622:	91 40       	sbci	r25, 0x01	; 1
     624:	59 f0       	breq	.+22     	; 0x63c <high_score_name_position+0x3c>
     626:	09 c0       	rjmp	.+18     	; 0x63a <high_score_name_position+0x3a>
		case SCORE_FIVE: return NAME_FIVE; break; 
		case SCORE_FOUR: return NAME_FOUR; break;
     628:	80 e8       	ldi	r24, 0x80	; 128
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	08 95       	ret
		case SCORE_THREE: return NAME_THREE; break;
		case SCORE_TWO: return NAME_TWO; break;
     62e:	80 e4       	ldi	r24, 0x40	; 64
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret
		case SCORE_ONE: return NAME_ONE; break;
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	08 95       	ret
	}
}
     63a:	08 95       	ret
uint16_t high_score_name_position(uint16_t score_position){
// 	if (!(EEPROM_High_Score_has_been_initialised())){
// 		return NAME_ONE;
// 	}
	switch(score_position){
		case SCORE_FIVE: return NAME_FIVE; break; 
     63c:	80 ea       	ldi	r24, 0xA0	; 160
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret
		case SCORE_FOUR: return NAME_FOUR; break;
		case SCORE_THREE: return NAME_THREE; break;
     642:	80 e6       	ldi	r24, 0x60	; 96
     644:	90 e0       	ldi	r25, 0x00	; 0
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}
     646:	08 95       	ret

00000648 <move_place_down>:
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
	
	clear_terminal();
}

void move_place_down(uint16_t score_position, uint16_t name_position){
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	df 92       	push	r13
     652:	ef 92       	push	r14
     654:	ff 92       	push	r15
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	8c 01       	movw	r16, r24
     660:	eb 01       	movw	r28, r22
	uint32_t score = eeprom_read_dword(score_position); 
     662:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     666:	4b 01       	movw	r8, r22
     668:	5c 01       	movw	r10, r24
	uint8_t char1 = eeprom_read_byte(name_position);
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     670:	d8 2e       	mov	r13, r24
	uint8_t char2 = eeprom_read_byte(name_position+0x08);
     672:	ce 01       	movw	r24, r28
     674:	08 96       	adiw	r24, 0x08	; 8
     676:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     67a:	e8 2e       	mov	r14, r24
	uint8_t char3 = eeprom_read_byte(name_position+0x10);
     67c:	ce 01       	movw	r24, r28
     67e:	40 96       	adiw	r24, 0x10	; 16
     680:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     684:	f8 2e       	mov	r15, r24
	eeprom_write_dword((score_position+0x20), score); 
     686:	b5 01       	movw	r22, r10
     688:	a4 01       	movw	r20, r8
     68a:	c8 01       	movw	r24, r16
     68c:	80 96       	adiw	r24, 0x20	; 32
     68e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	eeprom_write_byte(name_position +0x20, char1);
     692:	6d 2d       	mov	r22, r13
     694:	ce 01       	movw	r24, r28
     696:	80 96       	adiw	r24, 0x20	; 32
     698:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	eeprom_write_byte(name_position +0x28, char2);
     69c:	6e 2d       	mov	r22, r14
     69e:	ce 01       	movw	r24, r28
     6a0:	88 96       	adiw	r24, 0x28	; 40
     6a2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	eeprom_write_byte(name_position +0x30, char3);
     6a6:	6f 2d       	mov	r22, r15
     6a8:	ce 01       	movw	r24, r28
     6aa:	c0 96       	adiw	r24, 0x30	; 48
     6ac:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
}
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	1f 91       	pop	r17
     6b6:	0f 91       	pop	r16
     6b8:	ff 90       	pop	r15
     6ba:	ef 90       	pop	r14
     6bc:	df 90       	pop	r13
     6be:	bf 90       	pop	r11
     6c0:	af 90       	pop	r10
     6c2:	9f 90       	pop	r9
     6c4:	8f 90       	pop	r8
     6c6:	08 95       	ret

000006c8 <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(SCORE_FOUR, NAME_FOUR); 
     6c8:	60 e8       	ldi	r22, 0x80	; 128
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	80 e2       	ldi	r24, 0x20	; 32
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 24 03 	call	0x648	; 0x648 <move_place_down>
     6d4:	08 95       	ret

000006d6 <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     6d6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <move_four_place_down>
	move_place_down(SCORE_THREE, NAME_THREE);
     6da:	60 e6       	ldi	r22, 0x60	; 96
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	91 e0       	ldi	r25, 0x01	; 1
     6e2:	0e 94 24 03 	call	0x648	; 0x648 <move_place_down>
     6e6:	08 95       	ret

000006e8 <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     6e8:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <move_three_place_down>
	move_place_down(SCORE_TWO, NAME_TWO);
     6ec:	60 e4       	ldi	r22, 0x40	; 64
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	80 ee       	ldi	r24, 0xE0	; 224
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0e 94 24 03 	call	0x648	; 0x648 <move_place_down>
     6f8:	08 95       	ret

000006fa <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     6fa:	0e 94 74 03 	call	0x6e8	; 0x6e8 <move_two_place_down>
	move_place_down(SCORE_ONE, NAME_ONE);
     6fe:	60 e2       	ldi	r22, 0x20	; 32
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	80 ec       	ldi	r24, 0xC0	; 192
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 24 03 	call	0x648	; 0x648 <move_place_down>
     70a:	08 95       	ret

0000070c <reset_name_at_memory_position>:
	reset_name_at_memory_position(NAME_FOUR);
	reset_name_at_memory_position(NAME_FIVE);
	eeprom_write_byte(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
	}
	
void reset_name_at_memory_position(uint16_t mem_pos){
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	ec 01       	movw	r28, r24
	eeprom_write_byte(mem_pos, UNDERSCORE);
     712:	6f e5       	ldi	r22, 0x5F	; 95
     714:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x08, UNDERSCORE);
     718:	6f e5       	ldi	r22, 0x5F	; 95
     71a:	ce 01       	movw	r24, r28
     71c:	08 96       	adiw	r24, 0x08	; 8
     71e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
     722:	6f e5       	ldi	r22, 0x5F	; 95
     724:	ce 01       	movw	r24, r28
     726:	40 96       	adiw	r24, 0x10	; 16
     728:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
}
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <initialise_EEPROM>:
	move_two_place_down();
	move_place_down(SCORE_ONE, NAME_ONE);
}

void initialise_EEPROM(void){
	eeprom_write_dword(SCORE_ONE, 0x00);
     732:	40 e0       	ldi	r20, 0x00	; 0
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	ba 01       	movw	r22, r20
     738:	80 ec       	ldi	r24, 0xC0	; 192
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	eeprom_write_dword(SCORE_TWO, 0x00);
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	ba 01       	movw	r22, r20
     746:	80 ee       	ldi	r24, 0xE0	; 224
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	eeprom_write_dword(SCORE_THREE, 0x00);
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	ba 01       	movw	r22, r20
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	eeprom_write_dword(SCORE_FOUR, 0x00);
     75c:	40 e0       	ldi	r20, 0x00	; 0
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	ba 01       	movw	r22, r20
     762:	80 e2       	ldi	r24, 0x20	; 32
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	eeprom_write_dword(SCORE_FIVE, 0x00);
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	ba 01       	movw	r22, r20
     770:	80 e4       	ldi	r24, 0x40	; 64
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	reset_name_at_memory_position(NAME_ONE);
     778:	80 e2       	ldi	r24, 0x20	; 32
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 86 03 	call	0x70c	; 0x70c <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_TWO);
     780:	80 e4       	ldi	r24, 0x40	; 64
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 86 03 	call	0x70c	; 0x70c <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_THREE);
     788:	80 e6       	ldi	r24, 0x60	; 96
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	0e 94 86 03 	call	0x70c	; 0x70c <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FOUR);
     790:	80 e8       	ldi	r24, 0x80	; 128
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 86 03 	call	0x70c	; 0x70c <reset_name_at_memory_position>
	reset_name_at_memory_position(NAME_FIVE);
     798:	80 ea       	ldi	r24, 0xA0	; 160
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 86 03 	call	0x70c	; 0x70c <reset_name_at_memory_position>
	eeprom_write_byte(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     7a0:	67 ee       	ldi	r22, 0xE7	; 231
     7a2:	80 e6       	ldi	r24, 0x60	; 96
     7a4:	91 e0       	ldi	r25, 0x01	; 1
     7a6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
     7aa:	08 95       	ret

000007ac <EEPROM_High_Score_has_been_initialised>:
	eeprom_write_byte(mem_pos+0x10, UNDERSCORE);
}


int EEPROM_High_Score_has_been_initialised(void){
	uint8_t current_signature = eeprom_read_byte(HIGHSCORE_SIGNATURE_MEMORY);
     7ac:	80 e6       	ldi	r24, 0x60	; 96
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
	return (current_signature == HIGHSCORE_SIGNATURE);
     7b4:	21 e0       	ldi	r18, 0x01	; 1
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	87 3e       	cpi	r24, 0xE7	; 231
     7ba:	11 f0       	breq	.+4      	; 0x7c0 <EEPROM_High_Score_has_been_initialised+0x14>
     7bc:	20 e0       	ldi	r18, 0x00	; 0
     7be:	30 e0       	ldi	r19, 0x00	; 0
}
     7c0:	c9 01       	movw	r24, r18
     7c2:	08 95       	ret

000007c4 <is_high_score>:
#include <avr/eeprom.h>
#include "terminalio.h"


static char current_high_score_name[4]; 
uint8_t is_high_score(void){
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
	return (get_score() >= eeprom_read_dword(SCORE_FIVE)) || !(EEPROM_High_Score_has_been_initialised()) ;
     7cc:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     7d0:	6b 01       	movw	r12, r22
     7d2:	7c 01       	movw	r14, r24
     7d4:	80 e4       	ldi	r24, 0x40	; 64
     7d6:	91 e0       	ldi	r25, 0x01	; 1
     7d8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     7dc:	c6 16       	cp	r12, r22
     7de:	d7 06       	cpc	r13, r23
     7e0:	e8 06       	cpc	r14, r24
     7e2:	f9 06       	cpc	r15, r25
     7e4:	40 f4       	brcc	.+16     	; 0x7f6 <is_high_score+0x32>
     7e6:	0e 94 d6 03 	call	0x7ac	; 0x7ac <EEPROM_High_Score_has_been_initialised>
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	89 2b       	or	r24, r25
     7ee:	09 f0       	breq	.+2      	; 0x7f2 <is_high_score+0x2e>
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	82 2f       	mov	r24, r18
     7f4:	01 c0       	rjmp	.+2      	; 0x7f8 <is_high_score+0x34>
     7f6:	81 e0       	ldi	r24, 0x01	; 1
}
     7f8:	ff 90       	pop	r15
     7fa:	ef 90       	pop	r14
     7fc:	df 90       	pop	r13
     7fe:	cf 90       	pop	r12
     800:	08 95       	ret

00000802 <high_score_position>:
		case SCORE_TWO: return NAME_TWO; break;
		case SCORE_ONE: return NAME_ONE; break;
	}
}

uint16_t high_score_position(void){
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
	if (!(EEPROM_High_Score_has_been_initialised())){
     80a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <EEPROM_High_Score_has_been_initialised>
     80e:	89 2b       	or	r24, r25
     810:	09 f4       	brne	.+2      	; 0x814 <high_score_position+0x12>
     812:	42 c0       	rjmp	.+132    	; 0x898 <high_score_position+0x96>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
     814:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     818:	6b 01       	movw	r12, r22
     81a:	7c 01       	movw	r14, r24
     81c:	80 ec       	ldi	r24, 0xC0	; 192
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     824:	6c 15       	cp	r22, r12
     826:	7d 05       	cpc	r23, r13
     828:	8e 05       	cpc	r24, r14
     82a:	9f 05       	cpc	r25, r15
     82c:	c0 f1       	brcs	.+112    	; 0x89e <high_score_position+0x9c>
		return SCORE_ONE;
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
     82e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     832:	6b 01       	movw	r12, r22
     834:	7c 01       	movw	r14, r24
     836:	80 ee       	ldi	r24, 0xE0	; 224
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     83e:	6c 15       	cp	r22, r12
     840:	7d 05       	cpc	r23, r13
     842:	8e 05       	cpc	r24, r14
     844:	9f 05       	cpc	r25, r15
     846:	70 f1       	brcs	.+92     	; 0x8a4 <high_score_position+0xa2>
		return SCORE_TWO;
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
     848:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     84c:	6b 01       	movw	r12, r22
     84e:	7c 01       	movw	r14, r24
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     858:	6c 15       	cp	r22, r12
     85a:	7d 05       	cpc	r23, r13
     85c:	8e 05       	cpc	r24, r14
     85e:	9f 05       	cpc	r25, r15
     860:	20 f1       	brcs	.+72     	; 0x8aa <high_score_position+0xa8>
		return SCORE_THREE;
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
     862:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     866:	6b 01       	movw	r12, r22
     868:	7c 01       	movw	r14, r24
     86a:	80 e2       	ldi	r24, 0x20	; 32
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     872:	6c 15       	cp	r22, r12
     874:	7d 05       	cpc	r23, r13
     876:	8e 05       	cpc	r24, r14
     878:	9f 05       	cpc	r25, r15
     87a:	d0 f0       	brcs	.+52     	; 0x8b0 <high_score_position+0xae>
		return SCORE_FOUR;
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
     87c:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     880:	6b 01       	movw	r12, r22
     882:	7c 01       	movw	r14, r24
     884:	80 e4       	ldi	r24, 0x40	; 64
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     88c:	6c 15       	cp	r22, r12
     88e:	7d 05       	cpc	r23, r13
     890:	8e 05       	cpc	r24, r14
     892:	9f 05       	cpc	r25, r15
     894:	80 f0       	brcs	.+32     	; 0x8b6 <high_score_position+0xb4>
		return SCORE_FIVE;
	}
}
     896:	11 c0       	rjmp	.+34     	; 0x8ba <high_score_position+0xb8>
	}
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return SCORE_ONE;
     898:	80 ec       	ldi	r24, 0xC0	; 192
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	0e c0       	rjmp	.+28     	; 0x8ba <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_ONE)){
		return SCORE_ONE;
     89e:	80 ec       	ldi	r24, 0xC0	; 192
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	0b c0       	rjmp	.+22     	; 0x8ba <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_TWO)){
		return SCORE_TWO;
     8a4:	80 ee       	ldi	r24, 0xE0	; 224
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	08 c0       	rjmp	.+16     	; 0x8ba <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_THREE)){
		return SCORE_THREE;
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	05 c0       	rjmp	.+10     	; 0x8ba <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FOUR)){
		return SCORE_FOUR;
     8b0:	80 e2       	ldi	r24, 0x20	; 32
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <high_score_position+0xb8>
	}
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
     8b6:	80 e4       	ldi	r24, 0x40	; 64
     8b8:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     8ba:	ff 90       	pop	r15
     8bc:	ef 90       	pop	r14
     8be:	df 90       	pop	r13
     8c0:	cf 90       	pop	r12
     8c2:	08 95       	ret

000008c4 <handle_sequence_into_EEPFROM>:
				handle_sequence_into_EEPFROM();
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     8c4:	cf 92       	push	r12
     8c6:	df 92       	push	r13
     8c8:	ef 92       	push	r14
     8ca:	ff 92       	push	r15
     8cc:	1f 93       	push	r17
     8ce:	cf 93       	push	r28
     8d0:	df 93       	push	r29
	eeprom_write_byte(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     8d2:	67 ee       	ldi	r22, 0xE7	; 231
     8d4:	80 e6       	ldi	r24, 0x60	; 96
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	switch(high_score_position()){
     8dc:	0e 94 01 04 	call	0x802	; 0x802 <high_score_position>
     8e0:	80 3e       	cpi	r24, 0xE0	; 224
     8e2:	91 05       	cpc	r25, r1
     8e4:	91 f0       	breq	.+36     	; 0x90a <__stack+0xb>
     8e6:	20 f4       	brcc	.+8      	; 0x8f0 <handle_sequence_into_EEPFROM+0x2c>
     8e8:	80 3c       	cpi	r24, 0xC0	; 192
     8ea:	91 05       	cpc	r25, r1
     8ec:	89 f0       	breq	.+34     	; 0x910 <__stack+0x11>
     8ee:	12 c0       	rjmp	.+36     	; 0x914 <__stack+0x15>
     8f0:	81 15       	cp	r24, r1
     8f2:	21 e0       	ldi	r18, 0x01	; 1
     8f4:	92 07       	cpc	r25, r18
     8f6:	31 f0       	breq	.+12     	; 0x904 <__stack+0x5>
     8f8:	80 32       	cpi	r24, 0x20	; 32
     8fa:	91 40       	sbci	r25, 0x01	; 1
     8fc:	59 f4       	brne	.+22     	; 0x914 <__stack+0x15>
		case SCORE_FOUR: move_four_place_down(); break; 
     8fe:	0e 94 64 03 	call	0x6c8	; 0x6c8 <move_four_place_down>
     902:	08 c0       	rjmp	.+16     	; 0x914 <__stack+0x15>
		case SCORE_THREE: move_three_place_down(); break; 
     904:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <move_three_place_down>
     908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0x15>
		case SCORE_TWO: move_two_place_down(); break;
     90a:	0e 94 74 03 	call	0x6e8	; 0x6e8 <move_two_place_down>
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0x15>
		case SCORE_ONE: move_one_place_down(); break; 
     910:	0e 94 7d 03 	call	0x6fa	; 0x6fa <move_one_place_down>
	}
	
	eeprom_write_dword(high_score_position(), get_score());
     914:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
     918:	6b 01       	movw	r12, r22
     91a:	7c 01       	movw	r14, r24
     91c:	0e 94 01 04 	call	0x802	; 0x802 <high_score_position>
     920:	b7 01       	movw	r22, r14
     922:	a6 01       	movw	r20, r12
     924:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <eeprom_write_dword>
	eeprom_write_byte(high_score_name_position(high_score_position()), current_high_score_name[0]);
     928:	ca e1       	ldi	r28, 0x1A	; 26
     92a:	d2 e0       	ldi	r29, 0x02	; 2
     92c:	18 81       	ld	r17, Y
     92e:	0e 94 01 04 	call	0x802	; 0x802 <high_score_position>
     932:	0e 94 00 03 	call	0x600	; 0x600 <high_score_name_position>
     936:	61 2f       	mov	r22, r17
     938:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x08, current_high_score_name[1]);
     93c:	19 81       	ldd	r17, Y+1	; 0x01
     93e:	0e 94 01 04 	call	0x802	; 0x802 <high_score_position>
     942:	0e 94 00 03 	call	0x600	; 0x600 <high_score_name_position>
     946:	61 2f       	mov	r22, r17
     948:	08 96       	adiw	r24, 0x08	; 8
     94a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	eeprom_write_byte(high_score_name_position(high_score_position()) +0x10, current_high_score_name[2]);
     94e:	ca 81       	ldd	r28, Y+2	; 0x02
     950:	0e 94 01 04 	call	0x802	; 0x802 <high_score_position>
     954:	0e 94 00 03 	call	0x600	; 0x600 <high_score_name_position>
     958:	6c 2f       	mov	r22, r28
     95a:	40 96       	adiw	r24, 0x10	; 16
     95c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
	
	clear_terminal();
     960:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_terminal>
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	ff 90       	pop	r15
     96c:	ef 90       	pop	r14
     96e:	df 90       	pop	r13
     970:	cf 90       	pop	r12
     972:	08 95       	ret

00000974 <set_high_score_name>:
	if (get_score() > eeprom_read_dword(SCORE_FIVE)){
		return SCORE_FIVE;
	}
}

void set_high_score_name(void){
     974:	ef 92       	push	r14
     976:	ff 92       	push	r15
     978:	0f 93       	push	r16
     97a:	1f 93       	push	r17
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
	move_cursor(10,8);
     980:	68 e0       	ldi	r22, 0x08	; 8
     982:	8a e0       	ldi	r24, 0x0A	; 10
     984:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     988:	82 e3       	ldi	r24, 0x32	; 50
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	9f 93       	push	r25
     98e:	8f 93       	push	r24
     990:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     998:	00 e0       	ldi	r16, 0x00	; 0
     99a:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     99c:	0f 2e       	mov	r0, r31
     99e:	ff e8       	ldi	r31, 0x8F	; 143
     9a0:	ef 2e       	mov	r14, r31
     9a2:	f3 e0       	ldi	r31, 0x03	; 3
     9a4:	ff 2e       	mov	r15, r31
     9a6:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     9a8:	0e 94 0a 10 	call	0x2014	; 0x2014 <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     9ac:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <serial_input_available>
     9b0:	88 23       	and	r24, r24
     9b2:	d1 f3       	breq	.-12     	; 0x9a8 <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     9b4:	f7 01       	movw	r30, r14
     9b6:	80 81       	ld	r24, Z
     9b8:	91 81       	ldd	r25, Z+1	; 0x01
     9ba:	0e 94 98 13 	call	0x2730	; 0x2730 <fgetc>
     9be:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=3){
     9c0:	98 2f       	mov	r25, r24
     9c2:	91 54       	subi	r25, 0x41	; 65
     9c4:	9a 33       	cpi	r25, 0x3A	; 58
     9c6:	98 f4       	brcc	.+38     	; 0x9ee <set_high_score_name+0x7a>
     9c8:	04 30       	cpi	r16, 0x04	; 4
     9ca:	11 05       	cpc	r17, r1
     9cc:	84 f4       	brge	.+32     	; 0x9ee <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     9ce:	69 e0       	ldi	r22, 0x09	; 9
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	80 0f       	add	r24, r16
     9d4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     9d8:	f8 01       	movw	r30, r16
     9da:	e6 5e       	subi	r30, 0xE6	; 230
     9dc:	fd 4f       	sbci	r31, 0xFD	; 253
     9de:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     9e0:	ce 01       	movw	r24, r28
     9e2:	99 27       	eor	r25, r25
     9e4:	0e 94 12 14 	call	0x2824	; 0x2824 <putchar>
				score_name_pointer++;
     9e8:	0f 5f       	subi	r16, 0xFF	; 255
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	dd cf       	rjmp	.-70     	; 0x9a8 <set_high_score_name+0x34>
			}else if(serial_input =='\n'){
     9ee:	8a 30       	cpi	r24, 0x0A	; 10
     9f0:	89 f0       	breq	.+34     	; 0xa14 <set_high_score_name+0xa0>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     9f2:	8f 37       	cpi	r24, 0x7F	; 127
     9f4:	c9 f6       	brne	.-78     	; 0x9a8 <set_high_score_name+0x34>
				printf("%c", ' ');
     9f6:	80 e2       	ldi	r24, 0x20	; 32
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 12 14 	call	0x2824	; 0x2824 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     9fe:	10 16       	cp	r1, r16
     a00:	11 06       	cpc	r1, r17
     a02:	14 f4       	brge	.+4      	; 0xa08 <set_high_score_name+0x94>
     a04:	01 50       	subi	r16, 0x01	; 1
     a06:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     a08:	69 e0       	ldi	r22, 0x09	; 9
     a0a:	8a e0       	ldi	r24, 0x0A	; 10
     a0c:	80 0f       	add	r24, r16
     a0e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
     a12:	ca cf       	rjmp	.-108    	; 0x9a8 <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     a14:	f9 99       	sbic	0x1f, 1	; 31
     a16:	fe cf       	rjmp	.-4      	; 0xa14 <set_high_score_name+0xa0>
				handle_sequence_into_EEPFROM();
     a18:	0e 94 62 04 	call	0x8c4	; 0x8c4 <handle_sequence_into_EEPFROM>
				break; 
			}
		}
	}
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	08 95       	ret

00000a2a <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint8_t current_signature = eeprom_read_byte(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     a2a:	ef 92       	push	r14
     a2c:	ff 92       	push	r15
     a2e:	0f 93       	push	r16
     a30:	1f 93       	push	r17
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
	move_cursor(10,11);
     a36:	6b e0       	ldi	r22, 0x0B	; 11
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     a3e:	8c e7       	ldi	r24, 0x7C	; 124
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	9f 93       	push	r25
     a44:	8f 93       	push	r24
     a46:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
	move_cursor(10,13);
     a4a:	6d e0       	ldi	r22, 0x0D	; 13
     a4c:	8a e0       	ldi	r24, 0x0A	; 10
     a4e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     a52:	0e 94 d6 03 	call	0x7ac	; 0x7ac <EEPROM_High_Score_has_been_initialised>
     a56:	0f 90       	pop	r0
     a58:	0f 90       	pop	r0
     a5a:	89 2b       	or	r24, r25
     a5c:	09 f4       	brne	.+2      	; 0xa60 <display_EEPROM_high_score+0x36>
     a5e:	df c0       	rjmp	.+446    	; 0xc1e <display_EEPROM_high_score+0x1f4>

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     a60:	80 ec       	ldi	r24, 0xC0	; 192
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     a68:	16 2f       	mov	r17, r22
     a6a:	07 2f       	mov	r16, r23
     a6c:	f8 2e       	mov	r15, r24
     a6e:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
     a70:	80 e3       	ldi	r24, 0x30	; 48
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     a78:	d8 2f       	mov	r29, r24
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
									eeprom_read_byte(NAME_ONE+0x08), 
     a7a:	88 e2       	ldi	r24, 0x28	; 40
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     a82:	c8 2f       	mov	r28, r24
	printf_P(PSTR("###HIGH SCORES###"));
	move_cursor(10,13);
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){

		printf("First: %c%c%c %d", eeprom_read_byte(NAME_ONE), 
     a84:	80 e2       	ldi	r24, 0x20	; 32
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     a8c:	ef 92       	push	r14
     a8e:	ff 92       	push	r15
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	1f 92       	push	r1
     a96:	df 93       	push	r29
     a98:	1f 92       	push	r1
     a9a:	cf 93       	push	r28
     a9c:	1f 92       	push	r1
     a9e:	8f 93       	push	r24
     aa0:	8b e6       	ldi	r24, 0x6B	; 107
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
     aac:	6e e0       	ldi	r22, 0x0E	; 14
     aae:	8a e0       	ldi	r24, 0x0A	; 10
     ab0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     ab4:	80 ee       	ldi	r24, 0xE0	; 224
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     abc:	16 2f       	mov	r17, r22
     abe:	07 2f       	mov	r16, r23
     ac0:	f8 2e       	mov	r15, r24
     ac2:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
     ac4:	80 e5       	ldi	r24, 0x50	; 80
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     acc:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
									eeprom_read_byte(NAME_TWO+0x08),
     ace:	88 e4       	ldi	r24, 0x48	; 72
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     ad6:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_ONE+0x08), 
									eeprom_read_byte(NAME_ONE+0x10), 
									eeprom_read_dword(SCORE_ONE));
		move_cursor(10,14);					
		
		printf("Second: %c%c%c %d", eeprom_read_byte(NAME_TWO),
     ad8:	80 e4       	ldi	r24, 0x40	; 64
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	1f 92       	push	r1
     aea:	df 93       	push	r29
     aec:	1f 92       	push	r1
     aee:	cf 93       	push	r28
     af0:	1f 92       	push	r1
     af2:	8f 93       	push	r24
     af4:	8c e7       	ldi	r24, 0x7C	; 124
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	9f 93       	push	r25
     afa:	8f 93       	push	r24
     afc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);
     b00:	6f e0       	ldi	r22, 0x0F	; 15
     b02:	8a e0       	ldi	r24, 0x0A	; 10
     b04:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     b10:	16 2f       	mov	r17, r22
     b12:	07 2f       	mov	r16, r23
     b14:	f8 2e       	mov	r15, r24
     b16:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
     b18:	80 e7       	ldi	r24, 0x70	; 112
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     b20:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
									eeprom_read_byte(NAME_THREE +8),
     b22:	88 e6       	ldi	r24, 0x68	; 104
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     b2a:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_TWO+0x08),
									eeprom_read_byte(NAME_TWO+0x10),
									eeprom_read_dword(SCORE_TWO));
		move_cursor(10,15);

		printf("Third: %c%c%c %d", eeprom_read_byte(NAME_THREE),
     b2c:	80 e6       	ldi	r24, 0x60	; 96
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     b34:	ef 92       	push	r14
     b36:	ff 92       	push	r15
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	1f 92       	push	r1
     b3e:	df 93       	push	r29
     b40:	1f 92       	push	r1
     b42:	cf 93       	push	r28
     b44:	1f 92       	push	r1
     b46:	8f 93       	push	r24
     b48:	8e e8       	ldi	r24, 0x8E	; 142
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	9f 93       	push	r25
     b4e:	8f 93       	push	r24
     b50:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);
     b54:	8d b7       	in	r24, 0x3d	; 61
     b56:	9e b7       	in	r25, 0x3e	; 62
     b58:	84 96       	adiw	r24, 0x24	; 36
     b5a:	0f b6       	in	r0, 0x3f	; 63
     b5c:	f8 94       	cli
     b5e:	9e bf       	out	0x3e, r25	; 62
     b60:	0f be       	out	0x3f, r0	; 63
     b62:	8d bf       	out	0x3d, r24	; 61
     b64:	60 e1       	ldi	r22, 0x10	; 16
     b66:	8a e0       	ldi	r24, 0x0A	; 10
     b68:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     b6c:	80 e2       	ldi	r24, 0x20	; 32
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     b74:	16 2f       	mov	r17, r22
     b76:	07 2f       	mov	r16, r23
     b78:	f8 2e       	mov	r15, r24
     b7a:	e9 2e       	mov	r14, r25
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
     b7c:	80 e9       	ldi	r24, 0x90	; 144
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     b84:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
									eeprom_read_byte(NAME_FOUR+8),
     b86:	88 e8       	ldi	r24, 0x88	; 136
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     b8e:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_THREE +8),
									eeprom_read_byte(NAME_THREE + 16),
									eeprom_read_dword(SCORE_THREE));
		move_cursor(10,16);

		printf("Four: %c%c%c %d \n", eeprom_read_byte(NAME_FOUR),
     b90:	80 e8       	ldi	r24, 0x80	; 128
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     b98:	ef 92       	push	r14
     b9a:	ff 92       	push	r15
     b9c:	0f 93       	push	r16
     b9e:	1f 93       	push	r17
     ba0:	1f 92       	push	r1
     ba2:	df 93       	push	r29
     ba4:	1f 92       	push	r1
     ba6:	cf 93       	push	r28
     ba8:	1f 92       	push	r1
     baa:	8f 93       	push	r24
     bac:	8f e9       	ldi	r24, 0x9F	; 159
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	9f 93       	push	r25
     bb2:	8f 93       	push	r24
     bb4:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);
     bb8:	61 e1       	ldi	r22, 0x11	; 17
     bba:	8a e0       	ldi	r24, 0x0A	; 10
     bbc:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <eeprom_read_dword>
     bc8:	16 2f       	mov	r17, r22
     bca:	07 2f       	mov	r16, r23
     bcc:	f8 2e       	mov	r15, r24
     bce:	e9 2e       	mov	r14, r25
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
     bd0:	80 eb       	ldi	r24, 0xB0	; 176
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     bd8:	d8 2f       	mov	r29, r24
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
								eeprom_read_byte(NAME_FIVE+8),
     bda:	88 ea       	ldi	r24, 0xA8	; 168
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     be2:	c8 2f       	mov	r28, r24
									eeprom_read_byte(NAME_FOUR+8),
									eeprom_read_byte(NAME_FOUR+16),
									eeprom_read_dword(SCORE_FOUR));
		move_cursor(10,17);

		printf("Five: %c%c%c %d", eeprom_read_byte(NAME_FIVE),
     be4:	80 ea       	ldi	r24, 0xA0	; 160
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <eeprom_read_byte>
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	1f 92       	push	r1
     bf6:	df 93       	push	r29
     bf8:	1f 92       	push	r1
     bfa:	cf 93       	push	r28
     bfc:	1f 92       	push	r1
     bfe:	8f 93       	push	r24
     c00:	81 eb       	ldi	r24, 0xB1	; 177
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	9f 93       	push	r25
     c06:	8f 93       	push	r24
     c08:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
     c0c:	8d b7       	in	r24, 0x3d	; 61
     c0e:	9e b7       	in	r25, 0x3e	; 62
     c10:	48 96       	adiw	r24, 0x18	; 24
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	9e bf       	out	0x3e, r25	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	8d bf       	out	0x3d, r24	; 61
     c1c:	0a c0       	rjmp	.+20     	; 0xc32 <display_EEPROM_high_score+0x208>
								eeprom_read_byte(NAME_FIVE+8),
								eeprom_read_byte(NAME_FIVE+16),
								eeprom_read_dword(SCORE_FIVE));
	}
	else{
		initialise_EEPROM();
     c1e:	0e 94 99 03 	call	0x732	; 0x732 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     c22:	81 ec       	ldi	r24, 0xC1	; 193
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
     c2e:	0f 90       	pop	r0
     c30:	0f 90       	pop	r0
	}

}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	1f 91       	pop	r17
     c38:	0f 91       	pop	r16
     c3a:	ff 90       	pop	r15
     c3c:	ef 90       	pop	r14
     c3e:	08 95       	ret

00000c40 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     c40:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <numFoodItems>
     c44:	08 95       	ret

00000c46 <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     c46:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <numFoodItems>
     c4a:	13 16       	cp	r1, r19
     c4c:	84 f4       	brge	.+32     	; 0xc6e <food_at+0x28>
        if(foodPositions[id] == posn) {
     c4e:	90 91 70 02 	lds	r25, 0x0270	; 0x800270 <foodPositions>
     c52:	89 17       	cp	r24, r25
     c54:	71 f0       	breq	.+28     	; 0xc72 <food_at+0x2c>
     c56:	e1 e7       	ldi	r30, 0x71	; 113
     c58:	f2 e0       	ldi	r31, 0x02	; 2
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <food_at+0x1e>
     c5e:	21 91       	ld	r18, Z+
     c60:	28 17       	cp	r18, r24
     c62:	49 f0       	breq	.+18     	; 0xc76 <food_at+0x30>
     c64:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     c66:	39 13       	cpse	r19, r25
     c68:	fa cf       	rjmp	.-12     	; 0xc5e <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	08 95       	ret
     c6e:	8f ef       	ldi	r24, 0xFF	; 255
     c70:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	08 95       	ret
     c76:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     c78:	08 95       	ret

00000c7a <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     c7a:	0e 94 23 06 	call	0xc46	; 0xc46 <food_at>
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	8f 3f       	cpi	r24, 0xFF	; 255
     c82:	09 f4       	brne	.+2      	; 0xc86 <is_food_at+0xc>
     c84:	90 e0       	ldi	r25, 0x00	; 0
}
     c86:	89 2f       	mov	r24, r25
     c88:	08 95       	ret

00000c8a <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     c8a:	ff 92       	push	r15
     c8c:	0f 93       	push	r16
     c8e:	1f 93       	push	r17
     c90:	cf 93       	push	r28
     c92:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     c94:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <numFoodItems>
     c98:	88 30       	cpi	r24, 0x08	; 8
     c9a:	0c f0       	brlt	.+2      	; 0xc9e <add_food_item+0x14>
     c9c:	44 c0       	rjmp	.+136    	; 0xd26 <add_food_item+0x9c>
     c9e:	00 e0       	ldi	r16, 0x00	; 0
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	d0 e0       	ldi	r29, 0x00	; 0
     ca4:	c0 e0       	ldi	r28, 0x00	; 0
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <add_food_item+0x22>
     ca8:	0f 5f       	subi	r16, 0xFF	; 255
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     cac:	2c 2f       	mov	r18, r28
     cae:	cc 0f       	add	r28, r28
     cb0:	33 0b       	sbc	r19, r19
     cb2:	2d 5f       	subi	r18, 0xFD	; 253
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	20 0f       	add	r18, r16
     cb8:	31 1f       	adc	r19, r17
     cba:	2f 70       	andi	r18, 0x0F	; 15
     cbc:	30 78       	andi	r19, 0x80	; 128
     cbe:	33 23       	and	r19, r19
     cc0:	34 f4       	brge	.+12     	; 0xcce <add_food_item+0x44>
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	31 09       	sbc	r19, r1
     cc6:	20 6f       	ori	r18, 0xF0	; 240
     cc8:	3f 6f       	ori	r19, 0xFF	; 255
     cca:	2f 5f       	subi	r18, 0xFF	; 255
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	82 2f       	mov	r24, r18
     cd0:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     cd2:	6d 2f       	mov	r22, r29
     cd4:	dd 0f       	add	r29, r29
     cd6:	77 0b       	sbc	r23, r23
     cd8:	6b 5f       	subi	r22, 0xFB	; 251
     cda:	7f 4f       	sbci	r23, 0xFF	; 255
     cdc:	67 70       	andi	r22, 0x07	; 7
     cde:	70 78       	andi	r23, 0x80	; 128
     ce0:	77 23       	and	r23, r23
     ce2:	34 f4       	brge	.+12     	; 0xcf0 <add_food_item+0x66>
     ce4:	61 50       	subi	r22, 0x01	; 1
     ce6:	71 09       	sbc	r23, r1
     ce8:	68 6f       	ori	r22, 0xF8	; 248
     cea:	7f 6f       	ori	r23, 0xFF	; 255
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     cf2:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
     cf6:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     cf8:	03 36       	cpi	r16, 0x63	; 99
     cfa:	11 05       	cpc	r17, r1
     cfc:	b1 f0       	breq	.+44     	; 0xd2a <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     cfe:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     d02:	81 11       	cpse	r24, r1
     d04:	d1 cf       	rjmp	.-94     	; 0xca8 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     d06:	8f 2d       	mov	r24, r15
     d08:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_food_at>
     d0c:	81 11       	cpse	r24, r1
     d0e:	cc cf       	rjmp	.-104    	; 0xca8 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     d10:	8f 2d       	mov	r24, r15
     d12:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <is_superfood_at>
     d16:	81 11       	cpse	r24, r1
     d18:	c7 cf       	rjmp	.-114    	; 0xca8 <add_food_item+0x1e>
     d1a:	8f 2d       	mov	r24, r15
     d1c:	0e 94 b7 0a 	call	0x156e	; 0x156e <is_rat_at>
     d20:	81 11       	cpse	r24, r1
     d22:	c2 cf       	rjmp	.-124    	; 0xca8 <add_food_item+0x1e>
     d24:	04 c0       	rjmp	.+8      	; 0xd2e <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     d2a:	88 e0       	ldi	r24, 0x08	; 8
     d2c:	0d c0       	rjmp	.+26     	; 0xd48 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     d2e:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <numFoodItems>
	foodPositions[newFoodID] = test_position;
     d32:	e8 2f       	mov	r30, r24
     d34:	08 2e       	mov	r0, r24
     d36:	00 0c       	add	r0, r0
     d38:	ff 0b       	sbc	r31, r31
     d3a:	e0 59       	subi	r30, 0x90	; 144
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	f0 82       	st	Z, r15
	numFoodItems++;
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     d46:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	08 95       	ret

00000d54 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     d54:	e8 2f       	mov	r30, r24
     d56:	88 0f       	add	r24, r24
     d58:	ff 0b       	sbc	r31, r31
     d5a:	e0 59       	subi	r30, 0x90	; 144
     d5c:	fd 4f       	sbci	r31, 0xFD	; 253
}
     d5e:	80 81       	ld	r24, Z
     d60:	08 95       	ret

00000d62 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     d62:	88 23       	and	r24, r24
     d64:	b4 f0       	brlt	.+44     	; 0xd92 <remove_food+0x30>
     d66:	20 91 6f 02 	lds	r18, 0x026F	; 0x80026f <numFoodItems>
     d6a:	82 17       	cp	r24, r18
     d6c:	94 f4       	brge	.+36     	; 0xd92 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	82 17       	cp	r24, r18
     d72:	64 f4       	brge	.+24     	; 0xd8c <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     d74:	e8 2f       	mov	r30, r24
     d76:	08 2e       	mov	r0, r24
     d78:	00 0c       	add	r0, r0
     d7a:	ff 0b       	sbc	r31, r31
     d7c:	e0 59       	subi	r30, 0x90	; 144
     d7e:	fd 4f       	sbci	r31, 0xFD	; 253
     d80:	90 81       	ld	r25, Z
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	90 83       	st	Z, r25
     d86:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     d88:	82 17       	cp	r24, r18
     d8a:	a4 f3       	brlt	.-24     	; 0xd74 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     d8c:	21 50       	subi	r18, 0x01	; 1
     d8e:	20 93 6f 02 	sts	0x026F, r18	; 0x80026f <numFoodItems>
     d92:	08 95       	ret

00000d94 <update_display_at_position>:
#define FOOD_COLOUR			COLOUR_LIGHT_YELLOW
#define BACKGROUND_COLOUR	COLOUR_BLACK
#define SUPERFOOD_COLOUR    COLOUR_ORANGE

// Helper function
void update_display_at_position(PosnType posn, PixelColour colour) {
     d94:	1f 93       	push	r17
     d96:	cf 93       	push	r28
     d98:	df 93       	push	r29
     d9a:	c8 2f       	mov	r28, r24
     d9c:	16 2f       	mov	r17, r22
	ledmatrix_update_pixel(x_position(posn), y_position(posn), colour);
     d9e:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
     da2:	d8 2f       	mov	r29, r24
     da4:	8c 2f       	mov	r24, r28
     da6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
     daa:	41 2f       	mov	r20, r17
     dac:	6d 2f       	mov	r22, r29
     dae:	0e 94 9b 07 	call	0xf36	; 0xf36 <ledmatrix_update_pixel>
}
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	08 95       	ret

00000dba <init_game>:

// Initialise game. This initialises the board with snake and food items 
// and puts them on the display.
void init_game(void) {
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
	// Clear display
	ledmatrix_clear();
     dbe:	0e 94 de 07 	call	0xfbc	; 0xfbc <ledmatrix_clear>
	init_score_on_terminal();
     dc2:	0e 94 34 10 	call	0x2068	; 0x2068 <init_score_on_terminal>

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
     dc6:	88 e5       	ldi	r24, 0x58	; 88
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
     dce:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
void init_game(void) {
	// Clear display
	ledmatrix_clear();
	init_score_on_terminal();
	reset_game_speed();
	add_new_rat_position();
     dd2:	0e 94 be 0a 	call	0x157c	; 0x157c <add_new_rat_position>
	initialise_timer_one();
     dd6:	0e 94 13 11 	call	0x2226	; 0x2226 <initialise_timer_one>
	play_start_game_sound_effect();
     dda:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
	// Initialise the snake and display it. We know the initial snake is only
	// of length two so we can just retrieve the tail and head positions
	init_snake();
     dde:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <init_snake>
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
     de2:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <get_snake_head_position>
     de6:	6f e0       	ldi	r22, 0x0F	; 15
     de8:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
     dec:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <get_snake_tail_position>
     df0:	60 ef       	ldi	r22, 0xF0	; 240
     df2:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
	
	// Initialise our food store, then add three items of food and display them
	init_food();
     df6:	0e 94 20 06 	call	0xc40	; 0xc40 <init_food>
     dfa:	c3 e0       	ldi	r28, 0x03	; 3
	for(int8_t i = 0; i < 3; i++) {
		PosnType food_position = add_food_item();
     dfc:	0e 94 45 06 	call	0xc8a	; 0xc8a <add_food_item>
     e00:	d8 2f       	mov	r29, r24
		if(is_position_valid(food_position)) {
     e02:	0e 94 e7 07 	call	0xfce	; 0xfce <is_position_valid>
     e06:	88 23       	and	r24, r24
     e08:	21 f0       	breq	.+8      	; 0xe12 <init_game+0x58>
			update_display_at_position(food_position, FOOD_COLOUR);
     e0a:	63 e3       	ldi	r22, 0x33	; 51
     e0c:	8d 2f       	mov	r24, r29
     e0e:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
     e12:	c1 50       	subi	r28, 0x01	; 1
	update_display_at_position(get_snake_head_position(), SNAKE_HEAD_COLOUR);
	update_display_at_position(get_snake_tail_position(), SNAKE_BODY_COLOUR);
	
	// Initialise our food store, then add three items of food and display them
	init_food();
	for(int8_t i = 0; i < 3; i++) {
     e14:	99 f7       	brne	.-26     	; 0xdfc <init_game+0x42>
		PosnType food_position = add_food_item();
		if(is_position_valid(food_position)) {
			update_display_at_position(food_position, FOOD_COLOUR);
		}
	}	
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	08 95       	ret

00000e1c <increase_game_speed>:
		current_speed *= 0.90;
	}
}

int get_current_game_speed(void){
	return current_speed;
     e1c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
     e20:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>

	return 1;
}

void increase_game_speed(void){
	if (get_current_game_speed()>250){
     e24:	8b 3f       	cpi	r24, 0xFB	; 251
     e26:	91 05       	cpc	r25, r1
     e28:	a4 f0       	brlt	.+40     	; 0xe52 <increase_game_speed+0x36>
		current_speed *= 0.90;
     e2a:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
     e2e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	0e 94 5e 11 	call	0x22bc	; 0x22bc <__floatunsisf>
     e3a:	26 e6       	ldi	r18, 0x66	; 102
     e3c:	36 e6       	ldi	r19, 0x66	; 102
     e3e:	46 e6       	ldi	r20, 0x66	; 102
     e40:	5f e3       	ldi	r21, 0x3F	; 63
     e42:	0e 94 c4 11 	call	0x2388	; 0x2388 <__mulsf3>
     e46:	0e 94 2f 11 	call	0x225e	; 0x225e <__fixunssfsi>
     e4a:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
     e4e:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
     e52:	08 95       	ret

00000e54 <attempt_to_move_snake_forward>:
		}
	}	
}

// Attempt to move snake forward. Returns true if successful, false otherwise
int8_t attempt_to_move_snake_forward(void) {
     e54:	0f 93       	push	r16
     e56:	1f 93       	push	r17
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
	PosnType prior_head_position = get_snake_head_position();
     e5c:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <get_snake_head_position>
     e60:	d8 2f       	mov	r29, r24
	int8_t move_result = advance_snake_head();
     e62:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <advance_snake_head>
     e66:	c8 2f       	mov	r28, r24
	if(move_result < 0) {
     e68:	88 23       	and	r24, r24
     e6a:	0c f4       	brge	.+2      	; 0xe6e <attempt_to_move_snake_forward+0x1a>
     e6c:	55 c0       	rjmp	.+170    	; 0xf18 <attempt_to_move_snake_forward+0xc4>
	}
// 	if(move_result ==1){
// 		play_snake_move_sound_effect(); 
// 	}

	add_to_score(1);
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	0e 94 3c 0b 	call	0x1678	; 0x1678 <add_to_score>
	PosnType new_head_position = get_snake_head_position();
     e76:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <get_snake_head_position>
     e7a:	18 2f       	mov	r17, r24
	if(move_result == ATE_FOOD || move_result == ATE_FOOD_BUT_CANT_GROW) {
     e7c:	8e ef       	ldi	r24, 0xFE	; 254
     e7e:	8c 0f       	add	r24, r28
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	c0 f4       	brcc	.+48     	; 0xeb4 <attempt_to_move_snake_forward+0x60>
		// remove food item
		int8_t foodID = food_at(new_head_position);
     e84:	81 2f       	mov	r24, r17
     e86:	0e 94 23 06 	call	0xc46	; 0xc46 <food_at>
		remove_food(foodID);
     e8a:	0e 94 b1 06 	call	0xd62	; 0xd62 <remove_food>
		play_eating_food_sound_effect();
     e8e:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>

		//  Account for additional two points for eating food. 
		add_to_score(2);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	0e 94 3c 0b 	call	0x1678	; 0x1678 <add_to_score>
		increase_game_speed();
     e9a:	0e 94 0e 07 	call	0xe1c	; 0xe1c <increase_game_speed>
		
		// Add a new food item. Might fail if a free position can't be 
		// found on the board but shouldn't usually.
		PosnType new_food_posn = add_food_item();
     e9e:	0e 94 45 06 	call	0xc8a	; 0xc8a <add_food_item>
     ea2:	08 2f       	mov	r16, r24
		if(is_position_valid(new_food_posn)) {
     ea4:	0e 94 e7 07 	call	0xfce	; 0xfce <is_position_valid>
     ea8:	88 23       	and	r24, r24
     eaa:	21 f0       	breq	.+8      	; 0xeb4 <attempt_to_move_snake_forward+0x60>
			update_display_at_position(new_food_posn, FOOD_COLOUR);
     eac:	63 e3       	ldi	r22, 0x33	; 51
     eae:	80 2f       	mov	r24, r16
     eb0:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
		}
	}
	if(move_result == ATE_SUPERFOOD || move_result == ATE_SUPERFOOD_BUT_CANT_GROW){
     eb4:	8c ef       	ldi	r24, 0xFC	; 252
     eb6:	8c 0f       	add	r24, r28
     eb8:	82 30       	cpi	r24, 0x02	; 2
     eba:	50 f4       	brcc	.+20     	; 0xed0 <attempt_to_move_snake_forward+0x7c>
		eat_superfood_from_board();
     ebc:	0e 94 4f 0f 	call	0x1e9e	; 0x1e9e <eat_superfood_from_board>
		add_to_score(9);
     ec0:	89 e0       	ldi	r24, 0x09	; 9
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	0e 94 3c 0b 	call	0x1678	; 0x1678 <add_to_score>
		increase_game_speed();
     ec8:	0e 94 0e 07 	call	0xe1c	; 0xe1c <increase_game_speed>
		
		play_eating_food_sound_effect();
     ecc:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>

	}
	
	if(move_result == ATE_RAT || move_result == ATE_RAT_BUT_CANT_GROW){
     ed0:	8a ef       	ldi	r24, 0xFA	; 250
     ed2:	8c 0f       	add	r24, r28
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	50 f4       	brcc	.+20     	; 0xeec <attempt_to_move_snake_forward+0x98>
		add_new_rat_position();
     ed8:	0e 94 be 0a 	call	0x157c	; 0x157c <add_new_rat_position>
		add_to_score(4);
     edc:	84 e0       	ldi	r24, 0x04	; 4
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <add_to_score>
		increase_game_speed();
     ee4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <increase_game_speed>
		play_eating_food_sound_effect();
     ee8:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	// display the snake head at that position.
	
	// If we didn't eat food OR if we ate food but the snake is at 
	// maximum length, then we move the tail forward and remove this 
	// element from the display
	if(move_result == MOVE_OK || move_result == ATE_FOOD_BUT_CANT_GROW ||
     eec:	cd 7f       	andi	r28, 0xFD	; 253
     eee:	c1 30       	cpi	r28, 0x01	; 1
     ef0:	11 f0       	breq	.+4      	; 0xef6 <attempt_to_move_snake_forward+0xa2>
     ef2:	c5 30       	cpi	r28, 0x05	; 5
     ef4:	29 f4       	brne	.+10     	; 0xf00 <attempt_to_move_snake_forward+0xac>
		 move_result == ATE_SUPERFOOD_BUT_CANT_GROW || move_result == ATE_RAT_BUT_CANT_GROW) {

		//  Because Score has changed, update Score on Terminal
		PosnType prev_tail_posn = advance_snake_tail();
     ef6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <advance_snake_tail>
		update_display_at_position(prev_tail_posn, BACKGROUND_COLOUR);
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
	}

	// We update the previous head position to become a body part and 
	// update the new head position.
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
     f00:	60 ef       	ldi	r22, 0xF0	; 240
     f02:	8d 2f       	mov	r24, r29
     f04:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
     f08:	6f e0       	ldi	r22, 0x0F	; 15
     f0a:	81 2f       	mov	r24, r17
     f0c:	0e 94 ca 06 	call	0xd94	; 0xd94 <update_display_at_position>
	update_terminal_score();	
     f10:	0e 94 5d 10 	call	0x20ba	; 0x20ba <update_terminal_score>

	return 1;
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <attempt_to_move_snake_forward+0xc6>
	int8_t move_result = advance_snake_head();
	if(move_result < 0) {
		// Snake moved out of bounds (if this is not permitted) or
		// collided it with itself. Return false because we couldn't
		// move the snake
		return 0;
     f18:	80 e0       	ldi	r24, 0x00	; 0
	update_display_at_position(prior_head_position, SNAKE_BODY_COLOUR);
	update_display_at_position(new_head_position, SNAKE_HEAD_COLOUR);
	update_terminal_score();	

	return 1;
}
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	08 95       	ret

00000f24 <get_current_game_speed>:
		current_speed *= 0.90;
	}
}

int get_current_game_speed(void){
	return current_speed;
     f24:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
     f28:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
}
     f2c:	08 95       	ret

00000f2e <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
     f2e:	80 e8       	ldi	r24, 0x80	; 128
     f30:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <spi_setup_master>
     f34:	08 95       	ret

00000f36 <ledmatrix_update_pixel>:
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	df 93       	push	r29
     f3c:	80 31       	cpi	r24, 0x10	; 16
     f3e:	b0 f4       	brcc	.+44     	; 0xf6c <ledmatrix_update_pixel+0x36>
     f40:	68 30       	cpi	r22, 0x08	; 8
     f42:	a0 f4       	brcc	.+40     	; 0xf6c <ledmatrix_update_pixel+0x36>
     f44:	14 2f       	mov	r17, r20
     f46:	c6 2f       	mov	r28, r22
     f48:	d8 2f       	mov	r29, r24
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     f50:	6c 2f       	mov	r22, r28
     f52:	67 70       	andi	r22, 0x07	; 7
     f54:	80 e1       	ldi	r24, 0x10	; 16
     f56:	68 9f       	mul	r22, r24
     f58:	90 01       	movw	r18, r0
     f5a:	11 24       	eor	r1, r1
     f5c:	8d 2f       	mov	r24, r29
     f5e:	8f 70       	andi	r24, 0x0F	; 15
     f60:	82 2b       	or	r24, r18
     f62:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     f66:	81 2f       	mov	r24, r17
     f68:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	08 95       	ret

00000f74 <ledmatrix_update_column>:
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	80 31       	cpi	r24, 0x10	; 16
     f7e:	90 f4       	brcc	.+36     	; 0xfa4 <ledmatrix_update_column+0x30>
     f80:	8b 01       	movw	r16, r22
     f82:	c8 2f       	mov	r28, r24
     f84:	83 e0       	ldi	r24, 0x03	; 3
     f86:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     f8a:	8c 2f       	mov	r24, r28
     f8c:	8f 70       	andi	r24, 0x0F	; 15
     f8e:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     f92:	e8 01       	movw	r28, r16
     f94:	08 5f       	subi	r16, 0xF8	; 248
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	89 91       	ld	r24, Y+
     f9a:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     f9e:	c0 17       	cp	r28, r16
     fa0:	d1 07       	cpc	r29, r17
     fa2:	d1 f7       	brne	.-12     	; 0xf98 <ledmatrix_update_column+0x24>
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	0f 91       	pop	r16
     fac:	08 95       	ret

00000fae <ledmatrix_shift_display_left>:
     fae:	84 e0       	ldi	r24, 0x04	; 4
     fb0:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     fba:	08 95       	ret

00000fbc <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
     fbc:	8f e0       	ldi	r24, 0x0F	; 15
     fbe:	0e 94 08 0f 	call	0x1e10	; 0x1e10 <spi_send_byte>
     fc2:	08 95       	ret

00000fc4 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
     fc4:	82 95       	swap	r24
     fc6:	8f 70       	andi	r24, 0x0F	; 15
     fc8:	08 95       	ret

00000fca <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
     fca:	8f 70       	andi	r24, 0x0F	; 15
     fcc:	08 95       	ret

00000fce <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
     fce:	83 fb       	bst	r24, 3
     fd0:	88 27       	eor	r24, r24
     fd2:	80 f9       	bld	r24, 0
}
     fd4:	91 e0       	ldi	r25, 0x01	; 1
     fd6:	89 27       	eor	r24, r25
     fd8:	08 95       	ret

00000fda <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
     fda:	20 e1       	ldi	r18, 0x10	; 16
     fdc:	82 9f       	mul	r24, r18
     fde:	c0 01       	movw	r24, r0
     fe0:	11 24       	eor	r1, r1
     fe2:	67 70       	andi	r22, 0x07	; 7
}
     fe4:	86 2b       	or	r24, r22
     fe6:	08 95       	ret

00000fe8 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
     fe8:	0e 94 97 07 	call	0xf2e	; 0xf2e <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
     fec:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
     ff0:	40 e0       	ldi	r20, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	7b e4       	ldi	r23, 0x4B	; 75
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	0e 94 91 0c 	call	0x1922	; 0x1922 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
     ffe:	0e 94 76 10 	call	0x20ec	; 0x20ec <init_timer0>
	
	// Turn on global interrupts
	sei();
    1002:	78 94       	sei
    1004:	08 95       	ret

00001006 <splash_screen>:
}

void splash_screen(void) {
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <set_display_attribute>
	clear_terminal();
    1016:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    101a:	0e 94 01 10 	call	0x2002	; 0x2002 <hide_cursor>
	display_start_terminal_screen();
    101e:	0e 94 13 10 	call	0x2026	; 0x2026 <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1022:	0e 94 de 07 	call	0xfbc	; 0xfbc <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    1026:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1028:	0f 2e       	mov	r0, r31
    102a:	ff e0       	ldi	r31, 0x0F	; 15
    102c:	ff 2e       	mov	r15, r31
    102e:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    1030:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1032:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1034:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    1036:	6c 2f       	mov	r22, r28
    1038:	83 ee       	ldi	r24, 0xE3	; 227
    103a:	91 e0       	ldi	r25, 0x01	; 1
    103c:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1040:	0d c0       	rjmp	.+26     	; 0x105c <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1042:	2f e7       	ldi	r18, 0x7F	; 127
    1044:	8c e2       	ldi	r24, 0x2C	; 44
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	21 50       	subi	r18, 0x01	; 1
    104a:	80 40       	sbci	r24, 0x00	; 0
    104c:	90 40       	sbci	r25, 0x00	; 0
    104e:	e1 f7       	brne	.-8      	; 0x1048 <splash_screen+0x42>
    1050:	00 c0       	rjmp	.+0      	; 0x1052 <splash_screen+0x4c>
    1052:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    1054:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1058:	8f 3f       	cpi	r24, 0xFF	; 255
    105a:	a9 f5       	brne	.+106    	; 0x10c6 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    105c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <scroll_display>
    1060:	81 11       	cpse	r24, r1
    1062:	ef cf       	rjmp	.-34     	; 0x1042 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    1064:	0e 94 41 13 	call	0x2682	; 0x2682 <random>
    1068:	dc 01       	movw	r26, r24
    106a:	cb 01       	movw	r24, r22
    106c:	83 70       	andi	r24, 0x03	; 3
    106e:	99 27       	eor	r25, r25
    1070:	aa 27       	eor	r26, r26
    1072:	b0 78       	andi	r27, 0x80	; 128
    1074:	bb 23       	and	r27, r27
    1076:	54 f4       	brge	.+20     	; 0x108c <splash_screen+0x86>
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	a1 09       	sbc	r26, r1
    107c:	b1 09       	sbc	r27, r1
    107e:	8c 6f       	ori	r24, 0xFC	; 252
    1080:	9f 6f       	ori	r25, 0xFF	; 255
    1082:	af 6f       	ori	r26, 0xFF	; 255
    1084:	bf 6f       	ori	r27, 0xFF	; 255
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	a1 1d       	adc	r26, r1
    108a:	b1 1d       	adc	r27, r1
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	a1 05       	cpc	r26, r1
    1092:	b1 05       	cpc	r27, r1
    1094:	91 f0       	breq	.+36     	; 0x10ba <splash_screen+0xb4>
    1096:	2c f4       	brge	.+10     	; 0x10a2 <splash_screen+0x9c>
    1098:	89 2b       	or	r24, r25
    109a:	8a 2b       	or	r24, r26
    109c:	8b 2b       	or	r24, r27
    109e:	59 f0       	breq	.+22     	; 0x10b6 <splash_screen+0xb0>
    10a0:	ca cf       	rjmp	.-108    	; 0x1036 <splash_screen+0x30>
    10a2:	82 30       	cpi	r24, 0x02	; 2
    10a4:	91 05       	cpc	r25, r1
    10a6:	a1 05       	cpc	r26, r1
    10a8:	b1 05       	cpc	r27, r1
    10aa:	49 f0       	breq	.+18     	; 0x10be <splash_screen+0xb8>
    10ac:	03 97       	sbiw	r24, 0x03	; 3
    10ae:	a1 05       	cpc	r26, r1
    10b0:	b1 05       	cpc	r27, r1
    10b2:	39 f0       	breq	.+14     	; 0x10c2 <splash_screen+0xbc>
    10b4:	c0 cf       	rjmp	.-128    	; 0x1036 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    10b6:	cd 2f       	mov	r28, r29
    10b8:	be cf       	rjmp	.-132    	; 0x1036 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    10ba:	cf 2d       	mov	r28, r15
    10bc:	bc cf       	rjmp	.-136    	; 0x1036 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    10be:	c0 2f       	mov	r28, r16
    10c0:	ba cf       	rjmp	.-140    	; 0x1036 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    10c2:	c1 2f       	mov	r28, r17
    10c4:	b8 cf       	rjmp	.-144    	; 0x1036 <splash_screen+0x30>
		}
	}
}
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	08 95       	ret

000010d2 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    10d2:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_terminal>
	
	// Initialise the game and display
	init_game();
    10d6:	0e 94 dd 06 	call	0xdba	; 0xdba <init_game>
		
	// Initialise the score
	init_score();
    10da:	0e 94 33 0b 	call	0x1666	; 0x1666 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    10de:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    10e2:	0e 94 df 0c 	call	0x19be	; 0x19be <clear_serial_input_buffer>
    10e6:	08 95       	ret

000010e8 <handle_game_over>:
	}
	// If we get here the game is over. 
}

void handle_game_over() {
	clear_terminal();
    10e8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_terminal>
	move_cursor(10,5);
    10ec:	65 e0       	ldi	r22, 0x05	; 5
    10ee:	8a e0       	ldi	r24, 0x0A	; 10
    10f0:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    10f4:	8c ea       	ldi	r24, 0xAC	; 172
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	9f 93       	push	r25
    10fa:	8f 93       	push	r24
    10fc:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
	move_cursor(10,7);
    1100:	67 e0       	ldi	r22, 0x07	; 7
    1102:	8a e0       	ldi	r24, 0x0A	; 10
    1104:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf("Score: %u", get_score());
    1108:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
    110c:	9f 93       	push	r25
    110e:	8f 93       	push	r24
    1110:	7f 93       	push	r23
    1112:	6f 93       	push	r22
    1114:	85 ef       	ldi	r24, 0xF5	; 245
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	9f 93       	push	r25
    111a:	8f 93       	push	r24
    111c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
	display_EEPROM_high_score();
    1120:	0e 94 15 05 	call	0xa2a	; 0xa2a <display_EEPROM_high_score>

	if (is_high_score()){
    1124:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <is_high_score>
    1128:	2d b7       	in	r18, 0x3d	; 61
    112a:	3e b7       	in	r19, 0x3e	; 62
    112c:	28 5f       	subi	r18, 0xF8	; 248
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	3e bf       	out	0x3e, r19	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	2d bf       	out	0x3d, r18	; 61
    113a:	81 11       	cpse	r24, r1
		set_high_score_name();	
    113c:	0e 94 ba 04 	call	0x974	; 0x974 <set_high_score_name>
	}
	move_cursor(10,9);
    1140:	69 e0       	ldi	r22, 0x09	; 9
    1142:	8a e0       	ldi	r24, 0x0A	; 10
    1144:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    1148:	8e e8       	ldi	r24, 0x8E	; 142
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	9f 93       	push	r25
    114e:	8f 93       	push	r24
    1150:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
	display_EEPROM_high_score(); 
    1154:	0e 94 15 05 	call	0xa2a	; 0xa2a <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1160:	8f 3f       	cpi	r24, 0xFF	; 255
    1162:	e1 f3       	breq	.-8      	; 0x115c <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    1164:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <clear_terminal>
    1168:	08 95       	ret

0000116a <play_game>:
	// Delete any pending button pushes or serial input
	empty_button_queue();
	clear_serial_input_buffer();
}

void play_game(void) {
    116a:	4f 92       	push	r4
    116c:	5f 92       	push	r5
    116e:	7f 92       	push	r7
    1170:	8f 92       	push	r8
    1172:	9f 92       	push	r9
    1174:	af 92       	push	r10
    1176:	bf 92       	push	r11
    1178:	cf 92       	push	r12
    117a:	df 92       	push	r13
    117c:	ef 92       	push	r14
    117e:	ff 92       	push	r15
    1180:	0f 93       	push	r16
    1182:	1f 93       	push	r17
    1184:	cf 93       	push	r28
    1186:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    1188:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    118c:	4b 01       	movw	r8, r22
    118e:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1190:	10 e0       	ldi	r17, 0x00	; 0
    1192:	0f ef       	ldi	r16, 0xFF	; 255
		}else if(serial_input == 'o' || serial_input == 'O'){
			handle_game_over(); 
// 			load_EEPROM_data_on_next_game = 1;
// 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1194:	0f 2e       	mov	r0, r31
    1196:	ff ed       	ldi	r31, 0xDF	; 223
    1198:	7f 2e       	mov	r7, r31
    119a:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    119c:	0f 2e       	mov	r0, r31
    119e:	ff e8       	ldi	r31, 0x8F	; 143
    11a0:	4f 2e       	mov	r4, r31
    11a2:	f3 e0       	ldi	r31, 0x03	; 3
    11a4:	5f 2e       	mov	r5, r31
    11a6:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    11a8:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <time_to_add_superfood>
    11ac:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    11ae:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    11b2:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <time_to_remove_superfood>
    11b6:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    11b8:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    11bc:	0e 94 21 0b 	call	0x1642	; 0x1642 <is_time_to_move_rat>
    11c0:	81 11       	cpse	r24, r1
    11c2:	0e 94 41 0a 	call	0x1482	; 0x1482 <move_rat>
			handle_buzzer_loop();
    11c6:	0e 94 6d 02 	call	0x4da	; 0x4da <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    11ca:	0e 94 95 10 	call	0x212a	; 0x212a <timer_is_paused>
    11ce:	89 2b       	or	r24, r25
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <play_game+0x6e>
			button = -1;
			empty_button_queue();
    11d2:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    11d6:	06 c0       	rjmp	.+12     	; 0x11e4 <play_game+0x7a>
			}else{
		button = button_pushed();}
    11d8:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    11dc:	c8 2f       	mov	r28, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    11de:	8f 3f       	cpi	r24, 0xFF	; 255
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <play_game+0x7a>
    11e2:	8d c0       	rjmp	.+282    	; 0x12fe <play_game+0x194>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    11e4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <serial_input_available>
    11e8:	88 23       	and	r24, r24
    11ea:	09 f4       	brne	.+2      	; 0x11ee <play_game+0x84>
    11ec:	97 c0       	rjmp	.+302    	; 0x131c <play_game+0x1b2>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    11ee:	f2 01       	movw	r30, r4
    11f0:	80 81       	ld	r24, Z
    11f2:	91 81       	ldd	r25, Z+1	; 0x01
    11f4:	0e 94 98 13 	call	0x2730	; 0x2730 <fgetc>
    11f8:	d8 2f       	mov	r29, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    11fa:	11 11       	cpse	r17, r1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <play_game+0x9a>
    11fe:	8b 31       	cpi	r24, 0x1B	; 27
    1200:	51 f4       	brne	.+20     	; 0x1216 <play_game+0xac>
    1202:	89 c0       	rjmp	.+274    	; 0x1316 <play_game+0x1ac>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    1204:	11 30       	cpi	r17, 0x01	; 1
    1206:	19 f4       	brne	.+6      	; 0x120e <play_game+0xa4>
    1208:	8b 35       	cpi	r24, 0x5B	; 91
    120a:	29 f4       	brne	.+10     	; 0x1216 <play_game+0xac>
    120c:	86 c0       	rjmp	.+268    	; 0x131a <play_game+0x1b0>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    120e:	12 30       	cpi	r17, 0x02	; 2
    1210:	09 f4       	brne	.+2      	; 0x1214 <play_game+0xaa>
    1212:	7b c0       	rjmp	.+246    	; 0x130a <play_game+0x1a0>
    1214:	6e c0       	rjmp	.+220    	; 0x12f2 <play_game+0x188>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1216:	0e 94 95 10 	call	0x212a	; 0x212a <timer_is_paused>
    121a:	89 2b       	or	r24, r25
    121c:	49 f0       	breq	.+18     	; 0x1230 <play_game+0xc6>
    121e:	37 c0       	rjmp	.+110    	; 0x128e <play_game+0x124>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1220:	cc 23       	and	r28, r28
    1222:	11 f0       	breq	.+4      	; 0x1228 <play_game+0xbe>
    1224:	08 c0       	rjmp	.+16     	; 0x1236 <play_game+0xcc>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1226:	10 e0       	ldi	r17, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <set_snake_dirn>
    122e:	44 c0       	rjmp	.+136    	; 0x12b8 <play_game+0x14e>
    1230:	10 e0       	ldi	r17, 0x00	; 0
    1232:	c0 2f       	mov	r28, r16
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <play_game+0xce>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1236:	d0 2f       	mov	r29, r16
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    1238:	c2 30       	cpi	r28, 0x02	; 2
    123a:	19 f0       	breq	.+6      	; 0x1242 <play_game+0xd8>
    123c:	80 2f       	mov	r24, r16
    123e:	81 34       	cpi	r24, 0x41	; 65
    1240:	21 f4       	brne	.+8      	; 0x124a <play_game+0xe0>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <set_snake_dirn>
    1248:	37 c0       	rjmp	.+110    	; 0x12b8 <play_game+0x14e>
		} else if(button==3 || escape_sequence_char=='D') {
    124a:	c3 30       	cpi	r28, 0x03	; 3
    124c:	11 f0       	breq	.+4      	; 0x1252 <play_game+0xe8>
    124e:	84 34       	cpi	r24, 0x44	; 68
    1250:	21 f4       	brne	.+8      	; 0x125a <play_game+0xf0>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    1252:	83 e0       	ldi	r24, 0x03	; 3
    1254:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <set_snake_dirn>
    1258:	2f c0       	rjmp	.+94     	; 0x12b8 <play_game+0x14e>
		} else if (button==1 || escape_sequence_char == 'B') {
    125a:	c1 30       	cpi	r28, 0x01	; 1
    125c:	11 f0       	breq	.+4      	; 0x1262 <play_game+0xf8>
    125e:	82 34       	cpi	r24, 0x42	; 66
    1260:	29 f4       	brne	.+10     	; 0x126c <play_game+0x102>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <set_snake_dirn>
    1268:	27 c0       	rjmp	.+78     	; 0x12b8 <play_game+0x14e>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    126a:	10 e0       	ldi	r17, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    126c:	8d 2f       	mov	r24, r29
    126e:	8f 7d       	andi	r24, 0xDF	; 223
    1270:	80 35       	cpi	r24, 0x50	; 80
    1272:	19 f4       	brne	.+6      	; 0x127a <play_game+0x110>
			toggle_timer_clock();
    1274:	0e 94 8e 10 	call	0x211c	; 0x211c <toggle_timer_clock>
    1278:	1f c0       	rjmp	.+62     	; 0x12b8 <play_game+0x14e>
		}else if(serial_input == 's'|| serial_input == 's'){
    127a:	d3 37       	cpi	r29, 0x73	; 115
    127c:	19 f4       	brne	.+6      	; 0x1284 <play_game+0x11a>
			save_game_to_EPPROM();
    127e:	0e 94 83 02 	call	0x506	; 0x506 <save_game_to_EPPROM>
    1282:	1a c0       	rjmp	.+52     	; 0x12b8 <play_game+0x14e>
		}else if(serial_input == 'o' || serial_input == 'O'){
    1284:	8f 34       	cpi	r24, 0x4F	; 79
    1286:	c1 f4       	brne	.+48     	; 0x12b8 <play_game+0x14e>
			handle_game_over(); 
    1288:	0e 94 74 08 	call	0x10e8	; 0x10e8 <handle_game_over>
    128c:	15 c0       	rjmp	.+42     	; 0x12b8 <play_game+0x14e>
// 			load_EEPROM_data_on_next_game = 1;
// 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    128e:	8d 2f       	mov	r24, r29
    1290:	8f 7d       	andi	r24, 0xDF	; 223
    1292:	80 35       	cpi	r24, 0x50	; 80
    1294:	21 f4       	brne	.+8      	; 0x129e <play_game+0x134>
			toggle_timer_clock();
    1296:	0e 94 8e 10 	call	0x211c	; 0x211c <toggle_timer_clock>
    129a:	10 e0       	ldi	r17, 0x00	; 0
    129c:	0d c0       	rjmp	.+26     	; 0x12b8 <play_game+0x14e>
		}else if(serial_input == 's'|| serial_input == 's'){
    129e:	d3 37       	cpi	r29, 0x73	; 115
    12a0:	21 f4       	brne	.+8      	; 0x12aa <play_game+0x140>
			save_game_to_EPPROM();
    12a2:	0e 94 83 02 	call	0x506	; 0x506 <save_game_to_EPPROM>
    12a6:	10 e0       	ldi	r17, 0x00	; 0
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <play_game+0x14e>
    12aa:	10 e0       	ldi	r17, 0x00	; 0
		}else if(serial_input == 'o' || serial_input == 'O'){
    12ac:	8f 34       	cpi	r24, 0x4F	; 79
    12ae:	21 f4       	brne	.+8      	; 0x12b8 <play_game+0x14e>
			load_EEPROM_data_on_next_game = 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <load_EEPROM_data_on_next_game>
		break;
    12b6:	41 c0       	rjmp	.+130    	; 0x133a <play_game+0x1d0>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    12b8:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    12bc:	6b 01       	movw	r12, r22
    12be:	7c 01       	movw	r14, r24
    12c0:	0e 94 92 07 	call	0xf24	; 0xf24 <get_current_game_speed>
    12c4:	09 2e       	mov	r0, r25
    12c6:	00 0c       	add	r0, r0
    12c8:	aa 0b       	sbc	r26, r26
    12ca:	bb 0b       	sbc	r27, r27
    12cc:	88 0d       	add	r24, r8
    12ce:	99 1d       	adc	r25, r9
    12d0:	aa 1d       	adc	r26, r10
    12d2:	bb 1d       	adc	r27, r11
    12d4:	c8 16       	cp	r12, r24
    12d6:	d9 06       	cpc	r13, r25
    12d8:	ea 06       	cpc	r14, r26
    12da:	fb 06       	cpc	r15, r27
    12dc:	08 f4       	brcc	.+2      	; 0x12e0 <play_game+0x176>
    12de:	64 cf       	rjmp	.-312    	; 0x11a8 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    12e0:	0e 94 2a 07 	call	0xe54	; 0xe54 <attempt_to_move_snake_forward>
    12e4:	88 23       	and	r24, r24
    12e6:	49 f1       	breq	.+82     	; 0x133a <play_game+0x1d0>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    12e8:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    12ec:	4b 01       	movw	r8, r22
    12ee:	5c 01       	movw	r10, r24
    12f0:	5b cf       	rjmp	.-330    	; 0x11a8 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    12f2:	0e 94 95 10 	call	0x212a	; 0x212a <timer_is_paused>
    12f6:	89 2b       	or	r24, r25
    12f8:	09 f4       	brne	.+2      	; 0x12fc <play_game+0x192>
    12fa:	b7 cf       	rjmp	.-146    	; 0x126a <play_game+0x100>
    12fc:	c8 cf       	rjmp	.-112    	; 0x128e <play_game+0x124>
    12fe:	0e 94 95 10 	call	0x212a	; 0x212a <timer_is_paused>
    1302:	89 2b       	or	r24, r25
    1304:	09 f4       	brne	.+2      	; 0x1308 <play_game+0x19e>
    1306:	8c cf       	rjmp	.-232    	; 0x1220 <play_game+0xb6>
    1308:	d7 cf       	rjmp	.-82     	; 0x12b8 <play_game+0x14e>
    130a:	0e 94 95 10 	call	0x212a	; 0x212a <timer_is_paused>
    130e:	89 2b       	or	r24, r25
    1310:	51 f0       	breq	.+20     	; 0x1326 <play_game+0x1bc>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	10 c0       	rjmp	.+32     	; 0x1336 <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    1316:	11 e0       	ldi	r17, 0x01	; 1
    1318:	01 c0       	rjmp	.+2      	; 0x131c <play_game+0x1b2>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    131a:	12 e0       	ldi	r17, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    131c:	0e 94 95 10 	call	0x212a	; 0x212a <timer_is_paused>
    1320:	89 2b       	or	r24, r25
    1322:	49 f4       	brne	.+18     	; 0x1336 <play_game+0x1cc>
    1324:	c9 cf       	rjmp	.-110    	; 0x12b8 <play_game+0x14e>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1326:	d3 34       	cpi	r29, 0x43	; 67
    1328:	09 f4       	brne	.+2      	; 0x132c <play_game+0x1c2>
    132a:	7d cf       	rjmp	.-262    	; 0x1226 <play_game+0xbc>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    132c:	8d 2f       	mov	r24, r29
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    132e:	10 e0       	ldi	r17, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    1330:	d0 2f       	mov	r29, r16
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1332:	c0 2f       	mov	r28, r16
    1334:	84 cf       	rjmp	.-248    	; 0x123e <play_game+0xd4>
		}else if(serial_input == 'o' || serial_input == 'O'){
			handle_game_over(); 
// 			load_EEPROM_data_on_next_game = 1;
// 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1336:	87 2d       	mov	r24, r7
    1338:	b9 cf       	rjmp	.-142    	; 0x12ac <play_game+0x142>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	af 90       	pop	r10
    134e:	9f 90       	pop	r9
    1350:	8f 90       	pop	r8
    1352:	7f 90       	pop	r7
    1354:	5f 90       	pop	r5
    1356:	4f 90       	pop	r4
    1358:	08 95       	ret

0000135a <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    135a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <initialise_hardware>
	DDRA = 0xff;
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    1362:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    1364:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    1366:	0e 94 03 08 	call	0x1006	; 0x1006 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    136a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <load_EEPROM_data_on_next_game>
    136e:	88 23       	and	r24, r24
    1370:	19 f0       	breq	.+6      	; 0x1378 <main+0x1e>
    1372:	0e 94 ff 02 	call	0x5fe	; 0x5fe <new_game_from_EEPROM>
    1376:	02 c0       	rjmp	.+4      	; 0x137c <main+0x22>
			else{new_game();}
    1378:	0e 94 69 08 	call	0x10d2	; 0x10d2 <new_game>
		play_game();
    137c:	0e 94 b5 08 	call	0x116a	; 0x116a <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    1380:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <load_EEPROM_data_on_next_game>
    1384:	81 11       	cpse	r24, r1
    1386:	f1 cf       	rjmp	.-30     	; 0x136a <main+0x10>
    1388:	0e 94 74 08 	call	0x10e8	; 0x10e8 <handle_game_over>
    138c:	ee cf       	rjmp	.-36     	; 0x136a <main+0x10>

0000138e <get_rat_position>:

uint16_t RAT_WAIT_TIME = 1200;

PosnType get_rat_position(void){
	return rat_position;
}
    138e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1392:	08 95       	ret

00001394 <set_rat_at_pos>:

void set_rat_at_pos(PosnType new_pos){
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
    1398:	c8 2f       	mov	r28, r24
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_BLACK);
    139a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    139e:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    13a2:	d8 2f       	mov	r29, r24
    13a4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    13a8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	6d 2f       	mov	r22, r29
    13b0:	0e 94 9b 07 	call	0xf36	; 0xf36 <ledmatrix_update_pixel>
	rat_position = new_pos;
    13b4:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <rat_position>
	ledmatrix_update_pixel(x_position(new_pos), y_position(new_pos), COLOUR_ORANGE);
    13b8:	8c 2f       	mov	r24, r28
    13ba:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    13be:	d8 2f       	mov	r29, r24
    13c0:	8c 2f       	mov	r24, r28
    13c2:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    13c6:	4c e3       	ldi	r20, 0x3C	; 60
    13c8:	6d 2f       	mov	r22, r29
    13ca:	0e 94 9b 07 	call	0xf36	; 0xf36 <ledmatrix_update_pixel>

}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	08 95       	ret

000013d4 <is_item_at>:

uint8_t is_item_at(PosnType position){
    13d4:	cf 93       	push	r28
    13d6:	c8 2f       	mov	r28, r24
	if (is_snake_at(position) || is_food_at(position)
    13d8:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <is_snake_at>
    13dc:	81 11       	cpse	r24, r1
    13de:	0d c0       	rjmp	.+26     	; 0x13fa <is_item_at+0x26>
    13e0:	8c 2f       	mov	r24, r28
    13e2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_food_at>
    13e6:	81 11       	cpse	r24, r1
    13e8:	0a c0       	rjmp	.+20     	; 0x13fe <is_item_at+0x2a>
	|| is_superfood_at(position)){
    13ea:	8c 2f       	mov	r24, r28
    13ec:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <is_superfood_at>
		return 1;
    13f0:	91 e0       	ldi	r25, 0x01	; 1
    13f2:	81 11       	cpse	r24, r1
    13f4:	05 c0       	rjmp	.+10     	; 0x1400 <is_item_at+0x2c>
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	03 c0       	rjmp	.+6      	; 0x1400 <is_item_at+0x2c>
    13fa:	91 e0       	ldi	r25, 0x01	; 1
    13fc:	01 c0       	rjmp	.+2      	; 0x1400 <is_item_at+0x2c>
    13fe:	91 e0       	ldi	r25, 0x01	; 1
	}
	return 0;
}
    1400:	89 2f       	mov	r24, r25
    1402:	cf 91       	pop	r28
    1404:	08 95       	ret

00001406 <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    140e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1412:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1416:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    1418:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    141c:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    1420:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    1422:	8f ef       	ldi	r24, 0xFF	; 255
    1424:	8c 0f       	add	r24, r28
    1426:	8e 30       	cpi	r24, 0x0E	; 14
    1428:	20 f4       	brcc	.+8      	; 0x1432 <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	8d 0f       	add	r24, r29
    142e:	86 30       	cpi	r24, 0x06	; 6
    1430:	e8 f0       	brcs	.+58     	; 0x146c <rat_jumped_the_board+0x66>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && x_position(new_pos) == BOARD_WIDTH-1) ||
    1432:	c1 11       	cpse	r28, r1
    1434:	06 c0       	rjmp	.+12     	; 0x1442 <rat_jumped_the_board+0x3c>
    1436:	81 2f       	mov	r24, r17
    1438:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    143c:	8f 30       	cpi	r24, 0x0F	; 15
    143e:	41 f4       	brne	.+16     	; 0x1450 <rat_jumped_the_board+0x4a>
    1440:	17 c0       	rjmp	.+46     	; 0x1470 <rat_jumped_the_board+0x6a>
    1442:	cf 30       	cpi	r28, 0x0F	; 15
    1444:	29 f4       	brne	.+10     	; 0x1450 <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && x_position(new_pos) == 0) ||
    1446:	81 2f       	mov	r24, r17
    1448:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    144c:	88 23       	and	r24, r24
    144e:	91 f0       	breq	.+36     	; 0x1474 <rat_jumped_the_board+0x6e>
    1450:	d1 11       	cpse	r29, r1
    1452:	05 c0       	rjmp	.+10     	; 0x145e <rat_jumped_the_board+0x58>
		(rat_y==0 && y_position(new_pos) == BOARD_HEIGHT-1) ||
    1454:	81 2f       	mov	r24, r17
    1456:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
		(rat_y == BOARD_HEIGHT-1 && y_position(new_pos) == 0)){
			return 1; 
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	0e c0       	rjmp	.+28     	; 0x147a <rat_jumped_the_board+0x74>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && x_position(new_pos) == BOARD_WIDTH-1) ||
		(rat_x == BOARD_WIDTH-1 && x_position(new_pos) == 0) ||
		(rat_y==0 && y_position(new_pos) == BOARD_HEIGHT-1) ||
    145e:	d7 30       	cpi	r29, 0x07	; 7
    1460:	59 f4       	brne	.+22     	; 0x1478 <rat_jumped_the_board+0x72>
		(rat_y == BOARD_HEIGHT-1 && y_position(new_pos) == 0)){
    1462:	81 2f       	mov	r24, r17
    1464:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
			return 1; 
		}
	return 1; 
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	07 c0       	rjmp	.+14     	; 0x147a <rat_jumped_the_board+0x74>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	05 c0       	rjmp	.+10     	; 0x147a <rat_jumped_the_board+0x74>
	// All four possible jumps
	if ((rat_x ==0 && x_position(new_pos) == BOARD_WIDTH-1) ||
		(rat_x == BOARD_WIDTH-1 && x_position(new_pos) == 0) ||
		(rat_y==0 && y_position(new_pos) == BOARD_HEIGHT-1) ||
		(rat_y == BOARD_HEIGHT-1 && y_position(new_pos) == 0)){
			return 1; 
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	03 c0       	rjmp	.+6      	; 0x147a <rat_jumped_the_board+0x74>
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	01 c0       	rjmp	.+2      	; 0x147a <rat_jumped_the_board+0x74>
		}
	return 1; 
    1478:	81 e0       	ldi	r24, 0x01	; 1
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	08 95       	ret

00001482 <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1492:	08 2f       	mov	r16, r24
	uint8_t move_option = rand()%4; 
    1494:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
    1498:	83 70       	andi	r24, 0x03	; 3
    149a:	90 78       	andi	r25, 0x80	; 128
    149c:	99 23       	and	r25, r25
    149e:	24 f4       	brge	.+8      	; 0x14a8 <move_rat+0x26>
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	8c 6f       	ori	r24, 0xFC	; 252
    14a4:	9f 6f       	ori	r25, 0xFF	; 255
    14a6:	01 96       	adiw	r24, 0x01	; 1
	return 0;
}

void move_rat(void){
	//  TODO: make rat choose random option from remainder % 4 of clock ticks
	uint8_t attempts = 0; 
    14a8:	10 e0       	ldi	r17, 0x00	; 0
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    14aa:	c8 2f       	mov	r28, r24
    14ac:	d0 e0       	ldi	r29, 0x00	; 0
    14ae:	c1 30       	cpi	r28, 0x01	; 1
    14b0:	d1 05       	cpc	r29, r1
    14b2:	d1 f0       	breq	.+52     	; 0x14e8 <move_rat+0x66>
    14b4:	1c f4       	brge	.+6      	; 0x14bc <move_rat+0x3a>
    14b6:	20 97       	sbiw	r28, 0x00	; 0
    14b8:	41 f0       	breq	.+16     	; 0x14ca <move_rat+0x48>
    14ba:	42 c0       	rjmp	.+132    	; 0x1540 <move_rat+0xbe>
    14bc:	c2 30       	cpi	r28, 0x02	; 2
    14be:	d1 05       	cpc	r29, r1
    14c0:	11 f1       	breq	.+68     	; 0x1506 <move_rat+0x84>
    14c2:	c3 30       	cpi	r28, 0x03	; 3
    14c4:	d1 05       	cpc	r29, r1
    14c6:	71 f1       	breq	.+92     	; 0x1524 <move_rat+0xa2>
    14c8:	3b c0       	rjmp	.+118    	; 0x1540 <move_rat+0xbe>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    14ca:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    14ce:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    14d2:	08 2f       	mov	r16, r24
    14d4:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    14d8:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	60 0f       	add	r22, r16
    14e0:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    14e4:	08 2f       	mov	r16, r24
			break; 
    14e6:	2c c0       	rjmp	.+88     	; 0x1540 <move_rat+0xbe>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    14e8:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    14ec:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    14f0:	08 2f       	mov	r16, r24
    14f2:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    14f6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    14fa:	6f ef       	ldi	r22, 0xFF	; 255
    14fc:	60 0f       	add	r22, r16
    14fe:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1502:	08 2f       	mov	r16, r24
			break;
    1504:	1d c0       	rjmp	.+58     	; 0x1540 <move_rat+0xbe>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    1506:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    150a:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    150e:	08 2f       	mov	r16, r24
    1510:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1514:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1518:	60 2f       	mov	r22, r16
    151a:	8f 5f       	subi	r24, 0xFF	; 255
    151c:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1520:	08 2f       	mov	r16, r24
			break;
    1522:	0e c0       	rjmp	.+28     	; 0x1540 <move_rat+0xbe>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    1524:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1528:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    152c:	08 2f       	mov	r16, r24
    152e:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    1532:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1536:	60 2f       	mov	r22, r16
    1538:	81 50       	subi	r24, 0x01	; 1
    153a:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    153e:	08 2f       	mov	r16, r24
			break;
			
		}
		attempts ++;
    1540:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_item_at(new_rat_pos) && attempts <4 && (rat_jumped_the_board(new_rat_pos)));
    1542:	80 2f       	mov	r24, r16
    1544:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <is_item_at>
    1548:	88 23       	and	r24, r24
    154a:	39 f0       	breq	.+14     	; 0x155a <move_rat+0xd8>
    154c:	14 30       	cpi	r17, 0x04	; 4
    154e:	39 f0       	breq	.+14     	; 0x155e <move_rat+0xdc>
    1550:	80 2f       	mov	r24, r16
    1552:	0e 94 03 0a 	call	0x1406	; 0x1406 <rat_jumped_the_board>
    1556:	81 11       	cpse	r24, r1
    1558:	aa cf       	rjmp	.-172    	; 0x14ae <move_rat+0x2c>
	
	if (attempts<=4){
    155a:	15 30       	cpi	r17, 0x05	; 5
    155c:	18 f4       	brcc	.+6      	; 0x1564 <move_rat+0xe2>
		set_rat_at_pos(new_rat_pos); 
    155e:	80 2f       	mov	r24, r16
    1560:	0e 94 ca 09 	call	0x1394	; 0x1394 <set_rat_at_pos>
	}
	}
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <is_rat_at>:
		}
	return 1; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <rat_position>
    1574:	28 13       	cpse	r18, r24
    1576:	90 e0       	ldi	r25, 0x00	; 0
}
    1578:	89 2f       	mov	r24, r25
    157a:	08 95       	ret

0000157c <add_new_rat_position>:

void add_new_rat_position(void){
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1582:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
    1586:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1588:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
        test_position = position(x,y);
    158c:	bc 01       	movw	r22, r24
    158e:	67 70       	andi	r22, 0x07	; 7
    1590:	70 78       	andi	r23, 0x80	; 128
    1592:	77 23       	and	r23, r23
    1594:	34 f4       	brge	.+12     	; 0x15a2 <add_new_rat_position+0x26>
    1596:	61 50       	subi	r22, 0x01	; 1
    1598:	71 09       	sbc	r23, r1
    159a:	68 6f       	ori	r22, 0xF8	; 248
    159c:	7f 6f       	ori	r23, 0xFF	; 255
    159e:	6f 5f       	subi	r22, 0xFF	; 255
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	ce 01       	movw	r24, r28
    15a4:	8f 70       	andi	r24, 0x0F	; 15
    15a6:	90 78       	andi	r25, 0x80	; 128
    15a8:	99 23       	and	r25, r25
    15aa:	24 f4       	brge	.+8      	; 0x15b4 <add_new_rat_position+0x38>
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	80 6f       	ori	r24, 0xF0	; 240
    15b0:	9f 6f       	ori	r25, 0xFF	; 255
    15b2:	01 96       	adiw	r24, 0x01	; 1
    15b4:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    15b8:	c8 2f       	mov	r28, r24
    15ba:	13 e6       	ldi	r17, 0x63	; 99
    15bc:	1e c0       	rjmp	.+60     	; 0x15fa <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    15be:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
    15c2:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    15c4:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
        test_position = position(x,y);
    15c8:	bc 01       	movw	r22, r24
    15ca:	67 70       	andi	r22, 0x07	; 7
    15cc:	70 78       	andi	r23, 0x80	; 128
    15ce:	77 23       	and	r23, r23
    15d0:	34 f4       	brge	.+12     	; 0x15de <add_new_rat_position+0x62>
    15d2:	61 50       	subi	r22, 0x01	; 1
    15d4:	71 09       	sbc	r23, r1
    15d6:	68 6f       	ori	r22, 0xF8	; 248
    15d8:	7f 6f       	ori	r23, 0xFF	; 255
    15da:	6f 5f       	subi	r22, 0xFF	; 255
    15dc:	7f 4f       	sbci	r23, 0xFF	; 255
    15de:	ce 01       	movw	r24, r28
    15e0:	8f 70       	andi	r24, 0x0F	; 15
    15e2:	90 78       	andi	r25, 0x80	; 128
    15e4:	99 23       	and	r25, r25
    15e6:	24 f4       	brge	.+8      	; 0x15f0 <add_new_rat_position+0x74>
    15e8:	01 97       	sbiw	r24, 0x01	; 1
    15ea:	80 6f       	ori	r24, 0xF0	; 240
    15ec:	9f 6f       	ori	r25, 0xFF	; 255
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    15f4:	c8 2f       	mov	r28, r24
    15f6:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    15f8:	91 f0       	breq	.+36     	; 0x161e <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    15fa:	8c 2f       	mov	r24, r28
    15fc:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    1600:	81 11       	cpse	r24, r1
    1602:	dd cf       	rjmp	.-70     	; 0x15be <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    1604:	8c 2f       	mov	r24, r28
    1606:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_food_at>
    160a:	81 11       	cpse	r24, r1
    160c:	d8 cf       	rjmp	.-80     	; 0x15be <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    160e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <get_superfood_position>
    1612:	8c 17       	cp	r24, r28
    1614:	a1 f2       	breq	.-88     	; 0x15be <add_new_rat_position+0x42>
    1616:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    161a:	8c 17       	cp	r24, r28
    161c:	81 f2       	breq	.-96     	; 0x15be <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    161e:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    1622:	8c 2f       	mov	r24, r28
    1624:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    1628:	c8 2f       	mov	r28, r24
    162a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <rat_position>
    162e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1632:	4c e3       	ldi	r20, 0x3C	; 60
    1634:	6c 2f       	mov	r22, r28
    1636:	0e 94 9b 07 	call	0xf36	; 0xf36 <ledmatrix_update_pixel>
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	1f 91       	pop	r17
    1640:	08 95       	ret

00001642 <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    1642:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    1646:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    164a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    1656:	21 e0       	ldi	r18, 0x01	; 1
    1658:	67 2b       	or	r22, r23
    165a:	68 2b       	or	r22, r24
    165c:	69 2b       	or	r22, r25
    165e:	09 f0       	breq	.+2      	; 0x1662 <is_time_to_move_rat+0x20>
    1660:	20 e0       	ldi	r18, 0x00	; 0
}
    1662:	82 2f       	mov	r24, r18
    1664:	08 95       	ret

00001666 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    1666:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <score>
    166a:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <score+0x1>
    166e:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <score+0x2>
    1672:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <score+0x3>
    1676:	08 95       	ret

00001678 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1678:	40 91 1f 02 	lds	r20, 0x021F	; 0x80021f <score>
    167c:	50 91 20 02 	lds	r21, 0x0220	; 0x800220 <score+0x1>
    1680:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <score+0x2>
    1684:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <score+0x3>
    1688:	48 0f       	add	r20, r24
    168a:	59 1f       	adc	r21, r25
    168c:	61 1d       	adc	r22, r1
    168e:	71 1d       	adc	r23, r1
    1690:	40 93 1f 02 	sts	0x021F, r20	; 0x80021f <score>
    1694:	50 93 20 02 	sts	0x0220, r21	; 0x800220 <score+0x1>
    1698:	60 93 21 02 	sts	0x0221, r22	; 0x800221 <score+0x2>
    169c:	70 93 22 02 	sts	0x0222, r23	; 0x800222 <score+0x3>
    16a0:	08 95       	ret

000016a2 <get_score>:
}

uint32_t get_score(void) {
	return score;
    16a2:	60 91 1f 02 	lds	r22, 0x021F	; 0x80021f <score>
    16a6:	70 91 20 02 	lds	r23, 0x0220	; 0x800220 <score+0x1>
    16aa:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <score+0x2>
    16ae:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <score+0x3>
}
    16b2:	08 95       	ret

000016b4 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    16b4:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    16b8:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <display_string+0x1>
    16bc:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <display_string>
	next_col_ptr = 0;
    16c0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <next_col_ptr+0x1>
    16c4:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <next_col_ptr>
	next_char_to_display = 0;
    16c8:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <next_char_to_display+0x1>
    16cc:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <next_char_to_display>
    16d0:	08 95       	ret

000016d2 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	28 97       	sbiw	r28, 0x08	; 8
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    16ea:	e0 91 28 02 	lds	r30, 0x0228	; 0x800228 <next_col_ptr>
    16ee:	f0 91 29 02 	lds	r31, 0x0229	; 0x800229 <next_col_ptr+0x1>
    16f2:	30 97       	sbiw	r30, 0x00	; 0
    16f4:	81 f0       	breq	.+32     	; 0x1716 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    16f6:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    16f8:	10 ff       	sbrs	r17, 0
    16fa:	06 c0       	rjmp	.+12     	; 0x1708 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    16fc:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <next_col_ptr+0x1>
    1700:	10 92 28 02 	sts	0x0228, r1	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1704:	00 e0       	ldi	r16, 0x00	; 0
    1706:	6b c0       	rjmp	.+214    	; 0x17de <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1708:	31 96       	adiw	r30, 0x01	; 1
    170a:	f0 93 29 02 	sts	0x0229, r31	; 0x800229 <next_col_ptr+0x1>
    170e:	e0 93 28 02 	sts	0x0228, r30	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	64 c0       	rjmp	.+200    	; 0x17de <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1716:	e0 91 24 02 	lds	r30, 0x0224	; 0x800224 <next_char_to_display>
    171a:	f0 91 25 02 	lds	r31, 0x0225	; 0x800225 <next_char_to_display+0x1>
    171e:	30 97       	sbiw	r30, 0x00	; 0
    1720:	09 f4       	brne	.+2      	; 0x1724 <scroll_display+0x52>
    1722:	49 c0       	rjmp	.+146    	; 0x17b6 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1724:	cf 01       	movw	r24, r30
    1726:	01 96       	adiw	r24, 0x01	; 1
    1728:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <next_char_to_display+0x1>
    172c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <next_char_to_display>
    1730:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1732:	e1 11       	cpse	r30, r1
    1734:	0a c0       	rjmp	.+20     	; 0x174a <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1736:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <next_char_to_display+0x1>
    173a:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <next_char_to_display>
			shift_countdown = 16;
    173e:	80 e1       	ldi	r24, 0x10	; 16
    1740:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1744:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1746:	10 e0       	ldi	r17, 0x00	; 0
    1748:	4a c0       	rjmp	.+148    	; 0x17de <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    174a:	8f e9       	ldi	r24, 0x9F	; 159
    174c:	8e 0f       	add	r24, r30
    174e:	8a 31       	cpi	r24, 0x1A	; 26
    1750:	70 f4       	brcc	.+28     	; 0x176e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	ee 0f       	add	r30, r30
    1756:	ff 1f       	adc	r31, r31
    1758:	e8 5f       	subi	r30, 0xF8	; 248
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	85 91       	lpm	r24, Z+
    175e:	94 91       	lpm	r25, Z
    1760:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <next_col_ptr+0x1>
    1764:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1768:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    176a:	10 e0       	ldi	r17, 0x00	; 0
    176c:	38 c0       	rjmp	.+112    	; 0x17de <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    176e:	8f eb       	ldi	r24, 0xBF	; 191
    1770:	8e 0f       	add	r24, r30
    1772:	8a 31       	cpi	r24, 0x1A	; 26
    1774:	70 f4       	brcc	.+28     	; 0x1792 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	e8 5b       	subi	r30, 0xB8	; 184
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	85 91       	lpm	r24, Z+
    1782:	94 91       	lpm	r25, Z
    1784:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <next_col_ptr+0x1>
    1788:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    178c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    178e:	10 e0       	ldi	r17, 0x00	; 0
    1790:	26 c0       	rjmp	.+76     	; 0x17de <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1792:	80 ed       	ldi	r24, 0xD0	; 208
    1794:	8e 0f       	add	r24, r30
    1796:	8a 30       	cpi	r24, 0x0A	; 10
    1798:	00 f5       	brcc	.+64     	; 0x17da <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	ee 0f       	add	r30, r30
    179e:	ff 1f       	adc	r31, r31
    17a0:	ea 5a       	subi	r30, 0xAA	; 170
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	85 91       	lpm	r24, Z+
    17a6:	94 91       	lpm	r25, Z
    17a8:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <next_col_ptr+0x1>
    17ac:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17b0:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17b2:	10 e0       	ldi	r17, 0x00	; 0
    17b4:	14 c0       	rjmp	.+40     	; 0x17de <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    17b6:	80 91 26 02 	lds	r24, 0x0226	; 0x800226 <display_string>
    17ba:	90 91 27 02 	lds	r25, 0x0227	; 0x800227 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17be:	01 e0       	ldi	r16, 0x01	; 1
    17c0:	00 97       	sbiw	r24, 0x00	; 0
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <scroll_display+0xf4>
    17c4:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    17c6:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <next_char_to_display+0x1>
    17ca:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <next_char_to_display>
		display_string = 0;
    17ce:	10 92 27 02 	sts	0x0227, r1	; 0x800227 <display_string+0x1>
    17d2:	10 92 26 02 	sts	0x0226, r1	; 0x800226 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17d6:	10 e0       	ldi	r17, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    17da:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    17dc:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    17de:	0e 94 d7 07 	call	0xfae	; 0xfae <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    17e2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    17e6:	fe 01       	movw	r30, r28
    17e8:	38 96       	adiw	r30, 0x08	; 8
    17ea:	ce 01       	movw	r24, r28
    17ec:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    17ee:	11 23       	and	r17, r17
    17f0:	14 f4       	brge	.+4      	; 0x17f6 <scroll_display+0x124>
			column_colour_data[i] = colour;
    17f2:	20 83       	st	Z, r18
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    17f6:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    17f8:	11 0f       	add	r17, r17
    17fa:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    17fc:	e8 17       	cp	r30, r24
    17fe:	f9 07       	cpc	r31, r25
    1800:	b1 f7       	brne	.-20     	; 0x17ee <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1802:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1804:	be 01       	movw	r22, r28
    1806:	6f 5f       	subi	r22, 0xFF	; 255
    1808:	7f 4f       	sbci	r23, 0xFF	; 255
    180a:	8f e0       	ldi	r24, 0x0F	; 15
    180c:	0e 94 ba 07 	call	0xf74	; 0xf74 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1810:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <shift_countdown.1854>
    1814:	88 23       	and	r24, r24
    1816:	89 f0       	breq	.+34     	; 0x183a <scroll_display+0x168>
		shift_countdown--;
    1818:	81 50       	subi	r24, 0x01	; 1
    181a:	80 93 23 02 	sts	0x0223, r24	; 0x800223 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    181e:	00 23       	and	r16, r16
    1820:	11 f0       	breq	.+4      	; 0x1826 <scroll_display+0x154>
    1822:	88 23       	and	r24, r24
    1824:	11 f0       	breq	.+4      	; 0x182a <scroll_display+0x158>
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <scroll_display+0x15e>
    182a:	91 e0       	ldi	r25, 0x01	; 1
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <scroll_display+0x15e>
    182e:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	99 23       	and	r25, r25
    1834:	29 f0       	breq	.+10     	; 0x1840 <scroll_display+0x16e>
    1836:	80 e0       	ldi	r24, 0x00	; 0
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    183a:	00 23       	and	r16, r16
    183c:	a1 f3       	breq	.-24     	; 0x1826 <scroll_display+0x154>
    183e:	f7 cf       	rjmp	.-18     	; 0x182e <scroll_display+0x15c>
	return !finished;
}
    1840:	28 96       	adiw	r28, 0x08	; 8
    1842:	0f b6       	in	r0, 0x3f	; 63
    1844:	f8 94       	cli
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	0f be       	out	0x3f, r0	; 63
    184a:	cd bf       	out	0x3d, r28	; 61
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	08 95       	ret

00001856 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1856:	cf 93       	push	r28
    1858:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    185a:	8a 30       	cpi	r24, 0x0A	; 10
    185c:	19 f4       	brne	.+6      	; 0x1864 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    185e:	8d e0       	ldi	r24, 0x0D	; 13
    1860:	0e 94 2b 0c 	call	0x1856	; 0x1856 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1864:	9f b7       	in	r25, 0x3f	; 63
    1866:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1868:	02 c0       	rjmp	.+4      	; 0x186e <uart_put_char+0x18>
		if(!interrupts_enabled) {
    186a:	99 23       	and	r25, r25
    186c:	29 f1       	breq	.+74     	; 0x18b8 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    186e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1872:	8f 3f       	cpi	r24, 0xFF	; 255
    1874:	d1 f3       	breq	.-12     	; 0x186a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1876:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1878:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <out_insert_pos>
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	8e 0f       	add	r24, r30
    1880:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <out_insert_pos>
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	e5 58       	subi	r30, 0x85	; 133
    1888:	fd 4f       	sbci	r31, 0xFD	; 253
    188a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    188c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1896:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <out_insert_pos>
    189a:	8f 3f       	cpi	r24, 0xFF	; 255
    189c:	11 f4       	brne	.+4      	; 0x18a2 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    189e:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    18a2:	e1 ec       	ldi	r30, 0xC1	; 193
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	80 62       	ori	r24, 0x20	; 32
    18aa:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    18ac:	99 23       	and	r25, r25
    18ae:	39 f0       	breq	.+14     	; 0x18be <uart_put_char+0x68>
		sei();
    18b0:	78 94       	sei
	}
	return 0;
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
}
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    18c6:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    18ca:	88 23       	and	r24, r24
    18cc:	e1 f3       	breq	.-8      	; 0x18c6 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    18ce:	2f b7       	in	r18, 0x3f	; 63
    18d0:	20 78       	andi	r18, 0x80	; 128
	cli();
    18d2:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    18d4:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <input_insert_pos>
    18d8:	30 91 8c 03 	lds	r19, 0x038C	; 0x80038c <bytes_in_input_buffer>
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	83 1b       	sub	r24, r19
    18e0:	91 09       	sbc	r25, r1
    18e2:	5a f4       	brpl	.+22     	; 0x18fa <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    18e4:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <input_insert_pos>
    18e8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	e8 1b       	sub	r30, r24
    18f0:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    18f2:	e5 57       	subi	r30, 0x75	; 117
    18f4:	fc 4f       	sbci	r31, 0xFC	; 252
    18f6:	80 81       	ld	r24, Z
    18f8:	0a c0       	rjmp	.+20     	; 0x190e <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    18fa:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <input_insert_pos>
    18fe:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	e8 1b       	sub	r30, r24
    1906:	f1 09       	sbc	r31, r1
    1908:	e5 58       	subi	r30, 0x85	; 133
    190a:	fc 4f       	sbci	r31, 0xFC	; 252
    190c:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    190e:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1912:	91 50       	subi	r25, 0x01	; 1
    1914:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1918:	22 23       	and	r18, r18
    191a:	09 f0       	breq	.+2      	; 0x191e <uart_get_char+0x58>
		sei();
    191c:	78 94       	sei
	}	
	return c;
}
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	08 95       	ret

00001922 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1922:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1926:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <bytes_in_out_buffer>
	input_insert_pos = 0;
    192a:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <input_insert_pos>
	bytes_in_input_buffer = 0;
    192e:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <bytes_in_input_buffer>
	input_overrun = 0;
    1932:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1936:	40 93 2a 02 	sts	0x022A, r20	; 0x80022a <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	aa 1f       	adc	r26, r26
    1944:	bb 1f       	adc	r27, r27
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	aa 1f       	adc	r26, r26
    194c:	bb 1f       	adc	r27, r27
    194e:	9c 01       	movw	r18, r24
    1950:	ad 01       	movw	r20, r26
    1952:	22 0f       	add	r18, r18
    1954:	33 1f       	adc	r19, r19
    1956:	44 1f       	adc	r20, r20
    1958:	55 1f       	adc	r21, r21
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	72 e1       	ldi	r23, 0x12	; 18
    195e:	8a e7       	ldi	r24, 0x7A	; 122
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__divmodsi4>
    1966:	ba 01       	movw	r22, r20
    1968:	a9 01       	movw	r20, r18
    196a:	4f 5f       	subi	r20, 0xFF	; 255
    196c:	5f 4f       	sbci	r21, 0xFF	; 255
    196e:	6f 4f       	sbci	r22, 0xFF	; 255
    1970:	7f 4f       	sbci	r23, 0xFF	; 255
    1972:	db 01       	movw	r26, r22
    1974:	ca 01       	movw	r24, r20
    1976:	1a f4       	brpl	.+6      	; 0x197e <init_serial_stdio+0x5c>
    1978:	01 96       	adiw	r24, 0x01	; 1
    197a:	a1 1d       	adc	r26, r1
    197c:	b1 1d       	adc	r27, r1
    197e:	b5 95       	asr	r27
    1980:	a7 95       	ror	r26
    1982:	97 95       	ror	r25
    1984:	87 95       	ror	r24
    1986:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1988:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    198c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1990:	e1 ec       	ldi	r30, 0xC1	; 193
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	88 e1       	ldi	r24, 0x18	; 24
    1996:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1998:	80 81       	ld	r24, Z
    199a:	80 68       	ori	r24, 0x80	; 128
    199c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    199e:	ef e8       	ldi	r30, 0x8F	; 143
    19a0:	f3 e0       	ldi	r31, 0x03	; 3
    19a2:	8f e0       	ldi	r24, 0x0F	; 15
    19a4:	91 e0       	ldi	r25, 0x01	; 1
    19a6:	93 83       	std	Z+3, r25	; 0x03
    19a8:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	80 83       	st	Z, r24
    19ae:	08 95       	ret

000019b0 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    19b0:	90 91 8c 03 	lds	r25, 0x038C	; 0x80038c <bytes_in_input_buffer>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	91 11       	cpse	r25, r1
    19b8:	01 c0       	rjmp	.+2      	; 0x19bc <serial_input_available+0xc>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
}
    19bc:	08 95       	ret

000019be <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    19be:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <input_insert_pos>
	bytes_in_input_buffer = 0;
    19c2:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <bytes_in_input_buffer>
    19c6:	08 95       	ret

000019c8 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    19c8:	1f 92       	push	r1
    19ca:	0f 92       	push	r0
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	0f 92       	push	r0
    19d0:	11 24       	eor	r1, r1
    19d2:	2f 93       	push	r18
    19d4:	8f 93       	push	r24
    19d6:	9f 93       	push	r25
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    19dc:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    19e0:	88 23       	and	r24, r24
    19e2:	29 f1       	breq	.+74     	; 0x1a2e <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    19e4:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <out_insert_pos>
    19e8:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <bytes_in_out_buffer>
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	82 1b       	sub	r24, r18
    19f0:	91 09       	sbc	r25, r1
    19f2:	5a f4       	brpl	.+22     	; 0x1a0a <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    19f4:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <out_insert_pos>
    19f8:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	e8 1b       	sub	r30, r24
    1a00:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1a02:	e6 58       	subi	r30, 0x86	; 134
    1a04:	fc 4f       	sbci	r31, 0xFC	; 252
    1a06:	90 81       	ld	r25, Z
    1a08:	0a c0       	rjmp	.+20     	; 0x1a1e <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1a0a:	e0 91 79 02 	lds	r30, 0x0279	; 0x800279 <out_insert_pos>
    1a0e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	e8 1b       	sub	r30, r24
    1a16:	f1 09       	sbc	r31, r1
    1a18:	e5 58       	subi	r30, 0x85	; 133
    1a1a:	fd 4f       	sbci	r31, 0xFD	; 253
    1a1c:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1a1e:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a22:	81 50       	subi	r24, 0x01	; 1
    1a24:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1a28:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1a2c:	05 c0       	rjmp	.+10     	; 0x1a38 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1a2e:	e1 ec       	ldi	r30, 0xC1	; 193
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	8f 7d       	andi	r24, 0xDF	; 223
    1a36:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1a38:	ff 91       	pop	r31
    1a3a:	ef 91       	pop	r30
    1a3c:	9f 91       	pop	r25
    1a3e:	8f 91       	pop	r24
    1a40:	2f 91       	pop	r18
    1a42:	0f 90       	pop	r0
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	0f 90       	pop	r0
    1a48:	1f 90       	pop	r1
    1a4a:	18 95       	reti

00001a4c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1a4c:	1f 92       	push	r1
    1a4e:	0f 92       	push	r0
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	2f 93       	push	r18
    1a58:	3f 93       	push	r19
    1a5a:	4f 93       	push	r20
    1a5c:	5f 93       	push	r21
    1a5e:	6f 93       	push	r22
    1a60:	7f 93       	push	r23
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	af 93       	push	r26
    1a68:	bf 93       	push	r27
    1a6a:	cf 93       	push	r28
    1a6c:	ef 93       	push	r30
    1a6e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1a70:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1a74:	80 91 2a 02 	lds	r24, 0x022A	; 0x80022a <do_echo>
    1a78:	88 23       	and	r24, r24
    1a7a:	49 f0       	breq	.+18     	; 0x1a8e <__vector_20+0x42>
    1a7c:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <bytes_in_out_buffer>
    1a80:	8f 3f       	cpi	r24, 0xFF	; 255
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	70 e0       	ldi	r23, 0x00	; 0
    1a88:	8c 2f       	mov	r24, r28
    1a8a:	0e 94 2b 0c 	call	0x1856	; 0x1856 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1a8e:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1a92:	80 31       	cpi	r24, 0x10	; 16
    1a94:	20 f0       	brcs	.+8      	; 0x1a9e <__vector_20+0x52>
		input_overrun = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <input_overrun>
    1a9c:	18 c0       	rjmp	.+48     	; 0x1ace <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1a9e:	cd 30       	cpi	r28, 0x0D	; 13
    1aa0:	09 f4       	brne	.+2      	; 0x1aa4 <__vector_20+0x58>
			c = '\n';
    1aa2:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1aa4:	e0 91 7a 03 	lds	r30, 0x037A	; 0x80037a <input_insert_pos>
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	8e 0f       	add	r24, r30
    1aac:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <input_insert_pos>
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	e5 58       	subi	r30, 0x85	; 133
    1ab4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ab6:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1ab8:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <bytes_in_input_buffer>
    1abc:	8f 5f       	subi	r24, 0xFF	; 255
    1abe:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1ac2:	80 91 7a 03 	lds	r24, 0x037A	; 0x80037a <input_insert_pos>
    1ac6:	80 31       	cpi	r24, 0x10	; 16
    1ac8:	11 f4       	brne	.+4      	; 0x1ace <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1aca:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <input_insert_pos>
		}
	}
}
    1ace:	ff 91       	pop	r31
    1ad0:	ef 91       	pop	r30
    1ad2:	cf 91       	pop	r28
    1ad4:	bf 91       	pop	r27
    1ad6:	af 91       	pop	r26
    1ad8:	9f 91       	pop	r25
    1ada:	8f 91       	pop	r24
    1adc:	7f 91       	pop	r23
    1ade:	6f 91       	pop	r22
    1ae0:	5f 91       	pop	r21
    1ae2:	4f 91       	pop	r20
    1ae4:	3f 91       	pop	r19
    1ae6:	2f 91       	pop	r18
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1af2:	0f 93       	push	r16
    1af4:	1f 93       	push	r17
    1af6:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <snakeLength>
	snakeTailIndex = 0;
    1afe:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <snakeTailIndex>
	snakeHeadIndex = 1;
    1b02:	c1 e0       	ldi	r28, 0x01	; 1
    1b04:	c0 93 2e 02 	sts	0x022E, r28	; 0x80022e <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1b08:	61 e0       	ldi	r22, 0x01	; 1
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1b10:	00 e3       	ldi	r16, 0x30	; 48
    1b12:	12 e0       	ldi	r17, 0x02	; 2
    1b14:	f8 01       	movw	r30, r16
    1b16:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1b20:	f8 01       	movw	r30, r16
    1b22:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1b24:	c0 93 2c 02 	sts	0x022C, r28	; 0x80022c <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1b28:	c0 93 2b 02 	sts	0x022B, r28	; 0x80022b <nextSnakeDirn>
}
    1b2c:	cf 91       	pop	r28
    1b2e:	1f 91       	pop	r17
    1b30:	0f 91       	pop	r16
    1b32:	08 95       	ret

00001b34 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1b34:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1b38:	0e 2e       	mov	r0, r30
    1b3a:	00 0c       	add	r0, r0
    1b3c:	ff 0b       	sbc	r31, r31
    1b3e:	e0 5d       	subi	r30, 0xD0	; 208
    1b40:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1b42:	80 81       	ld	r24, Z
    1b44:	08 95       	ret

00001b46 <get_snake_tail_position>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1b46:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <snakeTailIndex>
    1b4a:	0e 2e       	mov	r0, r30
    1b4c:	00 0c       	add	r0, r0
    1b4e:	ff 0b       	sbc	r31, r31
    1b50:	e0 5d       	subi	r30, 0xD0	; 208
    1b52:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1b54:	80 81       	ld	r24, Z
    1b56:	08 95       	ret

00001b58 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1b58:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1b5c:	08 95       	ret

00001b5e <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1b5e:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <snakeTailIndex>
    1b62:	e9 2f       	mov	r30, r25
    1b64:	09 2e       	mov	r0, r25
    1b66:	00 0c       	add	r0, r0
    1b68:	ff 0b       	sbc	r31, r31
    1b6a:	e0 5d       	subi	r30, 0xD0	; 208
    1b6c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b6e:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1b70:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1b72:	91 32       	cpi	r25, 0x21	; 33
    1b74:	19 f0       	breq	.+6      	; 0x1b7c <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1b76:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <snakeTailIndex>
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1b7c:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <snakeTailIndex>
	}
	snakeLength--;
    1b80:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <snakeLength>
    1b84:	91 50       	subi	r25, 0x01	; 1
    1b86:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <snakeLength>
	
	return prev_tail_position;
}
    1b8a:	08 95       	ret

00001b8c <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1b8c:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <curSnakeDirn>
    1b90:	91 30       	cpi	r25, 0x01	; 1
    1b92:	a9 f0       	breq	.+42     	; 0x1bbe <set_snake_dirn+0x32>
    1b94:	28 f0       	brcs	.+10     	; 0x1ba0 <set_snake_dirn+0x14>
    1b96:	92 30       	cpi	r25, 0x02	; 2
    1b98:	41 f0       	breq	.+16     	; 0x1baa <set_snake_dirn+0x1e>
    1b9a:	93 30       	cpi	r25, 0x03	; 3
    1b9c:	59 f0       	breq	.+22     	; 0x1bb4 <set_snake_dirn+0x28>
    1b9e:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	89 f0       	breq	.+34     	; 0x1bc6 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1ba4:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1ba8:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1baa:	88 23       	and	r24, r24
    1bac:	61 f0       	breq	.+24     	; 0x1bc6 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1bae:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1bb2:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	39 f0       	breq	.+14     	; 0x1bc6 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1bb8:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1bbc:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1bbe:	83 30       	cpi	r24, 0x03	; 3
    1bc0:	11 f0       	breq	.+4      	; 0x1bc6 <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1bc2:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <nextSnakeDirn>
    1bc6:	08 95       	ret

00001bc8 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1bc8:	90 91 2d 02 	lds	r25, 0x022D	; 0x80022d <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1bcc:	30 91 2e 02 	lds	r19, 0x022E	; 0x80022e <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1bd2:	0d c0       	rjmp	.+26     	; 0x1bee <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1bd4:	e9 2f       	mov	r30, r25
    1bd6:	09 2e       	mov	r0, r25
    1bd8:	00 0c       	add	r0, r0
    1bda:	ff 0b       	sbc	r31, r31
    1bdc:	e0 5d       	subi	r30, 0xD0	; 208
    1bde:	fd 4f       	sbci	r31, 0xFD	; 253
    1be0:	20 81       	ld	r18, Z
    1be2:	28 17       	cp	r18, r24
    1be4:	89 f0       	breq	.+34     	; 0x1c08 <is_snake_at+0x40>
    1be6:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1be8:	91 32       	cpi	r25, 0x21	; 33
    1bea:	0c f0       	brlt	.+2      	; 0x1bee <is_snake_at+0x26>
			index = 0;
    1bec:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1bee:	93 13       	cpse	r25, r19
    1bf0:	f1 cf       	rjmp	.-30     	; 0x1bd4 <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1bf2:	e3 2f       	mov	r30, r19
    1bf4:	33 0f       	add	r19, r19
    1bf6:	ff 0b       	sbc	r31, r31
    1bf8:	e0 5d       	subi	r30, 0xD0	; 208
    1bfa:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1bfc:	91 e0       	ldi	r25, 0x01	; 1
    1bfe:	20 81       	ld	r18, Z
    1c00:	28 17       	cp	r18, r24
    1c02:	19 f0       	breq	.+6      	; 0x1c0a <is_snake_at+0x42>
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	01 c0       	rjmp	.+2      	; 0x1c0a <is_snake_at+0x42>
    1c08:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1c0a:	89 2f       	mov	r24, r25
    1c0c:	08 95       	ret

00001c0e <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1c12:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1c16:	81 32       	cpi	r24, 0x21	; 33
    1c18:	08 f0       	brcs	.+2      	; 0x1c1c <advance_snake_head+0xe>
    1c1a:	96 c0       	rjmp	.+300    	; 0x1d48 <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1c1c:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1c20:	0e 2e       	mov	r0, r30
    1c22:	00 0c       	add	r0, r0
    1c24:	ff 0b       	sbc	r31, r31
    1c26:	e0 5d       	subi	r30, 0xD0	; 208
    1c28:	fd 4f       	sbci	r31, 0xFD	; 253
    1c2a:	80 81       	ld	r24, Z
    1c2c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1c30:	d8 2f       	mov	r29, r24
    1c32:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1c34:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1c38:	0e 2e       	mov	r0, r30
    1c3a:	00 0c       	add	r0, r0
    1c3c:	ff 0b       	sbc	r31, r31
    1c3e:	e0 5d       	subi	r30, 0xD0	; 208
    1c40:	fd 4f       	sbci	r31, 0xFD	; 253
    1c42:	80 81       	ld	r24, Z
    1c44:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    1c48:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1c4a:	90 91 2b 02 	lds	r25, 0x022B	; 0x80022b <nextSnakeDirn>
    1c4e:	91 30       	cpi	r25, 0x01	; 1
    1c50:	59 f0       	breq	.+22     	; 0x1c68 <advance_snake_head+0x5a>
    1c52:	28 f0       	brcs	.+10     	; 0x1c5e <advance_snake_head+0x50>
    1c54:	92 30       	cpi	r25, 0x02	; 2
    1c56:	69 f0       	breq	.+26     	; 0x1c72 <advance_snake_head+0x64>
    1c58:	93 30       	cpi	r25, 0x03	; 3
    1c5a:	81 f0       	breq	.+32     	; 0x1c7c <advance_snake_head+0x6e>
    1c5c:	1b c0       	rjmp	.+54     	; 0x1c94 <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1c5e:	87 30       	cpi	r24, 0x07	; 7
    1c60:	91 f0       	breq	.+36     	; 0x1c86 <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    1c62:	61 e0       	ldi	r22, 0x01	; 1
    1c64:	68 0f       	add	r22, r24
    1c66:	16 c0       	rjmp	.+44     	; 0x1c94 <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1c68:	df 30       	cpi	r29, 0x0F	; 15
    1c6a:	79 f0       	breq	.+30     	; 0x1c8a <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1c6c:	c1 e0       	ldi	r28, 0x01	; 1
    1c6e:	cd 0f       	add	r28, r29
    1c70:	11 c0       	rjmp	.+34     	; 0x1c94 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    1c72:	88 23       	and	r24, r24
    1c74:	61 f0       	breq	.+24     	; 0x1c8e <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    1c76:	6f ef       	ldi	r22, 0xFF	; 255
    1c78:	68 0f       	add	r22, r24
    1c7a:	0c c0       	rjmp	.+24     	; 0x1c94 <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    1c7c:	dd 23       	and	r29, r29
    1c7e:	49 f0       	breq	.+18     	; 0x1c92 <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    1c80:	cf ef       	ldi	r28, 0xFF	; 255
    1c82:	cd 0f       	add	r28, r29
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1c86:	60 e0       	ldi	r22, 0x00	; 0
    1c88:	05 c0       	rjmp	.+10     	; 0x1c94 <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1c8a:	c0 e0       	ldi	r28, 0x00	; 0
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    1c8e:	67 e0       	ldi	r22, 0x07	; 7
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    1c92:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    1c94:	8c 2f       	mov	r24, r28
    1c96:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1c9a:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    1c9c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <nextSnakeDirn>
    1ca0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <curSnakeDirn>
    1ca4:	98 17       	cp	r25, r24
    1ca6:	41 f0       	breq	.+16     	; 0x1cb8 <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1ca8:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    1cac:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
    1cb0:	89 2b       	or	r24, r25
    1cb2:	11 f0       	breq	.+4      	; 0x1cb8 <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    1cb4:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1cb8:	8c 2f       	mov	r24, r28
    1cba:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <is_snake_at>
    1cbe:	88 23       	and	r24, r24
    1cc0:	51 f0       	breq	.+20     	; 0x1cd6 <advance_snake_head+0xc8>
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1cc2:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <snakeTailIndex>
    1cc6:	0e 2e       	mov	r0, r30
    1cc8:	00 0c       	add	r0, r0
    1cca:	ff 0b       	sbc	r31, r31
    1ccc:	e0 5d       	subi	r30, 0xD0	; 208
    1cce:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1cd0:	80 81       	ld	r24, Z
    1cd2:	c8 13       	cpse	r28, r24
    1cd4:	3b c0       	rjmp	.+118    	; 0x1d4c <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1cd6:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <snakeHeadIndex>
    1cda:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1cdc:	81 32       	cpi	r24, 0x21	; 33
    1cde:	19 f0       	breq	.+6      	; 0x1ce6 <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1ce0:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <snakeHeadIndex>
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1ce6:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1cea:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1cee:	0e 2e       	mov	r0, r30
    1cf0:	00 0c       	add	r0, r0
    1cf2:	ff 0b       	sbc	r31, r31
    1cf4:	e0 5d       	subi	r30, 0xD0	; 208
    1cf6:	fd 4f       	sbci	r31, 0xFD	; 253
    1cf8:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1cfa:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1cfe:	8f 5f       	subi	r24, 0xFF	; 255
    1d00:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    1d04:	8c 2f       	mov	r24, r28
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	0e 94 b7 0a 	call	0x156e	; 0x156e <is_rat_at>
    1d0c:	89 2b       	or	r24, r25
    1d0e:	31 f0       	breq	.+12     	; 0x1d1c <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1d10:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d14:	81 32       	cpi	r24, 0x21	; 33
    1d16:	e0 f0       	brcs	.+56     	; 0x1d50 <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    1d18:	87 e0       	ldi	r24, 0x07	; 7
    1d1a:	21 c0       	rjmp	.+66     	; 0x1d5e <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    1d1c:	8c 2f       	mov	r24, r28
    1d1e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <is_superfood_at>
    1d22:	88 23       	and	r24, r24
    1d24:	31 f0       	breq	.+12     	; 0x1d32 <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1d26:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d2a:	81 32       	cpi	r24, 0x21	; 33
    1d2c:	98 f0       	brcs	.+38     	; 0x1d54 <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    1d2e:	85 e0       	ldi	r24, 0x05	; 5
    1d30:	16 c0       	rjmp	.+44     	; 0x1d5e <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    1d32:	8c 2f       	mov	r24, r28
    1d34:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_food_at>
    1d38:	88 23       	and	r24, r24
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1d3c:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <snakeLength>
    1d40:	81 32       	cpi	r24, 0x21	; 33
    1d42:	60 f0       	brcs	.+24     	; 0x1d5c <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	0b c0       	rjmp	.+22     	; 0x1d5e <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    1d48:	8d ef       	ldi	r24, 0xFD	; 253
    1d4a:	09 c0       	rjmp	.+18     	; 0x1d5e <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1d4c:	8e ef       	ldi	r24, 0xFE	; 254
    1d4e:	07 c0       	rjmp	.+14     	; 0x1d5e <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    1d50:	86 e0       	ldi	r24, 0x06	; 6
    1d52:	05 c0       	rjmp	.+10     	; 0x1d5e <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    1d54:	84 e0       	ldi	r24, 0x04	; 4
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	01 c0       	rjmp	.+2      	; 0x1d5e <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    1d5c:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <get_snake_in_order>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1d64:	e0 91 2d 02 	lds	r30, 0x022D	; 0x80022d <snakeTailIndex>
    1d68:	0e 2e       	mov	r0, r30
    1d6a:	00 0c       	add	r0, r0
    1d6c:	ff 0b       	sbc	r31, r31
    1d6e:	e0 5d       	subi	r30, 0xD0	; 208
    1d70:	fd 4f       	sbci	r31, 0xFD	; 253
    1d72:	20 81       	ld	r18, Z
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1d74:	e0 91 2e 02 	lds	r30, 0x022E	; 0x80022e <snakeHeadIndex>
    1d78:	0e 2e       	mov	r0, r30
    1d7a:	00 0c       	add	r0, r0
    1d7c:	ff 0b       	sbc	r31, r31
    1d7e:	e0 5d       	subi	r30, 0xD0	; 208
    1d80:	fd 4f       	sbci	r31, 0xFD	; 253
    1d82:	80 81       	ld	r24, Z
	/* Snake does not occupy the given position */
	return 0;
}
PosnType* get_snake_in_order(void){
	PosnType snake_order[get_snake_length()+1]; 
	if (get_snake_tail_position()> get_snake_head_position()){
    1d84:	82 17       	cp	r24, r18
    1d86:	70 f4       	brcc	.+28     	; 0x1da4 <get_snake_in_order+0x40>
		//SSSH-------------------------TSSS
		int a = 0; 
		for (int i = get_snake_head_position(); i>=0; i--){
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f2 f7       	brpl	.-4      	; 0x1d8a <get_snake_in_order+0x26>
			snake_order[a] = snakePositions[i]; 
			a++;
		}
		for (int i = SNAKE_POSITION_ARRAY_SIZE-1; i>= get_snake_tail_position(); i--){
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	21 32       	cpi	r18, 0x21	; 33
    1d92:	31 05       	cpc	r19, r1
    1d94:	94 f4       	brge	.+36     	; 0x1dba <get_snake_in_order+0x56>
    1d96:	80 e2       	ldi	r24, 0x20	; 32
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	82 17       	cp	r24, r18
    1d9e:	93 07       	cpc	r25, r19
    1da0:	e4 f7       	brge	.-8      	; 0x1d9a <get_snake_in_order+0x36>
    1da2:	0b c0       	rjmp	.+22     	; 0x1dba <get_snake_in_order+0x56>
			snake_order[a] = snakePositions[i];
			a++;
		}
	}else{
		for(int i =get_snake_tail_position(); i<get_snake_head_position()+1; i++){
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	28 17       	cp	r18, r24
    1dac:	39 07       	cpc	r19, r25
    1dae:	2c f4       	brge	.+10     	; 0x1dba <get_snake_in_order+0x56>
    1db0:	2f 5f       	subi	r18, 0xFF	; 255
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	28 17       	cp	r18, r24
    1db6:	39 07       	cpc	r19, r25
    1db8:	dc f3       	brlt	.-10     	; 0x1db0 <get_snake_in_order+0x4c>
			snake_order[i-get_snake_tail_position()] = snakePositions[i];
		}
	}
	return snake_order;
}
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	08 95       	ret

00001dc0 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1dc0:	94 b1       	in	r25, 0x04	; 4
    1dc2:	90 6b       	ori	r25, 0xB0	; 176
    1dc4:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1dc6:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1dc8:	90 e5       	ldi	r25, 0x50	; 80
    1dca:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1dcc:	88 30       	cpi	r24, 0x08	; 8
    1dce:	21 f0       	breq	.+8      	; 0x1dd8 <spi_setup_master+0x18>
    1dd0:	80 32       	cpi	r24, 0x20	; 32
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <spi_setup_master+0x18>
    1dd4:	82 30       	cpi	r24, 0x02	; 2
    1dd6:	19 f4       	brne	.+6      	; 0x1dde <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	9d bd       	out	0x2d, r25	; 45
			break;
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1dde:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1de0:	80 32       	cpi	r24, 0x20	; 32
    1de2:	69 f0       	breq	.+26     	; 0x1dfe <spi_setup_master+0x3e>
    1de4:	28 f4       	brcc	.+10     	; 0x1df0 <spi_setup_master+0x30>
    1de6:	88 30       	cpi	r24, 0x08	; 8
    1de8:	71 f0       	breq	.+28     	; 0x1e06 <spi_setup_master+0x46>
    1dea:	80 31       	cpi	r24, 0x10	; 16
    1dec:	61 f0       	breq	.+24     	; 0x1e06 <spi_setup_master+0x46>
    1dee:	0e c0       	rjmp	.+28     	; 0x1e0c <spi_setup_master+0x4c>
    1df0:	80 34       	cpi	r24, 0x40	; 64
    1df2:	29 f0       	breq	.+10     	; 0x1dfe <spi_setup_master+0x3e>
    1df4:	80 38       	cpi	r24, 0x80	; 128
    1df6:	51 f4       	brne	.+20     	; 0x1e0c <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1df8:	8c b5       	in	r24, 0x2c	; 44
    1dfa:	81 60       	ori	r24, 0x01	; 1
    1dfc:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1dfe:	8c b5       	in	r24, 0x2c	; 44
    1e00:	82 60       	ori	r24, 0x02	; 2
    1e02:	8c bd       	out	0x2c, r24	; 44
			break;
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1e06:	8c b5       	in	r24, 0x2c	; 44
    1e08:	81 60       	ori	r24, 0x01	; 1
    1e0a:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1e0c:	2c 98       	cbi	0x05, 4	; 5
    1e0e:	08 95       	ret

00001e10 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    1e10:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1e12:	0d b4       	in	r0, 0x2d	; 45
    1e14:	07 fe       	sbrs	r0, 7
    1e16:	fd cf       	rjmp	.-6      	; 0x1e12 <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1e18:	8e b5       	in	r24, 0x2e	; 46
    1e1a:	08 95       	ret

00001e1c <superfood_is_on_board>:
	superfood_on_board = 1;
}

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    1e1c:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <superfood_on_board>
    1e20:	08 95       	ret

00001e22 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    1e22:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    1e26:	68 59       	subi	r22, 0x98	; 152
    1e28:	7a 43       	sbci	r23, 0x3A	; 58
    1e2a:	81 09       	sbc	r24, r1
    1e2c:	91 09       	sbc	r25, r1
    1e2e:	20 e2       	ldi	r18, 0x20	; 32
    1e30:	3e e4       	ldi	r19, 0x4E	; 78
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	50 e0       	ldi	r21, 0x00	; 0
    1e36:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    1e3a:	67 2b       	or	r22, r23
    1e3c:	68 2b       	or	r22, r24
    1e3e:	69 2b       	or	r22, r25
    1e40:	21 f4       	brne	.+8      	; 0x1e4a <time_to_add_superfood+0x28>
    1e42:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	08 95       	ret
    1e4a:	80 e0       	ldi	r24, 0x00	; 0
}
    1e4c:	08 95       	ret

00001e4e <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    1e4e:	0e 94 9d 10 	call	0x213a	; 0x213a <get_clock_ticks>
    1e52:	20 e2       	ldi	r18, 0x20	; 32
    1e54:	3e e4       	ldi	r19, 0x4E	; 78
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    1e5e:	21 e0       	ldi	r18, 0x01	; 1
    1e60:	67 2b       	or	r22, r23
    1e62:	68 2b       	or	r22, r24
    1e64:	69 2b       	or	r22, r25
    1e66:	09 f0       	breq	.+2      	; 0x1e6a <time_to_remove_superfood+0x1c>
    1e68:	20 e0       	ldi	r18, 0x00	; 0
}
    1e6a:	82 2f       	mov	r24, r18
    1e6c:	08 95       	ret

00001e6e <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_YELLOW);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    1e6e:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    1e70:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1e74:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    1e78:	c8 2f       	mov	r28, r24
    1e7a:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1e7e:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1e82:	40 e0       	ldi	r20, 0x00	; 0
    1e84:	6c 2f       	mov	r22, r28
    1e86:	0e 94 9b 07 	call	0xf36	; 0xf36 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1e92:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <superfood_position>
	superfood_on_board = 0; 
    1e96:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <superfood_on_board>
}
    1e9a:	cf 91       	pop	r28
    1e9c:	08 95       	ret

00001e9e <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    1e9e:	60 e0       	ldi	r22, 0x00	; 0
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
    1ea2:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1ea6:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <superfood_position>
	superfood_on_board = 0;
    1eaa:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <superfood_on_board>
    1eae:	08 95       	ret

00001eb0 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    1eb0:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1eb4:	08 95       	ret

00001eb6 <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    1eb6:	90 91 8e 03 	lds	r25, 0x038E	; 0x80038e <superfood_on_board>
    1eba:	99 23       	and	r25, r25
    1ebc:	39 f0       	breq	.+14     	; 0x1ecc <is_superfood_at+0x16>
    1ebe:	91 e0       	ldi	r25, 0x01	; 1
    1ec0:	20 91 8d 03 	lds	r18, 0x038D	; 0x80038d <superfood_position>
    1ec4:	28 13       	cpse	r18, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	89 2f       	mov	r24, r25
    1eca:	08 95       	ret
    1ecc:	80 e0       	ldi	r24, 0x00	; 0
}
    1ece:	08 95       	ret

00001ed0 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    1ed6:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1eda:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
    1ede:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1ee0:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
		test_position = position(x,y);
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	67 70       	andi	r22, 0x07	; 7
    1ee8:	70 78       	andi	r23, 0x80	; 128
    1eea:	77 23       	and	r23, r23
    1eec:	34 f4       	brge	.+12     	; 0x1efa <add_superfood_to_board+0x2a>
    1eee:	61 50       	subi	r22, 0x01	; 1
    1ef0:	71 09       	sbc	r23, r1
    1ef2:	68 6f       	ori	r22, 0xF8	; 248
    1ef4:	7f 6f       	ori	r23, 0xFF	; 255
    1ef6:	6f 5f       	subi	r22, 0xFF	; 255
    1ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    1efa:	ce 01       	movw	r24, r28
    1efc:	8f 70       	andi	r24, 0x0F	; 15
    1efe:	90 78       	andi	r25, 0x80	; 128
    1f00:	99 23       	and	r25, r25
    1f02:	24 f4       	brge	.+8      	; 0x1f0c <add_superfood_to_board+0x3c>
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	80 6f       	ori	r24, 0xF0	; 240
    1f08:	9f 6f       	ori	r25, 0xFF	; 255
    1f0a:	01 96       	adiw	r24, 0x01	; 1
    1f0c:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1f10:	c8 2f       	mov	r28, r24
    1f12:	13 e6       	ldi	r17, 0x63	; 99
    1f14:	1e c0       	rjmp	.+60     	; 0x1f52 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1f16:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
    1f1a:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1f1c:	0e 94 e6 12 	call	0x25cc	; 0x25cc <rand>
		test_position = position(x,y);
    1f20:	bc 01       	movw	r22, r24
    1f22:	67 70       	andi	r22, 0x07	; 7
    1f24:	70 78       	andi	r23, 0x80	; 128
    1f26:	77 23       	and	r23, r23
    1f28:	34 f4       	brge	.+12     	; 0x1f36 <add_superfood_to_board+0x66>
    1f2a:	61 50       	subi	r22, 0x01	; 1
    1f2c:	71 09       	sbc	r23, r1
    1f2e:	68 6f       	ori	r22, 0xF8	; 248
    1f30:	7f 6f       	ori	r23, 0xFF	; 255
    1f32:	6f 5f       	subi	r22, 0xFF	; 255
    1f34:	7f 4f       	sbci	r23, 0xFF	; 255
    1f36:	ce 01       	movw	r24, r28
    1f38:	8f 70       	andi	r24, 0x0F	; 15
    1f3a:	90 78       	andi	r25, 0x80	; 128
    1f3c:	99 23       	and	r25, r25
    1f3e:	24 f4       	brge	.+8      	; 0x1f48 <add_superfood_to_board+0x78>
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	80 6f       	ori	r24, 0xF0	; 240
    1f44:	9f 6f       	ori	r25, 0xFF	; 255
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	0e 94 ed 07 	call	0xfda	; 0xfda <position>
    1f4c:	c8 2f       	mov	r28, r24
    1f4e:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1f50:	a1 f0       	breq	.+40     	; 0x1f7a <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    1f52:	8c 2f       	mov	r24, r28
    1f54:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    1f58:	81 11       	cpse	r24, r1
    1f5a:	dd cf       	rjmp	.-70     	; 0x1f16 <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    1f5c:	8c 2f       	mov	r24, r28
    1f5e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <is_food_at>
    1f62:	81 11       	cpse	r24, r1
    1f64:	d8 cf       	rjmp	.-80     	; 0x1f16 <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    1f66:	8c 2f       	mov	r24, r28
    1f68:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <is_superfood_at>
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	d3 cf       	rjmp	.-90     	; 0x1f16 <add_superfood_to_board+0x46>
    1f70:	8c 2f       	mov	r24, r28
    1f72:	0e 94 b7 0a 	call	0x156e	; 0x156e <is_rat_at>
    1f76:	81 11       	cpse	r24, r1
    1f78:	ce cf       	rjmp	.-100    	; 0x1f16 <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    1f7a:	c0 93 8d 03 	sts	0x038D, r28	; 0x80038d <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_YELLOW);
    1f7e:	8c 2f       	mov	r24, r28
    1f80:	0e 94 e5 07 	call	0xfca	; 0xfca <y_position>
    1f84:	c8 2f       	mov	r28, r24
    1f86:	80 91 8d 03 	lds	r24, 0x038D	; 0x80038d <superfood_position>
    1f8a:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <x_position>
    1f8e:	4f ef       	ldi	r20, 0xFF	; 255
    1f90:	6c 2f       	mov	r22, r28
    1f92:	0e 94 9b 07 	call	0xf36	; 0xf36 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	80 93 8e 03 	sts	0x038E, r24	; 0x80038e <superfood_on_board>
}
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	08 95       	ret

00001fa4 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	08 2e       	mov	r0, r24
    1fa8:	00 0c       	add	r0, r0
    1faa:	33 0b       	sbc	r19, r19
    1fac:	3f 93       	push	r19
    1fae:	8f 93       	push	r24
    1fb0:	86 2f       	mov	r24, r22
    1fb2:	06 2e       	mov	r0, r22
    1fb4:	00 0c       	add	r0, r0
    1fb6:	99 0b       	sbc	r25, r25
    1fb8:	9f 93       	push	r25
    1fba:	6f 93       	push	r22
    1fbc:	8d ed       	ldi	r24, 0xDD	; 221
    1fbe:	91 e0       	ldi	r25, 0x01	; 1
    1fc0:	9f 93       	push	r25
    1fc2:	8f 93       	push	r24
    1fc4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	08 95       	ret

00001fd6 <clear_terminal>:
    1fd6:	88 ed       	ldi	r24, 0xD8	; 216
    1fd8:	91 e0       	ldi	r25, 0x01	; 1
    1fda:	9f 93       	push	r25
    1fdc:	8f 93       	push	r24
    1fde:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	08 95       	ret

00001fe8 <set_display_attribute>:
    1fe8:	1f 92       	push	r1
    1fea:	8f 93       	push	r24
    1fec:	82 ed       	ldi	r24, 0xD2	; 210
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	9f 93       	push	r25
    1ff2:	8f 93       	push	r24
    1ff4:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	08 95       	ret

00002002 <hide_cursor>:
    2002:	8b ec       	ldi	r24, 0xCB	; 203
    2004:	91 e0       	ldi	r25, 0x01	; 1
    2006:	9f 93       	push	r25
    2008:	8f 93       	push	r24
    200a:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	08 95       	ret

00002014 <show_cursor>:
    2014:	84 ec       	ldi	r24, 0xC4	; 196
    2016:	91 e0       	ldi	r25, 0x01	; 1
    2018:	9f 93       	push	r25
    201a:	8f 93       	push	r24
    201c:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	08 95       	ret

00002026 <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    2026:	63 e0       	ldi	r22, 0x03	; 3
    2028:	83 e0       	ldi	r24, 0x03	; 3
    202a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf_P(PSTR("Snake"));
    202e:	8e eb       	ldi	r24, 0xBE	; 190
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	9f 93       	push	r25
    2034:	8f 93       	push	r24
    2036:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>

	move_cursor(3,5);
    203a:	65 e0       	ldi	r22, 0x05	; 5
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    2042:	80 e2       	ldi	r24, 0x20	; 32
    2044:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    2048:	84 e9       	ldi	r24, 0x94	; 148
    204a:	91 e0       	ldi	r25, 0x01	; 1
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	0e 94 ec 13 	call	0x27d8	; 0x27d8 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    2054:	85 e2       	ldi	r24, 0x25	; 37
    2056:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <set_display_attribute>
	display_EEPROM_high_score();
    205a:	0e 94 15 05 	call	0xa2a	; 0xa2a <display_EEPROM_high_score>
}
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	08 95       	ret

00002068 <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    2068:	0e 94 01 10 	call	0x2002	; 0x2002 <hide_cursor>
	
	move_cursor(10,1);
    206c:	61 e0       	ldi	r22, 0x01	; 1
    206e:	8a e0       	ldi	r24, 0x0A	; 10
    2070:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf("Snake");
    2074:	8f ef       	ldi	r24, 0xFF	; 255
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	9f 93       	push	r25
    207a:	8f 93       	push	r24
    207c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>

	move_cursor(1,3);
    2080:	63 e0       	ldi	r22, 0x03	; 3
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf("Score: 0", get_score());
    2088:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
    208c:	9f 93       	push	r25
    208e:	8f 93       	push	r24
    2090:	7f 93       	push	r23
    2092:	6f 93       	push	r22
    2094:	85 e0       	ldi	r24, 0x05	; 5
    2096:	92 e0       	ldi	r25, 0x02	; 2
    2098:	9f 93       	push	r25
    209a:	8f 93       	push	r24
    209c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
	move_cursor(10,3);
    20a0:	63 e0       	ldi	r22, 0x03	; 3
    20a2:	8a e0       	ldi	r24, 0x0A	; 10
    20a4:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
}
    20a8:	8d b7       	in	r24, 0x3d	; 61
    20aa:	9e b7       	in	r25, 0x3e	; 62
    20ac:	08 96       	adiw	r24, 0x08	; 8
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	9e bf       	out	0x3e, r25	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	8d bf       	out	0x3d, r24	; 61
    20b8:	08 95       	ret

000020ba <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    20ba:	0e 94 01 10 	call	0x2002	; 0x2002 <hide_cursor>
	move_cursor(1,3);
    20be:	63 e0       	ldi	r22, 0x03	; 3
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <move_cursor>
	printf("Score: %u", get_score());
    20c6:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <get_score>
    20ca:	9f 93       	push	r25
    20cc:	8f 93       	push	r24
    20ce:	7f 93       	push	r23
    20d0:	6f 93       	push	r22
    20d2:	85 ef       	ldi	r24, 0xF5	; 245
    20d4:	91 e0       	ldi	r25, 0x01	; 1
    20d6:	9f 93       	push	r25
    20d8:	8f 93       	push	r24
    20da:	0e 94 d6 13 	call	0x27ac	; 0x27ac <printf>
}
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	0f 90       	pop	r0
    20e6:	0f 90       	pop	r0
    20e8:	0f 90       	pop	r0
    20ea:	08 95       	ret

000020ec <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    20ec:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <clock_ticks>
    20f0:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <clock_ticks+0x1>
    20f4:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <clock_ticks+0x2>
    20f8:	10 92 54 02 	sts	0x0254, r1	; 0x800254 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    20fc:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    20fe:	8c e7       	ldi	r24, 0x7C	; 124
    2100:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    2102:	82 e0       	ldi	r24, 0x02	; 2
    2104:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    210a:	ee e6       	ldi	r30, 0x6E	; 110
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	82 60       	ori	r24, 0x02	; 2
    2112:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    2114:	85 b3       	in	r24, 0x15	; 21
    2116:	82 70       	andi	r24, 0x02	; 2
    2118:	85 bb       	out	0x15, r24	; 21
    211a:	08 95       	ret

0000211c <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	//unpaused_game = 1- unpaused_game;
	TIMSK0 ^= (1<<OCIE0A);
    211c:	ee e6       	ldi	r30, 0x6E	; 110
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	90 81       	ld	r25, Z
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	89 27       	eor	r24, r25
    2126:	80 83       	st	Z, r24
    2128:	08 95       	ret

0000212a <timer_is_paused>:
}
int timer_is_paused(void){
	//return !unpaused_game;
	return !(TIMSK0 & (1<<OCIE0A)); 
    212a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    212e:	86 95       	lsr	r24
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	89 27       	eor	r24, r25
}
    2134:	81 70       	andi	r24, 0x01	; 1
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	08 95       	ret

0000213a <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    213a:	2f b7       	in	r18, 0x3f	; 63
	cli();
    213c:	f8 94       	cli
	return_value = clock_ticks;
    213e:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <clock_ticks>
    2142:	70 91 52 02 	lds	r23, 0x0252	; 0x800252 <clock_ticks+0x1>
    2146:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <clock_ticks+0x2>
    214a:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <clock_ticks+0x3>
	if(interrupts_were_on) {
    214e:	22 23       	and	r18, r18
    2150:	0c f4       	brge	.+2      	; 0x2154 <get_clock_ticks+0x1a>
		sei();
    2152:	78 94       	sei
	}
	return return_value;
}
    2154:	08 95       	ret

00002156 <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    2156:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <SSD_CC_value>
    215a:	88 23       	and	r24, r24
    215c:	81 f0       	breq	.+32     	; 0x217e <display_SSD_value+0x28>
		PORTD |= (1<<2);
    215e:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    2160:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <get_snake_length>
    2164:	ed ec       	ldi	r30, 0xCD	; 205
    2166:	8e 9f       	mul	r24, r30
    2168:	e1 2d       	mov	r30, r1
    216a:	11 24       	eor	r1, r1
    216c:	e6 95       	lsr	r30
    216e:	e6 95       	lsr	r30
    2170:	e6 95       	lsr	r30
    2172:	f0 e0       	ldi	r31, 0x00	; 0
    2174:	e9 5d       	subi	r30, 0xD9	; 217
    2176:	fe 4f       	sbci	r31, 0xFE	; 254
    2178:	80 81       	ld	r24, Z
    217a:	82 b9       	out	0x02, r24	; 2
    217c:	16 c0       	rjmp	.+44     	; 0x21aa <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    217e:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    2180:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <get_snake_length>
    2184:	9d ec       	ldi	r25, 0xCD	; 205
    2186:	89 9f       	mul	r24, r25
    2188:	91 2d       	mov	r25, r1
    218a:	11 24       	eor	r1, r1
    218c:	96 95       	lsr	r25
    218e:	96 95       	lsr	r25
    2190:	96 95       	lsr	r25
    2192:	99 0f       	add	r25, r25
    2194:	29 2f       	mov	r18, r25
    2196:	22 0f       	add	r18, r18
    2198:	22 0f       	add	r18, r18
    219a:	92 0f       	add	r25, r18
    219c:	89 1b       	sub	r24, r25
    219e:	e8 2f       	mov	r30, r24
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	e3 5e       	subi	r30, 0xE3	; 227
    21a4:	fe 4f       	sbci	r31, 0xFE	; 254
    21a6:	80 81       	ld	r24, Z
    21a8:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    21aa:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <SSD_CC_value>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	89 1b       	sub	r24, r25
    21b2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <SSD_CC_value>
    21b6:	08 95       	ret

000021b8 <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    21b8:	1f 92       	push	r1
    21ba:	0f 92       	push	r0
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	0f 92       	push	r0
    21c0:	11 24       	eor	r1, r1
    21c2:	2f 93       	push	r18
    21c4:	3f 93       	push	r19
    21c6:	4f 93       	push	r20
    21c8:	5f 93       	push	r21
    21ca:	6f 93       	push	r22
    21cc:	7f 93       	push	r23
    21ce:	8f 93       	push	r24
    21d0:	9f 93       	push	r25
    21d2:	af 93       	push	r26
    21d4:	bf 93       	push	r27
    21d6:	ef 93       	push	r30
    21d8:	ff 93       	push	r31
	// TODO: 
	clock_ticks++;
    21da:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <clock_ticks>
    21de:	90 91 52 02 	lds	r25, 0x0252	; 0x800252 <clock_ticks+0x1>
    21e2:	a0 91 53 02 	lds	r26, 0x0253	; 0x800253 <clock_ticks+0x2>
    21e6:	b0 91 54 02 	lds	r27, 0x0254	; 0x800254 <clock_ticks+0x3>
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	a1 1d       	adc	r26, r1
    21ee:	b1 1d       	adc	r27, r1
    21f0:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <clock_ticks>
    21f4:	90 93 52 02 	sts	0x0252, r25	; 0x800252 <clock_ticks+0x1>
    21f8:	a0 93 53 02 	sts	0x0253, r26	; 0x800253 <clock_ticks+0x2>
    21fc:	b0 93 54 02 	sts	0x0254, r27	; 0x800254 <clock_ticks+0x3>
	display_SSD_value();
    2200:	0e 94 ab 10 	call	0x2156	; 0x2156 <display_SSD_value>
}
    2204:	ff 91       	pop	r31
    2206:	ef 91       	pop	r30
    2208:	bf 91       	pop	r27
    220a:	af 91       	pop	r26
    220c:	9f 91       	pop	r25
    220e:	8f 91       	pop	r24
    2210:	7f 91       	pop	r23
    2212:	6f 91       	pop	r22
    2214:	5f 91       	pop	r21
    2216:	4f 91       	pop	r20
    2218:	3f 91       	pop	r19
    221a:	2f 91       	pop	r18
    221c:	0f 90       	pop	r0
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	0f 90       	pop	r0
    2222:	1f 90       	pop	r1
    2224:	18 95       	reti

00002226 <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    2226:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    222a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    222e:	e1 e8       	ldi	r30, 0x81	; 129
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8a 60       	ori	r24, 0x0A	; 10
    2236:	80 83       	st	Z, r24
    2238:	80 e4       	ldi	r24, 0x40	; 64
    223a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    223e:	88 ee       	ldi	r24, 0xE8	; 232
    2240:	93 e0       	ldi	r25, 0x03	; 3
    2242:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2246:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    224a:	55 98       	cbi	0x0a, 5	; 10
    224c:	53 98       	cbi	0x0a, 3	; 10
    224e:	08 95       	ret

00002250 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    2250:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2254:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2258:	08 95       	ret

0000225a <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    225a:	55 9a       	sbi	0x0a, 5	; 10
    225c:	08 95       	ret

0000225e <__fixunssfsi>:
    225e:	0e 94 a3 11 	call	0x2346	; 0x2346 <__fp_splitA>
    2262:	88 f0       	brcs	.+34     	; 0x2286 <__fixunssfsi+0x28>
    2264:	9f 57       	subi	r25, 0x7F	; 127
    2266:	98 f0       	brcs	.+38     	; 0x228e <__fixunssfsi+0x30>
    2268:	b9 2f       	mov	r27, r25
    226a:	99 27       	eor	r25, r25
    226c:	b7 51       	subi	r27, 0x17	; 23
    226e:	b0 f0       	brcs	.+44     	; 0x229c <__fixunssfsi+0x3e>
    2270:	e1 f0       	breq	.+56     	; 0x22aa <__fixunssfsi+0x4c>
    2272:	66 0f       	add	r22, r22
    2274:	77 1f       	adc	r23, r23
    2276:	88 1f       	adc	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	1a f0       	brmi	.+6      	; 0x2282 <__fixunssfsi+0x24>
    227c:	ba 95       	dec	r27
    227e:	c9 f7       	brne	.-14     	; 0x2272 <__fixunssfsi+0x14>
    2280:	14 c0       	rjmp	.+40     	; 0x22aa <__fixunssfsi+0x4c>
    2282:	b1 30       	cpi	r27, 0x01	; 1
    2284:	91 f0       	breq	.+36     	; 0x22aa <__fixunssfsi+0x4c>
    2286:	0e 94 bd 11 	call	0x237a	; 0x237a <__fp_zero>
    228a:	b1 e0       	ldi	r27, 0x01	; 1
    228c:	08 95       	ret
    228e:	0c 94 bd 11 	jmp	0x237a	; 0x237a <__fp_zero>
    2292:	67 2f       	mov	r22, r23
    2294:	78 2f       	mov	r23, r24
    2296:	88 27       	eor	r24, r24
    2298:	b8 5f       	subi	r27, 0xF8	; 248
    229a:	39 f0       	breq	.+14     	; 0x22aa <__fixunssfsi+0x4c>
    229c:	b9 3f       	cpi	r27, 0xF9	; 249
    229e:	cc f3       	brlt	.-14     	; 0x2292 <__fixunssfsi+0x34>
    22a0:	86 95       	lsr	r24
    22a2:	77 95       	ror	r23
    22a4:	67 95       	ror	r22
    22a6:	b3 95       	inc	r27
    22a8:	d9 f7       	brne	.-10     	; 0x22a0 <__fixunssfsi+0x42>
    22aa:	3e f4       	brtc	.+14     	; 0x22ba <__fixunssfsi+0x5c>
    22ac:	90 95       	com	r25
    22ae:	80 95       	com	r24
    22b0:	70 95       	com	r23
    22b2:	61 95       	neg	r22
    22b4:	7f 4f       	sbci	r23, 0xFF	; 255
    22b6:	8f 4f       	sbci	r24, 0xFF	; 255
    22b8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ba:	08 95       	ret

000022bc <__floatunsisf>:
    22bc:	e8 94       	clt
    22be:	09 c0       	rjmp	.+18     	; 0x22d2 <__floatsisf+0x12>

000022c0 <__floatsisf>:
    22c0:	97 fb       	bst	r25, 7
    22c2:	3e f4       	brtc	.+14     	; 0x22d2 <__floatsisf+0x12>
    22c4:	90 95       	com	r25
    22c6:	80 95       	com	r24
    22c8:	70 95       	com	r23
    22ca:	61 95       	neg	r22
    22cc:	7f 4f       	sbci	r23, 0xFF	; 255
    22ce:	8f 4f       	sbci	r24, 0xFF	; 255
    22d0:	9f 4f       	sbci	r25, 0xFF	; 255
    22d2:	99 23       	and	r25, r25
    22d4:	a9 f0       	breq	.+42     	; 0x2300 <__floatsisf+0x40>
    22d6:	f9 2f       	mov	r31, r25
    22d8:	96 e9       	ldi	r25, 0x96	; 150
    22da:	bb 27       	eor	r27, r27
    22dc:	93 95       	inc	r25
    22de:	f6 95       	lsr	r31
    22e0:	87 95       	ror	r24
    22e2:	77 95       	ror	r23
    22e4:	67 95       	ror	r22
    22e6:	b7 95       	ror	r27
    22e8:	f1 11       	cpse	r31, r1
    22ea:	f8 cf       	rjmp	.-16     	; 0x22dc <__floatsisf+0x1c>
    22ec:	fa f4       	brpl	.+62     	; 0x232c <__floatsisf+0x6c>
    22ee:	bb 0f       	add	r27, r27
    22f0:	11 f4       	brne	.+4      	; 0x22f6 <__floatsisf+0x36>
    22f2:	60 ff       	sbrs	r22, 0
    22f4:	1b c0       	rjmp	.+54     	; 0x232c <__floatsisf+0x6c>
    22f6:	6f 5f       	subi	r22, 0xFF	; 255
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	8f 4f       	sbci	r24, 0xFF	; 255
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	16 c0       	rjmp	.+44     	; 0x232c <__floatsisf+0x6c>
    2300:	88 23       	and	r24, r24
    2302:	11 f0       	breq	.+4      	; 0x2308 <__floatsisf+0x48>
    2304:	96 e9       	ldi	r25, 0x96	; 150
    2306:	11 c0       	rjmp	.+34     	; 0x232a <__floatsisf+0x6a>
    2308:	77 23       	and	r23, r23
    230a:	21 f0       	breq	.+8      	; 0x2314 <__floatsisf+0x54>
    230c:	9e e8       	ldi	r25, 0x8E	; 142
    230e:	87 2f       	mov	r24, r23
    2310:	76 2f       	mov	r23, r22
    2312:	05 c0       	rjmp	.+10     	; 0x231e <__floatsisf+0x5e>
    2314:	66 23       	and	r22, r22
    2316:	71 f0       	breq	.+28     	; 0x2334 <__floatsisf+0x74>
    2318:	96 e8       	ldi	r25, 0x86	; 134
    231a:	86 2f       	mov	r24, r22
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	60 e0       	ldi	r22, 0x00	; 0
    2320:	2a f0       	brmi	.+10     	; 0x232c <__floatsisf+0x6c>
    2322:	9a 95       	dec	r25
    2324:	66 0f       	add	r22, r22
    2326:	77 1f       	adc	r23, r23
    2328:	88 1f       	adc	r24, r24
    232a:	da f7       	brpl	.-10     	; 0x2322 <__floatsisf+0x62>
    232c:	88 0f       	add	r24, r24
    232e:	96 95       	lsr	r25
    2330:	87 95       	ror	r24
    2332:	97 f9       	bld	r25, 7
    2334:	08 95       	ret

00002336 <__fp_split3>:
    2336:	57 fd       	sbrc	r21, 7
    2338:	90 58       	subi	r25, 0x80	; 128
    233a:	44 0f       	add	r20, r20
    233c:	55 1f       	adc	r21, r21
    233e:	59 f0       	breq	.+22     	; 0x2356 <__fp_splitA+0x10>
    2340:	5f 3f       	cpi	r21, 0xFF	; 255
    2342:	71 f0       	breq	.+28     	; 0x2360 <__fp_splitA+0x1a>
    2344:	47 95       	ror	r20

00002346 <__fp_splitA>:
    2346:	88 0f       	add	r24, r24
    2348:	97 fb       	bst	r25, 7
    234a:	99 1f       	adc	r25, r25
    234c:	61 f0       	breq	.+24     	; 0x2366 <__fp_splitA+0x20>
    234e:	9f 3f       	cpi	r25, 0xFF	; 255
    2350:	79 f0       	breq	.+30     	; 0x2370 <__fp_splitA+0x2a>
    2352:	87 95       	ror	r24
    2354:	08 95       	ret
    2356:	12 16       	cp	r1, r18
    2358:	13 06       	cpc	r1, r19
    235a:	14 06       	cpc	r1, r20
    235c:	55 1f       	adc	r21, r21
    235e:	f2 cf       	rjmp	.-28     	; 0x2344 <__fp_split3+0xe>
    2360:	46 95       	lsr	r20
    2362:	f1 df       	rcall	.-30     	; 0x2346 <__fp_splitA>
    2364:	08 c0       	rjmp	.+16     	; 0x2376 <__fp_splitA+0x30>
    2366:	16 16       	cp	r1, r22
    2368:	17 06       	cpc	r1, r23
    236a:	18 06       	cpc	r1, r24
    236c:	99 1f       	adc	r25, r25
    236e:	f1 cf       	rjmp	.-30     	; 0x2352 <__fp_splitA+0xc>
    2370:	86 95       	lsr	r24
    2372:	71 05       	cpc	r23, r1
    2374:	61 05       	cpc	r22, r1
    2376:	08 94       	sec
    2378:	08 95       	ret

0000237a <__fp_zero>:
    237a:	e8 94       	clt

0000237c <__fp_szero>:
    237c:	bb 27       	eor	r27, r27
    237e:	66 27       	eor	r22, r22
    2380:	77 27       	eor	r23, r23
    2382:	cb 01       	movw	r24, r22
    2384:	97 f9       	bld	r25, 7
    2386:	08 95       	ret

00002388 <__mulsf3>:
    2388:	0e 94 d7 11 	call	0x23ae	; 0x23ae <__mulsf3x>
    238c:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__fp_round>
    2390:	0e 94 3a 12 	call	0x2474	; 0x2474 <__fp_pscA>
    2394:	38 f0       	brcs	.+14     	; 0x23a4 <__mulsf3+0x1c>
    2396:	0e 94 41 12 	call	0x2482	; 0x2482 <__fp_pscB>
    239a:	20 f0       	brcs	.+8      	; 0x23a4 <__mulsf3+0x1c>
    239c:	95 23       	and	r25, r21
    239e:	11 f0       	breq	.+4      	; 0x23a4 <__mulsf3+0x1c>
    23a0:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__fp_inf>
    23a4:	0c 94 37 12 	jmp	0x246e	; 0x246e <__fp_nan>
    23a8:	11 24       	eor	r1, r1
    23aa:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_szero>

000023ae <__mulsf3x>:
    23ae:	0e 94 9b 11 	call	0x2336	; 0x2336 <__fp_split3>
    23b2:	70 f3       	brcs	.-36     	; 0x2390 <__mulsf3+0x8>

000023b4 <__mulsf3_pse>:
    23b4:	95 9f       	mul	r25, r21
    23b6:	c1 f3       	breq	.-16     	; 0x23a8 <__mulsf3+0x20>
    23b8:	95 0f       	add	r25, r21
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	55 1f       	adc	r21, r21
    23be:	62 9f       	mul	r22, r18
    23c0:	f0 01       	movw	r30, r0
    23c2:	72 9f       	mul	r23, r18
    23c4:	bb 27       	eor	r27, r27
    23c6:	f0 0d       	add	r31, r0
    23c8:	b1 1d       	adc	r27, r1
    23ca:	63 9f       	mul	r22, r19
    23cc:	aa 27       	eor	r26, r26
    23ce:	f0 0d       	add	r31, r0
    23d0:	b1 1d       	adc	r27, r1
    23d2:	aa 1f       	adc	r26, r26
    23d4:	64 9f       	mul	r22, r20
    23d6:	66 27       	eor	r22, r22
    23d8:	b0 0d       	add	r27, r0
    23da:	a1 1d       	adc	r26, r1
    23dc:	66 1f       	adc	r22, r22
    23de:	82 9f       	mul	r24, r18
    23e0:	22 27       	eor	r18, r18
    23e2:	b0 0d       	add	r27, r0
    23e4:	a1 1d       	adc	r26, r1
    23e6:	62 1f       	adc	r22, r18
    23e8:	73 9f       	mul	r23, r19
    23ea:	b0 0d       	add	r27, r0
    23ec:	a1 1d       	adc	r26, r1
    23ee:	62 1f       	adc	r22, r18
    23f0:	83 9f       	mul	r24, r19
    23f2:	a0 0d       	add	r26, r0
    23f4:	61 1d       	adc	r22, r1
    23f6:	22 1f       	adc	r18, r18
    23f8:	74 9f       	mul	r23, r20
    23fa:	33 27       	eor	r19, r19
    23fc:	a0 0d       	add	r26, r0
    23fe:	61 1d       	adc	r22, r1
    2400:	23 1f       	adc	r18, r19
    2402:	84 9f       	mul	r24, r20
    2404:	60 0d       	add	r22, r0
    2406:	21 1d       	adc	r18, r1
    2408:	82 2f       	mov	r24, r18
    240a:	76 2f       	mov	r23, r22
    240c:	6a 2f       	mov	r22, r26
    240e:	11 24       	eor	r1, r1
    2410:	9f 57       	subi	r25, 0x7F	; 127
    2412:	50 40       	sbci	r21, 0x00	; 0
    2414:	9a f0       	brmi	.+38     	; 0x243c <__mulsf3_pse+0x88>
    2416:	f1 f0       	breq	.+60     	; 0x2454 <__mulsf3_pse+0xa0>
    2418:	88 23       	and	r24, r24
    241a:	4a f0       	brmi	.+18     	; 0x242e <__mulsf3_pse+0x7a>
    241c:	ee 0f       	add	r30, r30
    241e:	ff 1f       	adc	r31, r31
    2420:	bb 1f       	adc	r27, r27
    2422:	66 1f       	adc	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	88 1f       	adc	r24, r24
    2428:	91 50       	subi	r25, 0x01	; 1
    242a:	50 40       	sbci	r21, 0x00	; 0
    242c:	a9 f7       	brne	.-22     	; 0x2418 <__mulsf3_pse+0x64>
    242e:	9e 3f       	cpi	r25, 0xFE	; 254
    2430:	51 05       	cpc	r21, r1
    2432:	80 f0       	brcs	.+32     	; 0x2454 <__mulsf3_pse+0xa0>
    2434:	0c 94 31 12 	jmp	0x2462	; 0x2462 <__fp_inf>
    2438:	0c 94 be 11 	jmp	0x237c	; 0x237c <__fp_szero>
    243c:	5f 3f       	cpi	r21, 0xFF	; 255
    243e:	e4 f3       	brlt	.-8      	; 0x2438 <__mulsf3_pse+0x84>
    2440:	98 3e       	cpi	r25, 0xE8	; 232
    2442:	d4 f3       	brlt	.-12     	; 0x2438 <__mulsf3_pse+0x84>
    2444:	86 95       	lsr	r24
    2446:	77 95       	ror	r23
    2448:	67 95       	ror	r22
    244a:	b7 95       	ror	r27
    244c:	f7 95       	ror	r31
    244e:	e7 95       	ror	r30
    2450:	9f 5f       	subi	r25, 0xFF	; 255
    2452:	c1 f7       	brne	.-16     	; 0x2444 <__mulsf3_pse+0x90>
    2454:	fe 2b       	or	r31, r30
    2456:	88 0f       	add	r24, r24
    2458:	91 1d       	adc	r25, r1
    245a:	96 95       	lsr	r25
    245c:	87 95       	ror	r24
    245e:	97 f9       	bld	r25, 7
    2460:	08 95       	ret

00002462 <__fp_inf>:
    2462:	97 f9       	bld	r25, 7
    2464:	9f 67       	ori	r25, 0x7F	; 127
    2466:	80 e8       	ldi	r24, 0x80	; 128
    2468:	70 e0       	ldi	r23, 0x00	; 0
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	08 95       	ret

0000246e <__fp_nan>:
    246e:	9f ef       	ldi	r25, 0xFF	; 255
    2470:	80 ec       	ldi	r24, 0xC0	; 192
    2472:	08 95       	ret

00002474 <__fp_pscA>:
    2474:	00 24       	eor	r0, r0
    2476:	0a 94       	dec	r0
    2478:	16 16       	cp	r1, r22
    247a:	17 06       	cpc	r1, r23
    247c:	18 06       	cpc	r1, r24
    247e:	09 06       	cpc	r0, r25
    2480:	08 95       	ret

00002482 <__fp_pscB>:
    2482:	00 24       	eor	r0, r0
    2484:	0a 94       	dec	r0
    2486:	12 16       	cp	r1, r18
    2488:	13 06       	cpc	r1, r19
    248a:	14 06       	cpc	r1, r20
    248c:	05 06       	cpc	r0, r21
    248e:	08 95       	ret

00002490 <__fp_round>:
    2490:	09 2e       	mov	r0, r25
    2492:	03 94       	inc	r0
    2494:	00 0c       	add	r0, r0
    2496:	11 f4       	brne	.+4      	; 0x249c <__fp_round+0xc>
    2498:	88 23       	and	r24, r24
    249a:	52 f0       	brmi	.+20     	; 0x24b0 <__fp_round+0x20>
    249c:	bb 0f       	add	r27, r27
    249e:	40 f4       	brcc	.+16     	; 0x24b0 <__fp_round+0x20>
    24a0:	bf 2b       	or	r27, r31
    24a2:	11 f4       	brne	.+4      	; 0x24a8 <__fp_round+0x18>
    24a4:	60 ff       	sbrs	r22, 0
    24a6:	04 c0       	rjmp	.+8      	; 0x24b0 <__fp_round+0x20>
    24a8:	6f 5f       	subi	r22, 0xFF	; 255
    24aa:	7f 4f       	sbci	r23, 0xFF	; 255
    24ac:	8f 4f       	sbci	r24, 0xFF	; 255
    24ae:	9f 4f       	sbci	r25, 0xFF	; 255
    24b0:	08 95       	ret

000024b2 <__udivmodsi4>:
    24b2:	a1 e2       	ldi	r26, 0x21	; 33
    24b4:	1a 2e       	mov	r1, r26
    24b6:	aa 1b       	sub	r26, r26
    24b8:	bb 1b       	sub	r27, r27
    24ba:	fd 01       	movw	r30, r26
    24bc:	0d c0       	rjmp	.+26     	; 0x24d8 <__udivmodsi4_ep>

000024be <__udivmodsi4_loop>:
    24be:	aa 1f       	adc	r26, r26
    24c0:	bb 1f       	adc	r27, r27
    24c2:	ee 1f       	adc	r30, r30
    24c4:	ff 1f       	adc	r31, r31
    24c6:	a2 17       	cp	r26, r18
    24c8:	b3 07       	cpc	r27, r19
    24ca:	e4 07       	cpc	r30, r20
    24cc:	f5 07       	cpc	r31, r21
    24ce:	20 f0       	brcs	.+8      	; 0x24d8 <__udivmodsi4_ep>
    24d0:	a2 1b       	sub	r26, r18
    24d2:	b3 0b       	sbc	r27, r19
    24d4:	e4 0b       	sbc	r30, r20
    24d6:	f5 0b       	sbc	r31, r21

000024d8 <__udivmodsi4_ep>:
    24d8:	66 1f       	adc	r22, r22
    24da:	77 1f       	adc	r23, r23
    24dc:	88 1f       	adc	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	1a 94       	dec	r1
    24e2:	69 f7       	brne	.-38     	; 0x24be <__udivmodsi4_loop>
    24e4:	60 95       	com	r22
    24e6:	70 95       	com	r23
    24e8:	80 95       	com	r24
    24ea:	90 95       	com	r25
    24ec:	9b 01       	movw	r18, r22
    24ee:	ac 01       	movw	r20, r24
    24f0:	bd 01       	movw	r22, r26
    24f2:	cf 01       	movw	r24, r30
    24f4:	08 95       	ret

000024f6 <__divmodsi4>:
    24f6:	05 2e       	mov	r0, r21
    24f8:	97 fb       	bst	r25, 7
    24fa:	1e f4       	brtc	.+6      	; 0x2502 <__divmodsi4+0xc>
    24fc:	00 94       	com	r0
    24fe:	0e 94 92 12 	call	0x2524	; 0x2524 <__negsi2>
    2502:	57 fd       	sbrc	r21, 7
    2504:	07 d0       	rcall	.+14     	; 0x2514 <__divmodsi4_neg2>
    2506:	0e 94 59 12 	call	0x24b2	; 0x24b2 <__udivmodsi4>
    250a:	07 fc       	sbrc	r0, 7
    250c:	03 d0       	rcall	.+6      	; 0x2514 <__divmodsi4_neg2>
    250e:	4e f4       	brtc	.+18     	; 0x2522 <__divmodsi4_exit>
    2510:	0c 94 92 12 	jmp	0x2524	; 0x2524 <__negsi2>

00002514 <__divmodsi4_neg2>:
    2514:	50 95       	com	r21
    2516:	40 95       	com	r20
    2518:	30 95       	com	r19
    251a:	21 95       	neg	r18
    251c:	3f 4f       	sbci	r19, 0xFF	; 255
    251e:	4f 4f       	sbci	r20, 0xFF	; 255
    2520:	5f 4f       	sbci	r21, 0xFF	; 255

00002522 <__divmodsi4_exit>:
    2522:	08 95       	ret

00002524 <__negsi2>:
    2524:	90 95       	com	r25
    2526:	80 95       	com	r24
    2528:	70 95       	com	r23
    252a:	61 95       	neg	r22
    252c:	7f 4f       	sbci	r23, 0xFF	; 255
    252e:	8f 4f       	sbci	r24, 0xFF	; 255
    2530:	9f 4f       	sbci	r25, 0xFF	; 255
    2532:	08 95       	ret

00002534 <do_rand>:
    2534:	8f 92       	push	r8
    2536:	9f 92       	push	r9
    2538:	af 92       	push	r10
    253a:	bf 92       	push	r11
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	ec 01       	movw	r28, r24
    254a:	68 81       	ld	r22, Y
    254c:	79 81       	ldd	r23, Y+1	; 0x01
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	9b 81       	ldd	r25, Y+3	; 0x03
    2552:	61 15       	cp	r22, r1
    2554:	71 05       	cpc	r23, r1
    2556:	81 05       	cpc	r24, r1
    2558:	91 05       	cpc	r25, r1
    255a:	21 f4       	brne	.+8      	; 0x2564 <do_rand+0x30>
    255c:	64 e2       	ldi	r22, 0x24	; 36
    255e:	79 ed       	ldi	r23, 0xD9	; 217
    2560:	8b e5       	ldi	r24, 0x5B	; 91
    2562:	97 e0       	ldi	r25, 0x07	; 7
    2564:	2d e1       	ldi	r18, 0x1D	; 29
    2566:	33 ef       	ldi	r19, 0xF3	; 243
    2568:	41 e0       	ldi	r20, 0x01	; 1
    256a:	50 e0       	ldi	r21, 0x00	; 0
    256c:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__divmodsi4>
    2570:	49 01       	movw	r8, r18
    2572:	5a 01       	movw	r10, r20
    2574:	9b 01       	movw	r18, r22
    2576:	ac 01       	movw	r20, r24
    2578:	a7 ea       	ldi	r26, 0xA7	; 167
    257a:	b1 e4       	ldi	r27, 0x41	; 65
    257c:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__muluhisi3>
    2580:	6b 01       	movw	r12, r22
    2582:	7c 01       	movw	r14, r24
    2584:	ac ee       	ldi	r26, 0xEC	; 236
    2586:	b4 ef       	ldi	r27, 0xF4	; 244
    2588:	a5 01       	movw	r20, r10
    258a:	94 01       	movw	r18, r8
    258c:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__mulohisi3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8c 0d       	add	r24, r12
    2596:	9d 1d       	adc	r25, r13
    2598:	ae 1d       	adc	r26, r14
    259a:	bf 1d       	adc	r27, r15
    259c:	b7 ff       	sbrs	r27, 7
    259e:	03 c0       	rjmp	.+6      	; 0x25a6 <do_rand+0x72>
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	a1 09       	sbc	r26, r1
    25a4:	b0 48       	sbci	r27, 0x80	; 128
    25a6:	88 83       	st	Y, r24
    25a8:	99 83       	std	Y+1, r25	; 0x01
    25aa:	aa 83       	std	Y+2, r26	; 0x02
    25ac:	bb 83       	std	Y+3, r27	; 0x03
    25ae:	9f 77       	andi	r25, 0x7F	; 127
    25b0:	df 91       	pop	r29
    25b2:	cf 91       	pop	r28
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	bf 90       	pop	r11
    25be:	af 90       	pop	r10
    25c0:	9f 90       	pop	r9
    25c2:	8f 90       	pop	r8
    25c4:	08 95       	ret

000025c6 <rand_r>:
    25c6:	0e 94 9a 12 	call	0x2534	; 0x2534 <do_rand>
    25ca:	08 95       	ret

000025cc <rand>:
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	0e 94 9a 12 	call	0x2534	; 0x2534 <do_rand>
    25d4:	08 95       	ret

000025d6 <srand>:
    25d6:	a0 e0       	ldi	r26, 0x00	; 0
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    25de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    25e2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    25e6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    25ea:	08 95       	ret

000025ec <random_r>:
    25ec:	8f 92       	push	r8
    25ee:	9f 92       	push	r9
    25f0:	af 92       	push	r10
    25f2:	bf 92       	push	r11
    25f4:	cf 92       	push	r12
    25f6:	df 92       	push	r13
    25f8:	ef 92       	push	r14
    25fa:	ff 92       	push	r15
    25fc:	cf 93       	push	r28
    25fe:	df 93       	push	r29
    2600:	ec 01       	movw	r28, r24
    2602:	68 81       	ld	r22, Y
    2604:	79 81       	ldd	r23, Y+1	; 0x01
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	9b 81       	ldd	r25, Y+3	; 0x03
    260a:	61 15       	cp	r22, r1
    260c:	71 05       	cpc	r23, r1
    260e:	81 05       	cpc	r24, r1
    2610:	91 05       	cpc	r25, r1
    2612:	21 f4       	brne	.+8      	; 0x261c <random_r+0x30>
    2614:	64 e2       	ldi	r22, 0x24	; 36
    2616:	79 ed       	ldi	r23, 0xD9	; 217
    2618:	8b e5       	ldi	r24, 0x5B	; 91
    261a:	97 e0       	ldi	r25, 0x07	; 7
    261c:	2d e1       	ldi	r18, 0x1D	; 29
    261e:	33 ef       	ldi	r19, 0xF3	; 243
    2620:	41 e0       	ldi	r20, 0x01	; 1
    2622:	50 e0       	ldi	r21, 0x00	; 0
    2624:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__divmodsi4>
    2628:	49 01       	movw	r8, r18
    262a:	5a 01       	movw	r10, r20
    262c:	9b 01       	movw	r18, r22
    262e:	ac 01       	movw	r20, r24
    2630:	a7 ea       	ldi	r26, 0xA7	; 167
    2632:	b1 e4       	ldi	r27, 0x41	; 65
    2634:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__muluhisi3>
    2638:	6b 01       	movw	r12, r22
    263a:	7c 01       	movw	r14, r24
    263c:	ac ee       	ldi	r26, 0xEC	; 236
    263e:	b4 ef       	ldi	r27, 0xF4	; 244
    2640:	a5 01       	movw	r20, r10
    2642:	94 01       	movw	r18, r8
    2644:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__mulohisi3>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	8c 0d       	add	r24, r12
    264e:	9d 1d       	adc	r25, r13
    2650:	ae 1d       	adc	r26, r14
    2652:	bf 1d       	adc	r27, r15
    2654:	b7 ff       	sbrs	r27, 7
    2656:	03 c0       	rjmp	.+6      	; 0x265e <random_r+0x72>
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	a1 09       	sbc	r26, r1
    265c:	b0 48       	sbci	r27, 0x80	; 128
    265e:	88 83       	st	Y, r24
    2660:	99 83       	std	Y+1, r25	; 0x01
    2662:	aa 83       	std	Y+2, r26	; 0x02
    2664:	bb 83       	std	Y+3, r27	; 0x03
    2666:	bc 01       	movw	r22, r24
    2668:	cd 01       	movw	r24, r26
    266a:	9f 77       	andi	r25, 0x7F	; 127
    266c:	df 91       	pop	r29
    266e:	cf 91       	pop	r28
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	08 95       	ret

00002682 <random>:
    2682:	8f 92       	push	r8
    2684:	9f 92       	push	r9
    2686:	af 92       	push	r10
    2688:	bf 92       	push	r11
    268a:	cf 92       	push	r12
    268c:	df 92       	push	r13
    268e:	ef 92       	push	r14
    2690:	ff 92       	push	r15
    2692:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2696:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    269a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    269e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    26a2:	61 15       	cp	r22, r1
    26a4:	71 05       	cpc	r23, r1
    26a6:	81 05       	cpc	r24, r1
    26a8:	91 05       	cpc	r25, r1
    26aa:	21 f4       	brne	.+8      	; 0x26b4 <random+0x32>
    26ac:	64 e2       	ldi	r22, 0x24	; 36
    26ae:	79 ed       	ldi	r23, 0xD9	; 217
    26b0:	8b e5       	ldi	r24, 0x5B	; 91
    26b2:	97 e0       	ldi	r25, 0x07	; 7
    26b4:	2d e1       	ldi	r18, 0x1D	; 29
    26b6:	33 ef       	ldi	r19, 0xF3	; 243
    26b8:	41 e0       	ldi	r20, 0x01	; 1
    26ba:	50 e0       	ldi	r21, 0x00	; 0
    26bc:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <__divmodsi4>
    26c0:	49 01       	movw	r8, r18
    26c2:	5a 01       	movw	r10, r20
    26c4:	9b 01       	movw	r18, r22
    26c6:	ac 01       	movw	r20, r24
    26c8:	a7 ea       	ldi	r26, 0xA7	; 167
    26ca:	b1 e4       	ldi	r27, 0x41	; 65
    26cc:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__muluhisi3>
    26d0:	6b 01       	movw	r12, r22
    26d2:	7c 01       	movw	r14, r24
    26d4:	ac ee       	ldi	r26, 0xEC	; 236
    26d6:	b4 ef       	ldi	r27, 0xF4	; 244
    26d8:	a5 01       	movw	r20, r10
    26da:	94 01       	movw	r18, r8
    26dc:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <__mulohisi3>
    26e0:	dc 01       	movw	r26, r24
    26e2:	cb 01       	movw	r24, r22
    26e4:	8c 0d       	add	r24, r12
    26e6:	9d 1d       	adc	r25, r13
    26e8:	ae 1d       	adc	r26, r14
    26ea:	bf 1d       	adc	r27, r15
    26ec:	b7 ff       	sbrs	r27, 7
    26ee:	03 c0       	rjmp	.+6      	; 0x26f6 <random+0x74>
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	a1 09       	sbc	r26, r1
    26f4:	b0 48       	sbci	r27, 0x80	; 128
    26f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    26fa:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    26fe:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2702:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	9f 77       	andi	r25, 0x7F	; 127
    270c:	ff 90       	pop	r15
    270e:	ef 90       	pop	r14
    2710:	df 90       	pop	r13
    2712:	cf 90       	pop	r12
    2714:	bf 90       	pop	r11
    2716:	af 90       	pop	r10
    2718:	9f 90       	pop	r9
    271a:	8f 90       	pop	r8
    271c:	08 95       	ret

0000271e <srandom>:
    271e:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2722:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2726:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    272a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    272e:	08 95       	ret

00002730 <fgetc>:
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	ec 01       	movw	r28, r24
    2736:	2b 81       	ldd	r18, Y+3	; 0x03
    2738:	20 ff       	sbrs	r18, 0
    273a:	33 c0       	rjmp	.+102    	; 0x27a2 <fgetc+0x72>
    273c:	26 ff       	sbrs	r18, 6
    273e:	0a c0       	rjmp	.+20     	; 0x2754 <fgetc+0x24>
    2740:	2f 7b       	andi	r18, 0xBF	; 191
    2742:	2b 83       	std	Y+3, r18	; 0x03
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	9f 81       	ldd	r25, Y+7	; 0x07
    2748:	01 96       	adiw	r24, 0x01	; 1
    274a:	9f 83       	std	Y+7, r25	; 0x07
    274c:	8e 83       	std	Y+6, r24	; 0x06
    274e:	8a 81       	ldd	r24, Y+2	; 0x02
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	29 c0       	rjmp	.+82     	; 0x27a6 <fgetc+0x76>
    2754:	22 ff       	sbrs	r18, 2
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <fgetc+0x46>
    2758:	e8 81       	ld	r30, Y
    275a:	f9 81       	ldd	r31, Y+1	; 0x01
    275c:	80 81       	ld	r24, Z
    275e:	08 2e       	mov	r0, r24
    2760:	00 0c       	add	r0, r0
    2762:	99 0b       	sbc	r25, r25
    2764:	00 97       	sbiw	r24, 0x00	; 0
    2766:	19 f4       	brne	.+6      	; 0x276e <fgetc+0x3e>
    2768:	20 62       	ori	r18, 0x20	; 32
    276a:	2b 83       	std	Y+3, r18	; 0x03
    276c:	1a c0       	rjmp	.+52     	; 0x27a2 <fgetc+0x72>
    276e:	31 96       	adiw	r30, 0x01	; 1
    2770:	f9 83       	std	Y+1, r31	; 0x01
    2772:	e8 83       	st	Y, r30
    2774:	0e c0       	rjmp	.+28     	; 0x2792 <fgetc+0x62>
    2776:	ea 85       	ldd	r30, Y+10	; 0x0a
    2778:	fb 85       	ldd	r31, Y+11	; 0x0b
    277a:	09 95       	icall
    277c:	97 ff       	sbrs	r25, 7
    277e:	09 c0       	rjmp	.+18     	; 0x2792 <fgetc+0x62>
    2780:	2b 81       	ldd	r18, Y+3	; 0x03
    2782:	01 96       	adiw	r24, 0x01	; 1
    2784:	11 f0       	breq	.+4      	; 0x278a <fgetc+0x5a>
    2786:	80 e2       	ldi	r24, 0x20	; 32
    2788:	01 c0       	rjmp	.+2      	; 0x278c <fgetc+0x5c>
    278a:	80 e1       	ldi	r24, 0x10	; 16
    278c:	82 2b       	or	r24, r18
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	08 c0       	rjmp	.+16     	; 0x27a2 <fgetc+0x72>
    2792:	2e 81       	ldd	r18, Y+6	; 0x06
    2794:	3f 81       	ldd	r19, Y+7	; 0x07
    2796:	2f 5f       	subi	r18, 0xFF	; 255
    2798:	3f 4f       	sbci	r19, 0xFF	; 255
    279a:	3f 83       	std	Y+7, r19	; 0x07
    279c:	2e 83       	std	Y+6, r18	; 0x06
    279e:	99 27       	eor	r25, r25
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <fgetc+0x76>
    27a2:	8f ef       	ldi	r24, 0xFF	; 255
    27a4:	9f ef       	ldi	r25, 0xFF	; 255
    27a6:	df 91       	pop	r29
    27a8:	cf 91       	pop	r28
    27aa:	08 95       	ret

000027ac <printf>:
    27ac:	a0 e0       	ldi	r26, 0x00	; 0
    27ae:	b0 e0       	ldi	r27, 0x00	; 0
    27b0:	ec ed       	ldi	r30, 0xDC	; 220
    27b2:	f3 e1       	ldi	r31, 0x13	; 19
    27b4:	0c 94 06 17 	jmp	0x2e0c	; 0x2e0c <__prologue_saves__+0x20>
    27b8:	ae 01       	movw	r20, r28
    27ba:	4b 5f       	subi	r20, 0xFB	; 251
    27bc:	5f 4f       	sbci	r21, 0xFF	; 255
    27be:	fa 01       	movw	r30, r20
    27c0:	61 91       	ld	r22, Z+
    27c2:	71 91       	ld	r23, Z+
    27c4:	af 01       	movw	r20, r30
    27c6:	80 91 91 03 	lds	r24, 0x0391	; 0x800391 <__iob+0x2>
    27ca:	90 91 92 03 	lds	r25, 0x0392	; 0x800392 <__iob+0x3>
    27ce:	0e 94 19 14 	call	0x2832	; 0x2832 <vfprintf>
    27d2:	e2 e0       	ldi	r30, 0x02	; 2
    27d4:	0c 94 22 17 	jmp	0x2e44	; 0x2e44 <__epilogue_restores__+0x20>

000027d8 <printf_P>:
    27d8:	a0 e0       	ldi	r26, 0x00	; 0
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	e2 ef       	ldi	r30, 0xF2	; 242
    27de:	f3 e1       	ldi	r31, 0x13	; 19
    27e0:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__+0x1c>
    27e4:	ae 01       	movw	r20, r28
    27e6:	49 5f       	subi	r20, 0xF9	; 249
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	da 01       	movw	r26, r20
    27ec:	6d 91       	ld	r22, X+
    27ee:	7d 91       	ld	r23, X+
    27f0:	ad 01       	movw	r20, r26
    27f2:	0f e8       	ldi	r16, 0x8F	; 143
    27f4:	13 e0       	ldi	r17, 0x03	; 3
    27f6:	f8 01       	movw	r30, r16
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	dc 01       	movw	r26, r24
    27fe:	13 96       	adiw	r26, 0x03	; 3
    2800:	2c 91       	ld	r18, X
    2802:	13 97       	sbiw	r26, 0x03	; 3
    2804:	28 60       	ori	r18, 0x08	; 8
    2806:	13 96       	adiw	r26, 0x03	; 3
    2808:	2c 93       	st	X, r18
    280a:	0e 94 19 14 	call	0x2832	; 0x2832 <vfprintf>
    280e:	d8 01       	movw	r26, r16
    2810:	12 96       	adiw	r26, 0x02	; 2
    2812:	ed 91       	ld	r30, X+
    2814:	fc 91       	ld	r31, X
    2816:	13 97       	sbiw	r26, 0x03	; 3
    2818:	23 81       	ldd	r18, Z+3	; 0x03
    281a:	27 7f       	andi	r18, 0xF7	; 247
    281c:	23 83       	std	Z+3, r18	; 0x03
    281e:	e4 e0       	ldi	r30, 0x04	; 4
    2820:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__+0x1c>

00002824 <putchar>:
    2824:	60 91 91 03 	lds	r22, 0x0391	; 0x800391 <__iob+0x2>
    2828:	70 91 92 03 	lds	r23, 0x0392	; 0x800392 <__iob+0x3>
    282c:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2830:	08 95       	ret

00002832 <vfprintf>:
    2832:	ab e0       	ldi	r26, 0x0B	; 11
    2834:	b0 e0       	ldi	r27, 0x00	; 0
    2836:	ef e1       	ldi	r30, 0x1F	; 31
    2838:	f4 e1       	ldi	r31, 0x14	; 20
    283a:	0c 94 f6 16 	jmp	0x2dec	; 0x2dec <__prologue_saves__>
    283e:	6c 01       	movw	r12, r24
    2840:	7b 01       	movw	r14, r22
    2842:	8a 01       	movw	r16, r20
    2844:	fc 01       	movw	r30, r24
    2846:	17 82       	std	Z+7, r1	; 0x07
    2848:	16 82       	std	Z+6, r1	; 0x06
    284a:	83 81       	ldd	r24, Z+3	; 0x03
    284c:	81 ff       	sbrs	r24, 1
    284e:	cc c1       	rjmp	.+920    	; 0x2be8 <vfprintf+0x3b6>
    2850:	ce 01       	movw	r24, r28
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	3c 01       	movw	r6, r24
    2856:	f6 01       	movw	r30, r12
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	f7 01       	movw	r30, r14
    285c:	93 fd       	sbrc	r25, 3
    285e:	85 91       	lpm	r24, Z+
    2860:	93 ff       	sbrs	r25, 3
    2862:	81 91       	ld	r24, Z+
    2864:	7f 01       	movw	r14, r30
    2866:	88 23       	and	r24, r24
    2868:	09 f4       	brne	.+2      	; 0x286c <vfprintf+0x3a>
    286a:	ba c1       	rjmp	.+884    	; 0x2be0 <vfprintf+0x3ae>
    286c:	85 32       	cpi	r24, 0x25	; 37
    286e:	39 f4       	brne	.+14     	; 0x287e <vfprintf+0x4c>
    2870:	93 fd       	sbrc	r25, 3
    2872:	85 91       	lpm	r24, Z+
    2874:	93 ff       	sbrs	r25, 3
    2876:	81 91       	ld	r24, Z+
    2878:	7f 01       	movw	r14, r30
    287a:	85 32       	cpi	r24, 0x25	; 37
    287c:	29 f4       	brne	.+10     	; 0x2888 <vfprintf+0x56>
    287e:	b6 01       	movw	r22, r12
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2886:	e7 cf       	rjmp	.-50     	; 0x2856 <vfprintf+0x24>
    2888:	91 2c       	mov	r9, r1
    288a:	21 2c       	mov	r2, r1
    288c:	31 2c       	mov	r3, r1
    288e:	ff e1       	ldi	r31, 0x1F	; 31
    2890:	f3 15       	cp	r31, r3
    2892:	d8 f0       	brcs	.+54     	; 0x28ca <vfprintf+0x98>
    2894:	8b 32       	cpi	r24, 0x2B	; 43
    2896:	79 f0       	breq	.+30     	; 0x28b6 <vfprintf+0x84>
    2898:	38 f4       	brcc	.+14     	; 0x28a8 <vfprintf+0x76>
    289a:	80 32       	cpi	r24, 0x20	; 32
    289c:	79 f0       	breq	.+30     	; 0x28bc <vfprintf+0x8a>
    289e:	83 32       	cpi	r24, 0x23	; 35
    28a0:	a1 f4       	brne	.+40     	; 0x28ca <vfprintf+0x98>
    28a2:	23 2d       	mov	r18, r3
    28a4:	20 61       	ori	r18, 0x10	; 16
    28a6:	1d c0       	rjmp	.+58     	; 0x28e2 <vfprintf+0xb0>
    28a8:	8d 32       	cpi	r24, 0x2D	; 45
    28aa:	61 f0       	breq	.+24     	; 0x28c4 <vfprintf+0x92>
    28ac:	80 33       	cpi	r24, 0x30	; 48
    28ae:	69 f4       	brne	.+26     	; 0x28ca <vfprintf+0x98>
    28b0:	23 2d       	mov	r18, r3
    28b2:	21 60       	ori	r18, 0x01	; 1
    28b4:	16 c0       	rjmp	.+44     	; 0x28e2 <vfprintf+0xb0>
    28b6:	83 2d       	mov	r24, r3
    28b8:	82 60       	ori	r24, 0x02	; 2
    28ba:	38 2e       	mov	r3, r24
    28bc:	e3 2d       	mov	r30, r3
    28be:	e4 60       	ori	r30, 0x04	; 4
    28c0:	3e 2e       	mov	r3, r30
    28c2:	2a c0       	rjmp	.+84     	; 0x2918 <vfprintf+0xe6>
    28c4:	f3 2d       	mov	r31, r3
    28c6:	f8 60       	ori	r31, 0x08	; 8
    28c8:	1d c0       	rjmp	.+58     	; 0x2904 <vfprintf+0xd2>
    28ca:	37 fc       	sbrc	r3, 7
    28cc:	2d c0       	rjmp	.+90     	; 0x2928 <vfprintf+0xf6>
    28ce:	20 ed       	ldi	r18, 0xD0	; 208
    28d0:	28 0f       	add	r18, r24
    28d2:	2a 30       	cpi	r18, 0x0A	; 10
    28d4:	40 f0       	brcs	.+16     	; 0x28e6 <vfprintf+0xb4>
    28d6:	8e 32       	cpi	r24, 0x2E	; 46
    28d8:	b9 f4       	brne	.+46     	; 0x2908 <vfprintf+0xd6>
    28da:	36 fc       	sbrc	r3, 6
    28dc:	81 c1       	rjmp	.+770    	; 0x2be0 <vfprintf+0x3ae>
    28de:	23 2d       	mov	r18, r3
    28e0:	20 64       	ori	r18, 0x40	; 64
    28e2:	32 2e       	mov	r3, r18
    28e4:	19 c0       	rjmp	.+50     	; 0x2918 <vfprintf+0xe6>
    28e6:	36 fe       	sbrs	r3, 6
    28e8:	06 c0       	rjmp	.+12     	; 0x28f6 <vfprintf+0xc4>
    28ea:	8a e0       	ldi	r24, 0x0A	; 10
    28ec:	98 9e       	mul	r9, r24
    28ee:	20 0d       	add	r18, r0
    28f0:	11 24       	eor	r1, r1
    28f2:	92 2e       	mov	r9, r18
    28f4:	11 c0       	rjmp	.+34     	; 0x2918 <vfprintf+0xe6>
    28f6:	ea e0       	ldi	r30, 0x0A	; 10
    28f8:	2e 9e       	mul	r2, r30
    28fa:	20 0d       	add	r18, r0
    28fc:	11 24       	eor	r1, r1
    28fe:	22 2e       	mov	r2, r18
    2900:	f3 2d       	mov	r31, r3
    2902:	f0 62       	ori	r31, 0x20	; 32
    2904:	3f 2e       	mov	r3, r31
    2906:	08 c0       	rjmp	.+16     	; 0x2918 <vfprintf+0xe6>
    2908:	8c 36       	cpi	r24, 0x6C	; 108
    290a:	21 f4       	brne	.+8      	; 0x2914 <vfprintf+0xe2>
    290c:	83 2d       	mov	r24, r3
    290e:	80 68       	ori	r24, 0x80	; 128
    2910:	38 2e       	mov	r3, r24
    2912:	02 c0       	rjmp	.+4      	; 0x2918 <vfprintf+0xe6>
    2914:	88 36       	cpi	r24, 0x68	; 104
    2916:	41 f4       	brne	.+16     	; 0x2928 <vfprintf+0xf6>
    2918:	f7 01       	movw	r30, r14
    291a:	93 fd       	sbrc	r25, 3
    291c:	85 91       	lpm	r24, Z+
    291e:	93 ff       	sbrs	r25, 3
    2920:	81 91       	ld	r24, Z+
    2922:	7f 01       	movw	r14, r30
    2924:	81 11       	cpse	r24, r1
    2926:	b3 cf       	rjmp	.-154    	; 0x288e <vfprintf+0x5c>
    2928:	98 2f       	mov	r25, r24
    292a:	9f 7d       	andi	r25, 0xDF	; 223
    292c:	95 54       	subi	r25, 0x45	; 69
    292e:	93 30       	cpi	r25, 0x03	; 3
    2930:	28 f4       	brcc	.+10     	; 0x293c <vfprintf+0x10a>
    2932:	0c 5f       	subi	r16, 0xFC	; 252
    2934:	1f 4f       	sbci	r17, 0xFF	; 255
    2936:	9f e3       	ldi	r25, 0x3F	; 63
    2938:	99 83       	std	Y+1, r25	; 0x01
    293a:	0d c0       	rjmp	.+26     	; 0x2956 <vfprintf+0x124>
    293c:	83 36       	cpi	r24, 0x63	; 99
    293e:	31 f0       	breq	.+12     	; 0x294c <vfprintf+0x11a>
    2940:	83 37       	cpi	r24, 0x73	; 115
    2942:	71 f0       	breq	.+28     	; 0x2960 <vfprintf+0x12e>
    2944:	83 35       	cpi	r24, 0x53	; 83
    2946:	09 f0       	breq	.+2      	; 0x294a <vfprintf+0x118>
    2948:	59 c0       	rjmp	.+178    	; 0x29fc <vfprintf+0x1ca>
    294a:	21 c0       	rjmp	.+66     	; 0x298e <vfprintf+0x15c>
    294c:	f8 01       	movw	r30, r16
    294e:	80 81       	ld	r24, Z
    2950:	89 83       	std	Y+1, r24	; 0x01
    2952:	0e 5f       	subi	r16, 0xFE	; 254
    2954:	1f 4f       	sbci	r17, 0xFF	; 255
    2956:	88 24       	eor	r8, r8
    2958:	83 94       	inc	r8
    295a:	91 2c       	mov	r9, r1
    295c:	53 01       	movw	r10, r6
    295e:	13 c0       	rjmp	.+38     	; 0x2986 <vfprintf+0x154>
    2960:	28 01       	movw	r4, r16
    2962:	f2 e0       	ldi	r31, 0x02	; 2
    2964:	4f 0e       	add	r4, r31
    2966:	51 1c       	adc	r5, r1
    2968:	f8 01       	movw	r30, r16
    296a:	a0 80       	ld	r10, Z
    296c:	b1 80       	ldd	r11, Z+1	; 0x01
    296e:	36 fe       	sbrs	r3, 6
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <vfprintf+0x146>
    2972:	69 2d       	mov	r22, r9
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	02 c0       	rjmp	.+4      	; 0x297c <vfprintf+0x14a>
    2978:	6f ef       	ldi	r22, 0xFF	; 255
    297a:	7f ef       	ldi	r23, 0xFF	; 255
    297c:	c5 01       	movw	r24, r10
    297e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <strnlen>
    2982:	4c 01       	movw	r8, r24
    2984:	82 01       	movw	r16, r4
    2986:	f3 2d       	mov	r31, r3
    2988:	ff 77       	andi	r31, 0x7F	; 127
    298a:	3f 2e       	mov	r3, r31
    298c:	16 c0       	rjmp	.+44     	; 0x29ba <vfprintf+0x188>
    298e:	28 01       	movw	r4, r16
    2990:	22 e0       	ldi	r18, 0x02	; 2
    2992:	42 0e       	add	r4, r18
    2994:	51 1c       	adc	r5, r1
    2996:	f8 01       	movw	r30, r16
    2998:	a0 80       	ld	r10, Z
    299a:	b1 80       	ldd	r11, Z+1	; 0x01
    299c:	36 fe       	sbrs	r3, 6
    299e:	03 c0       	rjmp	.+6      	; 0x29a6 <vfprintf+0x174>
    29a0:	69 2d       	mov	r22, r9
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <vfprintf+0x178>
    29a6:	6f ef       	ldi	r22, 0xFF	; 255
    29a8:	7f ef       	ldi	r23, 0xFF	; 255
    29aa:	c5 01       	movw	r24, r10
    29ac:	0e 94 fa 15 	call	0x2bf4	; 0x2bf4 <strnlen_P>
    29b0:	4c 01       	movw	r8, r24
    29b2:	f3 2d       	mov	r31, r3
    29b4:	f0 68       	ori	r31, 0x80	; 128
    29b6:	3f 2e       	mov	r3, r31
    29b8:	82 01       	movw	r16, r4
    29ba:	33 fc       	sbrc	r3, 3
    29bc:	1b c0       	rjmp	.+54     	; 0x29f4 <vfprintf+0x1c2>
    29be:	82 2d       	mov	r24, r2
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	88 16       	cp	r8, r24
    29c4:	99 06       	cpc	r9, r25
    29c6:	b0 f4       	brcc	.+44     	; 0x29f4 <vfprintf+0x1c2>
    29c8:	b6 01       	movw	r22, r12
    29ca:	80 e2       	ldi	r24, 0x20	; 32
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    29d2:	2a 94       	dec	r2
    29d4:	f4 cf       	rjmp	.-24     	; 0x29be <vfprintf+0x18c>
    29d6:	f5 01       	movw	r30, r10
    29d8:	37 fc       	sbrc	r3, 7
    29da:	85 91       	lpm	r24, Z+
    29dc:	37 fe       	sbrs	r3, 7
    29de:	81 91       	ld	r24, Z+
    29e0:	5f 01       	movw	r10, r30
    29e2:	b6 01       	movw	r22, r12
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    29ea:	21 10       	cpse	r2, r1
    29ec:	2a 94       	dec	r2
    29ee:	21 e0       	ldi	r18, 0x01	; 1
    29f0:	82 1a       	sub	r8, r18
    29f2:	91 08       	sbc	r9, r1
    29f4:	81 14       	cp	r8, r1
    29f6:	91 04       	cpc	r9, r1
    29f8:	71 f7       	brne	.-36     	; 0x29d6 <vfprintf+0x1a4>
    29fa:	e8 c0       	rjmp	.+464    	; 0x2bcc <vfprintf+0x39a>
    29fc:	84 36       	cpi	r24, 0x64	; 100
    29fe:	11 f0       	breq	.+4      	; 0x2a04 <vfprintf+0x1d2>
    2a00:	89 36       	cpi	r24, 0x69	; 105
    2a02:	41 f5       	brne	.+80     	; 0x2a54 <vfprintf+0x222>
    2a04:	f8 01       	movw	r30, r16
    2a06:	37 fe       	sbrs	r3, 7
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <vfprintf+0x1e6>
    2a0a:	60 81       	ld	r22, Z
    2a0c:	71 81       	ldd	r23, Z+1	; 0x01
    2a0e:	82 81       	ldd	r24, Z+2	; 0x02
    2a10:	93 81       	ldd	r25, Z+3	; 0x03
    2a12:	0c 5f       	subi	r16, 0xFC	; 252
    2a14:	1f 4f       	sbci	r17, 0xFF	; 255
    2a16:	08 c0       	rjmp	.+16     	; 0x2a28 <vfprintf+0x1f6>
    2a18:	60 81       	ld	r22, Z
    2a1a:	71 81       	ldd	r23, Z+1	; 0x01
    2a1c:	07 2e       	mov	r0, r23
    2a1e:	00 0c       	add	r0, r0
    2a20:	88 0b       	sbc	r24, r24
    2a22:	99 0b       	sbc	r25, r25
    2a24:	0e 5f       	subi	r16, 0xFE	; 254
    2a26:	1f 4f       	sbci	r17, 0xFF	; 255
    2a28:	f3 2d       	mov	r31, r3
    2a2a:	ff 76       	andi	r31, 0x6F	; 111
    2a2c:	3f 2e       	mov	r3, r31
    2a2e:	97 ff       	sbrs	r25, 7
    2a30:	09 c0       	rjmp	.+18     	; 0x2a44 <vfprintf+0x212>
    2a32:	90 95       	com	r25
    2a34:	80 95       	com	r24
    2a36:	70 95       	com	r23
    2a38:	61 95       	neg	r22
    2a3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a40:	f0 68       	ori	r31, 0x80	; 128
    2a42:	3f 2e       	mov	r3, r31
    2a44:	2a e0       	ldi	r18, 0x0A	; 10
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	a3 01       	movw	r20, r6
    2a4a:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__ultoa_invert>
    2a4e:	88 2e       	mov	r8, r24
    2a50:	86 18       	sub	r8, r6
    2a52:	45 c0       	rjmp	.+138    	; 0x2ade <vfprintf+0x2ac>
    2a54:	85 37       	cpi	r24, 0x75	; 117
    2a56:	31 f4       	brne	.+12     	; 0x2a64 <vfprintf+0x232>
    2a58:	23 2d       	mov	r18, r3
    2a5a:	2f 7e       	andi	r18, 0xEF	; 239
    2a5c:	b2 2e       	mov	r11, r18
    2a5e:	2a e0       	ldi	r18, 0x0A	; 10
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	25 c0       	rjmp	.+74     	; 0x2aae <vfprintf+0x27c>
    2a64:	93 2d       	mov	r25, r3
    2a66:	99 7f       	andi	r25, 0xF9	; 249
    2a68:	b9 2e       	mov	r11, r25
    2a6a:	8f 36       	cpi	r24, 0x6F	; 111
    2a6c:	c1 f0       	breq	.+48     	; 0x2a9e <vfprintf+0x26c>
    2a6e:	18 f4       	brcc	.+6      	; 0x2a76 <vfprintf+0x244>
    2a70:	88 35       	cpi	r24, 0x58	; 88
    2a72:	79 f0       	breq	.+30     	; 0x2a92 <vfprintf+0x260>
    2a74:	b5 c0       	rjmp	.+362    	; 0x2be0 <vfprintf+0x3ae>
    2a76:	80 37       	cpi	r24, 0x70	; 112
    2a78:	19 f0       	breq	.+6      	; 0x2a80 <vfprintf+0x24e>
    2a7a:	88 37       	cpi	r24, 0x78	; 120
    2a7c:	21 f0       	breq	.+8      	; 0x2a86 <vfprintf+0x254>
    2a7e:	b0 c0       	rjmp	.+352    	; 0x2be0 <vfprintf+0x3ae>
    2a80:	e9 2f       	mov	r30, r25
    2a82:	e0 61       	ori	r30, 0x10	; 16
    2a84:	be 2e       	mov	r11, r30
    2a86:	b4 fe       	sbrs	r11, 4
    2a88:	0d c0       	rjmp	.+26     	; 0x2aa4 <vfprintf+0x272>
    2a8a:	fb 2d       	mov	r31, r11
    2a8c:	f4 60       	ori	r31, 0x04	; 4
    2a8e:	bf 2e       	mov	r11, r31
    2a90:	09 c0       	rjmp	.+18     	; 0x2aa4 <vfprintf+0x272>
    2a92:	34 fe       	sbrs	r3, 4
    2a94:	0a c0       	rjmp	.+20     	; 0x2aaa <vfprintf+0x278>
    2a96:	29 2f       	mov	r18, r25
    2a98:	26 60       	ori	r18, 0x06	; 6
    2a9a:	b2 2e       	mov	r11, r18
    2a9c:	06 c0       	rjmp	.+12     	; 0x2aaa <vfprintf+0x278>
    2a9e:	28 e0       	ldi	r18, 0x08	; 8
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	05 c0       	rjmp	.+10     	; 0x2aae <vfprintf+0x27c>
    2aa4:	20 e1       	ldi	r18, 0x10	; 16
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <vfprintf+0x27c>
    2aaa:	20 e1       	ldi	r18, 0x10	; 16
    2aac:	32 e0       	ldi	r19, 0x02	; 2
    2aae:	f8 01       	movw	r30, r16
    2ab0:	b7 fe       	sbrs	r11, 7
    2ab2:	07 c0       	rjmp	.+14     	; 0x2ac2 <vfprintf+0x290>
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	0c 5f       	subi	r16, 0xFC	; 252
    2abe:	1f 4f       	sbci	r17, 0xFF	; 255
    2ac0:	06 c0       	rjmp	.+12     	; 0x2ace <vfprintf+0x29c>
    2ac2:	60 81       	ld	r22, Z
    2ac4:	71 81       	ldd	r23, Z+1	; 0x01
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	0e 5f       	subi	r16, 0xFE	; 254
    2acc:	1f 4f       	sbci	r17, 0xFF	; 255
    2ace:	a3 01       	movw	r20, r6
    2ad0:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__ultoa_invert>
    2ad4:	88 2e       	mov	r8, r24
    2ad6:	86 18       	sub	r8, r6
    2ad8:	fb 2d       	mov	r31, r11
    2ada:	ff 77       	andi	r31, 0x7F	; 127
    2adc:	3f 2e       	mov	r3, r31
    2ade:	36 fe       	sbrs	r3, 6
    2ae0:	0d c0       	rjmp	.+26     	; 0x2afc <vfprintf+0x2ca>
    2ae2:	23 2d       	mov	r18, r3
    2ae4:	2e 7f       	andi	r18, 0xFE	; 254
    2ae6:	a2 2e       	mov	r10, r18
    2ae8:	89 14       	cp	r8, r9
    2aea:	58 f4       	brcc	.+22     	; 0x2b02 <vfprintf+0x2d0>
    2aec:	34 fe       	sbrs	r3, 4
    2aee:	0b c0       	rjmp	.+22     	; 0x2b06 <vfprintf+0x2d4>
    2af0:	32 fc       	sbrc	r3, 2
    2af2:	09 c0       	rjmp	.+18     	; 0x2b06 <vfprintf+0x2d4>
    2af4:	83 2d       	mov	r24, r3
    2af6:	8e 7e       	andi	r24, 0xEE	; 238
    2af8:	a8 2e       	mov	r10, r24
    2afa:	05 c0       	rjmp	.+10     	; 0x2b06 <vfprintf+0x2d4>
    2afc:	b8 2c       	mov	r11, r8
    2afe:	a3 2c       	mov	r10, r3
    2b00:	03 c0       	rjmp	.+6      	; 0x2b08 <vfprintf+0x2d6>
    2b02:	b8 2c       	mov	r11, r8
    2b04:	01 c0       	rjmp	.+2      	; 0x2b08 <vfprintf+0x2d6>
    2b06:	b9 2c       	mov	r11, r9
    2b08:	a4 fe       	sbrs	r10, 4
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <vfprintf+0x2f8>
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e8 0d       	add	r30, r8
    2b10:	f1 1d       	adc	r31, r1
    2b12:	80 81       	ld	r24, Z
    2b14:	80 33       	cpi	r24, 0x30	; 48
    2b16:	21 f4       	brne	.+8      	; 0x2b20 <vfprintf+0x2ee>
    2b18:	9a 2d       	mov	r25, r10
    2b1a:	99 7e       	andi	r25, 0xE9	; 233
    2b1c:	a9 2e       	mov	r10, r25
    2b1e:	09 c0       	rjmp	.+18     	; 0x2b32 <vfprintf+0x300>
    2b20:	a2 fe       	sbrs	r10, 2
    2b22:	06 c0       	rjmp	.+12     	; 0x2b30 <vfprintf+0x2fe>
    2b24:	b3 94       	inc	r11
    2b26:	b3 94       	inc	r11
    2b28:	04 c0       	rjmp	.+8      	; 0x2b32 <vfprintf+0x300>
    2b2a:	8a 2d       	mov	r24, r10
    2b2c:	86 78       	andi	r24, 0x86	; 134
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <vfprintf+0x300>
    2b30:	b3 94       	inc	r11
    2b32:	a3 fc       	sbrc	r10, 3
    2b34:	11 c0       	rjmp	.+34     	; 0x2b58 <vfprintf+0x326>
    2b36:	a0 fe       	sbrs	r10, 0
    2b38:	06 c0       	rjmp	.+12     	; 0x2b46 <vfprintf+0x314>
    2b3a:	b2 14       	cp	r11, r2
    2b3c:	88 f4       	brcc	.+34     	; 0x2b60 <vfprintf+0x32e>
    2b3e:	28 0c       	add	r2, r8
    2b40:	92 2c       	mov	r9, r2
    2b42:	9b 18       	sub	r9, r11
    2b44:	0e c0       	rjmp	.+28     	; 0x2b62 <vfprintf+0x330>
    2b46:	b2 14       	cp	r11, r2
    2b48:	60 f4       	brcc	.+24     	; 0x2b62 <vfprintf+0x330>
    2b4a:	b6 01       	movw	r22, r12
    2b4c:	80 e2       	ldi	r24, 0x20	; 32
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2b54:	b3 94       	inc	r11
    2b56:	f7 cf       	rjmp	.-18     	; 0x2b46 <vfprintf+0x314>
    2b58:	b2 14       	cp	r11, r2
    2b5a:	18 f4       	brcc	.+6      	; 0x2b62 <vfprintf+0x330>
    2b5c:	2b 18       	sub	r2, r11
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <vfprintf+0x332>
    2b60:	98 2c       	mov	r9, r8
    2b62:	21 2c       	mov	r2, r1
    2b64:	a4 fe       	sbrs	r10, 4
    2b66:	10 c0       	rjmp	.+32     	; 0x2b88 <vfprintf+0x356>
    2b68:	b6 01       	movw	r22, r12
    2b6a:	80 e3       	ldi	r24, 0x30	; 48
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2b72:	a2 fe       	sbrs	r10, 2
    2b74:	17 c0       	rjmp	.+46     	; 0x2ba4 <vfprintf+0x372>
    2b76:	a1 fc       	sbrc	r10, 1
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <vfprintf+0x34e>
    2b7a:	88 e7       	ldi	r24, 0x78	; 120
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <vfprintf+0x352>
    2b80:	88 e5       	ldi	r24, 0x58	; 88
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	b6 01       	movw	r22, r12
    2b86:	0c c0       	rjmp	.+24     	; 0x2ba0 <vfprintf+0x36e>
    2b88:	8a 2d       	mov	r24, r10
    2b8a:	86 78       	andi	r24, 0x86	; 134
    2b8c:	59 f0       	breq	.+22     	; 0x2ba4 <vfprintf+0x372>
    2b8e:	a1 fe       	sbrs	r10, 1
    2b90:	02 c0       	rjmp	.+4      	; 0x2b96 <vfprintf+0x364>
    2b92:	8b e2       	ldi	r24, 0x2B	; 43
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <vfprintf+0x366>
    2b96:	80 e2       	ldi	r24, 0x20	; 32
    2b98:	a7 fc       	sbrc	r10, 7
    2b9a:	8d e2       	ldi	r24, 0x2D	; 45
    2b9c:	b6 01       	movw	r22, r12
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2ba4:	89 14       	cp	r8, r9
    2ba6:	38 f4       	brcc	.+14     	; 0x2bb6 <vfprintf+0x384>
    2ba8:	b6 01       	movw	r22, r12
    2baa:	80 e3       	ldi	r24, 0x30	; 48
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2bb2:	9a 94       	dec	r9
    2bb4:	f7 cf       	rjmp	.-18     	; 0x2ba4 <vfprintf+0x372>
    2bb6:	8a 94       	dec	r8
    2bb8:	f3 01       	movw	r30, r6
    2bba:	e8 0d       	add	r30, r8
    2bbc:	f1 1d       	adc	r31, r1
    2bbe:	80 81       	ld	r24, Z
    2bc0:	b6 01       	movw	r22, r12
    2bc2:	90 e0       	ldi	r25, 0x00	; 0
    2bc4:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2bc8:	81 10       	cpse	r8, r1
    2bca:	f5 cf       	rjmp	.-22     	; 0x2bb6 <vfprintf+0x384>
    2bcc:	22 20       	and	r2, r2
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <vfprintf+0x3a0>
    2bd0:	42 ce       	rjmp	.-892    	; 0x2856 <vfprintf+0x24>
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	80 e2       	ldi	r24, 0x20	; 32
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	0e 94 10 16 	call	0x2c20	; 0x2c20 <fputc>
    2bdc:	2a 94       	dec	r2
    2bde:	f6 cf       	rjmp	.-20     	; 0x2bcc <vfprintf+0x39a>
    2be0:	f6 01       	movw	r30, r12
    2be2:	86 81       	ldd	r24, Z+6	; 0x06
    2be4:	97 81       	ldd	r25, Z+7	; 0x07
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <vfprintf+0x3ba>
    2be8:	8f ef       	ldi	r24, 0xFF	; 255
    2bea:	9f ef       	ldi	r25, 0xFF	; 255
    2bec:	2b 96       	adiw	r28, 0x0b	; 11
    2bee:	e2 e1       	ldi	r30, 0x12	; 18
    2bf0:	0c 94 12 17 	jmp	0x2e24	; 0x2e24 <__epilogue_restores__>

00002bf4 <strnlen_P>:
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	05 90       	lpm	r0, Z+
    2bf8:	61 50       	subi	r22, 0x01	; 1
    2bfa:	70 40       	sbci	r23, 0x00	; 0
    2bfc:	01 10       	cpse	r0, r1
    2bfe:	d8 f7       	brcc	.-10     	; 0x2bf6 <strnlen_P+0x2>
    2c00:	80 95       	com	r24
    2c02:	90 95       	com	r25
    2c04:	8e 0f       	add	r24, r30
    2c06:	9f 1f       	adc	r25, r31
    2c08:	08 95       	ret

00002c0a <strnlen>:
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	61 50       	subi	r22, 0x01	; 1
    2c0e:	70 40       	sbci	r23, 0x00	; 0
    2c10:	01 90       	ld	r0, Z+
    2c12:	01 10       	cpse	r0, r1
    2c14:	d8 f7       	brcc	.-10     	; 0x2c0c <strnlen+0x2>
    2c16:	80 95       	com	r24
    2c18:	90 95       	com	r25
    2c1a:	8e 0f       	add	r24, r30
    2c1c:	9f 1f       	adc	r25, r31
    2c1e:	08 95       	ret

00002c20 <fputc>:
    2c20:	0f 93       	push	r16
    2c22:	1f 93       	push	r17
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	fb 01       	movw	r30, r22
    2c2a:	23 81       	ldd	r18, Z+3	; 0x03
    2c2c:	21 fd       	sbrc	r18, 1
    2c2e:	03 c0       	rjmp	.+6      	; 0x2c36 <fputc+0x16>
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	9f ef       	ldi	r25, 0xFF	; 255
    2c34:	2c c0       	rjmp	.+88     	; 0x2c8e <fputc+0x6e>
    2c36:	22 ff       	sbrs	r18, 2
    2c38:	16 c0       	rjmp	.+44     	; 0x2c66 <fputc+0x46>
    2c3a:	46 81       	ldd	r20, Z+6	; 0x06
    2c3c:	57 81       	ldd	r21, Z+7	; 0x07
    2c3e:	24 81       	ldd	r18, Z+4	; 0x04
    2c40:	35 81       	ldd	r19, Z+5	; 0x05
    2c42:	42 17       	cp	r20, r18
    2c44:	53 07       	cpc	r21, r19
    2c46:	44 f4       	brge	.+16     	; 0x2c58 <fputc+0x38>
    2c48:	a0 81       	ld	r26, Z
    2c4a:	b1 81       	ldd	r27, Z+1	; 0x01
    2c4c:	9d 01       	movw	r18, r26
    2c4e:	2f 5f       	subi	r18, 0xFF	; 255
    2c50:	3f 4f       	sbci	r19, 0xFF	; 255
    2c52:	31 83       	std	Z+1, r19	; 0x01
    2c54:	20 83       	st	Z, r18
    2c56:	8c 93       	st	X, r24
    2c58:	26 81       	ldd	r18, Z+6	; 0x06
    2c5a:	37 81       	ldd	r19, Z+7	; 0x07
    2c5c:	2f 5f       	subi	r18, 0xFF	; 255
    2c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c60:	37 83       	std	Z+7, r19	; 0x07
    2c62:	26 83       	std	Z+6, r18	; 0x06
    2c64:	14 c0       	rjmp	.+40     	; 0x2c8e <fputc+0x6e>
    2c66:	8b 01       	movw	r16, r22
    2c68:	ec 01       	movw	r28, r24
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	00 84       	ldd	r0, Z+8	; 0x08
    2c6e:	f1 85       	ldd	r31, Z+9	; 0x09
    2c70:	e0 2d       	mov	r30, r0
    2c72:	09 95       	icall
    2c74:	89 2b       	or	r24, r25
    2c76:	e1 f6       	brne	.-72     	; 0x2c30 <fputc+0x10>
    2c78:	d8 01       	movw	r26, r16
    2c7a:	16 96       	adiw	r26, 0x06	; 6
    2c7c:	8d 91       	ld	r24, X+
    2c7e:	9c 91       	ld	r25, X
    2c80:	17 97       	sbiw	r26, 0x07	; 7
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	17 96       	adiw	r26, 0x07	; 7
    2c86:	9c 93       	st	X, r25
    2c88:	8e 93       	st	-X, r24
    2c8a:	16 97       	sbiw	r26, 0x06	; 6
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	0f 91       	pop	r16
    2c96:	08 95       	ret

00002c98 <__ultoa_invert>:
    2c98:	fa 01       	movw	r30, r20
    2c9a:	aa 27       	eor	r26, r26
    2c9c:	28 30       	cpi	r18, 0x08	; 8
    2c9e:	51 f1       	breq	.+84     	; 0x2cf4 <__ultoa_invert+0x5c>
    2ca0:	20 31       	cpi	r18, 0x10	; 16
    2ca2:	81 f1       	breq	.+96     	; 0x2d04 <__ultoa_invert+0x6c>
    2ca4:	e8 94       	clt
    2ca6:	6f 93       	push	r22
    2ca8:	6e 7f       	andi	r22, 0xFE	; 254
    2caa:	6e 5f       	subi	r22, 0xFE	; 254
    2cac:	7f 4f       	sbci	r23, 0xFF	; 255
    2cae:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb2:	af 4f       	sbci	r26, 0xFF	; 255
    2cb4:	b1 e0       	ldi	r27, 0x01	; 1
    2cb6:	3e d0       	rcall	.+124    	; 0x2d34 <__ultoa_invert+0x9c>
    2cb8:	b4 e0       	ldi	r27, 0x04	; 4
    2cba:	3c d0       	rcall	.+120    	; 0x2d34 <__ultoa_invert+0x9c>
    2cbc:	67 0f       	add	r22, r23
    2cbe:	78 1f       	adc	r23, r24
    2cc0:	89 1f       	adc	r24, r25
    2cc2:	9a 1f       	adc	r25, r26
    2cc4:	a1 1d       	adc	r26, r1
    2cc6:	68 0f       	add	r22, r24
    2cc8:	79 1f       	adc	r23, r25
    2cca:	8a 1f       	adc	r24, r26
    2ccc:	91 1d       	adc	r25, r1
    2cce:	a1 1d       	adc	r26, r1
    2cd0:	6a 0f       	add	r22, r26
    2cd2:	71 1d       	adc	r23, r1
    2cd4:	81 1d       	adc	r24, r1
    2cd6:	91 1d       	adc	r25, r1
    2cd8:	a1 1d       	adc	r26, r1
    2cda:	20 d0       	rcall	.+64     	; 0x2d1c <__ultoa_invert+0x84>
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <__ultoa_invert+0x48>
    2cde:	68 94       	set
    2ce0:	3f 91       	pop	r19
    2ce2:	2a e0       	ldi	r18, 0x0A	; 10
    2ce4:	26 9f       	mul	r18, r22
    2ce6:	11 24       	eor	r1, r1
    2ce8:	30 19       	sub	r19, r0
    2cea:	30 5d       	subi	r19, 0xD0	; 208
    2cec:	31 93       	st	Z+, r19
    2cee:	de f6       	brtc	.-74     	; 0x2ca6 <__ultoa_invert+0xe>
    2cf0:	cf 01       	movw	r24, r30
    2cf2:	08 95       	ret
    2cf4:	46 2f       	mov	r20, r22
    2cf6:	47 70       	andi	r20, 0x07	; 7
    2cf8:	40 5d       	subi	r20, 0xD0	; 208
    2cfa:	41 93       	st	Z+, r20
    2cfc:	b3 e0       	ldi	r27, 0x03	; 3
    2cfe:	0f d0       	rcall	.+30     	; 0x2d1e <__ultoa_invert+0x86>
    2d00:	c9 f7       	brne	.-14     	; 0x2cf4 <__ultoa_invert+0x5c>
    2d02:	f6 cf       	rjmp	.-20     	; 0x2cf0 <__ultoa_invert+0x58>
    2d04:	46 2f       	mov	r20, r22
    2d06:	4f 70       	andi	r20, 0x0F	; 15
    2d08:	40 5d       	subi	r20, 0xD0	; 208
    2d0a:	4a 33       	cpi	r20, 0x3A	; 58
    2d0c:	18 f0       	brcs	.+6      	; 0x2d14 <__ultoa_invert+0x7c>
    2d0e:	49 5d       	subi	r20, 0xD9	; 217
    2d10:	31 fd       	sbrc	r19, 1
    2d12:	40 52       	subi	r20, 0x20	; 32
    2d14:	41 93       	st	Z+, r20
    2d16:	02 d0       	rcall	.+4      	; 0x2d1c <__ultoa_invert+0x84>
    2d18:	a9 f7       	brne	.-22     	; 0x2d04 <__ultoa_invert+0x6c>
    2d1a:	ea cf       	rjmp	.-44     	; 0x2cf0 <__ultoa_invert+0x58>
    2d1c:	b4 e0       	ldi	r27, 0x04	; 4
    2d1e:	a6 95       	lsr	r26
    2d20:	97 95       	ror	r25
    2d22:	87 95       	ror	r24
    2d24:	77 95       	ror	r23
    2d26:	67 95       	ror	r22
    2d28:	ba 95       	dec	r27
    2d2a:	c9 f7       	brne	.-14     	; 0x2d1e <__ultoa_invert+0x86>
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	61 05       	cpc	r22, r1
    2d30:	71 05       	cpc	r23, r1
    2d32:	08 95       	ret
    2d34:	9b 01       	movw	r18, r22
    2d36:	ac 01       	movw	r20, r24
    2d38:	0a 2e       	mov	r0, r26
    2d3a:	06 94       	lsr	r0
    2d3c:	57 95       	ror	r21
    2d3e:	47 95       	ror	r20
    2d40:	37 95       	ror	r19
    2d42:	27 95       	ror	r18
    2d44:	ba 95       	dec	r27
    2d46:	c9 f7       	brne	.-14     	; 0x2d3a <__ultoa_invert+0xa2>
    2d48:	62 0f       	add	r22, r18
    2d4a:	73 1f       	adc	r23, r19
    2d4c:	84 1f       	adc	r24, r20
    2d4e:	95 1f       	adc	r25, r21
    2d50:	a0 1d       	adc	r26, r0
    2d52:	08 95       	ret

00002d54 <eeprom_read_byte>:
    2d54:	f9 99       	sbic	0x1f, 1	; 31
    2d56:	fe cf       	rjmp	.-4      	; 0x2d54 <eeprom_read_byte>
    2d58:	92 bd       	out	0x22, r25	; 34
    2d5a:	81 bd       	out	0x21, r24	; 33
    2d5c:	f8 9a       	sbi	0x1f, 0	; 31
    2d5e:	99 27       	eor	r25, r25
    2d60:	80 b5       	in	r24, 0x20	; 32
    2d62:	08 95       	ret

00002d64 <eeprom_read_dword>:
    2d64:	a6 e1       	ldi	r26, 0x16	; 22
    2d66:	b0 e0       	ldi	r27, 0x00	; 0
    2d68:	44 e0       	ldi	r20, 0x04	; 4
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	0c 94 d5 16 	jmp	0x2daa	; 0x2daa <eeprom_read_blraw>

00002d70 <eeprom_write_byte>:
    2d70:	26 2f       	mov	r18, r22

00002d72 <eeprom_write_r18>:
    2d72:	f9 99       	sbic	0x1f, 1	; 31
    2d74:	fe cf       	rjmp	.-4      	; 0x2d72 <eeprom_write_r18>
    2d76:	1f ba       	out	0x1f, r1	; 31
    2d78:	92 bd       	out	0x22, r25	; 34
    2d7a:	81 bd       	out	0x21, r24	; 33
    2d7c:	20 bd       	out	0x20, r18	; 32
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	fa 9a       	sbi	0x1f, 2	; 31
    2d84:	f9 9a       	sbi	0x1f, 1	; 31
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	01 96       	adiw	r24, 0x01	; 1
    2d8a:	08 95       	ret

00002d8c <eeprom_write_dword>:
    2d8c:	24 2f       	mov	r18, r20
    2d8e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <eeprom_write_r18>
    2d92:	25 2f       	mov	r18, r21
    2d94:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <eeprom_write_r18>
    2d98:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <eeprom_write_word>

00002d9c <eeprom_write_word>:
    2d9c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <eeprom_write_byte>
    2da0:	27 2f       	mov	r18, r23
    2da2:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <eeprom_write_r18>

00002da6 <eeprom_read_block>:
    2da6:	dc 01       	movw	r26, r24
    2da8:	cb 01       	movw	r24, r22

00002daa <eeprom_read_blraw>:
    2daa:	fc 01       	movw	r30, r24
    2dac:	f9 99       	sbic	0x1f, 1	; 31
    2dae:	fe cf       	rjmp	.-4      	; 0x2dac <eeprom_read_blraw+0x2>
    2db0:	06 c0       	rjmp	.+12     	; 0x2dbe <eeprom_read_blraw+0x14>
    2db2:	f2 bd       	out	0x22, r31	; 34
    2db4:	e1 bd       	out	0x21, r30	; 33
    2db6:	f8 9a       	sbi	0x1f, 0	; 31
    2db8:	31 96       	adiw	r30, 0x01	; 1
    2dba:	00 b4       	in	r0, 0x20	; 32
    2dbc:	0d 92       	st	X+, r0
    2dbe:	41 50       	subi	r20, 0x01	; 1
    2dc0:	50 40       	sbci	r21, 0x00	; 0
    2dc2:	b8 f7       	brcc	.-18     	; 0x2db2 <eeprom_read_blraw+0x8>
    2dc4:	08 95       	ret

00002dc6 <__muluhisi3>:
    2dc6:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <__umulhisi3>
    2dca:	a5 9f       	mul	r26, r21
    2dcc:	90 0d       	add	r25, r0
    2dce:	b4 9f       	mul	r27, r20
    2dd0:	90 0d       	add	r25, r0
    2dd2:	a4 9f       	mul	r26, r20
    2dd4:	80 0d       	add	r24, r0
    2dd6:	91 1d       	adc	r25, r1
    2dd8:	11 24       	eor	r1, r1
    2dda:	08 95       	ret

00002ddc <__mulshisi3>:
    2ddc:	b7 ff       	sbrs	r27, 7
    2dde:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__muluhisi3>

00002de2 <__mulohisi3>:
    2de2:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <__muluhisi3>
    2de6:	82 1b       	sub	r24, r18
    2de8:	93 0b       	sbc	r25, r19
    2dea:	08 95       	ret

00002dec <__prologue_saves__>:
    2dec:	2f 92       	push	r2
    2dee:	3f 92       	push	r3
    2df0:	4f 92       	push	r4
    2df2:	5f 92       	push	r5
    2df4:	6f 92       	push	r6
    2df6:	7f 92       	push	r7
    2df8:	8f 92       	push	r8
    2dfa:	9f 92       	push	r9
    2dfc:	af 92       	push	r10
    2dfe:	bf 92       	push	r11
    2e00:	cf 92       	push	r12
    2e02:	df 92       	push	r13
    2e04:	ef 92       	push	r14
    2e06:	ff 92       	push	r15
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	cf 93       	push	r28
    2e0e:	df 93       	push	r29
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	ca 1b       	sub	r28, r26
    2e16:	db 0b       	sbc	r29, r27
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	de bf       	out	0x3e, r29	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	cd bf       	out	0x3d, r28	; 61
    2e22:	09 94       	ijmp

00002e24 <__epilogue_restores__>:
    2e24:	2a 88       	ldd	r2, Y+18	; 0x12
    2e26:	39 88       	ldd	r3, Y+17	; 0x11
    2e28:	48 88       	ldd	r4, Y+16	; 0x10
    2e2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e36:	b9 84       	ldd	r11, Y+9	; 0x09
    2e38:	c8 84       	ldd	r12, Y+8	; 0x08
    2e3a:	df 80       	ldd	r13, Y+7	; 0x07
    2e3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2e3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2e40:	0c 81       	ldd	r16, Y+4	; 0x04
    2e42:	1b 81       	ldd	r17, Y+3	; 0x03
    2e44:	aa 81       	ldd	r26, Y+2	; 0x02
    2e46:	b9 81       	ldd	r27, Y+1	; 0x01
    2e48:	ce 0f       	add	r28, r30
    2e4a:	d1 1d       	adc	r29, r1
    2e4c:	0f b6       	in	r0, 0x3f	; 63
    2e4e:	f8 94       	cli
    2e50:	de bf       	out	0x3e, r29	; 62
    2e52:	0f be       	out	0x3f, r0	; 63
    2e54:	cd bf       	out	0x3d, r28	; 61
    2e56:	ed 01       	movw	r28, r26
    2e58:	08 95       	ret

00002e5a <__umulhisi3>:
    2e5a:	a2 9f       	mul	r26, r18
    2e5c:	b0 01       	movw	r22, r0
    2e5e:	b3 9f       	mul	r27, r19
    2e60:	c0 01       	movw	r24, r0
    2e62:	a3 9f       	mul	r26, r19
    2e64:	70 0d       	add	r23, r0
    2e66:	81 1d       	adc	r24, r1
    2e68:	11 24       	eor	r1, r1
    2e6a:	91 1d       	adc	r25, r1
    2e6c:	b2 9f       	mul	r27, r18
    2e6e:	70 0d       	add	r23, r0
    2e70:	81 1d       	adc	r24, r1
    2e72:	11 24       	eor	r1, r1
    2e74:	91 1d       	adc	r25, r1
    2e76:	08 95       	ret

00002e78 <_exit>:
    2e78:	f8 94       	cli

00002e7a <__stop_program>:
    2e7a:	ff cf       	rjmp	.-2      	; 0x2e7a <__stop_program>
