
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00003060  000030f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  0080021c  0080021c  00003210  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000326c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000750  00000000  00000000  000032b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000065ac  00000000  00000000  00003a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000210e  00000000  00000000  00009fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003787  00000000  00000000  0000c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ff4  00000000  00000000  0000f844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001942  00000000  00000000  00010838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cf9  00000000  00000000  0001217a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b8  00000000  00000000  00014e73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__vector_20>
      54:	0c 94 cc 0d 	jmp	0x1b98	; 0x1b98 <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2568>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2566>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2114>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2112>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2066>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2062>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2058>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2048>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2033>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	e0 e6       	ldi	r30, 0x60	; 96
     1fa:	f0 e3       	ldi	r31, 0x30	; 48
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	ac 31       	cpi	r26, 0x1C	; 28
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	ac e1       	ldi	r26, 0x1C	; 28
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a2 3a       	cpi	r26, 0xA2	; 162
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 cf 0a 	call	0x159e	; 0x159e <main>
     21c:	0c 94 2e 18 	jmp	0x305c	; 0x305c <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e3 5e       	subi	r30, 0xE3	; 227
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	e4 5e       	subi	r30, 0xE4	; 228
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 1c 02 	lds	r20, 0x021C	; 0x80021c <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 25 02 	lds	r18, 0x0225	; 0x800225 <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 1c 02 	lds	r30, 0x021C	; 0x80021c <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 1c 02 	sts	0x021C, r18	; 0x80021c <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e3 5e       	subi	r30, 0xE3	; 227
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 1c 02 	lds	r18, 0x021C	; 0x80021c <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 25 02 	sts	0x0225, r20	; 0x800225 <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     344:	89 b1       	in	r24, 0x09	; 9
     346:	83 fb       	bst	r24, 3
     348:	88 27       	eor	r24, r24
     34a:	80 f9       	bld	r24, 0
     34c:	08 95       	ret

0000034e <buzzer_time_left>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
     35e:	40 91 26 02 	lds	r20, 0x0226	; 0x800226 <buzzer_time>
     362:	50 91 27 02 	lds	r21, 0x0227	; 0x800227 <buzzer_time+0x1>
     366:	6a 01       	movw	r12, r20
     368:	55 0f       	add	r21, r21
     36a:	ee 08       	sbc	r14, r14
     36c:	ff 08       	sbc	r15, r15
     36e:	00 91 78 02 	lds	r16, 0x0278	; 0x800278 <clock_at_tone_start>
     372:	10 91 79 02 	lds	r17, 0x0279	; 0x800279 <clock_at_tone_start+0x1>
     376:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <clock_at_tone_start+0x2>
     37a:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <clock_at_tone_start+0x3>
     37e:	c0 0e       	add	r12, r16
     380:	d1 1e       	adc	r13, r17
     382:	e2 1e       	adc	r14, r18
     384:	f3 1e       	adc	r15, r19
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	6c 15       	cp	r22, r12
     38c:	7d 05       	cpc	r23, r13
     38e:	8e 05       	cpc	r24, r14
     390:	9f 05       	cpc	r25, r15
     392:	10 f0       	brcs	.+4      	; 0x398 <buzzer_time_left+0x4a>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	c9 01       	movw	r24, r18
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <next_buzzer_tone>:
     3a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     3ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	ec 59       	subi	r30, 0x9C	; 156
     3c2:	fd 4f       	sbci	r31, 0xFD	; 253
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	0e 94 10 12 	call	0x2420	; 0x2420 <change_OCR1A>
     3cc:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
     3d0:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <clock_at_tone_start>
     3d4:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <clock_at_tone_start+0x1>
     3d8:	80 93 7a 02 	sts	0x027A, r24	; 0x80027a <clock_at_tone_start+0x2>
     3dc:	90 93 7b 02 	sts	0x027B, r25	; 0x80027b <clock_at_tone_start+0x3>
     3e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     3e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	e2 59       	subi	r30, 0x92	; 146
     3ee:	fd 4f       	sbci	r31, 0xFD	; 253
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <buzzer_time+0x1>
     3f8:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <buzzer_time>
     3fc:	08 95       	ret

000003fe <reset_buzzer>:
     3fe:	55 98       	cbi	0x0a, 5	; 10
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
     404:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     408:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     40c:	08 95       	ret

0000040e <play_start_game_sound_effect>:
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <number_of_tones+0x1>
     416:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <number_of_tones>
     41a:	ee e6       	ldi	r30, 0x6E	; 110
     41c:	f2 e0       	ldi	r31, 0x02	; 2
     41e:	84 ef       	ldi	r24, 0xF4	; 244
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	28 ec       	ldi	r18, 0xC8	; 200
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	33 83       	std	Z+3, r19	; 0x03
     42c:	22 83       	std	Z+2, r18	; 0x02
     42e:	95 83       	std	Z+5, r25	; 0x05
     430:	84 83       	std	Z+4, r24	; 0x04
     432:	e4 e6       	ldi	r30, 0x64	; 100
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
     43e:	28 ee       	ldi	r18, 0xE8	; 232
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	33 83       	std	Z+3, r19	; 0x03
     444:	22 83       	std	Z+2, r18	; 0x02
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     452:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     45a:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     45e:	81 11       	cpse	r24, r1
     460:	0e 94 15 12 	call	0x242a	; 0x242a <enable_timer_one>
     464:	08 95       	ret

00000466 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <number_of_tones+0x1>
     46e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <number_of_tones>
		buzzer_durations[0] = 50;
     472:	ee e6       	ldi	r30, 0x6E	; 110
     474:	f2 e0       	ldi	r31, 0x02	; 2
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     486:	e4 e6       	ldi	r30, 0x64	; 100
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	80 ed       	ldi	r24, 0xD0	; 208
     48c:	97 e0       	ldi	r25, 0x07	; 7
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	93 83       	std	Z+3, r25	; 0x03
     498:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     4a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     4aa:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     4ae:	81 11       	cpse	r24, r1
			enable_timer_one();
     4b0:	0e 94 15 12 	call	0x242a	; 0x242a <enable_timer_one>
     4b4:	08 95       	ret

000004b6 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     4b6:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <number_of_tones>
     4ba:	30 91 63 02 	lds	r19, 0x0263	; 0x800263 <number_of_tones+0x1>
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	31 09       	sbc	r19, r1
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     4ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     4ce:	42 17       	cp	r20, r18
     4d0:	53 07       	cpc	r21, r19
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <last_tone_in_sequence+0x22>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	}
     4d8:	08 95       	ret

000004da <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4da:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4de:	89 2b       	or	r24, r25
     4e0:	59 f4       	brne	.+22     	; 0x4f8 <handle_buzzer_loop+0x1e>
     4e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <last_tone_in_sequence>
     4e6:	89 2b       	or	r24, r25
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     4ea:	67 e0       	ldi	r22, 0x07	; 7
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     4f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <reset_buzzer>
     4f6:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4f8:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4fc:	89 2b       	or	r24, r25
     4fe:	11 f4       	brne	.+4      	; 0x504 <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     500:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     504:	08 95       	ret

00000506 <EEPROM_has_saved_game>:
	};
	


uint8_t EEPROM_has_saved_game(void){
	uint32_t current_signature = eeprom_read_dword(SAVE_GAME_SIGNATURE_MEMORY); 
     506:	80 e8       	ldi	r24, 0x80	; 128
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <eeprom_read_dword>
	return (current_signature == SAVE_GAME_SIGNATURE); 
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	61 15       	cp	r22, r1
     512:	72 41       	sbci	r23, 0x12	; 18
     514:	81 05       	cpc	r24, r1
     516:	91 05       	cpc	r25, r1
     518:	09 f0       	breq	.+2      	; 0x51c <EEPROM_has_saved_game+0x16>
     51a:	20 e0       	ldi	r18, 0x00	; 0
}
     51c:	82 2f       	mov	r24, r18
     51e:	08 95       	ret

00000520 <save_game_to_EPPROM>:

void save_game_to_EPPROM(void){
     520:	df 92       	push	r13
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	62 97       	sbiw	r28, 0x12	; 18
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
	cli();
     53e:	f8 94       	cli
	// Save the Food Positions
	eeprom_write_dword(SAVE_GAME_SIGNATURE_MEMORY, SAVE_GAME_SIGNATURE);
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	52 e1       	ldi	r21, 0x12	; 18
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e8       	ldi	r24, 0x80	; 128
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <eeprom_write_dword>
	
	struct Game_Save_Data new_saved_game; 
	new_saved_game.food_one =get_position_of_food(0);
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	0e 94 b3 07 	call	0xf66	; 0xf66 <get_position_of_food>
     556:	89 83       	std	Y+1, r24	; 0x01
	new_saved_game.food_two =get_position_of_food(1);
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 b3 07 	call	0xf66	; 0xf66 <get_position_of_food>
     55e:	8a 83       	std	Y+2, r24	; 0x02
	new_saved_game.food_three =get_position_of_food(2);
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	0e 94 b3 07 	call	0xf66	; 0xf66 <get_position_of_food>
     566:	8b 83       	std	Y+3, r24	; 0x03
	new_saved_game.food_four = get_position_of_food(3);
     568:	83 e0       	ldi	r24, 0x03	; 3
     56a:	0e 94 b3 07 	call	0xf66	; 0xf66 <get_position_of_food>
     56e:	8c 83       	std	Y+4, r24	; 0x04
	new_saved_game.rat = get_rat_position(); 
     570:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <get_rat_position>
     574:	8e 83       	std	Y+6, r24	; 0x06
	new_saved_game.game_score = get_score(); 
     576:	0e 94 30 0c 	call	0x1860	; 0x1860 <get_score>
     57a:	69 87       	std	Y+9, r22	; 0x09
     57c:	7a 87       	std	Y+10, r23	; 0x0a
     57e:	8b 87       	std	Y+11, r24	; 0x0b
     580:	9c 87       	std	Y+12, r25	; 0x0c
	new_saved_game.game_speed = get_current_game_speed(); 
     582:	0e 94 9b 08 	call	0x1136	; 0x1136 <get_current_game_speed>
     586:	98 87       	std	Y+8, r25	; 0x08
     588:	8f 83       	std	Y+7, r24	; 0x07
	new_saved_game.snake_length = get_snake_length(); 
     58a:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <get_snake_length>
     58e:	8d 87       	std	Y+13, r24	; 0x0d
	new_saved_game.clock_ticks = get_clock_ticks(); 
     590:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
     594:	09 2e       	mov	r0, r25
     596:	00 0c       	add	r0, r0
     598:	aa 0b       	sbc	r26, r26
     59a:	bb 0b       	sbc	r27, r27
     59c:	8e 87       	std	Y+14, r24	; 0x0e
     59e:	9f 87       	std	Y+15, r25	; 0x0f
     5a0:	a8 8b       	std	Y+16, r26	; 0x10
     5a2:	b9 8b       	std	Y+17, r27	; 0x11
	new_saved_game.snake_direction = get_current_drn(); 
     5a4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <get_current_drn>
     5a8:	8a 8b       	std	Y+18, r24	; 0x12
	
	//  Save Rat Position and Superfood position if superfood is currently on. 
	if (superfood_is_on_board()){
     5aa:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <superfood_is_on_board>
     5ae:	88 23       	and	r24, r24
     5b0:	21 f0       	breq	.+8      	; 0x5ba <save_game_to_EPPROM+0x9a>
		new_saved_game.superfood = get_superfood_position();
     5b2:	0e 94 3b 10 	call	0x2076	; 0x2076 <get_superfood_position>
     5b6:	8d 83       	std	Y+5, r24	; 0x05
     5b8:	02 c0       	rjmp	.+4      	; 0x5be <save_game_to_EPPROM+0x9e>
	} else{
		new_saved_game.superfood =  0x08; 
     5ba:	88 e0       	ldi	r24, 0x08	; 8
     5bc:	8d 83       	std	Y+5, r24	; 0x05
	}
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 
     5be:	42 e1       	ldi	r20, 0x12	; 18
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	60 ea       	ldi	r22, 0xA0	; 160
     5c4:	71 e0       	ldi	r23, 0x01	; 1
     5c6:	ce 01       	movw	r24, r28
     5c8:	01 96       	adiw	r24, 0x01	; 1
     5ca:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
     5ce:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <get_snake_tail_index>
     5d2:	18 2f       	mov	r17, r24
     5d4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <get_snake_head_index>
     5d8:	81 17       	cp	r24, r17
     5da:	08 f0       	brcs	.+2      	; 0x5de <save_game_to_EPPROM+0xbe>
     5dc:	43 c0       	rjmp	.+134    	; 0x664 <save_game_to_EPPROM+0x144>
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     5de:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <get_snake_tail_index>
     5e2:	d8 2e       	mov	r13, r24
     5e4:	08 2f       	mov	r16, r24
     5e6:	10 e0       	ldi	r17, 0x00	; 0
     5e8:	01 32       	cpi	r16, 0x21	; 33
     5ea:	11 05       	cpc	r17, r1
     5ec:	1c f5       	brge	.+70     	; 0x634 <save_game_to_EPPROM+0x114>
     5ee:	0f 2e       	mov	r0, r31
     5f0:	f0 e3       	ldi	r31, 0x30	; 48
     5f2:	ef 2e       	mov	r14, r31
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	ff 2e       	mov	r15, r31
     5f8:	f0 2d       	mov	r31, r0
			eeprom_write_byte(current_snake_position_memory, 
     5fa:	80 2f       	mov	r24, r16
     5fc:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <get_snake_position_at_index>
     600:	68 2f       	mov	r22, r24
     602:	c7 01       	movw	r24, r14
     604:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <eeprom_write_byte>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
     608:	88 e0       	ldi	r24, 0x08	; 8
     60a:	e8 0e       	add	r14, r24
     60c:	f1 1c       	adc	r15, r1
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     60e:	0f 5f       	subi	r16, 0xFF	; 255
     610:	1f 4f       	sbci	r17, 0xFF	; 255
     612:	01 32       	cpi	r16, 0x21	; 33
     614:	11 05       	cpc	r17, r1
     616:	89 f7       	brne	.-30     	; 0x5fa <save_game_to_EPPROM+0xda>
     618:	0d 2d       	mov	r16, r13
     61a:	10 e0       	ldi	r17, 0x00	; 0
     61c:	11 95       	neg	r17
     61e:	01 95       	neg	r16
     620:	11 09       	sbc	r17, r1
     622:	00 0f       	add	r16, r16
     624:	11 1f       	adc	r17, r17
     626:	00 0f       	add	r16, r16
     628:	11 1f       	adc	r17, r17
     62a:	00 0f       	add	r16, r16
     62c:	11 1f       	adc	r17, r17
     62e:	08 5c       	subi	r16, 0xC8	; 200
     630:	1c 4f       	sbci	r17, 0xFC	; 252
     632:	02 c0       	rjmp	.+4      	; 0x638 <save_game_to_EPPROM+0x118>
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     634:	00 e3       	ldi	r16, 0x30	; 48
     636:	12 e0       	ldi	r17, 0x02	; 2
     638:	e1 2c       	mov	r14, r1
     63a:	f1 2c       	mov	r15, r1
     63c:	0c c0       	rjmp	.+24     	; 0x656 <save_game_to_EPPROM+0x136>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
			eeprom_write_byte(current_snake_position_memory,
     63e:	8e 2d       	mov	r24, r14
     640:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <get_snake_position_at_index>
     644:	68 2f       	mov	r22, r24
     646:	c8 01       	movw	r24, r16
     648:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <eeprom_write_byte>
			get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory +=0x08;
     64c:	08 5f       	subi	r16, 0xF8	; 248
     64e:	1f 4f       	sbci	r17, 0xFF	; 255
			eeprom_write_byte(current_snake_position_memory, 
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	e8 1a       	sub	r14, r24
     654:	f8 0a       	sbc	r15, r24
     656:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <get_snake_head_index>
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	8e 15       	cp	r24, r14
     65e:	9f 05       	cpc	r25, r15
     660:	74 f7       	brge	.-36     	; 0x63e <save_game_to_EPPROM+0x11e>
     662:	19 c0       	rjmp	.+50     	; 0x696 <save_game_to_EPPROM+0x176>
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     664:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <get_snake_tail_index>
     668:	e8 2e       	mov	r14, r24
     66a:	f1 2c       	mov	r15, r1
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     66c:	00 e3       	ldi	r16, 0x30	; 48
     66e:	12 e0       	ldi	r17, 0x02	; 2
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     670:	0c c0       	rjmp	.+24     	; 0x68a <save_game_to_EPPROM+0x16a>
			eeprom_write_byte(current_snake_position_memory, get_snake_position_at_index(i));
     672:	8e 2d       	mov	r24, r14
     674:	0e 94 9c 0e 	call	0x1d38	; 0x1d38 <get_snake_position_at_index>
     678:	68 2f       	mov	r22, r24
     67a:	c8 01       	movw	r24, r16
     67c:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <eeprom_write_byte>
			current_snake_position_memory +=0x08;
     680:	08 5f       	subi	r16, 0xF8	; 248
     682:	1f 4f       	sbci	r17, 0xFF	; 255
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     684:	8f ef       	ldi	r24, 0xFF	; 255
     686:	e8 1a       	sub	r14, r24
     688:	f8 0a       	sbc	r15, r24
     68a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <get_snake_head_index>
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	8e 15       	cp	r24, r14
     692:	9f 05       	cpc	r25, r15
     694:	74 f7       	brge	.-36     	; 0x672 <save_game_to_EPPROM+0x152>
			
		}
	}
	
	//  Add an invalid PosnType byte to signify the end of the snake positions. 
	eeprom_write_byte(current_snake_position_memory,0x08);
     696:	68 e0       	ldi	r22, 0x08	; 8
     698:	c8 01       	movw	r24, r16
     69a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <eeprom_write_byte>
	//print_save_details();
	sei();
     69e:	78 94       	sei

}
     6a0:	62 96       	adiw	r28, 0x12	; 18
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	ff 90       	pop	r15
     6b6:	ef 90       	pop	r14
     6b8:	df 90       	pop	r13
     6ba:	08 95       	ret

000006bc <add_food_to_board>:
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
	}
}

void add_food_to_board(PosnType food_pos){
     6bc:	cf 93       	push	r28
     6be:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     6c0:	0e 94 f5 08 	call	0x11ea	; 0x11ea <is_position_valid>
     6c4:	88 23       	and	r24, r24
     6c6:	99 f0       	breq	.+38     	; 0x6ee <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     6c8:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <numFoodItems>
     6cc:	0e 2e       	mov	r0, r30
     6ce:	00 0c       	add	r0, r0
     6d0:	ff 0b       	sbc	r31, r31
     6d2:	e3 58       	subi	r30, 0x83	; 131
     6d4:	fd 4f       	sbci	r31, 0xFD	; 253
     6d6:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     6d8:	63 e3       	ldi	r22, 0x33	; 51
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	8c 2f       	mov	r24, r28
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
		numFoodItems++; 
     6e4:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <numFoodItems>
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <numFoodItems>
	}
}
     6ee:	cf 91       	pop	r28
     6f0:	08 95       	ret

000006f2 <load_rat_from_EEPROM>:
void load_rat_from_EEPROM(PosnType rat_pos){
     6f2:	cf 93       	push	r28
     6f4:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     6f6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <is_position_valid>
     6fa:	88 23       	and	r24, r24
     6fc:	21 f0       	breq	.+8      	; 0x706 <load_rat_from_EEPROM+0x14>
		set_rat_at_pos(rat_pos); 
     6fe:	8c 2f       	mov	r24, r28
     700:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <set_rat_at_pos>
     704:	02 c0       	rjmp	.+4      	; 0x70a <load_rat_from_EEPROM+0x18>
	}else{
		add_new_rat_position();
     706:	0e 94 9d 0b 	call	0x173a	; 0x173a <add_new_rat_position>
	}
}
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(PosnType super_food){
     70e:	cf 93       	push	r28
     710:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     712:	0e 94 f5 08 	call	0x11ea	; 0x11ea <is_position_valid>
     716:	88 23       	and	r24, r24
     718:	21 f0       	breq	.+8      	; 0x722 <load_superfood_from_EEPROM+0x14>
		load_superfood(super_food);
     71a:	8c 2f       	mov	r24, r28
     71c:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <load_superfood>
     720:	02 c0       	rjmp	.+4      	; 0x726 <load_superfood_from_EEPROM+0x18>
	}else{
		remove_superfood_from_board(); 
     722:	0e 94 1a 10 	call	0x2034	; 0x2034 <remove_superfood_from_board>
	}
}
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     738:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <get_snake_length>
     73c:	81 50       	subi	r24, 0x01	; 1
     73e:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <set_snake_head_pointer>
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
     742:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     744:	c0 e3       	ldi	r28, 0x30	; 48
     746:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     748:	ce 01       	movw	r24, r28
     74a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <eeprom_read_byte>
     74e:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     750:	61 2f       	mov	r22, r17
     752:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     756:	60 ef       	ldi	r22, 0xF0	; 240
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 2f       	mov	r24, r16
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
		snake_memory_position +=8; 
     762:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     764:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     766:	ce 01       	movw	r24, r28
     768:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <eeprom_read_byte>
     76c:	0e 94 f5 08 	call	0x11ea	; 0x11ea <is_position_valid>
     770:	81 11       	cpse	r24, r1
     772:	ea cf       	rjmp	.-44     	; 0x748 <load_snake_from_EPPROM+0x1e>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     774:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <get_snake_head_position>
     778:	6f e0       	ldi	r22, 0x0F	; 15
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>

}
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <new_game_from_EEPROM>:
	//print_save_details();
	sei();

}

void new_game_from_EEPROM(void){
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cd b7       	in	r28, 0x3d	; 61
     792:	de b7       	in	r29, 0x3e	; 62
     794:	62 97       	sbiw	r28, 0x12	; 18
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	de bf       	out	0x3e, r29	; 62
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	cd bf       	out	0x3d, r28	; 61
	if(EEPROM_has_saved_game()){
     7a0:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
     7a4:	88 23       	and	r24, r24
     7a6:	09 f4       	brne	.+2      	; 0x7aa <new_game_from_EEPROM+0x1e>
     7a8:	4a c0       	rjmp	.+148    	; 0x83e <new_game_from_EEPROM+0xb2>
		clear_terminal(); 
     7aa:	0e 94 ce 10 	call	0x219c	; 0x219c <clear_terminal>
		ledmatrix_clear();
     7ae:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <ledmatrix_clear>
		init_score_on_terminal();
     7b2:	0e 94 17 11 	call	0x222e	; 0x222e <init_score_on_terminal>
		
		struct Game_Save_Data game_from_EEPROM; 
		eeprom_read_block(&game_from_EEPROM, SAVED_DATA_START, 18); 
     7b6:	42 e1       	ldi	r20, 0x12	; 18
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	60 ea       	ldi	r22, 0xA0	; 160
     7bc:	71 e0       	ldi	r23, 0x01	; 1
     7be:	ce 01       	movw	r24, r28
     7c0:	01 96       	adiw	r24, 0x01	; 1
     7c2:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
		
		// Methods from init_game(); 
		set_score(game_from_EEPROM.game_score);
     7c6:	69 85       	ldd	r22, Y+9	; 0x09
     7c8:	7a 85       	ldd	r23, Y+10	; 0x0a
     7ca:	8b 85       	ldd	r24, Y+11	; 0x0b
     7cc:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ce:	0e 94 39 0c 	call	0x1872	; 0x1872 <set_score>
		set_clock_ticks(game_from_EEPROM.clock_ticks); 
     7d2:	6e 85       	ldd	r22, Y+14	; 0x0e
     7d4:	7f 85       	ldd	r23, Y+15	; 0x0f
     7d6:	88 89       	ldd	r24, Y+16	; 0x10
     7d8:	99 89       	ldd	r25, Y+17	; 0x11
     7da:	0e 94 81 11 	call	0x2302	; 0x2302 <set_clock_ticks>
		update_terminal_score(); 
     7de:	0e 94 32 11 	call	0x2264	; 0x2264 <update_terminal_score>
		set_game_speed(game_from_EEPROM.game_speed);
     7e2:	8f 81       	ldd	r24, Y+7	; 0x07
     7e4:	98 85       	ldd	r25, Y+8	; 0x08
     7e6:	0e 94 a0 08 	call	0x1140	; 0x1140 <set_game_speed>
		load_rat_from_EEPROM(game_from_EEPROM.rat);
     7ea:	8e 81       	ldd	r24, Y+6	; 0x06
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <load_rat_from_EEPROM>
		initialise_timer_one();
     7f2:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <initialise_timer_one>
		play_start_game_sound_effect();
     7f6:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
	
		// Init food, rats, superfood and snake
		add_food_to_board(game_from_EEPROM.food_one);
     7fa:	89 81       	ldd	r24, Y+1	; 0x01
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 5e 03 	call	0x6bc	; 0x6bc <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_two);
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 5e 03 	call	0x6bc	; 0x6bc <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_three);
     80a:	8b 81       	ldd	r24, Y+3	; 0x03
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 5e 03 	call	0x6bc	; 0x6bc <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_four);
     812:	8c 81       	ldd	r24, Y+4	; 0x04
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 5e 03 	call	0x6bc	; 0x6bc <add_food_to_board>
		load_superfood_from_EEPROM( game_from_EEPROM.superfood);
     81a:	8d 81       	ldd	r24, Y+5	; 0x05
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 87 03 	call	0x70e	; 0x70e <load_superfood_from_EEPROM>
		set_snake_length(game_from_EEPROM.snake_length); 
     822:	8d 85       	ldd	r24, Y+13	; 0x0d
     824:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <set_snake_length>
		reset_snake_drn(game_from_EEPROM.snake_direction); 
     828:	8a 89       	ldd	r24, Y+18	; 0x12
     82a:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <reset_snake_drn>
		load_snake_from_EPPROM();
     82e:	0e 94 95 03 	call	0x72a	; 0x72a <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     832:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     836:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     83a:	10 92 2b 02 	sts	0x022B, r1	; 0x80022b <load_EEPROM_data_on_next_game>
	}
}
     83e:	62 96       	adiw	r28, 0x12	; 18
     840:	0f b6       	in	r0, 0x3f	; 63
     842:	f8 94       	cli
     844:	de bf       	out	0x3e, r29	; 62
     846:	0f be       	out	0x3f, r0	; 63
     848:	cd bf       	out	0x3d, r28	; 61
     84a:	df 91       	pop	r29
     84c:	cf 91       	pop	r28
     84e:	08 95       	ret

00000850 <move_place_down>:
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
		
	clear_terminal();
}

void move_place_down(uint16_t mem_position){
     850:	0f 93       	push	r16
     852:	1f 93       	push	r17
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	cd b7       	in	r28, 0x3d	; 61
     85a:	de b7       	in	r29, 0x3e	; 62
     85c:	27 97       	sbiw	r28, 0x07	; 7
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	8c 01       	movw	r16, r24
	struct High_Score_Place high_score_place;
	eeprom_read_block(&high_score_place, mem_position, 7); 
     86a:	47 e0       	ldi	r20, 0x07	; 7
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	bc 01       	movw	r22, r24
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
	eeprom_write_block(&high_score_place, mem_position +64, 7);
     878:	b8 01       	movw	r22, r16
     87a:	60 5c       	subi	r22, 0xC0	; 192
     87c:	7f 4f       	sbci	r23, 0xFF	; 255
     87e:	47 e0       	ldi	r20, 0x07	; 7
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	ce 01       	movw	r24, r28
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>
}
     88a:	27 96       	adiw	r28, 0x07	; 7
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	1f 91       	pop	r17
     89c:	0f 91       	pop	r16
     89e:	08 95       	ret

000008a0 <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(NAME_FOUR); 
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	0e 94 28 04 	call	0x850	; 0x850 <move_place_down>
     8a8:	08 95       	ret

000008aa <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     8aa:	0e 94 50 04 	call	0x8a0	; 0x8a0 <move_four_place_down>
	move_place_down(NAME_THREE);
     8ae:	80 ec       	ldi	r24, 0xC0	; 192
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	0e 94 28 04 	call	0x850	; 0x850 <move_place_down>
     8b6:	08 95       	ret

000008b8 <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     8b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <move_three_place_down>
	move_place_down(NAME_TWO);
     8bc:	80 e8       	ldi	r24, 0x80	; 128
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	0e 94 28 04 	call	0x850	; 0x850 <move_place_down>
     8c4:	08 95       	ret

000008c6 <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     8c6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <move_two_place_down>
	move_place_down(NAME_ONE);
     8ca:	80 e4       	ldi	r24, 0x40	; 64
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	0e 94 28 04 	call	0x850	; 0x850 <move_place_down>
     8d2:	08 95       	ret

000008d4 <initialise_EEPROM>:
}

void initialise_EEPROM(void){
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	27 97       	sbiw	r28, 0x07	; 7
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     8e8:	44 e3       	ldi	r20, 0x34	; 52
     8ea:	52 e1       	ldi	r21, 0x12	; 18
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	80 e0       	ldi	r24, 0x00	; 0
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <eeprom_write_dword>
	struct High_Score_Place empty_score_place;
	empty_score_place.name[0] = ' ';
     8f8:	80 e2       	ldi	r24, 0x20	; 32
     8fa:	89 83       	std	Y+1, r24	; 0x01
	empty_score_place.name[1] = ' ';
     8fc:	8a 83       	std	Y+2, r24	; 0x02
	empty_score_place.name[2] = ' ';
     8fe:	8b 83       	std	Y+3, r24	; 0x03
	empty_score_place.score = 0; 
     900:	1c 82       	std	Y+4, r1	; 0x04
     902:	1d 82       	std	Y+5, r1	; 0x05
     904:	1e 82       	std	Y+6, r1	; 0x06
     906:	1f 82       	std	Y+7, r1	; 0x07
	eeprom_write_block(&empty_score_place, NAME_ONE, 7);
     908:	47 e0       	ldi	r20, 0x07	; 7
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	60 e4       	ldi	r22, 0x40	; 64
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	ce 01       	movw	r24, r28
     912:	01 96       	adiw	r24, 0x01	; 1
     914:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_TWO, 7);
     918:	47 e0       	ldi	r20, 0x07	; 7
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e8       	ldi	r22, 0x80	; 128
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	01 96       	adiw	r24, 0x01	; 1
     924:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_THREE, 7);
     928:	47 e0       	ldi	r20, 0x07	; 7
     92a:	50 e0       	ldi	r21, 0x00	; 0
     92c:	60 ec       	ldi	r22, 0xC0	; 192
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FOUR, 7);
     938:	47 e0       	ldi	r20, 0x07	; 7
     93a:	50 e0       	ldi	r21, 0x00	; 0
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	71 e0       	ldi	r23, 0x01	; 1
     940:	ce 01       	movw	r24, r28
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FIVE, 7);
     948:	47 e0       	ldi	r20, 0x07	; 7
     94a:	50 e0       	ldi	r21, 0x00	; 0
     94c:	60 e4       	ldi	r22, 0x40	; 64
     94e:	71 e0       	ldi	r23, 0x01	; 1
     950:	ce 01       	movw	r24, r28
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>

	}
     958:	27 96       	adiw	r28, 0x07	; 7
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <EEPROM_High_Score_has_been_initialised>:


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	0e 94 aa 17 	call	0x2f54	; 0x2f54 <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     972:	21 e0       	ldi	r18, 0x01	; 1
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	64 33       	cpi	r22, 0x34	; 52
     978:	72 41       	sbci	r23, 0x12	; 18
     97a:	81 05       	cpc	r24, r1
     97c:	91 05       	cpc	r25, r1
     97e:	11 f0       	breq	.+4      	; 0x984 <EEPROM_High_Score_has_been_initialised+0x1a>
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
}
     984:	c9 01       	movw	r24, r18
     986:	08 95       	ret

00000988 <is_high_score>:
struct High_Score_Place {
	char name[3];
	uint32_t score;
};

uint8_t is_high_score(void){
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	cd b7       	in	r28, 0x3d	; 61
     996:	de b7       	in	r29, 0x3e	; 62
     998:	27 97       	sbiw	r28, 0x07	; 7
     99a:	0f b6       	in	r0, 0x3f	; 63
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
	uint32_t score = get_score();
     9a4:	0e 94 30 0c 	call	0x1860	; 0x1860 <get_score>
     9a8:	6b 01       	movw	r12, r22
     9aa:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place;
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     9ac:	47 e0       	ldi	r20, 0x07	; 7
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e4       	ldi	r22, 0x40	; 64
     9b2:	71 e0       	ldi	r23, 0x01	; 1
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
     9bc:	8c 81       	ldd	r24, Y+4	; 0x04
     9be:	9d 81       	ldd	r25, Y+5	; 0x05
     9c0:	ae 81       	ldd	r26, Y+6	; 0x06
     9c2:	bf 81       	ldd	r27, Y+7	; 0x07
     9c4:	c8 16       	cp	r12, r24
     9c6:	d9 06       	cpc	r13, r25
     9c8:	ea 06       	cpc	r14, r26
     9ca:	fb 06       	cpc	r15, r27
     9cc:	40 f4       	brcc	.+16     	; 0x9de <is_high_score+0x56>
     9ce:	0e 94 b5 04 	call	0x96a	; 0x96a <EEPROM_High_Score_has_been_initialised>
     9d2:	21 e0       	ldi	r18, 0x01	; 1
     9d4:	89 2b       	or	r24, r25
     9d6:	09 f0       	breq	.+2      	; 0x9da <is_high_score+0x52>
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	82 2f       	mov	r24, r18
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <is_high_score+0x58>
     9de:	81 e0       	ldi	r24, 0x01	; 1
}
     9e0:	27 96       	adiw	r28, 0x07	; 7
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	ff 90       	pop	r15
     9f2:	ef 90       	pop	r14
     9f4:	df 90       	pop	r13
     9f6:	cf 90       	pop	r12
     9f8:	08 95       	ret

000009fa <high_score_position>:

uint16_t high_score_position(void){
     9fa:	cf 92       	push	r12
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cd b7       	in	r28, 0x3d	; 61
     a08:	de b7       	in	r29, 0x3e	; 62
     a0a:	27 97       	sbiw	r28, 0x07	; 7
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	de bf       	out	0x3e, r29	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	cd bf       	out	0x3d, r28	; 61
	if (!(EEPROM_High_Score_has_been_initialised())){
     a16:	0e 94 b5 04 	call	0x96a	; 0x96a <EEPROM_High_Score_has_been_initialised>
     a1a:	89 2b       	or	r24, r25
     a1c:	09 f4       	brne	.+2      	; 0xa20 <high_score_position+0x26>
     a1e:	5b c0       	rjmp	.+182    	; 0xad6 <high_score_position+0xdc>
		return NAME_ONE;
	}
	
	uint32_t score = get_score(); 
     a20:	0e 94 30 0c 	call	0x1860	; 0x1860 <get_score>
     a24:	6b 01       	movw	r12, r22
     a26:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);
     a28:	47 e0       	ldi	r20, 0x07	; 7
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	60 e4       	ldi	r22, 0x40	; 64
     a2e:	70 e0       	ldi	r23, 0x00	; 0
     a30:	ce 01       	movw	r24, r28
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>

	if (score> current_score_place.score){
     a38:	8c 81       	ldd	r24, Y+4	; 0x04
     a3a:	9d 81       	ldd	r25, Y+5	; 0x05
     a3c:	ae 81       	ldd	r26, Y+6	; 0x06
     a3e:	bf 81       	ldd	r27, Y+7	; 0x07
     a40:	8c 15       	cp	r24, r12
     a42:	9d 05       	cpc	r25, r13
     a44:	ae 05       	cpc	r26, r14
     a46:	bf 05       	cpc	r27, r15
     a48:	08 f4       	brcc	.+2      	; 0xa4c <high_score_position+0x52>
     a4a:	48 c0       	rjmp	.+144    	; 0xadc <high_score_position+0xe2>
		return NAME_ONE;
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
     a4c:	47 e0       	ldi	r20, 0x07	; 7
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	60 e8       	ldi	r22, 0x80	; 128
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	ce 01       	movw	r24, r28
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
	if (score> current_score_place.score){
     a5c:	8c 81       	ldd	r24, Y+4	; 0x04
     a5e:	9d 81       	ldd	r25, Y+5	; 0x05
     a60:	ae 81       	ldd	r26, Y+6	; 0x06
     a62:	bf 81       	ldd	r27, Y+7	; 0x07
     a64:	8c 15       	cp	r24, r12
     a66:	9d 05       	cpc	r25, r13
     a68:	ae 05       	cpc	r26, r14
     a6a:	bf 05       	cpc	r27, r15
     a6c:	d0 f1       	brcs	.+116    	; 0xae2 <high_score_position+0xe8>
		return NAME_TWO;
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
     a6e:	47 e0       	ldi	r20, 0x07	; 7
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	60 ec       	ldi	r22, 0xC0	; 192
     a74:	70 e0       	ldi	r23, 0x00	; 0
     a76:	ce 01       	movw	r24, r28
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
	if (score> current_score_place.score){
     a7e:	8c 81       	ldd	r24, Y+4	; 0x04
     a80:	9d 81       	ldd	r25, Y+5	; 0x05
     a82:	ae 81       	ldd	r26, Y+6	; 0x06
     a84:	bf 81       	ldd	r27, Y+7	; 0x07
     a86:	8c 15       	cp	r24, r12
     a88:	9d 05       	cpc	r25, r13
     a8a:	ae 05       	cpc	r26, r14
     a8c:	bf 05       	cpc	r27, r15
     a8e:	60 f1       	brcs	.+88     	; 0xae8 <high_score_position+0xee>
		return NAME_THREE;
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
     a90:	47 e0       	ldi	r20, 0x07	; 7
     a92:	50 e0       	ldi	r21, 0x00	; 0
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	71 e0       	ldi	r23, 0x01	; 1
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
	if (score> current_score_place.score){
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	9d 81       	ldd	r25, Y+5	; 0x05
     aa4:	ae 81       	ldd	r26, Y+6	; 0x06
     aa6:	bf 81       	ldd	r27, Y+7	; 0x07
     aa8:	8c 15       	cp	r24, r12
     aaa:	9d 05       	cpc	r25, r13
     aac:	ae 05       	cpc	r26, r14
     aae:	bf 05       	cpc	r27, r15
     ab0:	f0 f0       	brcs	.+60     	; 0xaee <high_score_position+0xf4>
		return NAME_FOUR;
	}
	
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     ab2:	47 e0       	ldi	r20, 0x07	; 7
     ab4:	50 e0       	ldi	r21, 0x00	; 0
     ab6:	60 e4       	ldi	r22, 0x40	; 64
     ab8:	71 e0       	ldi	r23, 0x01	; 1
     aba:	ce 01       	movw	r24, r28
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
	if (score> current_score_place.score){
     ac2:	8c 81       	ldd	r24, Y+4	; 0x04
     ac4:	9d 81       	ldd	r25, Y+5	; 0x05
     ac6:	ae 81       	ldd	r26, Y+6	; 0x06
     ac8:	bf 81       	ldd	r27, Y+7	; 0x07
     aca:	8c 15       	cp	r24, r12
     acc:	9d 05       	cpc	r25, r13
     ace:	ae 05       	cpc	r26, r14
     ad0:	bf 05       	cpc	r27, r15
     ad2:	80 f0       	brcs	.+32     	; 0xaf4 <high_score_position+0xfa>
		return NAME_FIVE;
	}
}
     ad4:	11 c0       	rjmp	.+34     	; 0xaf8 <high_score_position+0xfe>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return NAME_ONE;
     ad6:	80 e4       	ldi	r24, 0x40	; 64
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e c0       	rjmp	.+28     	; 0xaf8 <high_score_position+0xfe>
	uint32_t score = get_score(); 
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);

	if (score> current_score_place.score){
		return NAME_ONE;
     adc:	80 e4       	ldi	r24, 0x40	; 64
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0b c0       	rjmp	.+22     	; 0xaf8 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
	if (score> current_score_place.score){
		return NAME_TWO;
     ae2:	80 e8       	ldi	r24, 0x80	; 128
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	08 c0       	rjmp	.+16     	; 0xaf8 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
	if (score> current_score_place.score){
		return NAME_THREE;
     ae8:	80 ec       	ldi	r24, 0xC0	; 192
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
	if (score> current_score_place.score){
		return NAME_FOUR;
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
	if (score> current_score_place.score){
		return NAME_FIVE;
     af4:	80 e4       	ldi	r24, 0x40	; 64
     af6:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     af8:	27 96       	adiw	r28, 0x07	; 7
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	ff 90       	pop	r15
     b0a:	ef 90       	pop	r14
     b0c:	df 90       	pop	r13
     b0e:	cf 90       	pop	r12
     b10:	08 95       	ret

00000b12 <handle_sequence_into_EEPFROM>:
				current_high_score_name[2] = ' ';
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     b12:	0f 93       	push	r16
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
     b1a:	cd b7       	in	r28, 0x3d	; 61
     b1c:	de b7       	in	r29, 0x3e	; 62
     b1e:	27 97       	sbiw	r28, 0x07	; 7
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	de bf       	out	0x3e, r29	; 62
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     b2a:	44 e3       	ldi	r20, 0x34	; 52
     b2c:	52 e1       	ldi	r21, 0x12	; 18
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	80 e0       	ldi	r24, 0x00	; 0
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <eeprom_write_dword>
	uint16_t score_position= high_score_position();
     b3a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <high_score_position>
     b3e:	8c 01       	movw	r16, r24
		switch(score_position){
     b40:	80 38       	cpi	r24, 0x80	; 128
     b42:	91 05       	cpc	r25, r1
     b44:	91 f0       	breq	.+36     	; 0xb6a <handle_sequence_into_EEPFROM+0x58>
     b46:	20 f4       	brcc	.+8      	; 0xb50 <handle_sequence_into_EEPFROM+0x3e>
     b48:	80 34       	cpi	r24, 0x40	; 64
     b4a:	91 05       	cpc	r25, r1
     b4c:	89 f0       	breq	.+34     	; 0xb70 <handle_sequence_into_EEPFROM+0x5e>
     b4e:	12 c0       	rjmp	.+36     	; 0xb74 <handle_sequence_into_EEPFROM+0x62>
     b50:	80 3c       	cpi	r24, 0xC0	; 192
     b52:	91 05       	cpc	r25, r1
     b54:	39 f0       	breq	.+14     	; 0xb64 <handle_sequence_into_EEPFROM+0x52>
     b56:	01 15       	cp	r16, r1
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	18 07       	cpc	r17, r24
     b5c:	59 f4       	brne	.+22     	; 0xb74 <handle_sequence_into_EEPFROM+0x62>
			case NAME_FOUR: move_four_place_down(); break;
     b5e:	0e 94 50 04 	call	0x8a0	; 0x8a0 <move_four_place_down>
     b62:	08 c0       	rjmp	.+16     	; 0xb74 <handle_sequence_into_EEPFROM+0x62>
			case NAME_THREE: move_three_place_down(); break;
     b64:	0e 94 55 04 	call	0x8aa	; 0x8aa <move_three_place_down>
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <handle_sequence_into_EEPFROM+0x62>
			case NAME_TWO: move_two_place_down(); break;
     b6a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <move_two_place_down>
     b6e:	02 c0       	rjmp	.+4      	; 0xb74 <handle_sequence_into_EEPFROM+0x62>
			case NAME_ONE: move_one_place_down(); break;
     b70:	0e 94 63 04 	call	0x8c6	; 0x8c6 <move_one_place_down>
		}
	struct High_Score_Place new_score; 
	new_score.name[0] = current_high_score_name[0];
     b74:	e8 e2       	ldi	r30, 0x28	; 40
     b76:	f2 e0       	ldi	r31, 0x02	; 2
     b78:	80 81       	ld	r24, Z
     b7a:	89 83       	std	Y+1, r24	; 0x01
	new_score.name[1] = current_high_score_name[1];
     b7c:	81 81       	ldd	r24, Z+1	; 0x01
     b7e:	8a 83       	std	Y+2, r24	; 0x02
	new_score.name[2] = current_high_score_name[2];
     b80:	82 81       	ldd	r24, Z+2	; 0x02
     b82:	8b 83       	std	Y+3, r24	; 0x03
	new_score.score = get_score();
     b84:	0e 94 30 0c 	call	0x1860	; 0x1860 <get_score>
     b88:	6c 83       	std	Y+4, r22	; 0x04
     b8a:	7d 83       	std	Y+5, r23	; 0x05
     b8c:	8e 83       	std	Y+6, r24	; 0x06
     b8e:	9f 83       	std	Y+7, r25	; 0x07
	
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
     b90:	47 e0       	ldi	r20, 0x07	; 7
     b92:	50 e0       	ldi	r21, 0x00	; 0
     b94:	b8 01       	movw	r22, r16
     b96:	ce 01       	movw	r24, r28
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <eeprom_write_block>
		
	clear_terminal();
     b9e:	0e 94 ce 10 	call	0x219c	; 0x219c <clear_terminal>
}
     ba2:	27 96       	adiw	r28, 0x07	; 7
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	f8 94       	cli
     ba8:	de bf       	out	0x3e, r29	; 62
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	cd bf       	out	0x3d, r28	; 61
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	08 95       	ret

00000bb8 <set_high_score_name>:
	if (score> current_score_place.score){
		return NAME_FIVE;
	}
}

void set_high_score_name(void){
     bb8:	ef 92       	push	r14
     bba:	ff 92       	push	r15
     bbc:	0f 93       	push	r16
     bbe:	1f 93       	push	r17
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
	move_cursor(10,8);
     bc4:	68 e0       	ldi	r22, 0x08	; 8
     bc6:	8a e0       	ldi	r24, 0x0A	; 10
     bc8:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     bcc:	83 e3       	ldi	r24, 0x33	; 51
     bce:	91 e0       	ldi	r25, 0x01	; 1
     bd0:	9f 93       	push	r25
     bd2:	8f 93       	push	r24
     bd4:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     bdc:	00 e0       	ldi	r16, 0x00	; 0
     bde:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     be0:	0f 2e       	mov	r0, r31
     be2:	fc e9       	ldi	r31, 0x9C	; 156
     be4:	ef 2e       	mov	r14, r31
     be6:	f3 e0       	ldi	r31, 0x03	; 3
     be8:	ff 2e       	mov	r15, r31
     bea:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     bec:	0e 94 ed 10 	call	0x21da	; 0x21da <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     bf0:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <serial_input_available>
     bf4:	88 23       	and	r24, r24
     bf6:	d1 f3       	breq	.-12     	; 0xbec <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     bf8:	f7 01       	movw	r30, r14
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	0e 94 80 14 	call	0x2900	; 0x2900 <fgetc>
     c02:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     c04:	98 2f       	mov	r25, r24
     c06:	91 54       	subi	r25, 0x41	; 65
     c08:	9a 33       	cpi	r25, 0x3A	; 58
     c0a:	98 f4       	brcc	.+38     	; 0xc32 <set_high_score_name+0x7a>
     c0c:	03 30       	cpi	r16, 0x03	; 3
     c0e:	11 05       	cpc	r17, r1
     c10:	84 f4       	brge	.+32     	; 0xc32 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     c12:	69 e0       	ldi	r22, 0x09	; 9
     c14:	8a e0       	ldi	r24, 0x0A	; 10
     c16:	80 0f       	add	r24, r16
     c18:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     c1c:	f8 01       	movw	r30, r16
     c1e:	e8 5d       	subi	r30, 0xD8	; 216
     c20:	fd 4f       	sbci	r31, 0xFD	; 253
     c22:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     c24:	ce 01       	movw	r24, r28
     c26:	99 27       	eor	r25, r25
     c28:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <putchar>
				score_name_pointer++;
     c2c:	0f 5f       	subi	r16, 0xFF	; 255
     c2e:	1f 4f       	sbci	r17, 0xFF	; 255
     c30:	dd cf       	rjmp	.-70     	; 0xbec <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>1){
     c32:	8a 30       	cpi	r24, 0x0A	; 10
     c34:	21 f4       	brne	.+8      	; 0xc3e <set_high_score_name+0x86>
     c36:	02 30       	cpi	r16, 0x02	; 2
     c38:	11 05       	cpc	r17, r1
     c3a:	c4 f2       	brlt	.-80     	; 0xbec <set_high_score_name+0x34>
     c3c:	11 c0       	rjmp	.+34     	; 0xc60 <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     c3e:	8f 37       	cpi	r24, 0x7F	; 127
     c40:	a9 f6       	brne	.-86     	; 0xbec <set_high_score_name+0x34>
				printf("%c", ' ');
     c42:	80 e2       	ldi	r24, 0x20	; 32
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     c4a:	10 16       	cp	r1, r16
     c4c:	11 06       	cpc	r1, r17
     c4e:	14 f4       	brge	.+4      	; 0xc54 <set_high_score_name+0x9c>
     c50:	01 50       	subi	r16, 0x01	; 1
     c52:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     c54:	69 e0       	ldi	r22, 0x09	; 9
     c56:	8a e0       	ldi	r24, 0x0A	; 10
     c58:	80 0f       	add	r24, r16
     c5a:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
     c5e:	c6 cf       	rjmp	.-116    	; 0xbec <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     c60:	f9 99       	sbic	0x1f, 1	; 31
     c62:	fe cf       	rjmp	.-4      	; 0xc60 <set_high_score_name+0xa8>
				handle_sequence_into_EEPFROM();
     c64:	0e 94 89 05 	call	0xb12	; 0xb12 <handle_sequence_into_EEPFROM>
				current_high_score_name[0] = ' ';
     c68:	e8 e2       	ldi	r30, 0x28	; 40
     c6a:	f2 e0       	ldi	r31, 0x02	; 2
     c6c:	80 e2       	ldi	r24, 0x20	; 32
     c6e:	80 83       	st	Z, r24
				current_high_score_name[1] = ' ';
     c70:	81 83       	std	Z+1, r24	; 0x01
				current_high_score_name[2] = ' ';
     c72:	82 83       	std	Z+2, r24	; 0x02
				break; 
			}
		}
	}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	27 97       	sbiw	r28, 0x07	; 7
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
	move_cursor(10,11);
     c96:	6b e0       	ldi	r22, 0x0B	; 11
     c98:	8a e0       	ldi	r24, 0x0A	; 10
     c9a:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     c9e:	8c e7       	ldi	r24, 0x7C	; 124
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9f 93       	push	r25
     ca4:	8f 93       	push	r24
     ca6:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
	move_cursor(10,13);
     caa:	6d e0       	ldi	r22, 0x0D	; 13
     cac:	8a e0       	ldi	r24, 0x0A	; 10
     cae:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     cb2:	0e 94 b5 04 	call	0x96a	; 0x96a <EEPROM_High_Score_has_been_initialised>
     cb6:	0f 90       	pop	r0
     cb8:	0f 90       	pop	r0
     cba:	89 2b       	or	r24, r25
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <display_EEPROM_high_score+0x3e>
     cbe:	b6 c0       	rjmp	.+364    	; 0xe2c <display_EEPROM_high_score+0x1aa>
		struct High_Score_Place score_place_to_display; 
		eeprom_read_block(&score_place_to_display, NAME_ONE, 7);
     cc0:	47 e0       	ldi	r20, 0x07	; 7
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	60 e4       	ldi	r22, 0x40	; 64
     cc6:	70 e0       	ldi	r23, 0x00	; 0
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
		printf("First: %c%c%c %d", score_place_to_display.name[0], 
     cd0:	8f 81       	ldd	r24, Y+7	; 0x07
     cd2:	8f 93       	push	r24
     cd4:	8e 81       	ldd	r24, Y+6	; 0x06
     cd6:	8f 93       	push	r24
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	8f 93       	push	r24
     cdc:	8c 81       	ldd	r24, Y+4	; 0x04
     cde:	8f 93       	push	r24
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	1f 92       	push	r1
     ce4:	8f 93       	push	r24
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	1f 92       	push	r1
     cea:	8f 93       	push	r24
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	1f 92       	push	r1
     cf0:	8f 93       	push	r24
     cf2:	8c e6       	ldi	r24, 0x6C	; 108
     cf4:	91 e0       	ldi	r25, 0x01	; 1
     cf6:	9f 93       	push	r25
     cf8:	8f 93       	push	r24
     cfa:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
									score_place_to_display.name[1], 
									score_place_to_display.name[2], 
									score_place_to_display.score);
		
		move_cursor(10,14);					
     cfe:	6e e0       	ldi	r22, 0x0E	; 14
     d00:	8a e0       	ldi	r24, 0x0A	; 10
     d02:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
		
		eeprom_read_block(&score_place_to_display, NAME_TWO, 7);
     d06:	47 e0       	ldi	r20, 0x07	; 7
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	60 e8       	ldi	r22, 0x80	; 128
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
		printf("Second: %c%c%c %d", score_place_to_display.name[0],
     d16:	8f 81       	ldd	r24, Y+7	; 0x07
     d18:	8f 93       	push	r24
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	8f 93       	push	r24
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	8f 93       	push	r24
     d22:	8c 81       	ldd	r24, Y+4	; 0x04
     d24:	8f 93       	push	r24
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	1f 92       	push	r1
     d2a:	8f 93       	push	r24
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	1f 92       	push	r1
     d30:	8f 93       	push	r24
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	1f 92       	push	r1
     d36:	8f 93       	push	r24
     d38:	8d e7       	ldi	r24, 0x7D	; 125
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	9f 93       	push	r25
     d3e:	8f 93       	push	r24
     d40:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,15);
     d44:	6f e0       	ldi	r22, 0x0F	; 15
     d46:	8a e0       	ldi	r24, 0x0A	; 10
     d48:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_THREE, 7);
     d4c:	47 e0       	ldi	r20, 0x07	; 7
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	60 ec       	ldi	r22, 0xC0	; 192
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	ce 01       	movw	r24, r28
     d56:	01 96       	adiw	r24, 0x01	; 1
     d58:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
		printf("Third: %c%c%c %d", score_place_to_display.name[0],
     d5c:	8f 81       	ldd	r24, Y+7	; 0x07
     d5e:	8f 93       	push	r24
     d60:	8e 81       	ldd	r24, Y+6	; 0x06
     d62:	8f 93       	push	r24
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	8f 93       	push	r24
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	8f 93       	push	r24
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	1f 92       	push	r1
     d70:	8f 93       	push	r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	1f 92       	push	r1
     d76:	8f 93       	push	r24
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	1f 92       	push	r1
     d7c:	8f 93       	push	r24
     d7e:	8f e8       	ldi	r24, 0x8F	; 143
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,16);
     d8a:	0f b6       	in	r0, 0x3f	; 63
     d8c:	f8 94       	cli
     d8e:	de bf       	out	0x3e, r29	; 62
     d90:	0f be       	out	0x3f, r0	; 63
     d92:	cd bf       	out	0x3d, r28	; 61
     d94:	60 e1       	ldi	r22, 0x10	; 16
     d96:	8a e0       	ldi	r24, 0x0A	; 10
     d98:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FOUR, 7);
     d9c:	47 e0       	ldi	r20, 0x07	; 7
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	ce 01       	movw	r24, r28
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
		printf("Fourth: %c%c%c %d", score_place_to_display.name[0],
     dac:	8f 81       	ldd	r24, Y+7	; 0x07
     dae:	8f 93       	push	r24
     db0:	8e 81       	ldd	r24, Y+6	; 0x06
     db2:	8f 93       	push	r24
     db4:	8d 81       	ldd	r24, Y+5	; 0x05
     db6:	8f 93       	push	r24
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	8f 93       	push	r24
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	1f 92       	push	r1
     dc0:	8f 93       	push	r24
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
     dc4:	1f 92       	push	r1
     dc6:	8f 93       	push	r24
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	1f 92       	push	r1
     dcc:	8f 93       	push	r24
     dce:	80 ea       	ldi	r24, 0xA0	; 160
     dd0:	91 e0       	ldi	r25, 0x01	; 1
     dd2:	9f 93       	push	r25
     dd4:	8f 93       	push	r24
     dd6:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,17);
     dda:	61 e1       	ldi	r22, 0x11	; 17
     ddc:	8a e0       	ldi	r24, 0x0A	; 10
     dde:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FIVE, 7);
     de2:	47 e0       	ldi	r20, 0x07	; 7
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	60 e4       	ldi	r22, 0x40	; 64
     de8:	71 e0       	ldi	r23, 0x01	; 1
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	0e 94 92 17 	call	0x2f24	; 0x2f24 <eeprom_read_block>
		printf("Fifth: %c%c%c %d", score_place_to_display.name[0],
     df2:	8f 81       	ldd	r24, Y+7	; 0x07
     df4:	8f 93       	push	r24
     df6:	8e 81       	ldd	r24, Y+6	; 0x06
     df8:	8f 93       	push	r24
     dfa:	8d 81       	ldd	r24, Y+5	; 0x05
     dfc:	8f 93       	push	r24
     dfe:	8c 81       	ldd	r24, Y+4	; 0x04
     e00:	8f 93       	push	r24
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	1f 92       	push	r1
     e06:	8f 93       	push	r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	1f 92       	push	r1
     e0c:	8f 93       	push	r24
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	1f 92       	push	r1
     e12:	8f 93       	push	r24
     e14:	82 eb       	ldi	r24, 0xB2	; 178
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	9f 93       	push	r25
     e1a:	8f 93       	push	r24
     e1c:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	0a c0       	rjmp	.+20     	; 0xe40 <display_EEPROM_high_score+0x1be>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
	}
	else{
		initialise_EEPROM();
     e2c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     e30:	83 ec       	ldi	r24, 0xC3	; 195
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	9f 93       	push	r25
     e36:	8f 93       	push	r24
     e38:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
	}

}
     e40:	27 96       	adiw	r28, 0x07	; 7
     e42:	0f b6       	in	r0, 0x3f	; 63
     e44:	f8 94       	cli
     e46:	de bf       	out	0x3e, r29	; 62
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	cd bf       	out	0x3d, r28	; 61
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     e52:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <numFoodItems>
     e56:	08 95       	ret

00000e58 <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e58:	30 91 7c 02 	lds	r19, 0x027C	; 0x80027c <numFoodItems>
     e5c:	13 16       	cp	r1, r19
     e5e:	84 f4       	brge	.+32     	; 0xe80 <food_at+0x28>
        if(foodPositions[id] == posn) {
     e60:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <foodPositions>
     e64:	89 17       	cp	r24, r25
     e66:	71 f0       	breq	.+28     	; 0xe84 <food_at+0x2c>
     e68:	ee e7       	ldi	r30, 0x7E	; 126
     e6a:	f2 e0       	ldi	r31, 0x02	; 2
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	03 c0       	rjmp	.+6      	; 0xe76 <food_at+0x1e>
     e70:	21 91       	ld	r18, Z+
     e72:	28 17       	cp	r18, r24
     e74:	49 f0       	breq	.+18     	; 0xe88 <food_at+0x30>
     e76:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e78:	39 13       	cpse	r19, r25
     e7a:	fa cf       	rjmp	.-12     	; 0xe70 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	08 95       	ret
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	08 95       	ret
     e88:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     e8a:	08 95       	ret

00000e8c <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     e8c:	0e 94 2c 07 	call	0xe58	; 0xe58 <food_at>
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	8f 3f       	cpi	r24, 0xFF	; 255
     e94:	09 f4       	brne	.+2      	; 0xe98 <is_food_at+0xc>
     e96:	90 e0       	ldi	r25, 0x00	; 0
}
     e98:	89 2f       	mov	r24, r25
     e9a:	08 95       	ret

00000e9c <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     ea6:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <numFoodItems>
     eaa:	88 30       	cpi	r24, 0x08	; 8
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <add_food_item+0x14>
     eae:	44 c0       	rjmp	.+136    	; 0xf38 <add_food_item+0x9c>
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	10 e0       	ldi	r17, 0x00	; 0
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
     eb6:	c0 e0       	ldi	r28, 0x00	; 0
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <add_food_item+0x22>
     eba:	0f 5f       	subi	r16, 0xFF	; 255
     ebc:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     ebe:	2c 2f       	mov	r18, r28
     ec0:	cc 0f       	add	r28, r28
     ec2:	33 0b       	sbc	r19, r19
     ec4:	2d 5f       	subi	r18, 0xFD	; 253
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	20 0f       	add	r18, r16
     eca:	31 1f       	adc	r19, r17
     ecc:	2f 70       	andi	r18, 0x0F	; 15
     ece:	30 78       	andi	r19, 0x80	; 128
     ed0:	33 23       	and	r19, r19
     ed2:	34 f4       	brge	.+12     	; 0xee0 <add_food_item+0x44>
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	31 09       	sbc	r19, r1
     ed8:	20 6f       	ori	r18, 0xF0	; 240
     eda:	3f 6f       	ori	r19, 0xFF	; 255
     edc:	2f 5f       	subi	r18, 0xFF	; 255
     ede:	3f 4f       	sbci	r19, 0xFF	; 255
     ee0:	82 2f       	mov	r24, r18
     ee2:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     ee4:	6d 2f       	mov	r22, r29
     ee6:	dd 0f       	add	r29, r29
     ee8:	77 0b       	sbc	r23, r23
     eea:	6b 5f       	subi	r22, 0xFB	; 251
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	67 70       	andi	r22, 0x07	; 7
     ef0:	70 78       	andi	r23, 0x80	; 128
     ef2:	77 23       	and	r23, r23
     ef4:	34 f4       	brge	.+12     	; 0xf02 <add_food_item+0x66>
     ef6:	61 50       	subi	r22, 0x01	; 1
     ef8:	71 09       	sbc	r23, r1
     efa:	68 6f       	ori	r22, 0xF8	; 248
     efc:	7f 6f       	ori	r23, 0xFF	; 255
     efe:	6f 5f       	subi	r22, 0xFF	; 255
     f00:	7f 4f       	sbci	r23, 0xFF	; 255
     f02:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     f04:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
     f08:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     f0a:	03 36       	cpi	r16, 0x63	; 99
     f0c:	11 05       	cpc	r17, r1
     f0e:	b1 f0       	breq	.+44     	; 0xf3c <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     f10:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     f14:	81 11       	cpse	r24, r1
     f16:	d1 cf       	rjmp	.-94     	; 0xeba <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     f18:	8f 2d       	mov	r24, r15
     f1a:	0e 94 46 07 	call	0xe8c	; 0xe8c <is_food_at>
     f1e:	81 11       	cpse	r24, r1
     f20:	cc cf       	rjmp	.-104    	; 0xeba <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     f22:	8f 2d       	mov	r24, r15
     f24:	0e 94 3e 10 	call	0x207c	; 0x207c <is_superfood_at>
     f28:	81 11       	cpse	r24, r1
     f2a:	c7 cf       	rjmp	.-114    	; 0xeba <add_food_item+0x1e>
     f2c:	8f 2d       	mov	r24, r15
     f2e:	0e 94 96 0b 	call	0x172c	; 0x172c <is_rat_at>
     f32:	81 11       	cpse	r24, r1
     f34:	c2 cf       	rjmp	.-124    	; 0xeba <add_food_item+0x1e>
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     f38:	88 e0       	ldi	r24, 0x08	; 8
     f3a:	0f c0       	rjmp	.+30     	; 0xf5a <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     f3c:	88 e0       	ldi	r24, 0x08	; 8
     f3e:	0d c0       	rjmp	.+26     	; 0xf5a <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     f40:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <numFoodItems>
	foodPositions[newFoodID] = test_position;
     f44:	e8 2f       	mov	r30, r24
     f46:	08 2e       	mov	r0, r24
     f48:	00 0c       	add	r0, r0
     f4a:	ff 0b       	sbc	r31, r31
     f4c:	e3 58       	subi	r30, 0x83	; 131
     f4e:	fd 4f       	sbci	r31, 0xFD	; 253
     f50:	f0 82       	st	Z, r15
	numFoodItems++;
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     f58:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	08 95       	ret

00000f66 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     f66:	e8 2f       	mov	r30, r24
     f68:	88 0f       	add	r24, r24
     f6a:	ff 0b       	sbc	r31, r31
     f6c:	e3 58       	subi	r30, 0x83	; 131
     f6e:	fd 4f       	sbci	r31, 0xFD	; 253
}
     f70:	80 81       	ld	r24, Z
     f72:	08 95       	ret

00000f74 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     f74:	88 23       	and	r24, r24
     f76:	b4 f0       	brlt	.+44     	; 0xfa4 <remove_food+0x30>
     f78:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <numFoodItems>
     f7c:	82 17       	cp	r24, r18
     f7e:	94 f4       	brge	.+36     	; 0xfa4 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	82 17       	cp	r24, r18
     f84:	64 f4       	brge	.+24     	; 0xf9e <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     f86:	e8 2f       	mov	r30, r24
     f88:	08 2e       	mov	r0, r24
     f8a:	00 0c       	add	r0, r0
     f8c:	ff 0b       	sbc	r31, r31
     f8e:	e3 58       	subi	r30, 0x83	; 131
     f90:	fd 4f       	sbci	r31, 0xFD	; 253
     f92:	90 81       	ld	r25, Z
     f94:	31 97       	sbiw	r30, 0x01	; 1
     f96:	90 83       	st	Z, r25
     f98:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f9a:	82 17       	cp	r24, r18
     f9c:	a4 f3       	brlt	.-24     	; 0xf86 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <numFoodItems>
     fa4:	08 95       	ret

00000fa6 <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	c8 2f       	mov	r28, r24
     fae:	16 2f       	mov	r17, r22
     fb0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
     fb4:	d8 2f       	mov	r29, r24
     fb6:	8c 2f       	mov	r24, r28
     fb8:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
     fbc:	41 2f       	mov	r20, r17
     fbe:	6d 2f       	mov	r22, r29
     fc0:	0e 94 a9 08 	call	0x1152	; 0x1152 <ledmatrix_update_pixel>
     fc4:	df 91       	pop	r29
     fc6:	cf 91       	pop	r28
     fc8:	1f 91       	pop	r17
     fca:	08 95       	ret

00000fcc <init_game>:
     fcc:	cf 93       	push	r28
     fce:	df 93       	push	r29
     fd0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <ledmatrix_clear>
     fd4:	0e 94 17 11 	call	0x222e	; 0x222e <init_score_on_terminal>
     fd8:	88 e5       	ldi	r24, 0x58	; 88
     fda:	92 e0       	ldi	r25, 0x02	; 2
     fdc:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
     fe0:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
     fe4:	0e 94 9d 0b 	call	0x173a	; 0x173a <add_new_rat_position>
     fe8:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <initialise_timer_one>
     fec:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
     ff0:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <init_snake>
     ff4:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <get_snake_head_position>
     ff8:	6f e0       	ldi	r22, 0x0F	; 15
     ffa:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
     ffe:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <get_snake_tail_position>
    1002:	60 ef       	ldi	r22, 0xF0	; 240
    1004:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
    1008:	0e 94 29 07 	call	0xe52	; 0xe52 <init_food>
    100c:	c3 e0       	ldi	r28, 0x03	; 3
    100e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <add_food_item>
    1012:	d8 2f       	mov	r29, r24
    1014:	0e 94 f5 08 	call	0x11ea	; 0x11ea <is_position_valid>
    1018:	88 23       	and	r24, r24
    101a:	21 f0       	breq	.+8      	; 0x1024 <init_game+0x58>
    101c:	63 e3       	ldi	r22, 0x33	; 51
    101e:	8d 2f       	mov	r24, r29
    1020:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
    1024:	c1 50       	subi	r28, 0x01	; 1
    1026:	99 f7       	brne	.-26     	; 0x100e <init_game+0x42>
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <increase_game_speed>:
    102e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    1032:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    1036:	8b 3f       	cpi	r24, 0xFB	; 251
    1038:	91 05       	cpc	r25, r1
    103a:	a4 f0       	brlt	.+40     	; 0x1064 <increase_game_speed+0x36>
    103c:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
    1040:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 46 12 	call	0x248c	; 0x248c <__floatunsisf>
    104c:	26 e6       	ldi	r18, 0x66	; 102
    104e:	36 e6       	ldi	r19, 0x66	; 102
    1050:	46 e6       	ldi	r20, 0x66	; 102
    1052:	5f e3       	ldi	r21, 0x3F	; 63
    1054:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <__mulsf3>
    1058:	0e 94 17 12 	call	0x242e	; 0x242e <__fixunssfsi>
    105c:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
    1060:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
    1064:	08 95       	ret

00001066 <attempt_to_move_snake_forward>:
    1066:	0f 93       	push	r16
    1068:	1f 93       	push	r17
    106a:	cf 93       	push	r28
    106c:	df 93       	push	r29
    106e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <get_snake_head_position>
    1072:	d8 2f       	mov	r29, r24
    1074:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <advance_snake_head>
    1078:	c8 2f       	mov	r28, r24
    107a:	88 23       	and	r24, r24
    107c:	0c f4       	brge	.+2      	; 0x1080 <attempt_to_move_snake_forward+0x1a>
    107e:	55 c0       	rjmp	.+170    	; 0x112a <attempt_to_move_snake_forward+0xc4>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	0e 94 1b 0c 	call	0x1836	; 0x1836 <add_to_score>
    1088:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <get_snake_head_position>
    108c:	18 2f       	mov	r17, r24
    108e:	8e ef       	ldi	r24, 0xFE	; 254
    1090:	8c 0f       	add	r24, r28
    1092:	82 30       	cpi	r24, 0x02	; 2
    1094:	c0 f4       	brcc	.+48     	; 0x10c6 <attempt_to_move_snake_forward+0x60>
    1096:	81 2f       	mov	r24, r17
    1098:	0e 94 2c 07 	call	0xe58	; 0xe58 <food_at>
    109c:	0e 94 ba 07 	call	0xf74	; 0xf74 <remove_food>
    10a0:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <add_to_score>
    10ac:	0e 94 17 08 	call	0x102e	; 0x102e <increase_game_speed>
    10b0:	0e 94 4e 07 	call	0xe9c	; 0xe9c <add_food_item>
    10b4:	08 2f       	mov	r16, r24
    10b6:	0e 94 f5 08 	call	0x11ea	; 0x11ea <is_position_valid>
    10ba:	88 23       	and	r24, r24
    10bc:	21 f0       	breq	.+8      	; 0x10c6 <attempt_to_move_snake_forward+0x60>
    10be:	63 e3       	ldi	r22, 0x33	; 51
    10c0:	80 2f       	mov	r24, r16
    10c2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
    10c6:	8c ef       	ldi	r24, 0xFC	; 252
    10c8:	8c 0f       	add	r24, r28
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	50 f4       	brcc	.+20     	; 0x10e2 <attempt_to_move_snake_forward+0x7c>
    10ce:	0e 94 32 10 	call	0x2064	; 0x2064 <eat_superfood_from_board>
    10d2:	89 e0       	ldi	r24, 0x09	; 9
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 94 1b 0c 	call	0x1836	; 0x1836 <add_to_score>
    10da:	0e 94 17 08 	call	0x102e	; 0x102e <increase_game_speed>
    10de:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    10e2:	8a ef       	ldi	r24, 0xFA	; 250
    10e4:	8c 0f       	add	r24, r28
    10e6:	82 30       	cpi	r24, 0x02	; 2
    10e8:	50 f4       	brcc	.+20     	; 0x10fe <attempt_to_move_snake_forward+0x98>
    10ea:	0e 94 9d 0b 	call	0x173a	; 0x173a <add_new_rat_position>
    10ee:	84 e0       	ldi	r24, 0x04	; 4
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <add_to_score>
    10f6:	0e 94 17 08 	call	0x102e	; 0x102e <increase_game_speed>
    10fa:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    10fe:	cd 7f       	andi	r28, 0xFD	; 253
    1100:	c1 30       	cpi	r28, 0x01	; 1
    1102:	11 f0       	breq	.+4      	; 0x1108 <attempt_to_move_snake_forward+0xa2>
    1104:	c5 30       	cpi	r28, 0x05	; 5
    1106:	29 f4       	brne	.+10     	; 0x1112 <attempt_to_move_snake_forward+0xac>
    1108:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <advance_snake_tail>
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
    1112:	60 ef       	ldi	r22, 0xF0	; 240
    1114:	8d 2f       	mov	r24, r29
    1116:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
    111a:	6f e0       	ldi	r22, 0x0F	; 15
    111c:	81 2f       	mov	r24, r17
    111e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <update_display_at_position>
    1122:	0e 94 32 11 	call	0x2264	; 0x2264 <update_terminal_score>
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	01 c0       	rjmp	.+2      	; 0x112c <attempt_to_move_snake_forward+0xc6>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	08 95       	ret

00001136 <get_current_game_speed>:
    1136:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    113a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    113e:	08 95       	ret

00001140 <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    1140:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1144:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    1148:	08 95       	ret

0000114a <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    114a:	80 e8       	ldi	r24, 0x80	; 128
    114c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <spi_setup_master>
    1150:	08 95       	ret

00001152 <ledmatrix_update_pixel>:
    1152:	1f 93       	push	r17
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	80 31       	cpi	r24, 0x10	; 16
    115a:	b0 f4       	brcc	.+44     	; 0x1188 <ledmatrix_update_pixel+0x36>
    115c:	68 30       	cpi	r22, 0x08	; 8
    115e:	a0 f4       	brcc	.+40     	; 0x1188 <ledmatrix_update_pixel+0x36>
    1160:	14 2f       	mov	r17, r20
    1162:	c6 2f       	mov	r28, r22
    1164:	d8 2f       	mov	r29, r24
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    116c:	6c 2f       	mov	r22, r28
    116e:	67 70       	andi	r22, 0x07	; 7
    1170:	80 e1       	ldi	r24, 0x10	; 16
    1172:	68 9f       	mul	r22, r24
    1174:	90 01       	movw	r18, r0
    1176:	11 24       	eor	r1, r1
    1178:	8d 2f       	mov	r24, r29
    117a:	8f 70       	andi	r24, 0x0F	; 15
    117c:	82 2b       	or	r24, r18
    117e:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    1182:	81 2f       	mov	r24, r17
    1184:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    1188:	df 91       	pop	r29
    118a:	cf 91       	pop	r28
    118c:	1f 91       	pop	r17
    118e:	08 95       	ret

00001190 <ledmatrix_update_column>:
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	80 31       	cpi	r24, 0x10	; 16
    119a:	90 f4       	brcc	.+36     	; 0x11c0 <ledmatrix_update_column+0x30>
    119c:	8b 01       	movw	r16, r22
    119e:	c8 2f       	mov	r28, r24
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    11a6:	8c 2f       	mov	r24, r28
    11a8:	8f 70       	andi	r24, 0x0F	; 15
    11aa:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    11ae:	e8 01       	movw	r28, r16
    11b0:	08 5f       	subi	r16, 0xF8	; 248
    11b2:	1f 4f       	sbci	r17, 0xFF	; 255
    11b4:	89 91       	ld	r24, Y+
    11b6:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    11ba:	c0 17       	cp	r28, r16
    11bc:	d1 07       	cpc	r29, r17
    11be:	d1 f7       	brne	.-12     	; 0x11b4 <ledmatrix_update_column+0x24>
    11c0:	df 91       	pop	r29
    11c2:	cf 91       	pop	r28
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <ledmatrix_shift_display_left>:
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    11d0:	82 e0       	ldi	r24, 0x02	; 2
    11d2:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    11d6:	08 95       	ret

000011d8 <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    11d8:	8f e0       	ldi	r24, 0x0F	; 15
    11da:	0e 94 e5 0f 	call	0x1fca	; 0x1fca <spi_send_byte>
    11de:	08 95       	ret

000011e0 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    11e0:	82 95       	swap	r24
    11e2:	8f 70       	andi	r24, 0x0F	; 15
    11e4:	08 95       	ret

000011e6 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    11e6:	8f 70       	andi	r24, 0x0F	; 15
    11e8:	08 95       	ret

000011ea <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    11ea:	83 fb       	bst	r24, 3
    11ec:	88 27       	eor	r24, r24
    11ee:	80 f9       	bld	r24, 0
}
    11f0:	91 e0       	ldi	r25, 0x01	; 1
    11f2:	89 27       	eor	r24, r25
    11f4:	08 95       	ret

000011f6 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    11f6:	20 e1       	ldi	r18, 0x10	; 16
    11f8:	82 9f       	mul	r24, r18
    11fa:	c0 01       	movw	r24, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	67 70       	andi	r22, 0x07	; 7
}
    1200:	86 2b       	or	r24, r22
    1202:	08 95       	ret

00001204 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    1204:	0e 94 a5 08 	call	0x114a	; 0x114a <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    1208:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    120c:	40 e0       	ldi	r20, 0x00	; 0
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	7b e4       	ldi	r23, 0x4B	; 75
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 79 0d 	call	0x1af2	; 0x1af2 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    121a:	0e 94 4b 11 	call	0x2296	; 0x2296 <init_timer0>
	
	// Turn on global interrupts
	sei();
    121e:	78 94       	sei
    1220:	08 95       	ret

00001222 <splash_screen>:
}

void splash_screen(void) {
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	0e 94 d7 10 	call	0x21ae	; 0x21ae <set_display_attribute>
	clear_terminal();
    1232:	0e 94 ce 10 	call	0x219c	; 0x219c <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1236:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <hide_cursor>
	display_start_terminal_screen();
    123a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    123e:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    1242:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1244:	0f 2e       	mov	r0, r31
    1246:	ff e0       	ldi	r31, 0x0F	; 15
    1248:	ff 2e       	mov	r15, r31
    124a:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    124c:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    124e:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1250:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    1252:	6c 2f       	mov	r22, r28
    1254:	85 ee       	ldi	r24, 0xE5	; 229
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	0e 94 42 0c 	call	0x1884	; 0x1884 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    125c:	0d c0       	rjmp	.+26     	; 0x1278 <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    125e:	2f e7       	ldi	r18, 0x7F	; 127
    1260:	8c e2       	ldi	r24, 0x2C	; 44
    1262:	93 e0       	ldi	r25, 0x03	; 3
    1264:	21 50       	subi	r18, 0x01	; 1
    1266:	80 40       	sbci	r24, 0x00	; 0
    1268:	90 40       	sbci	r25, 0x00	; 0
    126a:	e1 f7       	brne	.-8      	; 0x1264 <splash_screen+0x42>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <splash_screen+0x4c>
    126e:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    1270:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1274:	8f 3f       	cpi	r24, 0xFF	; 255
    1276:	a9 f5       	brne	.+106    	; 0x12e2 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    1278:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <scroll_display>
    127c:	81 11       	cpse	r24, r1
    127e:	ef cf       	rjmp	.-34     	; 0x125e <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    1280:	0e 94 29 14 	call	0x2852	; 0x2852 <random>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	83 70       	andi	r24, 0x03	; 3
    128a:	99 27       	eor	r25, r25
    128c:	aa 27       	eor	r26, r26
    128e:	b0 78       	andi	r27, 0x80	; 128
    1290:	bb 23       	and	r27, r27
    1292:	54 f4       	brge	.+20     	; 0x12a8 <splash_screen+0x86>
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	a1 09       	sbc	r26, r1
    1298:	b1 09       	sbc	r27, r1
    129a:	8c 6f       	ori	r24, 0xFC	; 252
    129c:	9f 6f       	ori	r25, 0xFF	; 255
    129e:	af 6f       	ori	r26, 0xFF	; 255
    12a0:	bf 6f       	ori	r27, 0xFF	; 255
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	a1 1d       	adc	r26, r1
    12a6:	b1 1d       	adc	r27, r1
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	91 05       	cpc	r25, r1
    12ac:	a1 05       	cpc	r26, r1
    12ae:	b1 05       	cpc	r27, r1
    12b0:	91 f0       	breq	.+36     	; 0x12d6 <splash_screen+0xb4>
    12b2:	2c f4       	brge	.+10     	; 0x12be <splash_screen+0x9c>
    12b4:	89 2b       	or	r24, r25
    12b6:	8a 2b       	or	r24, r26
    12b8:	8b 2b       	or	r24, r27
    12ba:	59 f0       	breq	.+22     	; 0x12d2 <splash_screen+0xb0>
    12bc:	ca cf       	rjmp	.-108    	; 0x1252 <splash_screen+0x30>
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	91 05       	cpc	r25, r1
    12c2:	a1 05       	cpc	r26, r1
    12c4:	b1 05       	cpc	r27, r1
    12c6:	49 f0       	breq	.+18     	; 0x12da <splash_screen+0xb8>
    12c8:	03 97       	sbiw	r24, 0x03	; 3
    12ca:	a1 05       	cpc	r26, r1
    12cc:	b1 05       	cpc	r27, r1
    12ce:	39 f0       	breq	.+14     	; 0x12de <splash_screen+0xbc>
    12d0:	c0 cf       	rjmp	.-128    	; 0x1252 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    12d2:	cd 2f       	mov	r28, r29
    12d4:	be cf       	rjmp	.-132    	; 0x1252 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    12d6:	cf 2d       	mov	r28, r15
    12d8:	bc cf       	rjmp	.-136    	; 0x1252 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    12da:	c0 2f       	mov	r28, r16
    12dc:	ba cf       	rjmp	.-140    	; 0x1252 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    12de:	c1 2f       	mov	r28, r17
    12e0:	b8 cf       	rjmp	.-144    	; 0x1252 <splash_screen+0x30>
		}
	}
}
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	ff 90       	pop	r15
    12ec:	08 95       	ret

000012ee <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    12ee:	0e 94 ce 10 	call	0x219c	; 0x219c <clear_terminal>
	
	// Initialise the game and display
	init_game();
    12f2:	0e 94 e6 07 	call	0xfcc	; 0xfcc <init_game>
		
	// Initialise the score
	init_score();
    12f6:	0e 94 12 0c 	call	0x1824	; 0x1824 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    12fa:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    12fe:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <clear_serial_input_buffer>
    1302:	08 95       	ret

00001304 <play_game>:
}

void play_game(void) {
    1304:	4f 92       	push	r4
    1306:	5f 92       	push	r5
    1308:	7f 92       	push	r7
    130a:	8f 92       	push	r8
    130c:	9f 92       	push	r9
    130e:	af 92       	push	r10
    1310:	bf 92       	push	r11
    1312:	cf 92       	push	r12
    1314:	df 92       	push	r13
    1316:	ef 92       	push	r14
    1318:	ff 92       	push	r15
    131a:	0f 93       	push	r16
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    1322:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    1326:	4b 01       	movw	r8, r22
    1328:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    132a:	00 e0       	ldi	r16, 0x00	; 0
    132c:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    132e:	0f 2e       	mov	r0, r31
    1330:	ff ed       	ldi	r31, 0xDF	; 223
    1332:	7f 2e       	mov	r7, r31
    1334:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1336:	0f 2e       	mov	r0, r31
    1338:	fc e9       	ldi	r31, 0x9C	; 156
    133a:	4f 2e       	mov	r4, r31
    133c:	f3 e0       	ldi	r31, 0x03	; 3
    133e:	5f 2e       	mov	r5, r31
    1340:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    1342:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <time_to_add_superfood>
    1346:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    1348:	0e 94 4b 10 	call	0x2096	; 0x2096 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    134c:	0e 94 0a 10 	call	0x2014	; 0x2014 <time_to_remove_superfood>
    1350:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    1352:	0e 94 1a 10 	call	0x2034	; 0x2034 <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    1356:	0e 94 00 0c 	call	0x1800	; 0x1800 <is_time_to_move_rat>
    135a:	81 11       	cpse	r24, r1
    135c:	0e 94 25 0b 	call	0x164a	; 0x164a <move_rat>
			handle_buzzer_loop();
    1360:	0e 94 6d 02 	call	0x4da	; 0x4da <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    1364:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <timer_is_paused>
    1368:	89 2b       	or	r24, r25
    136a:	19 f0       	breq	.+6      	; 0x1372 <play_game+0x6e>
			button = -1;
			empty_button_queue();
    136c:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    1370:	06 c0       	rjmp	.+12     	; 0x137e <play_game+0x7a>
			}else{
		button = button_pushed();}
    1372:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1376:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    1378:	8f 3f       	cpi	r24, 0xFF	; 255
    137a:	09 f0       	breq	.+2      	; 0x137e <play_game+0x7a>
    137c:	9a c0       	rjmp	.+308    	; 0x14b2 <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    137e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <serial_input_available>
    1382:	88 23       	and	r24, r24
    1384:	09 f4       	brne	.+2      	; 0x1388 <play_game+0x84>
    1386:	a4 c0       	rjmp	.+328    	; 0x14d0 <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1388:	f2 01       	movw	r30, r4
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	0e 94 80 14 	call	0x2900	; 0x2900 <fgetc>
    1392:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    1394:	01 11       	cpse	r16, r1
    1396:	03 c0       	rjmp	.+6      	; 0x139e <play_game+0x9a>
    1398:	8b 31       	cpi	r24, 0x1B	; 27
    139a:	51 f4       	brne	.+20     	; 0x13b0 <play_game+0xac>
    139c:	96 c0       	rjmp	.+300    	; 0x14ca <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    139e:	01 30       	cpi	r16, 0x01	; 1
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <play_game+0xa4>
    13a2:	8b 35       	cpi	r24, 0x5B	; 91
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <play_game+0xac>
    13a6:	93 c0       	rjmp	.+294    	; 0x14ce <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    13a8:	02 30       	cpi	r16, 0x02	; 2
    13aa:	09 f4       	brne	.+2      	; 0x13ae <play_game+0xaa>
    13ac:	88 c0       	rjmp	.+272    	; 0x14be <play_game+0x1ba>
    13ae:	7b c0       	rjmp	.+246    	; 0x14a6 <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    13b0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <timer_is_paused>
    13b4:	89 2b       	or	r24, r25
    13b6:	09 f0       	breq	.+2      	; 0x13ba <play_game+0xb6>
    13b8:	3f c0       	rjmp	.+126    	; 0x1438 <play_game+0x134>
    13ba:	08 c0       	rjmp	.+16     	; 0x13cc <play_game+0xc8>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    13bc:	d1 11       	cpse	r29, r1
    13be:	09 c0       	rjmp	.+18     	; 0x13d2 <play_game+0xce>
    13c0:	01 c0       	rjmp	.+2      	; 0x13c4 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    13c2:	00 e0       	ldi	r16, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <set_snake_dirn>
    13ca:	50 c0       	rjmp	.+160    	; 0x146c <play_game+0x168>
    13cc:	00 e0       	ldi	r16, 0x00	; 0
    13ce:	d1 2f       	mov	r29, r17
    13d0:	01 c0       	rjmp	.+2      	; 0x13d4 <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    13d2:	c1 2f       	mov	r28, r17
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    13d4:	d2 30       	cpi	r29, 0x02	; 2
    13d6:	19 f0       	breq	.+6      	; 0x13de <play_game+0xda>
    13d8:	81 2f       	mov	r24, r17
    13da:	81 34       	cpi	r24, 0x41	; 65
    13dc:	21 f4       	brne	.+8      	; 0x13e6 <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <set_snake_dirn>
    13e4:	43 c0       	rjmp	.+134    	; 0x146c <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    13e6:	d3 30       	cpi	r29, 0x03	; 3
    13e8:	11 f0       	breq	.+4      	; 0x13ee <play_game+0xea>
    13ea:	84 34       	cpi	r24, 0x44	; 68
    13ec:	21 f4       	brne	.+8      	; 0x13f6 <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <set_snake_dirn>
    13f4:	3b c0       	rjmp	.+118    	; 0x146c <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    13f6:	d1 30       	cpi	r29, 0x01	; 1
    13f8:	11 f0       	breq	.+4      	; 0x13fe <play_game+0xfa>
    13fa:	82 34       	cpi	r24, 0x42	; 66
    13fc:	29 f4       	brne	.+10     	; 0x1408 <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <set_snake_dirn>
    1404:	33 c0       	rjmp	.+102    	; 0x146c <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1406:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    1408:	8c 2f       	mov	r24, r28
    140a:	8f 7d       	andi	r24, 0xDF	; 223
    140c:	80 35       	cpi	r24, 0x50	; 80
    140e:	19 f4       	brne	.+6      	; 0x1416 <play_game+0x112>
			toggle_timer_clock();
    1410:	0e 94 63 11 	call	0x22c6	; 0x22c6 <toggle_timer_clock>
    1414:	2b c0       	rjmp	.+86     	; 0x146c <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    1416:	c3 37       	cpi	r28, 0x73	; 115
    1418:	19 f4       	brne	.+6      	; 0x1420 <play_game+0x11c>
			save_game_to_EPPROM();
    141a:	0e 94 90 02 	call	0x520	; 0x520 <save_game_to_EPPROM>
    141e:	26 c0       	rjmp	.+76     	; 0x146c <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1420:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1424:	89 2b       	or	r24, r25
    1426:	11 f1       	breq	.+68     	; 0x146c <play_game+0x168>
    1428:	8c 2f       	mov	r24, r28
    142a:	8f 7d       	andi	r24, 0xDF	; 223
    142c:	8f 34       	cpi	r24, 0x4F	; 79
    142e:	f1 f4       	brne	.+60     	; 0x146c <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <load_EEPROM_data_on_next_game>
 			break;
    1436:	62 c0       	rjmp	.+196    	; 0x14fc <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1438:	8c 2f       	mov	r24, r28
    143a:	8f 7d       	andi	r24, 0xDF	; 223
    143c:	80 35       	cpi	r24, 0x50	; 80
    143e:	21 f4       	brne	.+8      	; 0x1448 <play_game+0x144>
			toggle_timer_clock();
    1440:	0e 94 63 11 	call	0x22c6	; 0x22c6 <toggle_timer_clock>
    1444:	00 e0       	ldi	r16, 0x00	; 0
    1446:	12 c0       	rjmp	.+36     	; 0x146c <play_game+0x168>
    1448:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    144a:	83 35       	cpi	r24, 0x53	; 83
    144c:	19 f4       	brne	.+6      	; 0x1454 <play_game+0x150>
			save_game_to_EPPROM();
    144e:	0e 94 90 02 	call	0x520	; 0x520 <save_game_to_EPPROM>
    1452:	0c c0       	rjmp	.+24     	; 0x146c <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1454:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1458:	89 2b       	or	r24, r25
    145a:	41 f0       	breq	.+16     	; 0x146c <play_game+0x168>
    145c:	8c 2f       	mov	r24, r28
    145e:	8f 7d       	andi	r24, 0xDF	; 223
    1460:	8f 34       	cpi	r24, 0x4F	; 79
    1462:	21 f4       	brne	.+8      	; 0x146c <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <load_EEPROM_data_on_next_game>
			break;
    146a:	48 c0       	rjmp	.+144    	; 0x14fc <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    146c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    1470:	6b 01       	movw	r12, r22
    1472:	7c 01       	movw	r14, r24
    1474:	0e 94 9b 08 	call	0x1136	; 0x1136 <get_current_game_speed>
    1478:	09 2e       	mov	r0, r25
    147a:	00 0c       	add	r0, r0
    147c:	aa 0b       	sbc	r26, r26
    147e:	bb 0b       	sbc	r27, r27
    1480:	88 0d       	add	r24, r8
    1482:	99 1d       	adc	r25, r9
    1484:	aa 1d       	adc	r26, r10
    1486:	bb 1d       	adc	r27, r11
    1488:	c8 16       	cp	r12, r24
    148a:	d9 06       	cpc	r13, r25
    148c:	ea 06       	cpc	r14, r26
    148e:	fb 06       	cpc	r15, r27
    1490:	08 f4       	brcc	.+2      	; 0x1494 <play_game+0x190>
    1492:	57 cf       	rjmp	.-338    	; 0x1342 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    1494:	0e 94 33 08 	call	0x1066	; 0x1066 <attempt_to_move_snake_forward>
    1498:	88 23       	and	r24, r24
    149a:	81 f1       	breq	.+96     	; 0x14fc <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    149c:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    14a0:	4b 01       	movw	r8, r22
    14a2:	5c 01       	movw	r10, r24
    14a4:	4e cf       	rjmp	.-356    	; 0x1342 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    14a6:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <timer_is_paused>
    14aa:	89 2b       	or	r24, r25
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <play_game+0x1ac>
    14ae:	ab cf       	rjmp	.-170    	; 0x1406 <play_game+0x102>
    14b0:	c3 cf       	rjmp	.-122    	; 0x1438 <play_game+0x134>
    14b2:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <timer_is_paused>
    14b6:	89 2b       	or	r24, r25
    14b8:	09 f4       	brne	.+2      	; 0x14bc <play_game+0x1b8>
    14ba:	80 cf       	rjmp	.-256    	; 0x13bc <play_game+0xb8>
    14bc:	1c c0       	rjmp	.+56     	; 0x14f6 <play_game+0x1f2>
    14be:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <timer_is_paused>
    14c2:	89 2b       	or	r24, r25
    14c4:	51 f0       	breq	.+20     	; 0x14da <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    14c6:	00 e0       	ldi	r16, 0x00	; 0
    14c8:	13 c0       	rjmp	.+38     	; 0x14f0 <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    14ca:	01 e0       	ldi	r16, 0x01	; 1
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    14ce:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    14d0:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <timer_is_paused>
    14d4:	89 2b       	or	r24, r25
    14d6:	61 f4       	brne	.+24     	; 0x14f0 <play_game+0x1ec>
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <play_game+0x1e6>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    14da:	c3 34       	cpi	r28, 0x43	; 67
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <play_game+0x1dc>
    14de:	71 cf       	rjmp	.-286    	; 0x13c2 <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    14e0:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    14e2:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    14e4:	c1 2f       	mov	r28, r17
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    14e6:	d1 2f       	mov	r29, r17
    14e8:	78 cf       	rjmp	.-272    	; 0x13da <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    14ea:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    14ee:	be cf       	rjmp	.-132    	; 0x146c <play_game+0x168>
    14f0:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    14f2:	87 2d       	mov	r24, r7
    14f4:	aa cf       	rjmp	.-172    	; 0x144a <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    14f6:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    14fa:	b8 cf       	rjmp	.-144    	; 0x146c <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	7f 90       	pop	r7
    1516:	5f 90       	pop	r5
    1518:	4f 90       	pop	r4
    151a:	08 95       	ret

0000151c <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    151c:	0e 94 ce 10 	call	0x219c	; 0x219c <clear_terminal>
	move_cursor(10,5);
    1520:	65 e0       	ldi	r22, 0x05	; 5
    1522:	8a e0       	ldi	r24, 0x0A	; 10
    1524:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1528:	8c ea       	ldi	r24, 0xAC	; 172
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9f 93       	push	r25
    152e:	8f 93       	push	r24
    1530:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
	move_cursor(10,7);
    1534:	67 e0       	ldi	r22, 0x07	; 7
    1536:	8a e0       	ldi	r24, 0x0A	; 10
    1538:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf("Score: %u", get_score());
    153c:	0e 94 30 0c 	call	0x1860	; 0x1860 <get_score>
    1540:	9f 93       	push	r25
    1542:	8f 93       	push	r24
    1544:	7f 93       	push	r23
    1546:	6f 93       	push	r22
    1548:	87 ef       	ldi	r24, 0xF7	; 247
    154a:	91 e0       	ldi	r25, 0x01	; 1
    154c:	9f 93       	push	r25
    154e:	8f 93       	push	r24
    1550:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
	display_EEPROM_high_score();
    1554:	0e 94 41 06 	call	0xc82	; 0xc82 <display_EEPROM_high_score>

	if (is_high_score()){
    1558:	0e 94 c4 04 	call	0x988	; 0x988 <is_high_score>
    155c:	2d b7       	in	r18, 0x3d	; 61
    155e:	3e b7       	in	r19, 0x3e	; 62
    1560:	28 5f       	subi	r18, 0xF8	; 248
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	0f b6       	in	r0, 0x3f	; 63
    1566:	f8 94       	cli
    1568:	3e bf       	out	0x3e, r19	; 62
    156a:	0f be       	out	0x3f, r0	; 63
    156c:	2d bf       	out	0x3d, r18	; 61
    156e:	81 11       	cpse	r24, r1
		set_high_score_name();	
    1570:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <set_high_score_name>
	}
	move_cursor(10,9);
    1574:	69 e0       	ldi	r22, 0x09	; 9
    1576:	8a e0       	ldi	r24, 0x0A	; 10
    1578:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    157c:	8e e8       	ldi	r24, 0x8E	; 142
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	9f 93       	push	r25
    1582:	8f 93       	push	r24
    1584:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
	display_EEPROM_high_score(); 
    1588:	0e 94 41 06 	call	0xc82	; 0xc82 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    1594:	8f 3f       	cpi	r24, 0xFF	; 255
    1596:	e1 f3       	breq	.-8      	; 0x1590 <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    1598:	0e 94 ce 10 	call	0x219c	; 0x219c <clear_terminal>
    159c:	08 95       	ret

0000159e <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    159e:	0e 94 02 09 	call	0x1204	; 0x1204 <initialise_hardware>
	DDRA = 0xff;
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    15a6:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    15a8:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    15aa:	0e 94 11 09 	call	0x1222	; 0x1222 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    15ae:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <load_EEPROM_data_on_next_game>
    15b2:	88 23       	and	r24, r24
    15b4:	19 f0       	breq	.+6      	; 0x15bc <main+0x1e>
    15b6:	0e 94 c6 03 	call	0x78c	; 0x78c <new_game_from_EEPROM>
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <main+0x22>
			else{new_game();}
    15bc:	0e 94 77 09 	call	0x12ee	; 0x12ee <new_game>
		play_game();
    15c0:	0e 94 82 09 	call	0x1304	; 0x1304 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    15c4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <load_EEPROM_data_on_next_game>
    15c8:	81 11       	cpse	r24, r1
    15ca:	f1 cf       	rjmp	.-30     	; 0x15ae <main+0x10>
    15cc:	0e 94 8e 0a 	call	0x151c	; 0x151c <handle_game_over>
    15d0:	ee cf       	rjmp	.-36     	; 0x15ae <main+0x10>

000015d2 <get_rat_position>:
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
		}
	return 0; 
}
    15d2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    15d6:	08 95       	ret

000015d8 <set_rat_at_pos>:
    15d8:	cf 93       	push	r28
    15da:	df 93       	push	r29
    15dc:	c8 2f       	mov	r28, r24
    15de:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    15e2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    15e6:	d8 2f       	mov	r29, r24
    15e8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    15ec:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    15f0:	40 e0       	ldi	r20, 0x00	; 0
    15f2:	6d 2f       	mov	r22, r29
    15f4:	0e 94 a9 08 	call	0x1152	; 0x1152 <ledmatrix_update_pixel>
    15f8:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <rat_position>
    15fc:	8c 2f       	mov	r24, r28
    15fe:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    1602:	d8 2f       	mov	r29, r24
    1604:	8c 2f       	mov	r24, r28
    1606:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    160a:	43 e3       	ldi	r20, 0x33	; 51
    160c:	6d 2f       	mov	r22, r29
    160e:	0e 94 a9 08 	call	0x1152	; 0x1152 <ledmatrix_update_pixel>
    1612:	df 91       	pop	r29
    1614:	cf 91       	pop	r28
    1616:	08 95       	ret

00001618 <is_item_at>:
    1618:	cf 93       	push	r28
    161a:	c8 2f       	mov	r28, r24
    161c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <is_snake_at>
    1620:	81 11       	cpse	r24, r1
    1622:	0d c0       	rjmp	.+26     	; 0x163e <is_item_at+0x26>
    1624:	8c 2f       	mov	r24, r28
    1626:	0e 94 46 07 	call	0xe8c	; 0xe8c <is_food_at>
    162a:	81 11       	cpse	r24, r1
    162c:	0a c0       	rjmp	.+20     	; 0x1642 <is_item_at+0x2a>
    162e:	8c 2f       	mov	r24, r28
    1630:	0e 94 3e 10 	call	0x207c	; 0x207c <is_superfood_at>
    1634:	91 e0       	ldi	r25, 0x01	; 1
    1636:	81 11       	cpse	r24, r1
    1638:	05 c0       	rjmp	.+10     	; 0x1644 <is_item_at+0x2c>
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <is_item_at+0x2c>
    163e:	91 e0       	ldi	r25, 0x01	; 1
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <is_item_at+0x2c>
    1642:	91 e0       	ldi	r25, 0x01	; 1
    1644:	89 2f       	mov	r24, r25
    1646:	cf 91       	pop	r28
    1648:	08 95       	ret

0000164a <move_rat>:
    164a:	1f 93       	push	r17
    164c:	cf 93       	push	r28
    164e:	df 93       	push	r29
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    1658:	18 2f       	mov	r17, r24
    165a:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
    165e:	83 70       	andi	r24, 0x03	; 3
    1660:	90 78       	andi	r25, 0x80	; 128
    1662:	99 23       	and	r25, r25
    1664:	24 f4       	brge	.+8      	; 0x166e <move_rat+0x24>
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	8c 6f       	ori	r24, 0xFC	; 252
    166a:	9f 6f       	ori	r25, 0xFF	; 255
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	c8 2f       	mov	r28, r24
    1670:	d0 e0       	ldi	r29, 0x00	; 0
    1672:	c1 30       	cpi	r28, 0x01	; 1
    1674:	a9 f0       	breq	.+42     	; 0x16a0 <move_rat+0x56>
    1676:	28 f0       	brcs	.+10     	; 0x1682 <move_rat+0x38>
    1678:	c2 30       	cpi	r28, 0x02	; 2
    167a:	09 f1       	breq	.+66     	; 0x16be <move_rat+0x74>
    167c:	c3 30       	cpi	r28, 0x03	; 3
    167e:	71 f1       	breq	.+92     	; 0x16dc <move_rat+0x92>
    1680:	3b c0       	rjmp	.+118    	; 0x16f8 <move_rat+0xae>
    1682:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    1686:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    168a:	c8 2f       	mov	r28, r24
    168c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    1690:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	6c 0f       	add	r22, r28
    1698:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    169c:	18 2f       	mov	r17, r24
    169e:	2c c0       	rjmp	.+88     	; 0x16f8 <move_rat+0xae>
    16a0:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    16a4:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    16a8:	c8 2f       	mov	r28, r24
    16aa:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    16ae:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    16b2:	6f ef       	ldi	r22, 0xFF	; 255
    16b4:	6c 0f       	add	r22, r28
    16b6:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    16ba:	18 2f       	mov	r17, r24
    16bc:	1d c0       	rjmp	.+58     	; 0x16f8 <move_rat+0xae>
    16be:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    16c2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    16c6:	c8 2f       	mov	r28, r24
    16c8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    16cc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    16d0:	6c 2f       	mov	r22, r28
    16d2:	8f 5f       	subi	r24, 0xFF	; 255
    16d4:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    16d8:	18 2f       	mov	r17, r24
    16da:	0e c0       	rjmp	.+28     	; 0x16f8 <move_rat+0xae>
    16dc:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    16e0:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    16e4:	c8 2f       	mov	r28, r24
    16e6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    16ea:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    16ee:	6c 2f       	mov	r22, r28
    16f0:	81 50       	subi	r24, 0x01	; 1
    16f2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    16f6:	18 2f       	mov	r17, r24
    16f8:	df 5f       	subi	r29, 0xFF	; 255
    16fa:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
    16fe:	83 70       	andi	r24, 0x03	; 3
    1700:	90 78       	andi	r25, 0x80	; 128
    1702:	99 23       	and	r25, r25
    1704:	24 f4       	brge	.+8      	; 0x170e <move_rat+0xc4>
    1706:	01 97       	sbiw	r24, 0x01	; 1
    1708:	8c 6f       	ori	r24, 0xFC	; 252
    170a:	9f 6f       	ori	r25, 0xFF	; 255
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	c8 2f       	mov	r28, r24
    1710:	81 2f       	mov	r24, r17
    1712:	0e 94 0c 0b 	call	0x1618	; 0x1618 <is_item_at>
    1716:	81 11       	cpse	r24, r1
    1718:	ac cf       	rjmp	.-168    	; 0x1672 <move_rat+0x28>
    171a:	d5 30       	cpi	r29, 0x05	; 5
    171c:	18 f4       	brcc	.+6      	; 0x1724 <move_rat+0xda>
    171e:	81 2f       	mov	r24, r17
    1720:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <set_rat_at_pos>
    1724:	df 91       	pop	r29
    1726:	cf 91       	pop	r28
    1728:	1f 91       	pop	r17
    172a:	08 95       	ret

0000172c <is_rat_at>:

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    172c:	91 e0       	ldi	r25, 0x01	; 1
    172e:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <rat_position>
    1732:	28 13       	cpse	r18, r24
    1734:	90 e0       	ldi	r25, 0x00	; 0
}
    1736:	89 2f       	mov	r24, r25
    1738:	08 95       	ret

0000173a <add_new_rat_position>:

void add_new_rat_position(void){
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1740:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
    1744:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1746:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
        test_position = position(x,y);
    174a:	bc 01       	movw	r22, r24
    174c:	67 70       	andi	r22, 0x07	; 7
    174e:	70 78       	andi	r23, 0x80	; 128
    1750:	77 23       	and	r23, r23
    1752:	34 f4       	brge	.+12     	; 0x1760 <add_new_rat_position+0x26>
    1754:	61 50       	subi	r22, 0x01	; 1
    1756:	71 09       	sbc	r23, r1
    1758:	68 6f       	ori	r22, 0xF8	; 248
    175a:	7f 6f       	ori	r23, 0xFF	; 255
    175c:	6f 5f       	subi	r22, 0xFF	; 255
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	ce 01       	movw	r24, r28
    1762:	8f 70       	andi	r24, 0x0F	; 15
    1764:	90 78       	andi	r25, 0x80	; 128
    1766:	99 23       	and	r25, r25
    1768:	24 f4       	brge	.+8      	; 0x1772 <add_new_rat_position+0x38>
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	80 6f       	ori	r24, 0xF0	; 240
    176e:	9f 6f       	ori	r25, 0xFF	; 255
    1770:	01 96       	adiw	r24, 0x01	; 1
    1772:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    1776:	c8 2f       	mov	r28, r24
    1778:	13 e6       	ldi	r17, 0x63	; 99
    177a:	1e c0       	rjmp	.+60     	; 0x17b8 <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    177c:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
    1780:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1782:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
        test_position = position(x,y);
    1786:	bc 01       	movw	r22, r24
    1788:	67 70       	andi	r22, 0x07	; 7
    178a:	70 78       	andi	r23, 0x80	; 128
    178c:	77 23       	and	r23, r23
    178e:	34 f4       	brge	.+12     	; 0x179c <add_new_rat_position+0x62>
    1790:	61 50       	subi	r22, 0x01	; 1
    1792:	71 09       	sbc	r23, r1
    1794:	68 6f       	ori	r22, 0xF8	; 248
    1796:	7f 6f       	ori	r23, 0xFF	; 255
    1798:	6f 5f       	subi	r22, 0xFF	; 255
    179a:	7f 4f       	sbci	r23, 0xFF	; 255
    179c:	ce 01       	movw	r24, r28
    179e:	8f 70       	andi	r24, 0x0F	; 15
    17a0:	90 78       	andi	r25, 0x80	; 128
    17a2:	99 23       	and	r25, r25
    17a4:	24 f4       	brge	.+8      	; 0x17ae <add_new_rat_position+0x74>
    17a6:	01 97       	sbiw	r24, 0x01	; 1
    17a8:	80 6f       	ori	r24, 0xF0	; 240
    17aa:	9f 6f       	ori	r25, 0xFF	; 255
    17ac:	01 96       	adiw	r24, 0x01	; 1
    17ae:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    17b2:	c8 2f       	mov	r28, r24
    17b4:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    17b6:	91 f0       	breq	.+36     	; 0x17dc <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    17b8:	8c 2f       	mov	r24, r28
    17ba:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    17be:	81 11       	cpse	r24, r1
    17c0:	dd cf       	rjmp	.-70     	; 0x177c <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    17c2:	8c 2f       	mov	r24, r28
    17c4:	0e 94 46 07 	call	0xe8c	; 0xe8c <is_food_at>
    17c8:	81 11       	cpse	r24, r1
    17ca:	d8 cf       	rjmp	.-80     	; 0x177c <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    17cc:	0e 94 3b 10 	call	0x2076	; 0x2076 <get_superfood_position>
    17d0:	8c 17       	cp	r24, r28
    17d2:	a1 f2       	breq	.-88     	; 0x177c <add_new_rat_position+0x42>
    17d4:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    17d8:	8c 17       	cp	r24, r28
    17da:	81 f2       	breq	.-96     	; 0x177c <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    17dc:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_LIGHT_YELLOW);
    17e0:	8c 2f       	mov	r24, r28
    17e2:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    17e6:	c8 2f       	mov	r28, r24
    17e8:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <rat_position>
    17ec:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    17f0:	43 e3       	ldi	r20, 0x33	; 51
    17f2:	6c 2f       	mov	r22, r28
    17f4:	0e 94 a9 08 	call	0x1152	; 0x1152 <ledmatrix_update_pixel>
}
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	1f 91       	pop	r17
    17fe:	08 95       	ret

00001800 <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    1800:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    1804:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    1808:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	50 e0       	ldi	r21, 0x00	; 0
    1810:	0e 94 41 13 	call	0x2682	; 0x2682 <__udivmodsi4>
    1814:	21 e0       	ldi	r18, 0x01	; 1
    1816:	67 2b       	or	r22, r23
    1818:	68 2b       	or	r22, r24
    181a:	69 2b       	or	r22, r25
    181c:	09 f0       	breq	.+2      	; 0x1820 <is_time_to_move_rat+0x20>
    181e:	20 e0       	ldi	r18, 0x00	; 0
}
    1820:	82 2f       	mov	r24, r18
    1822:	08 95       	ret

00001824 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    1824:	10 92 2c 02 	sts	0x022C, r1	; 0x80022c <score>
    1828:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <score+0x1>
    182c:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <score+0x2>
    1830:	10 92 2f 02 	sts	0x022F, r1	; 0x80022f <score+0x3>
    1834:	08 95       	ret

00001836 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1836:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <score>
    183a:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <score+0x1>
    183e:	60 91 2e 02 	lds	r22, 0x022E	; 0x80022e <score+0x2>
    1842:	70 91 2f 02 	lds	r23, 0x022F	; 0x80022f <score+0x3>
    1846:	48 0f       	add	r20, r24
    1848:	59 1f       	adc	r21, r25
    184a:	61 1d       	adc	r22, r1
    184c:	71 1d       	adc	r23, r1
    184e:	40 93 2c 02 	sts	0x022C, r20	; 0x80022c <score>
    1852:	50 93 2d 02 	sts	0x022D, r21	; 0x80022d <score+0x1>
    1856:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <score+0x2>
    185a:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <score+0x3>
    185e:	08 95       	ret

00001860 <get_score>:
}

uint32_t get_score(void) {
	return score;
    1860:	60 91 2c 02 	lds	r22, 0x022C	; 0x80022c <score>
    1864:	70 91 2d 02 	lds	r23, 0x022D	; 0x80022d <score+0x1>
    1868:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <score+0x2>
    186c:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <score+0x3>
}
    1870:	08 95       	ret

00001872 <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    1872:	60 93 2c 02 	sts	0x022C, r22	; 0x80022c <score>
    1876:	70 93 2d 02 	sts	0x022D, r23	; 0x80022d <score+0x1>
    187a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <score+0x2>
    187e:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <score+0x3>
    1882:	08 95       	ret

00001884 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1884:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    1888:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <display_string+0x1>
    188c:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <display_string>
	next_col_ptr = 0;
    1890:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <next_col_ptr+0x1>
    1894:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <next_col_ptr>
	next_char_to_display = 0;
    1898:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <next_char_to_display+0x1>
    189c:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <next_char_to_display>
    18a0:	08 95       	ret

000018a2 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	28 97       	sbiw	r28, 0x08	; 8
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    18ba:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <next_col_ptr>
    18be:	f0 91 36 02 	lds	r31, 0x0236	; 0x800236 <next_col_ptr+0x1>
    18c2:	30 97       	sbiw	r30, 0x00	; 0
    18c4:	81 f0       	breq	.+32     	; 0x18e6 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    18c6:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    18c8:	10 ff       	sbrs	r17, 0
    18ca:	06 c0       	rjmp	.+12     	; 0x18d8 <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    18cc:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <next_col_ptr+0x1>
    18d0:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    18d4:	00 e0       	ldi	r16, 0x00	; 0
    18d6:	6b c0       	rjmp	.+214    	; 0x19ae <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    18d8:	31 96       	adiw	r30, 0x01	; 1
    18da:	f0 93 36 02 	sts	0x0236, r31	; 0x800236 <next_col_ptr+0x1>
    18de:	e0 93 35 02 	sts	0x0235, r30	; 0x800235 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    18e2:	00 e0       	ldi	r16, 0x00	; 0
    18e4:	64 c0       	rjmp	.+200    	; 0x19ae <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    18e6:	e0 91 31 02 	lds	r30, 0x0231	; 0x800231 <next_char_to_display>
    18ea:	f0 91 32 02 	lds	r31, 0x0232	; 0x800232 <next_char_to_display+0x1>
    18ee:	30 97       	sbiw	r30, 0x00	; 0
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <scroll_display+0x52>
    18f2:	49 c0       	rjmp	.+146    	; 0x1986 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    18f4:	cf 01       	movw	r24, r30
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <next_char_to_display+0x1>
    18fc:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <next_char_to_display>
    1900:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1902:	e1 11       	cpse	r30, r1
    1904:	0a c0       	rjmp	.+20     	; 0x191a <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1906:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <next_char_to_display+0x1>
    190a:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <next_char_to_display>
			shift_countdown = 16;
    190e:	80 e1       	ldi	r24, 0x10	; 16
    1910:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1914:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1916:	10 e0       	ldi	r17, 0x00	; 0
    1918:	4a c0       	rjmp	.+148    	; 0x19ae <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    191a:	8f e9       	ldi	r24, 0x9F	; 159
    191c:	8e 0f       	add	r24, r30
    191e:	8a 31       	cpi	r24, 0x1A	; 26
    1920:	70 f4       	brcc	.+28     	; 0x193e <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	ee 0f       	add	r30, r30
    1926:	ff 1f       	adc	r31, r31
    1928:	e8 5f       	subi	r30, 0xF8	; 248
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	85 91       	lpm	r24, Z+
    192e:	94 91       	lpm	r25, Z
    1930:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <next_col_ptr+0x1>
    1934:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1938:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    193a:	10 e0       	ldi	r17, 0x00	; 0
    193c:	38 c0       	rjmp	.+112    	; 0x19ae <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    193e:	8f eb       	ldi	r24, 0xBF	; 191
    1940:	8e 0f       	add	r24, r30
    1942:	8a 31       	cpi	r24, 0x1A	; 26
    1944:	70 f4       	brcc	.+28     	; 0x1962 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	ee 0f       	add	r30, r30
    194a:	ff 1f       	adc	r31, r31
    194c:	e8 5b       	subi	r30, 0xB8	; 184
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	85 91       	lpm	r24, Z+
    1952:	94 91       	lpm	r25, Z
    1954:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <next_col_ptr+0x1>
    1958:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    195c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    195e:	10 e0       	ldi	r17, 0x00	; 0
    1960:	26 c0       	rjmp	.+76     	; 0x19ae <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1962:	80 ed       	ldi	r24, 0xD0	; 208
    1964:	8e 0f       	add	r24, r30
    1966:	8a 30       	cpi	r24, 0x0A	; 10
    1968:	00 f5       	brcc	.+64     	; 0x19aa <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	ee 0f       	add	r30, r30
    196e:	ff 1f       	adc	r31, r31
    1970:	ea 5a       	subi	r30, 0xAA	; 170
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	85 91       	lpm	r24, Z+
    1976:	94 91       	lpm	r25, Z
    1978:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <next_col_ptr+0x1>
    197c:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1980:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1982:	10 e0       	ldi	r17, 0x00	; 0
    1984:	14 c0       	rjmp	.+40     	; 0x19ae <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1986:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <display_string>
    198a:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    198e:	01 e0       	ldi	r16, 0x01	; 1
    1990:	00 97       	sbiw	r24, 0x00	; 0
    1992:	09 f0       	breq	.+2      	; 0x1996 <scroll_display+0xf4>
    1994:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1996:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <next_char_to_display+0x1>
    199a:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <next_char_to_display>
		display_string = 0;
    199e:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <display_string+0x1>
    19a2:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19a6:	10 e0       	ldi	r17, 0x00	; 0
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19aa:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19ac:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    19ae:	0e 94 e5 08 	call	0x11ca	; 0x11ca <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    19b2:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    19b6:	fe 01       	movw	r30, r28
    19b8:	38 96       	adiw	r30, 0x08	; 8
    19ba:	ce 01       	movw	r24, r28
    19bc:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    19be:	11 23       	and	r17, r17
    19c0:	14 f4       	brge	.+4      	; 0x19c6 <scroll_display+0x124>
			column_colour_data[i] = colour;
    19c2:	20 83       	st	Z, r18
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    19c6:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    19c8:	11 0f       	add	r17, r17
    19ca:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    19cc:	e8 17       	cp	r30, r24
    19ce:	f9 07       	cpc	r31, r25
    19d0:	b1 f7       	brne	.-20     	; 0x19be <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    19d2:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    19d4:	be 01       	movw	r22, r28
    19d6:	6f 5f       	subi	r22, 0xFF	; 255
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f e0       	ldi	r24, 0x0F	; 15
    19dc:	0e 94 c8 08 	call	0x1190	; 0x1190 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    19e0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <shift_countdown.1854>
    19e4:	88 23       	and	r24, r24
    19e6:	89 f0       	breq	.+34     	; 0x1a0a <scroll_display+0x168>
		shift_countdown--;
    19e8:	81 50       	subi	r24, 0x01	; 1
    19ea:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    19ee:	00 23       	and	r16, r16
    19f0:	11 f0       	breq	.+4      	; 0x19f6 <scroll_display+0x154>
    19f2:	88 23       	and	r24, r24
    19f4:	11 f0       	breq	.+4      	; 0x19fa <scroll_display+0x158>
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	03 c0       	rjmp	.+6      	; 0x1a00 <scroll_display+0x15e>
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <scroll_display+0x15e>
    19fe:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	99 23       	and	r25, r25
    1a04:	29 f0       	breq	.+10     	; 0x1a10 <scroll_display+0x16e>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	03 c0       	rjmp	.+6      	; 0x1a10 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1a0a:	00 23       	and	r16, r16
    1a0c:	a1 f3       	breq	.-24     	; 0x19f6 <scroll_display+0x154>
    1a0e:	f7 cf       	rjmp	.-18     	; 0x19fe <scroll_display+0x15c>
	return !finished;
}
    1a10:	28 96       	adiw	r28, 0x08	; 8
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	f8 94       	cli
    1a16:	de bf       	out	0x3e, r29	; 62
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	cd bf       	out	0x3d, r28	; 61
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	0f 91       	pop	r16
    1a24:	08 95       	ret

00001a26 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1a26:	cf 93       	push	r28
    1a28:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1a2a:	8a 30       	cpi	r24, 0x0A	; 10
    1a2c:	19 f4       	brne	.+6      	; 0x1a34 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1a2e:	8d e0       	ldi	r24, 0x0D	; 13
    1a30:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1a34:	9f b7       	in	r25, 0x3f	; 63
    1a36:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1a3a:	99 23       	and	r25, r25
    1a3c:	29 f1       	breq	.+74     	; 0x1a88 <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1a3e:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1a42:	8f 3f       	cpi	r24, 0xFF	; 255
    1a44:	d1 f3       	breq	.-12     	; 0x1a3a <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1a46:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1a48:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <out_insert_pos>
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	8e 0f       	add	r24, r30
    1a50:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <out_insert_pos>
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	e8 57       	subi	r30, 0x78	; 120
    1a58:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5a:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1a5c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1a66:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <out_insert_pos>
    1a6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1a6e:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1a72:	e1 ec       	ldi	r30, 0xC1	; 193
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 62       	ori	r24, 0x20	; 32
    1a7a:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1a7c:	99 23       	and	r25, r25
    1a7e:	39 f0       	breq	.+14     	; 0x1a8e <uart_put_char+0x68>
		sei();
    1a80:	78 94       	sei
	}
	return 0;
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	05 c0       	rjmp	.+10     	; 0x1a92 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	02 c0       	rjmp	.+4      	; 0x1a92 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
}
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1a96:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1a9a:	88 23       	and	r24, r24
    1a9c:	e1 f3       	breq	.-8      	; 0x1a96 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1a9e:	2f b7       	in	r18, 0x3f	; 63
    1aa0:	20 78       	andi	r18, 0x80	; 128
	cli();
    1aa2:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1aa4:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <input_insert_pos>
    1aa8:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	83 1b       	sub	r24, r19
    1ab0:	91 09       	sbc	r25, r1
    1ab2:	5a f4       	brpl	.+22     	; 0x1aca <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1ab4:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <input_insert_pos>
    1ab8:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	e8 1b       	sub	r30, r24
    1ac0:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1ac2:	e8 56       	subi	r30, 0x68	; 104
    1ac4:	fc 4f       	sbci	r31, 0xFC	; 252
    1ac6:	80 81       	ld	r24, Z
    1ac8:	0a c0       	rjmp	.+20     	; 0x1ade <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1aca:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <input_insert_pos>
    1ace:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	e8 1b       	sub	r30, r24
    1ad6:	f1 09       	sbc	r31, r1
    1ad8:	e8 57       	subi	r30, 0x78	; 120
    1ada:	fc 4f       	sbci	r31, 0xFC	; 252
    1adc:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1ade:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1ae2:	91 50       	subi	r25, 0x01	; 1
    1ae4:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1ae8:	22 23       	and	r18, r18
    1aea:	09 f0       	breq	.+2      	; 0x1aee <uart_get_char+0x58>
		sei();
    1aec:	78 94       	sei
	}	
	return c;
}
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	08 95       	ret

00001af2 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1af2:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1af6:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1afa:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1afe:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <bytes_in_input_buffer>
	input_overrun = 0;
    1b02:	10 92 98 03 	sts	0x0398, r1	; 0x800398 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1b06:	40 93 37 02 	sts	0x0237, r20	; 0x800237 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	aa 1f       	adc	r26, r26
    1b14:	bb 1f       	adc	r27, r27
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	aa 1f       	adc	r26, r26
    1b1c:	bb 1f       	adc	r27, r27
    1b1e:	9c 01       	movw	r18, r24
    1b20:	ad 01       	movw	r20, r26
    1b22:	22 0f       	add	r18, r18
    1b24:	33 1f       	adc	r19, r19
    1b26:	44 1f       	adc	r20, r20
    1b28:	55 1f       	adc	r21, r21
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	72 e1       	ldi	r23, 0x12	; 18
    1b2e:	8a e7       	ldi	r24, 0x7A	; 122
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__divmodsi4>
    1b36:	ba 01       	movw	r22, r20
    1b38:	a9 01       	movw	r20, r18
    1b3a:	4f 5f       	subi	r20, 0xFF	; 255
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	6f 4f       	sbci	r22, 0xFF	; 255
    1b40:	7f 4f       	sbci	r23, 0xFF	; 255
    1b42:	db 01       	movw	r26, r22
    1b44:	ca 01       	movw	r24, r20
    1b46:	1a f4       	brpl	.+6      	; 0x1b4e <init_serial_stdio+0x5c>
    1b48:	01 96       	adiw	r24, 0x01	; 1
    1b4a:	a1 1d       	adc	r26, r1
    1b4c:	b1 1d       	adc	r27, r1
    1b4e:	b5 95       	asr	r27
    1b50:	a7 95       	ror	r26
    1b52:	97 95       	ror	r25
    1b54:	87 95       	ror	r24
    1b56:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1b58:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b5c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1b60:	e1 ec       	ldi	r30, 0xC1	; 193
    1b62:	f0 e0       	ldi	r31, 0x00	; 0
    1b64:	88 e1       	ldi	r24, 0x18	; 24
    1b66:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1b68:	80 81       	ld	r24, Z
    1b6a:	80 68       	ori	r24, 0x80	; 128
    1b6c:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1b6e:	ec e9       	ldi	r30, 0x9C	; 156
    1b70:	f3 e0       	ldi	r31, 0x03	; 3
    1b72:	8f e0       	ldi	r24, 0x0F	; 15
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	93 83       	std	Z+3, r25	; 0x03
    1b78:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	08 95       	ret

00001b80 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1b80:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	91 11       	cpse	r25, r1
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <serial_input_available+0xc>
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
}
    1b8c:	08 95       	ret

00001b8e <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1b8e:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1b92:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <bytes_in_input_buffer>
    1b96:	08 95       	ret

00001b98 <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1b98:	1f 92       	push	r1
    1b9a:	0f 92       	push	r0
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	0f 92       	push	r0
    1ba0:	11 24       	eor	r1, r1
    1ba2:	2f 93       	push	r18
    1ba4:	8f 93       	push	r24
    1ba6:	9f 93       	push	r25
    1ba8:	ef 93       	push	r30
    1baa:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1bac:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1bb0:	88 23       	and	r24, r24
    1bb2:	29 f1       	breq	.+74     	; 0x1bfe <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1bb4:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <out_insert_pos>
    1bb8:	20 91 87 02 	lds	r18, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	82 1b       	sub	r24, r18
    1bc0:	91 09       	sbc	r25, r1
    1bc2:	5a f4       	brpl	.+22     	; 0x1bda <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1bc4:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <out_insert_pos>
    1bc8:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	e8 1b       	sub	r30, r24
    1bd0:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1bd2:	e9 57       	subi	r30, 0x79	; 121
    1bd4:	fc 4f       	sbci	r31, 0xFC	; 252
    1bd6:	90 81       	ld	r25, Z
    1bd8:	0a c0       	rjmp	.+20     	; 0x1bee <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1bda:	e0 91 86 02 	lds	r30, 0x0286	; 0x800286 <out_insert_pos>
    1bde:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	e8 1b       	sub	r30, r24
    1be6:	f1 09       	sbc	r31, r1
    1be8:	e8 57       	subi	r30, 0x78	; 120
    1bea:	fd 4f       	sbci	r31, 0xFD	; 253
    1bec:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1bee:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1bf2:	81 50       	subi	r24, 0x01	; 1
    1bf4:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1bf8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1bfe:	e1 ec       	ldi	r30, 0xC1	; 193
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	8f 7d       	andi	r24, 0xDF	; 223
    1c06:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1c08:	ff 91       	pop	r31
    1c0a:	ef 91       	pop	r30
    1c0c:	9f 91       	pop	r25
    1c0e:	8f 91       	pop	r24
    1c10:	2f 91       	pop	r18
    1c12:	0f 90       	pop	r0
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	0f 90       	pop	r0
    1c18:	1f 90       	pop	r1
    1c1a:	18 95       	reti

00001c1c <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1c1c:	1f 92       	push	r1
    1c1e:	0f 92       	push	r0
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	0f 92       	push	r0
    1c24:	11 24       	eor	r1, r1
    1c26:	2f 93       	push	r18
    1c28:	3f 93       	push	r19
    1c2a:	4f 93       	push	r20
    1c2c:	5f 93       	push	r21
    1c2e:	6f 93       	push	r22
    1c30:	7f 93       	push	r23
    1c32:	8f 93       	push	r24
    1c34:	9f 93       	push	r25
    1c36:	af 93       	push	r26
    1c38:	bf 93       	push	r27
    1c3a:	cf 93       	push	r28
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1c40:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1c44:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <do_echo>
    1c48:	88 23       	and	r24, r24
    1c4a:	49 f0       	breq	.+18     	; 0x1c5e <__vector_20+0x42>
    1c4c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <bytes_in_out_buffer>
    1c50:	8f 3f       	cpi	r24, 0xFF	; 255
    1c52:	29 f0       	breq	.+10     	; 0x1c5e <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1c54:	60 e0       	ldi	r22, 0x00	; 0
    1c56:	70 e0       	ldi	r23, 0x00	; 0
    1c58:	8c 2f       	mov	r24, r28
    1c5a:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1c5e:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1c62:	80 31       	cpi	r24, 0x10	; 16
    1c64:	20 f0       	brcs	.+8      	; 0x1c6e <__vector_20+0x52>
		input_overrun = 1;
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <input_overrun>
    1c6c:	18 c0       	rjmp	.+48     	; 0x1c9e <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1c6e:	cd 30       	cpi	r28, 0x0D	; 13
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <__vector_20+0x58>
			c = '\n';
    1c72:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1c74:	e0 91 87 03 	lds	r30, 0x0387	; 0x800387 <input_insert_pos>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	8e 0f       	add	r24, r30
    1c7c:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <input_insert_pos>
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	e8 57       	subi	r30, 0x78	; 120
    1c84:	fc 4f       	sbci	r31, 0xFC	; 252
    1c86:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1c88:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <bytes_in_input_buffer>
    1c8c:	8f 5f       	subi	r24, 0xFF	; 255
    1c8e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1c92:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <input_insert_pos>
    1c96:	80 31       	cpi	r24, 0x10	; 16
    1c98:	11 f4       	brne	.+4      	; 0x1c9e <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1c9a:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <input_insert_pos>
		}
	}
}
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	cf 91       	pop	r28
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <snakeLength>
	snakeTailIndex = 0;
    1cce:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <snakeTailIndex>
	snakeHeadIndex = 1;
    1cd2:	c1 e0       	ldi	r28, 0x01	; 1
    1cd4:	c0 93 3b 02 	sts	0x023B, r28	; 0x80023b <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1cd8:	61 e0       	ldi	r22, 0x01	; 1
    1cda:	81 e0       	ldi	r24, 0x01	; 1
    1cdc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    1ce0:	0d e3       	ldi	r16, 0x3D	; 61
    1ce2:	12 e0       	ldi	r17, 0x02	; 2
    1ce4:	f8 01       	movw	r30, r16
    1ce6:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1ce8:	61 e0       	ldi	r22, 0x01	; 1
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    1cf0:	f8 01       	movw	r30, r16
    1cf2:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1cf4:	c0 93 39 02 	sts	0x0239, r28	; 0x800239 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1cf8:	c0 93 38 02 	sts	0x0238, r28	; 0x800238 <nextSnakeDirn>
}
    1cfc:	cf 91       	pop	r28
    1cfe:	1f 91       	pop	r17
    1d00:	0f 91       	pop	r16
    1d02:	08 95       	ret

00001d04 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1d04:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <snakeHeadIndex>
    1d08:	0e 2e       	mov	r0, r30
    1d0a:	00 0c       	add	r0, r0
    1d0c:	ff 0b       	sbc	r31, r31
    1d0e:	e3 5c       	subi	r30, 0xC3	; 195
    1d10:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d12:	80 81       	ld	r24, Z
    1d14:	08 95       	ret

00001d16 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1d16:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <curSnakeDirn>
	nextSnakeDirn = dirn;
    1d1a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <nextSnakeDirn>
    1d1e:	08 95       	ret

00001d20 <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1d20:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <snakeTailIndex>
    1d24:	0e 2e       	mov	r0, r30
    1d26:	00 0c       	add	r0, r0
    1d28:	ff 0b       	sbc	r31, r31
    1d2a:	e3 5c       	subi	r30, 0xC3	; 195
    1d2c:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d2e:	80 81       	ld	r24, Z
    1d30:	08 95       	ret

00001d32 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1d32:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <snakeLength>
    1d36:	08 95       	ret

00001d38 <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1d38:	e8 2f       	mov	r30, r24
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	e3 5c       	subi	r30, 0xC3	; 195
    1d3e:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d40:	80 81       	ld	r24, Z
    1d42:	08 95       	ret

00001d44 <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1d44:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <snakeLength>
    1d48:	08 95       	ret

00001d4a <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1d4a:	e6 2f       	mov	r30, r22
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	e3 5c       	subi	r30, 0xC3	; 195
    1d50:	fd 4f       	sbci	r31, 0xFD	; 253
    1d52:	80 83       	st	Z, r24
    1d54:	08 95       	ret

00001d56 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1d56:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <snakeHeadIndex>
    1d5a:	08 95       	ret

00001d5c <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1d5c:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <snakeTailIndex>
    1d60:	08 95       	ret

00001d62 <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1d62:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeHeadIndex>
    1d66:	08 95       	ret

00001d68 <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1d68:	80 91 3a 02 	lds	r24, 0x023A	; 0x80023a <snakeTailIndex>
    1d6c:	08 95       	ret

00001d6e <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1d6e:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <curSnakeDirn>
    1d72:	08 95       	ret

00001d74 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1d74:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <snakeTailIndex>
    1d78:	e9 2f       	mov	r30, r25
    1d7a:	09 2e       	mov	r0, r25
    1d7c:	00 0c       	add	r0, r0
    1d7e:	ff 0b       	sbc	r31, r31
    1d80:	e3 5c       	subi	r30, 0xC3	; 195
    1d82:	fd 4f       	sbci	r31, 0xFD	; 253
    1d84:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1d86:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1d88:	91 32       	cpi	r25, 0x21	; 33
    1d8a:	19 f0       	breq	.+6      	; 0x1d92 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1d8c:	90 93 3a 02 	sts	0x023A, r25	; 0x80023a <snakeTailIndex>
    1d90:	02 c0       	rjmp	.+4      	; 0x1d96 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1d92:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <snakeTailIndex>
	}
	snakeLength--;
    1d96:	90 91 3c 02 	lds	r25, 0x023C	; 0x80023c <snakeLength>
    1d9a:	91 50       	subi	r25, 0x01	; 1
    1d9c:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <snakeLength>
	
	return prev_tail_position;
}
    1da0:	08 95       	ret

00001da2 <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1da2:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <curSnakeDirn>
    1da6:	91 30       	cpi	r25, 0x01	; 1
    1da8:	a9 f0       	breq	.+42     	; 0x1dd4 <set_snake_dirn+0x32>
    1daa:	28 f0       	brcs	.+10     	; 0x1db6 <set_snake_dirn+0x14>
    1dac:	92 30       	cpi	r25, 0x02	; 2
    1dae:	41 f0       	breq	.+16     	; 0x1dc0 <set_snake_dirn+0x1e>
    1db0:	93 30       	cpi	r25, 0x03	; 3
    1db2:	59 f0       	breq	.+22     	; 0x1dca <set_snake_dirn+0x28>
    1db4:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1db6:	82 30       	cpi	r24, 0x02	; 2
    1db8:	89 f0       	breq	.+34     	; 0x1ddc <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1dba:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <nextSnakeDirn>
    1dbe:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1dc0:	88 23       	and	r24, r24
    1dc2:	61 f0       	breq	.+24     	; 0x1ddc <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1dc4:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <nextSnakeDirn>
    1dc8:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	39 f0       	breq	.+14     	; 0x1ddc <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1dce:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <nextSnakeDirn>
    1dd2:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1dd4:	83 30       	cpi	r24, 0x03	; 3
    1dd6:	11 f0       	breq	.+4      	; 0x1ddc <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1dd8:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <nextSnakeDirn>
    1ddc:	08 95       	ret

00001dde <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1dde:	90 91 3a 02 	lds	r25, 0x023A	; 0x80023a <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1de2:	30 91 3b 02 	lds	r19, 0x023B	; 0x80023b <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1de6:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1de8:	0d c0       	rjmp	.+26     	; 0x1e04 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1dea:	e9 2f       	mov	r30, r25
    1dec:	09 2e       	mov	r0, r25
    1dee:	00 0c       	add	r0, r0
    1df0:	ff 0b       	sbc	r31, r31
    1df2:	e3 5c       	subi	r30, 0xC3	; 195
    1df4:	fd 4f       	sbci	r31, 0xFD	; 253
    1df6:	20 81       	ld	r18, Z
    1df8:	28 17       	cp	r18, r24
    1dfa:	89 f0       	breq	.+34     	; 0x1e1e <is_snake_at+0x40>
    1dfc:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1dfe:	91 32       	cpi	r25, 0x21	; 33
    1e00:	0c f0       	brlt	.+2      	; 0x1e04 <is_snake_at+0x26>
			index = 0;
    1e02:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1e04:	93 13       	cpse	r25, r19
    1e06:	f1 cf       	rjmp	.-30     	; 0x1dea <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1e08:	e3 2f       	mov	r30, r19
    1e0a:	33 0f       	add	r19, r19
    1e0c:	ff 0b       	sbc	r31, r31
    1e0e:	e3 5c       	subi	r30, 0xC3	; 195
    1e10:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1e12:	91 e0       	ldi	r25, 0x01	; 1
    1e14:	20 81       	ld	r18, Z
    1e16:	28 17       	cp	r18, r24
    1e18:	19 f0       	breq	.+6      	; 0x1e20 <is_snake_at+0x42>
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <is_snake_at+0x42>
    1e1e:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1e20:	89 2f       	mov	r24, r25
    1e22:	08 95       	ret

00001e24 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1e24:	cf 93       	push	r28
    1e26:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1e28:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <snakeLength>
    1e2c:	81 32       	cpi	r24, 0x21	; 33
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <advance_snake_head+0xe>
    1e30:	96 c0       	rjmp	.+300    	; 0x1f5e <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1e32:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <snakeHeadIndex>
    1e36:	0e 2e       	mov	r0, r30
    1e38:	00 0c       	add	r0, r0
    1e3a:	ff 0b       	sbc	r31, r31
    1e3c:	e3 5c       	subi	r30, 0xC3	; 195
    1e3e:	fd 4f       	sbci	r31, 0xFD	; 253
    1e40:	80 81       	ld	r24, Z
    1e42:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    1e46:	d8 2f       	mov	r29, r24
    1e48:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1e4a:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <snakeHeadIndex>
    1e4e:	0e 2e       	mov	r0, r30
    1e50:	00 0c       	add	r0, r0
    1e52:	ff 0b       	sbc	r31, r31
    1e54:	e3 5c       	subi	r30, 0xC3	; 195
    1e56:	fd 4f       	sbci	r31, 0xFD	; 253
    1e58:	80 81       	ld	r24, Z
    1e5a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    1e5e:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1e60:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <nextSnakeDirn>
    1e64:	91 30       	cpi	r25, 0x01	; 1
    1e66:	59 f0       	breq	.+22     	; 0x1e7e <advance_snake_head+0x5a>
    1e68:	28 f0       	brcs	.+10     	; 0x1e74 <advance_snake_head+0x50>
    1e6a:	92 30       	cpi	r25, 0x02	; 2
    1e6c:	69 f0       	breq	.+26     	; 0x1e88 <advance_snake_head+0x64>
    1e6e:	93 30       	cpi	r25, 0x03	; 3
    1e70:	81 f0       	breq	.+32     	; 0x1e92 <advance_snake_head+0x6e>
    1e72:	1b c0       	rjmp	.+54     	; 0x1eaa <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1e74:	87 30       	cpi	r24, 0x07	; 7
    1e76:	91 f0       	breq	.+36     	; 0x1e9c <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    1e78:	61 e0       	ldi	r22, 0x01	; 1
    1e7a:	68 0f       	add	r22, r24
    1e7c:	16 c0       	rjmp	.+44     	; 0x1eaa <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1e7e:	df 30       	cpi	r29, 0x0F	; 15
    1e80:	79 f0       	breq	.+30     	; 0x1ea0 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1e82:	c1 e0       	ldi	r28, 0x01	; 1
    1e84:	cd 0f       	add	r28, r29
    1e86:	11 c0       	rjmp	.+34     	; 0x1eaa <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    1e88:	88 23       	and	r24, r24
    1e8a:	61 f0       	breq	.+24     	; 0x1ea4 <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    1e8c:	6f ef       	ldi	r22, 0xFF	; 255
    1e8e:	68 0f       	add	r22, r24
    1e90:	0c c0       	rjmp	.+24     	; 0x1eaa <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    1e92:	dd 23       	and	r29, r29
    1e94:	49 f0       	breq	.+18     	; 0x1ea8 <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    1e96:	cf ef       	ldi	r28, 0xFF	; 255
    1e98:	cd 0f       	add	r28, r29
    1e9a:	07 c0       	rjmp	.+14     	; 0x1eaa <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	05 c0       	rjmp	.+10     	; 0x1eaa <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1ea0:	c0 e0       	ldi	r28, 0x00	; 0
    1ea2:	03 c0       	rjmp	.+6      	; 0x1eaa <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    1ea4:	67 e0       	ldi	r22, 0x07	; 7
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    1ea8:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    1eaa:	8c 2f       	mov	r24, r28
    1eac:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    1eb0:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    1eb2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <nextSnakeDirn>
    1eb6:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <curSnakeDirn>
    1eba:	98 17       	cp	r25, r24
    1ebc:	41 f0       	breq	.+16     	; 0x1ece <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1ebe:	80 93 39 02 	sts	0x0239, r24	; 0x800239 <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    1ec2:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
    1ec6:	89 2b       	or	r24, r25
    1ec8:	11 f0       	breq	.+4      	; 0x1ece <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    1eca:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1ece:	8c 2f       	mov	r24, r28
    1ed0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <is_snake_at>
    1ed4:	88 23       	and	r24, r24
    1ed6:	51 f0       	breq	.+20     	; 0x1eec <advance_snake_head+0xc8>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1ed8:	e0 91 3a 02 	lds	r30, 0x023A	; 0x80023a <snakeTailIndex>
    1edc:	0e 2e       	mov	r0, r30
    1ede:	00 0c       	add	r0, r0
    1ee0:	ff 0b       	sbc	r31, r31
    1ee2:	e3 5c       	subi	r30, 0xC3	; 195
    1ee4:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1ee6:	80 81       	ld	r24, Z
    1ee8:	c8 13       	cpse	r28, r24
    1eea:	3b c0       	rjmp	.+118    	; 0x1f62 <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1eec:	80 91 3b 02 	lds	r24, 0x023B	; 0x80023b <snakeHeadIndex>
    1ef0:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1ef2:	81 32       	cpi	r24, 0x21	; 33
    1ef4:	19 f0       	breq	.+6      	; 0x1efc <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1ef6:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <snakeHeadIndex>
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1efc:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1f00:	e0 91 3b 02 	lds	r30, 0x023B	; 0x80023b <snakeHeadIndex>
    1f04:	0e 2e       	mov	r0, r30
    1f06:	00 0c       	add	r0, r0
    1f08:	ff 0b       	sbc	r31, r31
    1f0a:	e3 5c       	subi	r30, 0xC3	; 195
    1f0c:	fd 4f       	sbci	r31, 0xFD	; 253
    1f0e:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1f10:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <snakeLength>
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    1f1a:	8c 2f       	mov	r24, r28
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 96 0b 	call	0x172c	; 0x172c <is_rat_at>
    1f22:	89 2b       	or	r24, r25
    1f24:	31 f0       	breq	.+12     	; 0x1f32 <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1f26:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <snakeLength>
    1f2a:	81 32       	cpi	r24, 0x21	; 33
    1f2c:	e0 f0       	brcs	.+56     	; 0x1f66 <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    1f2e:	87 e0       	ldi	r24, 0x07	; 7
    1f30:	21 c0       	rjmp	.+66     	; 0x1f74 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    1f32:	8c 2f       	mov	r24, r28
    1f34:	0e 94 3e 10 	call	0x207c	; 0x207c <is_superfood_at>
    1f38:	88 23       	and	r24, r24
    1f3a:	31 f0       	breq	.+12     	; 0x1f48 <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1f3c:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <snakeLength>
    1f40:	81 32       	cpi	r24, 0x21	; 33
    1f42:	98 f0       	brcs	.+38     	; 0x1f6a <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    1f44:	85 e0       	ldi	r24, 0x05	; 5
    1f46:	16 c0       	rjmp	.+44     	; 0x1f74 <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    1f48:	8c 2f       	mov	r24, r28
    1f4a:	0e 94 46 07 	call	0xe8c	; 0xe8c <is_food_at>
    1f4e:	88 23       	and	r24, r24
    1f50:	71 f0       	breq	.+28     	; 0x1f6e <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1f52:	80 91 3c 02 	lds	r24, 0x023C	; 0x80023c <snakeLength>
    1f56:	81 32       	cpi	r24, 0x21	; 33
    1f58:	60 f0       	brcs	.+24     	; 0x1f72 <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	0b c0       	rjmp	.+22     	; 0x1f74 <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    1f5e:	8d ef       	ldi	r24, 0xFD	; 253
    1f60:	09 c0       	rjmp	.+18     	; 0x1f74 <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1f62:	8e ef       	ldi	r24, 0xFE	; 254
    1f64:	07 c0       	rjmp	.+14     	; 0x1f74 <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    1f66:	86 e0       	ldi	r24, 0x06	; 6
    1f68:	05 c0       	rjmp	.+10     	; 0x1f74 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    1f6a:	84 e0       	ldi	r24, 0x04	; 4
    1f6c:	03 c0       	rjmp	.+6      	; 0x1f74 <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	01 c0       	rjmp	.+2      	; 0x1f74 <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    1f72:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    1f74:	df 91       	pop	r29
    1f76:	cf 91       	pop	r28
    1f78:	08 95       	ret

00001f7a <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1f7a:	94 b1       	in	r25, 0x04	; 4
    1f7c:	90 6b       	ori	r25, 0xB0	; 176
    1f7e:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1f80:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1f82:	90 e5       	ldi	r25, 0x50	; 80
    1f84:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1f86:	88 30       	cpi	r24, 0x08	; 8
    1f88:	21 f0       	breq	.+8      	; 0x1f92 <spi_setup_master+0x18>
    1f8a:	80 32       	cpi	r24, 0x20	; 32
    1f8c:	11 f0       	breq	.+4      	; 0x1f92 <spi_setup_master+0x18>
    1f8e:	82 30       	cpi	r24, 0x02	; 2
    1f90:	19 f4       	brne	.+6      	; 0x1f98 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1f92:	91 e0       	ldi	r25, 0x01	; 1
    1f94:	9d bd       	out	0x2d, r25	; 45
			break;
    1f96:	01 c0       	rjmp	.+2      	; 0x1f9a <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1f98:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1f9a:	80 32       	cpi	r24, 0x20	; 32
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <spi_setup_master+0x3e>
    1f9e:	28 f4       	brcc	.+10     	; 0x1faa <spi_setup_master+0x30>
    1fa0:	88 30       	cpi	r24, 0x08	; 8
    1fa2:	71 f0       	breq	.+28     	; 0x1fc0 <spi_setup_master+0x46>
    1fa4:	80 31       	cpi	r24, 0x10	; 16
    1fa6:	61 f0       	breq	.+24     	; 0x1fc0 <spi_setup_master+0x46>
    1fa8:	0e c0       	rjmp	.+28     	; 0x1fc6 <spi_setup_master+0x4c>
    1faa:	80 34       	cpi	r24, 0x40	; 64
    1fac:	29 f0       	breq	.+10     	; 0x1fb8 <spi_setup_master+0x3e>
    1fae:	80 38       	cpi	r24, 0x80	; 128
    1fb0:	51 f4       	brne	.+20     	; 0x1fc6 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1fb2:	8c b5       	in	r24, 0x2c	; 44
    1fb4:	81 60       	ori	r24, 0x01	; 1
    1fb6:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1fb8:	8c b5       	in	r24, 0x2c	; 44
    1fba:	82 60       	ori	r24, 0x02	; 2
    1fbc:	8c bd       	out	0x2c, r24	; 44
			break;
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    1fc0:	8c b5       	in	r24, 0x2c	; 44
    1fc2:	81 60       	ori	r24, 0x01	; 1
    1fc4:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    1fc6:	2c 98       	cbi	0x05, 4	; 5
    1fc8:	08 95       	ret

00001fca <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    1fca:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    1fcc:	0d b4       	in	r0, 0x2d	; 45
    1fce:	07 fe       	sbrs	r0, 7
    1fd0:	fd cf       	rjmp	.-6      	; 0x1fcc <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    1fd2:	8e b5       	in	r24, 0x2e	; 46
    1fd4:	08 95       	ret

00001fd6 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    1fd6:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <superfood_position>
	superfood_on_board = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <superfood_on_board>
}
    1fe0:	08 95       	ret

00001fe2 <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    1fe2:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <superfood_on_board>
    1fe6:	08 95       	ret

00001fe8 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    1fe8:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    1fec:	68 59       	subi	r22, 0x98	; 152
    1fee:	7a 43       	sbci	r23, 0x3A	; 58
    1ff0:	81 09       	sbc	r24, r1
    1ff2:	91 09       	sbc	r25, r1
    1ff4:	20 e2       	ldi	r18, 0x20	; 32
    1ff6:	3e e4       	ldi	r19, 0x4E	; 78
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	50 e0       	ldi	r21, 0x00	; 0
    1ffc:	0e 94 41 13 	call	0x2682	; 0x2682 <__udivmodsi4>
    2000:	67 2b       	or	r22, r23
    2002:	68 2b       	or	r22, r24
    2004:	69 2b       	or	r22, r25
    2006:	21 f4       	brne	.+8      	; 0x2010 <time_to_add_superfood+0x28>
    2008:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	08 95       	ret
    2010:	80 e0       	ldi	r24, 0x00	; 0
}
    2012:	08 95       	ret

00002014 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    2014:	0e 94 73 11 	call	0x22e6	; 0x22e6 <get_clock_ticks>
    2018:	20 e2       	ldi	r18, 0x20	; 32
    201a:	3e e4       	ldi	r19, 0x4E	; 78
    201c:	40 e0       	ldi	r20, 0x00	; 0
    201e:	50 e0       	ldi	r21, 0x00	; 0
    2020:	0e 94 41 13 	call	0x2682	; 0x2682 <__udivmodsi4>
    2024:	21 e0       	ldi	r18, 0x01	; 1
    2026:	67 2b       	or	r22, r23
    2028:	68 2b       	or	r22, r24
    202a:	69 2b       	or	r22, r25
    202c:	09 f0       	breq	.+2      	; 0x2030 <time_to_remove_superfood+0x1c>
    202e:	20 e0       	ldi	r18, 0x00	; 0
}
    2030:	82 2f       	mov	r24, r18
    2032:	08 95       	ret

00002034 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    2034:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    2036:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <superfood_position>
    203a:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    203e:	c8 2f       	mov	r28, r24
    2040:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <superfood_position>
    2044:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    2048:	40 e0       	ldi	r20, 0x00	; 0
    204a:	6c 2f       	mov	r22, r28
    204c:	0e 94 a9 08 	call	0x1152	; 0x1152 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    2058:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <superfood_position>
	superfood_on_board = 0; 
    205c:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <superfood_on_board>
}
    2060:	cf 91       	pop	r28
    2062:	08 95       	ret

00002064 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    206c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <superfood_position>
	superfood_on_board = 0;
    2070:	10 92 9b 03 	sts	0x039B, r1	; 0x80039b <superfood_on_board>
    2074:	08 95       	ret

00002076 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    2076:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <superfood_position>
    207a:	08 95       	ret

0000207c <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    207c:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <superfood_on_board>
    2080:	99 23       	and	r25, r25
    2082:	39 f0       	breq	.+14     	; 0x2092 <is_superfood_at+0x16>
    2084:	91 e0       	ldi	r25, 0x01	; 1
    2086:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <superfood_position>
    208a:	28 13       	cpse	r18, r24
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	89 2f       	mov	r24, r25
    2090:	08 95       	ret
    2092:	80 e0       	ldi	r24, 0x00	; 0
}
    2094:	08 95       	ret

00002096 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    209c:	0e 94 1a 10 	call	0x2034	; 0x2034 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    20a0:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
    20a4:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    20a6:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
		test_position = position(x,y);
    20aa:	bc 01       	movw	r22, r24
    20ac:	67 70       	andi	r22, 0x07	; 7
    20ae:	70 78       	andi	r23, 0x80	; 128
    20b0:	77 23       	and	r23, r23
    20b2:	34 f4       	brge	.+12     	; 0x20c0 <add_superfood_to_board+0x2a>
    20b4:	61 50       	subi	r22, 0x01	; 1
    20b6:	71 09       	sbc	r23, r1
    20b8:	68 6f       	ori	r22, 0xF8	; 248
    20ba:	7f 6f       	ori	r23, 0xFF	; 255
    20bc:	6f 5f       	subi	r22, 0xFF	; 255
    20be:	7f 4f       	sbci	r23, 0xFF	; 255
    20c0:	ce 01       	movw	r24, r28
    20c2:	8f 70       	andi	r24, 0x0F	; 15
    20c4:	90 78       	andi	r25, 0x80	; 128
    20c6:	99 23       	and	r25, r25
    20c8:	24 f4       	brge	.+8      	; 0x20d2 <add_superfood_to_board+0x3c>
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	80 6f       	ori	r24, 0xF0	; 240
    20ce:	9f 6f       	ori	r25, 0xFF	; 255
    20d0:	01 96       	adiw	r24, 0x01	; 1
    20d2:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    20d6:	c8 2f       	mov	r28, r24
    20d8:	13 e6       	ldi	r17, 0x63	; 99
    20da:	1e c0       	rjmp	.+60     	; 0x2118 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    20dc:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
    20e0:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    20e2:	0e 94 ce 13 	call	0x279c	; 0x279c <rand>
		test_position = position(x,y);
    20e6:	bc 01       	movw	r22, r24
    20e8:	67 70       	andi	r22, 0x07	; 7
    20ea:	70 78       	andi	r23, 0x80	; 128
    20ec:	77 23       	and	r23, r23
    20ee:	34 f4       	brge	.+12     	; 0x20fc <add_superfood_to_board+0x66>
    20f0:	61 50       	subi	r22, 0x01	; 1
    20f2:	71 09       	sbc	r23, r1
    20f4:	68 6f       	ori	r22, 0xF8	; 248
    20f6:	7f 6f       	ori	r23, 0xFF	; 255
    20f8:	6f 5f       	subi	r22, 0xFF	; 255
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	ce 01       	movw	r24, r28
    20fe:	8f 70       	andi	r24, 0x0F	; 15
    2100:	90 78       	andi	r25, 0x80	; 128
    2102:	99 23       	and	r25, r25
    2104:	24 f4       	brge	.+8      	; 0x210e <add_superfood_to_board+0x78>
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	80 6f       	ori	r24, 0xF0	; 240
    210a:	9f 6f       	ori	r25, 0xFF	; 255
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <position>
    2112:	c8 2f       	mov	r28, r24
    2114:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    2116:	a1 f0       	breq	.+40     	; 0x2140 <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    2118:	8c 2f       	mov	r24, r28
    211a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    211e:	81 11       	cpse	r24, r1
    2120:	dd cf       	rjmp	.-70     	; 0x20dc <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    2122:	8c 2f       	mov	r24, r28
    2124:	0e 94 46 07 	call	0xe8c	; 0xe8c <is_food_at>
    2128:	81 11       	cpse	r24, r1
    212a:	d8 cf       	rjmp	.-80     	; 0x20dc <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    212c:	8c 2f       	mov	r24, r28
    212e:	0e 94 3e 10 	call	0x207c	; 0x207c <is_superfood_at>
    2132:	81 11       	cpse	r24, r1
    2134:	d3 cf       	rjmp	.-90     	; 0x20dc <add_superfood_to_board+0x46>
    2136:	8c 2f       	mov	r24, r28
    2138:	0e 94 96 0b 	call	0x172c	; 0x172c <is_rat_at>
    213c:	81 11       	cpse	r24, r1
    213e:	ce cf       	rjmp	.-100    	; 0x20dc <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    2140:	c0 93 9a 03 	sts	0x039A, r28	; 0x80039a <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    2144:	8c 2f       	mov	r24, r28
    2146:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <y_position>
    214a:	c8 2f       	mov	r28, r24
    214c:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <superfood_position>
    2150:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <x_position>
    2154:	4c e3       	ldi	r20, 0x3C	; 60
    2156:	6c 2f       	mov	r22, r28
    2158:	0e 94 a9 08 	call	0x1152	; 0x1152 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <superfood_on_board>
}
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	08 95       	ret

0000216a <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    216a:	28 2f       	mov	r18, r24
    216c:	08 2e       	mov	r0, r24
    216e:	00 0c       	add	r0, r0
    2170:	33 0b       	sbc	r19, r19
    2172:	3f 93       	push	r19
    2174:	8f 93       	push	r24
    2176:	86 2f       	mov	r24, r22
    2178:	06 2e       	mov	r0, r22
    217a:	00 0c       	add	r0, r0
    217c:	99 0b       	sbc	r25, r25
    217e:	9f 93       	push	r25
    2180:	6f 93       	push	r22
    2182:	8d ed       	ldi	r24, 0xDD	; 221
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	08 95       	ret

0000219c <clear_terminal>:
    219c:	88 ed       	ldi	r24, 0xD8	; 216
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	9f 93       	push	r25
    21a2:	8f 93       	push	r24
    21a4:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
    21a8:	0f 90       	pop	r0
    21aa:	0f 90       	pop	r0
    21ac:	08 95       	ret

000021ae <set_display_attribute>:
    21ae:	1f 92       	push	r1
    21b0:	8f 93       	push	r24
    21b2:	82 ed       	ldi	r24, 0xD2	; 210
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	9f 93       	push	r25
    21b8:	8f 93       	push	r24
    21ba:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
    21be:	0f 90       	pop	r0
    21c0:	0f 90       	pop	r0
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	08 95       	ret

000021c8 <hide_cursor>:
    21c8:	8b ec       	ldi	r24, 0xCB	; 203
    21ca:	91 e0       	ldi	r25, 0x01	; 1
    21cc:	9f 93       	push	r25
    21ce:	8f 93       	push	r24
    21d0:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	08 95       	ret

000021da <show_cursor>:
    21da:	84 ec       	ldi	r24, 0xC4	; 196
    21dc:	91 e0       	ldi	r25, 0x01	; 1
    21de:	9f 93       	push	r25
    21e0:	8f 93       	push	r24
    21e2:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	08 95       	ret

000021ec <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    21ec:	63 e0       	ldi	r22, 0x03	; 3
    21ee:	83 e0       	ldi	r24, 0x03	; 3
    21f0:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf_P(PSTR("Snake"));
    21f4:	8e eb       	ldi	r24, 0xBE	; 190
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>

	move_cursor(3,5);
    2200:	65 e0       	ldi	r22, 0x05	; 5
    2202:	83 e0       	ldi	r24, 0x03	; 3
    2204:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    2208:	80 e2       	ldi	r24, 0x20	; 32
    220a:	0e 94 d7 10 	call	0x21ae	; 0x21ae <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    220e:	84 e9       	ldi	r24, 0x94	; 148
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	9f 93       	push	r25
    2214:	8f 93       	push	r24
    2216:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    221a:	85 e2       	ldi	r24, 0x25	; 37
    221c:	0e 94 d7 10 	call	0x21ae	; 0x21ae <set_display_attribute>
	display_EEPROM_high_score();
    2220:	0e 94 41 06 	call	0xc82	; 0xc82 <display_EEPROM_high_score>
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	08 95       	ret

0000222e <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    222e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <hide_cursor>
	
	move_cursor(10,1);
    2232:	61 e0       	ldi	r22, 0x01	; 1
    2234:	8a e0       	ldi	r24, 0x0A	; 10
    2236:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf("Snake");
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	92 e0       	ldi	r25, 0x02	; 2
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	0e 94 be 14 	call	0x297c	; 0x297c <printf>

	move_cursor(1,3);
    2246:	63 e0       	ldi	r22, 0x03	; 3
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf("Score:  ");
    224e:	87 e0       	ldi	r24, 0x07	; 7
    2250:	92 e0       	ldi	r25, 0x02	; 2
    2252:	9f 93       	push	r25
    2254:	8f 93       	push	r24
    2256:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
	
}
    225a:	0f 90       	pop	r0
    225c:	0f 90       	pop	r0
    225e:	0f 90       	pop	r0
    2260:	0f 90       	pop	r0
    2262:	08 95       	ret

00002264 <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    2264:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <hide_cursor>
	move_cursor(1, 3);
    2268:	63 e0       	ldi	r22, 0x03	; 3
    226a:	81 e0       	ldi	r24, 0x01	; 1
    226c:	0e 94 b5 10 	call	0x216a	; 0x216a <move_cursor>
	printf("Score: %5u", get_score());
    2270:	0e 94 30 0c 	call	0x1860	; 0x1860 <get_score>
    2274:	9f 93       	push	r25
    2276:	8f 93       	push	r24
    2278:	7f 93       	push	r23
    227a:	6f 93       	push	r22
    227c:	80 e1       	ldi	r24, 0x10	; 16
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	9f 93       	push	r25
    2282:	8f 93       	push	r24
    2284:	0e 94 be 14 	call	0x297c	; 0x297c <printf>
}
    2288:	0f 90       	pop	r0
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	08 95       	ret

00002296 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    2296:	10 92 5e 02 	sts	0x025E, r1	; 0x80025e <clock_ticks>
    229a:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <clock_ticks+0x1>
    229e:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <clock_ticks+0x2>
    22a2:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    22a6:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    22a8:	8c e7       	ldi	r24, 0x7C	; 124
    22aa:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    22b4:	ee e6       	ldi	r30, 0x6E	; 110
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	82 60       	ori	r24, 0x02	; 2
    22bc:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    22be:	85 b3       	in	r24, 0x15	; 21
    22c0:	82 70       	andi	r24, 0x02	; 2
    22c2:	85 bb       	out	0x15, r24	; 21
    22c4:	08 95       	ret

000022c6 <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    22c6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <unpaused_game>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	89 1b       	sub	r24, r25
    22ce:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <unpaused_game>
    22d2:	08 95       	ret

000022d4 <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    22d4:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <unpaused_game>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	22 23       	and	r18, r18
    22de:	11 f0       	breq	.+4      	; 0x22e4 <timer_is_paused+0x10>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    22e4:	08 95       	ret

000022e6 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    22e6:	2f b7       	in	r18, 0x3f	; 63
	cli();
    22e8:	f8 94       	cli
	return_value = clock_ticks;
    22ea:	60 91 5e 02 	lds	r22, 0x025E	; 0x80025e <clock_ticks>
    22ee:	70 91 5f 02 	lds	r23, 0x025F	; 0x80025f <clock_ticks+0x1>
    22f2:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <clock_ticks+0x2>
    22f6:	90 91 61 02 	lds	r25, 0x0261	; 0x800261 <clock_ticks+0x3>
	if(interrupts_were_on) {
    22fa:	22 23       	and	r18, r18
    22fc:	0c f4       	brge	.+2      	; 0x2300 <get_clock_ticks+0x1a>
		sei();
    22fe:	78 94       	sei
	}
	return return_value;
}
    2300:	08 95       	ret

00002302 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    2302:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2304:	f8 94       	cli
	clock_ticks =clock;
    2306:	60 93 5e 02 	sts	0x025E, r22	; 0x80025e <clock_ticks>
    230a:	70 93 5f 02 	sts	0x025F, r23	; 0x80025f <clock_ticks+0x1>
    230e:	80 93 60 02 	sts	0x0260, r24	; 0x800260 <clock_ticks+0x2>
    2312:	90 93 61 02 	sts	0x0261, r25	; 0x800261 <clock_ticks+0x3>
	if(interrupts_were_on) {
    2316:	22 23       	and	r18, r18
    2318:	0c f4       	brge	.+2      	; 0x231c <set_clock_ticks+0x1a>
		sei();
    231a:	78 94       	sei
    231c:	08 95       	ret

0000231e <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    231e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SSD_CC_value>
    2322:	88 23       	and	r24, r24
    2324:	81 f0       	breq	.+32     	; 0x2346 <display_SSD_value+0x28>
		PORTD |= (1<<2);
    2326:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    2328:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <get_snake_length>
    232c:	ed ec       	ldi	r30, 0xCD	; 205
    232e:	8e 9f       	mul	r24, r30
    2330:	e1 2d       	mov	r30, r1
    2332:	11 24       	eor	r1, r1
    2334:	e6 95       	lsr	r30
    2336:	e6 95       	lsr	r30
    2338:	e6 95       	lsr	r30
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	e8 5d       	subi	r30, 0xD8	; 216
    233e:	fe 4f       	sbci	r31, 0xFE	; 254
    2340:	80 81       	ld	r24, Z
    2342:	82 b9       	out	0x02, r24	; 2
    2344:	16 c0       	rjmp	.+44     	; 0x2372 <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    2346:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    2348:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <get_snake_length>
    234c:	9d ec       	ldi	r25, 0xCD	; 205
    234e:	89 9f       	mul	r24, r25
    2350:	91 2d       	mov	r25, r1
    2352:	11 24       	eor	r1, r1
    2354:	96 95       	lsr	r25
    2356:	96 95       	lsr	r25
    2358:	96 95       	lsr	r25
    235a:	99 0f       	add	r25, r25
    235c:	29 2f       	mov	r18, r25
    235e:	22 0f       	add	r18, r18
    2360:	22 0f       	add	r18, r18
    2362:	92 0f       	add	r25, r18
    2364:	89 1b       	sub	r24, r25
    2366:	e8 2f       	mov	r30, r24
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	e2 5e       	subi	r30, 0xE2	; 226
    236c:	fe 4f       	sbci	r31, 0xFE	; 254
    236e:	80 81       	ld	r24, Z
    2370:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    2372:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <SSD_CC_value>
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	89 1b       	sub	r24, r25
    237a:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <SSD_CC_value>
    237e:	08 95       	ret

00002380 <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31
	if(unpaused_game){
    23a2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <unpaused_game>
    23a6:	88 23       	and	r24, r24
    23a8:	99 f0       	breq	.+38     	; 0x23d0 <__vector_16+0x50>
		clock_ticks++;
    23aa:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <clock_ticks>
    23ae:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <clock_ticks+0x1>
    23b2:	a0 91 60 02 	lds	r26, 0x0260	; 0x800260 <clock_ticks+0x2>
    23b6:	b0 91 61 02 	lds	r27, 0x0261	; 0x800261 <clock_ticks+0x3>
    23ba:	01 96       	adiw	r24, 0x01	; 1
    23bc:	a1 1d       	adc	r26, r1
    23be:	b1 1d       	adc	r27, r1
    23c0:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <clock_ticks>
    23c4:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <clock_ticks+0x1>
    23c8:	a0 93 60 02 	sts	0x0260, r26	; 0x800260 <clock_ticks+0x2>
    23cc:	b0 93 61 02 	sts	0x0261, r27	; 0x800261 <clock_ticks+0x3>
	}
	display_SSD_value();
    23d0:	0e 94 8f 11 	call	0x231e	; 0x231e <display_SSD_value>
}
    23d4:	ff 91       	pop	r31
    23d6:	ef 91       	pop	r30
    23d8:	bf 91       	pop	r27
    23da:	af 91       	pop	r26
    23dc:	9f 91       	pop	r25
    23de:	8f 91       	pop	r24
    23e0:	7f 91       	pop	r23
    23e2:	6f 91       	pop	r22
    23e4:	5f 91       	pop	r21
    23e6:	4f 91       	pop	r20
    23e8:	3f 91       	pop	r19
    23ea:	2f 91       	pop	r18
    23ec:	0f 90       	pop	r0
    23ee:	0f be       	out	0x3f, r0	; 63
    23f0:	0f 90       	pop	r0
    23f2:	1f 90       	pop	r1
    23f4:	18 95       	reti

000023f6 <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    23f6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    23fa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    23fe:	e1 e8       	ldi	r30, 0x81	; 129
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	8a 60       	ori	r24, 0x0A	; 10
    2406:	80 83       	st	Z, r24
    2408:	80 e4       	ldi	r24, 0x40	; 64
    240a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    240e:	88 ee       	ldi	r24, 0xE8	; 232
    2410:	93 e0       	ldi	r25, 0x03	; 3
    2412:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2416:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    241a:	55 98       	cbi	0x0a, 5	; 10
    241c:	53 98       	cbi	0x0a, 3	; 10
    241e:	08 95       	ret

00002420 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    2420:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2424:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2428:	08 95       	ret

0000242a <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    242a:	55 9a       	sbi	0x0a, 5	; 10
    242c:	08 95       	ret

0000242e <__fixunssfsi>:
    242e:	0e 94 b3 12 	call	0x2566	; 0x2566 <__fp_splitA>
    2432:	88 f0       	brcs	.+34     	; 0x2456 <__fixunssfsi+0x28>
    2434:	9f 57       	subi	r25, 0x7F	; 127
    2436:	98 f0       	brcs	.+38     	; 0x245e <__fixunssfsi+0x30>
    2438:	b9 2f       	mov	r27, r25
    243a:	99 27       	eor	r25, r25
    243c:	b7 51       	subi	r27, 0x17	; 23
    243e:	b0 f0       	brcs	.+44     	; 0x246c <__fixunssfsi+0x3e>
    2440:	e1 f0       	breq	.+56     	; 0x247a <__fixunssfsi+0x4c>
    2442:	66 0f       	add	r22, r22
    2444:	77 1f       	adc	r23, r23
    2446:	88 1f       	adc	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	1a f0       	brmi	.+6      	; 0x2452 <__fixunssfsi+0x24>
    244c:	ba 95       	dec	r27
    244e:	c9 f7       	brne	.-14     	; 0x2442 <__fixunssfsi+0x14>
    2450:	14 c0       	rjmp	.+40     	; 0x247a <__fixunssfsi+0x4c>
    2452:	b1 30       	cpi	r27, 0x01	; 1
    2454:	91 f0       	breq	.+36     	; 0x247a <__fixunssfsi+0x4c>
    2456:	0e 94 cd 12 	call	0x259a	; 0x259a <__fp_zero>
    245a:	b1 e0       	ldi	r27, 0x01	; 1
    245c:	08 95       	ret
    245e:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__fp_zero>
    2462:	67 2f       	mov	r22, r23
    2464:	78 2f       	mov	r23, r24
    2466:	88 27       	eor	r24, r24
    2468:	b8 5f       	subi	r27, 0xF8	; 248
    246a:	39 f0       	breq	.+14     	; 0x247a <__fixunssfsi+0x4c>
    246c:	b9 3f       	cpi	r27, 0xF9	; 249
    246e:	cc f3       	brlt	.-14     	; 0x2462 <__fixunssfsi+0x34>
    2470:	86 95       	lsr	r24
    2472:	77 95       	ror	r23
    2474:	67 95       	ror	r22
    2476:	b3 95       	inc	r27
    2478:	d9 f7       	brne	.-10     	; 0x2470 <__fixunssfsi+0x42>
    247a:	3e f4       	brtc	.+14     	; 0x248a <__fixunssfsi+0x5c>
    247c:	90 95       	com	r25
    247e:	80 95       	com	r24
    2480:	70 95       	com	r23
    2482:	61 95       	neg	r22
    2484:	7f 4f       	sbci	r23, 0xFF	; 255
    2486:	8f 4f       	sbci	r24, 0xFF	; 255
    2488:	9f 4f       	sbci	r25, 0xFF	; 255
    248a:	08 95       	ret

0000248c <__floatunsisf>:
    248c:	e8 94       	clt
    248e:	09 c0       	rjmp	.+18     	; 0x24a2 <__floatsisf+0x12>

00002490 <__floatsisf>:
    2490:	97 fb       	bst	r25, 7
    2492:	3e f4       	brtc	.+14     	; 0x24a2 <__floatsisf+0x12>
    2494:	90 95       	com	r25
    2496:	80 95       	com	r24
    2498:	70 95       	com	r23
    249a:	61 95       	neg	r22
    249c:	7f 4f       	sbci	r23, 0xFF	; 255
    249e:	8f 4f       	sbci	r24, 0xFF	; 255
    24a0:	9f 4f       	sbci	r25, 0xFF	; 255
    24a2:	99 23       	and	r25, r25
    24a4:	a9 f0       	breq	.+42     	; 0x24d0 <__floatsisf+0x40>
    24a6:	f9 2f       	mov	r31, r25
    24a8:	96 e9       	ldi	r25, 0x96	; 150
    24aa:	bb 27       	eor	r27, r27
    24ac:	93 95       	inc	r25
    24ae:	f6 95       	lsr	r31
    24b0:	87 95       	ror	r24
    24b2:	77 95       	ror	r23
    24b4:	67 95       	ror	r22
    24b6:	b7 95       	ror	r27
    24b8:	f1 11       	cpse	r31, r1
    24ba:	f8 cf       	rjmp	.-16     	; 0x24ac <__floatsisf+0x1c>
    24bc:	fa f4       	brpl	.+62     	; 0x24fc <__floatsisf+0x6c>
    24be:	bb 0f       	add	r27, r27
    24c0:	11 f4       	brne	.+4      	; 0x24c6 <__floatsisf+0x36>
    24c2:	60 ff       	sbrs	r22, 0
    24c4:	1b c0       	rjmp	.+54     	; 0x24fc <__floatsisf+0x6c>
    24c6:	6f 5f       	subi	r22, 0xFF	; 255
    24c8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ca:	8f 4f       	sbci	r24, 0xFF	; 255
    24cc:	9f 4f       	sbci	r25, 0xFF	; 255
    24ce:	16 c0       	rjmp	.+44     	; 0x24fc <__floatsisf+0x6c>
    24d0:	88 23       	and	r24, r24
    24d2:	11 f0       	breq	.+4      	; 0x24d8 <__floatsisf+0x48>
    24d4:	96 e9       	ldi	r25, 0x96	; 150
    24d6:	11 c0       	rjmp	.+34     	; 0x24fa <__floatsisf+0x6a>
    24d8:	77 23       	and	r23, r23
    24da:	21 f0       	breq	.+8      	; 0x24e4 <__floatsisf+0x54>
    24dc:	9e e8       	ldi	r25, 0x8E	; 142
    24de:	87 2f       	mov	r24, r23
    24e0:	76 2f       	mov	r23, r22
    24e2:	05 c0       	rjmp	.+10     	; 0x24ee <__floatsisf+0x5e>
    24e4:	66 23       	and	r22, r22
    24e6:	71 f0       	breq	.+28     	; 0x2504 <__floatsisf+0x74>
    24e8:	96 e8       	ldi	r25, 0x86	; 134
    24ea:	86 2f       	mov	r24, r22
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	2a f0       	brmi	.+10     	; 0x24fc <__floatsisf+0x6c>
    24f2:	9a 95       	dec	r25
    24f4:	66 0f       	add	r22, r22
    24f6:	77 1f       	adc	r23, r23
    24f8:	88 1f       	adc	r24, r24
    24fa:	da f7       	brpl	.-10     	; 0x24f2 <__floatsisf+0x62>
    24fc:	88 0f       	add	r24, r24
    24fe:	96 95       	lsr	r25
    2500:	87 95       	ror	r24
    2502:	97 f9       	bld	r25, 7
    2504:	08 95       	ret

00002506 <__fp_inf>:
    2506:	97 f9       	bld	r25, 7
    2508:	9f 67       	ori	r25, 0x7F	; 127
    250a:	80 e8       	ldi	r24, 0x80	; 128
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	08 95       	ret

00002512 <__fp_nan>:
    2512:	9f ef       	ldi	r25, 0xFF	; 255
    2514:	80 ec       	ldi	r24, 0xC0	; 192
    2516:	08 95       	ret

00002518 <__fp_pscA>:
    2518:	00 24       	eor	r0, r0
    251a:	0a 94       	dec	r0
    251c:	16 16       	cp	r1, r22
    251e:	17 06       	cpc	r1, r23
    2520:	18 06       	cpc	r1, r24
    2522:	09 06       	cpc	r0, r25
    2524:	08 95       	ret

00002526 <__fp_pscB>:
    2526:	00 24       	eor	r0, r0
    2528:	0a 94       	dec	r0
    252a:	12 16       	cp	r1, r18
    252c:	13 06       	cpc	r1, r19
    252e:	14 06       	cpc	r1, r20
    2530:	05 06       	cpc	r0, r21
    2532:	08 95       	ret

00002534 <__fp_round>:
    2534:	09 2e       	mov	r0, r25
    2536:	03 94       	inc	r0
    2538:	00 0c       	add	r0, r0
    253a:	11 f4       	brne	.+4      	; 0x2540 <__fp_round+0xc>
    253c:	88 23       	and	r24, r24
    253e:	52 f0       	brmi	.+20     	; 0x2554 <__fp_round+0x20>
    2540:	bb 0f       	add	r27, r27
    2542:	40 f4       	brcc	.+16     	; 0x2554 <__fp_round+0x20>
    2544:	bf 2b       	or	r27, r31
    2546:	11 f4       	brne	.+4      	; 0x254c <__fp_round+0x18>
    2548:	60 ff       	sbrs	r22, 0
    254a:	04 c0       	rjmp	.+8      	; 0x2554 <__fp_round+0x20>
    254c:	6f 5f       	subi	r22, 0xFF	; 255
    254e:	7f 4f       	sbci	r23, 0xFF	; 255
    2550:	8f 4f       	sbci	r24, 0xFF	; 255
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	08 95       	ret

00002556 <__fp_split3>:
    2556:	57 fd       	sbrc	r21, 7
    2558:	90 58       	subi	r25, 0x80	; 128
    255a:	44 0f       	add	r20, r20
    255c:	55 1f       	adc	r21, r21
    255e:	59 f0       	breq	.+22     	; 0x2576 <__fp_splitA+0x10>
    2560:	5f 3f       	cpi	r21, 0xFF	; 255
    2562:	71 f0       	breq	.+28     	; 0x2580 <__fp_splitA+0x1a>
    2564:	47 95       	ror	r20

00002566 <__fp_splitA>:
    2566:	88 0f       	add	r24, r24
    2568:	97 fb       	bst	r25, 7
    256a:	99 1f       	adc	r25, r25
    256c:	61 f0       	breq	.+24     	; 0x2586 <__fp_splitA+0x20>
    256e:	9f 3f       	cpi	r25, 0xFF	; 255
    2570:	79 f0       	breq	.+30     	; 0x2590 <__fp_splitA+0x2a>
    2572:	87 95       	ror	r24
    2574:	08 95       	ret
    2576:	12 16       	cp	r1, r18
    2578:	13 06       	cpc	r1, r19
    257a:	14 06       	cpc	r1, r20
    257c:	55 1f       	adc	r21, r21
    257e:	f2 cf       	rjmp	.-28     	; 0x2564 <__fp_split3+0xe>
    2580:	46 95       	lsr	r20
    2582:	f1 df       	rcall	.-30     	; 0x2566 <__fp_splitA>
    2584:	08 c0       	rjmp	.+16     	; 0x2596 <__fp_splitA+0x30>
    2586:	16 16       	cp	r1, r22
    2588:	17 06       	cpc	r1, r23
    258a:	18 06       	cpc	r1, r24
    258c:	99 1f       	adc	r25, r25
    258e:	f1 cf       	rjmp	.-30     	; 0x2572 <__fp_splitA+0xc>
    2590:	86 95       	lsr	r24
    2592:	71 05       	cpc	r23, r1
    2594:	61 05       	cpc	r22, r1
    2596:	08 94       	sec
    2598:	08 95       	ret

0000259a <__fp_zero>:
    259a:	e8 94       	clt

0000259c <__fp_szero>:
    259c:	bb 27       	eor	r27, r27
    259e:	66 27       	eor	r22, r22
    25a0:	77 27       	eor	r23, r23
    25a2:	cb 01       	movw	r24, r22
    25a4:	97 f9       	bld	r25, 7
    25a6:	08 95       	ret

000025a8 <__mulsf3>:
    25a8:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__mulsf3x>
    25ac:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__fp_round>
    25b0:	0e 94 8c 12 	call	0x2518	; 0x2518 <__fp_pscA>
    25b4:	38 f0       	brcs	.+14     	; 0x25c4 <__mulsf3+0x1c>
    25b6:	0e 94 93 12 	call	0x2526	; 0x2526 <__fp_pscB>
    25ba:	20 f0       	brcs	.+8      	; 0x25c4 <__mulsf3+0x1c>
    25bc:	95 23       	and	r25, r21
    25be:	11 f0       	breq	.+4      	; 0x25c4 <__mulsf3+0x1c>
    25c0:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__fp_inf>
    25c4:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__fp_nan>
    25c8:	11 24       	eor	r1, r1
    25ca:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__fp_szero>

000025ce <__mulsf3x>:
    25ce:	0e 94 ab 12 	call	0x2556	; 0x2556 <__fp_split3>
    25d2:	70 f3       	brcs	.-36     	; 0x25b0 <__mulsf3+0x8>

000025d4 <__mulsf3_pse>:
    25d4:	95 9f       	mul	r25, r21
    25d6:	c1 f3       	breq	.-16     	; 0x25c8 <__mulsf3+0x20>
    25d8:	95 0f       	add	r25, r21
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	55 1f       	adc	r21, r21
    25de:	62 9f       	mul	r22, r18
    25e0:	f0 01       	movw	r30, r0
    25e2:	72 9f       	mul	r23, r18
    25e4:	bb 27       	eor	r27, r27
    25e6:	f0 0d       	add	r31, r0
    25e8:	b1 1d       	adc	r27, r1
    25ea:	63 9f       	mul	r22, r19
    25ec:	aa 27       	eor	r26, r26
    25ee:	f0 0d       	add	r31, r0
    25f0:	b1 1d       	adc	r27, r1
    25f2:	aa 1f       	adc	r26, r26
    25f4:	64 9f       	mul	r22, r20
    25f6:	66 27       	eor	r22, r22
    25f8:	b0 0d       	add	r27, r0
    25fa:	a1 1d       	adc	r26, r1
    25fc:	66 1f       	adc	r22, r22
    25fe:	82 9f       	mul	r24, r18
    2600:	22 27       	eor	r18, r18
    2602:	b0 0d       	add	r27, r0
    2604:	a1 1d       	adc	r26, r1
    2606:	62 1f       	adc	r22, r18
    2608:	73 9f       	mul	r23, r19
    260a:	b0 0d       	add	r27, r0
    260c:	a1 1d       	adc	r26, r1
    260e:	62 1f       	adc	r22, r18
    2610:	83 9f       	mul	r24, r19
    2612:	a0 0d       	add	r26, r0
    2614:	61 1d       	adc	r22, r1
    2616:	22 1f       	adc	r18, r18
    2618:	74 9f       	mul	r23, r20
    261a:	33 27       	eor	r19, r19
    261c:	a0 0d       	add	r26, r0
    261e:	61 1d       	adc	r22, r1
    2620:	23 1f       	adc	r18, r19
    2622:	84 9f       	mul	r24, r20
    2624:	60 0d       	add	r22, r0
    2626:	21 1d       	adc	r18, r1
    2628:	82 2f       	mov	r24, r18
    262a:	76 2f       	mov	r23, r22
    262c:	6a 2f       	mov	r22, r26
    262e:	11 24       	eor	r1, r1
    2630:	9f 57       	subi	r25, 0x7F	; 127
    2632:	50 40       	sbci	r21, 0x00	; 0
    2634:	9a f0       	brmi	.+38     	; 0x265c <__mulsf3_pse+0x88>
    2636:	f1 f0       	breq	.+60     	; 0x2674 <__mulsf3_pse+0xa0>
    2638:	88 23       	and	r24, r24
    263a:	4a f0       	brmi	.+18     	; 0x264e <__mulsf3_pse+0x7a>
    263c:	ee 0f       	add	r30, r30
    263e:	ff 1f       	adc	r31, r31
    2640:	bb 1f       	adc	r27, r27
    2642:	66 1f       	adc	r22, r22
    2644:	77 1f       	adc	r23, r23
    2646:	88 1f       	adc	r24, r24
    2648:	91 50       	subi	r25, 0x01	; 1
    264a:	50 40       	sbci	r21, 0x00	; 0
    264c:	a9 f7       	brne	.-22     	; 0x2638 <__mulsf3_pse+0x64>
    264e:	9e 3f       	cpi	r25, 0xFE	; 254
    2650:	51 05       	cpc	r21, r1
    2652:	80 f0       	brcs	.+32     	; 0x2674 <__mulsf3_pse+0xa0>
    2654:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__fp_inf>
    2658:	0c 94 ce 12 	jmp	0x259c	; 0x259c <__fp_szero>
    265c:	5f 3f       	cpi	r21, 0xFF	; 255
    265e:	e4 f3       	brlt	.-8      	; 0x2658 <__mulsf3_pse+0x84>
    2660:	98 3e       	cpi	r25, 0xE8	; 232
    2662:	d4 f3       	brlt	.-12     	; 0x2658 <__mulsf3_pse+0x84>
    2664:	86 95       	lsr	r24
    2666:	77 95       	ror	r23
    2668:	67 95       	ror	r22
    266a:	b7 95       	ror	r27
    266c:	f7 95       	ror	r31
    266e:	e7 95       	ror	r30
    2670:	9f 5f       	subi	r25, 0xFF	; 255
    2672:	c1 f7       	brne	.-16     	; 0x2664 <__mulsf3_pse+0x90>
    2674:	fe 2b       	or	r31, r30
    2676:	88 0f       	add	r24, r24
    2678:	91 1d       	adc	r25, r1
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
    267e:	97 f9       	bld	r25, 7
    2680:	08 95       	ret

00002682 <__udivmodsi4>:
    2682:	a1 e2       	ldi	r26, 0x21	; 33
    2684:	1a 2e       	mov	r1, r26
    2686:	aa 1b       	sub	r26, r26
    2688:	bb 1b       	sub	r27, r27
    268a:	fd 01       	movw	r30, r26
    268c:	0d c0       	rjmp	.+26     	; 0x26a8 <__udivmodsi4_ep>

0000268e <__udivmodsi4_loop>:
    268e:	aa 1f       	adc	r26, r26
    2690:	bb 1f       	adc	r27, r27
    2692:	ee 1f       	adc	r30, r30
    2694:	ff 1f       	adc	r31, r31
    2696:	a2 17       	cp	r26, r18
    2698:	b3 07       	cpc	r27, r19
    269a:	e4 07       	cpc	r30, r20
    269c:	f5 07       	cpc	r31, r21
    269e:	20 f0       	brcs	.+8      	; 0x26a8 <__udivmodsi4_ep>
    26a0:	a2 1b       	sub	r26, r18
    26a2:	b3 0b       	sbc	r27, r19
    26a4:	e4 0b       	sbc	r30, r20
    26a6:	f5 0b       	sbc	r31, r21

000026a8 <__udivmodsi4_ep>:
    26a8:	66 1f       	adc	r22, r22
    26aa:	77 1f       	adc	r23, r23
    26ac:	88 1f       	adc	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	1a 94       	dec	r1
    26b2:	69 f7       	brne	.-38     	; 0x268e <__udivmodsi4_loop>
    26b4:	60 95       	com	r22
    26b6:	70 95       	com	r23
    26b8:	80 95       	com	r24
    26ba:	90 95       	com	r25
    26bc:	9b 01       	movw	r18, r22
    26be:	ac 01       	movw	r20, r24
    26c0:	bd 01       	movw	r22, r26
    26c2:	cf 01       	movw	r24, r30
    26c4:	08 95       	ret

000026c6 <__divmodsi4>:
    26c6:	05 2e       	mov	r0, r21
    26c8:	97 fb       	bst	r25, 7
    26ca:	1e f4       	brtc	.+6      	; 0x26d2 <__divmodsi4+0xc>
    26cc:	00 94       	com	r0
    26ce:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__negsi2>
    26d2:	57 fd       	sbrc	r21, 7
    26d4:	07 d0       	rcall	.+14     	; 0x26e4 <__divmodsi4_neg2>
    26d6:	0e 94 41 13 	call	0x2682	; 0x2682 <__udivmodsi4>
    26da:	07 fc       	sbrc	r0, 7
    26dc:	03 d0       	rcall	.+6      	; 0x26e4 <__divmodsi4_neg2>
    26de:	4e f4       	brtc	.+18     	; 0x26f2 <__divmodsi4_exit>
    26e0:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__negsi2>

000026e4 <__divmodsi4_neg2>:
    26e4:	50 95       	com	r21
    26e6:	40 95       	com	r20
    26e8:	30 95       	com	r19
    26ea:	21 95       	neg	r18
    26ec:	3f 4f       	sbci	r19, 0xFF	; 255
    26ee:	4f 4f       	sbci	r20, 0xFF	; 255
    26f0:	5f 4f       	sbci	r21, 0xFF	; 255

000026f2 <__divmodsi4_exit>:
    26f2:	08 95       	ret

000026f4 <__negsi2>:
    26f4:	90 95       	com	r25
    26f6:	80 95       	com	r24
    26f8:	70 95       	com	r23
    26fa:	61 95       	neg	r22
    26fc:	7f 4f       	sbci	r23, 0xFF	; 255
    26fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	08 95       	ret

00002704 <do_rand>:
    2704:	8f 92       	push	r8
    2706:	9f 92       	push	r9
    2708:	af 92       	push	r10
    270a:	bf 92       	push	r11
    270c:	cf 92       	push	r12
    270e:	df 92       	push	r13
    2710:	ef 92       	push	r14
    2712:	ff 92       	push	r15
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	ec 01       	movw	r28, r24
    271a:	68 81       	ld	r22, Y
    271c:	79 81       	ldd	r23, Y+1	; 0x01
    271e:	8a 81       	ldd	r24, Y+2	; 0x02
    2720:	9b 81       	ldd	r25, Y+3	; 0x03
    2722:	61 15       	cp	r22, r1
    2724:	71 05       	cpc	r23, r1
    2726:	81 05       	cpc	r24, r1
    2728:	91 05       	cpc	r25, r1
    272a:	21 f4       	brne	.+8      	; 0x2734 <do_rand+0x30>
    272c:	64 e2       	ldi	r22, 0x24	; 36
    272e:	79 ed       	ldi	r23, 0xD9	; 217
    2730:	8b e5       	ldi	r24, 0x5B	; 91
    2732:	97 e0       	ldi	r25, 0x07	; 7
    2734:	2d e1       	ldi	r18, 0x1D	; 29
    2736:	33 ef       	ldi	r19, 0xF3	; 243
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__divmodsi4>
    2740:	49 01       	movw	r8, r18
    2742:	5a 01       	movw	r10, r20
    2744:	9b 01       	movw	r18, r22
    2746:	ac 01       	movw	r20, r24
    2748:	a7 ea       	ldi	r26, 0xA7	; 167
    274a:	b1 e4       	ldi	r27, 0x41	; 65
    274c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__muluhisi3>
    2750:	6b 01       	movw	r12, r22
    2752:	7c 01       	movw	r14, r24
    2754:	ac ee       	ldi	r26, 0xEC	; 236
    2756:	b4 ef       	ldi	r27, 0xF4	; 244
    2758:	a5 01       	movw	r20, r10
    275a:	94 01       	movw	r18, r8
    275c:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__mulohisi3>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	8c 0d       	add	r24, r12
    2766:	9d 1d       	adc	r25, r13
    2768:	ae 1d       	adc	r26, r14
    276a:	bf 1d       	adc	r27, r15
    276c:	b7 ff       	sbrs	r27, 7
    276e:	03 c0       	rjmp	.+6      	; 0x2776 <do_rand+0x72>
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	a1 09       	sbc	r26, r1
    2774:	b0 48       	sbci	r27, 0x80	; 128
    2776:	88 83       	st	Y, r24
    2778:	99 83       	std	Y+1, r25	; 0x01
    277a:	aa 83       	std	Y+2, r26	; 0x02
    277c:	bb 83       	std	Y+3, r27	; 0x03
    277e:	9f 77       	andi	r25, 0x7F	; 127
    2780:	df 91       	pop	r29
    2782:	cf 91       	pop	r28
    2784:	ff 90       	pop	r15
    2786:	ef 90       	pop	r14
    2788:	df 90       	pop	r13
    278a:	cf 90       	pop	r12
    278c:	bf 90       	pop	r11
    278e:	af 90       	pop	r10
    2790:	9f 90       	pop	r9
    2792:	8f 90       	pop	r8
    2794:	08 95       	ret

00002796 <rand_r>:
    2796:	0e 94 82 13 	call	0x2704	; 0x2704 <do_rand>
    279a:	08 95       	ret

0000279c <rand>:
    279c:	80 e0       	ldi	r24, 0x00	; 0
    279e:	91 e0       	ldi	r25, 0x01	; 1
    27a0:	0e 94 82 13 	call	0x2704	; 0x2704 <do_rand>
    27a4:	08 95       	ret

000027a6 <srand>:
    27a6:	a0 e0       	ldi	r26, 0x00	; 0
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    27ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    27b2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    27b6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    27ba:	08 95       	ret

000027bc <random_r>:
    27bc:	8f 92       	push	r8
    27be:	9f 92       	push	r9
    27c0:	af 92       	push	r10
    27c2:	bf 92       	push	r11
    27c4:	cf 92       	push	r12
    27c6:	df 92       	push	r13
    27c8:	ef 92       	push	r14
    27ca:	ff 92       	push	r15
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	ec 01       	movw	r28, r24
    27d2:	68 81       	ld	r22, Y
    27d4:	79 81       	ldd	r23, Y+1	; 0x01
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	61 15       	cp	r22, r1
    27dc:	71 05       	cpc	r23, r1
    27de:	81 05       	cpc	r24, r1
    27e0:	91 05       	cpc	r25, r1
    27e2:	21 f4       	brne	.+8      	; 0x27ec <random_r+0x30>
    27e4:	64 e2       	ldi	r22, 0x24	; 36
    27e6:	79 ed       	ldi	r23, 0xD9	; 217
    27e8:	8b e5       	ldi	r24, 0x5B	; 91
    27ea:	97 e0       	ldi	r25, 0x07	; 7
    27ec:	2d e1       	ldi	r18, 0x1D	; 29
    27ee:	33 ef       	ldi	r19, 0xF3	; 243
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	50 e0       	ldi	r21, 0x00	; 0
    27f4:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__divmodsi4>
    27f8:	49 01       	movw	r8, r18
    27fa:	5a 01       	movw	r10, r20
    27fc:	9b 01       	movw	r18, r22
    27fe:	ac 01       	movw	r20, r24
    2800:	a7 ea       	ldi	r26, 0xA7	; 167
    2802:	b1 e4       	ldi	r27, 0x41	; 65
    2804:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__muluhisi3>
    2808:	6b 01       	movw	r12, r22
    280a:	7c 01       	movw	r14, r24
    280c:	ac ee       	ldi	r26, 0xEC	; 236
    280e:	b4 ef       	ldi	r27, 0xF4	; 244
    2810:	a5 01       	movw	r20, r10
    2812:	94 01       	movw	r18, r8
    2814:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__mulohisi3>
    2818:	dc 01       	movw	r26, r24
    281a:	cb 01       	movw	r24, r22
    281c:	8c 0d       	add	r24, r12
    281e:	9d 1d       	adc	r25, r13
    2820:	ae 1d       	adc	r26, r14
    2822:	bf 1d       	adc	r27, r15
    2824:	b7 ff       	sbrs	r27, 7
    2826:	03 c0       	rjmp	.+6      	; 0x282e <random_r+0x72>
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	a1 09       	sbc	r26, r1
    282c:	b0 48       	sbci	r27, 0x80	; 128
    282e:	88 83       	st	Y, r24
    2830:	99 83       	std	Y+1, r25	; 0x01
    2832:	aa 83       	std	Y+2, r26	; 0x02
    2834:	bb 83       	std	Y+3, r27	; 0x03
    2836:	bc 01       	movw	r22, r24
    2838:	cd 01       	movw	r24, r26
    283a:	9f 77       	andi	r25, 0x7F	; 127
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	ff 90       	pop	r15
    2842:	ef 90       	pop	r14
    2844:	df 90       	pop	r13
    2846:	cf 90       	pop	r12
    2848:	bf 90       	pop	r11
    284a:	af 90       	pop	r10
    284c:	9f 90       	pop	r9
    284e:	8f 90       	pop	r8
    2850:	08 95       	ret

00002852 <random>:
    2852:	8f 92       	push	r8
    2854:	9f 92       	push	r9
    2856:	af 92       	push	r10
    2858:	bf 92       	push	r11
    285a:	cf 92       	push	r12
    285c:	df 92       	push	r13
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2866:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    286a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    286e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    2872:	61 15       	cp	r22, r1
    2874:	71 05       	cpc	r23, r1
    2876:	81 05       	cpc	r24, r1
    2878:	91 05       	cpc	r25, r1
    287a:	21 f4       	brne	.+8      	; 0x2884 <random+0x32>
    287c:	64 e2       	ldi	r22, 0x24	; 36
    287e:	79 ed       	ldi	r23, 0xD9	; 217
    2880:	8b e5       	ldi	r24, 0x5B	; 91
    2882:	97 e0       	ldi	r25, 0x07	; 7
    2884:	2d e1       	ldi	r18, 0x1D	; 29
    2886:	33 ef       	ldi	r19, 0xF3	; 243
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	50 e0       	ldi	r21, 0x00	; 0
    288c:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__divmodsi4>
    2890:	49 01       	movw	r8, r18
    2892:	5a 01       	movw	r10, r20
    2894:	9b 01       	movw	r18, r22
    2896:	ac 01       	movw	r20, r24
    2898:	a7 ea       	ldi	r26, 0xA7	; 167
    289a:	b1 e4       	ldi	r27, 0x41	; 65
    289c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__muluhisi3>
    28a0:	6b 01       	movw	r12, r22
    28a2:	7c 01       	movw	r14, r24
    28a4:	ac ee       	ldi	r26, 0xEC	; 236
    28a6:	b4 ef       	ldi	r27, 0xF4	; 244
    28a8:	a5 01       	movw	r20, r10
    28aa:	94 01       	movw	r18, r8
    28ac:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <__mulohisi3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	8c 0d       	add	r24, r12
    28b6:	9d 1d       	adc	r25, r13
    28b8:	ae 1d       	adc	r26, r14
    28ba:	bf 1d       	adc	r27, r15
    28bc:	b7 ff       	sbrs	r27, 7
    28be:	03 c0       	rjmp	.+6      	; 0x28c6 <random+0x74>
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	a1 09       	sbc	r26, r1
    28c4:	b0 48       	sbci	r27, 0x80	; 128
    28c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    28ca:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    28ce:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    28d2:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    28d6:	bc 01       	movw	r22, r24
    28d8:	cd 01       	movw	r24, r26
    28da:	9f 77       	andi	r25, 0x7F	; 127
    28dc:	ff 90       	pop	r15
    28de:	ef 90       	pop	r14
    28e0:	df 90       	pop	r13
    28e2:	cf 90       	pop	r12
    28e4:	bf 90       	pop	r11
    28e6:	af 90       	pop	r10
    28e8:	9f 90       	pop	r9
    28ea:	8f 90       	pop	r8
    28ec:	08 95       	ret

000028ee <srandom>:
    28ee:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    28f2:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    28f6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    28fa:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    28fe:	08 95       	ret

00002900 <fgetc>:
    2900:	cf 93       	push	r28
    2902:	df 93       	push	r29
    2904:	ec 01       	movw	r28, r24
    2906:	2b 81       	ldd	r18, Y+3	; 0x03
    2908:	20 ff       	sbrs	r18, 0
    290a:	33 c0       	rjmp	.+102    	; 0x2972 <fgetc+0x72>
    290c:	26 ff       	sbrs	r18, 6
    290e:	0a c0       	rjmp	.+20     	; 0x2924 <fgetc+0x24>
    2910:	2f 7b       	andi	r18, 0xBF	; 191
    2912:	2b 83       	std	Y+3, r18	; 0x03
    2914:	8e 81       	ldd	r24, Y+6	; 0x06
    2916:	9f 81       	ldd	r25, Y+7	; 0x07
    2918:	01 96       	adiw	r24, 0x01	; 1
    291a:	9f 83       	std	Y+7, r25	; 0x07
    291c:	8e 83       	std	Y+6, r24	; 0x06
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	29 c0       	rjmp	.+82     	; 0x2976 <fgetc+0x76>
    2924:	22 ff       	sbrs	r18, 2
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <fgetc+0x46>
    2928:	e8 81       	ld	r30, Y
    292a:	f9 81       	ldd	r31, Y+1	; 0x01
    292c:	80 81       	ld	r24, Z
    292e:	08 2e       	mov	r0, r24
    2930:	00 0c       	add	r0, r0
    2932:	99 0b       	sbc	r25, r25
    2934:	00 97       	sbiw	r24, 0x00	; 0
    2936:	19 f4       	brne	.+6      	; 0x293e <fgetc+0x3e>
    2938:	20 62       	ori	r18, 0x20	; 32
    293a:	2b 83       	std	Y+3, r18	; 0x03
    293c:	1a c0       	rjmp	.+52     	; 0x2972 <fgetc+0x72>
    293e:	31 96       	adiw	r30, 0x01	; 1
    2940:	f9 83       	std	Y+1, r31	; 0x01
    2942:	e8 83       	st	Y, r30
    2944:	0e c0       	rjmp	.+28     	; 0x2962 <fgetc+0x62>
    2946:	ea 85       	ldd	r30, Y+10	; 0x0a
    2948:	fb 85       	ldd	r31, Y+11	; 0x0b
    294a:	09 95       	icall
    294c:	97 ff       	sbrs	r25, 7
    294e:	09 c0       	rjmp	.+18     	; 0x2962 <fgetc+0x62>
    2950:	2b 81       	ldd	r18, Y+3	; 0x03
    2952:	01 96       	adiw	r24, 0x01	; 1
    2954:	11 f0       	breq	.+4      	; 0x295a <fgetc+0x5a>
    2956:	80 e2       	ldi	r24, 0x20	; 32
    2958:	01 c0       	rjmp	.+2      	; 0x295c <fgetc+0x5c>
    295a:	80 e1       	ldi	r24, 0x10	; 16
    295c:	82 2b       	or	r24, r18
    295e:	8b 83       	std	Y+3, r24	; 0x03
    2960:	08 c0       	rjmp	.+16     	; 0x2972 <fgetc+0x72>
    2962:	2e 81       	ldd	r18, Y+6	; 0x06
    2964:	3f 81       	ldd	r19, Y+7	; 0x07
    2966:	2f 5f       	subi	r18, 0xFF	; 255
    2968:	3f 4f       	sbci	r19, 0xFF	; 255
    296a:	3f 83       	std	Y+7, r19	; 0x07
    296c:	2e 83       	std	Y+6, r18	; 0x06
    296e:	99 27       	eor	r25, r25
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <fgetc+0x76>
    2972:	8f ef       	ldi	r24, 0xFF	; 255
    2974:	9f ef       	ldi	r25, 0xFF	; 255
    2976:	df 91       	pop	r29
    2978:	cf 91       	pop	r28
    297a:	08 95       	ret

0000297c <printf>:
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e4 ec       	ldi	r30, 0xC4	; 196
    2982:	f4 e1       	ldi	r31, 0x14	; 20
    2984:	0c 94 f8 17 	jmp	0x2ff0	; 0x2ff0 <__prologue_saves__+0x20>
    2988:	ae 01       	movw	r20, r28
    298a:	4b 5f       	subi	r20, 0xFB	; 251
    298c:	5f 4f       	sbci	r21, 0xFF	; 255
    298e:	fa 01       	movw	r30, r20
    2990:	61 91       	ld	r22, Z+
    2992:	71 91       	ld	r23, Z+
    2994:	af 01       	movw	r20, r30
    2996:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <__iob+0x2>
    299a:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <__iob+0x3>
    299e:	0e 94 01 15 	call	0x2a02	; 0x2a02 <vfprintf>
    29a2:	e2 e0       	ldi	r30, 0x02	; 2
    29a4:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__epilogue_restores__+0x20>

000029a8 <printf_P>:
    29a8:	a0 e0       	ldi	r26, 0x00	; 0
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ea ed       	ldi	r30, 0xDA	; 218
    29ae:	f4 e1       	ldi	r31, 0x14	; 20
    29b0:	0c 94 f6 17 	jmp	0x2fec	; 0x2fec <__prologue_saves__+0x1c>
    29b4:	ae 01       	movw	r20, r28
    29b6:	49 5f       	subi	r20, 0xF9	; 249
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	da 01       	movw	r26, r20
    29bc:	6d 91       	ld	r22, X+
    29be:	7d 91       	ld	r23, X+
    29c0:	ad 01       	movw	r20, r26
    29c2:	0c e9       	ldi	r16, 0x9C	; 156
    29c4:	13 e0       	ldi	r17, 0x03	; 3
    29c6:	f8 01       	movw	r30, r16
    29c8:	82 81       	ldd	r24, Z+2	; 0x02
    29ca:	93 81       	ldd	r25, Z+3	; 0x03
    29cc:	dc 01       	movw	r26, r24
    29ce:	13 96       	adiw	r26, 0x03	; 3
    29d0:	2c 91       	ld	r18, X
    29d2:	13 97       	sbiw	r26, 0x03	; 3
    29d4:	28 60       	ori	r18, 0x08	; 8
    29d6:	13 96       	adiw	r26, 0x03	; 3
    29d8:	2c 93       	st	X, r18
    29da:	0e 94 01 15 	call	0x2a02	; 0x2a02 <vfprintf>
    29de:	d8 01       	movw	r26, r16
    29e0:	12 96       	adiw	r26, 0x02	; 2
    29e2:	ed 91       	ld	r30, X+
    29e4:	fc 91       	ld	r31, X
    29e6:	13 97       	sbiw	r26, 0x03	; 3
    29e8:	23 81       	ldd	r18, Z+3	; 0x03
    29ea:	27 7f       	andi	r18, 0xF7	; 247
    29ec:	23 83       	std	Z+3, r18	; 0x03
    29ee:	e4 e0       	ldi	r30, 0x04	; 4
    29f0:	0c 94 12 18 	jmp	0x3024	; 0x3024 <__epilogue_restores__+0x1c>

000029f4 <putchar>:
    29f4:	60 91 9e 03 	lds	r22, 0x039E	; 0x80039e <__iob+0x2>
    29f8:	70 91 9f 03 	lds	r23, 0x039F	; 0x80039f <__iob+0x3>
    29fc:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2a00:	08 95       	ret

00002a02 <vfprintf>:
    2a02:	ab e0       	ldi	r26, 0x0B	; 11
    2a04:	b0 e0       	ldi	r27, 0x00	; 0
    2a06:	e7 e0       	ldi	r30, 0x07	; 7
    2a08:	f5 e1       	ldi	r31, 0x15	; 21
    2a0a:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__>
    2a0e:	6c 01       	movw	r12, r24
    2a10:	7b 01       	movw	r14, r22
    2a12:	8a 01       	movw	r16, r20
    2a14:	fc 01       	movw	r30, r24
    2a16:	17 82       	std	Z+7, r1	; 0x07
    2a18:	16 82       	std	Z+6, r1	; 0x06
    2a1a:	83 81       	ldd	r24, Z+3	; 0x03
    2a1c:	81 ff       	sbrs	r24, 1
    2a1e:	cc c1       	rjmp	.+920    	; 0x2db8 <vfprintf+0x3b6>
    2a20:	ce 01       	movw	r24, r28
    2a22:	01 96       	adiw	r24, 0x01	; 1
    2a24:	3c 01       	movw	r6, r24
    2a26:	f6 01       	movw	r30, r12
    2a28:	93 81       	ldd	r25, Z+3	; 0x03
    2a2a:	f7 01       	movw	r30, r14
    2a2c:	93 fd       	sbrc	r25, 3
    2a2e:	85 91       	lpm	r24, Z+
    2a30:	93 ff       	sbrs	r25, 3
    2a32:	81 91       	ld	r24, Z+
    2a34:	7f 01       	movw	r14, r30
    2a36:	88 23       	and	r24, r24
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <vfprintf+0x3a>
    2a3a:	ba c1       	rjmp	.+884    	; 0x2db0 <vfprintf+0x3ae>
    2a3c:	85 32       	cpi	r24, 0x25	; 37
    2a3e:	39 f4       	brne	.+14     	; 0x2a4e <vfprintf+0x4c>
    2a40:	93 fd       	sbrc	r25, 3
    2a42:	85 91       	lpm	r24, Z+
    2a44:	93 ff       	sbrs	r25, 3
    2a46:	81 91       	ld	r24, Z+
    2a48:	7f 01       	movw	r14, r30
    2a4a:	85 32       	cpi	r24, 0x25	; 37
    2a4c:	29 f4       	brne	.+10     	; 0x2a58 <vfprintf+0x56>
    2a4e:	b6 01       	movw	r22, r12
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2a56:	e7 cf       	rjmp	.-50     	; 0x2a26 <vfprintf+0x24>
    2a58:	91 2c       	mov	r9, r1
    2a5a:	21 2c       	mov	r2, r1
    2a5c:	31 2c       	mov	r3, r1
    2a5e:	ff e1       	ldi	r31, 0x1F	; 31
    2a60:	f3 15       	cp	r31, r3
    2a62:	d8 f0       	brcs	.+54     	; 0x2a9a <vfprintf+0x98>
    2a64:	8b 32       	cpi	r24, 0x2B	; 43
    2a66:	79 f0       	breq	.+30     	; 0x2a86 <vfprintf+0x84>
    2a68:	38 f4       	brcc	.+14     	; 0x2a78 <vfprintf+0x76>
    2a6a:	80 32       	cpi	r24, 0x20	; 32
    2a6c:	79 f0       	breq	.+30     	; 0x2a8c <vfprintf+0x8a>
    2a6e:	83 32       	cpi	r24, 0x23	; 35
    2a70:	a1 f4       	brne	.+40     	; 0x2a9a <vfprintf+0x98>
    2a72:	23 2d       	mov	r18, r3
    2a74:	20 61       	ori	r18, 0x10	; 16
    2a76:	1d c0       	rjmp	.+58     	; 0x2ab2 <vfprintf+0xb0>
    2a78:	8d 32       	cpi	r24, 0x2D	; 45
    2a7a:	61 f0       	breq	.+24     	; 0x2a94 <vfprintf+0x92>
    2a7c:	80 33       	cpi	r24, 0x30	; 48
    2a7e:	69 f4       	brne	.+26     	; 0x2a9a <vfprintf+0x98>
    2a80:	23 2d       	mov	r18, r3
    2a82:	21 60       	ori	r18, 0x01	; 1
    2a84:	16 c0       	rjmp	.+44     	; 0x2ab2 <vfprintf+0xb0>
    2a86:	83 2d       	mov	r24, r3
    2a88:	82 60       	ori	r24, 0x02	; 2
    2a8a:	38 2e       	mov	r3, r24
    2a8c:	e3 2d       	mov	r30, r3
    2a8e:	e4 60       	ori	r30, 0x04	; 4
    2a90:	3e 2e       	mov	r3, r30
    2a92:	2a c0       	rjmp	.+84     	; 0x2ae8 <vfprintf+0xe6>
    2a94:	f3 2d       	mov	r31, r3
    2a96:	f8 60       	ori	r31, 0x08	; 8
    2a98:	1d c0       	rjmp	.+58     	; 0x2ad4 <vfprintf+0xd2>
    2a9a:	37 fc       	sbrc	r3, 7
    2a9c:	2d c0       	rjmp	.+90     	; 0x2af8 <vfprintf+0xf6>
    2a9e:	20 ed       	ldi	r18, 0xD0	; 208
    2aa0:	28 0f       	add	r18, r24
    2aa2:	2a 30       	cpi	r18, 0x0A	; 10
    2aa4:	40 f0       	brcs	.+16     	; 0x2ab6 <vfprintf+0xb4>
    2aa6:	8e 32       	cpi	r24, 0x2E	; 46
    2aa8:	b9 f4       	brne	.+46     	; 0x2ad8 <vfprintf+0xd6>
    2aaa:	36 fc       	sbrc	r3, 6
    2aac:	81 c1       	rjmp	.+770    	; 0x2db0 <vfprintf+0x3ae>
    2aae:	23 2d       	mov	r18, r3
    2ab0:	20 64       	ori	r18, 0x40	; 64
    2ab2:	32 2e       	mov	r3, r18
    2ab4:	19 c0       	rjmp	.+50     	; 0x2ae8 <vfprintf+0xe6>
    2ab6:	36 fe       	sbrs	r3, 6
    2ab8:	06 c0       	rjmp	.+12     	; 0x2ac6 <vfprintf+0xc4>
    2aba:	8a e0       	ldi	r24, 0x0A	; 10
    2abc:	98 9e       	mul	r9, r24
    2abe:	20 0d       	add	r18, r0
    2ac0:	11 24       	eor	r1, r1
    2ac2:	92 2e       	mov	r9, r18
    2ac4:	11 c0       	rjmp	.+34     	; 0x2ae8 <vfprintf+0xe6>
    2ac6:	ea e0       	ldi	r30, 0x0A	; 10
    2ac8:	2e 9e       	mul	r2, r30
    2aca:	20 0d       	add	r18, r0
    2acc:	11 24       	eor	r1, r1
    2ace:	22 2e       	mov	r2, r18
    2ad0:	f3 2d       	mov	r31, r3
    2ad2:	f0 62       	ori	r31, 0x20	; 32
    2ad4:	3f 2e       	mov	r3, r31
    2ad6:	08 c0       	rjmp	.+16     	; 0x2ae8 <vfprintf+0xe6>
    2ad8:	8c 36       	cpi	r24, 0x6C	; 108
    2ada:	21 f4       	brne	.+8      	; 0x2ae4 <vfprintf+0xe2>
    2adc:	83 2d       	mov	r24, r3
    2ade:	80 68       	ori	r24, 0x80	; 128
    2ae0:	38 2e       	mov	r3, r24
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <vfprintf+0xe6>
    2ae4:	88 36       	cpi	r24, 0x68	; 104
    2ae6:	41 f4       	brne	.+16     	; 0x2af8 <vfprintf+0xf6>
    2ae8:	f7 01       	movw	r30, r14
    2aea:	93 fd       	sbrc	r25, 3
    2aec:	85 91       	lpm	r24, Z+
    2aee:	93 ff       	sbrs	r25, 3
    2af0:	81 91       	ld	r24, Z+
    2af2:	7f 01       	movw	r14, r30
    2af4:	81 11       	cpse	r24, r1
    2af6:	b3 cf       	rjmp	.-154    	; 0x2a5e <vfprintf+0x5c>
    2af8:	98 2f       	mov	r25, r24
    2afa:	9f 7d       	andi	r25, 0xDF	; 223
    2afc:	95 54       	subi	r25, 0x45	; 69
    2afe:	93 30       	cpi	r25, 0x03	; 3
    2b00:	28 f4       	brcc	.+10     	; 0x2b0c <vfprintf+0x10a>
    2b02:	0c 5f       	subi	r16, 0xFC	; 252
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	9f e3       	ldi	r25, 0x3F	; 63
    2b08:	99 83       	std	Y+1, r25	; 0x01
    2b0a:	0d c0       	rjmp	.+26     	; 0x2b26 <vfprintf+0x124>
    2b0c:	83 36       	cpi	r24, 0x63	; 99
    2b0e:	31 f0       	breq	.+12     	; 0x2b1c <vfprintf+0x11a>
    2b10:	83 37       	cpi	r24, 0x73	; 115
    2b12:	71 f0       	breq	.+28     	; 0x2b30 <vfprintf+0x12e>
    2b14:	83 35       	cpi	r24, 0x53	; 83
    2b16:	09 f0       	breq	.+2      	; 0x2b1a <vfprintf+0x118>
    2b18:	59 c0       	rjmp	.+178    	; 0x2bcc <vfprintf+0x1ca>
    2b1a:	21 c0       	rjmp	.+66     	; 0x2b5e <vfprintf+0x15c>
    2b1c:	f8 01       	movw	r30, r16
    2b1e:	80 81       	ld	r24, Z
    2b20:	89 83       	std	Y+1, r24	; 0x01
    2b22:	0e 5f       	subi	r16, 0xFE	; 254
    2b24:	1f 4f       	sbci	r17, 0xFF	; 255
    2b26:	88 24       	eor	r8, r8
    2b28:	83 94       	inc	r8
    2b2a:	91 2c       	mov	r9, r1
    2b2c:	53 01       	movw	r10, r6
    2b2e:	13 c0       	rjmp	.+38     	; 0x2b56 <vfprintf+0x154>
    2b30:	28 01       	movw	r4, r16
    2b32:	f2 e0       	ldi	r31, 0x02	; 2
    2b34:	4f 0e       	add	r4, r31
    2b36:	51 1c       	adc	r5, r1
    2b38:	f8 01       	movw	r30, r16
    2b3a:	a0 80       	ld	r10, Z
    2b3c:	b1 80       	ldd	r11, Z+1	; 0x01
    2b3e:	36 fe       	sbrs	r3, 6
    2b40:	03 c0       	rjmp	.+6      	; 0x2b48 <vfprintf+0x146>
    2b42:	69 2d       	mov	r22, r9
    2b44:	70 e0       	ldi	r23, 0x00	; 0
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <vfprintf+0x14a>
    2b48:	6f ef       	ldi	r22, 0xFF	; 255
    2b4a:	7f ef       	ldi	r23, 0xFF	; 255
    2b4c:	c5 01       	movw	r24, r10
    2b4e:	0e 94 ed 16 	call	0x2dda	; 0x2dda <strnlen>
    2b52:	4c 01       	movw	r8, r24
    2b54:	82 01       	movw	r16, r4
    2b56:	f3 2d       	mov	r31, r3
    2b58:	ff 77       	andi	r31, 0x7F	; 127
    2b5a:	3f 2e       	mov	r3, r31
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <vfprintf+0x188>
    2b5e:	28 01       	movw	r4, r16
    2b60:	22 e0       	ldi	r18, 0x02	; 2
    2b62:	42 0e       	add	r4, r18
    2b64:	51 1c       	adc	r5, r1
    2b66:	f8 01       	movw	r30, r16
    2b68:	a0 80       	ld	r10, Z
    2b6a:	b1 80       	ldd	r11, Z+1	; 0x01
    2b6c:	36 fe       	sbrs	r3, 6
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <vfprintf+0x174>
    2b70:	69 2d       	mov	r22, r9
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <vfprintf+0x178>
    2b76:	6f ef       	ldi	r22, 0xFF	; 255
    2b78:	7f ef       	ldi	r23, 0xFF	; 255
    2b7a:	c5 01       	movw	r24, r10
    2b7c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <strnlen_P>
    2b80:	4c 01       	movw	r8, r24
    2b82:	f3 2d       	mov	r31, r3
    2b84:	f0 68       	ori	r31, 0x80	; 128
    2b86:	3f 2e       	mov	r3, r31
    2b88:	82 01       	movw	r16, r4
    2b8a:	33 fc       	sbrc	r3, 3
    2b8c:	1b c0       	rjmp	.+54     	; 0x2bc4 <vfprintf+0x1c2>
    2b8e:	82 2d       	mov	r24, r2
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	88 16       	cp	r8, r24
    2b94:	99 06       	cpc	r9, r25
    2b96:	b0 f4       	brcc	.+44     	; 0x2bc4 <vfprintf+0x1c2>
    2b98:	b6 01       	movw	r22, r12
    2b9a:	80 e2       	ldi	r24, 0x20	; 32
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2ba2:	2a 94       	dec	r2
    2ba4:	f4 cf       	rjmp	.-24     	; 0x2b8e <vfprintf+0x18c>
    2ba6:	f5 01       	movw	r30, r10
    2ba8:	37 fc       	sbrc	r3, 7
    2baa:	85 91       	lpm	r24, Z+
    2bac:	37 fe       	sbrs	r3, 7
    2bae:	81 91       	ld	r24, Z+
    2bb0:	5f 01       	movw	r10, r30
    2bb2:	b6 01       	movw	r22, r12
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2bba:	21 10       	cpse	r2, r1
    2bbc:	2a 94       	dec	r2
    2bbe:	21 e0       	ldi	r18, 0x01	; 1
    2bc0:	82 1a       	sub	r8, r18
    2bc2:	91 08       	sbc	r9, r1
    2bc4:	81 14       	cp	r8, r1
    2bc6:	91 04       	cpc	r9, r1
    2bc8:	71 f7       	brne	.-36     	; 0x2ba6 <vfprintf+0x1a4>
    2bca:	e8 c0       	rjmp	.+464    	; 0x2d9c <vfprintf+0x39a>
    2bcc:	84 36       	cpi	r24, 0x64	; 100
    2bce:	11 f0       	breq	.+4      	; 0x2bd4 <vfprintf+0x1d2>
    2bd0:	89 36       	cpi	r24, 0x69	; 105
    2bd2:	41 f5       	brne	.+80     	; 0x2c24 <vfprintf+0x222>
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	37 fe       	sbrs	r3, 7
    2bd8:	07 c0       	rjmp	.+14     	; 0x2be8 <vfprintf+0x1e6>
    2bda:	60 81       	ld	r22, Z
    2bdc:	71 81       	ldd	r23, Z+1	; 0x01
    2bde:	82 81       	ldd	r24, Z+2	; 0x02
    2be0:	93 81       	ldd	r25, Z+3	; 0x03
    2be2:	0c 5f       	subi	r16, 0xFC	; 252
    2be4:	1f 4f       	sbci	r17, 0xFF	; 255
    2be6:	08 c0       	rjmp	.+16     	; 0x2bf8 <vfprintf+0x1f6>
    2be8:	60 81       	ld	r22, Z
    2bea:	71 81       	ldd	r23, Z+1	; 0x01
    2bec:	07 2e       	mov	r0, r23
    2bee:	00 0c       	add	r0, r0
    2bf0:	88 0b       	sbc	r24, r24
    2bf2:	99 0b       	sbc	r25, r25
    2bf4:	0e 5f       	subi	r16, 0xFE	; 254
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	f3 2d       	mov	r31, r3
    2bfa:	ff 76       	andi	r31, 0x6F	; 111
    2bfc:	3f 2e       	mov	r3, r31
    2bfe:	97 ff       	sbrs	r25, 7
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <vfprintf+0x212>
    2c02:	90 95       	com	r25
    2c04:	80 95       	com	r24
    2c06:	70 95       	com	r23
    2c08:	61 95       	neg	r22
    2c0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c0c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c10:	f0 68       	ori	r31, 0x80	; 128
    2c12:	3f 2e       	mov	r3, r31
    2c14:	2a e0       	ldi	r18, 0x0A	; 10
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	a3 01       	movw	r20, r6
    2c1a:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__ultoa_invert>
    2c1e:	88 2e       	mov	r8, r24
    2c20:	86 18       	sub	r8, r6
    2c22:	45 c0       	rjmp	.+138    	; 0x2cae <vfprintf+0x2ac>
    2c24:	85 37       	cpi	r24, 0x75	; 117
    2c26:	31 f4       	brne	.+12     	; 0x2c34 <vfprintf+0x232>
    2c28:	23 2d       	mov	r18, r3
    2c2a:	2f 7e       	andi	r18, 0xEF	; 239
    2c2c:	b2 2e       	mov	r11, r18
    2c2e:	2a e0       	ldi	r18, 0x0A	; 10
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	25 c0       	rjmp	.+74     	; 0x2c7e <vfprintf+0x27c>
    2c34:	93 2d       	mov	r25, r3
    2c36:	99 7f       	andi	r25, 0xF9	; 249
    2c38:	b9 2e       	mov	r11, r25
    2c3a:	8f 36       	cpi	r24, 0x6F	; 111
    2c3c:	c1 f0       	breq	.+48     	; 0x2c6e <vfprintf+0x26c>
    2c3e:	18 f4       	brcc	.+6      	; 0x2c46 <vfprintf+0x244>
    2c40:	88 35       	cpi	r24, 0x58	; 88
    2c42:	79 f0       	breq	.+30     	; 0x2c62 <vfprintf+0x260>
    2c44:	b5 c0       	rjmp	.+362    	; 0x2db0 <vfprintf+0x3ae>
    2c46:	80 37       	cpi	r24, 0x70	; 112
    2c48:	19 f0       	breq	.+6      	; 0x2c50 <vfprintf+0x24e>
    2c4a:	88 37       	cpi	r24, 0x78	; 120
    2c4c:	21 f0       	breq	.+8      	; 0x2c56 <vfprintf+0x254>
    2c4e:	b0 c0       	rjmp	.+352    	; 0x2db0 <vfprintf+0x3ae>
    2c50:	e9 2f       	mov	r30, r25
    2c52:	e0 61       	ori	r30, 0x10	; 16
    2c54:	be 2e       	mov	r11, r30
    2c56:	b4 fe       	sbrs	r11, 4
    2c58:	0d c0       	rjmp	.+26     	; 0x2c74 <vfprintf+0x272>
    2c5a:	fb 2d       	mov	r31, r11
    2c5c:	f4 60       	ori	r31, 0x04	; 4
    2c5e:	bf 2e       	mov	r11, r31
    2c60:	09 c0       	rjmp	.+18     	; 0x2c74 <vfprintf+0x272>
    2c62:	34 fe       	sbrs	r3, 4
    2c64:	0a c0       	rjmp	.+20     	; 0x2c7a <vfprintf+0x278>
    2c66:	29 2f       	mov	r18, r25
    2c68:	26 60       	ori	r18, 0x06	; 6
    2c6a:	b2 2e       	mov	r11, r18
    2c6c:	06 c0       	rjmp	.+12     	; 0x2c7a <vfprintf+0x278>
    2c6e:	28 e0       	ldi	r18, 0x08	; 8
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	05 c0       	rjmp	.+10     	; 0x2c7e <vfprintf+0x27c>
    2c74:	20 e1       	ldi	r18, 0x10	; 16
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <vfprintf+0x27c>
    2c7a:	20 e1       	ldi	r18, 0x10	; 16
    2c7c:	32 e0       	ldi	r19, 0x02	; 2
    2c7e:	f8 01       	movw	r30, r16
    2c80:	b7 fe       	sbrs	r11, 7
    2c82:	07 c0       	rjmp	.+14     	; 0x2c92 <vfprintf+0x290>
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	0c 5f       	subi	r16, 0xFC	; 252
    2c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x29c>
    2c92:	60 81       	ld	r22, Z
    2c94:	71 81       	ldd	r23, Z+1	; 0x01
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	0e 5f       	subi	r16, 0xFE	; 254
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	a3 01       	movw	r20, r6
    2ca0:	0e 94 34 17 	call	0x2e68	; 0x2e68 <__ultoa_invert>
    2ca4:	88 2e       	mov	r8, r24
    2ca6:	86 18       	sub	r8, r6
    2ca8:	fb 2d       	mov	r31, r11
    2caa:	ff 77       	andi	r31, 0x7F	; 127
    2cac:	3f 2e       	mov	r3, r31
    2cae:	36 fe       	sbrs	r3, 6
    2cb0:	0d c0       	rjmp	.+26     	; 0x2ccc <vfprintf+0x2ca>
    2cb2:	23 2d       	mov	r18, r3
    2cb4:	2e 7f       	andi	r18, 0xFE	; 254
    2cb6:	a2 2e       	mov	r10, r18
    2cb8:	89 14       	cp	r8, r9
    2cba:	58 f4       	brcc	.+22     	; 0x2cd2 <vfprintf+0x2d0>
    2cbc:	34 fe       	sbrs	r3, 4
    2cbe:	0b c0       	rjmp	.+22     	; 0x2cd6 <vfprintf+0x2d4>
    2cc0:	32 fc       	sbrc	r3, 2
    2cc2:	09 c0       	rjmp	.+18     	; 0x2cd6 <vfprintf+0x2d4>
    2cc4:	83 2d       	mov	r24, r3
    2cc6:	8e 7e       	andi	r24, 0xEE	; 238
    2cc8:	a8 2e       	mov	r10, r24
    2cca:	05 c0       	rjmp	.+10     	; 0x2cd6 <vfprintf+0x2d4>
    2ccc:	b8 2c       	mov	r11, r8
    2cce:	a3 2c       	mov	r10, r3
    2cd0:	03 c0       	rjmp	.+6      	; 0x2cd8 <vfprintf+0x2d6>
    2cd2:	b8 2c       	mov	r11, r8
    2cd4:	01 c0       	rjmp	.+2      	; 0x2cd8 <vfprintf+0x2d6>
    2cd6:	b9 2c       	mov	r11, r9
    2cd8:	a4 fe       	sbrs	r10, 4
    2cda:	0f c0       	rjmp	.+30     	; 0x2cfa <vfprintf+0x2f8>
    2cdc:	fe 01       	movw	r30, r28
    2cde:	e8 0d       	add	r30, r8
    2ce0:	f1 1d       	adc	r31, r1
    2ce2:	80 81       	ld	r24, Z
    2ce4:	80 33       	cpi	r24, 0x30	; 48
    2ce6:	21 f4       	brne	.+8      	; 0x2cf0 <vfprintf+0x2ee>
    2ce8:	9a 2d       	mov	r25, r10
    2cea:	99 7e       	andi	r25, 0xE9	; 233
    2cec:	a9 2e       	mov	r10, r25
    2cee:	09 c0       	rjmp	.+18     	; 0x2d02 <vfprintf+0x300>
    2cf0:	a2 fe       	sbrs	r10, 2
    2cf2:	06 c0       	rjmp	.+12     	; 0x2d00 <vfprintf+0x2fe>
    2cf4:	b3 94       	inc	r11
    2cf6:	b3 94       	inc	r11
    2cf8:	04 c0       	rjmp	.+8      	; 0x2d02 <vfprintf+0x300>
    2cfa:	8a 2d       	mov	r24, r10
    2cfc:	86 78       	andi	r24, 0x86	; 134
    2cfe:	09 f0       	breq	.+2      	; 0x2d02 <vfprintf+0x300>
    2d00:	b3 94       	inc	r11
    2d02:	a3 fc       	sbrc	r10, 3
    2d04:	11 c0       	rjmp	.+34     	; 0x2d28 <vfprintf+0x326>
    2d06:	a0 fe       	sbrs	r10, 0
    2d08:	06 c0       	rjmp	.+12     	; 0x2d16 <vfprintf+0x314>
    2d0a:	b2 14       	cp	r11, r2
    2d0c:	88 f4       	brcc	.+34     	; 0x2d30 <vfprintf+0x32e>
    2d0e:	28 0c       	add	r2, r8
    2d10:	92 2c       	mov	r9, r2
    2d12:	9b 18       	sub	r9, r11
    2d14:	0e c0       	rjmp	.+28     	; 0x2d32 <vfprintf+0x330>
    2d16:	b2 14       	cp	r11, r2
    2d18:	60 f4       	brcc	.+24     	; 0x2d32 <vfprintf+0x330>
    2d1a:	b6 01       	movw	r22, r12
    2d1c:	80 e2       	ldi	r24, 0x20	; 32
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d24:	b3 94       	inc	r11
    2d26:	f7 cf       	rjmp	.-18     	; 0x2d16 <vfprintf+0x314>
    2d28:	b2 14       	cp	r11, r2
    2d2a:	18 f4       	brcc	.+6      	; 0x2d32 <vfprintf+0x330>
    2d2c:	2b 18       	sub	r2, r11
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <vfprintf+0x332>
    2d30:	98 2c       	mov	r9, r8
    2d32:	21 2c       	mov	r2, r1
    2d34:	a4 fe       	sbrs	r10, 4
    2d36:	10 c0       	rjmp	.+32     	; 0x2d58 <vfprintf+0x356>
    2d38:	b6 01       	movw	r22, r12
    2d3a:	80 e3       	ldi	r24, 0x30	; 48
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d42:	a2 fe       	sbrs	r10, 2
    2d44:	17 c0       	rjmp	.+46     	; 0x2d74 <vfprintf+0x372>
    2d46:	a1 fc       	sbrc	r10, 1
    2d48:	03 c0       	rjmp	.+6      	; 0x2d50 <vfprintf+0x34e>
    2d4a:	88 e7       	ldi	r24, 0x78	; 120
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <vfprintf+0x352>
    2d50:	88 e5       	ldi	r24, 0x58	; 88
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	b6 01       	movw	r22, r12
    2d56:	0c c0       	rjmp	.+24     	; 0x2d70 <vfprintf+0x36e>
    2d58:	8a 2d       	mov	r24, r10
    2d5a:	86 78       	andi	r24, 0x86	; 134
    2d5c:	59 f0       	breq	.+22     	; 0x2d74 <vfprintf+0x372>
    2d5e:	a1 fe       	sbrs	r10, 1
    2d60:	02 c0       	rjmp	.+4      	; 0x2d66 <vfprintf+0x364>
    2d62:	8b e2       	ldi	r24, 0x2B	; 43
    2d64:	01 c0       	rjmp	.+2      	; 0x2d68 <vfprintf+0x366>
    2d66:	80 e2       	ldi	r24, 0x20	; 32
    2d68:	a7 fc       	sbrc	r10, 7
    2d6a:	8d e2       	ldi	r24, 0x2D	; 45
    2d6c:	b6 01       	movw	r22, r12
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d74:	89 14       	cp	r8, r9
    2d76:	38 f4       	brcc	.+14     	; 0x2d86 <vfprintf+0x384>
    2d78:	b6 01       	movw	r22, r12
    2d7a:	80 e3       	ldi	r24, 0x30	; 48
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d82:	9a 94       	dec	r9
    2d84:	f7 cf       	rjmp	.-18     	; 0x2d74 <vfprintf+0x372>
    2d86:	8a 94       	dec	r8
    2d88:	f3 01       	movw	r30, r6
    2d8a:	e8 0d       	add	r30, r8
    2d8c:	f1 1d       	adc	r31, r1
    2d8e:	80 81       	ld	r24, Z
    2d90:	b6 01       	movw	r22, r12
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2d98:	81 10       	cpse	r8, r1
    2d9a:	f5 cf       	rjmp	.-22     	; 0x2d86 <vfprintf+0x384>
    2d9c:	22 20       	and	r2, r2
    2d9e:	09 f4       	brne	.+2      	; 0x2da2 <vfprintf+0x3a0>
    2da0:	42 ce       	rjmp	.-892    	; 0x2a26 <vfprintf+0x24>
    2da2:	b6 01       	movw	r22, r12
    2da4:	80 e2       	ldi	r24, 0x20	; 32
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <fputc>
    2dac:	2a 94       	dec	r2
    2dae:	f6 cf       	rjmp	.-20     	; 0x2d9c <vfprintf+0x39a>
    2db0:	f6 01       	movw	r30, r12
    2db2:	86 81       	ldd	r24, Z+6	; 0x06
    2db4:	97 81       	ldd	r25, Z+7	; 0x07
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <vfprintf+0x3ba>
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	9f ef       	ldi	r25, 0xFF	; 255
    2dbc:	2b 96       	adiw	r28, 0x0b	; 11
    2dbe:	e2 e1       	ldi	r30, 0x12	; 18
    2dc0:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__epilogue_restores__>

00002dc4 <strnlen_P>:
    2dc4:	fc 01       	movw	r30, r24
    2dc6:	05 90       	lpm	r0, Z+
    2dc8:	61 50       	subi	r22, 0x01	; 1
    2dca:	70 40       	sbci	r23, 0x00	; 0
    2dcc:	01 10       	cpse	r0, r1
    2dce:	d8 f7       	brcc	.-10     	; 0x2dc6 <strnlen_P+0x2>
    2dd0:	80 95       	com	r24
    2dd2:	90 95       	com	r25
    2dd4:	8e 0f       	add	r24, r30
    2dd6:	9f 1f       	adc	r25, r31
    2dd8:	08 95       	ret

00002dda <strnlen>:
    2dda:	fc 01       	movw	r30, r24
    2ddc:	61 50       	subi	r22, 0x01	; 1
    2dde:	70 40       	sbci	r23, 0x00	; 0
    2de0:	01 90       	ld	r0, Z+
    2de2:	01 10       	cpse	r0, r1
    2de4:	d8 f7       	brcc	.-10     	; 0x2ddc <strnlen+0x2>
    2de6:	80 95       	com	r24
    2de8:	90 95       	com	r25
    2dea:	8e 0f       	add	r24, r30
    2dec:	9f 1f       	adc	r25, r31
    2dee:	08 95       	ret

00002df0 <fputc>:
    2df0:	0f 93       	push	r16
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	fb 01       	movw	r30, r22
    2dfa:	23 81       	ldd	r18, Z+3	; 0x03
    2dfc:	21 fd       	sbrc	r18, 1
    2dfe:	03 c0       	rjmp	.+6      	; 0x2e06 <fputc+0x16>
    2e00:	8f ef       	ldi	r24, 0xFF	; 255
    2e02:	9f ef       	ldi	r25, 0xFF	; 255
    2e04:	2c c0       	rjmp	.+88     	; 0x2e5e <fputc+0x6e>
    2e06:	22 ff       	sbrs	r18, 2
    2e08:	16 c0       	rjmp	.+44     	; 0x2e36 <fputc+0x46>
    2e0a:	46 81       	ldd	r20, Z+6	; 0x06
    2e0c:	57 81       	ldd	r21, Z+7	; 0x07
    2e0e:	24 81       	ldd	r18, Z+4	; 0x04
    2e10:	35 81       	ldd	r19, Z+5	; 0x05
    2e12:	42 17       	cp	r20, r18
    2e14:	53 07       	cpc	r21, r19
    2e16:	44 f4       	brge	.+16     	; 0x2e28 <fputc+0x38>
    2e18:	a0 81       	ld	r26, Z
    2e1a:	b1 81       	ldd	r27, Z+1	; 0x01
    2e1c:	9d 01       	movw	r18, r26
    2e1e:	2f 5f       	subi	r18, 0xFF	; 255
    2e20:	3f 4f       	sbci	r19, 0xFF	; 255
    2e22:	31 83       	std	Z+1, r19	; 0x01
    2e24:	20 83       	st	Z, r18
    2e26:	8c 93       	st	X, r24
    2e28:	26 81       	ldd	r18, Z+6	; 0x06
    2e2a:	37 81       	ldd	r19, Z+7	; 0x07
    2e2c:	2f 5f       	subi	r18, 0xFF	; 255
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	37 83       	std	Z+7, r19	; 0x07
    2e32:	26 83       	std	Z+6, r18	; 0x06
    2e34:	14 c0       	rjmp	.+40     	; 0x2e5e <fputc+0x6e>
    2e36:	8b 01       	movw	r16, r22
    2e38:	ec 01       	movw	r28, r24
    2e3a:	fb 01       	movw	r30, r22
    2e3c:	00 84       	ldd	r0, Z+8	; 0x08
    2e3e:	f1 85       	ldd	r31, Z+9	; 0x09
    2e40:	e0 2d       	mov	r30, r0
    2e42:	09 95       	icall
    2e44:	89 2b       	or	r24, r25
    2e46:	e1 f6       	brne	.-72     	; 0x2e00 <fputc+0x10>
    2e48:	d8 01       	movw	r26, r16
    2e4a:	16 96       	adiw	r26, 0x06	; 6
    2e4c:	8d 91       	ld	r24, X+
    2e4e:	9c 91       	ld	r25, X
    2e50:	17 97       	sbiw	r26, 0x07	; 7
    2e52:	01 96       	adiw	r24, 0x01	; 1
    2e54:	17 96       	adiw	r26, 0x07	; 7
    2e56:	9c 93       	st	X, r25
    2e58:	8e 93       	st	-X, r24
    2e5a:	16 97       	sbiw	r26, 0x06	; 6
    2e5c:	ce 01       	movw	r24, r28
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <__ultoa_invert>:
    2e68:	fa 01       	movw	r30, r20
    2e6a:	aa 27       	eor	r26, r26
    2e6c:	28 30       	cpi	r18, 0x08	; 8
    2e6e:	51 f1       	breq	.+84     	; 0x2ec4 <__ultoa_invert+0x5c>
    2e70:	20 31       	cpi	r18, 0x10	; 16
    2e72:	81 f1       	breq	.+96     	; 0x2ed4 <__ultoa_invert+0x6c>
    2e74:	e8 94       	clt
    2e76:	6f 93       	push	r22
    2e78:	6e 7f       	andi	r22, 0xFE	; 254
    2e7a:	6e 5f       	subi	r22, 0xFE	; 254
    2e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2e80:	9f 4f       	sbci	r25, 0xFF	; 255
    2e82:	af 4f       	sbci	r26, 0xFF	; 255
    2e84:	b1 e0       	ldi	r27, 0x01	; 1
    2e86:	3e d0       	rcall	.+124    	; 0x2f04 <__ultoa_invert+0x9c>
    2e88:	b4 e0       	ldi	r27, 0x04	; 4
    2e8a:	3c d0       	rcall	.+120    	; 0x2f04 <__ultoa_invert+0x9c>
    2e8c:	67 0f       	add	r22, r23
    2e8e:	78 1f       	adc	r23, r24
    2e90:	89 1f       	adc	r24, r25
    2e92:	9a 1f       	adc	r25, r26
    2e94:	a1 1d       	adc	r26, r1
    2e96:	68 0f       	add	r22, r24
    2e98:	79 1f       	adc	r23, r25
    2e9a:	8a 1f       	adc	r24, r26
    2e9c:	91 1d       	adc	r25, r1
    2e9e:	a1 1d       	adc	r26, r1
    2ea0:	6a 0f       	add	r22, r26
    2ea2:	71 1d       	adc	r23, r1
    2ea4:	81 1d       	adc	r24, r1
    2ea6:	91 1d       	adc	r25, r1
    2ea8:	a1 1d       	adc	r26, r1
    2eaa:	20 d0       	rcall	.+64     	; 0x2eec <__ultoa_invert+0x84>
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <__ultoa_invert+0x48>
    2eae:	68 94       	set
    2eb0:	3f 91       	pop	r19
    2eb2:	2a e0       	ldi	r18, 0x0A	; 10
    2eb4:	26 9f       	mul	r18, r22
    2eb6:	11 24       	eor	r1, r1
    2eb8:	30 19       	sub	r19, r0
    2eba:	30 5d       	subi	r19, 0xD0	; 208
    2ebc:	31 93       	st	Z+, r19
    2ebe:	de f6       	brtc	.-74     	; 0x2e76 <__ultoa_invert+0xe>
    2ec0:	cf 01       	movw	r24, r30
    2ec2:	08 95       	ret
    2ec4:	46 2f       	mov	r20, r22
    2ec6:	47 70       	andi	r20, 0x07	; 7
    2ec8:	40 5d       	subi	r20, 0xD0	; 208
    2eca:	41 93       	st	Z+, r20
    2ecc:	b3 e0       	ldi	r27, 0x03	; 3
    2ece:	0f d0       	rcall	.+30     	; 0x2eee <__ultoa_invert+0x86>
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__ultoa_invert+0x5c>
    2ed2:	f6 cf       	rjmp	.-20     	; 0x2ec0 <__ultoa_invert+0x58>
    2ed4:	46 2f       	mov	r20, r22
    2ed6:	4f 70       	andi	r20, 0x0F	; 15
    2ed8:	40 5d       	subi	r20, 0xD0	; 208
    2eda:	4a 33       	cpi	r20, 0x3A	; 58
    2edc:	18 f0       	brcs	.+6      	; 0x2ee4 <__ultoa_invert+0x7c>
    2ede:	49 5d       	subi	r20, 0xD9	; 217
    2ee0:	31 fd       	sbrc	r19, 1
    2ee2:	40 52       	subi	r20, 0x20	; 32
    2ee4:	41 93       	st	Z+, r20
    2ee6:	02 d0       	rcall	.+4      	; 0x2eec <__ultoa_invert+0x84>
    2ee8:	a9 f7       	brne	.-22     	; 0x2ed4 <__ultoa_invert+0x6c>
    2eea:	ea cf       	rjmp	.-44     	; 0x2ec0 <__ultoa_invert+0x58>
    2eec:	b4 e0       	ldi	r27, 0x04	; 4
    2eee:	a6 95       	lsr	r26
    2ef0:	97 95       	ror	r25
    2ef2:	87 95       	ror	r24
    2ef4:	77 95       	ror	r23
    2ef6:	67 95       	ror	r22
    2ef8:	ba 95       	dec	r27
    2efa:	c9 f7       	brne	.-14     	; 0x2eee <__ultoa_invert+0x86>
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	61 05       	cpc	r22, r1
    2f00:	71 05       	cpc	r23, r1
    2f02:	08 95       	ret
    2f04:	9b 01       	movw	r18, r22
    2f06:	ac 01       	movw	r20, r24
    2f08:	0a 2e       	mov	r0, r26
    2f0a:	06 94       	lsr	r0
    2f0c:	57 95       	ror	r21
    2f0e:	47 95       	ror	r20
    2f10:	37 95       	ror	r19
    2f12:	27 95       	ror	r18
    2f14:	ba 95       	dec	r27
    2f16:	c9 f7       	brne	.-14     	; 0x2f0a <__ultoa_invert+0xa2>
    2f18:	62 0f       	add	r22, r18
    2f1a:	73 1f       	adc	r23, r19
    2f1c:	84 1f       	adc	r24, r20
    2f1e:	95 1f       	adc	r25, r21
    2f20:	a0 1d       	adc	r26, r0
    2f22:	08 95       	ret

00002f24 <eeprom_read_block>:
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22

00002f28 <eeprom_read_blraw>:
    2f28:	fc 01       	movw	r30, r24
    2f2a:	f9 99       	sbic	0x1f, 1	; 31
    2f2c:	fe cf       	rjmp	.-4      	; 0x2f2a <eeprom_read_blraw+0x2>
    2f2e:	06 c0       	rjmp	.+12     	; 0x2f3c <eeprom_read_blraw+0x14>
    2f30:	f2 bd       	out	0x22, r31	; 34
    2f32:	e1 bd       	out	0x21, r30	; 33
    2f34:	f8 9a       	sbi	0x1f, 0	; 31
    2f36:	31 96       	adiw	r30, 0x01	; 1
    2f38:	00 b4       	in	r0, 0x20	; 32
    2f3a:	0d 92       	st	X+, r0
    2f3c:	41 50       	subi	r20, 0x01	; 1
    2f3e:	50 40       	sbci	r21, 0x00	; 0
    2f40:	b8 f7       	brcc	.-18     	; 0x2f30 <eeprom_read_blraw+0x8>
    2f42:	08 95       	ret

00002f44 <eeprom_read_byte>:
    2f44:	f9 99       	sbic	0x1f, 1	; 31
    2f46:	fe cf       	rjmp	.-4      	; 0x2f44 <eeprom_read_byte>
    2f48:	92 bd       	out	0x22, r25	; 34
    2f4a:	81 bd       	out	0x21, r24	; 33
    2f4c:	f8 9a       	sbi	0x1f, 0	; 31
    2f4e:	99 27       	eor	r25, r25
    2f50:	80 b5       	in	r24, 0x20	; 32
    2f52:	08 95       	ret

00002f54 <eeprom_read_dword>:
    2f54:	a6 e1       	ldi	r26, 0x16	; 22
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	44 e0       	ldi	r20, 0x04	; 4
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	0c 94 94 17 	jmp	0x2f28	; 0x2f28 <eeprom_read_blraw>

00002f60 <eeprom_write_block>:
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	03 c0       	rjmp	.+6      	; 0x2f6c <eeprom_write_block+0xc>
    2f66:	2d 91       	ld	r18, X+
    2f68:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <eeprom_write_r18>
    2f6c:	41 50       	subi	r20, 0x01	; 1
    2f6e:	50 40       	sbci	r21, 0x00	; 0
    2f70:	d0 f7       	brcc	.-12     	; 0x2f66 <eeprom_write_block+0x6>
    2f72:	08 95       	ret

00002f74 <eeprom_write_byte>:
    2f74:	26 2f       	mov	r18, r22

00002f76 <eeprom_write_r18>:
    2f76:	f9 99       	sbic	0x1f, 1	; 31
    2f78:	fe cf       	rjmp	.-4      	; 0x2f76 <eeprom_write_r18>
    2f7a:	1f ba       	out	0x1f, r1	; 31
    2f7c:	92 bd       	out	0x22, r25	; 34
    2f7e:	81 bd       	out	0x21, r24	; 33
    2f80:	20 bd       	out	0x20, r18	; 32
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	fa 9a       	sbi	0x1f, 2	; 31
    2f88:	f9 9a       	sbi	0x1f, 1	; 31
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	01 96       	adiw	r24, 0x01	; 1
    2f8e:	08 95       	ret

00002f90 <eeprom_write_dword>:
    2f90:	24 2f       	mov	r18, r20
    2f92:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <eeprom_write_r18>
    2f96:	25 2f       	mov	r18, r21
    2f98:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <eeprom_write_r18>
    2f9c:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <eeprom_write_word>

00002fa0 <eeprom_write_word>:
    2fa0:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <eeprom_write_byte>
    2fa4:	27 2f       	mov	r18, r23
    2fa6:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <eeprom_write_r18>

00002faa <__muluhisi3>:
    2faa:	0e 94 1f 18 	call	0x303e	; 0x303e <__umulhisi3>
    2fae:	a5 9f       	mul	r26, r21
    2fb0:	90 0d       	add	r25, r0
    2fb2:	b4 9f       	mul	r27, r20
    2fb4:	90 0d       	add	r25, r0
    2fb6:	a4 9f       	mul	r26, r20
    2fb8:	80 0d       	add	r24, r0
    2fba:	91 1d       	adc	r25, r1
    2fbc:	11 24       	eor	r1, r1
    2fbe:	08 95       	ret

00002fc0 <__mulshisi3>:
    2fc0:	b7 ff       	sbrs	r27, 7
    2fc2:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__muluhisi3>

00002fc6 <__mulohisi3>:
    2fc6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__muluhisi3>
    2fca:	82 1b       	sub	r24, r18
    2fcc:	93 0b       	sbc	r25, r19
    2fce:	08 95       	ret

00002fd0 <__prologue_saves__>:
    2fd0:	2f 92       	push	r2
    2fd2:	3f 92       	push	r3
    2fd4:	4f 92       	push	r4
    2fd6:	5f 92       	push	r5
    2fd8:	6f 92       	push	r6
    2fda:	7f 92       	push	r7
    2fdc:	8f 92       	push	r8
    2fde:	9f 92       	push	r9
    2fe0:	af 92       	push	r10
    2fe2:	bf 92       	push	r11
    2fe4:	cf 92       	push	r12
    2fe6:	df 92       	push	r13
    2fe8:	ef 92       	push	r14
    2fea:	ff 92       	push	r15
    2fec:	0f 93       	push	r16
    2fee:	1f 93       	push	r17
    2ff0:	cf 93       	push	r28
    2ff2:	df 93       	push	r29
    2ff4:	cd b7       	in	r28, 0x3d	; 61
    2ff6:	de b7       	in	r29, 0x3e	; 62
    2ff8:	ca 1b       	sub	r28, r26
    2ffa:	db 0b       	sbc	r29, r27
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	09 94       	ijmp

00003008 <__epilogue_restores__>:
    3008:	2a 88       	ldd	r2, Y+18	; 0x12
    300a:	39 88       	ldd	r3, Y+17	; 0x11
    300c:	48 88       	ldd	r4, Y+16	; 0x10
    300e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3010:	6e 84       	ldd	r6, Y+14	; 0x0e
    3012:	7d 84       	ldd	r7, Y+13	; 0x0d
    3014:	8c 84       	ldd	r8, Y+12	; 0x0c
    3016:	9b 84       	ldd	r9, Y+11	; 0x0b
    3018:	aa 84       	ldd	r10, Y+10	; 0x0a
    301a:	b9 84       	ldd	r11, Y+9	; 0x09
    301c:	c8 84       	ldd	r12, Y+8	; 0x08
    301e:	df 80       	ldd	r13, Y+7	; 0x07
    3020:	ee 80       	ldd	r14, Y+6	; 0x06
    3022:	fd 80       	ldd	r15, Y+5	; 0x05
    3024:	0c 81       	ldd	r16, Y+4	; 0x04
    3026:	1b 81       	ldd	r17, Y+3	; 0x03
    3028:	aa 81       	ldd	r26, Y+2	; 0x02
    302a:	b9 81       	ldd	r27, Y+1	; 0x01
    302c:	ce 0f       	add	r28, r30
    302e:	d1 1d       	adc	r29, r1
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	ed 01       	movw	r28, r26
    303c:	08 95       	ret

0000303e <__umulhisi3>:
    303e:	a2 9f       	mul	r26, r18
    3040:	b0 01       	movw	r22, r0
    3042:	b3 9f       	mul	r27, r19
    3044:	c0 01       	movw	r24, r0
    3046:	a3 9f       	mul	r26, r19
    3048:	70 0d       	add	r23, r0
    304a:	81 1d       	adc	r24, r1
    304c:	11 24       	eor	r1, r1
    304e:	91 1d       	adc	r25, r1
    3050:	b2 9f       	mul	r27, r18
    3052:	70 0d       	add	r23, r0
    3054:	81 1d       	adc	r24, r1
    3056:	11 24       	eor	r1, r1
    3058:	91 1d       	adc	r25, r1
    305a:	08 95       	ret

0000305c <_exit>:
    305c:	f8 94       	cli

0000305e <__stop_program>:
    305e:	ff cf       	rjmp	.-2      	; 0x305e <__stop_program>
