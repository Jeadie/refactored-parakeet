
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00003286  0000331a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000017c  00800268  00800268  00003482  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000034e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  00003520  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000634f  00000000  00000000  00003ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000201f  00000000  00000000  00009fef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000391d  00000000  00000000  0000c00e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001054  00000000  00000000  0000f92c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019cc  00000000  00000000  00010980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d63  00000000  00000000  0001234c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  000150af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 9f 12 	jmp	0x253e	; 0x253e <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <__vector_20>
      54:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2630>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2628>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2142>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2140>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2094>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2090>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2086>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2076>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2061>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	e6 e8       	ldi	r30, 0x86	; 134
     1fa:	f2 e3       	ldi	r31, 0x32	; 50
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a8 36       	cpi	r26, 0x68	; 104
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	23 e0       	ldi	r18, 0x03	; 3
     20a:	a8 e6       	ldi	r26, 0x68	; 104
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	a4 3e       	cpi	r26, 0xE4	; 228
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 66 0b 	call	0x16cc	; 0x16cc <main>
     21c:	0c 94 41 19 	jmp	0x3282	; 0x3282 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e7 59       	subi	r30, 0x97	; 151
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	e8 59       	subi	r30, 0x98	; 152
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 68 02 	lds	r20, 0x0268	; 0x800268 <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 71 02 	lds	r18, 0x0271	; 0x800271 <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 68 02 	lds	r30, 0x0268	; 0x800268 <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 68 02 	sts	0x0268, r18	; 0x800268 <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e7 59       	subi	r30, 0x97	; 151
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 68 02 	lds	r18, 0x0268	; 0x800268 <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <init_buzzer>:
}


int buzzer_times(void){
	return buzzer_time;
}
     344:	08 95       	ret

00000346 <sound_effects_on_mode>:
     346:	89 b1       	in	r24, 0x09	; 9
     348:	83 fb       	bst	r24, 3
     34a:	88 27       	eor	r24, r24
     34c:	80 f9       	bld	r24, 0
     34e:	08 95       	ret

00000350 <buzzer_time_left>:
     350:	cf 92       	push	r12
     352:	df 92       	push	r13
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
     360:	40 91 72 02 	lds	r20, 0x0272	; 0x800272 <buzzer_time>
     364:	50 91 73 02 	lds	r21, 0x0273	; 0x800273 <buzzer_time+0x1>
     368:	6a 01       	movw	r12, r20
     36a:	55 0f       	add	r21, r21
     36c:	ee 08       	sbc	r14, r14
     36e:	ff 08       	sbc	r15, r15
     370:	00 91 b3 02 	lds	r16, 0x02B3	; 0x8002b3 <clock_at_tone_start>
     374:	10 91 b4 02 	lds	r17, 0x02B4	; 0x8002b4 <clock_at_tone_start+0x1>
     378:	20 91 b5 02 	lds	r18, 0x02B5	; 0x8002b5 <clock_at_tone_start+0x2>
     37c:	30 91 b6 02 	lds	r19, 0x02B6	; 0x8002b6 <clock_at_tone_start+0x3>
     380:	c0 0e       	add	r12, r16
     382:	d1 1e       	adc	r13, r17
     384:	e2 1e       	adc	r14, r18
     386:	f3 1e       	adc	r15, r19
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	6c 15       	cp	r22, r12
     38e:	7d 05       	cpc	r23, r13
     390:	8e 05       	cpc	r24, r14
     392:	9f 05       	cpc	r25, r15
     394:	10 f0       	brcs	.+4      	; 0x39a <buzzer_time_left+0x4a>
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	30 e0       	ldi	r19, 0x00	; 0
     39a:	c9 01       	movw	r24, r18
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	08 95       	ret

000003aa <next_buzzer_tone>:

void next_buzzer_tone(void){
	current_index ++;
     3aa:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <current_index>
     3ae:	ef 5f       	subi	r30, 0xFF	; 255
     3b0:	e0 93 b0 02 	sts	0x02B0, r30	; 0x8002b0 <current_index>
	//printf("next tone");
	change_OCR1A(current_tone->buzzer_OCR1A[current_index]);
     3b4:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <current_tone>
     3b8:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <current_tone+0x1>
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	ee 0f       	add	r30, r30
     3c0:	ff 1f       	adc	r31, r31
     3c2:	8d 91       	ld	r24, X+
     3c4:	9c 91       	ld	r25, X
     3c6:	e8 0f       	add	r30, r24
     3c8:	f9 1f       	adc	r31, r25
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	0e 94 f3 12 	call	0x25e6	; 0x25e6 <change_OCR1A>
	//  printf_P(PSTR("ptr: %d, ocr1a: %d\n"), buzzer_pointer, buzzer_OCR1A[buzzer_pointer]);
	//change_timer_one_frequency(buzzer_frequencies[buzzer_pointer]);

	clock_at_tone_start = get_clock_ticks();
     3d2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
     3d6:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <clock_at_tone_start>
     3da:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <clock_at_tone_start+0x1>
     3de:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <clock_at_tone_start+0x2>
     3e2:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <clock_at_tone_start+0x3>
	
	//  How long this should be
	buzzer_time = (*current_tone).durations[current_index];
     3e6:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <current_tone>
     3ea:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <current_tone+0x1>
     3ee:	e0 91 b0 02 	lds	r30, 0x02B0	; 0x8002b0 <current_index>
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	ee 0f       	add	r30, r30
     3f6:	ff 1f       	adc	r31, r31
     3f8:	12 96       	adiw	r26, 0x02	; 2
     3fa:	8d 91       	ld	r24, X+
     3fc:	9c 91       	ld	r25, X
     3fe:	13 97       	sbiw	r26, 0x03	; 3
     400:	e8 0f       	add	r30, r24
     402:	f9 1f       	adc	r31, r25
     404:	80 81       	ld	r24, Z
     406:	91 81       	ldd	r25, Z+1	; 0x01
     408:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <buzzer_time+0x1>
     40c:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <buzzer_time>
     410:	08 95       	ret

00000412 <reset_buzzer>:
}


void reset_buzzer(void){
	DDRD &= ~(1<<5);
     412:	55 98       	cbi	0x0a, 5	; 10
	//current_index = -1; 
	//printf_P(PSTR("ended")); 
	current_tone = NULL; 
     414:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <current_tone+0x1>
     418:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <current_tone>
     41c:	08 95       	ret

0000041e <play_start_game_sound_effect>:
}

void play_start_game_sound_effect(void){
	current_tone = &Begin_tone;
     41e:	8d e0       	ldi	r24, 0x0D	; 13
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <current_tone+0x1>
     426:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <current_tone>
	current_index = -1;
     42a:	8f ef       	ldi	r24, 0xFF	; 255
     42c:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <current_index>
	next_buzzer_tone();
     430:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
	if(sound_effects_on_mode()){
     434:	0e 94 a3 01 	call	0x346	; 0x346 <sound_effects_on_mode>
     438:	81 11       	cpse	r24, r1
		enable_timer_one();
     43a:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <enable_timer_one>
     43e:	08 95       	ret

00000440 <play_eating_food_sound_effect>:
	}
}

void play_eating_food_sound_effect(void){
	current_tone = &Eat_tone;
     440:	88 e0       	ldi	r24, 0x08	; 8
     442:	91 e0       	ldi	r25, 0x01	; 1
     444:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <current_tone+0x1>
     448:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <current_tone>
	current_index = -1;
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <current_index>
	next_buzzer_tone();
     452:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
	if(sound_effects_on_mode()){
     456:	0e 94 a3 01 	call	0x346	; 0x346 <sound_effects_on_mode>
     45a:	81 11       	cpse	r24, r1
		enable_timer_one();
     45c:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <enable_timer_one>
     460:	08 95       	ret

00000462 <play_end_game_sound_effect>:
}



void play_end_game_sound_effect(void){
	current_tone = &end_tone;
     462:	82 e1       	ldi	r24, 0x12	; 18
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <current_tone+0x1>
     46a:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <current_tone>
	current_index = -1;
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <current_index>
	next_buzzer_tone();
     474:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
	if(sound_effects_on_mode()){
     478:	0e 94 a3 01 	call	0x346	; 0x346 <sound_effects_on_mode>
     47c:	81 11       	cpse	r24, r1
		enable_timer_one();
     47e:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <enable_timer_one>
     482:	08 95       	ret

00000484 <last_tone_in_sequence>:
	}
}


int last_tone_in_sequence(void){
	return current_index+1 >= current_tone->length;
     484:	20 91 b0 02 	lds	r18, 0x02B0	; 0x8002b0 <current_index>
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	2f 5f       	subi	r18, 0xFF	; 255
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	e0 91 b1 02 	lds	r30, 0x02B1	; 0x8002b1 <current_tone>
     492:	f0 91 b2 02 	lds	r31, 0x02B2	; 0x8002b2 <current_tone+0x1>
     496:	44 81       	ldd	r20, Z+4	; 0x04
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	24 17       	cp	r18, r20
     4a0:	35 07       	cpc	r19, r21
     4a2:	14 f4       	brge	.+4      	; 0x4a8 <last_tone_in_sequence+0x24>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
}
     4a8:	08 95       	ret

000004aa <handle_buzzer_loop>:
		}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4aa:	0e 94 a8 01 	call	0x350	; 0x350 <buzzer_time_left>
     4ae:	89 2b       	or	r24, r25
     4b0:	39 f4       	brne	.+14     	; 0x4c0 <handle_buzzer_loop+0x16>
     4b2:	0e 94 42 02 	call	0x484	; 0x484 <last_tone_in_sequence>
     4b6:	89 2b       	or	r24, r25
     4b8:	19 f0       	breq	.+6      	; 0x4c0 <handle_buzzer_loop+0x16>
		//move_cursor(10, 7);
		//printf("END TONE \n");
		reset_buzzer();
     4ba:	0e 94 09 02 	call	0x412	; 0x412 <reset_buzzer>
     4be:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4c0:	0e 94 a8 01 	call	0x350	; 0x350 <buzzer_time_left>
     4c4:	89 2b       	or	r24, r25
     4c6:	11 f4       	brne	.+4      	; 0x4cc <handle_buzzer_loop+0x22>
		next_buzzer_tone();
     4c8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <next_buzzer_tone>
     4cc:	08 95       	ret

000004ce <EEPROM_has_saved_game>:
	} Game_Save_Data;
	


uint8_t EEPROM_has_saved_game(void){
	uint32_t current_signature = eeprom_read_dword((uint32_t*) SAVE_GAME_SIGNATURE_MEMORY); 
     4ce:	80 e8       	ldi	r24, 0x80	; 128
     4d0:	91 e0       	ldi	r25, 0x01	; 1
     4d2:	0e 94 bd 18 	call	0x317a	; 0x317a <eeprom_read_dword>
	return (current_signature == SAVE_GAME_SIGNATURE); 
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	61 15       	cp	r22, r1
     4da:	72 41       	sbci	r23, 0x12	; 18
     4dc:	81 05       	cpc	r24, r1
     4de:	91 05       	cpc	r25, r1
     4e0:	09 f0       	breq	.+2      	; 0x4e4 <EEPROM_has_saved_game+0x16>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
}
     4e4:	82 2f       	mov	r24, r18
     4e6:	08 95       	ret

000004e8 <save_game_to_EPPROM>:

void save_game_to_EPPROM(void){
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	cd b7       	in	r28, 0x3d	; 61
     4f8:	de b7       	in	r29, 0x3e	; 62
     4fa:	62 97       	sbiw	r28, 0x12	; 18
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	f8 94       	cli
     500:	de bf       	out	0x3e, r29	; 62
     502:	0f be       	out	0x3f, r0	; 63
     504:	cd bf       	out	0x3d, r28	; 61
	cli();
     506:	f8 94       	cli
	// Save the Food Positions
	eeprom_write_dword((uint32_t*) SAVE_GAME_SIGNATURE_MEMORY, SAVE_GAME_SIGNATURE);
     508:	40 e0       	ldi	r20, 0x00	; 0
     50a:	52 e1       	ldi	r21, 0x12	; 18
     50c:	60 e0       	ldi	r22, 0x00	; 0
     50e:	70 e0       	ldi	r23, 0x00	; 0
     510:	80 e8       	ldi	r24, 0x80	; 128
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 db 18 	call	0x31b6	; 0x31b6 <eeprom_write_dword>
	
	struct Game_Save_Data new_saved_game; 
	new_saved_game.food_one =get_position_of_food(0);
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	0e 94 be 07 	call	0xf7c	; 0xf7c <get_position_of_food>
     51e:	89 83       	std	Y+1, r24	; 0x01
	new_saved_game.food_two =get_position_of_food(1);
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	0e 94 be 07 	call	0xf7c	; 0xf7c <get_position_of_food>
     526:	8a 83       	std	Y+2, r24	; 0x02
	new_saved_game.food_three =get_position_of_food(2);
     528:	82 e0       	ldi	r24, 0x02	; 2
     52a:	0e 94 be 07 	call	0xf7c	; 0xf7c <get_position_of_food>
     52e:	8b 83       	std	Y+3, r24	; 0x03
	new_saved_game.food_four = get_position_of_food(3);
     530:	83 e0       	ldi	r24, 0x03	; 3
     532:	0e 94 be 07 	call	0xf7c	; 0xf7c <get_position_of_food>
     536:	8c 83       	std	Y+4, r24	; 0x04
	new_saved_game.rat = get_rat_position(); 
     538:	0e 94 82 0b 	call	0x1704	; 0x1704 <get_rat_position>
     53c:	8e 83       	std	Y+6, r24	; 0x06
	new_saved_game.game_score = get_score(); 
     53e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <get_score>
     542:	69 87       	std	Y+9, r22	; 0x09
     544:	7a 87       	std	Y+10, r23	; 0x0a
     546:	8b 87       	std	Y+11, r24	; 0x0b
     548:	9c 87       	std	Y+12, r25	; 0x0c
	new_saved_game.game_speed = get_current_game_speed(); 
     54a:	0e 94 a4 08 	call	0x1148	; 0x1148 <get_current_game_speed>
     54e:	98 87       	std	Y+8, r25	; 0x08
     550:	8f 83       	std	Y+7, r24	; 0x07
	new_saved_game.snake_length = get_snake_length(); 
     552:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <get_snake_length>
     556:	8d 87       	std	Y+13, r24	; 0x0d
	new_saved_game.clock_ticks = get_clock_ticks(); 
     558:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
     55c:	6e 87       	std	Y+14, r22	; 0x0e
     55e:	7f 87       	std	Y+15, r23	; 0x0f
     560:	88 8b       	std	Y+16, r24	; 0x10
     562:	99 8b       	std	Y+17, r25	; 0x11
	new_saved_game.snake_direction = get_current_drn(); 
     564:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <get_current_drn>
     568:	8a 8b       	std	Y+18, r24	; 0x12
	
	//  Save Rat Position and Superfood position if superfood is currently on. 
	if (superfood_is_on_board()){
     56a:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <superfood_is_on_board>
     56e:	88 23       	and	r24, r24
     570:	21 f0       	breq	.+8      	; 0x57a <save_game_to_EPPROM+0x92>
		new_saved_game.superfood = get_superfood_position();
     572:	0e 94 1a 11 	call	0x2234	; 0x2234 <get_superfood_position>
     576:	8d 83       	std	Y+5, r24	; 0x05
     578:	02 c0       	rjmp	.+4      	; 0x57e <save_game_to_EPPROM+0x96>
	} else{
		new_saved_game.superfood =  0x08; 
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	8d 83       	std	Y+5, r24	; 0x05
	}
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 
     57e:	42 e1       	ldi	r20, 0x12	; 18
     580:	50 e0       	ldi	r21, 0x00	; 0
     582:	60 ea       	ldi	r22, 0xA0	; 160
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	ce 01       	movw	r24, r28
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
     58e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <get_snake_tail_index>
     592:	18 2f       	mov	r17, r24
     594:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <get_snake_head_index>
     598:	81 17       	cp	r24, r17
     59a:	08 f0       	brcs	.+2      	; 0x59e <save_game_to_EPPROM+0xb6>
     59c:	43 c0       	rjmp	.+134    	; 0x624 <save_game_to_EPPROM+0x13c>
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     59e:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <get_snake_tail_index>
     5a2:	d8 2e       	mov	r13, r24
     5a4:	08 2f       	mov	r16, r24
     5a6:	10 e0       	ldi	r17, 0x00	; 0
     5a8:	01 32       	cpi	r16, 0x21	; 33
     5aa:	11 05       	cpc	r17, r1
     5ac:	1c f5       	brge	.+70     	; 0x5f4 <save_game_to_EPPROM+0x10c>
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f0 e3       	ldi	r31, 0x30	; 48
     5b2:	ef 2e       	mov	r14, r31
     5b4:	f2 e0       	ldi	r31, 0x02	; 2
     5b6:	ff 2e       	mov	r15, r31
     5b8:	f0 2d       	mov	r31, r0
			eeprom_write_byte((uint8_t*)current_snake_position_memory, 
     5ba:	80 2f       	mov	r24, r16
     5bc:	0e 94 75 0f 	call	0x1eea	; 0x1eea <get_snake_position_at_index>
     5c0:	68 2f       	mov	r22, r24
     5c2:	c7 01       	movw	r24, r14
     5c4:	0e 94 cd 18 	call	0x319a	; 0x319a <eeprom_write_byte>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	e8 0e       	add	r14, r24
     5cc:	f1 1c       	adc	r15, r1
	
	//  Add each PosnType of the Snake. Will load game with tail at 0 and head at snake_length-1
	if (get_snake_tail_index()> get_snake_head_index()){
		//printf("wrapped snake \n");
		//SSSH-------------------------TSSS
		for (int i = get_snake_tail_index(); i<=MAX_SNAKE_SIZE; i++){
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	1f 4f       	sbci	r17, 0xFF	; 255
     5d2:	01 32       	cpi	r16, 0x21	; 33
     5d4:	11 05       	cpc	r17, r1
     5d6:	89 f7       	brne	.-30     	; 0x5ba <save_game_to_EPPROM+0xd2>
     5d8:	0d 2d       	mov	r16, r13
     5da:	10 e0       	ldi	r17, 0x00	; 0
     5dc:	11 95       	neg	r17
     5de:	01 95       	neg	r16
     5e0:	11 09       	sbc	r17, r1
     5e2:	00 0f       	add	r16, r16
     5e4:	11 1f       	adc	r17, r17
     5e6:	00 0f       	add	r16, r16
     5e8:	11 1f       	adc	r17, r17
     5ea:	00 0f       	add	r16, r16
     5ec:	11 1f       	adc	r17, r17
     5ee:	08 5c       	subi	r16, 0xC8	; 200
     5f0:	1c 4f       	sbci	r17, 0xFC	; 252
     5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <save_game_to_EPPROM+0x110>
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     5f4:	00 e3       	ldi	r16, 0x30	; 48
     5f6:	12 e0       	ldi	r17, 0x02	; 2
     5f8:	e1 2c       	mov	r14, r1
     5fa:	f1 2c       	mov	r15, r1
     5fc:	0c c0       	rjmp	.+24     	; 0x616 <save_game_to_EPPROM+0x12e>
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
			eeprom_write_byte((uint8_t*)current_snake_position_memory,
     5fe:	8e 2d       	mov	r24, r14
     600:	0e 94 75 0f 	call	0x1eea	; 0x1eea <get_snake_position_at_index>
     604:	68 2f       	mov	r22, r24
     606:	c8 01       	movw	r24, r16
     608:	0e 94 cd 18 	call	0x319a	; 0x319a <eeprom_write_byte>
			get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory +=0x08;
     60c:	08 5f       	subi	r16, 0xF8	; 248
     60e:	1f 4f       	sbci	r17, 0xFF	; 255
			eeprom_write_byte((uint8_t*)current_snake_position_memory, 
							 get_snake_position_at_index(i));
			//printf("x: %u y: %u \n", x_position(get_snake_position_at_index(i)), y_position(get_snake_position_at_index(i)));
			current_snake_position_memory += 0x08;
		}
		for (int i = 0; i<= get_snake_head_index(); i++){
     610:	8f ef       	ldi	r24, 0xFF	; 255
     612:	e8 1a       	sub	r14, r24
     614:	f8 0a       	sbc	r15, r24
     616:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <get_snake_head_index>
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	8e 15       	cp	r24, r14
     61e:	9f 05       	cpc	r25, r15
     620:	74 f7       	brge	.-36     	; 0x5fe <save_game_to_EPPROM+0x116>
     622:	19 c0       	rjmp	.+50     	; 0x656 <save_game_to_EPPROM+0x16e>
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     624:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <get_snake_tail_index>
     628:	e8 2e       	mov	r14, r24
     62a:	f1 2c       	mov	r15, r1
	// Save struct to EEPROM
	//  printf("size of game struct: %u", sizeof(new_saved_game));
	eeprom_write_block(&new_saved_game, SAVED_DATA_START, sizeof(new_saved_game)); 

	// To increment after every snake position is saved
	uint16_t current_snake_position_memory = SNAKE_POSITION_TAIL; 
     62c:	00 e3       	ldi	r16, 0x30	; 48
     62e:	12 e0       	ldi	r17, 0x02	; 2
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     630:	0c c0       	rjmp	.+24     	; 0x64a <save_game_to_EPPROM+0x162>
			eeprom_write_byte((uint8_t*)current_snake_position_memory, get_snake_position_at_index(i));
     632:	8e 2d       	mov	r24, r14
     634:	0e 94 75 0f 	call	0x1eea	; 0x1eea <get_snake_position_at_index>
     638:	68 2f       	mov	r22, r24
     63a:	c8 01       	movw	r24, r16
     63c:	0e 94 cd 18 	call	0x319a	; 0x319a <eeprom_write_byte>
			current_snake_position_memory +=0x08;
     640:	08 5f       	subi	r16, 0xF8	; 248
     642:	1f 4f       	sbci	r17, 0xFF	; 255
			current_snake_position_memory +=0x08;
		}
		}else{
			//printf("straight Snake \n");
		//  ---TSSSSSSH----
		for(int i =get_snake_tail_index(); i<=get_snake_head_index(); i++){
     644:	8f ef       	ldi	r24, 0xFF	; 255
     646:	e8 1a       	sub	r14, r24
     648:	f8 0a       	sbc	r15, r24
     64a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <get_snake_head_index>
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	8e 15       	cp	r24, r14
     652:	9f 05       	cpc	r25, r15
     654:	74 f7       	brge	.-36     	; 0x632 <save_game_to_EPPROM+0x14a>
			
		}
	}
	
	//  Add an invalid PosnType byte to signify the end of the snake positions. 
	eeprom_write_byte((uint8_t*)current_snake_position_memory,0x08);
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	c8 01       	movw	r24, r16
     65a:	0e 94 cd 18 	call	0x319a	; 0x319a <eeprom_write_byte>
	//print_save_details();
	sei();
     65e:	78 94       	sei

}
     660:	62 96       	adiw	r28, 0x12	; 18
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	08 95       	ret

0000067c <add_food_to_board>:
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
	}
}

void add_food_to_board(PosnType food_pos){
     67c:	cf 93       	push	r28
     67e:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     680:	0e 94 98 09 	call	0x1330	; 0x1330 <is_position_valid>
     684:	88 23       	and	r24, r24
     686:	89 f0       	breq	.+34     	; 0x6aa <add_food_to_board+0x2e>
		foodPositions[numFoodItems] = food_pos;
     688:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <numFoodItems>
     68c:	0e 2e       	mov	r0, r30
     68e:	00 0c       	add	r0, r0
     690:	ff 0b       	sbc	r31, r31
     692:	e3 54       	subi	r30, 0x43	; 67
     694:	fd 4f       	sbci	r31, 0xFD	; 253
     696:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     698:	63 e3       	ldi	r22, 0x33	; 51
     69a:	8c 2f       	mov	r24, r28
     69c:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
		numFoodItems++; 
     6a0:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <numFoodItems>
     6a4:	8f 5f       	subi	r24, 0xFF	; 255
     6a6:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <numFoodItems>
	}
}
     6aa:	cf 91       	pop	r28
     6ac:	08 95       	ret

000006ae <load_rat_from_EEPROM>:
void load_rat_from_EEPROM(PosnType rat_pos){
     6ae:	cf 93       	push	r28
     6b0:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     6b2:	0e 94 98 09 	call	0x1330	; 0x1330 <is_position_valid>
     6b6:	88 23       	and	r24, r24
     6b8:	21 f0       	breq	.+8      	; 0x6c2 <load_rat_from_EEPROM+0x14>
		set_rat_at_pos(rat_pos); 
     6ba:	8c 2f       	mov	r24, r28
     6bc:	0e 94 85 0b 	call	0x170a	; 0x170a <set_rat_at_pos>
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <load_rat_from_EEPROM+0x18>
	}else{
		add_new_rat_position();
     6c2:	0e 94 76 0c 	call	0x18ec	; 0x18ec <add_new_rat_position>
	}
}
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(PosnType super_food){
     6ca:	cf 93       	push	r28
     6cc:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     6ce:	0e 94 98 09 	call	0x1330	; 0x1330 <is_position_valid>
     6d2:	88 23       	and	r24, r24
     6d4:	21 f0       	breq	.+8      	; 0x6de <load_superfood_from_EEPROM+0x14>
		load_superfood(super_food);
     6d6:	8c 2f       	mov	r24, r28
     6d8:	0e 94 ca 10 	call	0x2194	; 0x2194 <load_superfood>
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <load_superfood_from_EEPROM+0x18>
	}else{
		remove_superfood_from_board(); 
     6de:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <remove_superfood_from_board>
	}
}
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     6e6:	0f 93       	push	r16
     6e8:	1f 93       	push	r17
     6ea:	cf 93       	push	r28
     6ec:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     6f4:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <get_snake_length>
     6f8:	81 50       	subi	r24, 0x01	; 1
     6fa:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <set_snake_head_pointer>
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	uint8_t snakePosition_index = 0; 
     6fe:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     700:	c0 e3       	ldi	r28, 0x30	; 48
     702:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte((uint8_t*)snake_memory_position);
     704:	ce 01       	movw	r24, r28
     706:	0e 94 b5 18 	call	0x316a	; 0x316a <eeprom_read_byte>
     70a:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     70c:	61 2f       	mov	r22, r17
     70e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     712:	60 ef       	ldi	r22, 0xF0	; 240
     714:	80 2f       	mov	r24, r16
     716:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
		snake_memory_position +=8; 
     71a:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     71c:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte((uint8_t*)snake_memory_position)));
     71e:	ce 01       	movw	r24, r28
     720:	0e 94 b5 18 	call	0x316a	; 0x316a <eeprom_read_byte>
     724:	0e 94 98 09 	call	0x1330	; 0x1330 <is_position_valid>
     728:	81 11       	cpse	r24, r1
     72a:	ec cf       	rjmp	.-40     	; 0x704 <load_snake_from_EPPROM+0x1e>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     72c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <get_snake_head_position>
     730:	6f e0       	ldi	r22, 0x0F	; 15
     732:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>

}
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <new_game_from_EEPROM>:
	//print_save_details();
	sei();

}

void new_game_from_EEPROM(void){
     740:	cf 93       	push	r28
     742:	df 93       	push	r29
     744:	cd b7       	in	r28, 0x3d	; 61
     746:	de b7       	in	r29, 0x3e	; 62
     748:	62 97       	sbiw	r28, 0x12	; 18
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
	if(EEPROM_has_saved_game()){
     754:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
     758:	88 23       	and	r24, r24
     75a:	09 f4       	brne	.+2      	; 0x75e <new_game_from_EEPROM+0x1e>
     75c:	42 c0       	rjmp	.+132    	; 0x7e2 <new_game_from_EEPROM+0xa2>
		clear_terminal(); 
     75e:	0e 94 ad 11 	call	0x235a	; 0x235a <clear_terminal>
		ledmatrix_clear();
     762:	0e 94 8f 09 	call	0x131e	; 0x131e <ledmatrix_clear>
		init_score_on_terminal();
     766:	0e 94 f6 11 	call	0x23ec	; 0x23ec <init_score_on_terminal>
		
		struct Game_Save_Data game_from_EEPROM; 
		eeprom_read_block(&game_from_EEPROM, SAVED_DATA_START, 18); 
     76a:	42 e1       	ldi	r20, 0x12	; 18
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	60 ea       	ldi	r22, 0xA0	; 160
     770:	71 e0       	ldi	r23, 0x01	; 1
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
		
		// Methods from init_game(); 
		set_score(game_from_EEPROM.game_score);
     77a:	69 85       	ldd	r22, Y+9	; 0x09
     77c:	7a 85       	ldd	r23, Y+10	; 0x0a
     77e:	8b 85       	ldd	r24, Y+11	; 0x0b
     780:	9c 85       	ldd	r25, Y+12	; 0x0c
     782:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <set_score>
		set_clock_ticks(game_from_EEPROM.clock_ticks); 
     786:	6e 85       	ldd	r22, Y+14	; 0x0e
     788:	7f 85       	ldd	r23, Y+15	; 0x0f
     78a:	88 89       	ldd	r24, Y+16	; 0x10
     78c:	99 89       	ldd	r25, Y+17	; 0x11
     78e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <set_clock_ticks>
		update_terminal_score(); 
     792:	0e 94 11 12 	call	0x2422	; 0x2422 <update_terminal_score>
		set_game_speed(game_from_EEPROM.game_speed);
     796:	8f 81       	ldd	r24, Y+7	; 0x07
     798:	98 85       	ldd	r25, Y+8	; 0x08
     79a:	0e 94 a9 08 	call	0x1152	; 0x1152 <set_game_speed>
		load_rat_from_EEPROM(game_from_EEPROM.rat);
     79e:	8e 81       	ldd	r24, Y+6	; 0x06
     7a0:	0e 94 57 03 	call	0x6ae	; 0x6ae <load_rat_from_EEPROM>
		initialise_timer_one();
     7a4:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <initialise_timer_one>
	
		// Init food, rats, superfood and snake
		add_food_to_board(game_from_EEPROM.food_one);
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_two);
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_three);
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		add_food_to_board(game_from_EEPROM.food_four);
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	0e 94 3e 03 	call	0x67c	; 0x67c <add_food_to_board>
		load_superfood_from_EEPROM( game_from_EEPROM.superfood);
     7c0:	8d 81       	ldd	r24, Y+5	; 0x05
     7c2:	0e 94 65 03 	call	0x6ca	; 0x6ca <load_superfood_from_EEPROM>
		set_snake_length(game_from_EEPROM.snake_length); 
     7c6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <set_snake_length>
		reset_snake_drn(game_from_EEPROM.snake_direction); 
     7cc:	8a 89       	ldd	r24, Y+18	; 0x12
     7ce:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <reset_snake_drn>
		load_snake_from_EPPROM();
     7d2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     7d6:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     7da:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     7de:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <load_EEPROM_data_on_next_game>
	}
}
     7e2:	62 96       	adiw	r28, 0x12	; 18
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	f8 94       	cli
     7e8:	de bf       	out	0x3e, r29	; 62
     7ea:	0f be       	out	0x3f, r0	; 63
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	08 95       	ret

000007f4 <move_place_down>:
	eeprom_write_block(&new_score, (uint8_t*)score_position, sizeof(new_score));
		
	// clear_terminal();
}

void move_place_down(uint16_t mem_position){
     7f4:	0f 93       	push	r16
     7f6:	1f 93       	push	r17
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	cd b7       	in	r28, 0x3d	; 61
     7fe:	de b7       	in	r29, 0x3e	; 62
     800:	27 97       	sbiw	r28, 0x07	; 7
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	8c 01       	movw	r16, r24
	struct High_Score_Place high_score_place;
	eeprom_read_block(&high_score_place, (uint8_t*)mem_position, 7); 
     80e:	47 e0       	ldi	r20, 0x07	; 7
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	bc 01       	movw	r22, r24
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
	uint16_t moved_place = mem_position +64;
	eeprom_write_block(&high_score_place, (uint8_t*)moved_place, 7);
     81c:	b8 01       	movw	r22, r16
     81e:	60 5c       	subi	r22, 0xC0	; 192
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	47 e0       	ldi	r20, 0x07	; 7
     824:	50 e0       	ldi	r21, 0x00	; 0
     826:	ce 01       	movw	r24, r28
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>
}
     82e:	27 96       	adiw	r28, 0x07	; 7
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(NAME_FOUR); 
     844:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     848:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     84c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     850:	08 95       	ret

00000852 <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     852:	0e 94 22 04 	call	0x844	; 0x844 <move_four_place_down>
	move_place_down(NAME_THREE);
     856:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     85a:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     85e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     862:	08 95       	ret

00000864 <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     864:	0e 94 29 04 	call	0x852	; 0x852 <move_three_place_down>
	move_place_down(NAME_TWO);
     868:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     86c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     870:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     874:	08 95       	ret

00000876 <move_one_place_down>:
}
void move_one_place_down(void){
	move_two_place_down();
     876:	0e 94 32 04 	call	0x864	; 0x864 <move_two_place_down>
	move_place_down(NAME_ONE);
     87a:	80 b5       	in	r24, 0x20	; 32
     87c:	91 b5       	in	r25, 0x21	; 33
     87e:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <move_place_down>
     882:	08 95       	ret

00000884 <initialise_EEPROM>:
}

void initialise_EEPROM(void){
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	27 97       	sbiw	r28, 0x07	; 7
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword((uint32_t*)HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     898:	44 e3       	ldi	r20, 0x34	; 52
     89a:	52 e1       	ldi	r21, 0x12	; 18
     89c:	60 e0       	ldi	r22, 0x00	; 0
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	0e 94 db 18 	call	0x31b6	; 0x31b6 <eeprom_write_dword>
	struct High_Score_Place empty_score_place;
	empty_score_place.name[0] = ' ';
     8a8:	80 e2       	ldi	r24, 0x20	; 32
     8aa:	89 83       	std	Y+1, r24	; 0x01
	empty_score_place.name[1] = ' ';
     8ac:	8a 83       	std	Y+2, r24	; 0x02
	empty_score_place.name[2] = ' ';
     8ae:	8b 83       	std	Y+3, r24	; 0x03
	empty_score_place.score = 0; 
     8b0:	1c 82       	std	Y+4, r1	; 0x04
     8b2:	1d 82       	std	Y+5, r1	; 0x05
     8b4:	1e 82       	std	Y+6, r1	; 0x06
     8b6:	1f 82       	std	Y+7, r1	; 0x07
	eeprom_write_block(&empty_score_place, *(uint16_t*)NAME_ONE, 7);
     8b8:	e0 b5       	in	r30, 0x20	; 32
     8ba:	f1 b5       	in	r31, 0x21	; 33
     8bc:	60 81       	ld	r22, Z
     8be:	71 81       	ldd	r23, Z+1	; 0x01
     8c0:	47 e0       	ldi	r20, 0x07	; 7
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, *(uint16_t*)NAME_TWO, 7);
     8cc:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     8d0:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     8d4:	60 81       	ld	r22, Z
     8d6:	71 81       	ldd	r23, Z+1	; 0x01
     8d8:	47 e0       	ldi	r20, 0x07	; 7
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, *(uint16_t*)NAME_THREE, 7);
     8e4:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     8e8:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     8ec:	60 81       	ld	r22, Z
     8ee:	71 81       	ldd	r23, Z+1	; 0x01
     8f0:	47 e0       	ldi	r20, 0x07	; 7
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	ce 01       	movw	r24, r28
     8f6:	01 96       	adiw	r24, 0x01	; 1
     8f8:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, *(uint16_t*)NAME_FOUR, 7);
     8fc:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     900:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     904:	60 81       	ld	r22, Z
     906:	71 81       	ldd	r23, Z+1	; 0x01
     908:	47 e0       	ldi	r20, 0x07	; 7
     90a:	50 e0       	ldi	r21, 0x00	; 0
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>
	eeprom_write_block(&empty_score_place, *(uint16_t*)NAME_FIVE, 7);
     914:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <EAT_FREQ+0x3>
     918:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <EAT_FREQ+0x4>
     91c:	60 81       	ld	r22, Z
     91e:	71 81       	ldd	r23, Z+1	; 0x01
     920:	47 e0       	ldi	r20, 0x07	; 7
     922:	50 e0       	ldi	r21, 0x00	; 0
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>

	}
     92c:	27 96       	adiw	r28, 0x07	; 7
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	f8 94       	cli
     932:	de bf       	out	0x3e, r29	; 62
     934:	0f be       	out	0x3f, r0	; 63
     936:	cd bf       	out	0x3d, r28	; 61
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <EEPROM_High_Score_has_been_initialised>:


uint8_t EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword((uint32_t*)HIGHSCORE_SIGNATURE_MEMORY);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 bd 18 	call	0x317a	; 0x317a <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     946:	21 e0       	ldi	r18, 0x01	; 1
     948:	64 33       	cpi	r22, 0x34	; 52
     94a:	72 41       	sbci	r23, 0x12	; 18
     94c:	81 05       	cpc	r24, r1
     94e:	91 05       	cpc	r25, r1
     950:	09 f0       	breq	.+2      	; 0x954 <EEPROM_High_Score_has_been_initialised+0x16>
     952:	20 e0       	ldi	r18, 0x00	; 0
}
     954:	82 2f       	mov	r24, r18
     956:	08 95       	ret

00000958 <is_high_score>:
struct High_Score_Place {
	char name[3];
	uint32_t score;
};

uint8_t is_high_score(void){
     958:	cf 92       	push	r12
     95a:	df 92       	push	r13
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
     968:	27 97       	sbiw	r28, 0x07	; 7
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	de bf       	out	0x3e, r29	; 62
     970:	0f be       	out	0x3f, r0	; 63
     972:	cd bf       	out	0x3d, r28	; 61
	uint32_t score = get_score();
     974:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <get_score>
     978:	6b 01       	movw	r12, r22
     97a:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place;
	eeprom_read_block(&current_score_place, *(uint16_t*)NAME_FIVE, 7);
     97c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <EAT_FREQ+0x3>
     980:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <EAT_FREQ+0x4>
     984:	60 81       	ld	r22, Z
     986:	71 81       	ldd	r23, Z+1	; 0x01
     988:	47 e0       	ldi	r20, 0x07	; 7
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	ce 01       	movw	r24, r28
     98e:	01 96       	adiw	r24, 0x01	; 1
     990:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
     994:	8c 81       	ldd	r24, Y+4	; 0x04
     996:	9d 81       	ldd	r25, Y+5	; 0x05
     998:	ae 81       	ldd	r26, Y+6	; 0x06
     99a:	bf 81       	ldd	r27, Y+7	; 0x07
     99c:	c8 16       	cp	r12, r24
     99e:	d9 06       	cpc	r13, r25
     9a0:	ea 06       	cpc	r14, r26
     9a2:	fb 06       	cpc	r15, r27
     9a4:	38 f4       	brcc	.+14     	; 0x9b4 <is_high_score+0x5c>
     9a6:	0e 94 9f 04 	call	0x93e	; 0x93e <EEPROM_High_Score_has_been_initialised>
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	81 11       	cpse	r24, r1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	89 2f       	mov	r24, r25
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <is_high_score+0x5e>
     9b4:	81 e0       	ldi	r24, 0x01	; 1
}
     9b6:	27 96       	adiw	r28, 0x07	; 7
     9b8:	0f b6       	in	r0, 0x3f	; 63
     9ba:	f8 94       	cli
     9bc:	de bf       	out	0x3e, r29	; 62
     9be:	0f be       	out	0x3f, r0	; 63
     9c0:	cd bf       	out	0x3d, r28	; 61
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	08 95       	ret

000009d0 <high_score_position>:

uint16_t high_score_position(void){
     9d0:	cf 92       	push	r12
     9d2:	df 92       	push	r13
     9d4:	ef 92       	push	r14
     9d6:	ff 92       	push	r15
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	27 97       	sbiw	r28, 0x07	; 7
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
	if (!(EEPROM_High_Score_has_been_initialised())){
     9ec:	0e 94 9f 04 	call	0x93e	; 0x93e <EEPROM_High_Score_has_been_initialised>
     9f0:	81 11       	cpse	r24, r1
     9f2:	03 c0       	rjmp	.+6      	; 0x9fa <high_score_position+0x2a>
		return NAME_ONE;
     9f4:	80 b5       	in	r24, 0x20	; 32
     9f6:	91 b5       	in	r25, 0x21	; 33
     9f8:	78 c0       	rjmp	.+240    	; 0xaea <high_score_position+0x11a>
	}
	
	uint32_t score = get_score(); 
     9fa:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <get_score>
     9fe:	6b 01       	movw	r12, r22
     a00:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, *(uint16_t*)NAME_ONE, 7);
     a02:	e0 b5       	in	r30, 0x20	; 32
     a04:	f1 b5       	in	r31, 0x21	; 33
     a06:	60 81       	ld	r22, Z
     a08:	71 81       	ldd	r23, Z+1	; 0x01
     a0a:	47 e0       	ldi	r20, 0x07	; 7
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	ce 01       	movw	r24, r28
     a10:	01 96       	adiw	r24, 0x01	; 1
     a12:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>

	if (score> current_score_place.score){
     a16:	8c 81       	ldd	r24, Y+4	; 0x04
     a18:	9d 81       	ldd	r25, Y+5	; 0x05
     a1a:	ae 81       	ldd	r26, Y+6	; 0x06
     a1c:	bf 81       	ldd	r27, Y+7	; 0x07
     a1e:	8c 15       	cp	r24, r12
     a20:	9d 05       	cpc	r25, r13
     a22:	ae 05       	cpc	r26, r14
     a24:	bf 05       	cpc	r27, r15
     a26:	18 f4       	brcc	.+6      	; 0xa2e <high_score_position+0x5e>
		return NAME_ONE;
     a28:	80 b5       	in	r24, 0x20	; 32
     a2a:	91 b5       	in	r25, 0x21	; 33
     a2c:	5e c0       	rjmp	.+188    	; 0xaea <high_score_position+0x11a>
	}
	
	eeprom_read_block(&current_score_place, *(uint16_t*)NAME_TWO, 7);
     a2e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     a32:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a36:	60 81       	ld	r22, Z
     a38:	71 81       	ldd	r23, Z+1	; 0x01
     a3a:	47 e0       	ldi	r20, 0x07	; 7
     a3c:	50 e0       	ldi	r21, 0x00	; 0
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
	if (score> current_score_place.score){
     a46:	8c 81       	ldd	r24, Y+4	; 0x04
     a48:	9d 81       	ldd	r25, Y+5	; 0x05
     a4a:	ae 81       	ldd	r26, Y+6	; 0x06
     a4c:	bf 81       	ldd	r27, Y+7	; 0x07
     a4e:	8c 15       	cp	r24, r12
     a50:	9d 05       	cpc	r25, r13
     a52:	ae 05       	cpc	r26, r14
     a54:	bf 05       	cpc	r27, r15
     a56:	28 f4       	brcc	.+10     	; 0xa62 <high_score_position+0x92>
		return NAME_TWO;
     a58:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     a5c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a60:	44 c0       	rjmp	.+136    	; 0xaea <high_score_position+0x11a>
	}
	
	eeprom_read_block(&current_score_place, *(uint16_t*)NAME_THREE, 7);	
     a62:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a66:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     a6a:	60 81       	ld	r22, Z
     a6c:	71 81       	ldd	r23, Z+1	; 0x01
     a6e:	47 e0       	ldi	r20, 0x07	; 7
     a70:	50 e0       	ldi	r21, 0x00	; 0
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
	if (score> current_score_place.score){
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	9d 81       	ldd	r25, Y+5	; 0x05
     a7e:	ae 81       	ldd	r26, Y+6	; 0x06
     a80:	bf 81       	ldd	r27, Y+7	; 0x07
     a82:	8c 15       	cp	r24, r12
     a84:	9d 05       	cpc	r25, r13
     a86:	ae 05       	cpc	r26, r14
     a88:	bf 05       	cpc	r27, r15
     a8a:	28 f4       	brcc	.+10     	; 0xa96 <high_score_position+0xc6>
		return NAME_THREE;
     a8c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     a90:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     a94:	2a c0       	rjmp	.+84     	; 0xaea <high_score_position+0x11a>
	}
	
	eeprom_read_block(&current_score_place, *(uint16_t*)NAME_FOUR, 7);
     a96:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     a9a:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     a9e:	60 81       	ld	r22, Z
     aa0:	71 81       	ldd	r23, Z+1	; 0x01
     aa2:	47 e0       	ldi	r20, 0x07	; 7
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
	if (score> current_score_place.score){
     aae:	8c 81       	ldd	r24, Y+4	; 0x04
     ab0:	9d 81       	ldd	r25, Y+5	; 0x05
     ab2:	ae 81       	ldd	r26, Y+6	; 0x06
     ab4:	bf 81       	ldd	r27, Y+7	; 0x07
     ab6:	8c 15       	cp	r24, r12
     ab8:	9d 05       	cpc	r25, r13
     aba:	ae 05       	cpc	r26, r14
     abc:	bf 05       	cpc	r27, r15
     abe:	28 f4       	brcc	.+10     	; 0xaca <high_score_position+0xfa>
		return NAME_FOUR;
     ac0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ac4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ac8:	10 c0       	rjmp	.+32     	; 0xaea <high_score_position+0x11a>
}
	eeprom_read_block(&current_score_place, *(uint16_t*)NAME_FIVE, 7);
     aca:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <EAT_FREQ+0x3>
     ace:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <EAT_FREQ+0x4>
     ad2:	60 81       	ld	r22, Z
     ad4:	71 81       	ldd	r23, Z+1	; 0x01
     ad6:	47 e0       	ldi	r20, 0x07	; 7
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
	if (score> current_score_place.score){
		return NAME_FIVE;
	}
	return NAME_FIVE; 
     ae2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <EAT_FREQ+0x3>
     ae6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <EAT_FREQ+0x4>
	
}
     aea:	27 96       	adiw	r28, 0x07	; 7
     aec:	0f b6       	in	r0, 0x3f	; 63
     aee:	f8 94       	cli
     af0:	de bf       	out	0x3e, r29	; 62
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	cd bf       	out	0x3d, r28	; 61
     af6:	df 91       	pop	r29
     af8:	cf 91       	pop	r28
     afa:	ff 90       	pop	r15
     afc:	ef 90       	pop	r14
     afe:	df 90       	pop	r13
     b00:	cf 90       	pop	r12
     b02:	08 95       	ret

00000b04 <handle_sequence_into_EEPROM>:
				current_high_score_name[2] = ' ';
				break; 
			}
		}
	}
void handle_sequence_into_EEPROM(){
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	27 97       	sbiw	r28, 0x07	; 7
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	f8 94       	cli
     b16:	de bf       	out	0x3e, r29	; 62
     b18:	0f be       	out	0x3f, r0	; 63
     b1a:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword((uint32_t*)HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     b1c:	44 e3       	ldi	r20, 0x34	; 52
     b1e:	52 e1       	ldi	r21, 0x12	; 18
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	0e 94 db 18 	call	0x31b6	; 0x31b6 <eeprom_write_dword>
	uint16_t score_position= *(uint16_t*)high_score_position();
     b2c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <high_score_position>
     b30:	fc 01       	movw	r30, r24
     b32:	00 81       	ld	r16, Z
     b34:	11 81       	ldd	r17, Z+1	; 0x01
	// dereferene and cast to int 
	
		switch(score_position){
     b36:	00 38       	cpi	r16, 0x80	; 128
     b38:	11 05       	cpc	r17, r1
     b3a:	91 f0       	breq	.+36     	; 0xb60 <handle_sequence_into_EEPROM+0x5c>
     b3c:	20 f4       	brcc	.+8      	; 0xb46 <handle_sequence_into_EEPROM+0x42>
     b3e:	00 34       	cpi	r16, 0x40	; 64
     b40:	11 05       	cpc	r17, r1
     b42:	89 f0       	breq	.+34     	; 0xb66 <handle_sequence_into_EEPROM+0x62>
     b44:	12 c0       	rjmp	.+36     	; 0xb6a <handle_sequence_into_EEPROM+0x66>
     b46:	00 3c       	cpi	r16, 0xC0	; 192
     b48:	11 05       	cpc	r17, r1
     b4a:	39 f0       	breq	.+14     	; 0xb5a <handle_sequence_into_EEPROM+0x56>
     b4c:	01 15       	cp	r16, r1
     b4e:	f1 e0       	ldi	r31, 0x01	; 1
     b50:	1f 07       	cpc	r17, r31
     b52:	59 f4       	brne	.+22     	; 0xb6a <handle_sequence_into_EEPROM+0x66>
			case 0x100: move_four_place_down(); break;
     b54:	0e 94 22 04 	call	0x844	; 0x844 <move_four_place_down>
     b58:	08 c0       	rjmp	.+16     	; 0xb6a <handle_sequence_into_EEPROM+0x66>
			case 0xC0: move_three_place_down(); break;
     b5a:	0e 94 29 04 	call	0x852	; 0x852 <move_three_place_down>
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <handle_sequence_into_EEPROM+0x66>
			case 0x80: move_two_place_down(); break;
     b60:	0e 94 32 04 	call	0x864	; 0x864 <move_two_place_down>
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <handle_sequence_into_EEPROM+0x66>
			case 0x40: move_one_place_down(); break;
     b66:	0e 94 3b 04 	call	0x876	; 0x876 <move_one_place_down>
		}
	struct High_Score_Place new_score; 
	new_score.name[0] = current_high_score_name[0];
     b6a:	e4 e7       	ldi	r30, 0x74	; 116
     b6c:	f2 e0       	ldi	r31, 0x02	; 2
     b6e:	80 81       	ld	r24, Z
     b70:	89 83       	std	Y+1, r24	; 0x01
	new_score.name[1] = current_high_score_name[1];
     b72:	81 81       	ldd	r24, Z+1	; 0x01
     b74:	8a 83       	std	Y+2, r24	; 0x02
	new_score.name[2] = current_high_score_name[2];
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	8b 83       	std	Y+3, r24	; 0x03
	new_score.score = get_score();
     b7a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <get_score>
     b7e:	6c 83       	std	Y+4, r22	; 0x04
     b80:	7d 83       	std	Y+5, r23	; 0x05
     b82:	8e 83       	std	Y+6, r24	; 0x06
     b84:	9f 83       	std	Y+7, r25	; 0x07
	
	eeprom_write_block(&new_score, (uint8_t*)score_position, sizeof(new_score));
     b86:	47 e0       	ldi	r20, 0x07	; 7
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	b8 01       	movw	r22, r16
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 c3 18 	call	0x3186	; 0x3186 <eeprom_write_block>
		
	// clear_terminal();
}
     b94:	27 96       	adiw	r28, 0x07	; 7
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	df 91       	pop	r29
     ba2:	cf 91       	pop	r28
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	08 95       	ret

00000baa <set_high_score_name>:
	}
	return NAME_FIVE; 
	
}

void set_high_score_name(void){
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
	move_cursor(10,8);
     bb6:	68 e0       	ldi	r22, 0x08	; 8
     bb8:	8a e0       	ldi	r24, 0x0A	; 10
     bba:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     bbe:	80 e7       	ldi	r24, 0x70	; 112
     bc0:	91 e0       	ldi	r25, 0x01	; 1
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     bce:	00 e0       	ldi	r16, 0x00	; 0
     bd0:	10 e0       	ldi	r17, 0x00	; 0
		show_cursor(); 
		serial_input = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     bd2:	0f 2e       	mov	r0, r31
     bd4:	fe ed       	ldi	r31, 0xDE	; 222
     bd6:	ef 2e       	mov	r14, r31
     bd8:	f3 e0       	ldi	r31, 0x03	; 3
     bda:	ff 2e       	mov	r15, r31
     bdc:	f0 2d       	mov	r31, r0
	move_cursor(10,8);
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input;
	while (1){
		show_cursor(); 
     bde:	0e 94 cc 11 	call	0x2398	; 0x2398 <show_cursor>
		serial_input = -1;
		
		if(serial_input_available()) {
     be2:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <serial_input_available>
     be6:	88 23       	and	r24, r24
     be8:	d1 f3       	breq	.-12     	; 0xbde <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     bea:	f7 01       	movw	r30, r14
     bec:	80 81       	ld	r24, Z
     bee:	91 81       	ldd	r25, Z+1	; 0x01
     bf0:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <fgetc>
     bf4:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     bf6:	98 2f       	mov	r25, r24
     bf8:	91 54       	subi	r25, 0x41	; 65
     bfa:	9a 33       	cpi	r25, 0x3A	; 58
     bfc:	98 f4       	brcc	.+38     	; 0xc24 <set_high_score_name+0x7a>
     bfe:	03 30       	cpi	r16, 0x03	; 3
     c00:	11 05       	cpc	r17, r1
     c02:	84 f4       	brge	.+32     	; 0xc24 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     c04:	69 e0       	ldi	r22, 0x09	; 9
     c06:	8a e0       	ldi	r24, 0x0A	; 10
     c08:	80 0f       	add	r24, r16
     c0a:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     c0e:	f8 01       	movw	r30, r16
     c10:	ec 58       	subi	r30, 0x8C	; 140
     c12:	fd 4f       	sbci	r31, 0xFD	; 253
     c14:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     c16:	ce 01       	movw	r24, r28
     c18:	99 27       	eor	r25, r25
     c1a:	0e 94 dd 15 	call	0x2bba	; 0x2bba <putchar>
				score_name_pointer++;
     c1e:	0f 5f       	subi	r16, 0xFF	; 255
     c20:	1f 4f       	sbci	r17, 0xFF	; 255
     c22:	dd cf       	rjmp	.-70     	; 0xbde <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>1){
     c24:	8a 30       	cpi	r24, 0x0A	; 10
     c26:	21 f4       	brne	.+8      	; 0xc30 <set_high_score_name+0x86>
     c28:	02 30       	cpi	r16, 0x02	; 2
     c2a:	11 05       	cpc	r17, r1
     c2c:	c4 f2       	brlt	.-80     	; 0xbde <set_high_score_name+0x34>
     c2e:	11 c0       	rjmp	.+34     	; 0xc52 <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     c30:	8f 37       	cpi	r24, 0x7F	; 127
     c32:	a9 f6       	brne	.-86     	; 0xbde <set_high_score_name+0x34>
				printf("%c", ' ');
     c34:	80 e2       	ldi	r24, 0x20	; 32
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	0e 94 dd 15 	call	0x2bba	; 0x2bba <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     c3c:	10 16       	cp	r1, r16
     c3e:	11 06       	cpc	r1, r17
     c40:	14 f4       	brge	.+4      	; 0xc46 <set_high_score_name+0x9c>
     c42:	01 50       	subi	r16, 0x01	; 1
     c44:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     c46:	69 e0       	ldi	r22, 0x09	; 9
     c48:	8a e0       	ldi	r24, 0x0A	; 10
     c4a:	80 0f       	add	r24, r16
     c4c:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
     c50:	c6 cf       	rjmp	.-116    	; 0xbde <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     c52:	f9 99       	sbic	0x1f, 1	; 31
     c54:	fe cf       	rjmp	.-4      	; 0xc52 <set_high_score_name+0xa8>
				handle_sequence_into_EEPROM();
     c56:	0e 94 82 05 	call	0xb04	; 0xb04 <handle_sequence_into_EEPROM>
				current_high_score_name[0] = ' ';
     c5a:	e4 e7       	ldi	r30, 0x74	; 116
     c5c:	f2 e0       	ldi	r31, 0x02	; 2
     c5e:	80 e2       	ldi	r24, 0x20	; 32
     c60:	80 83       	st	Z, r24
				current_high_score_name[1] = ' ';
     c62:	81 83       	std	Z+1, r24	; 0x01
				current_high_score_name[2] = ' ';
     c64:	82 83       	std	Z+2, r24	; 0x02
				break; 
			}
		}
	}
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret

00000c74 <display_EEPROM_high_score>:
uint8_t EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword((uint32_t*)HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	27 97       	sbiw	r28, 0x07	; 7
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
	move_cursor(10,11);
     c88:	6b e0       	ldi	r22, 0x0B	; 11
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     c90:	8c e7       	ldi	r24, 0x7C	; 124
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	9f 93       	push	r25
     c96:	8f 93       	push	r24
     c98:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
	move_cursor(10,13);
     c9c:	6d e0       	ldi	r22, 0x0D	; 13
     c9e:	8a e0       	ldi	r24, 0x0A	; 10
     ca0:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     ca4:	0e 94 9f 04 	call	0x93e	; 0x93e <EEPROM_High_Score_has_been_initialised>
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	88 23       	and	r24, r24
     cae:	09 f4       	brne	.+2      	; 0xcb2 <display_EEPROM_high_score+0x3e>
     cb0:	c8 c0       	rjmp	.+400    	; 0xe42 <display_EEPROM_high_score+0x1ce>
		struct High_Score_Place score_place_to_display; 
		eeprom_read_block(&score_place_to_display, *(uint16_t*)NAME_ONE, 7);
     cb2:	e0 b5       	in	r30, 0x20	; 32
     cb4:	f1 b5       	in	r31, 0x21	; 33
     cb6:	60 81       	ld	r22, Z
     cb8:	71 81       	ldd	r23, Z+1	; 0x01
     cba:	47 e0       	ldi	r20, 0x07	; 7
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	ce 01       	movw	r24, r28
     cc0:	01 96       	adiw	r24, 0x01	; 1
     cc2:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
		printf("First: %c%c%c %lu", score_place_to_display.name[0], 
     cc6:	8f 81       	ldd	r24, Y+7	; 0x07
     cc8:	8f 93       	push	r24
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	8f 93       	push	r24
     cce:	8d 81       	ldd	r24, Y+5	; 0x05
     cd0:	8f 93       	push	r24
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	8f 93       	push	r24
     cd6:	8b 81       	ldd	r24, Y+3	; 0x03
     cd8:	1f 92       	push	r1
     cda:	8f 93       	push	r24
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	1f 92       	push	r1
     ce0:	8f 93       	push	r24
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	1f 92       	push	r1
     ce6:	8f 93       	push	r24
     ce8:	89 ea       	ldi	r24, 0xA9	; 169
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	9f 93       	push	r25
     cee:	8f 93       	push	r24
     cf0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
									score_place_to_display.name[1], 
									score_place_to_display.name[2], 
									score_place_to_display.score);
		
		move_cursor(10,14);					
     cf4:	6e e0       	ldi	r22, 0x0E	; 14
     cf6:	8a e0       	ldi	r24, 0x0A	; 10
     cf8:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
		
		eeprom_read_block(&score_place_to_display, *(uint16_t*)NAME_TWO, 7);
     cfc:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     d00:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     d04:	60 81       	ld	r22, Z
     d06:	71 81       	ldd	r23, Z+1	; 0x01
     d08:	47 e0       	ldi	r20, 0x07	; 7
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	ce 01       	movw	r24, r28
     d0e:	01 96       	adiw	r24, 0x01	; 1
     d10:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
		printf("Second: %c%c%c %lu", score_place_to_display.name[0],
     d14:	8f 81       	ldd	r24, Y+7	; 0x07
     d16:	8f 93       	push	r24
     d18:	8e 81       	ldd	r24, Y+6	; 0x06
     d1a:	8f 93       	push	r24
     d1c:	8d 81       	ldd	r24, Y+5	; 0x05
     d1e:	8f 93       	push	r24
     d20:	8c 81       	ldd	r24, Y+4	; 0x04
     d22:	8f 93       	push	r24
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	1f 92       	push	r1
     d28:	8f 93       	push	r24
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	1f 92       	push	r1
     d2e:	8f 93       	push	r24
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	1f 92       	push	r1
     d34:	8f 93       	push	r24
     d36:	8b eb       	ldi	r24, 0xBB	; 187
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,15);
     d42:	6f e0       	ldi	r22, 0x0F	; 15
     d44:	8a e0       	ldi	r24, 0x0A	; 10
     d46:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>

		eeprom_read_block(&score_place_to_display, *(uint16_t*)NAME_THREE, 7);
     d4a:	e0 91 c0 00 	lds	r30, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     d4e:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     d52:	60 81       	ld	r22, Z
     d54:	71 81       	ldd	r23, Z+1	; 0x01
     d56:	47 e0       	ldi	r20, 0x07	; 7
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	ce 01       	movw	r24, r28
     d5c:	01 96       	adiw	r24, 0x01	; 1
     d5e:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
		printf("Third: %c%c%c %lu", score_place_to_display.name[0],
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	8f 93       	push	r24
     d66:	8e 81       	ldd	r24, Y+6	; 0x06
     d68:	8f 93       	push	r24
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	8f 93       	push	r24
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	8f 93       	push	r24
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	1f 92       	push	r1
     d76:	8f 93       	push	r24
     d78:	8a 81       	ldd	r24, Y+2	; 0x02
     d7a:	1f 92       	push	r1
     d7c:	8f 93       	push	r24
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	1f 92       	push	r1
     d82:	8f 93       	push	r24
     d84:	8e ec       	ldi	r24, 0xCE	; 206
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	9f 93       	push	r25
     d8a:	8f 93       	push	r24
     d8c:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,16);
     d90:	0f b6       	in	r0, 0x3f	; 63
     d92:	f8 94       	cli
     d94:	de bf       	out	0x3e, r29	; 62
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	cd bf       	out	0x3d, r28	; 61
     d9a:	60 e1       	ldi	r22, 0x10	; 16
     d9c:	8a e0       	ldi	r24, 0x0A	; 10
     d9e:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>

		eeprom_read_block(&score_place_to_display, *(uint16_t*)NAME_FOUR, 7);
     da2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     da6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     daa:	60 81       	ld	r22, Z
     dac:	71 81       	ldd	r23, Z+1	; 0x01
     dae:	47 e0       	ldi	r20, 0x07	; 7
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	ce 01       	movw	r24, r28
     db4:	01 96       	adiw	r24, 0x01	; 1
     db6:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
		printf("Fourth: %c%c%c %lu", score_place_to_display.name[0],
     dba:	8f 81       	ldd	r24, Y+7	; 0x07
     dbc:	8f 93       	push	r24
     dbe:	8e 81       	ldd	r24, Y+6	; 0x06
     dc0:	8f 93       	push	r24
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	8f 93       	push	r24
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	8f 93       	push	r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	1f 92       	push	r1
     dce:	8f 93       	push	r24
     dd0:	8a 81       	ldd	r24, Y+2	; 0x02
     dd2:	1f 92       	push	r1
     dd4:	8f 93       	push	r24
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	1f 92       	push	r1
     dda:	8f 93       	push	r24
     ddc:	80 ee       	ldi	r24, 0xE0	; 224
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	9f 93       	push	r25
     de2:	8f 93       	push	r24
     de4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,17);
     de8:	61 e1       	ldi	r22, 0x11	; 17
     dea:	8a e0       	ldi	r24, 0x0A	; 10
     dec:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>

		eeprom_read_block(&score_place_to_display, *(uint16_t*)NAME_FIVE, 7);
     df0:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <EAT_FREQ+0x3>
     df4:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <EAT_FREQ+0x4>
     df8:	60 81       	ld	r22, Z
     dfa:	71 81       	ldd	r23, Z+1	; 0x01
     dfc:	47 e0       	ldi	r20, 0x07	; 7
     dfe:	50 e0       	ldi	r21, 0x00	; 0
     e00:	ce 01       	movw	r24, r28
     e02:	01 96       	adiw	r24, 0x01	; 1
     e04:	0e 94 a5 18 	call	0x314a	; 0x314a <eeprom_read_block>
		printf("Fifth: %c%c%c %lu", score_place_to_display.name[0],
     e08:	8f 81       	ldd	r24, Y+7	; 0x07
     e0a:	8f 93       	push	r24
     e0c:	8e 81       	ldd	r24, Y+6	; 0x06
     e0e:	8f 93       	push	r24
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	8f 93       	push	r24
     e14:	8c 81       	ldd	r24, Y+4	; 0x04
     e16:	8f 93       	push	r24
     e18:	8b 81       	ldd	r24, Y+3	; 0x03
     e1a:	1f 92       	push	r1
     e1c:	8f 93       	push	r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	1f 92       	push	r1
     e22:	8f 93       	push	r24
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	1f 92       	push	r1
     e28:	8f 93       	push	r24
     e2a:	83 ef       	ldi	r24, 0xF3	; 243
     e2c:	91 e0       	ldi	r25, 0x01	; 1
     e2e:	9f 93       	push	r25
     e30:	8f 93       	push	r24
     e32:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <display_EEPROM_high_score+0x1e2>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
	}
	else{
		initialise_EEPROM();
     e42:	0e 94 42 04 	call	0x884	; 0x884 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     e46:	85 e0       	ldi	r24, 0x05	; 5
     e48:	92 e0       	ldi	r25, 0x02	; 2
     e4a:	9f 93       	push	r25
     e4c:	8f 93       	push	r24
     e4e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
     e52:	0f 90       	pop	r0
     e54:	0f 90       	pop	r0
	}

}
     e56:	27 96       	adiw	r28, 0x07	; 7
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	08 95       	ret

00000e68 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     e68:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <numFoodItems>
     e6c:	08 95       	ret

00000e6e <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e6e:	30 91 bc 02 	lds	r19, 0x02BC	; 0x8002bc <numFoodItems>
     e72:	13 16       	cp	r1, r19
     e74:	84 f4       	brge	.+32     	; 0xe96 <food_at+0x28>
        if(foodPositions[id] == posn) {
     e76:	90 91 bd 02 	lds	r25, 0x02BD	; 0x8002bd <foodPositions>
     e7a:	89 17       	cp	r24, r25
     e7c:	71 f0       	breq	.+28     	; 0xe9a <food_at+0x2c>
     e7e:	ee eb       	ldi	r30, 0xBE	; 190
     e80:	f2 e0       	ldi	r31, 0x02	; 2
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	03 c0       	rjmp	.+6      	; 0xe8c <food_at+0x1e>
     e86:	21 91       	ld	r18, Z+
     e88:	28 17       	cp	r18, r24
     e8a:	49 f0       	breq	.+18     	; 0xe9e <food_at+0x30>
     e8c:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e8e:	39 13       	cpse	r19, r25
     e90:	fa cf       	rjmp	.-12     	; 0xe86 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	08 95       	ret
     e96:	8f ef       	ldi	r24, 0xFF	; 255
     e98:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	08 95       	ret
     e9e:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     ea0:	08 95       	ret

00000ea2 <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     ea2:	0e 94 37 07 	call	0xe6e	; 0xe6e <food_at>
     ea6:	91 e0       	ldi	r25, 0x01	; 1
     ea8:	8f 3f       	cpi	r24, 0xFF	; 255
     eaa:	09 f4       	brne	.+2      	; 0xeae <is_food_at+0xc>
     eac:	90 e0       	ldi	r25, 0x00	; 0
}
     eae:	89 2f       	mov	r24, r25
     eb0:	08 95       	ret

00000eb2 <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     eb2:	ff 92       	push	r15
     eb4:	0f 93       	push	r16
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     ebc:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <numFoodItems>
     ec0:	88 30       	cpi	r24, 0x08	; 8
     ec2:	0c f0       	brlt	.+2      	; 0xec6 <add_food_item+0x14>
     ec4:	44 c0       	rjmp	.+136    	; 0xf4e <add_food_item+0x9c>
     ec6:	00 e0       	ldi	r16, 0x00	; 0
     ec8:	10 e0       	ldi	r17, 0x00	; 0
     eca:	d0 e0       	ldi	r29, 0x00	; 0
     ecc:	c0 e0       	ldi	r28, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <add_food_item+0x22>
     ed0:	0f 5f       	subi	r16, 0xFF	; 255
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     ed4:	2c 2f       	mov	r18, r28
     ed6:	cc 0f       	add	r28, r28
     ed8:	33 0b       	sbc	r19, r19
     eda:	2d 5f       	subi	r18, 0xFD	; 253
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	20 0f       	add	r18, r16
     ee0:	31 1f       	adc	r19, r17
     ee2:	2f 70       	andi	r18, 0x0F	; 15
     ee4:	30 78       	andi	r19, 0x80	; 128
     ee6:	33 23       	and	r19, r19
     ee8:	34 f4       	brge	.+12     	; 0xef6 <add_food_item+0x44>
     eea:	21 50       	subi	r18, 0x01	; 1
     eec:	31 09       	sbc	r19, r1
     eee:	20 6f       	ori	r18, 0xF0	; 240
     ef0:	3f 6f       	ori	r19, 0xFF	; 255
     ef2:	2f 5f       	subi	r18, 0xFF	; 255
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	82 2f       	mov	r24, r18
     ef8:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     efa:	6d 2f       	mov	r22, r29
     efc:	dd 0f       	add	r29, r29
     efe:	77 0b       	sbc	r23, r23
     f00:	6b 5f       	subi	r22, 0xFB	; 251
     f02:	7f 4f       	sbci	r23, 0xFF	; 255
     f04:	67 70       	andi	r22, 0x07	; 7
     f06:	70 78       	andi	r23, 0x80	; 128
     f08:	77 23       	and	r23, r23
     f0a:	34 f4       	brge	.+12     	; 0xf18 <add_food_item+0x66>
     f0c:	61 50       	subi	r22, 0x01	; 1
     f0e:	71 09       	sbc	r23, r1
     f10:	68 6f       	ori	r22, 0xF8	; 248
     f12:	7f 6f       	ori	r23, 0xFF	; 255
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     f1a:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
     f1e:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     f20:	03 36       	cpi	r16, 0x63	; 99
     f22:	11 05       	cpc	r17, r1
     f24:	b1 f0       	breq	.+44     	; 0xf52 <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     f26:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     f2a:	81 11       	cpse	r24, r1
     f2c:	d1 cf       	rjmp	.-94     	; 0xed0 <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     f2e:	8f 2d       	mov	r24, r15
     f30:	0e 94 51 07 	call	0xea2	; 0xea2 <is_food_at>
     f34:	81 11       	cpse	r24, r1
     f36:	cc cf       	rjmp	.-104    	; 0xed0 <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     f38:	8f 2d       	mov	r24, r15
     f3a:	0e 94 1d 11 	call	0x223a	; 0x223a <is_superfood_at>
     f3e:	81 11       	cpse	r24, r1
     f40:	c7 cf       	rjmp	.-114    	; 0xed0 <add_food_item+0x1e>
     f42:	8f 2d       	mov	r24, r15
     f44:	0e 94 6f 0c 	call	0x18de	; 0x18de <is_rat_at>
     f48:	81 11       	cpse	r24, r1
     f4a:	c2 cf       	rjmp	.-124    	; 0xed0 <add_food_item+0x1e>
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     f4e:	88 e0       	ldi	r24, 0x08	; 8
     f50:	0f c0       	rjmp	.+30     	; 0xf70 <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     f52:	88 e0       	ldi	r24, 0x08	; 8
     f54:	0d c0       	rjmp	.+26     	; 0xf70 <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     f56:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <numFoodItems>
	foodPositions[newFoodID] = test_position;
     f5a:	e8 2f       	mov	r30, r24
     f5c:	08 2e       	mov	r0, r24
     f5e:	00 0c       	add	r0, r0
     f60:	ff 0b       	sbc	r31, r31
     f62:	e3 54       	subi	r30, 0x43	; 67
     f64:	fd 4f       	sbci	r31, 0xFD	; 253
     f66:	f0 82       	st	Z, r15
	numFoodItems++;
     f68:	8f 5f       	subi	r24, 0xFF	; 255
     f6a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     f6e:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	1f 91       	pop	r17
     f76:	0f 91       	pop	r16
     f78:	ff 90       	pop	r15
     f7a:	08 95       	ret

00000f7c <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     f7c:	e8 2f       	mov	r30, r24
     f7e:	88 0f       	add	r24, r24
     f80:	ff 0b       	sbc	r31, r31
     f82:	e3 54       	subi	r30, 0x43	; 67
     f84:	fd 4f       	sbci	r31, 0xFD	; 253
}
     f86:	80 81       	ld	r24, Z
     f88:	08 95       	ret

00000f8a <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     f8a:	88 23       	and	r24, r24
     f8c:	b4 f0       	brlt	.+44     	; 0xfba <remove_food+0x30>
     f8e:	20 91 bc 02 	lds	r18, 0x02BC	; 0x8002bc <numFoodItems>
     f92:	82 17       	cp	r24, r18
     f94:	94 f4       	brge	.+36     	; 0xfba <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	82 17       	cp	r24, r18
     f9a:	64 f4       	brge	.+24     	; 0xfb4 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     f9c:	e8 2f       	mov	r30, r24
     f9e:	08 2e       	mov	r0, r24
     fa0:	00 0c       	add	r0, r0
     fa2:	ff 0b       	sbc	r31, r31
     fa4:	e3 54       	subi	r30, 0x43	; 67
     fa6:	fd 4f       	sbci	r31, 0xFD	; 253
     fa8:	90 81       	ld	r25, Z
     faa:	31 97       	sbiw	r30, 0x01	; 1
     fac:	90 83       	st	Z, r25
     fae:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     fb0:	82 17       	cp	r24, r18
     fb2:	a4 f3       	brlt	.-24     	; 0xf9c <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	20 93 bc 02 	sts	0x02BC, r18	; 0x8002bc <numFoodItems>
     fba:	08 95       	ret

00000fbc <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	c8 2f       	mov	r28, r24
     fc4:	16 2f       	mov	r17, r22
     fc6:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
     fca:	d8 2f       	mov	r29, r24
     fcc:	8c 2f       	mov	r24, r28
     fce:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
     fd2:	41 2f       	mov	r20, r17
     fd4:	6d 2f       	mov	r22, r29
     fd6:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_update_pixel>
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	08 95       	ret

00000fe2 <init_game>:
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	0e 94 8f 09 	call	0x131e	; 0x131e <ledmatrix_clear>
     fea:	0e 94 f6 11 	call	0x23ec	; 0x23ec <init_score_on_terminal>
     fee:	88 e5       	ldi	r24, 0x58	; 88
     ff0:	92 e0       	ldi	r25, 0x02	; 2
     ff2:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <current_speed+0x1>
     ff6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <current_speed>
     ffa:	0e 94 76 0c 	call	0x18ec	; 0x18ec <add_new_rat_position>
     ffe:	0e 94 0f 02 	call	0x41e	; 0x41e <play_start_game_sound_effect>
    1002:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <init_snake>
    1006:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <get_snake_head_position>
    100a:	6f e0       	ldi	r22, 0x0F	; 15
    100c:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    1010:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <get_snake_tail_position>
    1014:	60 ef       	ldi	r22, 0xF0	; 240
    1016:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    101a:	0e 94 34 07 	call	0xe68	; 0xe68 <init_food>
    101e:	c3 e0       	ldi	r28, 0x03	; 3
    1020:	0e 94 59 07 	call	0xeb2	; 0xeb2 <add_food_item>
    1024:	d8 2f       	mov	r29, r24
    1026:	0e 94 98 09 	call	0x1330	; 0x1330 <is_position_valid>
    102a:	88 23       	and	r24, r24
    102c:	21 f0       	breq	.+8      	; 0x1036 <init_game+0x54>
    102e:	63 e3       	ldi	r22, 0x33	; 51
    1030:	8d 2f       	mov	r24, r29
    1032:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    1036:	c1 50       	subi	r28, 0x01	; 1
    1038:	99 f7       	brne	.-26     	; 0x1020 <init_game+0x3e>
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	08 95       	ret

00001040 <increase_game_speed>:
    1040:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <current_speed>
    1044:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <current_speed+0x1>
    1048:	8b 3f       	cpi	r24, 0xFB	; 251
    104a:	91 05       	cpc	r25, r1
    104c:	a4 f0       	brlt	.+40     	; 0x1076 <increase_game_speed+0x36>
    104e:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <current_speed>
    1052:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <current_speed+0x1>
    1056:	80 e0       	ldi	r24, 0x00	; 0
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	0e 94 29 13 	call	0x2652	; 0x2652 <__floatunsisf>
    105e:	26 e6       	ldi	r18, 0x66	; 102
    1060:	36 e6       	ldi	r19, 0x66	; 102
    1062:	46 e6       	ldi	r20, 0x66	; 102
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 8f 13 	call	0x271e	; 0x271e <__mulsf3>
    106a:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <__fixunssfsi>
    106e:	70 93 44 01 	sts	0x0144, r23	; 0x800144 <current_speed+0x1>
    1072:	60 93 43 01 	sts	0x0143, r22	; 0x800143 <current_speed>
    1076:	08 95       	ret

00001078 <attempt_to_move_snake_forward>:
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <get_snake_head_position>
    1084:	d8 2f       	mov	r29, r24
    1086:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <advance_snake_head>
    108a:	c8 2f       	mov	r28, r24
    108c:	88 23       	and	r24, r24
    108e:	0c f4       	brge	.+2      	; 0x1092 <attempt_to_move_snake_forward+0x1a>
    1090:	55 c0       	rjmp	.+170    	; 0x113c <attempt_to_move_snake_forward+0xc4>
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <add_to_score>
    109a:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <get_snake_head_position>
    109e:	18 2f       	mov	r17, r24
    10a0:	8e ef       	ldi	r24, 0xFE	; 254
    10a2:	8c 0f       	add	r24, r28
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	c0 f4       	brcc	.+48     	; 0x10d8 <attempt_to_move_snake_forward+0x60>
    10a8:	81 2f       	mov	r24, r17
    10aa:	0e 94 37 07 	call	0xe6e	; 0xe6e <food_at>
    10ae:	0e 94 c5 07 	call	0xf8a	; 0xf8a <remove_food>
    10b2:	0e 94 20 02 	call	0x440	; 0x440 <play_eating_food_sound_effect>
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <add_to_score>
    10be:	0e 94 20 08 	call	0x1040	; 0x1040 <increase_game_speed>
    10c2:	0e 94 59 07 	call	0xeb2	; 0xeb2 <add_food_item>
    10c6:	08 2f       	mov	r16, r24
    10c8:	0e 94 98 09 	call	0x1330	; 0x1330 <is_position_valid>
    10cc:	88 23       	and	r24, r24
    10ce:	21 f0       	breq	.+8      	; 0x10d8 <attempt_to_move_snake_forward+0x60>
    10d0:	63 e3       	ldi	r22, 0x33	; 51
    10d2:	80 2f       	mov	r24, r16
    10d4:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    10d8:	8c ef       	ldi	r24, 0xFC	; 252
    10da:	8c 0f       	add	r24, r28
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	50 f4       	brcc	.+20     	; 0x10f4 <attempt_to_move_snake_forward+0x7c>
    10e0:	0e 94 11 11 	call	0x2222	; 0x2222 <eat_superfood_from_board>
    10e4:	89 e0       	ldi	r24, 0x09	; 9
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <add_to_score>
    10ec:	0e 94 20 08 	call	0x1040	; 0x1040 <increase_game_speed>
    10f0:	0e 94 20 02 	call	0x440	; 0x440 <play_eating_food_sound_effect>
    10f4:	8a ef       	ldi	r24, 0xFA	; 250
    10f6:	8c 0f       	add	r24, r28
    10f8:	82 30       	cpi	r24, 0x02	; 2
    10fa:	50 f4       	brcc	.+20     	; 0x1110 <attempt_to_move_snake_forward+0x98>
    10fc:	0e 94 76 0c 	call	0x18ec	; 0x18ec <add_new_rat_position>
    1100:	84 e0       	ldi	r24, 0x04	; 4
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <add_to_score>
    1108:	0e 94 20 08 	call	0x1040	; 0x1040 <increase_game_speed>
    110c:	0e 94 20 02 	call	0x440	; 0x440 <play_eating_food_sound_effect>
    1110:	cd 7f       	andi	r28, 0xFD	; 253
    1112:	c1 30       	cpi	r28, 0x01	; 1
    1114:	11 f0       	breq	.+4      	; 0x111a <attempt_to_move_snake_forward+0xa2>
    1116:	c5 30       	cpi	r28, 0x05	; 5
    1118:	29 f4       	brne	.+10     	; 0x1124 <attempt_to_move_snake_forward+0xac>
    111a:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <advance_snake_tail>
    111e:	60 e0       	ldi	r22, 0x00	; 0
    1120:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    1124:	60 ef       	ldi	r22, 0xF0	; 240
    1126:	8d 2f       	mov	r24, r29
    1128:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    112c:	6f e0       	ldi	r22, 0x0F	; 15
    112e:	81 2f       	mov	r24, r17
    1130:	0e 94 de 07 	call	0xfbc	; 0xfbc <update_display_at_position>
    1134:	0e 94 11 12 	call	0x2422	; 0x2422 <update_terminal_score>
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	01 c0       	rjmp	.+2      	; 0x113e <attempt_to_move_snake_forward+0xc6>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	08 95       	ret

00001148 <get_current_game_speed>:
    1148:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <current_speed>
    114c:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <current_speed+0x1>
    1150:	08 95       	ret

00001152 <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    1152:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <current_speed+0x1>
    1156:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <current_speed>
    115a:	08 95       	ret

0000115c <init_joystick>:
	uint16_t value;
	uint8_t x_or_y = 0;	/* 0 = x, 1 = y */

void init_joystick(void){
	/* Set up the serial port for stdin communication at 19200 baud, no echo */
	init_serial_stdio(19200,0);
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	7b e4       	ldi	r23, 0x4B	; 75
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <init_serial_stdio>
	
	/* Turn on global interrupts */
	sei();
    116a:	78 94       	sei
	
	// Set up ADC - AVCC reference, right adjust
	// Input selection doesn't matter yet - we'll swap this around in the while
	// loop below.
	ADMUX = (1<<REFS0);
    116c:	80 e4       	ldi	r24, 0x40	; 64
    116e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// Turn on the ADC (but don't start a conversion yet). Choose a clock
	// divider of 64. (The ADC clock must be somewhere
	// between 50kHz and 200kHz. We will divide our 8MHz clock by 64
	// to give us 125kHz.)
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1);
    1172:	86 e8       	ldi	r24, 0x86	; 134
    1174:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	
	/* Print a welcome message
	*/
	printf("ADC Test\n");
    1178:	87 e2       	ldi	r24, 0x27	; 39
    117a:	92 e0       	ldi	r25, 0x02	; 2
    117c:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <puts>
    1180:	08 95       	ret

00001182 <read_joystick>:
}

uint16_t read_joystick(void){
	 // Set the ADC mux to choose ADC0 if x_or_y is 0, ADC1 if x_or_y is 1
	if(x_or_y == 0) {
    1182:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <x_or_y>
    1186:	81 11       	cpse	r24, r1
    1188:	06 c0       	rjmp	.+12     	; 0x1196 <read_joystick+0x14>
		ADMUX &= ~1;
    118a:	ec e7       	ldi	r30, 0x7C	; 124
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	80 81       	ld	r24, Z
    1190:	8e 7f       	andi	r24, 0xFE	; 254
    1192:	80 83       	st	Z, r24
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <read_joystick+0x1e>
		} else {
		ADMUX |= 1;
    1196:	ec e7       	ldi	r30, 0x7C	; 124
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	81 60       	ori	r24, 0x01	; 1
    119e:	80 83       	st	Z, r24
	}
	// Start the ADC conversion
	ADCSRA |= (1<<ADSC);
    11a0:	ea e7       	ldi	r30, 0x7A	; 122
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 64       	ori	r24, 0x40	; 64
    11a8:	80 83       	st	Z, r24

	while(ADCSRA & (1<<ADSC)) {
    11aa:	80 81       	ld	r24, Z
    11ac:	86 fd       	sbrc	r24, 6
    11ae:	fd cf       	rjmp	.-6      	; 0x11aa <read_joystick+0x28>
		; /* Wait until conversion finished */
	}
	value = ADC; // read the value
    11b0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    11b4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    11b8:	30 93 c6 02 	sts	0x02C6, r19	; 0x8002c6 <value+0x1>
    11bc:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <value>
	// Next time through the loop, do the other direction
	x_or_y ^= 1;
    11c0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <x_or_y>
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	98 27       	eor	r25, r24
    11c8:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <x_or_y>

	return value; 
}
    11cc:	c9 01       	movw	r24, r18
    11ce:	08 95       	ret

000011d0 <get_joystick_direction>:

SnakeDirnType get_joystick_direction(void){
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
	int16_t y_axis, x_axis; 
	
	if (x_or_y){
    11d8:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <x_or_y>
    11dc:	88 23       	and	r24, r24
    11de:	99 f0       	breq	.+38     	; 0x1206 <get_joystick_direction+0x36>
		y_axis = read_joystick() - middle_value; 
    11e0:	0e 94 c1 08 	call	0x1182	; 0x1182 <read_joystick>
    11e4:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    11e8:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    11ec:	ec 01       	movw	r28, r24
    11ee:	c2 1b       	sub	r28, r18
    11f0:	d3 0b       	sbc	r29, r19
		x_axis = read_joystick()-middle_value; 
    11f2:	0e 94 c1 08 	call	0x1182	; 0x1182 <read_joystick>
    11f6:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    11fa:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    11fe:	8c 01       	movw	r16, r24
    1200:	02 1b       	sub	r16, r18
    1202:	13 0b       	sbc	r17, r19
    1204:	12 c0       	rjmp	.+36     	; 0x122a <get_joystick_direction+0x5a>
	}else{
		x_axis =read_joystick() - middle_value;
    1206:	0e 94 c1 08 	call	0x1182	; 0x1182 <read_joystick>
    120a:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    120e:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    1212:	8c 01       	movw	r16, r24
    1214:	02 1b       	sub	r16, r18
    1216:	13 0b       	sbc	r17, r19
		y_axis = read_joystick() - middle_value; 			
    1218:	0e 94 c1 08 	call	0x1182	; 0x1182 <read_joystick>
    121c:	20 91 45 01 	lds	r18, 0x0145	; 0x800145 <middle_value>
    1220:	30 91 46 01 	lds	r19, 0x0146	; 0x800146 <middle_value+0x1>
    1224:	ec 01       	movw	r28, r24
    1226:	c2 1b       	sub	r28, r18
    1228:	d3 0b       	sbc	r29, r19
		}
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
    122a:	9e 01       	movw	r18, r28
    122c:	dd 23       	and	r29, r29
    122e:	24 f4       	brge	.+8      	; 0x1238 <get_joystick_direction+0x68>
    1230:	22 27       	eor	r18, r18
    1232:	33 27       	eor	r19, r19
    1234:	2c 1b       	sub	r18, r28
    1236:	3d 0b       	sbc	r19, r29
    1238:	c8 01       	movw	r24, r16
    123a:	11 23       	and	r17, r17
    123c:	24 f4       	brge	.+8      	; 0x1246 <get_joystick_direction+0x76>
    123e:	88 27       	eor	r24, r24
    1240:	99 27       	eor	r25, r25
    1242:	80 1b       	sub	r24, r16
    1244:	91 0b       	sbc	r25, r17
    1246:	82 17       	cp	r24, r18
    1248:	93 07       	cpc	r25, r19
    124a:	64 f4       	brge	.+24     	; 0x1264 <get_joystick_direction+0x94>
    124c:	40 91 47 01 	lds	r20, 0x0147	; 0x800147 <minimum_threshold>
    1250:	50 91 48 01 	lds	r21, 0x0148	; 0x800148 <minimum_threshold+0x1>
    1254:	42 17       	cp	r20, r18
    1256:	53 07       	cpc	r21, r19
    1258:	28 f4       	brcc	.+10     	; 0x1264 <get_joystick_direction+0x94>
		if (y_axis >0){return SNAKE_UP;}
    125a:	1c 16       	cp	r1, r28
    125c:	1d 06       	cpc	r1, r29
    125e:	74 f0       	brlt	.+28     	; 0x127c <get_joystick_direction+0xac>
			else{return SNAKE_DOWN;}
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	11 c0       	rjmp	.+34     	; 0x1286 <get_joystick_direction+0xb6>
	}else if(abs(x_axis) >minimum_threshold){
    1264:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <minimum_threshold>
    1268:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <minimum_threshold+0x1>
    126c:	28 17       	cp	r18, r24
    126e:	39 07       	cpc	r19, r25
    1270:	38 f4       	brcc	.+14     	; 0x1280 <get_joystick_direction+0xb0>
		if (x_axis >0){return SNAKE_RIGHT;}
    1272:	10 16       	cp	r1, r16
    1274:	11 06       	cpc	r1, r17
    1276:	34 f0       	brlt	.+12     	; 0x1284 <get_joystick_direction+0xb4>
			else{return SNAKE_LEFT;}
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	05 c0       	rjmp	.+10     	; 0x1286 <get_joystick_direction+0xb6>
		x_axis =read_joystick() - middle_value;
		y_axis = read_joystick() - middle_value; 			
		}
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
		if (y_axis >0){return SNAKE_UP;}
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	03 c0       	rjmp	.+6      	; 0x1286 <get_joystick_direction+0xb6>
			else{return SNAKE_DOWN;}
	}else if(abs(x_axis) >minimum_threshold){
		if (x_axis >0){return SNAKE_RIGHT;}
			else{return SNAKE_LEFT;}
	}else{
		return -1; 
    1280:	8f ef       	ldi	r24, 0xFF	; 255
    1282:	01 c0       	rjmp	.+2      	; 0x1286 <get_joystick_direction+0xb6>
	
	if (abs(y_axis)> abs(x_axis) && abs(y_axis) > minimum_threshold){
		if (y_axis >0){return SNAKE_UP;}
			else{return SNAKE_DOWN;}
	}else if(abs(x_axis) >minimum_threshold){
		if (x_axis >0){return SNAKE_RIGHT;}
    1284:	81 e0       	ldi	r24, 0x01	; 1
			else{return SNAKE_LEFT;}
	}else{
		return -1; 
	}
} 
    1286:	df 91       	pop	r29
    1288:	cf 91       	pop	r28
    128a:	1f 91       	pop	r17
    128c:	0f 91       	pop	r16
    128e:	08 95       	ret

00001290 <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    1290:	80 e8       	ldi	r24, 0x80	; 128
    1292:	0e 94 9c 10 	call	0x2138	; 0x2138 <spi_setup_master>
    1296:	08 95       	ret

00001298 <ledmatrix_update_pixel>:
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	80 31       	cpi	r24, 0x10	; 16
    12a0:	b0 f4       	brcc	.+44     	; 0x12ce <ledmatrix_update_pixel+0x36>
    12a2:	68 30       	cpi	r22, 0x08	; 8
    12a4:	a0 f4       	brcc	.+40     	; 0x12ce <ledmatrix_update_pixel+0x36>
    12a6:	14 2f       	mov	r17, r20
    12a8:	c6 2f       	mov	r28, r22
    12aa:	d8 2f       	mov	r29, r24
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    12b2:	6c 2f       	mov	r22, r28
    12b4:	67 70       	andi	r22, 0x07	; 7
    12b6:	80 e1       	ldi	r24, 0x10	; 16
    12b8:	68 9f       	mul	r22, r24
    12ba:	90 01       	movw	r18, r0
    12bc:	11 24       	eor	r1, r1
    12be:	8d 2f       	mov	r24, r29
    12c0:	8f 70       	andi	r24, 0x0F	; 15
    12c2:	82 2b       	or	r24, r18
    12c4:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    12c8:	81 2f       	mov	r24, r17
    12ca:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	1f 91       	pop	r17
    12d4:	08 95       	ret

000012d6 <ledmatrix_update_column>:
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	80 31       	cpi	r24, 0x10	; 16
    12e0:	90 f4       	brcc	.+36     	; 0x1306 <ledmatrix_update_column+0x30>
    12e2:	8b 01       	movw	r16, r22
    12e4:	c8 2f       	mov	r28, r24
    12e6:	83 e0       	ldi	r24, 0x03	; 3
    12e8:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    12ec:	8c 2f       	mov	r24, r28
    12ee:	8f 70       	andi	r24, 0x0F	; 15
    12f0:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    12f4:	e8 01       	movw	r28, r16
    12f6:	08 5f       	subi	r16, 0xF8	; 248
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	89 91       	ld	r24, Y+
    12fc:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    1300:	c0 17       	cp	r28, r16
    1302:	d1 07       	cpc	r29, r17
    1304:	d1 f7       	brne	.-12     	; 0x12fa <ledmatrix_update_column+0x24>
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	08 95       	ret

00001310 <ledmatrix_shift_display_left>:
    1310:	84 e0       	ldi	r24, 0x04	; 4
    1312:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    131c:	08 95       	ret

0000131e <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    131e:	8f e0       	ldi	r24, 0x0F	; 15
    1320:	0e 94 c4 10 	call	0x2188	; 0x2188 <spi_send_byte>
    1324:	08 95       	ret

00001326 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    1326:	82 95       	swap	r24
    1328:	8f 70       	andi	r24, 0x0F	; 15
    132a:	08 95       	ret

0000132c <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    132c:	8f 70       	andi	r24, 0x0F	; 15
    132e:	08 95       	ret

00001330 <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    1330:	83 fb       	bst	r24, 3
    1332:	88 27       	eor	r24, r24
    1334:	80 f9       	bld	r24, 0
}
    1336:	91 e0       	ldi	r25, 0x01	; 1
    1338:	89 27       	eor	r24, r25
    133a:	08 95       	ret

0000133c <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    133c:	20 e1       	ldi	r18, 0x10	; 16
    133e:	82 9f       	mul	r24, r18
    1340:	c0 01       	movw	r24, r0
    1342:	11 24       	eor	r1, r1
    1344:	67 70       	andi	r22, 0x07	; 7
}
    1346:	86 2b       	or	r24, r22
    1348:	08 95       	ret

0000134a <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    134a:	0e 94 48 09 	call	0x1290	; 0x1290 <ledmatrix_setup>
	init_joystick();
    134e:	0e 94 ae 08 	call	0x115c	; 0x115c <init_joystick>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    1352:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	60 e0       	ldi	r22, 0x00	; 0
    135a:	7b e4       	ldi	r23, 0x4B	; 75
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    1364:	0e 94 2a 12 	call	0x2454	; 0x2454 <init_timer0>
	
	// Turn on global interrupts
	sei();
    1368:	78 94       	sei
    136a:	08 95       	ret

0000136c <splash_screen>:
}

void splash_screen(void) {
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	0e 94 b6 11 	call	0x236c	; 0x236c <set_display_attribute>
	clear_terminal();
    137c:	0e 94 ad 11 	call	0x235a	; 0x235a <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1380:	0e 94 c3 11 	call	0x2386	; 0x2386 <hide_cursor>
	display_start_terminal_screen();
    1384:	0e 94 d5 11 	call	0x23aa	; 0x23aa <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1388:	0e 94 8f 09 	call	0x131e	; 0x131e <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    138c:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    138e:	0f 2e       	mov	r0, r31
    1390:	ff e0       	ldi	r31, 0x0F	; 15
    1392:	ff 2e       	mov	r15, r31
    1394:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    1396:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1398:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    139a:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    139c:	6c 2f       	mov	r22, r28
    139e:	80 e3       	ldi	r24, 0x30	; 48
    13a0:	92 e0       	ldi	r25, 0x02	; 2
    13a2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    13a6:	0d c0       	rjmp	.+26     	; 0x13c2 <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13a8:	2f e7       	ldi	r18, 0x7F	; 127
    13aa:	8c e2       	ldi	r24, 0x2C	; 44
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	80 40       	sbci	r24, 0x00	; 0
    13b2:	90 40       	sbci	r25, 0x00	; 0
    13b4:	e1 f7       	brne	.-8      	; 0x13ae <splash_screen+0x42>
    13b6:	00 c0       	rjmp	.+0      	; 0x13b8 <splash_screen+0x4c>
    13b8:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    13ba:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    13be:	8f 3f       	cpi	r24, 0xFF	; 255
    13c0:	a9 f5       	brne	.+106    	; 0x142c <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    13c2:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <scroll_display>
    13c6:	81 11       	cpse	r24, r1
    13c8:	ef cf       	rjmp	.-34     	; 0x13a8 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    13ca:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <random>
    13ce:	dc 01       	movw	r26, r24
    13d0:	cb 01       	movw	r24, r22
    13d2:	83 70       	andi	r24, 0x03	; 3
    13d4:	99 27       	eor	r25, r25
    13d6:	aa 27       	eor	r26, r26
    13d8:	b0 78       	andi	r27, 0x80	; 128
    13da:	bb 23       	and	r27, r27
    13dc:	54 f4       	brge	.+20     	; 0x13f2 <splash_screen+0x86>
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	a1 09       	sbc	r26, r1
    13e2:	b1 09       	sbc	r27, r1
    13e4:	8c 6f       	ori	r24, 0xFC	; 252
    13e6:	9f 6f       	ori	r25, 0xFF	; 255
    13e8:	af 6f       	ori	r26, 0xFF	; 255
    13ea:	bf 6f       	ori	r27, 0xFF	; 255
    13ec:	01 96       	adiw	r24, 0x01	; 1
    13ee:	a1 1d       	adc	r26, r1
    13f0:	b1 1d       	adc	r27, r1
    13f2:	81 30       	cpi	r24, 0x01	; 1
    13f4:	91 05       	cpc	r25, r1
    13f6:	a1 05       	cpc	r26, r1
    13f8:	b1 05       	cpc	r27, r1
    13fa:	91 f0       	breq	.+36     	; 0x1420 <splash_screen+0xb4>
    13fc:	2c f4       	brge	.+10     	; 0x1408 <splash_screen+0x9c>
    13fe:	89 2b       	or	r24, r25
    1400:	8a 2b       	or	r24, r26
    1402:	8b 2b       	or	r24, r27
    1404:	59 f0       	breq	.+22     	; 0x141c <splash_screen+0xb0>
    1406:	ca cf       	rjmp	.-108    	; 0x139c <splash_screen+0x30>
    1408:	82 30       	cpi	r24, 0x02	; 2
    140a:	91 05       	cpc	r25, r1
    140c:	a1 05       	cpc	r26, r1
    140e:	b1 05       	cpc	r27, r1
    1410:	49 f0       	breq	.+18     	; 0x1424 <splash_screen+0xb8>
    1412:	03 97       	sbiw	r24, 0x03	; 3
    1414:	a1 05       	cpc	r26, r1
    1416:	b1 05       	cpc	r27, r1
    1418:	39 f0       	breq	.+14     	; 0x1428 <splash_screen+0xbc>
    141a:	c0 cf       	rjmp	.-128    	; 0x139c <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    141c:	cd 2f       	mov	r28, r29
    141e:	be cf       	rjmp	.-132    	; 0x139c <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    1420:	cf 2d       	mov	r28, r15
    1422:	bc cf       	rjmp	.-136    	; 0x139c <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    1424:	c0 2f       	mov	r28, r16
    1426:	ba cf       	rjmp	.-140    	; 0x139c <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    1428:	c1 2f       	mov	r28, r17
    142a:	b8 cf       	rjmp	.-144    	; 0x139c <splash_screen+0x30>
		}
	}
}
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	1f 91       	pop	r17
    1432:	0f 91       	pop	r16
    1434:	ff 90       	pop	r15
    1436:	08 95       	ret

00001438 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    1438:	0e 94 ad 11 	call	0x235a	; 0x235a <clear_terminal>
	
	// Initialise the game and display
	init_game();
    143c:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <init_game>
		
	// Initialise the score
	init_score();
    1440:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    1444:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    1448:	0e 94 a0 0e 	call	0x1d40	; 0x1d40 <clear_serial_input_buffer>
    144c:	08 95       	ret

0000144e <play_game>:
}

void play_game(void) {
    144e:	4f 92       	push	r4
    1450:	5f 92       	push	r5
    1452:	7f 92       	push	r7
    1454:	8f 92       	push	r8
    1456:	9f 92       	push	r9
    1458:	af 92       	push	r10
    145a:	bf 92       	push	r11
    145c:	cf 92       	push	r12
    145e:	df 92       	push	r13
    1460:	ef 92       	push	r14
    1462:	ff 92       	push	r15
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    146c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    1470:	4b 01       	movw	r8, r22
    1472:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    1474:	00 e0       	ldi	r16, 0x00	; 0
    1476:	1f ef       	ldi	r17, 0xFF	; 255
 			break;

		}else if(serial_input == 'n'|| serial_input == 'N'){
			break; 
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1478:	0f 2e       	mov	r0, r31
    147a:	ff ed       	ldi	r31, 0xDF	; 223
    147c:	7f 2e       	mov	r7, r31
    147e:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1480:	0f 2e       	mov	r0, r31
    1482:	fe ed       	ldi	r31, 0xDE	; 222
    1484:	4f 2e       	mov	r4, r31
    1486:	f3 e0       	ldi	r31, 0x03	; 3
    1488:	5f 2e       	mov	r5, r31
    148a:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
		if(time_to_add_superfood()){
    148c:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <time_to_add_superfood>
    1490:	81 11       	cpse	r24, r1
		add_superfood_to_board();}
    1492:	0e 94 2a 11 	call	0x2254	; 0x2254 <add_superfood_to_board>
		if(time_to_remove_superfood()){
    1496:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <time_to_remove_superfood>
    149a:	81 11       	cpse	r24, r1
		remove_superfood_from_board();}
    149c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <remove_superfood_from_board>
		if(is_time_to_move_rat()){move_rat();}
    14a0:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <is_time_to_move_rat>
    14a4:	81 11       	cpse	r24, r1
    14a6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <move_rat>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    14aa:	0e 94 49 12 	call	0x2492	; 0x2492 <timer_is_paused>
    14ae:	89 2b       	or	r24, r25
    14b0:	19 f0       	breq	.+6      	; 0x14b8 <play_game+0x6a>
			button = -1;
			empty_button_queue();
    14b2:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    14b6:	06 c0       	rjmp	.+12     	; 0x14c4 <play_game+0x76>
			}else{
		button = button_pushed();}
    14b8:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    14bc:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    14be:	8f 3f       	cpi	r24, 0xFF	; 255
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <play_game+0x76>
    14c2:	90 c0       	rjmp	.+288    	; 0x15e4 <play_game+0x196>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    14c4:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <serial_input_available>
    14c8:	88 23       	and	r24, r24
    14ca:	09 f4       	brne	.+2      	; 0x14ce <play_game+0x80>
    14cc:	99 c0       	rjmp	.+306    	; 0x1600 <play_game+0x1b2>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    14ce:	f2 01       	movw	r30, r4
    14d0:	80 81       	ld	r24, Z
    14d2:	91 81       	ldd	r25, Z+1	; 0x01
    14d4:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <fgetc>
    14d8:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    14da:	01 11       	cpse	r16, r1
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <play_game+0x96>
    14de:	8b 31       	cpi	r24, 0x1B	; 27
    14e0:	51 f4       	brne	.+20     	; 0x14f6 <play_game+0xa8>
    14e2:	8b c0       	rjmp	.+278    	; 0x15fa <play_game+0x1ac>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    14e4:	01 30       	cpi	r16, 0x01	; 1
    14e6:	19 f4       	brne	.+6      	; 0x14ee <play_game+0xa0>
    14e8:	8b 35       	cpi	r24, 0x5B	; 91
    14ea:	29 f4       	brne	.+10     	; 0x14f6 <play_game+0xa8>
    14ec:	88 c0       	rjmp	.+272    	; 0x15fe <play_game+0x1b0>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    14ee:	02 30       	cpi	r16, 0x02	; 2
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <play_game+0xa6>
    14f2:	7d c0       	rjmp	.+250    	; 0x15ee <play_game+0x1a0>
    14f4:	71 c0       	rjmp	.+226    	; 0x15d8 <play_game+0x18a>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    14f6:	0e 94 49 12 	call	0x2492	; 0x2492 <timer_is_paused>
    14fa:	89 2b       	or	r24, r25
    14fc:	49 f0       	breq	.+18     	; 0x1510 <play_game+0xc2>
    14fe:	43 c0       	rjmp	.+134    	; 0x1586 <play_game+0x138>
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1500:	dd 23       	and	r29, r29
    1502:	11 f0       	breq	.+4      	; 0x1508 <play_game+0xba>
    1504:	08 c0       	rjmp	.+16     	; 0x1516 <play_game+0xc8>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1506:	00 e0       	ldi	r16, 0x00	; 0
	if(!(timer_is_paused())){
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <set_snake_dirn>
    150e:	47 c0       	rjmp	.+142    	; 0x159e <play_game+0x150>
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	d1 2f       	mov	r29, r17
    1514:	01 c0       	rjmp	.+2      	; 0x1518 <play_game+0xca>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1516:	c1 2f       	mov	r28, r17
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    1518:	d2 30       	cpi	r29, 0x02	; 2
    151a:	19 f0       	breq	.+6      	; 0x1522 <play_game+0xd4>
    151c:	81 2f       	mov	r24, r17
    151e:	81 34       	cpi	r24, 0x41	; 65
    1520:	21 f4       	brne	.+8      	; 0x152a <play_game+0xdc>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <set_snake_dirn>
    1528:	3a c0       	rjmp	.+116    	; 0x159e <play_game+0x150>
		} else if(button==3 || escape_sequence_char=='D') {
    152a:	d3 30       	cpi	r29, 0x03	; 3
    152c:	11 f0       	breq	.+4      	; 0x1532 <play_game+0xe4>
    152e:	84 34       	cpi	r24, 0x44	; 68
    1530:	21 f4       	brne	.+8      	; 0x153a <play_game+0xec>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    1532:	83 e0       	ldi	r24, 0x03	; 3
    1534:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <set_snake_dirn>
    1538:	32 c0       	rjmp	.+100    	; 0x159e <play_game+0x150>
		} else if (button==1 || escape_sequence_char == 'B') {
    153a:	d1 30       	cpi	r29, 0x01	; 1
    153c:	11 f0       	breq	.+4      	; 0x1542 <play_game+0xf4>
    153e:	82 34       	cpi	r24, 0x42	; 66
    1540:	29 f4       	brne	.+10     	; 0x154c <play_game+0xfe>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    1542:	82 e0       	ldi	r24, 0x02	; 2
    1544:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <set_snake_dirn>
    1548:	2a c0       	rjmp	.+84     	; 0x159e <play_game+0x150>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    154a:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    154c:	8c 2f       	mov	r24, r28
    154e:	8f 7d       	andi	r24, 0xDF	; 223
    1550:	80 35       	cpi	r24, 0x50	; 80
    1552:	19 f4       	brne	.+6      	; 0x155a <play_game+0x10c>
			toggle_timer_clock();
    1554:	0e 94 42 12 	call	0x2484	; 0x2484 <toggle_timer_clock>
    1558:	22 c0       	rjmp	.+68     	; 0x159e <play_game+0x150>
		}else if(serial_input == 's'|| serial_input == 's'){
    155a:	c3 37       	cpi	r28, 0x73	; 115
    155c:	19 f4       	brne	.+6      	; 0x1564 <play_game+0x116>
			save_game_to_EPPROM();
    155e:	0e 94 74 02 	call	0x4e8	; 0x4e8 <save_game_to_EPPROM>
    1562:	1d c0       	rjmp	.+58     	; 0x159e <play_game+0x150>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1564:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
    1568:	88 23       	and	r24, r24
    156a:	41 f0       	breq	.+16     	; 0x157c <play_game+0x12e>
    156c:	8c 2f       	mov	r24, r28
    156e:	8f 7d       	andi	r24, 0xDF	; 223
    1570:	8f 34       	cpi	r24, 0x4F	; 79
    1572:	21 f4       	brne	.+8      	; 0x157c <play_game+0x12e>
 			load_EEPROM_data_on_next_game = 1;
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <load_EEPROM_data_on_next_game>
 			break;
    157a:	55 c0       	rjmp	.+170    	; 0x1626 <play_game+0x1d8>

		}else if(serial_input == 'n'|| serial_input == 'N'){
    157c:	8c 2f       	mov	r24, r28
    157e:	8f 7d       	andi	r24, 0xDF	; 223
    1580:	8e 34       	cpi	r24, 0x4E	; 78
    1582:	69 f4       	brne	.+26     	; 0x159e <play_game+0x150>
    1584:	50 c0       	rjmp	.+160    	; 0x1626 <play_game+0x1d8>
			break; 
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1586:	8c 2f       	mov	r24, r28
    1588:	8f 7d       	andi	r24, 0xDF	; 223
    158a:	80 35       	cpi	r24, 0x50	; 80
    158c:	21 f4       	brne	.+8      	; 0x1596 <play_game+0x148>
			toggle_timer_clock();
    158e:	0e 94 42 12 	call	0x2484	; 0x2484 <toggle_timer_clock>
    1592:	00 e0       	ldi	r16, 0x00	; 0
    1594:	04 c0       	rjmp	.+8      	; 0x159e <play_game+0x150>
    1596:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 'n'|| serial_input == 'N'){
    1598:	8e 34       	cpi	r24, 0x4E	; 78
    159a:	09 f4       	brne	.+2      	; 0x159e <play_game+0x150>
    159c:	44 c0       	rjmp	.+136    	; 0x1626 <play_game+0x1d8>
		}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    159e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    15a2:	6b 01       	movw	r12, r22
    15a4:	7c 01       	movw	r14, r24
    15a6:	0e 94 a4 08 	call	0x1148	; 0x1148 <get_current_game_speed>
    15aa:	09 2e       	mov	r0, r25
    15ac:	00 0c       	add	r0, r0
    15ae:	aa 0b       	sbc	r26, r26
    15b0:	bb 0b       	sbc	r27, r27
    15b2:	88 0d       	add	r24, r8
    15b4:	99 1d       	adc	r25, r9
    15b6:	aa 1d       	adc	r26, r10
    15b8:	bb 1d       	adc	r27, r11
    15ba:	c8 16       	cp	r12, r24
    15bc:	d9 06       	cpc	r13, r25
    15be:	ea 06       	cpc	r14, r26
    15c0:	fb 06       	cpc	r15, r27
    15c2:	08 f4       	brcc	.+2      	; 0x15c6 <play_game+0x178>
    15c4:	63 cf       	rjmp	.-314    	; 0x148c <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    15c6:	0e 94 3c 08 	call	0x1078	; 0x1078 <attempt_to_move_snake_forward>
    15ca:	88 23       	and	r24, r24
    15cc:	61 f1       	breq	.+88     	; 0x1626 <play_game+0x1d8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    15ce:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    15d2:	4b 01       	movw	r8, r22
    15d4:	5c 01       	movw	r10, r24
    15d6:	5a cf       	rjmp	.-332    	; 0x148c <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    15d8:	0e 94 49 12 	call	0x2492	; 0x2492 <timer_is_paused>
    15dc:	89 2b       	or	r24, r25
    15de:	09 f4       	brne	.+2      	; 0x15e2 <play_game+0x194>
    15e0:	b4 cf       	rjmp	.-152    	; 0x154a <play_game+0xfc>
    15e2:	d1 cf       	rjmp	.-94     	; 0x1586 <play_game+0x138>
    15e4:	0e 94 49 12 	call	0x2492	; 0x2492 <timer_is_paused>
    15e8:	89 2b       	or	r24, r25
    15ea:	c9 f6       	brne	.-78     	; 0x159e <play_game+0x150>
    15ec:	89 cf       	rjmp	.-238    	; 0x1500 <play_game+0xb2>
    15ee:	0e 94 49 12 	call	0x2492	; 0x2492 <timer_is_paused>
    15f2:	89 2b       	or	r24, r25
    15f4:	51 f0       	breq	.+20     	; 0x160a <play_game+0x1bc>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    15f6:	00 e0       	ldi	r16, 0x00	; 0
    15f8:	14 c0       	rjmp	.+40     	; 0x1622 <play_game+0x1d4>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    15fa:	01 e0       	ldi	r16, 0x01	; 1
    15fc:	01 c0       	rjmp	.+2      	; 0x1600 <play_game+0x1b2>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    15fe:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1600:	0e 94 49 12 	call	0x2492	; 0x2492 <timer_is_paused>
    1604:	89 2b       	or	r24, r25
    1606:	69 f4       	brne	.+26     	; 0x1622 <play_game+0x1d4>
    1608:	08 c0       	rjmp	.+16     	; 0x161a <play_game+0x1cc>
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    160a:	c3 34       	cpi	r28, 0x43	; 67
    160c:	09 f4       	brne	.+2      	; 0x1610 <play_game+0x1c2>
    160e:	7b cf       	rjmp	.-266    	; 0x1506 <play_game+0xb8>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1610:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1612:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    1614:	c1 2f       	mov	r28, r17
			}
		}
	if(!(timer_is_paused())){
	
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1616:	d1 2f       	mov	r29, r17
    1618:	82 cf       	rjmp	.-252    	; 0x151e <play_game+0xd0>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    161a:	0e 94 67 02 	call	0x4ce	; 0x4ce <EEPROM_has_saved_game>
    161e:	c1 2f       	mov	r28, r17
    1620:	ad cf       	rjmp	.-166    	; 0x157c <play_game+0x12e>
 			break;

		}else if(serial_input == 'n'|| serial_input == 'N'){
			break; 
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1622:	87 2d       	mov	r24, r7
    1624:	b9 cf       	rjmp	.-142    	; 0x1598 <play_game+0x14a>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	ff 90       	pop	r15
    1630:	ef 90       	pop	r14
    1632:	df 90       	pop	r13
    1634:	cf 90       	pop	r12
    1636:	bf 90       	pop	r11
    1638:	af 90       	pop	r10
    163a:	9f 90       	pop	r9
    163c:	8f 90       	pop	r8
    163e:	7f 90       	pop	r7
    1640:	5f 90       	pop	r5
    1642:	4f 90       	pop	r4
    1644:	08 95       	ret

00001646 <handle_game_over>:

void handle_game_over() {
	play_end_game_sound_effect();
    1646:	0e 94 31 02 	call	0x462	; 0x462 <play_end_game_sound_effect>
	clear_terminal();
    164a:	0e 94 ad 11 	call	0x235a	; 0x235a <clear_terminal>
	move_cursor(10,5);
    164e:	65 e0       	ldi	r22, 0x05	; 5
    1650:	8a e0       	ldi	r24, 0x0A	; 10
    1652:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf_P(PSTR("GAME OVER"));
    1656:	8c ea       	ldi	r24, 0xAC	; 172
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	9f 93       	push	r25
    165c:	8f 93       	push	r24
    165e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
	move_cursor(10,7);
    1662:	67 e0       	ldi	r22, 0x07	; 7
    1664:	8a e0       	ldi	r24, 0x0A	; 10
    1666:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf("Score: %lu", get_score());
    166a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <get_score>
    166e:	9f 93       	push	r25
    1670:	8f 93       	push	r24
    1672:	7f 93       	push	r23
    1674:	6f 93       	push	r22
    1676:	82 e4       	ldi	r24, 0x42	; 66
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	9f 93       	push	r25
    167c:	8f 93       	push	r24
    167e:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
	display_EEPROM_high_score();
    1682:	0e 94 3a 06 	call	0xc74	; 0xc74 <display_EEPROM_high_score>

	if (is_high_score()){
    1686:	0e 94 ac 04 	call	0x958	; 0x958 <is_high_score>
    168a:	2d b7       	in	r18, 0x3d	; 61
    168c:	3e b7       	in	r19, 0x3e	; 62
    168e:	28 5f       	subi	r18, 0xF8	; 248
    1690:	3f 4f       	sbci	r19, 0xFF	; 255
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	3e bf       	out	0x3e, r19	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	2d bf       	out	0x3d, r18	; 61
    169c:	81 11       	cpse	r24, r1
		set_high_score_name();	
    169e:	0e 94 d5 05 	call	0xbaa	; 0xbaa <set_high_score_name>
	}
	move_cursor(10,9);
    16a2:	69 e0       	ldi	r22, 0x09	; 9
    16a4:	8a e0       	ldi	r24, 0x0A	; 10
    16a6:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    16aa:	8e e8       	ldi	r24, 0x8E	; 142
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9f 93       	push	r25
    16b0:	8f 93       	push	r24
    16b2:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
	display_EEPROM_high_score(); 
    16b6:	0e 94 3a 06 	call	0xc74	; 0xc74 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    16ba:	0f 90       	pop	r0
    16bc:	0f 90       	pop	r0
    16be:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    16c2:	8f 3f       	cpi	r24, 0xFF	; 255
    16c4:	e1 f3       	breq	.-8      	; 0x16be <handle_game_over+0x78>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    16c6:	0e 94 ad 11 	call	0x235a	; 0x235a <clear_terminal>
    16ca:	08 95       	ret

000016cc <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    16cc:	0e 94 a5 09 	call	0x134a	; 0x134a <initialise_hardware>
	DDRC = 0xff;
    16d0:	8f ef       	ldi	r24, 0xFF	; 255
    16d2:	87 b9       	out	0x07, r24	; 7
	DDRD |= (1<<2);
    16d4:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    16d6:	53 98       	cbi	0x0a, 3	; 10
	initialise_timer_one();
    16d8:	0e 94 dc 12 	call	0x25b8	; 0x25b8 <initialise_timer_one>

	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    16dc:	0e 94 b6 09 	call	0x136c	; 0x136c <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    16e0:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <load_EEPROM_data_on_next_game>
    16e4:	88 23       	and	r24, r24
    16e6:	19 f0       	breq	.+6      	; 0x16ee <main+0x22>
    16e8:	0e 94 a0 03 	call	0x740	; 0x740 <new_game_from_EEPROM>
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <main+0x26>
			else{new_game();}
    16ee:	0e 94 1c 0a 	call	0x1438	; 0x1438 <new_game>
		play_game();
    16f2:	0e 94 27 0a 	call	0x144e	; 0x144e <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    16f6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <load_EEPROM_data_on_next_game>
    16fa:	81 11       	cpse	r24, r1
    16fc:	f1 cf       	rjmp	.-30     	; 0x16e0 <main+0x14>
    16fe:	0e 94 23 0b 	call	0x1646	; 0x1646 <handle_game_over>
    1702:	ee cf       	rjmp	.-36     	; 0x16e0 <main+0x14>

00001704 <get_rat_position>:
uint8_t is_item_at(PosnType position){
	if (is_snake_at(position) || is_food_at(position)|| is_superfood_at(position)){
		return 1;
	}
	return 0;
}
    1704:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1708:	08 95       	ret

0000170a <set_rat_at_pos>:
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	c8 2f       	mov	r28, r24
    1710:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1714:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1718:	d8 2f       	mov	r29, r24
    171a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    171e:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    1722:	40 e0       	ldi	r20, 0x00	; 0
    1724:	6d 2f       	mov	r22, r29
    1726:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_update_pixel>
    172a:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <rat_position>
    172e:	8c 2f       	mov	r24, r28
    1730:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1734:	d8 2f       	mov	r29, r24
    1736:	8c 2f       	mov	r24, r28
    1738:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    173c:	43 e3       	ldi	r20, 0x33	; 51
    173e:	6d 2f       	mov	r22, r29
    1740:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_update_pixel>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <rat_jumped_the_board>:
	if (attempts<=4){
		set_rat_at_pos(new_rat_pos); 
	}
	}

uint8_t rat_jumped_the_board(PosnType new_pos){
    174a:	1f 93       	push	r17
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	18 2f       	mov	r17, r24
	uint8_t rat_x = x_position(rat_position);
    1752:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1756:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    175a:	c8 2f       	mov	r28, r24
	uint8_t rat_y = y_position(rat_position);
    175c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1760:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1764:	d8 2f       	mov	r29, r24
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
    1766:	8f ef       	ldi	r24, 0xFF	; 255
    1768:	8c 0f       	add	r24, r28
    176a:	8e 30       	cpi	r24, 0x0E	; 14
    176c:	20 f4       	brcc	.+8      	; 0x1776 <rat_jumped_the_board+0x2c>
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
    176e:	8f ef       	ldi	r24, 0xFF	; 255
    1770:	8d 0f       	add	r24, r29
    1772:	86 30       	cpi	r24, 0x06	; 6
    1774:	18 f1       	brcs	.+70     	; 0x17bc <rat_jumped_the_board+0x72>
			return 0; 
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
    1776:	c1 11       	cpse	r28, r1
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <rat_jumped_the_board+0x3c>
    177a:	81 2f       	mov	r24, r17
    177c:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    1780:	8f 30       	cpi	r24, 0x0F	; 15
    1782:	41 f4       	brne	.+16     	; 0x1794 <rat_jumped_the_board+0x4a>
    1784:	1d c0       	rjmp	.+58     	; 0x17c0 <rat_jumped_the_board+0x76>
    1786:	cf 30       	cpi	r28, 0x0F	; 15
    1788:	29 f4       	brne	.+10     	; 0x1794 <rat_jumped_the_board+0x4a>
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
    178a:	81 2f       	mov	r24, r17
    178c:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    1790:	88 23       	and	r24, r24
    1792:	c1 f0       	breq	.+48     	; 0x17c4 <rat_jumped_the_board+0x7a>
    1794:	d1 11       	cpse	r29, r1
    1796:	08 c0       	rjmp	.+16     	; 0x17a8 <rat_jumped_the_board+0x5e>
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    1798:	81 2f       	mov	r24, r17
    179a:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	87 30       	cpi	r24, 0x07	; 7
    17a2:	99 f0       	breq	.+38     	; 0x17ca <rat_jumped_the_board+0x80>
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	11 c0       	rjmp	.+34     	; 0x17ca <rat_jumped_the_board+0x80>
		}
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
    17a8:	d7 30       	cpi	r29, 0x07	; 7
    17aa:	71 f4       	brne	.+28     	; 0x17c8 <rat_jumped_the_board+0x7e>
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
    17ac:	81 2f       	mov	r24, r17
    17ae:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
	
	//  if rat is currently not on boarder, cannot jump boarder. 
	//  Checked first to increase performance. 
	if ((rat_x> 0 && rat_x< BOARD_WIDTH-1) 
		&& (rat_y> 0 && rat_y< BOARD_HEIGHT-1)){
			return 0; 
    17b2:	91 e0       	ldi	r25, 0x01	; 1
    17b4:	88 23       	and	r24, r24
    17b6:	49 f0       	breq	.+18     	; 0x17ca <rat_jumped_the_board+0x80>
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	07 c0       	rjmp	.+14     	; 0x17ca <rat_jumped_the_board+0x80>
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	05 c0       	rjmp	.+10     	; 0x17ca <rat_jumped_the_board+0x80>
	// All four possible jumps
	if ((rat_x ==0 && (x_position(new_pos) == BOARD_WIDTH-1)) ||
		(rat_x == BOARD_WIDTH-1 && (x_position(new_pos) == 0)) ||
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	03 c0       	rjmp	.+6      	; 0x17ca <rat_jumped_the_board+0x80>
    17c4:	91 e0       	ldi	r25, 0x01	; 1
    17c6:	01 c0       	rjmp	.+2      	; 0x17ca <rat_jumped_the_board+0x80>
		}
	return 0; 
    17c8:	90 e0       	ldi	r25, 0x00	; 0
}
    17ca:	89 2f       	mov	r24, r25
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	08 95       	ret

000017d4 <move_rat>:
		return 1;
	}
	return 0;
}

void move_rat(void){
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
	uint8_t attempts = 0; 
	PosnType new_rat_pos = position(0,0);
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    17e2:	18 2f       	mov	r17, r24
	uint8_t move_option = rand()%4; 
    17e4:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
    17e8:	83 70       	andi	r24, 0x03	; 3
    17ea:	90 78       	andi	r25, 0x80	; 128
    17ec:	99 23       	and	r25, r25
    17ee:	24 f4       	brge	.+8      	; 0x17f8 <move_rat+0x24>
    17f0:	01 97       	sbiw	r24, 0x01	; 1
    17f2:	8c 6f       	ori	r24, 0xFC	; 252
    17f4:	9f 6f       	ori	r25, 0xFF	; 255
    17f6:	01 96       	adiw	r24, 0x01	; 1
    17f8:	c8 2f       	mov	r28, r24
	}
	return 0;
}

void move_rat(void){
	uint8_t attempts = 0; 
    17fa:	d0 e0       	ldi	r29, 0x00	; 0
	PosnType new_rat_pos = position(0,0);
	uint8_t move_option = rand()%4; 
	do 
	{
		switch(move_option){
    17fc:	c1 30       	cpi	r28, 0x01	; 1
    17fe:	a9 f0       	breq	.+42     	; 0x182a <move_rat+0x56>
    1800:	28 f0       	brcs	.+10     	; 0x180c <move_rat+0x38>
    1802:	c2 30       	cpi	r28, 0x02	; 2
    1804:	09 f1       	breq	.+66     	; 0x1848 <move_rat+0x74>
    1806:	c3 30       	cpi	r28, 0x03	; 3
    1808:	71 f1       	breq	.+92     	; 0x1866 <move_rat+0x92>
    180a:	3b c0       	rjmp	.+118    	; 0x1882 <move_rat+0xae>
			case 0:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)+1);
    180c:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1810:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1814:	18 2f       	mov	r17, r24
    1816:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    181a:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    181e:	61 e0       	ldi	r22, 0x01	; 1
    1820:	61 0f       	add	r22, r17
    1822:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1826:	18 2f       	mov	r17, r24
			break; 
    1828:	2c c0       	rjmp	.+88     	; 0x1882 <move_rat+0xae>
			
			case 1:
				new_rat_pos = position(x_position(rat_position), y_position(rat_position)-1);
    182a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    182e:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1832:	18 2f       	mov	r17, r24
    1834:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1838:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    183c:	6f ef       	ldi	r22, 0xFF	; 255
    183e:	61 0f       	add	r22, r17
    1840:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1844:	18 2f       	mov	r17, r24
			break;
    1846:	1d c0       	rjmp	.+58     	; 0x1882 <move_rat+0xae>
			
			case 2:
				new_rat_pos = position(x_position(rat_position)+1, y_position(rat_position));
    1848:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    184c:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1850:	18 2f       	mov	r17, r24
    1852:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1856:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    185a:	61 2f       	mov	r22, r17
    185c:	8f 5f       	subi	r24, 0xFF	; 255
    185e:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1862:	18 2f       	mov	r17, r24
			break;
    1864:	0e c0       	rjmp	.+28     	; 0x1882 <move_rat+0xae>
			
			case 3:
				new_rat_pos = position(x_position(rat_position)-1, y_position(rat_position));
    1866:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    186a:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    186e:	18 2f       	mov	r17, r24
    1870:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    1874:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    1878:	61 2f       	mov	r22, r17
    187a:	81 50       	subi	r24, 0x01	; 1
    187c:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1880:	18 2f       	mov	r17, r24
			break;
			
		}
		attempts ++;
    1882:	df 5f       	subi	r29, 0xFF	; 255
		move_option = (move_option +1)%4; 
    1884:	8c 2f       	mov	r24, r28
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	01 96       	adiw	r24, 0x01	; 1
    188a:	83 70       	andi	r24, 0x03	; 3
    188c:	90 78       	andi	r25, 0x80	; 128
    188e:	99 23       	and	r25, r25
    1890:	24 f4       	brge	.+8      	; 0x189a <move_rat+0xc6>
    1892:	01 97       	sbiw	r24, 0x01	; 1
    1894:	8c 6f       	ori	r24, 0xFC	; 252
    1896:	9f 6f       	ori	r25, 0xFF	; 255
    1898:	01 96       	adiw	r24, 0x01	; 1
    189a:	c8 2f       	mov	r28, r24
		
	} while ((is_snake_at(new_rat_pos) || rat_jumped_the_board(new_rat_pos) || is_superfood_at(new_rat_pos) || is_food_at(new_rat_pos)) &&(attempts <4)); // || (rat_jumped_the_board(new_rat_pos))); (attempts <4) && 
    189c:	81 2f       	mov	r24, r17
    189e:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <is_snake_at>
    18a2:	81 11       	cpse	r24, r1
    18a4:	0f c0       	rjmp	.+30     	; 0x18c4 <move_rat+0xf0>
    18a6:	81 2f       	mov	r24, r17
    18a8:	0e 94 a5 0b 	call	0x174a	; 0x174a <rat_jumped_the_board>
    18ac:	81 11       	cpse	r24, r1
    18ae:	0a c0       	rjmp	.+20     	; 0x18c4 <move_rat+0xf0>
    18b0:	81 2f       	mov	r24, r17
    18b2:	0e 94 1d 11 	call	0x223a	; 0x223a <is_superfood_at>
    18b6:	81 11       	cpse	r24, r1
    18b8:	05 c0       	rjmp	.+10     	; 0x18c4 <move_rat+0xf0>
    18ba:	81 2f       	mov	r24, r17
    18bc:	0e 94 51 07 	call	0xea2	; 0xea2 <is_food_at>
    18c0:	88 23       	and	r24, r24
    18c2:	21 f0       	breq	.+8      	; 0x18cc <move_rat+0xf8>
    18c4:	d4 30       	cpi	r29, 0x04	; 4
    18c6:	09 f0       	breq	.+2      	; 0x18ca <move_rat+0xf6>
    18c8:	99 cf       	rjmp	.-206    	; 0x17fc <move_rat+0x28>
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <move_rat+0xfc>
	// in feature summary about rat jumping the boarder
	if (attempts<=4){
    18cc:	d5 30       	cpi	r29, 0x05	; 5
    18ce:	18 f4       	brcc	.+6      	; 0x18d6 <move_rat+0x102>
		set_rat_at_pos(new_rat_pos); 
    18d0:	81 2f       	mov	r24, r17
    18d2:	0e 94 85 0b 	call	0x170a	; 0x170a <set_rat_at_pos>
	}
	}
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	08 95       	ret

000018de <is_rat_at>:
		}
	return 0; 
}

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	20 91 c7 02 	lds	r18, 0x02C7	; 0x8002c7 <rat_position>
    18e4:	28 13       	cpse	r18, r24
    18e6:	90 e0       	ldi	r25, 0x00	; 0
}
    18e8:	89 2f       	mov	r24, r25
    18ea:	08 95       	ret

000018ec <add_new_rat_position>:

void add_new_rat_position(void){
    18ec:	1f 93       	push	r17
    18ee:	cf 93       	push	r28
    18f0:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    18f2:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
    18f6:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    18f8:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
        test_position = position(x,y);
    18fc:	bc 01       	movw	r22, r24
    18fe:	67 70       	andi	r22, 0x07	; 7
    1900:	70 78       	andi	r23, 0x80	; 128
    1902:	77 23       	and	r23, r23
    1904:	34 f4       	brge	.+12     	; 0x1912 <add_new_rat_position+0x26>
    1906:	61 50       	subi	r22, 0x01	; 1
    1908:	71 09       	sbc	r23, r1
    190a:	68 6f       	ori	r22, 0xF8	; 248
    190c:	7f 6f       	ori	r23, 0xFF	; 255
    190e:	6f 5f       	subi	r22, 0xFF	; 255
    1910:	7f 4f       	sbci	r23, 0xFF	; 255
    1912:	ce 01       	movw	r24, r28
    1914:	8f 70       	andi	r24, 0x0F	; 15
    1916:	90 78       	andi	r25, 0x80	; 128
    1918:	99 23       	and	r25, r25
    191a:	24 f4       	brge	.+8      	; 0x1924 <add_new_rat_position+0x38>
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	80 6f       	ori	r24, 0xF0	; 240
    1920:	9f 6f       	ori	r25, 0xFF	; 255
    1922:	01 96       	adiw	r24, 0x01	; 1
    1924:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1928:	c8 2f       	mov	r28, r24
    192a:	13 e6       	ldi	r17, 0x63	; 99
    192c:	1e c0       	rjmp	.+60     	; 0x196a <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    192e:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
    1932:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1934:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
        test_position = position(x,y);
    1938:	bc 01       	movw	r22, r24
    193a:	67 70       	andi	r22, 0x07	; 7
    193c:	70 78       	andi	r23, 0x80	; 128
    193e:	77 23       	and	r23, r23
    1940:	34 f4       	brge	.+12     	; 0x194e <add_new_rat_position+0x62>
    1942:	61 50       	subi	r22, 0x01	; 1
    1944:	71 09       	sbc	r23, r1
    1946:	68 6f       	ori	r22, 0xF8	; 248
    1948:	7f 6f       	ori	r23, 0xFF	; 255
    194a:	6f 5f       	subi	r22, 0xFF	; 255
    194c:	7f 4f       	sbci	r23, 0xFF	; 255
    194e:	ce 01       	movw	r24, r28
    1950:	8f 70       	andi	r24, 0x0F	; 15
    1952:	90 78       	andi	r25, 0x80	; 128
    1954:	99 23       	and	r25, r25
    1956:	24 f4       	brge	.+8      	; 0x1960 <add_new_rat_position+0x74>
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	80 6f       	ori	r24, 0xF0	; 240
    195c:	9f 6f       	ori	r25, 0xFF	; 255
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1964:	c8 2f       	mov	r28, r24
    1966:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    1968:	91 f0       	breq	.+36     	; 0x198e <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    196a:	8c 2f       	mov	r24, r28
    196c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    1970:	81 11       	cpse	r24, r1
    1972:	dd cf       	rjmp	.-70     	; 0x192e <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    1974:	8c 2f       	mov	r24, r28
    1976:	0e 94 51 07 	call	0xea2	; 0xea2 <is_food_at>
    197a:	81 11       	cpse	r24, r1
    197c:	d8 cf       	rjmp	.-80     	; 0x192e <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    197e:	0e 94 1a 11 	call	0x2234	; 0x2234 <get_superfood_position>
    1982:	8c 17       	cp	r24, r28
    1984:	a1 f2       	breq	.-88     	; 0x192e <add_new_rat_position+0x42>
    1986:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    198a:	8c 17       	cp	r24, r28
    198c:	81 f2       	breq	.-96     	; 0x192e <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    198e:	c0 93 c7 02 	sts	0x02C7, r28	; 0x8002c7 <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_LIGHT_YELLOW);
    1992:	8c 2f       	mov	r24, r28
    1994:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    1998:	c8 2f       	mov	r28, r24
    199a:	80 91 c7 02 	lds	r24, 0x02C7	; 0x8002c7 <rat_position>
    199e:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    19a2:	43 e3       	ldi	r20, 0x33	; 51
    19a4:	6c 2f       	mov	r22, r28
    19a6:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_update_pixel>
}
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	1f 91       	pop	r17
    19b0:	08 95       	ret

000019b2 <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    19b2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    19b6:	20 91 49 01 	lds	r18, 0x0149	; 0x800149 <RAT_WAIT_TIME>
    19ba:	30 91 4a 01 	lds	r19, 0x014A	; 0x80014a <RAT_WAIT_TIME+0x1>
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	50 e0       	ldi	r21, 0x00	; 0
    19c2:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
    19c6:	21 e0       	ldi	r18, 0x01	; 1
    19c8:	67 2b       	or	r22, r23
    19ca:	68 2b       	or	r22, r24
    19cc:	69 2b       	or	r22, r25
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <is_time_to_move_rat+0x20>
    19d0:	20 e0       	ldi	r18, 0x00	; 0
}
    19d2:	82 2f       	mov	r24, r18
    19d4:	08 95       	ret

000019d6 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    19d6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <score>
    19da:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <score+0x1>
    19de:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <score+0x2>
    19e2:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <score+0x3>
    19e6:	08 95       	ret

000019e8 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    19e8:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <score>
    19ec:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <score+0x1>
    19f0:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <score+0x2>
    19f4:	70 91 7c 02 	lds	r23, 0x027C	; 0x80027c <score+0x3>
    19f8:	48 0f       	add	r20, r24
    19fa:	59 1f       	adc	r21, r25
    19fc:	61 1d       	adc	r22, r1
    19fe:	71 1d       	adc	r23, r1
    1a00:	40 93 79 02 	sts	0x0279, r20	; 0x800279 <score>
    1a04:	50 93 7a 02 	sts	0x027A, r21	; 0x80027a <score+0x1>
    1a08:	60 93 7b 02 	sts	0x027B, r22	; 0x80027b <score+0x2>
    1a0c:	70 93 7c 02 	sts	0x027C, r23	; 0x80027c <score+0x3>
    1a10:	08 95       	ret

00001a12 <get_score>:
}

uint32_t get_score(void) {
	return score;
    1a12:	60 91 79 02 	lds	r22, 0x0279	; 0x800279 <score>
    1a16:	70 91 7a 02 	lds	r23, 0x027A	; 0x80027a <score+0x1>
    1a1a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <score+0x2>
    1a1e:	90 91 7c 02 	lds	r25, 0x027C	; 0x80027c <score+0x3>
}
    1a22:	08 95       	ret

00001a24 <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    1a24:	60 93 79 02 	sts	0x0279, r22	; 0x800279 <score>
    1a28:	70 93 7a 02 	sts	0x027A, r23	; 0x80027a <score+0x1>
    1a2c:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <score+0x2>
    1a30:	90 93 7c 02 	sts	0x027C, r25	; 0x80027c <score+0x3>
    1a34:	08 95       	ret

00001a36 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    1a36:	60 93 4b 01 	sts	0x014B, r22	; 0x80014b <colour>
	display_string = string_to_display;
    1a3a:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <display_string+0x1>
    1a3e:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <display_string>
	next_col_ptr = 0;
    1a42:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <next_col_ptr+0x1>
    1a46:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <next_col_ptr>
	next_char_to_display = 0;
    1a4a:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <next_char_to_display+0x1>
    1a4e:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <next_char_to_display>
    1a52:	08 95       	ret

00001a54 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	28 97       	sbiw	r28, 0x08	; 8
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    1a6c:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <next_col_ptr>
    1a70:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <next_col_ptr+0x1>
    1a74:	30 97       	sbiw	r30, 0x00	; 0
    1a76:	81 f0       	breq	.+32     	; 0x1a98 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1a78:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    1a7a:	10 ff       	sbrs	r17, 0
    1a7c:	06 c0       	rjmp	.+12     	; 0x1a8a <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    1a7e:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <next_col_ptr+0x1>
    1a82:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a86:	00 e0       	ldi	r16, 0x00	; 0
    1a88:	6b c0       	rjmp	.+214    	; 0x1b60 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    1a8a:	31 96       	adiw	r30, 0x01	; 1
    1a8c:	f0 93 83 02 	sts	0x0283, r31	; 0x800283 <next_col_ptr+0x1>
    1a90:	e0 93 82 02 	sts	0x0282, r30	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1a94:	00 e0       	ldi	r16, 0x00	; 0
    1a96:	64 c0       	rjmp	.+200    	; 0x1b60 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1a98:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <next_char_to_display>
    1a9c:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <next_char_to_display+0x1>
    1aa0:	30 97       	sbiw	r30, 0x00	; 0
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <scroll_display+0x52>
    1aa4:	49 c0       	rjmp	.+146    	; 0x1b38 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	01 96       	adiw	r24, 0x01	; 1
    1aaa:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <next_char_to_display+0x1>
    1aae:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <next_char_to_display>
    1ab2:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1ab4:	e1 11       	cpse	r30, r1
    1ab6:	0a c0       	rjmp	.+20     	; 0x1acc <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1ab8:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <next_char_to_display+0x1>
    1abc:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <next_char_to_display>
			shift_countdown = 16;
    1ac0:	80 e1       	ldi	r24, 0x10	; 16
    1ac2:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1ac6:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1ac8:	10 e0       	ldi	r17, 0x00	; 0
    1aca:	4a c0       	rjmp	.+148    	; 0x1b60 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    1acc:	8f e9       	ldi	r24, 0x9F	; 159
    1ace:	8e 0f       	add	r24, r30
    1ad0:	8a 31       	cpi	r24, 0x1A	; 26
    1ad2:	70 f4       	brcc	.+28     	; 0x1af0 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	e8 5f       	subi	r30, 0xF8	; 248
    1adc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ade:	85 91       	lpm	r24, Z+
    1ae0:	94 91       	lpm	r25, Z
    1ae2:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <next_col_ptr+0x1>
    1ae6:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1aea:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1aec:	10 e0       	ldi	r17, 0x00	; 0
    1aee:	38 c0       	rjmp	.+112    	; 0x1b60 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1af0:	8f eb       	ldi	r24, 0xBF	; 191
    1af2:	8e 0f       	add	r24, r30
    1af4:	8a 31       	cpi	r24, 0x1A	; 26
    1af6:	70 f4       	brcc	.+28     	; 0x1b14 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	e8 5b       	subi	r30, 0xB8	; 184
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	85 91       	lpm	r24, Z+
    1b04:	94 91       	lpm	r25, Z
    1b06:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <next_col_ptr+0x1>
    1b0a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b0e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b10:	10 e0       	ldi	r17, 0x00	; 0
    1b12:	26 c0       	rjmp	.+76     	; 0x1b60 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    1b14:	80 ed       	ldi	r24, 0xD0	; 208
    1b16:	8e 0f       	add	r24, r30
    1b18:	8a 30       	cpi	r24, 0x0A	; 10
    1b1a:	00 f5       	brcc	.+64     	; 0x1b5c <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	ea 5a       	subi	r30, 0xAA	; 170
    1b24:	ff 4f       	sbci	r31, 0xFF	; 255
    1b26:	85 91       	lpm	r24, Z+
    1b28:	94 91       	lpm	r25, Z
    1b2a:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <next_col_ptr+0x1>
    1b2e:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b32:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	14 c0       	rjmp	.+40     	; 0x1b60 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    1b38:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <display_string>
    1b3c:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b40:	01 e0       	ldi	r16, 0x01	; 1
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <scroll_display+0xf4>
    1b46:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    1b48:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <next_char_to_display+0x1>
    1b4c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <next_char_to_display>
		display_string = 0;
    1b50:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <display_string+0x1>
    1b54:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b58:	10 e0       	ldi	r17, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1b5c:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1b5e:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    1b60:	0e 94 88 09 	call	0x1310	; 0x1310 <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    1b64:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <colour>
    1b68:	fe 01       	movw	r30, r28
    1b6a:	38 96       	adiw	r30, 0x08	; 8
    1b6c:	ce 01       	movw	r24, r28
    1b6e:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1b70:	11 23       	and	r17, r17
    1b72:	14 f4       	brge	.+4      	; 0x1b78 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1b74:	20 83       	st	Z, r18
    1b76:	01 c0       	rjmp	.+2      	; 0x1b7a <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1b78:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1b7a:	11 0f       	add	r17, r17
    1b7c:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1b7e:	e8 17       	cp	r30, r24
    1b80:	f9 07       	cpc	r31, r25
    1b82:	b1 f7       	brne	.-20     	; 0x1b70 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1b84:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1b86:	be 01       	movw	r22, r28
    1b88:	6f 5f       	subi	r22, 0xFF	; 255
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	8f e0       	ldi	r24, 0x0F	; 15
    1b8e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1b92:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <shift_countdown.1854>
    1b96:	88 23       	and	r24, r24
    1b98:	89 f0       	breq	.+34     	; 0x1bbc <scroll_display+0x168>
		shift_countdown--;
    1b9a:	81 50       	subi	r24, 0x01	; 1
    1b9c:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1ba0:	00 23       	and	r16, r16
    1ba2:	11 f0       	breq	.+4      	; 0x1ba8 <scroll_display+0x154>
    1ba4:	88 23       	and	r24, r24
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <scroll_display+0x158>
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <scroll_display+0x15e>
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	01 c0       	rjmp	.+2      	; 0x1bb2 <scroll_display+0x15e>
    1bb0:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	99 23       	and	r25, r25
    1bb6:	29 f0       	breq	.+10     	; 0x1bc2 <scroll_display+0x16e>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	03 c0       	rjmp	.+6      	; 0x1bc2 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1bbc:	00 23       	and	r16, r16
    1bbe:	a1 f3       	breq	.-24     	; 0x1ba8 <scroll_display+0x154>
    1bc0:	f7 cf       	rjmp	.-18     	; 0x1bb0 <scroll_display+0x15c>
	return !finished;
}
    1bc2:	28 96       	adiw	r28, 0x08	; 8
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	f8 94       	cli
    1bc8:	de bf       	out	0x3e, r29	; 62
    1bca:	0f be       	out	0x3f, r0	; 63
    1bcc:	cd bf       	out	0x3d, r28	; 61
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	08 95       	ret

00001bd8 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1bd8:	cf 93       	push	r28
    1bda:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1bdc:	8a 30       	cpi	r24, 0x0A	; 10
    1bde:	19 f4       	brne	.+6      	; 0x1be6 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1be0:	8d e0       	ldi	r24, 0x0D	; 13
    1be2:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1be6:	9f b7       	in	r25, 0x3f	; 63
    1be8:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1bea:	02 c0       	rjmp	.+4      	; 0x1bf0 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1bec:	99 23       	and	r25, r25
    1bee:	29 f1       	breq	.+74     	; 0x1c3a <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1bf0:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    1bf6:	d1 f3       	breq	.-12     	; 0x1bec <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1bf8:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1bfa:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <out_insert_pos>
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	8e 0f       	add	r24, r30
    1c02:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <out_insert_pos>
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	e6 53       	subi	r30, 0x36	; 54
    1c0a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c0c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1c0e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1c12:	8f 5f       	subi	r24, 0xFF	; 255
    1c14:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1c18:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <out_insert_pos>
    1c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1c1e:	11 f4       	brne	.+4      	; 0x1c24 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1c20:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1c24:	e1 ec       	ldi	r30, 0xC1	; 193
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	80 62       	ori	r24, 0x20	; 32
    1c2c:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1c2e:	99 23       	and	r25, r25
    1c30:	39 f0       	breq	.+14     	; 0x1c40 <uart_put_char+0x68>
		sei();
    1c32:	78 94       	sei
	}
	return 0;
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
}
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1c48:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1c4c:	88 23       	and	r24, r24
    1c4e:	e1 f3       	breq	.-8      	; 0x1c48 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1c50:	2f b7       	in	r18, 0x3f	; 63
    1c52:	20 78       	andi	r18, 0x80	; 128
	cli();
    1c54:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1c56:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <input_insert_pos>
    1c5a:	30 91 db 03 	lds	r19, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	83 1b       	sub	r24, r19
    1c62:	91 09       	sbc	r25, r1
    1c64:	5a f4       	brpl	.+22     	; 0x1c7c <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c66:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <input_insert_pos>
    1c6a:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	e8 1b       	sub	r30, r24
    1c72:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1c74:	e6 52       	subi	r30, 0x26	; 38
    1c76:	fc 4f       	sbci	r31, 0xFC	; 252
    1c78:	80 81       	ld	r24, Z
    1c7a:	0a c0       	rjmp	.+20     	; 0x1c90 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1c7c:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <input_insert_pos>
    1c80:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	e8 1b       	sub	r30, r24
    1c88:	f1 09       	sbc	r31, r1
    1c8a:	e6 53       	subi	r30, 0x36	; 54
    1c8c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c8e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1c90:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1c94:	91 50       	subi	r25, 0x01	; 1
    1c96:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1c9a:	22 23       	and	r18, r18
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <uart_get_char+0x58>
		sei();
    1c9e:	78 94       	sei
	}	
	return c;
}
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	08 95       	ret

00001ca4 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1ca4:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1ca8:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1cac:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1cb0:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <bytes_in_input_buffer>
	input_overrun = 0;
    1cb4:	10 92 da 03 	sts	0x03DA, r1	; 0x8003da <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1cb8:	40 93 84 02 	sts	0x0284, r20	; 0x800284 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	aa 1f       	adc	r26, r26
    1cc6:	bb 1f       	adc	r27, r27
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	aa 1f       	adc	r26, r26
    1cce:	bb 1f       	adc	r27, r27
    1cd0:	9c 01       	movw	r18, r24
    1cd2:	ad 01       	movw	r20, r26
    1cd4:	22 0f       	add	r18, r18
    1cd6:	33 1f       	adc	r19, r19
    1cd8:	44 1f       	adc	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	72 e1       	ldi	r23, 0x12	; 18
    1ce0:	8a e7       	ldi	r24, 0x7A	; 122
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 46 14 	call	0x288c	; 0x288c <__divmodsi4>
    1ce8:	ba 01       	movw	r22, r20
    1cea:	a9 01       	movw	r20, r18
    1cec:	4f 5f       	subi	r20, 0xFF	; 255
    1cee:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf0:	6f 4f       	sbci	r22, 0xFF	; 255
    1cf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1cf4:	db 01       	movw	r26, r22
    1cf6:	ca 01       	movw	r24, r20
    1cf8:	1a f4       	brpl	.+6      	; 0x1d00 <init_serial_stdio+0x5c>
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	a1 1d       	adc	r26, r1
    1cfe:	b1 1d       	adc	r27, r1
    1d00:	b5 95       	asr	r27
    1d02:	a7 95       	ror	r26
    1d04:	97 95       	ror	r25
    1d06:	87 95       	ror	r24
    1d08:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1d0a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1d0e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1d12:	e1 ec       	ldi	r30, 0xC1	; 193
    1d14:	f0 e0       	ldi	r31, 0x00	; 0
    1d16:	88 e1       	ldi	r24, 0x18	; 24
    1d18:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1d1a:	80 81       	ld	r24, Z
    1d1c:	80 68       	ori	r24, 0x80	; 128
    1d1e:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1d20:	ee ed       	ldi	r30, 0xDE	; 222
    1d22:	f3 e0       	ldi	r31, 0x03	; 3
    1d24:	8c e4       	ldi	r24, 0x4C	; 76
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	93 83       	std	Z+3, r25	; 0x03
    1d2a:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1d2c:	91 83       	std	Z+1, r25	; 0x01
    1d2e:	80 83       	st	Z, r24
    1d30:	08 95       	ret

00001d32 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1d32:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	91 11       	cpse	r25, r1
    1d3a:	01 c0       	rjmp	.+2      	; 0x1d3e <serial_input_available+0xc>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
}
    1d3e:	08 95       	ret

00001d40 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1d40:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1d44:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <bytes_in_input_buffer>
    1d48:	08 95       	ret

00001d4a <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1d4a:	1f 92       	push	r1
    1d4c:	0f 92       	push	r0
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	0f 92       	push	r0
    1d52:	11 24       	eor	r1, r1
    1d54:	2f 93       	push	r18
    1d56:	8f 93       	push	r24
    1d58:	9f 93       	push	r25
    1d5a:	ef 93       	push	r30
    1d5c:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1d5e:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1d62:	88 23       	and	r24, r24
    1d64:	29 f1       	breq	.+74     	; 0x1db0 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1d66:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <out_insert_pos>
    1d6a:	20 91 c9 02 	lds	r18, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	82 1b       	sub	r24, r18
    1d72:	91 09       	sbc	r25, r1
    1d74:	5a f4       	brpl	.+22     	; 0x1d8c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d76:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <out_insert_pos>
    1d7a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	e8 1b       	sub	r30, r24
    1d82:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1d84:	e7 53       	subi	r30, 0x37	; 55
    1d86:	fc 4f       	sbci	r31, 0xFC	; 252
    1d88:	90 81       	ld	r25, Z
    1d8a:	0a c0       	rjmp	.+20     	; 0x1da0 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1d8c:	e0 91 c8 02 	lds	r30, 0x02C8	; 0x8002c8 <out_insert_pos>
    1d90:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1d94:	f0 e0       	ldi	r31, 0x00	; 0
    1d96:	e8 1b       	sub	r30, r24
    1d98:	f1 09       	sbc	r31, r1
    1d9a:	e6 53       	subi	r30, 0x36	; 54
    1d9c:	fd 4f       	sbci	r31, 0xFD	; 253
    1d9e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1da0:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1daa:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1dae:	05 c0       	rjmp	.+10     	; 0x1dba <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1db0:	e1 ec       	ldi	r30, 0xC1	; 193
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 7d       	andi	r24, 0xDF	; 223
    1db8:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1dba:	ff 91       	pop	r31
    1dbc:	ef 91       	pop	r30
    1dbe:	9f 91       	pop	r25
    1dc0:	8f 91       	pop	r24
    1dc2:	2f 91       	pop	r18
    1dc4:	0f 90       	pop	r0
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	0f 90       	pop	r0
    1dca:	1f 90       	pop	r1
    1dcc:	18 95       	reti

00001dce <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1dce:	1f 92       	push	r1
    1dd0:	0f 92       	push	r0
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	0f 92       	push	r0
    1dd6:	11 24       	eor	r1, r1
    1dd8:	2f 93       	push	r18
    1dda:	3f 93       	push	r19
    1ddc:	4f 93       	push	r20
    1dde:	5f 93       	push	r21
    1de0:	6f 93       	push	r22
    1de2:	7f 93       	push	r23
    1de4:	8f 93       	push	r24
    1de6:	9f 93       	push	r25
    1de8:	af 93       	push	r26
    1dea:	bf 93       	push	r27
    1dec:	cf 93       	push	r28
    1dee:	ef 93       	push	r30
    1df0:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1df2:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1df6:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <do_echo>
    1dfa:	88 23       	and	r24, r24
    1dfc:	49 f0       	breq	.+18     	; 0x1e10 <__vector_20+0x42>
    1dfe:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <bytes_in_out_buffer>
    1e02:	8f 3f       	cpi	r24, 0xFF	; 255
    1e04:	29 f0       	breq	.+10     	; 0x1e10 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	8c 2f       	mov	r24, r28
    1e0c:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1e10:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1e14:	80 31       	cpi	r24, 0x10	; 16
    1e16:	20 f0       	brcs	.+8      	; 0x1e20 <__vector_20+0x52>
		input_overrun = 1;
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <input_overrun>
    1e1e:	18 c0       	rjmp	.+48     	; 0x1e50 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1e20:	cd 30       	cpi	r28, 0x0D	; 13
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <__vector_20+0x58>
			c = '\n';
    1e24:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1e26:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <input_insert_pos>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	8e 0f       	add	r24, r30
    1e2e:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <input_insert_pos>
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	e6 53       	subi	r30, 0x36	; 54
    1e36:	fc 4f       	sbci	r31, 0xFC	; 252
    1e38:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1e3a:	80 91 db 03 	lds	r24, 0x03DB	; 0x8003db <bytes_in_input_buffer>
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	80 93 db 03 	sts	0x03DB, r24	; 0x8003db <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1e44:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <input_insert_pos>
    1e48:	80 31       	cpi	r24, 0x10	; 16
    1e4a:	11 f4       	brne	.+4      	; 0x1e50 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1e4c:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <input_insert_pos>
		}
	}
}
    1e50:	ff 91       	pop	r31
    1e52:	ef 91       	pop	r30
    1e54:	cf 91       	pop	r28
    1e56:	bf 91       	pop	r27
    1e58:	af 91       	pop	r26
    1e5a:	9f 91       	pop	r25
    1e5c:	8f 91       	pop	r24
    1e5e:	7f 91       	pop	r23
    1e60:	6f 91       	pop	r22
    1e62:	5f 91       	pop	r21
    1e64:	4f 91       	pop	r20
    1e66:	3f 91       	pop	r19
    1e68:	2f 91       	pop	r18
    1e6a:	0f 90       	pop	r0
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	0f 90       	pop	r0
    1e70:	1f 90       	pop	r1
    1e72:	18 95       	reti

00001e74 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1e7a:	82 e0       	ldi	r24, 0x02	; 2
    1e7c:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <snakeLength>
	snakeTailIndex = 0;
    1e80:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <snakeTailIndex>
	snakeHeadIndex = 1;
    1e84:	c1 e0       	ldi	r28, 0x01	; 1
    1e86:	c0 93 88 02 	sts	0x0288, r28	; 0x800288 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1e8a:	61 e0       	ldi	r22, 0x01	; 1
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1e92:	0a e8       	ldi	r16, 0x8A	; 138
    1e94:	12 e0       	ldi	r17, 0x02	; 2
    1e96:	f8 01       	movw	r30, r16
    1e98:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
    1e9c:	82 e0       	ldi	r24, 0x02	; 2
    1e9e:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    1ea2:	f8 01       	movw	r30, r16
    1ea4:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1ea6:	c0 93 86 02 	sts	0x0286, r28	; 0x800286 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1eaa:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <nextSnakeDirn>
}
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1eb6:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    1eba:	0e 2e       	mov	r0, r30
    1ebc:	00 0c       	add	r0, r0
    1ebe:	ff 0b       	sbc	r31, r31
    1ec0:	e6 57       	subi	r30, 0x76	; 118
    1ec2:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ec4:	80 81       	ld	r24, Z
    1ec6:	08 95       	ret

00001ec8 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1ec8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curSnakeDirn>
	nextSnakeDirn = dirn;
    1ecc:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1ed0:	08 95       	ret

00001ed2 <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1ed2:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <snakeTailIndex>
    1ed6:	0e 2e       	mov	r0, r30
    1ed8:	00 0c       	add	r0, r0
    1eda:	ff 0b       	sbc	r31, r31
    1edc:	e6 57       	subi	r30, 0x76	; 118
    1ede:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ee0:	80 81       	ld	r24, Z
    1ee2:	08 95       	ret

00001ee4 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1ee4:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    1ee8:	08 95       	ret

00001eea <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1eea:	e8 2f       	mov	r30, r24
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	e6 57       	subi	r30, 0x76	; 118
    1ef0:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1ef2:	80 81       	ld	r24, Z
    1ef4:	08 95       	ret

00001ef6 <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1ef6:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <snakeLength>
    1efa:	08 95       	ret

00001efc <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1efc:	e6 2f       	mov	r30, r22
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	e6 57       	subi	r30, 0x76	; 118
    1f02:	fd 4f       	sbci	r31, 0xFD	; 253
    1f04:	80 83       	st	Z, r24
    1f06:	08 95       	ret

00001f08 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1f08:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <snakeHeadIndex>
    1f0c:	08 95       	ret

00001f0e <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1f0e:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <snakeTailIndex>
    1f12:	08 95       	ret

00001f14 <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1f14:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <snakeHeadIndex>
    1f18:	08 95       	ret

00001f1a <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1f1a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <snakeTailIndex>
    1f1e:	08 95       	ret

00001f20 <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1f20:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <curSnakeDirn>
    1f24:	08 95       	ret

00001f26 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1f26:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <snakeTailIndex>
    1f2a:	e9 2f       	mov	r30, r25
    1f2c:	09 2e       	mov	r0, r25
    1f2e:	00 0c       	add	r0, r0
    1f30:	ff 0b       	sbc	r31, r31
    1f32:	e6 57       	subi	r30, 0x76	; 118
    1f34:	fd 4f       	sbci	r31, 0xFD	; 253
    1f36:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1f38:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1f3a:	91 32       	cpi	r25, 0x21	; 33
    1f3c:	19 f0       	breq	.+6      	; 0x1f44 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1f3e:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <snakeTailIndex>
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1f44:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <snakeTailIndex>
	}
	snakeLength--;
    1f48:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <snakeLength>
    1f4c:	91 50       	subi	r25, 0x01	; 1
    1f4e:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <snakeLength>
	
	return prev_tail_position;
}
    1f52:	08 95       	ret

00001f54 <set_snake_dirn>:
	** is not opposite to the current direction (stored in curSnakeDirn). 
	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1f54:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curSnakeDirn>
    1f58:	91 30       	cpi	r25, 0x01	; 1
    1f5a:	a9 f0       	breq	.+42     	; 0x1f86 <set_snake_dirn+0x32>
    1f5c:	28 f0       	brcs	.+10     	; 0x1f68 <set_snake_dirn+0x14>
    1f5e:	92 30       	cpi	r25, 0x02	; 2
    1f60:	41 f0       	breq	.+16     	; 0x1f72 <set_snake_dirn+0x1e>
    1f62:	93 30       	cpi	r25, 0x03	; 3
    1f64:	59 f0       	breq	.+22     	; 0x1f7c <set_snake_dirn+0x28>
    1f66:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1f68:	82 30       	cpi	r24, 0x02	; 2
    1f6a:	89 f0       	breq	.+34     	; 0x1f8e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f6c:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1f70:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1f72:	88 23       	and	r24, r24
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f76:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1f7a:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	39 f0       	breq	.+14     	; 0x1f8e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f80:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1f84:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1f86:	83 30       	cpi	r24, 0x03	; 3
    1f88:	11 f0       	breq	.+4      	; 0x1f8e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1f8a:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <nextSnakeDirn>
    1f8e:	08 95       	ret

00001f90 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1f90:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1f94:	30 91 88 02 	lds	r19, 0x0288	; 0x800288 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1f98:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1f9a:	0d c0       	rjmp	.+26     	; 0x1fb6 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1f9c:	e9 2f       	mov	r30, r25
    1f9e:	09 2e       	mov	r0, r25
    1fa0:	00 0c       	add	r0, r0
    1fa2:	ff 0b       	sbc	r31, r31
    1fa4:	e6 57       	subi	r30, 0x76	; 118
    1fa6:	fd 4f       	sbci	r31, 0xFD	; 253
    1fa8:	20 81       	ld	r18, Z
    1faa:	28 17       	cp	r18, r24
    1fac:	89 f0       	breq	.+34     	; 0x1fd0 <is_snake_at+0x40>
    1fae:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1fb0:	91 32       	cpi	r25, 0x21	; 33
    1fb2:	0c f0       	brlt	.+2      	; 0x1fb6 <is_snake_at+0x26>
			index = 0;
    1fb4:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1fb6:	93 13       	cpse	r25, r19
    1fb8:	f1 cf       	rjmp	.-30     	; 0x1f9c <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1fba:	e3 2f       	mov	r30, r19
    1fbc:	33 0f       	add	r19, r19
    1fbe:	ff 0b       	sbc	r31, r31
    1fc0:	e6 57       	subi	r30, 0x76	; 118
    1fc2:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1fc4:	91 e0       	ldi	r25, 0x01	; 1
    1fc6:	20 81       	ld	r18, Z
    1fc8:	28 17       	cp	r18, r24
    1fca:	19 f0       	breq	.+6      	; 0x1fd2 <is_snake_at+0x42>
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <is_snake_at+0x42>
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1fd2:	89 2f       	mov	r24, r25
    1fd4:	08 95       	ret

00001fd6 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
    1fda:	cf 93       	push	r28
    1fdc:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1fde:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    1fe2:	81 32       	cpi	r24, 0x21	; 33
    1fe4:	08 f0       	brcs	.+2      	; 0x1fe8 <advance_snake_head+0x12>
    1fe6:	98 c0       	rjmp	.+304    	; 0x2118 <advance_snake_head+0x142>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1fe8:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    1fec:	0e 2e       	mov	r0, r30
    1fee:	00 0c       	add	r0, r0
    1ff0:	ff 0b       	sbc	r31, r31
    1ff2:	e6 57       	subi	r30, 0x76	; 118
    1ff4:	fd 4f       	sbci	r31, 0xFD	; 253
    1ff6:	80 81       	ld	r24, Z
    1ff8:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    1ffc:	18 2f       	mov	r17, r24
    1ffe:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    2000:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    2004:	0e 2e       	mov	r0, r30
    2006:	00 0c       	add	r0, r0
    2008:	ff 0b       	sbc	r31, r31
    200a:	e6 57       	subi	r30, 0x76	; 118
    200c:	fd 4f       	sbci	r31, 0xFD	; 253
    200e:	80 81       	ld	r24, Z
    2010:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    2014:	08 2f       	mov	r16, r24
    2016:	d8 2f       	mov	r29, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
	if(get_joystick_direction() != -1){
    2018:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <get_joystick_direction>
    201c:	8f 3f       	cpi	r24, 0xFF	; 255
    201e:	21 f0       	breq	.+8      	; 0x2028 <advance_snake_head+0x52>
		set_snake_dirn(get_joystick_direction()); 
    2020:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <get_joystick_direction>
    2024:	0e 94 aa 0f 	call	0x1f54	; 0x1f54 <set_snake_dirn>
	}
    switch (nextSnakeDirn) {
    2028:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <nextSnakeDirn>
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	59 f0       	breq	.+22     	; 0x2046 <advance_snake_head+0x70>
    2030:	28 f0       	brcs	.+10     	; 0x203c <advance_snake_head+0x66>
    2032:	82 30       	cpi	r24, 0x02	; 2
    2034:	69 f0       	breq	.+26     	; 0x2050 <advance_snake_head+0x7a>
    2036:	83 30       	cpi	r24, 0x03	; 3
    2038:	81 f0       	breq	.+32     	; 0x205a <advance_snake_head+0x84>
    203a:	1b c0       	rjmp	.+54     	; 0x2072 <advance_snake_head+0x9c>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    203c:	d7 30       	cpi	r29, 0x07	; 7
    203e:	91 f0       	breq	.+36     	; 0x2064 <advance_snake_head+0x8e>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    2040:	d1 e0       	ldi	r29, 0x01	; 1
    2042:	d0 0f       	add	r29, r16
    2044:	16 c0       	rjmp	.+44     	; 0x2072 <advance_snake_head+0x9c>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    2046:	cf 30       	cpi	r28, 0x0F	; 15
    2048:	79 f0       	breq	.+30     	; 0x2068 <advance_snake_head+0x92>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    204a:	c1 e0       	ldi	r28, 0x01	; 1
    204c:	c1 0f       	add	r28, r17
    204e:	11 c0       	rjmp	.+34     	; 0x2072 <advance_snake_head+0x9c>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    2050:	dd 23       	and	r29, r29
    2052:	61 f0       	breq	.+24     	; 0x206c <advance_snake_head+0x96>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    2054:	df ef       	ldi	r29, 0xFF	; 255
    2056:	d0 0f       	add	r29, r16
    2058:	0c c0       	rjmp	.+24     	; 0x2072 <advance_snake_head+0x9c>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    205a:	cc 23       	and	r28, r28
    205c:	49 f0       	breq	.+18     	; 0x2070 <advance_snake_head+0x9a>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    205e:	cf ef       	ldi	r28, 0xFF	; 255
    2060:	c1 0f       	add	r28, r17
    2062:	07 c0       	rjmp	.+14     	; 0x2072 <advance_snake_head+0x9c>
	}
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    2064:	d0 e0       	ldi	r29, 0x00	; 0
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <advance_snake_head+0x9c>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    2068:	c0 e0       	ldi	r28, 0x00	; 0
    206a:	03 c0       	rjmp	.+6      	; 0x2072 <advance_snake_head+0x9c>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    206c:	d7 e0       	ldi	r29, 0x07	; 7
    206e:	01 c0       	rjmp	.+2      	; 0x2072 <advance_snake_head+0x9c>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    2070:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    2072:	6d 2f       	mov	r22, r29
    2074:	8c 2f       	mov	r24, r28
    2076:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    207a:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    207c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <nextSnakeDirn>
    2080:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <curSnakeDirn>
    2084:	98 13       	cpse	r25, r24
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    2086:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <curSnakeDirn>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    208a:	8c 2f       	mov	r24, r28
    208c:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <is_snake_at>
    2090:	88 23       	and	r24, r24
    2092:	51 f0       	breq	.+20     	; 0x20a8 <advance_snake_head+0xd2>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    2094:	e0 91 87 02 	lds	r30, 0x0287	; 0x800287 <snakeTailIndex>
    2098:	0e 2e       	mov	r0, r30
    209a:	00 0c       	add	r0, r0
    209c:	ff 0b       	sbc	r31, r31
    209e:	e6 57       	subi	r30, 0x76	; 118
    20a0:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    20a2:	80 81       	ld	r24, Z
    20a4:	c8 13       	cpse	r28, r24
    20a6:	3a c0       	rjmp	.+116    	; 0x211c <advance_snake_head+0x146>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    20a8:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <snakeHeadIndex>
    20ac:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    20ae:	81 32       	cpi	r24, 0x21	; 33
    20b0:	19 f0       	breq	.+6      	; 0x20b8 <advance_snake_head+0xe2>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    20b2:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <snakeHeadIndex>
    20b6:	02 c0       	rjmp	.+4      	; 0x20bc <advance_snake_head+0xe6>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    20b8:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    20bc:	e0 91 88 02 	lds	r30, 0x0288	; 0x800288 <snakeHeadIndex>
    20c0:	0e 2e       	mov	r0, r30
    20c2:	00 0c       	add	r0, r0
    20c4:	ff 0b       	sbc	r31, r31
    20c6:	e6 57       	subi	r30, 0x76	; 118
    20c8:	fd 4f       	sbci	r31, 0xFD	; 253
    20ca:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    20cc:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    20d0:	8f 5f       	subi	r24, 0xFF	; 255
    20d2:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    20d6:	8c 2f       	mov	r24, r28
    20d8:	0e 94 6f 0c 	call	0x18de	; 0x18de <is_rat_at>
    20dc:	88 23       	and	r24, r24
    20de:	31 f0       	breq	.+12     	; 0x20ec <advance_snake_head+0x116>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20e0:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    20e4:	81 32       	cpi	r24, 0x21	; 33
    20e6:	e0 f0       	brcs	.+56     	; 0x2120 <advance_snake_head+0x14a>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    20e8:	87 e0       	ldi	r24, 0x07	; 7
    20ea:	21 c0       	rjmp	.+66     	; 0x212e <advance_snake_head+0x158>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    20ec:	8c 2f       	mov	r24, r28
    20ee:	0e 94 1d 11 	call	0x223a	; 0x223a <is_superfood_at>
    20f2:	88 23       	and	r24, r24
    20f4:	31 f0       	breq	.+12     	; 0x2102 <advance_snake_head+0x12c>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    20f6:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    20fa:	81 32       	cpi	r24, 0x21	; 33
    20fc:	98 f0       	brcs	.+38     	; 0x2124 <advance_snake_head+0x14e>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    20fe:	85 e0       	ldi	r24, 0x05	; 5
    2100:	16 c0       	rjmp	.+44     	; 0x212e <advance_snake_head+0x158>
		}
	}
	if(is_food_at(newHeadPosn)) {
    2102:	8c 2f       	mov	r24, r28
    2104:	0e 94 51 07 	call	0xea2	; 0xea2 <is_food_at>
    2108:	88 23       	and	r24, r24
    210a:	71 f0       	breq	.+28     	; 0x2128 <advance_snake_head+0x152>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    210c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <snakeLength>
    2110:	81 32       	cpi	r24, 0x21	; 33
    2112:	60 f0       	brcs	.+24     	; 0x212c <advance_snake_head+0x156>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	0b c0       	rjmp	.+22     	; 0x212e <advance_snake_head+0x158>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    2118:	8d ef       	ldi	r24, 0xFD	; 253
    211a:	09 c0       	rjmp	.+18     	; 0x212e <advance_snake_head+0x158>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    211c:	8e ef       	ldi	r24, 0xFE	; 254
    211e:	07 c0       	rjmp	.+14     	; 0x212e <advance_snake_head+0x158>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    2120:	86 e0       	ldi	r24, 0x06	; 6
    2122:	05 c0       	rjmp	.+10     	; 0x212e <advance_snake_head+0x158>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    2124:	84 e0       	ldi	r24, 0x04	; 4
    2126:	03 c0       	rjmp	.+6      	; 0x212e <advance_snake_head+0x158>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	01 c0       	rjmp	.+2      	; 0x212e <advance_snake_head+0x158>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    212c:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	1f 91       	pop	r17
    2134:	0f 91       	pop	r16
    2136:	08 95       	ret

00002138 <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    2138:	94 b1       	in	r25, 0x04	; 4
    213a:	90 6b       	ori	r25, 0xB0	; 176
    213c:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    213e:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    2140:	90 e5       	ldi	r25, 0x50	; 80
    2142:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    2144:	88 30       	cpi	r24, 0x08	; 8
    2146:	21 f0       	breq	.+8      	; 0x2150 <spi_setup_master+0x18>
    2148:	80 32       	cpi	r24, 0x20	; 32
    214a:	11 f0       	breq	.+4      	; 0x2150 <spi_setup_master+0x18>
    214c:	82 30       	cpi	r24, 0x02	; 2
    214e:	19 f4       	brne	.+6      	; 0x2156 <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    2150:	91 e0       	ldi	r25, 0x01	; 1
    2152:	9d bd       	out	0x2d, r25	; 45
			break;
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    2156:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    2158:	80 32       	cpi	r24, 0x20	; 32
    215a:	69 f0       	breq	.+26     	; 0x2176 <spi_setup_master+0x3e>
    215c:	28 f4       	brcc	.+10     	; 0x2168 <spi_setup_master+0x30>
    215e:	88 30       	cpi	r24, 0x08	; 8
    2160:	71 f0       	breq	.+28     	; 0x217e <spi_setup_master+0x46>
    2162:	80 31       	cpi	r24, 0x10	; 16
    2164:	61 f0       	breq	.+24     	; 0x217e <spi_setup_master+0x46>
    2166:	0e c0       	rjmp	.+28     	; 0x2184 <spi_setup_master+0x4c>
    2168:	80 34       	cpi	r24, 0x40	; 64
    216a:	29 f0       	breq	.+10     	; 0x2176 <spi_setup_master+0x3e>
    216c:	80 38       	cpi	r24, 0x80	; 128
    216e:	51 f4       	brne	.+20     	; 0x2184 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    2170:	8c b5       	in	r24, 0x2c	; 44
    2172:	81 60       	ori	r24, 0x01	; 1
    2174:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    2176:	8c b5       	in	r24, 0x2c	; 44
    2178:	82 60       	ori	r24, 0x02	; 2
    217a:	8c bd       	out	0x2c, r24	; 44
			break;
    217c:	03 c0       	rjmp	.+6      	; 0x2184 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    217e:	8c b5       	in	r24, 0x2c	; 44
    2180:	81 60       	ori	r24, 0x01	; 1
    2182:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2184:	2c 98       	cbi	0x05, 4	; 5
    2186:	08 95       	ret

00002188 <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    2188:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    218a:	0d b4       	in	r0, 0x2d	; 45
    218c:	07 fe       	sbrs	r0, 7
    218e:	fd cf       	rjmp	.-6      	; 0x218a <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2190:	8e b5       	in	r24, 0x2e	; 46
    2192:	08 95       	ret

00002194 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

void load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    2194:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <superfood_position>
	superfood_on_board = 1;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <superfood_on_board>
    219e:	08 95       	ret

000021a0 <superfood_is_on_board>:
}

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    21a0:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <superfood_on_board>
    21a4:	08 95       	ret

000021a6 <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    21a6:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    21aa:	68 59       	subi	r22, 0x98	; 152
    21ac:	7a 43       	sbci	r23, 0x3A	; 58
    21ae:	81 09       	sbc	r24, r1
    21b0:	91 09       	sbc	r25, r1
    21b2:	20 e2       	ldi	r18, 0x20	; 32
    21b4:	3e e4       	ldi	r19, 0x4E	; 78
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
    21be:	67 2b       	or	r22, r23
    21c0:	68 2b       	or	r22, r24
    21c2:	69 2b       	or	r22, r25
    21c4:	21 f4       	brne	.+8      	; 0x21ce <time_to_add_superfood+0x28>
    21c6:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	08 95       	ret
    21ce:	80 e0       	ldi	r24, 0x00	; 0
}
    21d0:	08 95       	ret

000021d2 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    21d2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <get_clock_ticks>
    21d6:	20 e2       	ldi	r18, 0x20	; 32
    21d8:	3e e4       	ldi	r19, 0x4E	; 78
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
    21e2:	21 e0       	ldi	r18, 0x01	; 1
    21e4:	67 2b       	or	r22, r23
    21e6:	68 2b       	or	r22, r24
    21e8:	69 2b       	or	r22, r25
    21ea:	09 f0       	breq	.+2      	; 0x21ee <time_to_remove_superfood+0x1c>
    21ec:	20 e0       	ldi	r18, 0x00	; 0
}
    21ee:	82 2f       	mov	r24, r18
    21f0:	08 95       	ret

000021f2 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    21f2:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    21f4:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    21f8:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    21fc:	c8 2f       	mov	r28, r24
    21fe:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    2202:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    2206:	40 e0       	ldi	r20, 0x00	; 0
    2208:	6c 2f       	mov	r22, r28
    220a:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    220e:	60 e0       	ldi	r22, 0x00	; 0
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    2216:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <superfood_position>
	superfood_on_board = 0; 
    221a:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <superfood_on_board>
}
    221e:	cf 91       	pop	r28
    2220:	08 95       	ret

00002222 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    2222:	60 e0       	ldi	r22, 0x00	; 0
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    222a:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <superfood_position>
	superfood_on_board = 0;
    222e:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <superfood_on_board>
    2232:	08 95       	ret

00002234 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    2234:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    2238:	08 95       	ret

0000223a <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    223a:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <superfood_on_board>
    223e:	99 23       	and	r25, r25
    2240:	39 f0       	breq	.+14     	; 0x2250 <is_superfood_at+0x16>
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	20 91 dc 03 	lds	r18, 0x03DC	; 0x8003dc <superfood_position>
    2248:	28 13       	cpse	r18, r24
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	89 2f       	mov	r24, r25
    224e:	08 95       	ret
    2250:	80 e0       	ldi	r24, 0x00	; 0
}
    2252:	08 95       	ret

00002254 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    225a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    225e:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
    2262:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    2264:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
		test_position = position(x,y);
    2268:	bc 01       	movw	r22, r24
    226a:	67 70       	andi	r22, 0x07	; 7
    226c:	70 78       	andi	r23, 0x80	; 128
    226e:	77 23       	and	r23, r23
    2270:	34 f4       	brge	.+12     	; 0x227e <add_superfood_to_board+0x2a>
    2272:	61 50       	subi	r22, 0x01	; 1
    2274:	71 09       	sbc	r23, r1
    2276:	68 6f       	ori	r22, 0xF8	; 248
    2278:	7f 6f       	ori	r23, 0xFF	; 255
    227a:	6f 5f       	subi	r22, 0xFF	; 255
    227c:	7f 4f       	sbci	r23, 0xFF	; 255
    227e:	ce 01       	movw	r24, r28
    2280:	8f 70       	andi	r24, 0x0F	; 15
    2282:	90 78       	andi	r25, 0x80	; 128
    2284:	99 23       	and	r25, r25
    2286:	24 f4       	brge	.+8      	; 0x2290 <add_superfood_to_board+0x3c>
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	80 6f       	ori	r24, 0xF0	; 240
    228c:	9f 6f       	ori	r25, 0xFF	; 255
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    2294:	c8 2f       	mov	r28, r24
    2296:	13 e6       	ldi	r17, 0x63	; 99
    2298:	1e c0       	rjmp	.+60     	; 0x22d6 <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    229a:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
    229e:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    22a0:	0e 94 b1 14 	call	0x2962	; 0x2962 <rand>
		test_position = position(x,y);
    22a4:	bc 01       	movw	r22, r24
    22a6:	67 70       	andi	r22, 0x07	; 7
    22a8:	70 78       	andi	r23, 0x80	; 128
    22aa:	77 23       	and	r23, r23
    22ac:	34 f4       	brge	.+12     	; 0x22ba <add_superfood_to_board+0x66>
    22ae:	61 50       	subi	r22, 0x01	; 1
    22b0:	71 09       	sbc	r23, r1
    22b2:	68 6f       	ori	r22, 0xF8	; 248
    22b4:	7f 6f       	ori	r23, 0xFF	; 255
    22b6:	6f 5f       	subi	r22, 0xFF	; 255
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	ce 01       	movw	r24, r28
    22bc:	8f 70       	andi	r24, 0x0F	; 15
    22be:	90 78       	andi	r25, 0x80	; 128
    22c0:	99 23       	and	r25, r25
    22c2:	24 f4       	brge	.+8      	; 0x22cc <add_superfood_to_board+0x78>
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	80 6f       	ori	r24, 0xF0	; 240
    22c8:	9f 6f       	ori	r25, 0xFF	; 255
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 9e 09 	call	0x133c	; 0x133c <position>
    22d0:	c8 2f       	mov	r28, r24
    22d2:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22d4:	a1 f0       	breq	.+40     	; 0x22fe <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    22d6:	8c 2f       	mov	r24, r28
    22d8:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    22dc:	81 11       	cpse	r24, r1
    22de:	dd cf       	rjmp	.-70     	; 0x229a <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    22e0:	8c 2f       	mov	r24, r28
    22e2:	0e 94 51 07 	call	0xea2	; 0xea2 <is_food_at>
    22e6:	81 11       	cpse	r24, r1
    22e8:	d8 cf       	rjmp	.-80     	; 0x229a <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    22ea:	8c 2f       	mov	r24, r28
    22ec:	0e 94 1d 11 	call	0x223a	; 0x223a <is_superfood_at>
    22f0:	81 11       	cpse	r24, r1
    22f2:	d3 cf       	rjmp	.-90     	; 0x229a <add_superfood_to_board+0x46>
    22f4:	8c 2f       	mov	r24, r28
    22f6:	0e 94 6f 0c 	call	0x18de	; 0x18de <is_rat_at>
    22fa:	81 11       	cpse	r24, r1
    22fc:	ce cf       	rjmp	.-100    	; 0x229a <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    22fe:	c0 93 dc 03 	sts	0x03DC, r28	; 0x8003dc <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    2302:	8c 2f       	mov	r24, r28
    2304:	0e 94 96 09 	call	0x132c	; 0x132c <y_position>
    2308:	c8 2f       	mov	r28, r24
    230a:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <superfood_position>
    230e:	0e 94 93 09 	call	0x1326	; 0x1326 <x_position>
    2312:	4c e3       	ldi	r20, 0x3C	; 60
    2314:	6c 2f       	mov	r22, r28
    2316:	0e 94 4c 09 	call	0x1298	; 0x1298 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <superfood_on_board>
}
    2320:	df 91       	pop	r29
    2322:	cf 91       	pop	r28
    2324:	1f 91       	pop	r17
    2326:	08 95       	ret

00002328 <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    2328:	28 2f       	mov	r18, r24
    232a:	08 2e       	mov	r0, r24
    232c:	00 0c       	add	r0, r0
    232e:	33 0b       	sbc	r19, r19
    2330:	3f 93       	push	r19
    2332:	8f 93       	push	r24
    2334:	86 2f       	mov	r24, r22
    2336:	06 2e       	mov	r0, r22
    2338:	00 0c       	add	r0, r0
    233a:	99 0b       	sbc	r25, r25
    233c:	9f 93       	push	r25
    233e:	6f 93       	push	r22
    2340:	8d ed       	ldi	r24, 0xDD	; 221
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	9f 93       	push	r25
    2346:	8f 93       	push	r24
    2348:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	08 95       	ret

0000235a <clear_terminal>:
    235a:	88 ed       	ldi	r24, 0xD8	; 216
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	9f 93       	push	r25
    2360:	8f 93       	push	r24
    2362:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	08 95       	ret

0000236c <set_display_attribute>:
    236c:	1f 92       	push	r1
    236e:	8f 93       	push	r24
    2370:	82 ed       	ldi	r24, 0xD2	; 210
    2372:	91 e0       	ldi	r25, 0x01	; 1
    2374:	9f 93       	push	r25
    2376:	8f 93       	push	r24
    2378:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	08 95       	ret

00002386 <hide_cursor>:
    2386:	8b ec       	ldi	r24, 0xCB	; 203
    2388:	91 e0       	ldi	r25, 0x01	; 1
    238a:	9f 93       	push	r25
    238c:	8f 93       	push	r24
    238e:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	08 95       	ret

00002398 <show_cursor>:
    2398:	84 ec       	ldi	r24, 0xC4	; 196
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	9f 93       	push	r25
    239e:	8f 93       	push	r24
    23a0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	08 95       	ret

000023aa <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    23aa:	63 e0       	ldi	r22, 0x03	; 3
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf_P(PSTR("Snake"));
    23b2:	8e eb       	ldi	r24, 0xBE	; 190
    23b4:	91 e0       	ldi	r25, 0x01	; 1
    23b6:	9f 93       	push	r25
    23b8:	8f 93       	push	r24
    23ba:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>

	move_cursor(3,5);
    23be:	65 e0       	ldi	r22, 0x05	; 5
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    23c6:	80 e2       	ldi	r24, 0x20	; 32
    23c8:	0e 94 b6 11 	call	0x236c	; 0x236c <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    23cc:	84 e9       	ldi	r24, 0x94	; 148
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	9f 93       	push	r25
    23d2:	8f 93       	push	r24
    23d4:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    23d8:	85 e2       	ldi	r24, 0x25	; 37
    23da:	0e 94 b6 11 	call	0x236c	; 0x236c <set_display_attribute>
	display_EEPROM_high_score();
    23de:	0e 94 3a 06 	call	0xc74	; 0xc74 <display_EEPROM_high_score>
}
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	08 95       	ret

000023ec <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    23ec:	0e 94 c3 11 	call	0x2386	; 0x2386 <hide_cursor>
	
	move_cursor(10,1);
    23f0:	61 e0       	ldi	r22, 0x01	; 1
    23f2:	8a e0       	ldi	r24, 0x0A	; 10
    23f4:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf("Snake");
    23f8:	8d e4       	ldi	r24, 0x4D	; 77
    23fa:	92 e0       	ldi	r25, 0x02	; 2
    23fc:	9f 93       	push	r25
    23fe:	8f 93       	push	r24
    2400:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>

	move_cursor(1,3);
    2404:	63 e0       	ldi	r22, 0x03	; 3
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf("Score:  ");
    240c:	83 e5       	ldi	r24, 0x53	; 83
    240e:	92 e0       	ldi	r25, 0x02	; 2
    2410:	9f 93       	push	r25
    2412:	8f 93       	push	r24
    2414:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
	
}
    2418:	0f 90       	pop	r0
    241a:	0f 90       	pop	r0
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	08 95       	ret

00002422 <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    2422:	0e 94 c3 11 	call	0x2386	; 0x2386 <hide_cursor>
	move_cursor(1, 3);
    2426:	63 e0       	ldi	r22, 0x03	; 3
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	0e 94 94 11 	call	0x2328	; 0x2328 <move_cursor>
	printf("Score: %8lu", get_score());
    242e:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <get_score>
    2432:	9f 93       	push	r25
    2434:	8f 93       	push	r24
    2436:	7f 93       	push	r23
    2438:	6f 93       	push	r22
    243a:	8c e5       	ldi	r24, 0x5C	; 92
    243c:	92 e0       	ldi	r25, 0x02	; 2
    243e:	9f 93       	push	r25
    2440:	8f 93       	push	r24
    2442:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <printf>
}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	0f 90       	pop	r0
    2452:	08 95       	ret

00002454 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    2454:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <clock_ticks>
    2458:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <clock_ticks+0x1>
    245c:	10 92 ad 02 	sts	0x02AD, r1	; 0x8002ad <clock_ticks+0x2>
    2460:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2464:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2466:	8c e7       	ldi	r24, 0x7C	; 124
    2468:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    246a:	82 e0       	ldi	r24, 0x02	; 2
    246c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    246e:	83 e0       	ldi	r24, 0x03	; 3
    2470:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    2472:	ee e6       	ldi	r30, 0x6E	; 110
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	82 60       	ori	r24, 0x02	; 2
    247a:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    247c:	85 b3       	in	r24, 0x15	; 21
    247e:	82 70       	andi	r24, 0x02	; 2
    2480:	85 bb       	out	0x15, r24	; 21
    2482:	08 95       	ret

00002484 <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    2484:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <unpaused_game>
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	89 1b       	sub	r24, r25
    248c:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <unpaused_game>
    2490:	08 95       	ret

00002492 <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    2492:	20 91 6f 01 	lds	r18, 0x016F	; 0x80016f <unpaused_game>
    2496:	81 e0       	ldi	r24, 0x01	; 1
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	22 23       	and	r18, r18
    249c:	11 f0       	breq	.+4      	; 0x24a2 <timer_is_paused+0x10>
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    24a2:	08 95       	ret

000024a4 <get_clock_ticks>:
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	// uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
	cli();
    24a4:	f8 94       	cli
	return_value = clock_ticks;
    24a6:	60 91 ab 02 	lds	r22, 0x02AB	; 0x8002ab <clock_ticks>
    24aa:	70 91 ac 02 	lds	r23, 0x02AC	; 0x8002ac <clock_ticks+0x1>
    24ae:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <clock_ticks+0x2>
    24b2:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <clock_ticks+0x3>
	//if(interrupts_were_on) {
	sei();
    24b6:	78 94       	sei
	//}
	return return_value;
}
    24b8:	08 95       	ret

000024ba <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	//uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
	cli();
    24ba:	f8 94       	cli
	clock_ticks =clock;
    24bc:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <clock_ticks>
    24c0:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <clock_ticks+0x1>
    24c4:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <clock_ticks+0x2>
    24c8:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <clock_ticks+0x3>
	sei();
    24cc:	78 94       	sei
    24ce:	08 95       	ret

000024d0 <display_SSD_value>:

void display_SSD_value(void){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    24d0:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <SSD_CC_value>
    24d4:	88 23       	and	r24, r24
    24d6:	99 f0       	breq	.+38     	; 0x24fe <display_SSD_value+0x2e>
		DDRC = 0x00; 
    24d8:	17 b8       	out	0x07, r1	; 7
		PORTD |= (1<<2);
    24da:	5a 9a       	sbi	0x0b, 2	; 11
		DDRC = 0xff; 
    24dc:	8f ef       	ldi	r24, 0xFF	; 255
    24de:	87 b9       	out	0x07, r24	; 7
		PORTC = seven_seg_for_tens[get_snake_length()/10];
    24e0:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <get_snake_length>
    24e4:	ed ec       	ldi	r30, 0xCD	; 205
    24e6:	8e 9f       	mul	r24, r30
    24e8:	e1 2d       	mov	r30, r1
    24ea:	11 24       	eor	r1, r1
    24ec:	e6 95       	lsr	r30
    24ee:	e6 95       	lsr	r30
    24f0:	e6 95       	lsr	r30
    24f2:	f0 e0       	ldi	r31, 0x00	; 0
    24f4:	ec 59       	subi	r30, 0x9C	; 156
    24f6:	fe 4f       	sbci	r31, 0xFE	; 254
    24f8:	80 81       	ld	r24, Z
    24fa:	88 b9       	out	0x08, r24	; 8
    24fc:	19 c0       	rjmp	.+50     	; 0x2530 <display_SSD_value+0x60>

	}
	else{
		DDRC = 0x00; 
    24fe:	17 b8       	out	0x07, r1	; 7
		PORTD &= ~(1<<2);
    2500:	5a 98       	cbi	0x0b, 2	; 11
		DDRC = 0xff;		
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	87 b9       	out	0x07, r24	; 7
		PORTC = seven_seg_for_ones[get_snake_length()%10];
    2506:	0e 94 72 0f 	call	0x1ee4	; 0x1ee4 <get_snake_length>
    250a:	9d ec       	ldi	r25, 0xCD	; 205
    250c:	89 9f       	mul	r24, r25
    250e:	91 2d       	mov	r25, r1
    2510:	11 24       	eor	r1, r1
    2512:	96 95       	lsr	r25
    2514:	96 95       	lsr	r25
    2516:	96 95       	lsr	r25
    2518:	99 0f       	add	r25, r25
    251a:	29 2f       	mov	r18, r25
    251c:	22 0f       	add	r18, r18
    251e:	22 0f       	add	r18, r18
    2520:	92 0f       	add	r25, r18
    2522:	89 1b       	sub	r24, r25
    2524:	e8 2f       	mov	r30, r24
    2526:	f0 e0       	ldi	r31, 0x00	; 0
    2528:	e6 5a       	subi	r30, 0xA6	; 166
    252a:	fe 4f       	sbci	r31, 0xFE	; 254
    252c:	80 81       	ld	r24, Z
    252e:	88 b9       	out	0x08, r24	; 8
	}
		
	SSD_CC_value = 1-SSD_CC_value; 
    2530:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <SSD_CC_value>
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	89 1b       	sub	r24, r25
    2538:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <SSD_CC_value>
    253c:	08 95       	ret

0000253e <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    253e:	1f 92       	push	r1
    2540:	0f 92       	push	r0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	0f 92       	push	r0
    2546:	11 24       	eor	r1, r1
    2548:	2f 93       	push	r18
    254a:	3f 93       	push	r19
    254c:	4f 93       	push	r20
    254e:	5f 93       	push	r21
    2550:	6f 93       	push	r22
    2552:	7f 93       	push	r23
    2554:	8f 93       	push	r24
    2556:	9f 93       	push	r25
    2558:	af 93       	push	r26
    255a:	bf 93       	push	r27
    255c:	ef 93       	push	r30
    255e:	ff 93       	push	r31
	if(unpaused_game){
    2560:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <unpaused_game>
    2564:	88 23       	and	r24, r24
    2566:	99 f0       	breq	.+38     	; 0x258e <__vector_16+0x50>
		clock_ticks++;
    2568:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <clock_ticks>
    256c:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <clock_ticks+0x1>
    2570:	a0 91 ad 02 	lds	r26, 0x02AD	; 0x8002ad <clock_ticks+0x2>
    2574:	b0 91 ae 02 	lds	r27, 0x02AE	; 0x8002ae <clock_ticks+0x3>
    2578:	01 96       	adiw	r24, 0x01	; 1
    257a:	a1 1d       	adc	r26, r1
    257c:	b1 1d       	adc	r27, r1
    257e:	80 93 ab 02 	sts	0x02AB, r24	; 0x8002ab <clock_ticks>
    2582:	90 93 ac 02 	sts	0x02AC, r25	; 0x8002ac <clock_ticks+0x1>
    2586:	a0 93 ad 02 	sts	0x02AD, r26	; 0x8002ad <clock_ticks+0x2>
    258a:	b0 93 ae 02 	sts	0x02AE, r27	; 0x8002ae <clock_ticks+0x3>
	}
	display_SSD_value();
    258e:	0e 94 68 12 	call	0x24d0	; 0x24d0 <display_SSD_value>
	handle_buzzer_loop();
    2592:	0e 94 55 02 	call	0x4aa	; 0x4aa <handle_buzzer_loop>
}
    2596:	ff 91       	pop	r31
    2598:	ef 91       	pop	r30
    259a:	bf 91       	pop	r27
    259c:	af 91       	pop	r26
    259e:	9f 91       	pop	r25
    25a0:	8f 91       	pop	r24
    25a2:	7f 91       	pop	r23
    25a4:	6f 91       	pop	r22
    25a6:	5f 91       	pop	r21
    25a8:	4f 91       	pop	r20
    25aa:	3f 91       	pop	r19
    25ac:	2f 91       	pop	r18
    25ae:	0f 90       	pop	r0
    25b0:	0f be       	out	0x3f, r0	; 63
    25b2:	0f 90       	pop	r0
    25b4:	1f 90       	pop	r1
    25b6:	18 95       	reti

000025b8 <initialise_timer_one>:

}
void change_timer_one_frequency(int new_frequency){
	//
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    25b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    25bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    25c0:	e1 e8       	ldi	r30, 0x81	; 129
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	8a 60       	ori	r24, 0x0A	; 10
    25c8:	80 83       	st	Z, r24
    25ca:	80 e4       	ldi	r24, 0x40	; 64
    25cc:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    25d0:	88 ee       	ldi	r24, 0xE8	; 232
    25d2:	93 e0       	ldi	r25, 0x03	; 3
    25d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    25d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    25dc:	55 98       	cbi	0x0a, 5	; 10
    25de:	53 98       	cbi	0x0a, 3	; 10
    25e0:	0e 94 a2 01 	call	0x344	; 0x344 <init_buzzer>
    25e4:	08 95       	ret

000025e6 <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A);
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    25e6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    25ea:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    25ee:	08 95       	ret

000025f0 <enable_timer_one>:
}
void enable_timer_one(void){
	DDRD |= (1<<5);
    25f0:	55 9a       	sbi	0x0a, 5	; 10
    25f2:	08 95       	ret

000025f4 <__fixunssfsi>:
    25f4:	0e 94 6e 13 	call	0x26dc	; 0x26dc <__fp_splitA>
    25f8:	88 f0       	brcs	.+34     	; 0x261c <__fixunssfsi+0x28>
    25fa:	9f 57       	subi	r25, 0x7F	; 127
    25fc:	98 f0       	brcs	.+38     	; 0x2624 <__fixunssfsi+0x30>
    25fe:	b9 2f       	mov	r27, r25
    2600:	99 27       	eor	r25, r25
    2602:	b7 51       	subi	r27, 0x17	; 23
    2604:	b0 f0       	brcs	.+44     	; 0x2632 <__fixunssfsi+0x3e>
    2606:	e1 f0       	breq	.+56     	; 0x2640 <__fixunssfsi+0x4c>
    2608:	66 0f       	add	r22, r22
    260a:	77 1f       	adc	r23, r23
    260c:	88 1f       	adc	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	1a f0       	brmi	.+6      	; 0x2618 <__fixunssfsi+0x24>
    2612:	ba 95       	dec	r27
    2614:	c9 f7       	brne	.-14     	; 0x2608 <__fixunssfsi+0x14>
    2616:	14 c0       	rjmp	.+40     	; 0x2640 <__fixunssfsi+0x4c>
    2618:	b1 30       	cpi	r27, 0x01	; 1
    261a:	91 f0       	breq	.+36     	; 0x2640 <__fixunssfsi+0x4c>
    261c:	0e 94 88 13 	call	0x2710	; 0x2710 <__fp_zero>
    2620:	b1 e0       	ldi	r27, 0x01	; 1
    2622:	08 95       	ret
    2624:	0c 94 88 13 	jmp	0x2710	; 0x2710 <__fp_zero>
    2628:	67 2f       	mov	r22, r23
    262a:	78 2f       	mov	r23, r24
    262c:	88 27       	eor	r24, r24
    262e:	b8 5f       	subi	r27, 0xF8	; 248
    2630:	39 f0       	breq	.+14     	; 0x2640 <__fixunssfsi+0x4c>
    2632:	b9 3f       	cpi	r27, 0xF9	; 249
    2634:	cc f3       	brlt	.-14     	; 0x2628 <__fixunssfsi+0x34>
    2636:	86 95       	lsr	r24
    2638:	77 95       	ror	r23
    263a:	67 95       	ror	r22
    263c:	b3 95       	inc	r27
    263e:	d9 f7       	brne	.-10     	; 0x2636 <__fixunssfsi+0x42>
    2640:	3e f4       	brtc	.+14     	; 0x2650 <__fixunssfsi+0x5c>
    2642:	90 95       	com	r25
    2644:	80 95       	com	r24
    2646:	70 95       	com	r23
    2648:	61 95       	neg	r22
    264a:	7f 4f       	sbci	r23, 0xFF	; 255
    264c:	8f 4f       	sbci	r24, 0xFF	; 255
    264e:	9f 4f       	sbci	r25, 0xFF	; 255
    2650:	08 95       	ret

00002652 <__floatunsisf>:
    2652:	e8 94       	clt
    2654:	09 c0       	rjmp	.+18     	; 0x2668 <__floatsisf+0x12>

00002656 <__floatsisf>:
    2656:	97 fb       	bst	r25, 7
    2658:	3e f4       	brtc	.+14     	; 0x2668 <__floatsisf+0x12>
    265a:	90 95       	com	r25
    265c:	80 95       	com	r24
    265e:	70 95       	com	r23
    2660:	61 95       	neg	r22
    2662:	7f 4f       	sbci	r23, 0xFF	; 255
    2664:	8f 4f       	sbci	r24, 0xFF	; 255
    2666:	9f 4f       	sbci	r25, 0xFF	; 255
    2668:	99 23       	and	r25, r25
    266a:	a9 f0       	breq	.+42     	; 0x2696 <__floatsisf+0x40>
    266c:	f9 2f       	mov	r31, r25
    266e:	96 e9       	ldi	r25, 0x96	; 150
    2670:	bb 27       	eor	r27, r27
    2672:	93 95       	inc	r25
    2674:	f6 95       	lsr	r31
    2676:	87 95       	ror	r24
    2678:	77 95       	ror	r23
    267a:	67 95       	ror	r22
    267c:	b7 95       	ror	r27
    267e:	f1 11       	cpse	r31, r1
    2680:	f8 cf       	rjmp	.-16     	; 0x2672 <__floatsisf+0x1c>
    2682:	fa f4       	brpl	.+62     	; 0x26c2 <__floatsisf+0x6c>
    2684:	bb 0f       	add	r27, r27
    2686:	11 f4       	brne	.+4      	; 0x268c <__floatsisf+0x36>
    2688:	60 ff       	sbrs	r22, 0
    268a:	1b c0       	rjmp	.+54     	; 0x26c2 <__floatsisf+0x6c>
    268c:	6f 5f       	subi	r22, 0xFF	; 255
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	8f 4f       	sbci	r24, 0xFF	; 255
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	16 c0       	rjmp	.+44     	; 0x26c2 <__floatsisf+0x6c>
    2696:	88 23       	and	r24, r24
    2698:	11 f0       	breq	.+4      	; 0x269e <__floatsisf+0x48>
    269a:	96 e9       	ldi	r25, 0x96	; 150
    269c:	11 c0       	rjmp	.+34     	; 0x26c0 <__floatsisf+0x6a>
    269e:	77 23       	and	r23, r23
    26a0:	21 f0       	breq	.+8      	; 0x26aa <__floatsisf+0x54>
    26a2:	9e e8       	ldi	r25, 0x8E	; 142
    26a4:	87 2f       	mov	r24, r23
    26a6:	76 2f       	mov	r23, r22
    26a8:	05 c0       	rjmp	.+10     	; 0x26b4 <__floatsisf+0x5e>
    26aa:	66 23       	and	r22, r22
    26ac:	71 f0       	breq	.+28     	; 0x26ca <__floatsisf+0x74>
    26ae:	96 e8       	ldi	r25, 0x86	; 134
    26b0:	86 2f       	mov	r24, r22
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	60 e0       	ldi	r22, 0x00	; 0
    26b6:	2a f0       	brmi	.+10     	; 0x26c2 <__floatsisf+0x6c>
    26b8:	9a 95       	dec	r25
    26ba:	66 0f       	add	r22, r22
    26bc:	77 1f       	adc	r23, r23
    26be:	88 1f       	adc	r24, r24
    26c0:	da f7       	brpl	.-10     	; 0x26b8 <__floatsisf+0x62>
    26c2:	88 0f       	add	r24, r24
    26c4:	96 95       	lsr	r25
    26c6:	87 95       	ror	r24
    26c8:	97 f9       	bld	r25, 7
    26ca:	08 95       	ret

000026cc <__fp_split3>:
    26cc:	57 fd       	sbrc	r21, 7
    26ce:	90 58       	subi	r25, 0x80	; 128
    26d0:	44 0f       	add	r20, r20
    26d2:	55 1f       	adc	r21, r21
    26d4:	59 f0       	breq	.+22     	; 0x26ec <__fp_splitA+0x10>
    26d6:	5f 3f       	cpi	r21, 0xFF	; 255
    26d8:	71 f0       	breq	.+28     	; 0x26f6 <__fp_splitA+0x1a>
    26da:	47 95       	ror	r20

000026dc <__fp_splitA>:
    26dc:	88 0f       	add	r24, r24
    26de:	97 fb       	bst	r25, 7
    26e0:	99 1f       	adc	r25, r25
    26e2:	61 f0       	breq	.+24     	; 0x26fc <__fp_splitA+0x20>
    26e4:	9f 3f       	cpi	r25, 0xFF	; 255
    26e6:	79 f0       	breq	.+30     	; 0x2706 <__fp_splitA+0x2a>
    26e8:	87 95       	ror	r24
    26ea:	08 95       	ret
    26ec:	12 16       	cp	r1, r18
    26ee:	13 06       	cpc	r1, r19
    26f0:	14 06       	cpc	r1, r20
    26f2:	55 1f       	adc	r21, r21
    26f4:	f2 cf       	rjmp	.-28     	; 0x26da <__fp_split3+0xe>
    26f6:	46 95       	lsr	r20
    26f8:	f1 df       	rcall	.-30     	; 0x26dc <__fp_splitA>
    26fa:	08 c0       	rjmp	.+16     	; 0x270c <__fp_splitA+0x30>
    26fc:	16 16       	cp	r1, r22
    26fe:	17 06       	cpc	r1, r23
    2700:	18 06       	cpc	r1, r24
    2702:	99 1f       	adc	r25, r25
    2704:	f1 cf       	rjmp	.-30     	; 0x26e8 <__fp_splitA+0xc>
    2706:	86 95       	lsr	r24
    2708:	71 05       	cpc	r23, r1
    270a:	61 05       	cpc	r22, r1
    270c:	08 94       	sec
    270e:	08 95       	ret

00002710 <__fp_zero>:
    2710:	e8 94       	clt

00002712 <__fp_szero>:
    2712:	bb 27       	eor	r27, r27
    2714:	66 27       	eor	r22, r22
    2716:	77 27       	eor	r23, r23
    2718:	cb 01       	movw	r24, r22
    271a:	97 f9       	bld	r25, 7
    271c:	08 95       	ret

0000271e <__mulsf3>:
    271e:	0e 94 a2 13 	call	0x2744	; 0x2744 <__mulsf3x>
    2722:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__fp_round>
    2726:	0e 94 05 14 	call	0x280a	; 0x280a <__fp_pscA>
    272a:	38 f0       	brcs	.+14     	; 0x273a <__mulsf3+0x1c>
    272c:	0e 94 0c 14 	call	0x2818	; 0x2818 <__fp_pscB>
    2730:	20 f0       	brcs	.+8      	; 0x273a <__mulsf3+0x1c>
    2732:	95 23       	and	r25, r21
    2734:	11 f0       	breq	.+4      	; 0x273a <__mulsf3+0x1c>
    2736:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_inf>
    273a:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__fp_nan>
    273e:	11 24       	eor	r1, r1
    2740:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__fp_szero>

00002744 <__mulsf3x>:
    2744:	0e 94 66 13 	call	0x26cc	; 0x26cc <__fp_split3>
    2748:	70 f3       	brcs	.-36     	; 0x2726 <__mulsf3+0x8>

0000274a <__mulsf3_pse>:
    274a:	95 9f       	mul	r25, r21
    274c:	c1 f3       	breq	.-16     	; 0x273e <__mulsf3+0x20>
    274e:	95 0f       	add	r25, r21
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	55 1f       	adc	r21, r21
    2754:	62 9f       	mul	r22, r18
    2756:	f0 01       	movw	r30, r0
    2758:	72 9f       	mul	r23, r18
    275a:	bb 27       	eor	r27, r27
    275c:	f0 0d       	add	r31, r0
    275e:	b1 1d       	adc	r27, r1
    2760:	63 9f       	mul	r22, r19
    2762:	aa 27       	eor	r26, r26
    2764:	f0 0d       	add	r31, r0
    2766:	b1 1d       	adc	r27, r1
    2768:	aa 1f       	adc	r26, r26
    276a:	64 9f       	mul	r22, r20
    276c:	66 27       	eor	r22, r22
    276e:	b0 0d       	add	r27, r0
    2770:	a1 1d       	adc	r26, r1
    2772:	66 1f       	adc	r22, r22
    2774:	82 9f       	mul	r24, r18
    2776:	22 27       	eor	r18, r18
    2778:	b0 0d       	add	r27, r0
    277a:	a1 1d       	adc	r26, r1
    277c:	62 1f       	adc	r22, r18
    277e:	73 9f       	mul	r23, r19
    2780:	b0 0d       	add	r27, r0
    2782:	a1 1d       	adc	r26, r1
    2784:	62 1f       	adc	r22, r18
    2786:	83 9f       	mul	r24, r19
    2788:	a0 0d       	add	r26, r0
    278a:	61 1d       	adc	r22, r1
    278c:	22 1f       	adc	r18, r18
    278e:	74 9f       	mul	r23, r20
    2790:	33 27       	eor	r19, r19
    2792:	a0 0d       	add	r26, r0
    2794:	61 1d       	adc	r22, r1
    2796:	23 1f       	adc	r18, r19
    2798:	84 9f       	mul	r24, r20
    279a:	60 0d       	add	r22, r0
    279c:	21 1d       	adc	r18, r1
    279e:	82 2f       	mov	r24, r18
    27a0:	76 2f       	mov	r23, r22
    27a2:	6a 2f       	mov	r22, r26
    27a4:	11 24       	eor	r1, r1
    27a6:	9f 57       	subi	r25, 0x7F	; 127
    27a8:	50 40       	sbci	r21, 0x00	; 0
    27aa:	9a f0       	brmi	.+38     	; 0x27d2 <__mulsf3_pse+0x88>
    27ac:	f1 f0       	breq	.+60     	; 0x27ea <__mulsf3_pse+0xa0>
    27ae:	88 23       	and	r24, r24
    27b0:	4a f0       	brmi	.+18     	; 0x27c4 <__mulsf3_pse+0x7a>
    27b2:	ee 0f       	add	r30, r30
    27b4:	ff 1f       	adc	r31, r31
    27b6:	bb 1f       	adc	r27, r27
    27b8:	66 1f       	adc	r22, r22
    27ba:	77 1f       	adc	r23, r23
    27bc:	88 1f       	adc	r24, r24
    27be:	91 50       	subi	r25, 0x01	; 1
    27c0:	50 40       	sbci	r21, 0x00	; 0
    27c2:	a9 f7       	brne	.-22     	; 0x27ae <__mulsf3_pse+0x64>
    27c4:	9e 3f       	cpi	r25, 0xFE	; 254
    27c6:	51 05       	cpc	r21, r1
    27c8:	80 f0       	brcs	.+32     	; 0x27ea <__mulsf3_pse+0xa0>
    27ca:	0c 94 fc 13 	jmp	0x27f8	; 0x27f8 <__fp_inf>
    27ce:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__fp_szero>
    27d2:	5f 3f       	cpi	r21, 0xFF	; 255
    27d4:	e4 f3       	brlt	.-8      	; 0x27ce <__mulsf3_pse+0x84>
    27d6:	98 3e       	cpi	r25, 0xE8	; 232
    27d8:	d4 f3       	brlt	.-12     	; 0x27ce <__mulsf3_pse+0x84>
    27da:	86 95       	lsr	r24
    27dc:	77 95       	ror	r23
    27de:	67 95       	ror	r22
    27e0:	b7 95       	ror	r27
    27e2:	f7 95       	ror	r31
    27e4:	e7 95       	ror	r30
    27e6:	9f 5f       	subi	r25, 0xFF	; 255
    27e8:	c1 f7       	brne	.-16     	; 0x27da <__mulsf3_pse+0x90>
    27ea:	fe 2b       	or	r31, r30
    27ec:	88 0f       	add	r24, r24
    27ee:	91 1d       	adc	r25, r1
    27f0:	96 95       	lsr	r25
    27f2:	87 95       	ror	r24
    27f4:	97 f9       	bld	r25, 7
    27f6:	08 95       	ret

000027f8 <__fp_inf>:
    27f8:	97 f9       	bld	r25, 7
    27fa:	9f 67       	ori	r25, 0x7F	; 127
    27fc:	80 e8       	ldi	r24, 0x80	; 128
    27fe:	70 e0       	ldi	r23, 0x00	; 0
    2800:	60 e0       	ldi	r22, 0x00	; 0
    2802:	08 95       	ret

00002804 <__fp_nan>:
    2804:	9f ef       	ldi	r25, 0xFF	; 255
    2806:	80 ec       	ldi	r24, 0xC0	; 192
    2808:	08 95       	ret

0000280a <__fp_pscA>:
    280a:	00 24       	eor	r0, r0
    280c:	0a 94       	dec	r0
    280e:	16 16       	cp	r1, r22
    2810:	17 06       	cpc	r1, r23
    2812:	18 06       	cpc	r1, r24
    2814:	09 06       	cpc	r0, r25
    2816:	08 95       	ret

00002818 <__fp_pscB>:
    2818:	00 24       	eor	r0, r0
    281a:	0a 94       	dec	r0
    281c:	12 16       	cp	r1, r18
    281e:	13 06       	cpc	r1, r19
    2820:	14 06       	cpc	r1, r20
    2822:	05 06       	cpc	r0, r21
    2824:	08 95       	ret

00002826 <__fp_round>:
    2826:	09 2e       	mov	r0, r25
    2828:	03 94       	inc	r0
    282a:	00 0c       	add	r0, r0
    282c:	11 f4       	brne	.+4      	; 0x2832 <__fp_round+0xc>
    282e:	88 23       	and	r24, r24
    2830:	52 f0       	brmi	.+20     	; 0x2846 <__fp_round+0x20>
    2832:	bb 0f       	add	r27, r27
    2834:	40 f4       	brcc	.+16     	; 0x2846 <__fp_round+0x20>
    2836:	bf 2b       	or	r27, r31
    2838:	11 f4       	brne	.+4      	; 0x283e <__fp_round+0x18>
    283a:	60 ff       	sbrs	r22, 0
    283c:	04 c0       	rjmp	.+8      	; 0x2846 <__fp_round+0x20>
    283e:	6f 5f       	subi	r22, 0xFF	; 255
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	8f 4f       	sbci	r24, 0xFF	; 255
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	08 95       	ret

00002848 <__udivmodsi4>:
    2848:	a1 e2       	ldi	r26, 0x21	; 33
    284a:	1a 2e       	mov	r1, r26
    284c:	aa 1b       	sub	r26, r26
    284e:	bb 1b       	sub	r27, r27
    2850:	fd 01       	movw	r30, r26
    2852:	0d c0       	rjmp	.+26     	; 0x286e <__udivmodsi4_ep>

00002854 <__udivmodsi4_loop>:
    2854:	aa 1f       	adc	r26, r26
    2856:	bb 1f       	adc	r27, r27
    2858:	ee 1f       	adc	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	a2 17       	cp	r26, r18
    285e:	b3 07       	cpc	r27, r19
    2860:	e4 07       	cpc	r30, r20
    2862:	f5 07       	cpc	r31, r21
    2864:	20 f0       	brcs	.+8      	; 0x286e <__udivmodsi4_ep>
    2866:	a2 1b       	sub	r26, r18
    2868:	b3 0b       	sbc	r27, r19
    286a:	e4 0b       	sbc	r30, r20
    286c:	f5 0b       	sbc	r31, r21

0000286e <__udivmodsi4_ep>:
    286e:	66 1f       	adc	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	1a 94       	dec	r1
    2878:	69 f7       	brne	.-38     	; 0x2854 <__udivmodsi4_loop>
    287a:	60 95       	com	r22
    287c:	70 95       	com	r23
    287e:	80 95       	com	r24
    2880:	90 95       	com	r25
    2882:	9b 01       	movw	r18, r22
    2884:	ac 01       	movw	r20, r24
    2886:	bd 01       	movw	r22, r26
    2888:	cf 01       	movw	r24, r30
    288a:	08 95       	ret

0000288c <__divmodsi4>:
    288c:	05 2e       	mov	r0, r21
    288e:	97 fb       	bst	r25, 7
    2890:	1e f4       	brtc	.+6      	; 0x2898 <__divmodsi4+0xc>
    2892:	00 94       	com	r0
    2894:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__negsi2>
    2898:	57 fd       	sbrc	r21, 7
    289a:	07 d0       	rcall	.+14     	; 0x28aa <__divmodsi4_neg2>
    289c:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
    28a0:	07 fc       	sbrc	r0, 7
    28a2:	03 d0       	rcall	.+6      	; 0x28aa <__divmodsi4_neg2>
    28a4:	4e f4       	brtc	.+18     	; 0x28b8 <__divmodsi4_exit>
    28a6:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <__negsi2>

000028aa <__divmodsi4_neg2>:
    28aa:	50 95       	com	r21
    28ac:	40 95       	com	r20
    28ae:	30 95       	com	r19
    28b0:	21 95       	neg	r18
    28b2:	3f 4f       	sbci	r19, 0xFF	; 255
    28b4:	4f 4f       	sbci	r20, 0xFF	; 255
    28b6:	5f 4f       	sbci	r21, 0xFF	; 255

000028b8 <__divmodsi4_exit>:
    28b8:	08 95       	ret

000028ba <__negsi2>:
    28ba:	90 95       	com	r25
    28bc:	80 95       	com	r24
    28be:	70 95       	com	r23
    28c0:	61 95       	neg	r22
    28c2:	7f 4f       	sbci	r23, 0xFF	; 255
    28c4:	8f 4f       	sbci	r24, 0xFF	; 255
    28c6:	9f 4f       	sbci	r25, 0xFF	; 255
    28c8:	08 95       	ret

000028ca <do_rand>:
    28ca:	8f 92       	push	r8
    28cc:	9f 92       	push	r9
    28ce:	af 92       	push	r10
    28d0:	bf 92       	push	r11
    28d2:	cf 92       	push	r12
    28d4:	df 92       	push	r13
    28d6:	ef 92       	push	r14
    28d8:	ff 92       	push	r15
    28da:	cf 93       	push	r28
    28dc:	df 93       	push	r29
    28de:	ec 01       	movw	r28, r24
    28e0:	68 81       	ld	r22, Y
    28e2:	79 81       	ldd	r23, Y+1	; 0x01
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	9b 81       	ldd	r25, Y+3	; 0x03
    28e8:	61 15       	cp	r22, r1
    28ea:	71 05       	cpc	r23, r1
    28ec:	81 05       	cpc	r24, r1
    28ee:	91 05       	cpc	r25, r1
    28f0:	21 f4       	brne	.+8      	; 0x28fa <do_rand+0x30>
    28f2:	64 e2       	ldi	r22, 0x24	; 36
    28f4:	79 ed       	ldi	r23, 0xD9	; 217
    28f6:	8b e5       	ldi	r24, 0x5B	; 91
    28f8:	97 e0       	ldi	r25, 0x07	; 7
    28fa:	2d e1       	ldi	r18, 0x1D	; 29
    28fc:	33 ef       	ldi	r19, 0xF3	; 243
    28fe:	41 e0       	ldi	r20, 0x01	; 1
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	0e 94 46 14 	call	0x288c	; 0x288c <__divmodsi4>
    2906:	49 01       	movw	r8, r18
    2908:	5a 01       	movw	r10, r20
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	a7 ea       	ldi	r26, 0xA7	; 167
    2910:	b1 e4       	ldi	r27, 0x41	; 65
    2912:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__muluhisi3>
    2916:	6b 01       	movw	r12, r22
    2918:	7c 01       	movw	r14, r24
    291a:	ac ee       	ldi	r26, 0xEC	; 236
    291c:	b4 ef       	ldi	r27, 0xF4	; 244
    291e:	a5 01       	movw	r20, r10
    2920:	94 01       	movw	r18, r8
    2922:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__mulohisi3>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8c 0d       	add	r24, r12
    292c:	9d 1d       	adc	r25, r13
    292e:	ae 1d       	adc	r26, r14
    2930:	bf 1d       	adc	r27, r15
    2932:	b7 ff       	sbrs	r27, 7
    2934:	03 c0       	rjmp	.+6      	; 0x293c <do_rand+0x72>
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	a1 09       	sbc	r26, r1
    293a:	b0 48       	sbci	r27, 0x80	; 128
    293c:	88 83       	st	Y, r24
    293e:	99 83       	std	Y+1, r25	; 0x01
    2940:	aa 83       	std	Y+2, r26	; 0x02
    2942:	bb 83       	std	Y+3, r27	; 0x03
    2944:	9f 77       	andi	r25, 0x7F	; 127
    2946:	df 91       	pop	r29
    2948:	cf 91       	pop	r28
    294a:	ff 90       	pop	r15
    294c:	ef 90       	pop	r14
    294e:	df 90       	pop	r13
    2950:	cf 90       	pop	r12
    2952:	bf 90       	pop	r11
    2954:	af 90       	pop	r10
    2956:	9f 90       	pop	r9
    2958:	8f 90       	pop	r8
    295a:	08 95       	ret

0000295c <rand_r>:
    295c:	0e 94 65 14 	call	0x28ca	; 0x28ca <do_rand>
    2960:	08 95       	ret

00002962 <rand>:
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	91 e0       	ldi	r25, 0x01	; 1
    2966:	0e 94 65 14 	call	0x28ca	; 0x28ca <do_rand>
    296a:	08 95       	ret

0000296c <srand>:
    296c:	a0 e0       	ldi	r26, 0x00	; 0
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    2974:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2978:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    297c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2980:	08 95       	ret

00002982 <random_r>:
    2982:	8f 92       	push	r8
    2984:	9f 92       	push	r9
    2986:	af 92       	push	r10
    2988:	bf 92       	push	r11
    298a:	cf 92       	push	r12
    298c:	df 92       	push	r13
    298e:	ef 92       	push	r14
    2990:	ff 92       	push	r15
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	ec 01       	movw	r28, r24
    2998:	68 81       	ld	r22, Y
    299a:	79 81       	ldd	r23, Y+1	; 0x01
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	9b 81       	ldd	r25, Y+3	; 0x03
    29a0:	61 15       	cp	r22, r1
    29a2:	71 05       	cpc	r23, r1
    29a4:	81 05       	cpc	r24, r1
    29a6:	91 05       	cpc	r25, r1
    29a8:	21 f4       	brne	.+8      	; 0x29b2 <random_r+0x30>
    29aa:	64 e2       	ldi	r22, 0x24	; 36
    29ac:	79 ed       	ldi	r23, 0xD9	; 217
    29ae:	8b e5       	ldi	r24, 0x5B	; 91
    29b0:	97 e0       	ldi	r25, 0x07	; 7
    29b2:	2d e1       	ldi	r18, 0x1D	; 29
    29b4:	33 ef       	ldi	r19, 0xF3	; 243
    29b6:	41 e0       	ldi	r20, 0x01	; 1
    29b8:	50 e0       	ldi	r21, 0x00	; 0
    29ba:	0e 94 46 14 	call	0x288c	; 0x288c <__divmodsi4>
    29be:	49 01       	movw	r8, r18
    29c0:	5a 01       	movw	r10, r20
    29c2:	9b 01       	movw	r18, r22
    29c4:	ac 01       	movw	r20, r24
    29c6:	a7 ea       	ldi	r26, 0xA7	; 167
    29c8:	b1 e4       	ldi	r27, 0x41	; 65
    29ca:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__muluhisi3>
    29ce:	6b 01       	movw	r12, r22
    29d0:	7c 01       	movw	r14, r24
    29d2:	ac ee       	ldi	r26, 0xEC	; 236
    29d4:	b4 ef       	ldi	r27, 0xF4	; 244
    29d6:	a5 01       	movw	r20, r10
    29d8:	94 01       	movw	r18, r8
    29da:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__mulohisi3>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	8c 0d       	add	r24, r12
    29e4:	9d 1d       	adc	r25, r13
    29e6:	ae 1d       	adc	r26, r14
    29e8:	bf 1d       	adc	r27, r15
    29ea:	b7 ff       	sbrs	r27, 7
    29ec:	03 c0       	rjmp	.+6      	; 0x29f4 <random_r+0x72>
    29ee:	01 97       	sbiw	r24, 0x01	; 1
    29f0:	a1 09       	sbc	r26, r1
    29f2:	b0 48       	sbci	r27, 0x80	; 128
    29f4:	88 83       	st	Y, r24
    29f6:	99 83       	std	Y+1, r25	; 0x01
    29f8:	aa 83       	std	Y+2, r26	; 0x02
    29fa:	bb 83       	std	Y+3, r27	; 0x03
    29fc:	bc 01       	movw	r22, r24
    29fe:	cd 01       	movw	r24, r26
    2a00:	9f 77       	andi	r25, 0x7F	; 127
    2a02:	df 91       	pop	r29
    2a04:	cf 91       	pop	r28
    2a06:	ff 90       	pop	r15
    2a08:	ef 90       	pop	r14
    2a0a:	df 90       	pop	r13
    2a0c:	cf 90       	pop	r12
    2a0e:	bf 90       	pop	r11
    2a10:	af 90       	pop	r10
    2a12:	9f 90       	pop	r9
    2a14:	8f 90       	pop	r8
    2a16:	08 95       	ret

00002a18 <random>:
    2a18:	8f 92       	push	r8
    2a1a:	9f 92       	push	r9
    2a1c:	af 92       	push	r10
    2a1e:	bf 92       	push	r11
    2a20:	cf 92       	push	r12
    2a22:	df 92       	push	r13
    2a24:	ef 92       	push	r14
    2a26:	ff 92       	push	r15
    2a28:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    2a2c:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    2a30:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    2a34:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    2a38:	61 15       	cp	r22, r1
    2a3a:	71 05       	cpc	r23, r1
    2a3c:	81 05       	cpc	r24, r1
    2a3e:	91 05       	cpc	r25, r1
    2a40:	21 f4       	brne	.+8      	; 0x2a4a <random+0x32>
    2a42:	64 e2       	ldi	r22, 0x24	; 36
    2a44:	79 ed       	ldi	r23, 0xD9	; 217
    2a46:	8b e5       	ldi	r24, 0x5B	; 91
    2a48:	97 e0       	ldi	r25, 0x07	; 7
    2a4a:	2d e1       	ldi	r18, 0x1D	; 29
    2a4c:	33 ef       	ldi	r19, 0xF3	; 243
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	50 e0       	ldi	r21, 0x00	; 0
    2a52:	0e 94 46 14 	call	0x288c	; 0x288c <__divmodsi4>
    2a56:	49 01       	movw	r8, r18
    2a58:	5a 01       	movw	r10, r20
    2a5a:	9b 01       	movw	r18, r22
    2a5c:	ac 01       	movw	r20, r24
    2a5e:	a7 ea       	ldi	r26, 0xA7	; 167
    2a60:	b1 e4       	ldi	r27, 0x41	; 65
    2a62:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__muluhisi3>
    2a66:	6b 01       	movw	r12, r22
    2a68:	7c 01       	movw	r14, r24
    2a6a:	ac ee       	ldi	r26, 0xEC	; 236
    2a6c:	b4 ef       	ldi	r27, 0xF4	; 244
    2a6e:	a5 01       	movw	r20, r10
    2a70:	94 01       	movw	r18, r8
    2a72:	0e 94 f6 18 	call	0x31ec	; 0x31ec <__mulohisi3>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	8c 0d       	add	r24, r12
    2a7c:	9d 1d       	adc	r25, r13
    2a7e:	ae 1d       	adc	r26, r14
    2a80:	bf 1d       	adc	r27, r15
    2a82:	b7 ff       	sbrs	r27, 7
    2a84:	03 c0       	rjmp	.+6      	; 0x2a8c <random+0x74>
    2a86:	01 97       	sbiw	r24, 0x01	; 1
    2a88:	a1 09       	sbc	r26, r1
    2a8a:	b0 48       	sbci	r27, 0x80	; 128
    2a8c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2a90:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    2a94:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2a98:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2a9c:	bc 01       	movw	r22, r24
    2a9e:	cd 01       	movw	r24, r26
    2aa0:	9f 77       	andi	r25, 0x7F	; 127
    2aa2:	ff 90       	pop	r15
    2aa4:	ef 90       	pop	r14
    2aa6:	df 90       	pop	r13
    2aa8:	cf 90       	pop	r12
    2aaa:	bf 90       	pop	r11
    2aac:	af 90       	pop	r10
    2aae:	9f 90       	pop	r9
    2ab0:	8f 90       	pop	r8
    2ab2:	08 95       	ret

00002ab4 <srandom>:
    2ab4:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2ab8:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2abc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2ac0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    2ac4:	08 95       	ret

00002ac6 <fgetc>:
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	ec 01       	movw	r28, r24
    2acc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ace:	20 ff       	sbrs	r18, 0
    2ad0:	33 c0       	rjmp	.+102    	; 0x2b38 <fgetc+0x72>
    2ad2:	26 ff       	sbrs	r18, 6
    2ad4:	0a c0       	rjmp	.+20     	; 0x2aea <fgetc+0x24>
    2ad6:	2f 7b       	andi	r18, 0xBF	; 191
    2ad8:	2b 83       	std	Y+3, r18	; 0x03
    2ada:	8e 81       	ldd	r24, Y+6	; 0x06
    2adc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ade:	01 96       	adiw	r24, 0x01	; 1
    2ae0:	9f 83       	std	Y+7, r25	; 0x07
    2ae2:	8e 83       	std	Y+6, r24	; 0x06
    2ae4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae6:	90 e0       	ldi	r25, 0x00	; 0
    2ae8:	29 c0       	rjmp	.+82     	; 0x2b3c <fgetc+0x76>
    2aea:	22 ff       	sbrs	r18, 2
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <fgetc+0x46>
    2aee:	e8 81       	ld	r30, Y
    2af0:	f9 81       	ldd	r31, Y+1	; 0x01
    2af2:	80 81       	ld	r24, Z
    2af4:	08 2e       	mov	r0, r24
    2af6:	00 0c       	add	r0, r0
    2af8:	99 0b       	sbc	r25, r25
    2afa:	00 97       	sbiw	r24, 0x00	; 0
    2afc:	19 f4       	brne	.+6      	; 0x2b04 <fgetc+0x3e>
    2afe:	20 62       	ori	r18, 0x20	; 32
    2b00:	2b 83       	std	Y+3, r18	; 0x03
    2b02:	1a c0       	rjmp	.+52     	; 0x2b38 <fgetc+0x72>
    2b04:	31 96       	adiw	r30, 0x01	; 1
    2b06:	f9 83       	std	Y+1, r31	; 0x01
    2b08:	e8 83       	st	Y, r30
    2b0a:	0e c0       	rjmp	.+28     	; 0x2b28 <fgetc+0x62>
    2b0c:	ea 85       	ldd	r30, Y+10	; 0x0a
    2b0e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2b10:	09 95       	icall
    2b12:	97 ff       	sbrs	r25, 7
    2b14:	09 c0       	rjmp	.+18     	; 0x2b28 <fgetc+0x62>
    2b16:	2b 81       	ldd	r18, Y+3	; 0x03
    2b18:	01 96       	adiw	r24, 0x01	; 1
    2b1a:	11 f0       	breq	.+4      	; 0x2b20 <fgetc+0x5a>
    2b1c:	80 e2       	ldi	r24, 0x20	; 32
    2b1e:	01 c0       	rjmp	.+2      	; 0x2b22 <fgetc+0x5c>
    2b20:	80 e1       	ldi	r24, 0x10	; 16
    2b22:	82 2b       	or	r24, r18
    2b24:	8b 83       	std	Y+3, r24	; 0x03
    2b26:	08 c0       	rjmp	.+16     	; 0x2b38 <fgetc+0x72>
    2b28:	2e 81       	ldd	r18, Y+6	; 0x06
    2b2a:	3f 81       	ldd	r19, Y+7	; 0x07
    2b2c:	2f 5f       	subi	r18, 0xFF	; 255
    2b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b30:	3f 83       	std	Y+7, r19	; 0x07
    2b32:	2e 83       	std	Y+6, r18	; 0x06
    2b34:	99 27       	eor	r25, r25
    2b36:	02 c0       	rjmp	.+4      	; 0x2b3c <fgetc+0x76>
    2b38:	8f ef       	ldi	r24, 0xFF	; 255
    2b3a:	9f ef       	ldi	r25, 0xFF	; 255
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	08 95       	ret

00002b42 <printf>:
    2b42:	a0 e0       	ldi	r26, 0x00	; 0
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	e7 ea       	ldi	r30, 0xA7	; 167
    2b48:	f5 e1       	ldi	r31, 0x15	; 21
    2b4a:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x20>
    2b4e:	ae 01       	movw	r20, r28
    2b50:	4b 5f       	subi	r20, 0xFB	; 251
    2b52:	5f 4f       	sbci	r21, 0xFF	; 255
    2b54:	fa 01       	movw	r30, r20
    2b56:	61 91       	ld	r22, Z+
    2b58:	71 91       	ld	r23, Z+
    2b5a:	af 01       	movw	r20, r30
    2b5c:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <__iob+0x2>
    2b60:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <__iob+0x3>
    2b64:	0e 94 14 16 	call	0x2c28	; 0x2c28 <vfprintf>
    2b68:	e2 e0       	ldi	r30, 0x02	; 2
    2b6a:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x20>

00002b6e <printf_P>:
    2b6e:	a0 e0       	ldi	r26, 0x00	; 0
    2b70:	b0 e0       	ldi	r27, 0x00	; 0
    2b72:	ed eb       	ldi	r30, 0xBD	; 189
    2b74:	f5 e1       	ldi	r31, 0x15	; 21
    2b76:	0c 94 09 19 	jmp	0x3212	; 0x3212 <__prologue_saves__+0x1c>
    2b7a:	ae 01       	movw	r20, r28
    2b7c:	49 5f       	subi	r20, 0xF9	; 249
    2b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b80:	da 01       	movw	r26, r20
    2b82:	6d 91       	ld	r22, X+
    2b84:	7d 91       	ld	r23, X+
    2b86:	ad 01       	movw	r20, r26
    2b88:	0e ed       	ldi	r16, 0xDE	; 222
    2b8a:	13 e0       	ldi	r17, 0x03	; 3
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	dc 01       	movw	r26, r24
    2b94:	13 96       	adiw	r26, 0x03	; 3
    2b96:	2c 91       	ld	r18, X
    2b98:	13 97       	sbiw	r26, 0x03	; 3
    2b9a:	28 60       	ori	r18, 0x08	; 8
    2b9c:	13 96       	adiw	r26, 0x03	; 3
    2b9e:	2c 93       	st	X, r18
    2ba0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <vfprintf>
    2ba4:	d8 01       	movw	r26, r16
    2ba6:	12 96       	adiw	r26, 0x02	; 2
    2ba8:	ed 91       	ld	r30, X+
    2baa:	fc 91       	ld	r31, X
    2bac:	13 97       	sbiw	r26, 0x03	; 3
    2bae:	23 81       	ldd	r18, Z+3	; 0x03
    2bb0:	27 7f       	andi	r18, 0xF7	; 247
    2bb2:	23 83       	std	Z+3, r18	; 0x03
    2bb4:	e4 e0       	ldi	r30, 0x04	; 4
    2bb6:	0c 94 25 19 	jmp	0x324a	; 0x324a <__epilogue_restores__+0x1c>

00002bba <putchar>:
    2bba:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <__iob+0x2>
    2bbe:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <__iob+0x3>
    2bc2:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2bc6:	08 95       	ret

00002bc8 <puts>:
    2bc8:	0f 93       	push	r16
    2bca:	1f 93       	push	r17
    2bcc:	cf 93       	push	r28
    2bce:	df 93       	push	r29
    2bd0:	e0 91 e0 03 	lds	r30, 0x03E0	; 0x8003e0 <__iob+0x2>
    2bd4:	f0 91 e1 03 	lds	r31, 0x03E1	; 0x8003e1 <__iob+0x3>
    2bd8:	23 81       	ldd	r18, Z+3	; 0x03
    2bda:	21 ff       	sbrs	r18, 1
    2bdc:	1b c0       	rjmp	.+54     	; 0x2c14 <puts+0x4c>
    2bde:	8c 01       	movw	r16, r24
    2be0:	d0 e0       	ldi	r29, 0x00	; 0
    2be2:	c0 e0       	ldi	r28, 0x00	; 0
    2be4:	f8 01       	movw	r30, r16
    2be6:	81 91       	ld	r24, Z+
    2be8:	8f 01       	movw	r16, r30
    2bea:	60 91 e0 03 	lds	r22, 0x03E0	; 0x8003e0 <__iob+0x2>
    2bee:	70 91 e1 03 	lds	r23, 0x03E1	; 0x8003e1 <__iob+0x3>
    2bf2:	db 01       	movw	r26, r22
    2bf4:	18 96       	adiw	r26, 0x08	; 8
    2bf6:	ed 91       	ld	r30, X+
    2bf8:	fc 91       	ld	r31, X
    2bfa:	19 97       	sbiw	r26, 0x09	; 9
    2bfc:	88 23       	and	r24, r24
    2bfe:	31 f0       	breq	.+12     	; 0x2c0c <puts+0x44>
    2c00:	09 95       	icall
    2c02:	89 2b       	or	r24, r25
    2c04:	79 f3       	breq	.-34     	; 0x2be4 <puts+0x1c>
    2c06:	df ef       	ldi	r29, 0xFF	; 255
    2c08:	cf ef       	ldi	r28, 0xFF	; 255
    2c0a:	ec cf       	rjmp	.-40     	; 0x2be4 <puts+0x1c>
    2c0c:	8a e0       	ldi	r24, 0x0A	; 10
    2c0e:	09 95       	icall
    2c10:	89 2b       	or	r24, r25
    2c12:	19 f0       	breq	.+6      	; 0x2c1a <puts+0x52>
    2c14:	8f ef       	ldi	r24, 0xFF	; 255
    2c16:	9f ef       	ldi	r25, 0xFF	; 255
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <puts+0x56>
    2c1a:	8d 2f       	mov	r24, r29
    2c1c:	9c 2f       	mov	r25, r28
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	08 95       	ret

00002c28 <vfprintf>:
    2c28:	ab e0       	ldi	r26, 0x0B	; 11
    2c2a:	b0 e0       	ldi	r27, 0x00	; 0
    2c2c:	ea e1       	ldi	r30, 0x1A	; 26
    2c2e:	f6 e1       	ldi	r31, 0x16	; 22
    2c30:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__prologue_saves__>
    2c34:	6c 01       	movw	r12, r24
    2c36:	7b 01       	movw	r14, r22
    2c38:	8a 01       	movw	r16, r20
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	17 82       	std	Z+7, r1	; 0x07
    2c3e:	16 82       	std	Z+6, r1	; 0x06
    2c40:	83 81       	ldd	r24, Z+3	; 0x03
    2c42:	81 ff       	sbrs	r24, 1
    2c44:	cc c1       	rjmp	.+920    	; 0x2fde <vfprintf+0x3b6>
    2c46:	ce 01       	movw	r24, r28
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	3c 01       	movw	r6, r24
    2c4c:	f6 01       	movw	r30, r12
    2c4e:	93 81       	ldd	r25, Z+3	; 0x03
    2c50:	f7 01       	movw	r30, r14
    2c52:	93 fd       	sbrc	r25, 3
    2c54:	85 91       	lpm	r24, Z+
    2c56:	93 ff       	sbrs	r25, 3
    2c58:	81 91       	ld	r24, Z+
    2c5a:	7f 01       	movw	r14, r30
    2c5c:	88 23       	and	r24, r24
    2c5e:	09 f4       	brne	.+2      	; 0x2c62 <vfprintf+0x3a>
    2c60:	ba c1       	rjmp	.+884    	; 0x2fd6 <vfprintf+0x3ae>
    2c62:	85 32       	cpi	r24, 0x25	; 37
    2c64:	39 f4       	brne	.+14     	; 0x2c74 <vfprintf+0x4c>
    2c66:	93 fd       	sbrc	r25, 3
    2c68:	85 91       	lpm	r24, Z+
    2c6a:	93 ff       	sbrs	r25, 3
    2c6c:	81 91       	ld	r24, Z+
    2c6e:	7f 01       	movw	r14, r30
    2c70:	85 32       	cpi	r24, 0x25	; 37
    2c72:	29 f4       	brne	.+10     	; 0x2c7e <vfprintf+0x56>
    2c74:	b6 01       	movw	r22, r12
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2c7c:	e7 cf       	rjmp	.-50     	; 0x2c4c <vfprintf+0x24>
    2c7e:	91 2c       	mov	r9, r1
    2c80:	21 2c       	mov	r2, r1
    2c82:	31 2c       	mov	r3, r1
    2c84:	ff e1       	ldi	r31, 0x1F	; 31
    2c86:	f3 15       	cp	r31, r3
    2c88:	d8 f0       	brcs	.+54     	; 0x2cc0 <vfprintf+0x98>
    2c8a:	8b 32       	cpi	r24, 0x2B	; 43
    2c8c:	79 f0       	breq	.+30     	; 0x2cac <vfprintf+0x84>
    2c8e:	38 f4       	brcc	.+14     	; 0x2c9e <vfprintf+0x76>
    2c90:	80 32       	cpi	r24, 0x20	; 32
    2c92:	79 f0       	breq	.+30     	; 0x2cb2 <vfprintf+0x8a>
    2c94:	83 32       	cpi	r24, 0x23	; 35
    2c96:	a1 f4       	brne	.+40     	; 0x2cc0 <vfprintf+0x98>
    2c98:	23 2d       	mov	r18, r3
    2c9a:	20 61       	ori	r18, 0x10	; 16
    2c9c:	1d c0       	rjmp	.+58     	; 0x2cd8 <vfprintf+0xb0>
    2c9e:	8d 32       	cpi	r24, 0x2D	; 45
    2ca0:	61 f0       	breq	.+24     	; 0x2cba <vfprintf+0x92>
    2ca2:	80 33       	cpi	r24, 0x30	; 48
    2ca4:	69 f4       	brne	.+26     	; 0x2cc0 <vfprintf+0x98>
    2ca6:	23 2d       	mov	r18, r3
    2ca8:	21 60       	ori	r18, 0x01	; 1
    2caa:	16 c0       	rjmp	.+44     	; 0x2cd8 <vfprintf+0xb0>
    2cac:	83 2d       	mov	r24, r3
    2cae:	82 60       	ori	r24, 0x02	; 2
    2cb0:	38 2e       	mov	r3, r24
    2cb2:	e3 2d       	mov	r30, r3
    2cb4:	e4 60       	ori	r30, 0x04	; 4
    2cb6:	3e 2e       	mov	r3, r30
    2cb8:	2a c0       	rjmp	.+84     	; 0x2d0e <vfprintf+0xe6>
    2cba:	f3 2d       	mov	r31, r3
    2cbc:	f8 60       	ori	r31, 0x08	; 8
    2cbe:	1d c0       	rjmp	.+58     	; 0x2cfa <vfprintf+0xd2>
    2cc0:	37 fc       	sbrc	r3, 7
    2cc2:	2d c0       	rjmp	.+90     	; 0x2d1e <vfprintf+0xf6>
    2cc4:	20 ed       	ldi	r18, 0xD0	; 208
    2cc6:	28 0f       	add	r18, r24
    2cc8:	2a 30       	cpi	r18, 0x0A	; 10
    2cca:	40 f0       	brcs	.+16     	; 0x2cdc <vfprintf+0xb4>
    2ccc:	8e 32       	cpi	r24, 0x2E	; 46
    2cce:	b9 f4       	brne	.+46     	; 0x2cfe <vfprintf+0xd6>
    2cd0:	36 fc       	sbrc	r3, 6
    2cd2:	81 c1       	rjmp	.+770    	; 0x2fd6 <vfprintf+0x3ae>
    2cd4:	23 2d       	mov	r18, r3
    2cd6:	20 64       	ori	r18, 0x40	; 64
    2cd8:	32 2e       	mov	r3, r18
    2cda:	19 c0       	rjmp	.+50     	; 0x2d0e <vfprintf+0xe6>
    2cdc:	36 fe       	sbrs	r3, 6
    2cde:	06 c0       	rjmp	.+12     	; 0x2cec <vfprintf+0xc4>
    2ce0:	8a e0       	ldi	r24, 0x0A	; 10
    2ce2:	98 9e       	mul	r9, r24
    2ce4:	20 0d       	add	r18, r0
    2ce6:	11 24       	eor	r1, r1
    2ce8:	92 2e       	mov	r9, r18
    2cea:	11 c0       	rjmp	.+34     	; 0x2d0e <vfprintf+0xe6>
    2cec:	ea e0       	ldi	r30, 0x0A	; 10
    2cee:	2e 9e       	mul	r2, r30
    2cf0:	20 0d       	add	r18, r0
    2cf2:	11 24       	eor	r1, r1
    2cf4:	22 2e       	mov	r2, r18
    2cf6:	f3 2d       	mov	r31, r3
    2cf8:	f0 62       	ori	r31, 0x20	; 32
    2cfa:	3f 2e       	mov	r3, r31
    2cfc:	08 c0       	rjmp	.+16     	; 0x2d0e <vfprintf+0xe6>
    2cfe:	8c 36       	cpi	r24, 0x6C	; 108
    2d00:	21 f4       	brne	.+8      	; 0x2d0a <vfprintf+0xe2>
    2d02:	83 2d       	mov	r24, r3
    2d04:	80 68       	ori	r24, 0x80	; 128
    2d06:	38 2e       	mov	r3, r24
    2d08:	02 c0       	rjmp	.+4      	; 0x2d0e <vfprintf+0xe6>
    2d0a:	88 36       	cpi	r24, 0x68	; 104
    2d0c:	41 f4       	brne	.+16     	; 0x2d1e <vfprintf+0xf6>
    2d0e:	f7 01       	movw	r30, r14
    2d10:	93 fd       	sbrc	r25, 3
    2d12:	85 91       	lpm	r24, Z+
    2d14:	93 ff       	sbrs	r25, 3
    2d16:	81 91       	ld	r24, Z+
    2d18:	7f 01       	movw	r14, r30
    2d1a:	81 11       	cpse	r24, r1
    2d1c:	b3 cf       	rjmp	.-154    	; 0x2c84 <vfprintf+0x5c>
    2d1e:	98 2f       	mov	r25, r24
    2d20:	9f 7d       	andi	r25, 0xDF	; 223
    2d22:	95 54       	subi	r25, 0x45	; 69
    2d24:	93 30       	cpi	r25, 0x03	; 3
    2d26:	28 f4       	brcc	.+10     	; 0x2d32 <vfprintf+0x10a>
    2d28:	0c 5f       	subi	r16, 0xFC	; 252
    2d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d2c:	9f e3       	ldi	r25, 0x3F	; 63
    2d2e:	99 83       	std	Y+1, r25	; 0x01
    2d30:	0d c0       	rjmp	.+26     	; 0x2d4c <vfprintf+0x124>
    2d32:	83 36       	cpi	r24, 0x63	; 99
    2d34:	31 f0       	breq	.+12     	; 0x2d42 <vfprintf+0x11a>
    2d36:	83 37       	cpi	r24, 0x73	; 115
    2d38:	71 f0       	breq	.+28     	; 0x2d56 <vfprintf+0x12e>
    2d3a:	83 35       	cpi	r24, 0x53	; 83
    2d3c:	09 f0       	breq	.+2      	; 0x2d40 <vfprintf+0x118>
    2d3e:	59 c0       	rjmp	.+178    	; 0x2df2 <vfprintf+0x1ca>
    2d40:	21 c0       	rjmp	.+66     	; 0x2d84 <vfprintf+0x15c>
    2d42:	f8 01       	movw	r30, r16
    2d44:	80 81       	ld	r24, Z
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	0e 5f       	subi	r16, 0xFE	; 254
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	88 24       	eor	r8, r8
    2d4e:	83 94       	inc	r8
    2d50:	91 2c       	mov	r9, r1
    2d52:	53 01       	movw	r10, r6
    2d54:	13 c0       	rjmp	.+38     	; 0x2d7c <vfprintf+0x154>
    2d56:	28 01       	movw	r4, r16
    2d58:	f2 e0       	ldi	r31, 0x02	; 2
    2d5a:	4f 0e       	add	r4, r31
    2d5c:	51 1c       	adc	r5, r1
    2d5e:	f8 01       	movw	r30, r16
    2d60:	a0 80       	ld	r10, Z
    2d62:	b1 80       	ldd	r11, Z+1	; 0x01
    2d64:	36 fe       	sbrs	r3, 6
    2d66:	03 c0       	rjmp	.+6      	; 0x2d6e <vfprintf+0x146>
    2d68:	69 2d       	mov	r22, r9
    2d6a:	70 e0       	ldi	r23, 0x00	; 0
    2d6c:	02 c0       	rjmp	.+4      	; 0x2d72 <vfprintf+0x14a>
    2d6e:	6f ef       	ldi	r22, 0xFF	; 255
    2d70:	7f ef       	ldi	r23, 0xFF	; 255
    2d72:	c5 01       	movw	r24, r10
    2d74:	0e 94 00 18 	call	0x3000	; 0x3000 <strnlen>
    2d78:	4c 01       	movw	r8, r24
    2d7a:	82 01       	movw	r16, r4
    2d7c:	f3 2d       	mov	r31, r3
    2d7e:	ff 77       	andi	r31, 0x7F	; 127
    2d80:	3f 2e       	mov	r3, r31
    2d82:	16 c0       	rjmp	.+44     	; 0x2db0 <vfprintf+0x188>
    2d84:	28 01       	movw	r4, r16
    2d86:	22 e0       	ldi	r18, 0x02	; 2
    2d88:	42 0e       	add	r4, r18
    2d8a:	51 1c       	adc	r5, r1
    2d8c:	f8 01       	movw	r30, r16
    2d8e:	a0 80       	ld	r10, Z
    2d90:	b1 80       	ldd	r11, Z+1	; 0x01
    2d92:	36 fe       	sbrs	r3, 6
    2d94:	03 c0       	rjmp	.+6      	; 0x2d9c <vfprintf+0x174>
    2d96:	69 2d       	mov	r22, r9
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	02 c0       	rjmp	.+4      	; 0x2da0 <vfprintf+0x178>
    2d9c:	6f ef       	ldi	r22, 0xFF	; 255
    2d9e:	7f ef       	ldi	r23, 0xFF	; 255
    2da0:	c5 01       	movw	r24, r10
    2da2:	0e 94 f5 17 	call	0x2fea	; 0x2fea <strnlen_P>
    2da6:	4c 01       	movw	r8, r24
    2da8:	f3 2d       	mov	r31, r3
    2daa:	f0 68       	ori	r31, 0x80	; 128
    2dac:	3f 2e       	mov	r3, r31
    2dae:	82 01       	movw	r16, r4
    2db0:	33 fc       	sbrc	r3, 3
    2db2:	1b c0       	rjmp	.+54     	; 0x2dea <vfprintf+0x1c2>
    2db4:	82 2d       	mov	r24, r2
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	88 16       	cp	r8, r24
    2dba:	99 06       	cpc	r9, r25
    2dbc:	b0 f4       	brcc	.+44     	; 0x2dea <vfprintf+0x1c2>
    2dbe:	b6 01       	movw	r22, r12
    2dc0:	80 e2       	ldi	r24, 0x20	; 32
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2dc8:	2a 94       	dec	r2
    2dca:	f4 cf       	rjmp	.-24     	; 0x2db4 <vfprintf+0x18c>
    2dcc:	f5 01       	movw	r30, r10
    2dce:	37 fc       	sbrc	r3, 7
    2dd0:	85 91       	lpm	r24, Z+
    2dd2:	37 fe       	sbrs	r3, 7
    2dd4:	81 91       	ld	r24, Z+
    2dd6:	5f 01       	movw	r10, r30
    2dd8:	b6 01       	movw	r22, r12
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2de0:	21 10       	cpse	r2, r1
    2de2:	2a 94       	dec	r2
    2de4:	21 e0       	ldi	r18, 0x01	; 1
    2de6:	82 1a       	sub	r8, r18
    2de8:	91 08       	sbc	r9, r1
    2dea:	81 14       	cp	r8, r1
    2dec:	91 04       	cpc	r9, r1
    2dee:	71 f7       	brne	.-36     	; 0x2dcc <vfprintf+0x1a4>
    2df0:	e8 c0       	rjmp	.+464    	; 0x2fc2 <vfprintf+0x39a>
    2df2:	84 36       	cpi	r24, 0x64	; 100
    2df4:	11 f0       	breq	.+4      	; 0x2dfa <vfprintf+0x1d2>
    2df6:	89 36       	cpi	r24, 0x69	; 105
    2df8:	41 f5       	brne	.+80     	; 0x2e4a <vfprintf+0x222>
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	37 fe       	sbrs	r3, 7
    2dfe:	07 c0       	rjmp	.+14     	; 0x2e0e <vfprintf+0x1e6>
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	0c 5f       	subi	r16, 0xFC	; 252
    2e0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e0c:	08 c0       	rjmp	.+16     	; 0x2e1e <vfprintf+0x1f6>
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	07 2e       	mov	r0, r23
    2e14:	00 0c       	add	r0, r0
    2e16:	88 0b       	sbc	r24, r24
    2e18:	99 0b       	sbc	r25, r25
    2e1a:	0e 5f       	subi	r16, 0xFE	; 254
    2e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1e:	f3 2d       	mov	r31, r3
    2e20:	ff 76       	andi	r31, 0x6F	; 111
    2e22:	3f 2e       	mov	r3, r31
    2e24:	97 ff       	sbrs	r25, 7
    2e26:	09 c0       	rjmp	.+18     	; 0x2e3a <vfprintf+0x212>
    2e28:	90 95       	com	r25
    2e2a:	80 95       	com	r24
    2e2c:	70 95       	com	r23
    2e2e:	61 95       	neg	r22
    2e30:	7f 4f       	sbci	r23, 0xFF	; 255
    2e32:	8f 4f       	sbci	r24, 0xFF	; 255
    2e34:	9f 4f       	sbci	r25, 0xFF	; 255
    2e36:	f0 68       	ori	r31, 0x80	; 128
    2e38:	3f 2e       	mov	r3, r31
    2e3a:	2a e0       	ldi	r18, 0x0A	; 10
    2e3c:	30 e0       	ldi	r19, 0x00	; 0
    2e3e:	a3 01       	movw	r20, r6
    2e40:	0e 94 47 18 	call	0x308e	; 0x308e <__ultoa_invert>
    2e44:	88 2e       	mov	r8, r24
    2e46:	86 18       	sub	r8, r6
    2e48:	45 c0       	rjmp	.+138    	; 0x2ed4 <vfprintf+0x2ac>
    2e4a:	85 37       	cpi	r24, 0x75	; 117
    2e4c:	31 f4       	brne	.+12     	; 0x2e5a <vfprintf+0x232>
    2e4e:	23 2d       	mov	r18, r3
    2e50:	2f 7e       	andi	r18, 0xEF	; 239
    2e52:	b2 2e       	mov	r11, r18
    2e54:	2a e0       	ldi	r18, 0x0A	; 10
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	25 c0       	rjmp	.+74     	; 0x2ea4 <vfprintf+0x27c>
    2e5a:	93 2d       	mov	r25, r3
    2e5c:	99 7f       	andi	r25, 0xF9	; 249
    2e5e:	b9 2e       	mov	r11, r25
    2e60:	8f 36       	cpi	r24, 0x6F	; 111
    2e62:	c1 f0       	breq	.+48     	; 0x2e94 <vfprintf+0x26c>
    2e64:	18 f4       	brcc	.+6      	; 0x2e6c <vfprintf+0x244>
    2e66:	88 35       	cpi	r24, 0x58	; 88
    2e68:	79 f0       	breq	.+30     	; 0x2e88 <vfprintf+0x260>
    2e6a:	b5 c0       	rjmp	.+362    	; 0x2fd6 <vfprintf+0x3ae>
    2e6c:	80 37       	cpi	r24, 0x70	; 112
    2e6e:	19 f0       	breq	.+6      	; 0x2e76 <vfprintf+0x24e>
    2e70:	88 37       	cpi	r24, 0x78	; 120
    2e72:	21 f0       	breq	.+8      	; 0x2e7c <vfprintf+0x254>
    2e74:	b0 c0       	rjmp	.+352    	; 0x2fd6 <vfprintf+0x3ae>
    2e76:	e9 2f       	mov	r30, r25
    2e78:	e0 61       	ori	r30, 0x10	; 16
    2e7a:	be 2e       	mov	r11, r30
    2e7c:	b4 fe       	sbrs	r11, 4
    2e7e:	0d c0       	rjmp	.+26     	; 0x2e9a <vfprintf+0x272>
    2e80:	fb 2d       	mov	r31, r11
    2e82:	f4 60       	ori	r31, 0x04	; 4
    2e84:	bf 2e       	mov	r11, r31
    2e86:	09 c0       	rjmp	.+18     	; 0x2e9a <vfprintf+0x272>
    2e88:	34 fe       	sbrs	r3, 4
    2e8a:	0a c0       	rjmp	.+20     	; 0x2ea0 <vfprintf+0x278>
    2e8c:	29 2f       	mov	r18, r25
    2e8e:	26 60       	ori	r18, 0x06	; 6
    2e90:	b2 2e       	mov	r11, r18
    2e92:	06 c0       	rjmp	.+12     	; 0x2ea0 <vfprintf+0x278>
    2e94:	28 e0       	ldi	r18, 0x08	; 8
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	05 c0       	rjmp	.+10     	; 0x2ea4 <vfprintf+0x27c>
    2e9a:	20 e1       	ldi	r18, 0x10	; 16
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <vfprintf+0x27c>
    2ea0:	20 e1       	ldi	r18, 0x10	; 16
    2ea2:	32 e0       	ldi	r19, 0x02	; 2
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	b7 fe       	sbrs	r11, 7
    2ea8:	07 c0       	rjmp	.+14     	; 0x2eb8 <vfprintf+0x290>
    2eaa:	60 81       	ld	r22, Z
    2eac:	71 81       	ldd	r23, Z+1	; 0x01
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	0c 5f       	subi	r16, 0xFC	; 252
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	06 c0       	rjmp	.+12     	; 0x2ec4 <vfprintf+0x29c>
    2eb8:	60 81       	ld	r22, Z
    2eba:	71 81       	ldd	r23, Z+1	; 0x01
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 5f       	subi	r16, 0xFE	; 254
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	a3 01       	movw	r20, r6
    2ec6:	0e 94 47 18 	call	0x308e	; 0x308e <__ultoa_invert>
    2eca:	88 2e       	mov	r8, r24
    2ecc:	86 18       	sub	r8, r6
    2ece:	fb 2d       	mov	r31, r11
    2ed0:	ff 77       	andi	r31, 0x7F	; 127
    2ed2:	3f 2e       	mov	r3, r31
    2ed4:	36 fe       	sbrs	r3, 6
    2ed6:	0d c0       	rjmp	.+26     	; 0x2ef2 <vfprintf+0x2ca>
    2ed8:	23 2d       	mov	r18, r3
    2eda:	2e 7f       	andi	r18, 0xFE	; 254
    2edc:	a2 2e       	mov	r10, r18
    2ede:	89 14       	cp	r8, r9
    2ee0:	58 f4       	brcc	.+22     	; 0x2ef8 <vfprintf+0x2d0>
    2ee2:	34 fe       	sbrs	r3, 4
    2ee4:	0b c0       	rjmp	.+22     	; 0x2efc <vfprintf+0x2d4>
    2ee6:	32 fc       	sbrc	r3, 2
    2ee8:	09 c0       	rjmp	.+18     	; 0x2efc <vfprintf+0x2d4>
    2eea:	83 2d       	mov	r24, r3
    2eec:	8e 7e       	andi	r24, 0xEE	; 238
    2eee:	a8 2e       	mov	r10, r24
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <vfprintf+0x2d4>
    2ef2:	b8 2c       	mov	r11, r8
    2ef4:	a3 2c       	mov	r10, r3
    2ef6:	03 c0       	rjmp	.+6      	; 0x2efe <vfprintf+0x2d6>
    2ef8:	b8 2c       	mov	r11, r8
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <vfprintf+0x2d6>
    2efc:	b9 2c       	mov	r11, r9
    2efe:	a4 fe       	sbrs	r10, 4
    2f00:	0f c0       	rjmp	.+30     	; 0x2f20 <vfprintf+0x2f8>
    2f02:	fe 01       	movw	r30, r28
    2f04:	e8 0d       	add	r30, r8
    2f06:	f1 1d       	adc	r31, r1
    2f08:	80 81       	ld	r24, Z
    2f0a:	80 33       	cpi	r24, 0x30	; 48
    2f0c:	21 f4       	brne	.+8      	; 0x2f16 <vfprintf+0x2ee>
    2f0e:	9a 2d       	mov	r25, r10
    2f10:	99 7e       	andi	r25, 0xE9	; 233
    2f12:	a9 2e       	mov	r10, r25
    2f14:	09 c0       	rjmp	.+18     	; 0x2f28 <vfprintf+0x300>
    2f16:	a2 fe       	sbrs	r10, 2
    2f18:	06 c0       	rjmp	.+12     	; 0x2f26 <vfprintf+0x2fe>
    2f1a:	b3 94       	inc	r11
    2f1c:	b3 94       	inc	r11
    2f1e:	04 c0       	rjmp	.+8      	; 0x2f28 <vfprintf+0x300>
    2f20:	8a 2d       	mov	r24, r10
    2f22:	86 78       	andi	r24, 0x86	; 134
    2f24:	09 f0       	breq	.+2      	; 0x2f28 <vfprintf+0x300>
    2f26:	b3 94       	inc	r11
    2f28:	a3 fc       	sbrc	r10, 3
    2f2a:	11 c0       	rjmp	.+34     	; 0x2f4e <vfprintf+0x326>
    2f2c:	a0 fe       	sbrs	r10, 0
    2f2e:	06 c0       	rjmp	.+12     	; 0x2f3c <vfprintf+0x314>
    2f30:	b2 14       	cp	r11, r2
    2f32:	88 f4       	brcc	.+34     	; 0x2f56 <vfprintf+0x32e>
    2f34:	28 0c       	add	r2, r8
    2f36:	92 2c       	mov	r9, r2
    2f38:	9b 18       	sub	r9, r11
    2f3a:	0e c0       	rjmp	.+28     	; 0x2f58 <vfprintf+0x330>
    2f3c:	b2 14       	cp	r11, r2
    2f3e:	60 f4       	brcc	.+24     	; 0x2f58 <vfprintf+0x330>
    2f40:	b6 01       	movw	r22, r12
    2f42:	80 e2       	ldi	r24, 0x20	; 32
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2f4a:	b3 94       	inc	r11
    2f4c:	f7 cf       	rjmp	.-18     	; 0x2f3c <vfprintf+0x314>
    2f4e:	b2 14       	cp	r11, r2
    2f50:	18 f4       	brcc	.+6      	; 0x2f58 <vfprintf+0x330>
    2f52:	2b 18       	sub	r2, r11
    2f54:	02 c0       	rjmp	.+4      	; 0x2f5a <vfprintf+0x332>
    2f56:	98 2c       	mov	r9, r8
    2f58:	21 2c       	mov	r2, r1
    2f5a:	a4 fe       	sbrs	r10, 4
    2f5c:	10 c0       	rjmp	.+32     	; 0x2f7e <vfprintf+0x356>
    2f5e:	b6 01       	movw	r22, r12
    2f60:	80 e3       	ldi	r24, 0x30	; 48
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2f68:	a2 fe       	sbrs	r10, 2
    2f6a:	17 c0       	rjmp	.+46     	; 0x2f9a <vfprintf+0x372>
    2f6c:	a1 fc       	sbrc	r10, 1
    2f6e:	03 c0       	rjmp	.+6      	; 0x2f76 <vfprintf+0x34e>
    2f70:	88 e7       	ldi	r24, 0x78	; 120
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	02 c0       	rjmp	.+4      	; 0x2f7a <vfprintf+0x352>
    2f76:	88 e5       	ldi	r24, 0x58	; 88
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	b6 01       	movw	r22, r12
    2f7c:	0c c0       	rjmp	.+24     	; 0x2f96 <vfprintf+0x36e>
    2f7e:	8a 2d       	mov	r24, r10
    2f80:	86 78       	andi	r24, 0x86	; 134
    2f82:	59 f0       	breq	.+22     	; 0x2f9a <vfprintf+0x372>
    2f84:	a1 fe       	sbrs	r10, 1
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <vfprintf+0x364>
    2f88:	8b e2       	ldi	r24, 0x2B	; 43
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <vfprintf+0x366>
    2f8c:	80 e2       	ldi	r24, 0x20	; 32
    2f8e:	a7 fc       	sbrc	r10, 7
    2f90:	8d e2       	ldi	r24, 0x2D	; 45
    2f92:	b6 01       	movw	r22, r12
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2f9a:	89 14       	cp	r8, r9
    2f9c:	38 f4       	brcc	.+14     	; 0x2fac <vfprintf+0x384>
    2f9e:	b6 01       	movw	r22, r12
    2fa0:	80 e3       	ldi	r24, 0x30	; 48
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2fa8:	9a 94       	dec	r9
    2faa:	f7 cf       	rjmp	.-18     	; 0x2f9a <vfprintf+0x372>
    2fac:	8a 94       	dec	r8
    2fae:	f3 01       	movw	r30, r6
    2fb0:	e8 0d       	add	r30, r8
    2fb2:	f1 1d       	adc	r31, r1
    2fb4:	80 81       	ld	r24, Z
    2fb6:	b6 01       	movw	r22, r12
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2fbe:	81 10       	cpse	r8, r1
    2fc0:	f5 cf       	rjmp	.-22     	; 0x2fac <vfprintf+0x384>
    2fc2:	22 20       	and	r2, r2
    2fc4:	09 f4       	brne	.+2      	; 0x2fc8 <vfprintf+0x3a0>
    2fc6:	42 ce       	rjmp	.-892    	; 0x2c4c <vfprintf+0x24>
    2fc8:	b6 01       	movw	r22, r12
    2fca:	80 e2       	ldi	r24, 0x20	; 32
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	0e 94 0b 18 	call	0x3016	; 0x3016 <fputc>
    2fd2:	2a 94       	dec	r2
    2fd4:	f6 cf       	rjmp	.-20     	; 0x2fc2 <vfprintf+0x39a>
    2fd6:	f6 01       	movw	r30, r12
    2fd8:	86 81       	ldd	r24, Z+6	; 0x06
    2fda:	97 81       	ldd	r25, Z+7	; 0x07
    2fdc:	02 c0       	rjmp	.+4      	; 0x2fe2 <vfprintf+0x3ba>
    2fde:	8f ef       	ldi	r24, 0xFF	; 255
    2fe0:	9f ef       	ldi	r25, 0xFF	; 255
    2fe2:	2b 96       	adiw	r28, 0x0b	; 11
    2fe4:	e2 e1       	ldi	r30, 0x12	; 18
    2fe6:	0c 94 17 19 	jmp	0x322e	; 0x322e <__epilogue_restores__>

00002fea <strnlen_P>:
    2fea:	fc 01       	movw	r30, r24
    2fec:	05 90       	lpm	r0, Z+
    2fee:	61 50       	subi	r22, 0x01	; 1
    2ff0:	70 40       	sbci	r23, 0x00	; 0
    2ff2:	01 10       	cpse	r0, r1
    2ff4:	d8 f7       	brcc	.-10     	; 0x2fec <strnlen_P+0x2>
    2ff6:	80 95       	com	r24
    2ff8:	90 95       	com	r25
    2ffa:	8e 0f       	add	r24, r30
    2ffc:	9f 1f       	adc	r25, r31
    2ffe:	08 95       	ret

00003000 <strnlen>:
    3000:	fc 01       	movw	r30, r24
    3002:	61 50       	subi	r22, 0x01	; 1
    3004:	70 40       	sbci	r23, 0x00	; 0
    3006:	01 90       	ld	r0, Z+
    3008:	01 10       	cpse	r0, r1
    300a:	d8 f7       	brcc	.-10     	; 0x3002 <strnlen+0x2>
    300c:	80 95       	com	r24
    300e:	90 95       	com	r25
    3010:	8e 0f       	add	r24, r30
    3012:	9f 1f       	adc	r25, r31
    3014:	08 95       	ret

00003016 <fputc>:
    3016:	0f 93       	push	r16
    3018:	1f 93       	push	r17
    301a:	cf 93       	push	r28
    301c:	df 93       	push	r29
    301e:	fb 01       	movw	r30, r22
    3020:	23 81       	ldd	r18, Z+3	; 0x03
    3022:	21 fd       	sbrc	r18, 1
    3024:	03 c0       	rjmp	.+6      	; 0x302c <fputc+0x16>
    3026:	8f ef       	ldi	r24, 0xFF	; 255
    3028:	9f ef       	ldi	r25, 0xFF	; 255
    302a:	2c c0       	rjmp	.+88     	; 0x3084 <fputc+0x6e>
    302c:	22 ff       	sbrs	r18, 2
    302e:	16 c0       	rjmp	.+44     	; 0x305c <fputc+0x46>
    3030:	46 81       	ldd	r20, Z+6	; 0x06
    3032:	57 81       	ldd	r21, Z+7	; 0x07
    3034:	24 81       	ldd	r18, Z+4	; 0x04
    3036:	35 81       	ldd	r19, Z+5	; 0x05
    3038:	42 17       	cp	r20, r18
    303a:	53 07       	cpc	r21, r19
    303c:	44 f4       	brge	.+16     	; 0x304e <fputc+0x38>
    303e:	a0 81       	ld	r26, Z
    3040:	b1 81       	ldd	r27, Z+1	; 0x01
    3042:	9d 01       	movw	r18, r26
    3044:	2f 5f       	subi	r18, 0xFF	; 255
    3046:	3f 4f       	sbci	r19, 0xFF	; 255
    3048:	31 83       	std	Z+1, r19	; 0x01
    304a:	20 83       	st	Z, r18
    304c:	8c 93       	st	X, r24
    304e:	26 81       	ldd	r18, Z+6	; 0x06
    3050:	37 81       	ldd	r19, Z+7	; 0x07
    3052:	2f 5f       	subi	r18, 0xFF	; 255
    3054:	3f 4f       	sbci	r19, 0xFF	; 255
    3056:	37 83       	std	Z+7, r19	; 0x07
    3058:	26 83       	std	Z+6, r18	; 0x06
    305a:	14 c0       	rjmp	.+40     	; 0x3084 <fputc+0x6e>
    305c:	8b 01       	movw	r16, r22
    305e:	ec 01       	movw	r28, r24
    3060:	fb 01       	movw	r30, r22
    3062:	00 84       	ldd	r0, Z+8	; 0x08
    3064:	f1 85       	ldd	r31, Z+9	; 0x09
    3066:	e0 2d       	mov	r30, r0
    3068:	09 95       	icall
    306a:	89 2b       	or	r24, r25
    306c:	e1 f6       	brne	.-72     	; 0x3026 <fputc+0x10>
    306e:	d8 01       	movw	r26, r16
    3070:	16 96       	adiw	r26, 0x06	; 6
    3072:	8d 91       	ld	r24, X+
    3074:	9c 91       	ld	r25, X
    3076:	17 97       	sbiw	r26, 0x07	; 7
    3078:	01 96       	adiw	r24, 0x01	; 1
    307a:	17 96       	adiw	r26, 0x07	; 7
    307c:	9c 93       	st	X, r25
    307e:	8e 93       	st	-X, r24
    3080:	16 97       	sbiw	r26, 0x06	; 6
    3082:	ce 01       	movw	r24, r28
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	1f 91       	pop	r17
    308a:	0f 91       	pop	r16
    308c:	08 95       	ret

0000308e <__ultoa_invert>:
    308e:	fa 01       	movw	r30, r20
    3090:	aa 27       	eor	r26, r26
    3092:	28 30       	cpi	r18, 0x08	; 8
    3094:	51 f1       	breq	.+84     	; 0x30ea <__ultoa_invert+0x5c>
    3096:	20 31       	cpi	r18, 0x10	; 16
    3098:	81 f1       	breq	.+96     	; 0x30fa <__ultoa_invert+0x6c>
    309a:	e8 94       	clt
    309c:	6f 93       	push	r22
    309e:	6e 7f       	andi	r22, 0xFE	; 254
    30a0:	6e 5f       	subi	r22, 0xFE	; 254
    30a2:	7f 4f       	sbci	r23, 0xFF	; 255
    30a4:	8f 4f       	sbci	r24, 0xFF	; 255
    30a6:	9f 4f       	sbci	r25, 0xFF	; 255
    30a8:	af 4f       	sbci	r26, 0xFF	; 255
    30aa:	b1 e0       	ldi	r27, 0x01	; 1
    30ac:	3e d0       	rcall	.+124    	; 0x312a <__ultoa_invert+0x9c>
    30ae:	b4 e0       	ldi	r27, 0x04	; 4
    30b0:	3c d0       	rcall	.+120    	; 0x312a <__ultoa_invert+0x9c>
    30b2:	67 0f       	add	r22, r23
    30b4:	78 1f       	adc	r23, r24
    30b6:	89 1f       	adc	r24, r25
    30b8:	9a 1f       	adc	r25, r26
    30ba:	a1 1d       	adc	r26, r1
    30bc:	68 0f       	add	r22, r24
    30be:	79 1f       	adc	r23, r25
    30c0:	8a 1f       	adc	r24, r26
    30c2:	91 1d       	adc	r25, r1
    30c4:	a1 1d       	adc	r26, r1
    30c6:	6a 0f       	add	r22, r26
    30c8:	71 1d       	adc	r23, r1
    30ca:	81 1d       	adc	r24, r1
    30cc:	91 1d       	adc	r25, r1
    30ce:	a1 1d       	adc	r26, r1
    30d0:	20 d0       	rcall	.+64     	; 0x3112 <__ultoa_invert+0x84>
    30d2:	09 f4       	brne	.+2      	; 0x30d6 <__ultoa_invert+0x48>
    30d4:	68 94       	set
    30d6:	3f 91       	pop	r19
    30d8:	2a e0       	ldi	r18, 0x0A	; 10
    30da:	26 9f       	mul	r18, r22
    30dc:	11 24       	eor	r1, r1
    30de:	30 19       	sub	r19, r0
    30e0:	30 5d       	subi	r19, 0xD0	; 208
    30e2:	31 93       	st	Z+, r19
    30e4:	de f6       	brtc	.-74     	; 0x309c <__ultoa_invert+0xe>
    30e6:	cf 01       	movw	r24, r30
    30e8:	08 95       	ret
    30ea:	46 2f       	mov	r20, r22
    30ec:	47 70       	andi	r20, 0x07	; 7
    30ee:	40 5d       	subi	r20, 0xD0	; 208
    30f0:	41 93       	st	Z+, r20
    30f2:	b3 e0       	ldi	r27, 0x03	; 3
    30f4:	0f d0       	rcall	.+30     	; 0x3114 <__ultoa_invert+0x86>
    30f6:	c9 f7       	brne	.-14     	; 0x30ea <__ultoa_invert+0x5c>
    30f8:	f6 cf       	rjmp	.-20     	; 0x30e6 <__ultoa_invert+0x58>
    30fa:	46 2f       	mov	r20, r22
    30fc:	4f 70       	andi	r20, 0x0F	; 15
    30fe:	40 5d       	subi	r20, 0xD0	; 208
    3100:	4a 33       	cpi	r20, 0x3A	; 58
    3102:	18 f0       	brcs	.+6      	; 0x310a <__ultoa_invert+0x7c>
    3104:	49 5d       	subi	r20, 0xD9	; 217
    3106:	31 fd       	sbrc	r19, 1
    3108:	40 52       	subi	r20, 0x20	; 32
    310a:	41 93       	st	Z+, r20
    310c:	02 d0       	rcall	.+4      	; 0x3112 <__ultoa_invert+0x84>
    310e:	a9 f7       	brne	.-22     	; 0x30fa <__ultoa_invert+0x6c>
    3110:	ea cf       	rjmp	.-44     	; 0x30e6 <__ultoa_invert+0x58>
    3112:	b4 e0       	ldi	r27, 0x04	; 4
    3114:	a6 95       	lsr	r26
    3116:	97 95       	ror	r25
    3118:	87 95       	ror	r24
    311a:	77 95       	ror	r23
    311c:	67 95       	ror	r22
    311e:	ba 95       	dec	r27
    3120:	c9 f7       	brne	.-14     	; 0x3114 <__ultoa_invert+0x86>
    3122:	00 97       	sbiw	r24, 0x00	; 0
    3124:	61 05       	cpc	r22, r1
    3126:	71 05       	cpc	r23, r1
    3128:	08 95       	ret
    312a:	9b 01       	movw	r18, r22
    312c:	ac 01       	movw	r20, r24
    312e:	0a 2e       	mov	r0, r26
    3130:	06 94       	lsr	r0
    3132:	57 95       	ror	r21
    3134:	47 95       	ror	r20
    3136:	37 95       	ror	r19
    3138:	27 95       	ror	r18
    313a:	ba 95       	dec	r27
    313c:	c9 f7       	brne	.-14     	; 0x3130 <__ultoa_invert+0xa2>
    313e:	62 0f       	add	r22, r18
    3140:	73 1f       	adc	r23, r19
    3142:	84 1f       	adc	r24, r20
    3144:	95 1f       	adc	r25, r21
    3146:	a0 1d       	adc	r26, r0
    3148:	08 95       	ret

0000314a <eeprom_read_block>:
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22

0000314e <eeprom_read_blraw>:
    314e:	fc 01       	movw	r30, r24
    3150:	f9 99       	sbic	0x1f, 1	; 31
    3152:	fe cf       	rjmp	.-4      	; 0x3150 <eeprom_read_blraw+0x2>
    3154:	06 c0       	rjmp	.+12     	; 0x3162 <eeprom_read_blraw+0x14>
    3156:	f2 bd       	out	0x22, r31	; 34
    3158:	e1 bd       	out	0x21, r30	; 33
    315a:	f8 9a       	sbi	0x1f, 0	; 31
    315c:	31 96       	adiw	r30, 0x01	; 1
    315e:	00 b4       	in	r0, 0x20	; 32
    3160:	0d 92       	st	X+, r0
    3162:	41 50       	subi	r20, 0x01	; 1
    3164:	50 40       	sbci	r21, 0x00	; 0
    3166:	b8 f7       	brcc	.-18     	; 0x3156 <eeprom_read_blraw+0x8>
    3168:	08 95       	ret

0000316a <eeprom_read_byte>:
    316a:	f9 99       	sbic	0x1f, 1	; 31
    316c:	fe cf       	rjmp	.-4      	; 0x316a <eeprom_read_byte>
    316e:	92 bd       	out	0x22, r25	; 34
    3170:	81 bd       	out	0x21, r24	; 33
    3172:	f8 9a       	sbi	0x1f, 0	; 31
    3174:	99 27       	eor	r25, r25
    3176:	80 b5       	in	r24, 0x20	; 32
    3178:	08 95       	ret

0000317a <eeprom_read_dword>:
    317a:	a6 e1       	ldi	r26, 0x16	; 22
    317c:	b0 e0       	ldi	r27, 0x00	; 0
    317e:	44 e0       	ldi	r20, 0x04	; 4
    3180:	50 e0       	ldi	r21, 0x00	; 0
    3182:	0c 94 a7 18 	jmp	0x314e	; 0x314e <eeprom_read_blraw>

00003186 <eeprom_write_block>:
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <eeprom_write_block+0xc>
    318c:	2d 91       	ld	r18, X+
    318e:	0e 94 ce 18 	call	0x319c	; 0x319c <eeprom_write_r18>
    3192:	41 50       	subi	r20, 0x01	; 1
    3194:	50 40       	sbci	r21, 0x00	; 0
    3196:	d0 f7       	brcc	.-12     	; 0x318c <eeprom_write_block+0x6>
    3198:	08 95       	ret

0000319a <eeprom_write_byte>:
    319a:	26 2f       	mov	r18, r22

0000319c <eeprom_write_r18>:
    319c:	f9 99       	sbic	0x1f, 1	; 31
    319e:	fe cf       	rjmp	.-4      	; 0x319c <eeprom_write_r18>
    31a0:	1f ba       	out	0x1f, r1	; 31
    31a2:	92 bd       	out	0x22, r25	; 34
    31a4:	81 bd       	out	0x21, r24	; 33
    31a6:	20 bd       	out	0x20, r18	; 32
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	fa 9a       	sbi	0x1f, 2	; 31
    31ae:	f9 9a       	sbi	0x1f, 1	; 31
    31b0:	0f be       	out	0x3f, r0	; 63
    31b2:	01 96       	adiw	r24, 0x01	; 1
    31b4:	08 95       	ret

000031b6 <eeprom_write_dword>:
    31b6:	24 2f       	mov	r18, r20
    31b8:	0e 94 ce 18 	call	0x319c	; 0x319c <eeprom_write_r18>
    31bc:	25 2f       	mov	r18, r21
    31be:	0e 94 ce 18 	call	0x319c	; 0x319c <eeprom_write_r18>
    31c2:	0c 94 e3 18 	jmp	0x31c6	; 0x31c6 <eeprom_write_word>

000031c6 <eeprom_write_word>:
    31c6:	0e 94 cd 18 	call	0x319a	; 0x319a <eeprom_write_byte>
    31ca:	27 2f       	mov	r18, r23
    31cc:	0c 94 ce 18 	jmp	0x319c	; 0x319c <eeprom_write_r18>

000031d0 <__muluhisi3>:
    31d0:	0e 94 32 19 	call	0x3264	; 0x3264 <__umulhisi3>
    31d4:	a5 9f       	mul	r26, r21
    31d6:	90 0d       	add	r25, r0
    31d8:	b4 9f       	mul	r27, r20
    31da:	90 0d       	add	r25, r0
    31dc:	a4 9f       	mul	r26, r20
    31de:	80 0d       	add	r24, r0
    31e0:	91 1d       	adc	r25, r1
    31e2:	11 24       	eor	r1, r1
    31e4:	08 95       	ret

000031e6 <__mulshisi3>:
    31e6:	b7 ff       	sbrs	r27, 7
    31e8:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__muluhisi3>

000031ec <__mulohisi3>:
    31ec:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__muluhisi3>
    31f0:	82 1b       	sub	r24, r18
    31f2:	93 0b       	sbc	r25, r19
    31f4:	08 95       	ret

000031f6 <__prologue_saves__>:
    31f6:	2f 92       	push	r2
    31f8:	3f 92       	push	r3
    31fa:	4f 92       	push	r4
    31fc:	5f 92       	push	r5
    31fe:	6f 92       	push	r6
    3200:	7f 92       	push	r7
    3202:	8f 92       	push	r8
    3204:	9f 92       	push	r9
    3206:	af 92       	push	r10
    3208:	bf 92       	push	r11
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ef 92       	push	r14
    3210:	ff 92       	push	r15
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	cf 93       	push	r28
    3218:	df 93       	push	r29
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	ca 1b       	sub	r28, r26
    3220:	db 0b       	sbc	r29, r27
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	09 94       	ijmp

0000322e <__epilogue_restores__>:
    322e:	2a 88       	ldd	r2, Y+18	; 0x12
    3230:	39 88       	ldd	r3, Y+17	; 0x11
    3232:	48 88       	ldd	r4, Y+16	; 0x10
    3234:	5f 84       	ldd	r5, Y+15	; 0x0f
    3236:	6e 84       	ldd	r6, Y+14	; 0x0e
    3238:	7d 84       	ldd	r7, Y+13	; 0x0d
    323a:	8c 84       	ldd	r8, Y+12	; 0x0c
    323c:	9b 84       	ldd	r9, Y+11	; 0x0b
    323e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3240:	b9 84       	ldd	r11, Y+9	; 0x09
    3242:	c8 84       	ldd	r12, Y+8	; 0x08
    3244:	df 80       	ldd	r13, Y+7	; 0x07
    3246:	ee 80       	ldd	r14, Y+6	; 0x06
    3248:	fd 80       	ldd	r15, Y+5	; 0x05
    324a:	0c 81       	ldd	r16, Y+4	; 0x04
    324c:	1b 81       	ldd	r17, Y+3	; 0x03
    324e:	aa 81       	ldd	r26, Y+2	; 0x02
    3250:	b9 81       	ldd	r27, Y+1	; 0x01
    3252:	ce 0f       	add	r28, r30
    3254:	d1 1d       	adc	r29, r1
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	ed 01       	movw	r28, r26
    3262:	08 95       	ret

00003264 <__umulhisi3>:
    3264:	a2 9f       	mul	r26, r18
    3266:	b0 01       	movw	r22, r0
    3268:	b3 9f       	mul	r27, r19
    326a:	c0 01       	movw	r24, r0
    326c:	a3 9f       	mul	r26, r19
    326e:	70 0d       	add	r23, r0
    3270:	81 1d       	adc	r24, r1
    3272:	11 24       	eor	r1, r1
    3274:	91 1d       	adc	r25, r1
    3276:	b2 9f       	mul	r27, r18
    3278:	70 0d       	add	r23, r0
    327a:	81 1d       	adc	r24, r1
    327c:	11 24       	eor	r1, r1
    327e:	91 1d       	adc	r25, r1
    3280:	08 95       	ret

00003282 <_exit>:
    3282:	f8 94       	cli

00003284 <__stop_program>:
    3284:	ff cf       	rjmp	.-2      	; 0x3284 <__stop_program>
