
Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a6  00800100  000030ea  0000317e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000186  008002a6  008002a6  00003324  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003324  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000780  00000000  00000000  000033c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a92  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002146  00000000  00000000  0000a5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003887  00000000  00000000  0000c718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010c0  00000000  00000000  0000ffa0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001955  00000000  00000000  00011060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003040  00000000  00000000  000129b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005c8  00000000  00000000  000159f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__ctors_end>
       4:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       8:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
       c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      10:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      14:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_5>
      18:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      1c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      20:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      24:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      28:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      2c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      30:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      34:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      38:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      3c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      40:	0c 94 ff 11 	jmp	0x23fe	; 0x23fe <__vector_16>
      44:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      48:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      50:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_20>
      54:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_21>
      58:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      5c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      60:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      64:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      68:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      6c:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      70:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      74:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>
      78:	0c 94 10 01 	jmp	0x220	; 0x220 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	23 23       	and	r18, r19
      7e:	23 48       	sbci	r18, 0x83	; 131
      80:	49 47       	sbci	r20, 0x79	; 121
      82:	48 20       	and	r4, r8
      84:	53 43       	sbci	r21, 0x33	; 51
      86:	4f 52       	subi	r20, 0x2F	; 47
      88:	45 53       	subi	r20, 0x35	; 53
      8a:	23 23       	and	r18, r19
      8c:	23 00       	.word	0x0023	; ????

0000008e <__c.2568>:
      8e:	50 72 65 73 73 20 61 20 62 75 74 74 6f 6e 20 74     Press a button t
      9e:	6f 20 73 74 61 72 74 20 61 67 61 69 6e 00           o start again.

000000ac <__c.2566>:
      ac:	47 41 4d 45 20 4f 56 45 52 00                       GAME OVER.

000000b6 <numbers>:
      b6:	21 01 1e 01 1a 01 16 01 12 01 0e 01 0a 01 06 01     !...............
      c6:	02 01 fe 00                                         ....

000000ca <letters>:
      ca:	90 01 8c 01 88 01 84 01 80 01 7c 01 78 01 74 01     ..........|.x.t.
      da:	71 01 6d 01 69 01 65 01 60 01 5c 01 58 01 54 01     q.m.i.e.`.\.X.T.
      ea:	4f 01 4b 01 47 01 42 01 3e 01 39 01 34 01 2f 01     O.K.G.B.>.9.4./.
      fa:	2a 01 25 01                                         *.%.

000000fe <cols_9>:
      fe:	64 92 92 7d                                         d..}

00000102 <cols_8>:
     102:	6c 92 92 6d                                         l..m

00000106 <cols_7>:
     106:	80 9e a0 c1                                         ....

0000010a <cols_6>:
     10a:	7c 92 92 4d                                         |..M

0000010e <cols_5>:
     10e:	e4 a2 a2 9d                                         ....

00000112 <cols_4>:
     112:	18 28 48 ff                                         .(H.

00000116 <cols_3>:
     116:	44 92 92 6d                                         D..m

0000011a <cols_2>:
     11a:	46 8a 92 63                                         F..c

0000011e <cols_1>:
     11e:	42 fe 03                                            B..

00000121 <cols_0>:
     121:	7c 92 a2 7d                                         |..}

00000125 <cols_Z>:
     125:	86 8a 92 a2 c3                                      .....

0000012a <cols_Y>:
     12a:	e0 10 0e 10 e1                                      .....

0000012f <cols_X>:
     12f:	c6 28 10 28 c7                                      .(.(.

00000134 <cols_W>:
     134:	fc 02 1c 02 fd                                      .....

00000139 <cols_V>:
     139:	f8 04 02 04 f9                                      .....

0000013e <cols_U>:
     13e:	fc 02 02 fd                                         ....

00000142 <cols_T>:
     142:	80 80 fe 80 81                                      .....

00000147 <cols_S>:
     147:	64 92 92 4d                                         d..M

0000014b <cols_R>:
     14b:	fe 90 98 67                                         ...g

0000014f <cols_Q>:
     14f:	7c 82 8a 7c 03                                      |..|.

00000154 <cols_P>:
     154:	fe 90 90 61                                         ...a

00000158 <cols_O>:
     158:	7c 82 82 7d                                         |..}

0000015c <cols_N>:
     15c:	fe 20 10 ff                                         . ..

00000160 <cols_M>:
     160:	fe 40 30 40 ff                                      .@0@.

00000165 <cols_L>:
     165:	fe 02 02 03                                         ....

00000169 <cols_K>:
     169:	fe 10 28 c7                                         ..(.

0000016d <cols_J>:
     16d:	04 02 02 fd                                         ....

00000171 <cols_I>:
     171:	82 fe 83                                            ...

00000174 <cols_H>:
     174:	fe 10 10 ff                                         ....

00000178 <cols_G>:
     178:	7c 82 92 5d                                         |..]

0000017c <cols_F>:
     17c:	fe 90 90 81                                         ....

00000180 <cols_E>:
     180:	fe 92 92 83                                         ....

00000184 <cols_D>:
     184:	fe 82 82 7d                                         ...}

00000188 <cols_C>:
     188:	7c 82 82 45                                         |..E

0000018c <cols_B>:
     18c:	fe 92 92 6d                                         ...m

00000190 <cols_A>:
     190:	7e 90 90 7f                                         ~...

00000194 <__c.2114>:
     194:	43 53 53 45 32 30 31 30 2f 37 32 30 31 20 53 6e     CSSE2010/7201 Sn
     1a4:	61 6b 65 20 50 72 6f 6a 65 63 74 20 62 79 20 4a     ake Project by J
     1b4:	61 63 6b 20 45 61 64 69 65 00                       ack Eadie.

000001be <__c.2112>:
     1be:	53 6e 61 6b 65 00                                   Snake.

000001c4 <__c.2066>:
     1c4:	1b 5b 3f 32 35 68 00                                .[?25h.

000001cb <__c.2062>:
     1cb:	1b 5b 3f 32 35 6c 00                                .[?25l.

000001d2 <__c.2058>:
     1d2:	1b 5b 25 64 6d 00                                   .[%dm.

000001d8 <__c.2048>:
     1d8:	1b 5b 32 4a 00                                      .[2J.

000001dd <__c.2033>:
     1dd:	1b 5b 25 64 3b 25 64 48 00                          .[%d;%dH.

000001e6 <__ctors_end>:
     1e6:	11 24       	eor	r1, r1
     1e8:	1f be       	out	0x3f, r1	; 63
     1ea:	cf ef       	ldi	r28, 0xFF	; 255
     1ec:	d8 e0       	ldi	r29, 0x08	; 8
     1ee:	de bf       	out	0x3e, r29	; 62
     1f0:	cd bf       	out	0x3d, r28	; 61

000001f2 <__do_copy_data>:
     1f2:	12 e0       	ldi	r17, 0x02	; 2
     1f4:	a0 e0       	ldi	r26, 0x00	; 0
     1f6:	b1 e0       	ldi	r27, 0x01	; 1
     1f8:	ea ee       	ldi	r30, 0xEA	; 234
     1fa:	f0 e3       	ldi	r31, 0x30	; 48
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <__do_copy_data+0x10>
     1fe:	05 90       	lpm	r0, Z+
     200:	0d 92       	st	X+, r0
     202:	a6 3a       	cpi	r26, 0xA6	; 166
     204:	b1 07       	cpc	r27, r17
     206:	d9 f7       	brne	.-10     	; 0x1fe <__do_copy_data+0xc>

00000208 <__do_clear_bss>:
     208:	24 e0       	ldi	r18, 0x04	; 4
     20a:	a6 ea       	ldi	r26, 0xA6	; 166
     20c:	b2 e0       	ldi	r27, 0x02	; 2
     20e:	01 c0       	rjmp	.+2      	; 0x212 <.do_clear_bss_start>

00000210 <.do_clear_bss_loop>:
     210:	1d 92       	st	X+, r1

00000212 <.do_clear_bss_start>:
     212:	ac 32       	cpi	r26, 0x2C	; 44
     214:	b2 07       	cpc	r27, r18
     216:	e1 f7       	brne	.-8      	; 0x210 <.do_clear_bss_loop>
     218:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <main>
     21c:	0c 94 73 18 	jmp	0x30e6	; 0x30e6 <_exit>

00000220 <__bad_interrupt>:
     220:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000224 <init_button_interrupts>:
// using a pin change interrupt. These pins correspond to pin
// change interrupts PCINT8 to PCINT11 which are covered by
// Pin change interrupt 1.
void init_button_interrupts(void) {
	// Enable the interrupt (see 10/2016 datasheet page 91)
	PCICR |= (1<<PCIE1);
     224:	e8 e6       	ldi	r30, 0x68	; 104
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
	// Make sure the interrupt flag is cleared (by writing a 
	// 1 to it) (see 10/2016 datasheet page 92)
	PCIFR |= (1<<PCIF1);
     22e:	d9 9a       	sbi	0x1b, 1	; 27
	
	// Choose which pins we're interested in by setting
	// the relevant bits in the mask register (see 10/2016 datasheet page 94)
	PCMSK1 |= (1<<PCINT8)|(1<<PCINT9)|(1<<PCINT10)|(1<<PCINT11);	
     230:	ec e6       	ldi	r30, 0x6C	; 108
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	8f 60       	ori	r24, 0x0F	; 15
     238:	80 83       	st	Z, r24
	
	// Empty the button push queue
	queue_length = 0;
     23a:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <__data_end>
     23e:	08 95       	ret

00000240 <empty_button_queue>:
}

void empty_button_queue(void) {
	queue_length = 0;
     240:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <__data_end>
     244:	08 95       	ret

00000246 <button_pushed>:
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
	if(queue_length > 0) {
     246:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__data_end>
     24a:	18 16       	cp	r1, r24
     24c:	3c f5       	brge	.+78     	; 0x29c <button_pushed+0x56>
		// Remove the first element off the queue and move all the other
		// entries closer to the front of the queue. We turn off interrupts (if on)
		// before we make any changes to the queue. If interrupts were on
		// we turn them back on when done.
		return_value = button_queue[0];
     24e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <button_queue>
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
     252:	6f b7       	in	r22, 0x3f	; 63
		cli();
     254:	f8 94       	cli
		
		for(uint8_t i = 1; i < queue_length; i++) {
     256:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <__data_end>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	b4 f0       	brlt	.+44     	; 0x28a <button_pushed+0x44>
     25e:	21 e0       	ldi	r18, 0x01	; 1
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	91 e0       	ldi	r25, 0x01	; 1
			button_queue[i-1] = button_queue[i];
     264:	f9 01       	movw	r30, r18
     266:	e9 55       	subi	r30, 0x59	; 89
     268:	fd 4f       	sbci	r31, 0xFD	; 253
     26a:	40 81       	ld	r20, Z
     26c:	f9 01       	movw	r30, r18
     26e:	ea 55       	subi	r30, 0x5A	; 90
     270:	fd 4f       	sbci	r31, 0xFD	; 253
     272:	40 83       	st	Z, r20
		
		// Save whether interrupts were enabled and turn them off
		int8_t interrupts_were_enabled = bit_is_set(SREG, SREG_I);
		cli();
		
		for(uint8_t i = 1; i < queue_length; i++) {
     274:	9f 5f       	subi	r25, 0xFF	; 255
     276:	29 2f       	mov	r18, r25
     278:	30 e0       	ldi	r19, 0x00	; 0
     27a:	40 91 a6 02 	lds	r20, 0x02A6	; 0x8002a6 <__data_end>
     27e:	04 2e       	mov	r0, r20
     280:	00 0c       	add	r0, r0
     282:	55 0b       	sbc	r21, r21
     284:	24 17       	cp	r18, r20
     286:	35 07       	cpc	r19, r21
     288:	6c f3       	brlt	.-38     	; 0x264 <button_pushed+0x1e>
			button_queue[i-1] = button_queue[i];
		}
		queue_length--;
     28a:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <__data_end>
     28e:	91 50       	subi	r25, 0x01	; 1
     290:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <__data_end>
		
		if(interrupts_were_enabled) {
     294:	66 23       	and	r22, r22
     296:	1c f4       	brge	.+6      	; 0x29e <button_pushed+0x58>
			// Turn them back on again
			sei();
     298:	78 94       	sei
     29a:	08 95       	ret
void empty_button_queue(void) {
	queue_length = 0;
}

int8_t button_pushed(void) {
	int8_t return_value = -1;	// Assume no button pushed
     29c:	8f ef       	ldi	r24, 0xFF	; 255
			// Turn them back on again
			sei();
		}
	}
	return return_value;
}
     29e:	08 95       	ret

000002a0 <__vector_5>:

// Interrupt handler for a change on buttons
ISR(PCINT1_vect) {
     2a0:	1f 92       	push	r1
     2a2:	0f 92       	push	r0
     2a4:	0f b6       	in	r0, 0x3f	; 63
     2a6:	0f 92       	push	r0
     2a8:	11 24       	eor	r1, r1
     2aa:	2f 93       	push	r18
     2ac:	3f 93       	push	r19
     2ae:	4f 93       	push	r20
     2b0:	5f 93       	push	r21
     2b2:	6f 93       	push	r22
     2b4:	7f 93       	push	r23
     2b6:	8f 93       	push	r24
     2b8:	9f 93       	push	r25
     2ba:	ef 93       	push	r30
     2bc:	ff 93       	push	r31
	// Get the current state of the buttons (lower 4 bits of port B). 
	// We'll compare this with the last state to see what has changed.
	uint8_t button_state = PINB & 0x0F;
     2be:	43 b1       	in	r20, 0x03	; 3
     2c0:	4f 70       	andi	r20, 0x0F	; 15

	// If we have space in the queue, then iterate over all the buttons
	// and see which ones have changed.	If we have no space in the queue
	// we don't bother - we just ignore the button event.  (Ideally
	// this should never happen.)
	if(queue_length < BUTTON_QUEUE_SIZE) {
     2c2:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <__data_end>
     2c6:	88 30       	cpi	r24, 0x08	; 8
     2c8:	64 f5       	brge	.+88     	; 0x322 <__vector_5+0x82>
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
			if((button_state & (1<<pin)) &&	!(last_button_state & (1<<pin))) {
     2ce:	64 2f       	mov	r22, r20
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	9b 01       	movw	r18, r22
     2d4:	08 2e       	mov	r0, r24
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <__vector_5+0x3c>
     2d8:	35 95       	asr	r19
     2da:	27 95       	ror	r18
     2dc:	0a 94       	dec	r0
     2de:	e2 f7       	brpl	.-8      	; 0x2d8 <__vector_5+0x38>
     2e0:	20 ff       	sbrs	r18, 0
     2e2:	1b c0       	rjmp	.+54     	; 0x31a <__vector_5+0x7a>
     2e4:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <last_button_state>
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	08 2e       	mov	r0, r24
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <__vector_5+0x52>
     2ee:	35 95       	asr	r19
     2f0:	27 95       	ror	r18
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <__vector_5+0x4e>
     2f6:	20 fd       	sbrc	r18, 0
     2f8:	10 c0       	rjmp	.+32     	; 0x31a <__vector_5+0x7a>
				// Add the button push to the queue (and update the
				// length of the queue). If the queue is now full, we stop
				// processing (i.e. ignore other button events if there
				// are any)
				button_queue[queue_length++] = pin;
     2fa:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <__data_end>
     2fe:	21 e0       	ldi	r18, 0x01	; 1
     300:	2e 0f       	add	r18, r30
     302:	20 93 a6 02 	sts	0x02A6, r18	; 0x8002a6 <__data_end>
     306:	0e 2e       	mov	r0, r30
     308:	00 0c       	add	r0, r0
     30a:	ff 0b       	sbc	r31, r31
     30c:	e9 55       	subi	r30, 0x59	; 89
     30e:	fd 4f       	sbci	r31, 0xFD	; 253
     310:	80 83       	st	Z, r24
				if(queue_length >= BUTTON_QUEUE_SIZE) {
     312:	20 91 a6 02 	lds	r18, 0x02A6	; 0x8002a6 <__data_end>
     316:	28 30       	cpi	r18, 0x08	; 8
     318:	24 f4       	brge	.+8      	; 0x322 <__vector_5+0x82>
     31a:	01 96       	adiw	r24, 0x01	; 1
		// Iterate over all the buttons and see which ones have changed.
		// Any button pushes are added to the queue of button pushes (if
		// there is space). We ignore button releases so we're just looking
		// for a transition from 0 in the last_button_state bit to a 1 in the
		// button_state.
		for(uint8_t pin=0; pin<=3; pin++) {
     31c:	84 30       	cpi	r24, 0x04	; 4
     31e:	91 05       	cpc	r25, r1
     320:	c1 f6       	brne	.-80     	; 0x2d2 <__vector_5+0x32>
			}
		}
	}
		
	// Remember this button state so we can detect changes next time
	last_button_state = button_state;
     322:	40 93 af 02 	sts	0x02AF, r20	; 0x8002af <last_button_state>
}
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	9f 91       	pop	r25
     32c:	8f 91       	pop	r24
     32e:	7f 91       	pop	r23
     330:	6f 91       	pop	r22
     332:	5f 91       	pop	r21
     334:	4f 91       	pop	r20
     336:	3f 91       	pop	r19
     338:	2f 91       	pop	r18
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <sound_effects_on_mode>:
		number_of_tones = 1; 
		buzzer_OCR1A[0] = 2000;
		buzzer_durations[0] = 50;
		next_buzzer_tone();
		if(sound_effects_on_mode()){
			enable_timer_one();
     344:	89 b1       	in	r24, 0x09	; 9
     346:	83 fb       	bst	r24, 3
     348:	88 27       	eor	r24, r24
     34a:	80 f9       	bld	r24, 0
     34c:	08 95       	ret

0000034e <buzzer_time_left>:
     34e:	cf 92       	push	r12
     350:	df 92       	push	r13
     352:	ef 92       	push	r14
     354:	ff 92       	push	r15
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
     35e:	40 91 b0 02 	lds	r20, 0x02B0	; 0x8002b0 <buzzer_time>
     362:	50 91 b1 02 	lds	r21, 0x02B1	; 0x8002b1 <buzzer_time+0x1>
     366:	6a 01       	movw	r12, r20
     368:	55 0f       	add	r21, r21
     36a:	ee 08       	sbc	r14, r14
     36c:	ff 08       	sbc	r15, r15
     36e:	00 91 02 03 	lds	r16, 0x0302	; 0x800302 <clock_at_tone_start>
     372:	10 91 03 03 	lds	r17, 0x0303	; 0x800303 <clock_at_tone_start+0x1>
     376:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <clock_at_tone_start+0x2>
     37a:	30 91 05 03 	lds	r19, 0x0305	; 0x800305 <clock_at_tone_start+0x3>
     37e:	c0 0e       	add	r12, r16
     380:	d1 1e       	adc	r13, r17
     382:	e2 1e       	adc	r14, r18
     384:	f3 1e       	adc	r15, r19
     386:	21 e0       	ldi	r18, 0x01	; 1
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	6c 15       	cp	r22, r12
     38c:	7d 05       	cpc	r23, r13
     38e:	8e 05       	cpc	r24, r14
     390:	9f 05       	cpc	r25, r15
     392:	10 f0       	brcs	.+4      	; 0x398 <buzzer_time_left+0x4a>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	c9 01       	movw	r24, r18
     39a:	1f 91       	pop	r17
     39c:	0f 91       	pop	r16
     39e:	ff 90       	pop	r15
     3a0:	ef 90       	pop	r14
     3a2:	df 90       	pop	r13
     3a4:	cf 90       	pop	r12
     3a6:	08 95       	ret

000003a8 <next_buzzer_tone>:
     3a8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <buzzer_pointer>
     3ac:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     3b6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	fc 01       	movw	r30, r24
     3c0:	e2 51       	subi	r30, 0x12	; 18
     3c2:	fd 4f       	sbci	r31, 0xFD	; 253
     3c4:	80 81       	ld	r24, Z
     3c6:	91 81       	ldd	r25, Z+1	; 0x01
     3c8:	0e 94 4f 12 	call	0x249e	; 0x249e <change_OCR1A>
     3cc:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
     3d0:	60 93 02 03 	sts	0x0302, r22	; 0x800302 <clock_at_tone_start>
     3d4:	70 93 03 03 	sts	0x0303, r23	; 0x800303 <clock_at_tone_start+0x1>
     3d8:	80 93 04 03 	sts	0x0304, r24	; 0x800304 <clock_at_tone_start+0x2>
     3dc:	90 93 05 03 	sts	0x0305, r25	; 0x800305 <clock_at_tone_start+0x3>
     3e0:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <buzzer_pointer>
     3e4:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     3e8:	ee 0f       	add	r30, r30
     3ea:	ff 1f       	adc	r31, r31
     3ec:	e8 50       	subi	r30, 0x08	; 8
     3ee:	fd 4f       	sbci	r31, 0xFD	; 253
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	90 93 b1 02 	sts	0x02B1, r25	; 0x8002b1 <buzzer_time+0x1>
     3f8:	80 93 b0 02 	sts	0x02B0, r24	; 0x8002b0 <buzzer_time>
     3fc:	08 95       	ret

000003fe <reset_buzzer>:
     3fe:	55 98       	cbi	0x0a, 5	; 10
     400:	8f ef       	ldi	r24, 0xFF	; 255
     402:	9f ef       	ldi	r25, 0xFF	; 255
     404:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     408:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     40c:	08 95       	ret

0000040e <play_start_game_sound_effect>:
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <number_of_tones+0x1>
     416:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <number_of_tones>
     41a:	e8 ef       	ldi	r30, 0xF8	; 248
     41c:	f2 e0       	ldi	r31, 0x02	; 2
     41e:	84 ef       	ldi	r24, 0xF4	; 244
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	91 83       	std	Z+1, r25	; 0x01
     424:	80 83       	st	Z, r24
     426:	28 ec       	ldi	r18, 0xC8	; 200
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	33 83       	std	Z+3, r19	; 0x03
     42c:	22 83       	std	Z+2, r18	; 0x02
     42e:	95 83       	std	Z+5, r25	; 0x05
     430:	84 83       	std	Z+4, r24	; 0x04
     432:	ee ee       	ldi	r30, 0xEE	; 238
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	80 ed       	ldi	r24, 0xD0	; 208
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	91 83       	std	Z+1, r25	; 0x01
     43c:	80 83       	st	Z, r24
     43e:	28 ee       	ldi	r18, 0xE8	; 232
     440:	33 e0       	ldi	r19, 0x03	; 3
     442:	33 83       	std	Z+3, r19	; 0x03
     444:	22 83       	std	Z+2, r18	; 0x02
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04
     44a:	8f ef       	ldi	r24, 0xFF	; 255
     44c:	9f ef       	ldi	r25, 0xFF	; 255
     44e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     452:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
     456:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     45a:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     45e:	81 11       	cpse	r24, r1
     460:	0e 94 54 12 	call	0x24a8	; 0x24a8 <enable_timer_one>
     464:	08 95       	ret

00000466 <play_eating_food_sound_effect>:
		}		
}


void play_eating_food_sound_effect(void){
		number_of_tones = 2; 
     466:	82 e0       	ldi	r24, 0x02	; 2
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <number_of_tones+0x1>
     46e:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <number_of_tones>
		buzzer_durations[0] = 50;
     472:	e8 ef       	ldi	r30, 0xF8	; 248
     474:	f2 e0       	ldi	r31, 0x02	; 2
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	91 83       	std	Z+1, r25	; 0x01
     47c:	80 83       	st	Z, r24
		buzzer_durations[1] = 100;
     47e:	84 e6       	ldi	r24, 0x64	; 100
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	93 83       	std	Z+3, r25	; 0x03
     484:	82 83       	std	Z+2, r24	; 0x02
		//  printf_P(PSTR("eating food, %d: \n"), number_of_tones); 
		buzzer_OCR1A[0] = 2000;
     486:	ee ee       	ldi	r30, 0xEE	; 238
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	80 ed       	ldi	r24, 0xD0	; 208
     48c:	97 e0       	ldi	r25, 0x07	; 7
     48e:	91 83       	std	Z+1, r25	; 0x01
     490:	80 83       	st	Z, r24
		buzzer_OCR1A[1] = 1000;
     492:	88 ee       	ldi	r24, 0xE8	; 232
     494:	93 e0       	ldi	r25, 0x03	; 3
     496:	93 83       	std	Z+3, r25	; 0x03
     498:	82 83       	std	Z+2, r24	; 0x02

		buzzer_pointer = -1;
     49a:	8f ef       	ldi	r24, 0xFF	; 255
     49c:	9f ef       	ldi	r25, 0xFF	; 255
     49e:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <buzzer_pointer+0x1>
     4a2:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <buzzer_pointer>
		next_buzzer_tone();
     4a6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
		if(sound_effects_on_mode()){
     4aa:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
     4ae:	81 11       	cpse	r24, r1
			enable_timer_one();
     4b0:	0e 94 54 12 	call	0x24a8	; 0x24a8 <enable_timer_one>
     4b4:	08 95       	ret

000004b6 <last_tone_in_sequence>:
		}
}


int last_tone_in_sequence(void){
	return (buzzer_pointer >= number_of_tones-1);
     4b6:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <number_of_tones>
     4ba:	30 91 ed 02 	lds	r19, 0x02ED	; 0x8002ed <number_of_tones+0x1>
     4be:	21 50       	subi	r18, 0x01	; 1
     4c0:	31 09       	sbc	r19, r1
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <buzzer_pointer>
     4ca:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <buzzer_pointer+0x1>
     4ce:	42 17       	cp	r20, r18
     4d0:	53 07       	cpc	r21, r19
     4d2:	14 f4       	brge	.+4      	; 0x4d8 <last_tone_in_sequence+0x22>
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	90 e0       	ldi	r25, 0x00	; 0
	}
     4d8:	08 95       	ret

000004da <handle_buzzer_loop>:
	}else{
		return 0;
	}
}
void handle_buzzer_loop(void){
	if((!buzzer_time_left())&& last_tone_in_sequence()){
     4da:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4de:	89 2b       	or	r24, r25
     4e0:	59 f4       	brne	.+22     	; 0x4f8 <handle_buzzer_loop+0x1e>
     4e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <last_tone_in_sequence>
     4e6:	89 2b       	or	r24, r25
     4e8:	39 f0       	breq	.+14     	; 0x4f8 <handle_buzzer_loop+0x1e>
		move_cursor(10, 7); 
     4ea:	67 e0       	ldi	r22, 0x07	; 7
     4ec:	8a e0       	ldi	r24, 0x0A	; 10
     4ee:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
		//  printf("END TONE \n");
		reset_buzzer();
     4f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <reset_buzzer>
     4f6:	08 95       	ret
	}
	else if((!buzzer_time_left())){
     4f8:	0e 94 a7 01 	call	0x34e	; 0x34e <buzzer_time_left>
     4fc:	89 2b       	or	r24, r25
     4fe:	11 f4       	brne	.+4      	; 0x504 <handle_buzzer_loop+0x2a>
		next_buzzer_tone();
     500:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <next_buzzer_tone>
     504:	08 95       	ret

00000506 <EEPROM_has_saved_game>:
	printf("G Score :%u \n", eeprom_read_dword(GAME_SCORE));  // not working
	printf("Snake Length :%u \n", eeprom_read_byte(SNAKE_LENGTH));
	printf("Snake tail :%u \n", eeprom_read_byte(SNAKE_POSITION_TAIL));
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}
     506:	80 e8       	ldi	r24, 0x80	; 128
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <eeprom_read_dword>
     50e:	21 e0       	ldi	r18, 0x01	; 1
     510:	61 15       	cp	r22, r1
     512:	72 41       	sbci	r23, 0x12	; 18
     514:	81 05       	cpc	r24, r1
     516:	91 05       	cpc	r25, r1
     518:	09 f0       	breq	.+2      	; 0x51c <EEPROM_has_saved_game+0x16>
     51a:	20 e0       	ldi	r18, 0x00	; 0
     51c:	82 2f       	mov	r24, r18
     51e:	08 95       	ret

00000520 <save_game_to_EPPROM>:
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	f8 94       	cli
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	52 e1       	ldi	r21, 0x12	; 18
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e8       	ldi	r24, 0x80	; 128
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	0e 94 0d 18 	call	0x301a	; 0x301a <eeprom_write_dword>
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <get_position_of_food>
     542:	68 2f       	mov	r22, r24
     544:	80 ea       	ldi	r24, 0xA0	; 160
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <get_position_of_food>
     552:	68 2f       	mov	r22, r24
     554:	88 ea       	ldi	r24, 0xA8	; 168
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     55c:	82 e0       	ldi	r24, 0x02	; 2
     55e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <get_position_of_food>
     562:	68 2f       	mov	r22, r24
     564:	80 eb       	ldi	r24, 0xB0	; 176
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     56c:	83 e0       	ldi	r24, 0x03	; 3
     56e:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <get_position_of_food>
     572:	68 2f       	mov	r22, r24
     574:	88 eb       	ldi	r24, 0xB8	; 184
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     57c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <get_rat_position>
     580:	68 2f       	mov	r22, r24
     582:	80 ec       	ldi	r24, 0xC0	; 192
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     58a:	0e 94 12 10 	call	0x2024	; 0x2024 <superfood_is_on_board>
     58e:	88 23       	and	r24, r24
     590:	41 f0       	breq	.+16     	; 0x5a2 <save_game_to_EPPROM+0x82>
     592:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_superfood_position>
     596:	68 2f       	mov	r22, r24
     598:	88 ec       	ldi	r24, 0xC8	; 200
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     5a0:	05 c0       	rjmp	.+10     	; 0x5ac <save_game_to_EPPROM+0x8c>
     5a2:	68 e0       	ldi	r22, 0x08	; 8
     5a4:	88 ec       	ldi	r24, 0xC8	; 200
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     5ac:	0e 94 bc 08 	call	0x1178	; 0x1178 <get_current_game_speed>
     5b0:	bc 01       	movw	r22, r24
     5b2:	80 ed       	ldi	r24, 0xD0	; 208
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0e 94 15 18 	call	0x302a	; 0x302a <eeprom_write_word>
     5ba:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
     5be:	ac 01       	movw	r20, r24
     5c0:	99 0f       	add	r25, r25
     5c2:	66 0b       	sbc	r22, r22
     5c4:	77 0b       	sbc	r23, r23
     5c6:	80 ee       	ldi	r24, 0xE0	; 224
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 0d 18 	call	0x301a	; 0x301a <eeprom_write_dword>
     5ce:	80 ee       	ldi	r24, 0xE0	; 224
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <eeprom_read_dword>
     5d6:	9f 93       	push	r25
     5d8:	8f 93       	push	r24
     5da:	7f 93       	push	r23
     5dc:	6f 93       	push	r22
     5de:	83 e3       	ldi	r24, 0x33	; 51
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
     5ea:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <get_snake_length>
     5ee:	68 2f       	mov	r22, r24
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	92 e0       	ldi	r25, 0x02	; 2
     5f4:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     5f8:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
     5fc:	ac 01       	movw	r20, r24
     5fe:	99 0f       	add	r25, r25
     600:	66 0b       	sbc	r22, r22
     602:	77 0b       	sbc	r23, r23
     604:	88 e0       	ldi	r24, 0x08	; 8
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	0e 94 0d 18 	call	0x301a	; 0x301a <eeprom_write_dword>
     60c:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <get_current_drn>
     610:	68 2f       	mov	r22, r24
     612:	88 e1       	ldi	r24, 0x18	; 24
     614:	92 e0       	ldi	r25, 0x02	; 2
     616:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     61a:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <get_snake_tail_index>
     61e:	c8 2f       	mov	r28, r24
     620:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <get_snake_head_index>
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	8c 17       	cp	r24, r28
     632:	e8 f5       	brcc	.+122    	; 0x6ae <save_game_to_EPPROM+0x18e>
     634:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <get_snake_tail_index>
     638:	f8 2e       	mov	r15, r24
     63a:	c8 2f       	mov	r28, r24
     63c:	d0 e0       	ldi	r29, 0x00	; 0
     63e:	c1 32       	cpi	r28, 0x21	; 33
     640:	d1 05       	cpc	r29, r1
     642:	ec f4       	brge	.+58     	; 0x67e <save_game_to_EPPROM+0x15e>
     644:	00 e2       	ldi	r16, 0x20	; 32
     646:	12 e0       	ldi	r17, 0x02	; 2
     648:	8c 2f       	mov	r24, r28
     64a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <get_snake_position_at_index>
     64e:	68 2f       	mov	r22, r24
     650:	c8 01       	movw	r24, r16
     652:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     656:	21 96       	adiw	r28, 0x01	; 1
     658:	08 5f       	subi	r16, 0xF8	; 248
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	c1 32       	cpi	r28, 0x21	; 33
     65e:	d1 05       	cpc	r29, r1
     660:	99 f7       	brne	.-26     	; 0x648 <save_game_to_EPPROM+0x128>
     662:	cf 2d       	mov	r28, r15
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	d1 95       	neg	r29
     668:	c1 95       	neg	r28
     66a:	d1 09       	sbc	r29, r1
     66c:	cc 0f       	add	r28, r28
     66e:	dd 1f       	adc	r29, r29
     670:	cc 0f       	add	r28, r28
     672:	dd 1f       	adc	r29, r29
     674:	cc 0f       	add	r28, r28
     676:	dd 1f       	adc	r29, r29
     678:	c8 5f       	subi	r28, 0xF8	; 248
     67a:	de 4f       	sbci	r29, 0xFE	; 254
     67c:	02 c0       	rjmp	.+4      	; 0x682 <save_game_to_EPPROM+0x162>
     67e:	c0 e0       	ldi	r28, 0x00	; 0
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	00 e0       	ldi	r16, 0x00	; 0
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	0c c0       	rjmp	.+24     	; 0x6a0 <save_game_to_EPPROM+0x180>
     688:	80 2f       	mov	r24, r16
     68a:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <get_snake_position_at_index>
     68e:	68 2f       	mov	r22, r24
     690:	ce 01       	movw	r24, r28
     692:	80 5e       	subi	r24, 0xE0	; 224
     694:	9d 4f       	sbci	r25, 0xFD	; 253
     696:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     69a:	28 96       	adiw	r28, 0x08	; 8
     69c:	0f 5f       	subi	r16, 0xFF	; 255
     69e:	1f 4f       	sbci	r17, 0xFF	; 255
     6a0:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <get_snake_head_index>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 17       	cp	r24, r16
     6a8:	91 07       	cpc	r25, r17
     6aa:	74 f7       	brge	.-36     	; 0x688 <save_game_to_EPPROM+0x168>
     6ac:	19 c0       	rjmp	.+50     	; 0x6e0 <save_game_to_EPPROM+0x1c0>
     6ae:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <get_snake_tail_index>
     6b2:	08 2f       	mov	r16, r24
     6b4:	10 e0       	ldi	r17, 0x00	; 0
     6b6:	c0 e0       	ldi	r28, 0x00	; 0
     6b8:	d0 e0       	ldi	r29, 0x00	; 0
     6ba:	0c c0       	rjmp	.+24     	; 0x6d4 <save_game_to_EPPROM+0x1b4>
     6bc:	80 2f       	mov	r24, r16
     6be:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <get_snake_position_at_index>
     6c2:	68 2f       	mov	r22, r24
     6c4:	ce 01       	movw	r24, r28
     6c6:	80 5e       	subi	r24, 0xE0	; 224
     6c8:	9d 4f       	sbci	r25, 0xFD	; 253
     6ca:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     6ce:	28 96       	adiw	r28, 0x08	; 8
     6d0:	0f 5f       	subi	r16, 0xFF	; 255
     6d2:	1f 4f       	sbci	r17, 0xFF	; 255
     6d4:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <get_snake_head_index>
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	80 17       	cp	r24, r16
     6dc:	91 07       	cpc	r25, r17
     6de:	74 f7       	brge	.-36     	; 0x6bc <save_game_to_EPPROM+0x19c>
     6e0:	68 e0       	ldi	r22, 0x08	; 8
     6e2:	ce 01       	movw	r24, r28
     6e4:	80 5e       	subi	r24, 0xE0	; 224
     6e6:	9d 4f       	sbci	r25, 0xFD	; 253
     6e8:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
     6ec:	78 94       	sei
     6ee:	df 91       	pop	r29
     6f0:	cf 91       	pop	r28
     6f2:	1f 91       	pop	r17
     6f4:	0f 91       	pop	r16
     6f6:	ff 90       	pop	r15
     6f8:	08 95       	ret

000006fa <add_food_to_board>:
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
	add_food_to_board(food_four);
}

void add_food_to_board(PosnType food_pos){
     6fa:	cf 93       	push	r28
     6fc:	c8 2f       	mov	r28, r24
	if(is_position_valid(food_pos)) {
     6fe:	0e 94 16 09 	call	0x122c	; 0x122c <is_position_valid>
     702:	88 23       	and	r24, r24
     704:	99 f0       	breq	.+38     	; 0x72c <add_food_to_board+0x32>
		foodPositions[numFoodItems] = food_pos;
     706:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <numFoodItems>
     70a:	0e 2e       	mov	r0, r30
     70c:	00 0c       	add	r0, r0
     70e:	ff 0b       	sbc	r31, r31
     710:	e9 5f       	subi	r30, 0xF9	; 249
     712:	fc 4f       	sbci	r31, 0xFC	; 252
     714:	c0 83       	st	Z, r28
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
     716:	63 e3       	ldi	r22, 0x33	; 51
     718:	70 e0       	ldi	r23, 0x00	; 0
     71a:	8c 2f       	mov	r24, r28
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
		numFoodItems++; 
     722:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <numFoodItems>
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <numFoodItems>
	}
}
     72c:	cf 91       	pop	r28
     72e:	08 95       	ret

00000730 <load_food_from_EEPROM>:
		load_EEPROM_data_on_next_game =0;
	}
}

void load_food_from_EEPROM(void){
	init_food();
     730:	0e 94 4a 07 	call	0xe94	; 0xe94 <init_food>
	PosnType food_one = eeprom_read_byte(FOOD_ONE);
     734:	80 ea       	ldi	r24, 0xA0	; 160
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
	add_food_to_board(food_one);
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 7d 03 	call	0x6fa	; 0x6fa <add_food_to_board>
	PosnType food_two = eeprom_read_byte(FOOD_TWO);
     742:	88 ea       	ldi	r24, 0xA8	; 168
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
	add_food_to_board(food_two);
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	0e 94 7d 03 	call	0x6fa	; 0x6fa <add_food_to_board>
	
	PosnType food_three = eeprom_read_byte(FOOD_THREE);
     750:	80 eb       	ldi	r24, 0xB0	; 176
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
	add_food_to_board(food_three);	
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <add_food_to_board>
	
	PosnType food_four = eeprom_read_byte(FOOD_FOUR);
     75e:	88 eb       	ldi	r24, 0xB8	; 184
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
	add_food_to_board(food_four);
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	0e 94 7d 03 	call	0x6fa	; 0x6fa <add_food_to_board>
     76c:	08 95       	ret

0000076e <load_rat_from_EEPROM>:
		foodPositions[numFoodItems] = food_pos;
		update_display_at_position(food_pos, COLOUR_LIGHT_YELLOW);
		numFoodItems++; 
	}
}
void load_rat_from_EEPROM(void){
     76e:	cf 93       	push	r28
	PosnType rat_pos = eeprom_read_byte(RAT); 
     770:	80 ec       	ldi	r24, 0xC0	; 192
     772:	91 e0       	ldi	r25, 0x01	; 1
     774:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
     778:	c8 2f       	mov	r28, r24
	if (is_position_valid(rat_pos)){
     77a:	0e 94 16 09 	call	0x122c	; 0x122c <is_position_valid>
     77e:	88 23       	and	r24, r24
     780:	21 f0       	breq	.+8      	; 0x78a <load_rat_from_EEPROM+0x1c>
		set_rat_at_pos(rat_pos); 
     782:	8c 2f       	mov	r24, r28
     784:	0e 94 0d 0b 	call	0x161a	; 0x161a <set_rat_at_pos>
     788:	02 c0       	rjmp	.+4      	; 0x78e <load_rat_from_EEPROM+0x20>
	}else{
		add_new_rat_position();
     78a:	0e 94 be 0b 	call	0x177c	; 0x177c <add_new_rat_position>
	}
}
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <load_superfood_from_EEPROM>:

void load_superfood_from_EEPROM(void){
     792:	cf 93       	push	r28
	PosnType super_food = eeprom_read_byte(SUPERFOOD); 
     794:	88 ec       	ldi	r24, 0xC8	; 200
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
     79c:	c8 2f       	mov	r28, r24
	if(is_position_valid(super_food)){
     79e:	0e 94 16 09 	call	0x122c	; 0x122c <is_position_valid>
     7a2:	88 23       	and	r24, r24
     7a4:	21 f0       	breq	.+8      	; 0x7ae <load_superfood_from_EEPROM+0x1c>
		load_superfood(super_food);
     7a6:	8c 2f       	mov	r24, r28
     7a8:	0e 94 0c 10 	call	0x2018	; 0x2018 <load_superfood>
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <load_superfood_from_EEPROM+0x20>
	}else{
		remove_superfood_from_board(); 
     7ae:	0e 94 3b 10 	call	0x2076	; 0x2076 <remove_superfood_from_board>
	}
}
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <load_snake_from_EPPROM>:

void load_snake_from_EPPROM(void){
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
     7c6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <set_snake_length>
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <set_snake_tail_pointer>
	set_snake_head_pointer(get_snake_length() -1); 
     7d0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <get_snake_length>
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <set_snake_head_pointer>
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
	set_snake_length(eeprom_read_byte(SNAKE_LENGTH));
	uint8_t snakePosition_index = 0; 
     7da:	10 e0       	ldi	r17, 0x00	; 0
		remove_superfood_from_board(); 
	}
}

void load_snake_from_EPPROM(void){
	uint16_t snake_memory_position = SNAKE_POSITION_TAIL;
     7dc:	c0 e2       	ldi	r28, 0x20	; 32
     7de:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t snakePosition_index = 0; 
	set_snake_tail_pointer(0);
	set_snake_head_pointer(get_snake_length() -1); 
	do 
	{
		PosnType snake_position = eeprom_read_byte(snake_memory_position);
     7e0:	ce 01       	movw	r24, r28
     7e2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
     7e6:	08 2f       	mov	r16, r24
		//  printf("x: %u y: %u \n", x_position(snake_position), y_position(snake_position)); 
		set_snake_position_in_array(snake_position, snakePosition_index); 
     7e8:	61 2f       	mov	r22, r17
     7ea:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <set_snake_position_in_array>
		update_display_at_position(snake_position, COLOUR_GREEN);
     7ee:	60 ef       	ldi	r22, 0xF0	; 240
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	80 2f       	mov	r24, r16
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
		snake_memory_position +=8; 
     7fa:	28 96       	adiw	r28, 0x08	; 8
		snakePosition_index ++; 
     7fc:	1f 5f       	subi	r17, 0xFF	; 255
		
	} while (is_position_valid(eeprom_read_byte(snake_memory_position)));
     7fe:	ce 01       	movw	r24, r28
     800:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
     804:	0e 94 16 09 	call	0x122c	; 0x122c <is_position_valid>
     808:	81 11       	cpse	r24, r1
     80a:	ea cf       	rjmp	.-44     	; 0x7e0 <load_snake_from_EPPROM+0x2a>
	update_display_at_position(get_snake_head_position(), COLOUR_RED);
     80c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <get_snake_head_position>
     810:	6f e0       	ldi	r22, 0x0F	; 15
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>

	reset_snake_drn(eeprom_read_byte(SNAKE_DIRECTION)); 
     81a:	88 e1       	ldi	r24, 0x18	; 24
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <eeprom_read_byte>
     822:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <reset_snake_drn>
}
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	08 95       	ret

00000830 <new_game_from_EEPROM>:
	printf("G time :%i \n", eeprom_read_dword(CLOCK_TICKS));
	
}

void new_game_from_EEPROM(void){
	if(EEPROM_has_saved_game()){
     830:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
     834:	88 23       	and	r24, r24
     836:	61 f1       	breq	.+88     	; 0x890 <new_game_from_EEPROM+0x60>
		clear_terminal(); 
     838:	0e 94 ef 10 	call	0x21de	; 0x21de <clear_terminal>
		set_clock_ticks(eeprom_read_dword(CLOCK_TICKS));
     83c:	88 e0       	ldi	r24, 0x08	; 8
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <eeprom_read_dword>
     844:	0e 94 c0 11 	call	0x2380	; 0x2380 <set_clock_ticks>
		set_score(eeprom_read_dword(GAME_SCORE));
     848:	80 ee       	ldi	r24, 0xE0	; 224
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <eeprom_read_dword>
     850:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <set_score>
		
		// Methods from init_game(); 
		ledmatrix_clear();
     854:	0e 94 0d 09 	call	0x121a	; 0x121a <ledmatrix_clear>
		init_score_on_terminal();
     858:	0e 94 38 11 	call	0x2270	; 0x2270 <init_score_on_terminal>
		set_game_speed(eeprom_read_word(GAME_SPEED));
     85c:	80 ed       	ldi	r24, 0xD0	; 208
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 ef 17 	call	0x2fde	; 0x2fde <eeprom_read_word>
     864:	0e 94 c1 08 	call	0x1182	; 0x1182 <set_game_speed>
		add_new_rat_position();
     868:	0e 94 be 0b 	call	0x177c	; 0x177c <add_new_rat_position>
		initialise_timer_one();
     86c:	0e 94 3a 12 	call	0x2474	; 0x2474 <initialise_timer_one>
		play_start_game_sound_effect();
     870:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
	
		// Init food, rats, superfood and snake
		load_food_from_EEPROM();
     874:	0e 94 98 03 	call	0x730	; 0x730 <load_food_from_EEPROM>
		load_rat_from_EEPROM();
     878:	0e 94 b7 03 	call	0x76e	; 0x76e <load_rat_from_EEPROM>
		load_superfood_from_EEPROM();
     87c:	0e 94 c9 03 	call	0x792	; 0x792 <load_superfood_from_EEPROM>
		load_snake_from_EPPROM();
     880:	0e 94 db 03 	call	0x7b6	; 0x7b6 <load_snake_from_EPPROM>
		//  Set Score and Clock
	
		// Delete any pending button pushes or serial input
		empty_button_queue();
     884:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
		clear_serial_input_buffer();
     888:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <clear_serial_input_buffer>
	
		//  set boolean back to zero, so next game will not load from EEPROM
		load_EEPROM_data_on_next_game =0;
     88c:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <load_EEPROM_data_on_next_game>
     890:	08 95       	ret

00000892 <move_place_down>:
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
		
	clear_terminal();
}

void move_place_down(uint16_t mem_position){
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	27 97       	sbiw	r28, 0x07	; 7
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	8c 01       	movw	r16, r24
	struct High_Score_Place high_score_place;
	eeprom_read_block(&high_score_place, mem_position, 7); 
     8ac:	47 e0       	ldi	r20, 0x07	; 7
     8ae:	50 e0       	ldi	r21, 0x00	; 0
     8b0:	bc 01       	movw	r22, r24
     8b2:	ce 01       	movw	r24, r28
     8b4:	01 96       	adiw	r24, 0x01	; 1
     8b6:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
	eeprom_write_block(&high_score_place, mem_position +64, 7);
     8ba:	b8 01       	movw	r22, r16
     8bc:	60 5c       	subi	r22, 0xC0	; 192
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	47 e0       	ldi	r20, 0x07	; 7
     8c2:	50 e0       	ldi	r21, 0x00	; 0
     8c4:	ce 01       	movw	r24, r28
     8c6:	01 96       	adiw	r24, 0x01	; 1
     8c8:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>
}
     8cc:	27 96       	adiw	r28, 0x07	; 7
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	f8 94       	cli
     8d2:	de bf       	out	0x3e, r29	; 62
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	df 91       	pop	r29
     8da:	cf 91       	pop	r28
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	08 95       	ret

000008e2 <move_four_place_down>:

void move_four_place_down(void){
	move_place_down(NAME_FOUR); 
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	91 e0       	ldi	r25, 0x01	; 1
     8e6:	0e 94 49 04 	call	0x892	; 0x892 <move_place_down>
     8ea:	08 95       	ret

000008ec <move_three_place_down>:
}

void move_three_place_down(void){
	move_four_place_down(); 
     8ec:	0e 94 71 04 	call	0x8e2	; 0x8e2 <move_four_place_down>
	move_place_down(NAME_THREE);
     8f0:	80 ec       	ldi	r24, 0xC0	; 192
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	0e 94 49 04 	call	0x892	; 0x892 <move_place_down>
     8f8:	08 95       	ret

000008fa <move_two_place_down>:
}

void move_two_place_down(void){
	move_three_place_down();
     8fa:	0e 94 76 04 	call	0x8ec	; 0x8ec <move_three_place_down>
	move_place_down(NAME_TWO);
     8fe:	80 e8       	ldi	r24, 0x80	; 128
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 49 04 	call	0x892	; 0x892 <move_place_down>
     906:	08 95       	ret

00000908 <move_one_place_down>:
}

void move_one_place_down(void){
	move_two_place_down();
     908:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_two_place_down>
	move_place_down(NAME_ONE);
     90c:	80 e4       	ldi	r24, 0x40	; 64
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	0e 94 49 04 	call	0x892	; 0x892 <move_place_down>
     914:	08 95       	ret

00000916 <initialise_EEPROM>:
}

void initialise_EEPROM(void){
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
     91e:	27 97       	sbiw	r28, 0x07	; 7
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	de bf       	out	0x3e, r29	; 62
     926:	0f be       	out	0x3f, r0	; 63
     928:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     92a:	44 e3       	ldi	r20, 0x34	; 52
     92c:	52 e1       	ldi	r21, 0x12	; 18
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 0d 18 	call	0x301a	; 0x301a <eeprom_write_dword>
	struct High_Score_Place empty_score_place;
	empty_score_place.name[0] = ' ';
     93a:	80 e2       	ldi	r24, 0x20	; 32
     93c:	89 83       	std	Y+1, r24	; 0x01
	empty_score_place.name[1] = ' ';
     93e:	8a 83       	std	Y+2, r24	; 0x02
	empty_score_place.name[2] = ' ';
     940:	8b 83       	std	Y+3, r24	; 0x03
	empty_score_place.score = 0; 
     942:	1c 82       	std	Y+4, r1	; 0x04
     944:	1d 82       	std	Y+5, r1	; 0x05
     946:	1e 82       	std	Y+6, r1	; 0x06
     948:	1f 82       	std	Y+7, r1	; 0x07
	eeprom_write_block(&empty_score_place, NAME_ONE, 7);
     94a:	47 e0       	ldi	r20, 0x07	; 7
     94c:	50 e0       	ldi	r21, 0x00	; 0
     94e:	60 e4       	ldi	r22, 0x40	; 64
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	ce 01       	movw	r24, r28
     954:	01 96       	adiw	r24, 0x01	; 1
     956:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_TWO, 7);
     95a:	47 e0       	ldi	r20, 0x07	; 7
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	60 e8       	ldi	r22, 0x80	; 128
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	ce 01       	movw	r24, r28
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_THREE, 7);
     96a:	47 e0       	ldi	r20, 0x07	; 7
     96c:	50 e0       	ldi	r21, 0x00	; 0
     96e:	60 ec       	ldi	r22, 0xC0	; 192
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	ce 01       	movw	r24, r28
     974:	01 96       	adiw	r24, 0x01	; 1
     976:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FOUR, 7);
     97a:	47 e0       	ldi	r20, 0x07	; 7
     97c:	50 e0       	ldi	r21, 0x00	; 0
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	71 e0       	ldi	r23, 0x01	; 1
     982:	ce 01       	movw	r24, r28
     984:	01 96       	adiw	r24, 0x01	; 1
     986:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>
	eeprom_write_block(&empty_score_place, NAME_FIVE, 7);
     98a:	47 e0       	ldi	r20, 0x07	; 7
     98c:	50 e0       	ldi	r21, 0x00	; 0
     98e:	60 e4       	ldi	r22, 0x40	; 64
     990:	71 e0       	ldi	r23, 0x01	; 1
     992:	ce 01       	movw	r24, r28
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>

	}
     99a:	27 96       	adiw	r28, 0x07	; 7
     99c:	0f b6       	in	r0, 0x3f	; 63
     99e:	f8 94       	cli
     9a0:	de bf       	out	0x3e, r29	; 62
     9a2:	0f be       	out	0x3f, r0	; 63
     9a4:	cd bf       	out	0x3d, r28	; 61
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <EEPROM_High_Score_has_been_initialised>:


int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <eeprom_read_dword>
	return (current_signature == HIGHSCORE_SIGNATURE);
     9b4:	21 e0       	ldi	r18, 0x01	; 1
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	64 33       	cpi	r22, 0x34	; 52
     9ba:	72 41       	sbci	r23, 0x12	; 18
     9bc:	81 05       	cpc	r24, r1
     9be:	91 05       	cpc	r25, r1
     9c0:	11 f0       	breq	.+4      	; 0x9c6 <EEPROM_High_Score_has_been_initialised+0x1a>
     9c2:	20 e0       	ldi	r18, 0x00	; 0
     9c4:	30 e0       	ldi	r19, 0x00	; 0
}
     9c6:	c9 01       	movw	r24, r18
     9c8:	08 95       	ret

000009ca <is_high_score>:
struct High_Score_Place {
	char name[3];
	uint32_t score;
};

uint8_t is_high_score(void){
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	cd b7       	in	r28, 0x3d	; 61
     9d8:	de b7       	in	r29, 0x3e	; 62
     9da:	27 97       	sbiw	r28, 0x07	; 7
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
	uint32_t score = get_score();
     9e6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
     9ea:	6b 01       	movw	r12, r22
     9ec:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place;
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     9ee:	47 e0       	ldi	r20, 0x07	; 7
     9f0:	50 e0       	ldi	r21, 0x00	; 0
     9f2:	60 e4       	ldi	r22, 0x40	; 64
     9f4:	71 e0       	ldi	r23, 0x01	; 1
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
     9fe:	8c 81       	ldd	r24, Y+4	; 0x04
     a00:	9d 81       	ldd	r25, Y+5	; 0x05
     a02:	ae 81       	ldd	r26, Y+6	; 0x06
     a04:	bf 81       	ldd	r27, Y+7	; 0x07
     a06:	c8 16       	cp	r12, r24
     a08:	d9 06       	cpc	r13, r25
     a0a:	ea 06       	cpc	r14, r26
     a0c:	fb 06       	cpc	r15, r27
     a0e:	40 f4       	brcc	.+16     	; 0xa20 <is_high_score+0x56>
     a10:	0e 94 d6 04 	call	0x9ac	; 0x9ac <EEPROM_High_Score_has_been_initialised>
     a14:	21 e0       	ldi	r18, 0x01	; 1
     a16:	89 2b       	or	r24, r25
     a18:	09 f0       	breq	.+2      	; 0xa1c <is_high_score+0x52>
     a1a:	20 e0       	ldi	r18, 0x00	; 0
     a1c:	82 2f       	mov	r24, r18
     a1e:	01 c0       	rjmp	.+2      	; 0xa22 <is_high_score+0x58>
     a20:	81 e0       	ldi	r24, 0x01	; 1
}
     a22:	27 96       	adiw	r28, 0x07	; 7
     a24:	0f b6       	in	r0, 0x3f	; 63
     a26:	f8 94       	cli
     a28:	de bf       	out	0x3e, r29	; 62
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	cd bf       	out	0x3d, r28	; 61
     a2e:	df 91       	pop	r29
     a30:	cf 91       	pop	r28
     a32:	ff 90       	pop	r15
     a34:	ef 90       	pop	r14
     a36:	df 90       	pop	r13
     a38:	cf 90       	pop	r12
     a3a:	08 95       	ret

00000a3c <high_score_position>:

uint16_t high_score_position(void){
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	27 97       	sbiw	r28, 0x07	; 7
     a4e:	0f b6       	in	r0, 0x3f	; 63
     a50:	f8 94       	cli
     a52:	de bf       	out	0x3e, r29	; 62
     a54:	0f be       	out	0x3f, r0	; 63
     a56:	cd bf       	out	0x3d, r28	; 61
	if (!(EEPROM_High_Score_has_been_initialised())){
     a58:	0e 94 d6 04 	call	0x9ac	; 0x9ac <EEPROM_High_Score_has_been_initialised>
     a5c:	89 2b       	or	r24, r25
     a5e:	09 f4       	brne	.+2      	; 0xa62 <high_score_position+0x26>
     a60:	5b c0       	rjmp	.+182    	; 0xb18 <high_score_position+0xdc>
		return NAME_ONE;
	}
	
	uint32_t score = get_score(); 
     a62:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
     a66:	6b 01       	movw	r12, r22
     a68:	7c 01       	movw	r14, r24
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);
     a6a:	47 e0       	ldi	r20, 0x07	; 7
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	60 e4       	ldi	r22, 0x40	; 64
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>

	if (score> current_score_place.score){
     a7a:	8c 81       	ldd	r24, Y+4	; 0x04
     a7c:	9d 81       	ldd	r25, Y+5	; 0x05
     a7e:	ae 81       	ldd	r26, Y+6	; 0x06
     a80:	bf 81       	ldd	r27, Y+7	; 0x07
     a82:	8c 15       	cp	r24, r12
     a84:	9d 05       	cpc	r25, r13
     a86:	ae 05       	cpc	r26, r14
     a88:	bf 05       	cpc	r27, r15
     a8a:	08 f4       	brcc	.+2      	; 0xa8e <high_score_position+0x52>
     a8c:	48 c0       	rjmp	.+144    	; 0xb1e <high_score_position+0xe2>
		return NAME_ONE;
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
     a8e:	47 e0       	ldi	r20, 0x07	; 7
     a90:	50 e0       	ldi	r21, 0x00	; 0
     a92:	60 e8       	ldi	r22, 0x80	; 128
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	ce 01       	movw	r24, r28
     a98:	01 96       	adiw	r24, 0x01	; 1
     a9a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
	if (score> current_score_place.score){
     a9e:	8c 81       	ldd	r24, Y+4	; 0x04
     aa0:	9d 81       	ldd	r25, Y+5	; 0x05
     aa2:	ae 81       	ldd	r26, Y+6	; 0x06
     aa4:	bf 81       	ldd	r27, Y+7	; 0x07
     aa6:	8c 15       	cp	r24, r12
     aa8:	9d 05       	cpc	r25, r13
     aaa:	ae 05       	cpc	r26, r14
     aac:	bf 05       	cpc	r27, r15
     aae:	d0 f1       	brcs	.+116    	; 0xb24 <high_score_position+0xe8>
		return NAME_TWO;
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
     ab0:	47 e0       	ldi	r20, 0x07	; 7
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	60 ec       	ldi	r22, 0xC0	; 192
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
	if (score> current_score_place.score){
     ac0:	8c 81       	ldd	r24, Y+4	; 0x04
     ac2:	9d 81       	ldd	r25, Y+5	; 0x05
     ac4:	ae 81       	ldd	r26, Y+6	; 0x06
     ac6:	bf 81       	ldd	r27, Y+7	; 0x07
     ac8:	8c 15       	cp	r24, r12
     aca:	9d 05       	cpc	r25, r13
     acc:	ae 05       	cpc	r26, r14
     ace:	bf 05       	cpc	r27, r15
     ad0:	60 f1       	brcs	.+88     	; 0xb2a <high_score_position+0xee>
		return NAME_THREE;
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
     ad2:	47 e0       	ldi	r20, 0x07	; 7
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	60 e0       	ldi	r22, 0x00	; 0
     ad8:	71 e0       	ldi	r23, 0x01	; 1
     ada:	ce 01       	movw	r24, r28
     adc:	01 96       	adiw	r24, 0x01	; 1
     ade:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
	if (score> current_score_place.score){
     ae2:	8c 81       	ldd	r24, Y+4	; 0x04
     ae4:	9d 81       	ldd	r25, Y+5	; 0x05
     ae6:	ae 81       	ldd	r26, Y+6	; 0x06
     ae8:	bf 81       	ldd	r27, Y+7	; 0x07
     aea:	8c 15       	cp	r24, r12
     aec:	9d 05       	cpc	r25, r13
     aee:	ae 05       	cpc	r26, r14
     af0:	bf 05       	cpc	r27, r15
     af2:	f0 f0       	brcs	.+60     	; 0xb30 <high_score_position+0xf4>
		return NAME_FOUR;
	}
	
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
     af4:	47 e0       	ldi	r20, 0x07	; 7
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	60 e4       	ldi	r22, 0x40	; 64
     afa:	71 e0       	ldi	r23, 0x01	; 1
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
	if (score> current_score_place.score){
     b04:	8c 81       	ldd	r24, Y+4	; 0x04
     b06:	9d 81       	ldd	r25, Y+5	; 0x05
     b08:	ae 81       	ldd	r26, Y+6	; 0x06
     b0a:	bf 81       	ldd	r27, Y+7	; 0x07
     b0c:	8c 15       	cp	r24, r12
     b0e:	9d 05       	cpc	r25, r13
     b10:	ae 05       	cpc	r26, r14
     b12:	bf 05       	cpc	r27, r15
     b14:	80 f0       	brcs	.+32     	; 0xb36 <high_score_position+0xfa>
		return NAME_FIVE;
	}
}
     b16:	11 c0       	rjmp	.+34     	; 0xb3a <high_score_position+0xfe>
	return (score >= current_score_place.score || !(EEPROM_High_Score_has_been_initialised())) ;
}

uint16_t high_score_position(void){
	if (!(EEPROM_High_Score_has_been_initialised())){
		return NAME_ONE;
     b18:	80 e4       	ldi	r24, 0x40	; 64
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e c0       	rjmp	.+28     	; 0xb3a <high_score_position+0xfe>
	uint32_t score = get_score(); 
	struct High_Score_Place current_score_place; 
	eeprom_read_block(&current_score_place, NAME_ONE, 7);

	if (score> current_score_place.score){
		return NAME_ONE;
     b1e:	80 e4       	ldi	r24, 0x40	; 64
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_TWO, 7);
	if (score> current_score_place.score){
		return NAME_TWO;
     b24:	80 e8       	ldi	r24, 0x80	; 128
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	08 c0       	rjmp	.+16     	; 0xb3a <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_THREE, 7);	
	if (score> current_score_place.score){
		return NAME_THREE;
     b2a:	80 ec       	ldi	r24, 0xC0	; 192
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	05 c0       	rjmp	.+10     	; 0xb3a <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_FOUR, 7);
	if (score> current_score_place.score){
		return NAME_FOUR;
     b30:	80 e0       	ldi	r24, 0x00	; 0
     b32:	91 e0       	ldi	r25, 0x01	; 1
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <high_score_position+0xfe>
	}
	
	eeprom_read_block(&current_score_place, NAME_FIVE, 7);
	if (score> current_score_place.score){
		return NAME_FIVE;
     b36:	80 e4       	ldi	r24, 0x40	; 64
     b38:	91 e0       	ldi	r25, 0x01	; 1
	}
}
     b3a:	27 96       	adiw	r28, 0x07	; 7
     b3c:	0f b6       	in	r0, 0x3f	; 63
     b3e:	f8 94       	cli
     b40:	de bf       	out	0x3e, r29	; 62
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	cd bf       	out	0x3d, r28	; 61
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	ff 90       	pop	r15
     b4c:	ef 90       	pop	r14
     b4e:	df 90       	pop	r13
     b50:	cf 90       	pop	r12
     b52:	08 95       	ret

00000b54 <handle_sequence_into_EEPFROM>:
				current_high_score_name[2] = ' ';
				break; 
			}
		}
	}
void handle_sequence_into_EEPFROM(){
     b54:	0f 93       	push	r16
     b56:	1f 93       	push	r17
     b58:	cf 93       	push	r28
     b5a:	df 93       	push	r29
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
     b60:	27 97       	sbiw	r28, 0x07	; 7
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	de bf       	out	0x3e, r29	; 62
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	cd bf       	out	0x3d, r28	; 61
	eeprom_write_dword(HIGHSCORE_SIGNATURE_MEMORY, HIGHSCORE_SIGNATURE);
     b6c:	44 e3       	ldi	r20, 0x34	; 52
     b6e:	52 e1       	ldi	r21, 0x12	; 18
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 0d 18 	call	0x301a	; 0x301a <eeprom_write_dword>
	uint16_t score_position= high_score_position();
     b7c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <high_score_position>
     b80:	8c 01       	movw	r16, r24
		switch(score_position){
     b82:	80 38       	cpi	r24, 0x80	; 128
     b84:	91 05       	cpc	r25, r1
     b86:	91 f0       	breq	.+36     	; 0xbac <handle_sequence_into_EEPFROM+0x58>
     b88:	20 f4       	brcc	.+8      	; 0xb92 <handle_sequence_into_EEPFROM+0x3e>
     b8a:	80 34       	cpi	r24, 0x40	; 64
     b8c:	91 05       	cpc	r25, r1
     b8e:	89 f0       	breq	.+34     	; 0xbb2 <handle_sequence_into_EEPFROM+0x5e>
     b90:	12 c0       	rjmp	.+36     	; 0xbb6 <handle_sequence_into_EEPFROM+0x62>
     b92:	80 3c       	cpi	r24, 0xC0	; 192
     b94:	91 05       	cpc	r25, r1
     b96:	39 f0       	breq	.+14     	; 0xba6 <handle_sequence_into_EEPFROM+0x52>
     b98:	01 15       	cp	r16, r1
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	18 07       	cpc	r17, r24
     b9e:	59 f4       	brne	.+22     	; 0xbb6 <handle_sequence_into_EEPFROM+0x62>
			case NAME_FOUR: move_four_place_down(); break;
     ba0:	0e 94 71 04 	call	0x8e2	; 0x8e2 <move_four_place_down>
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <handle_sequence_into_EEPFROM+0x62>
			case NAME_THREE: move_three_place_down(); break;
     ba6:	0e 94 76 04 	call	0x8ec	; 0x8ec <move_three_place_down>
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <handle_sequence_into_EEPFROM+0x62>
			case NAME_TWO: move_two_place_down(); break;
     bac:	0e 94 7d 04 	call	0x8fa	; 0x8fa <move_two_place_down>
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <handle_sequence_into_EEPFROM+0x62>
			case NAME_ONE: move_one_place_down(); break;
     bb2:	0e 94 84 04 	call	0x908	; 0x908 <move_one_place_down>
		}
	struct High_Score_Place new_score; 
	new_score.name[0] = current_high_score_name[0];
     bb6:	e2 eb       	ldi	r30, 0xB2	; 178
     bb8:	f2 e0       	ldi	r31, 0x02	; 2
     bba:	80 81       	ld	r24, Z
     bbc:	89 83       	std	Y+1, r24	; 0x01
	new_score.name[1] = current_high_score_name[1];
     bbe:	81 81       	ldd	r24, Z+1	; 0x01
     bc0:	8a 83       	std	Y+2, r24	; 0x02
	new_score.name[2] = current_high_score_name[2];
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	8b 83       	std	Y+3, r24	; 0x03
	new_score.score = get_score();
     bc6:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
     bca:	6c 83       	std	Y+4, r22	; 0x04
     bcc:	7d 83       	std	Y+5, r23	; 0x05
     bce:	8e 83       	std	Y+6, r24	; 0x06
     bd0:	9f 83       	std	Y+7, r25	; 0x07
	
	eeprom_write_block(&new_score, score_position, sizeof(new_score));
     bd2:	47 e0       	ldi	r20, 0x07	; 7
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	b8 01       	movw	r22, r16
     bd8:	ce 01       	movw	r24, r28
     bda:	01 96       	adiw	r24, 0x01	; 1
     bdc:	0e 94 f5 17 	call	0x2fea	; 0x2fea <eeprom_write_block>
		
	clear_terminal();
     be0:	0e 94 ef 10 	call	0x21de	; 0x21de <clear_terminal>
}
     be4:	27 96       	adiw	r28, 0x07	; 7
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <set_high_score_name>:
	if (score> current_score_place.score){
		return NAME_FIVE;
	}
}

void set_high_score_name(void){
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	cf 93       	push	r28
     c04:	df 93       	push	r29
	move_cursor(10,8);
     c06:	68 e0       	ldi	r22, 0x08	; 8
     c08:	8a e0       	ldi	r24, 0x0A	; 10
     c0a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf("You've set a high score. please set your initial below: ");
     c0e:	88 eb       	ldi	r24, 0xB8	; 184
     c10:	91 e0       	ldi	r25, 0x01	; 1
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
     c1a:	0f 90       	pop	r0
     c1c:	0f 90       	pop	r0
	int score_name_pointer = 0; 
     c1e:	00 e0       	ldi	r16, 0x00	; 0
     c20:	10 e0       	ldi	r17, 0x00	; 0
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     c22:	0f 2e       	mov	r0, r31
     c24:	f6 e2       	ldi	r31, 0x26	; 38
     c26:	ef 2e       	mov	r14, r31
     c28:	f4 e0       	ldi	r31, 0x04	; 4
     c2a:	ff 2e       	mov	r15, r31
     c2c:	f0 2d       	mov	r31, r0
	printf("You've set a high score. please set your initial below: ");
	int score_name_pointer = 0; 
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	while (1){
		show_cursor(); 
     c2e:	0e 94 0e 11 	call	0x221c	; 0x221c <show_cursor>
		serial_input = -1;
		escape_sequence_char = -1;
		
		if(serial_input_available()) {
     c32:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <serial_input_available>
     c36:	88 23       	and	r24, r24
     c38:	d1 f3       	breq	.-12     	; 0xc2e <set_high_score_name+0x34>
			// Serial data was available - read the data from standard input
			serial_input = fgetc(stdin);
     c3a:	f7 01       	movw	r30, r14
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	0e 94 bf 14 	call	0x297e	; 0x297e <fgetc>
     c44:	ec 01       	movw	r28, r24
			if (serial_input>= 65 && serial_input <= 122 && score_name_pointer <=2){
     c46:	98 2f       	mov	r25, r24
     c48:	91 54       	subi	r25, 0x41	; 65
     c4a:	9a 33       	cpi	r25, 0x3A	; 58
     c4c:	98 f4       	brcc	.+38     	; 0xc74 <set_high_score_name+0x7a>
     c4e:	03 30       	cpi	r16, 0x03	; 3
     c50:	11 05       	cpc	r17, r1
     c52:	84 f4       	brge	.+32     	; 0xc74 <set_high_score_name+0x7a>
				move_cursor(10 + score_name_pointer, 9);
     c54:	69 e0       	ldi	r22, 0x09	; 9
     c56:	8a e0       	ldi	r24, 0x0A	; 10
     c58:	80 0f       	add	r24, r16
     c5a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
				current_high_score_name[score_name_pointer] = serial_input;
     c5e:	f8 01       	movw	r30, r16
     c60:	ee 54       	subi	r30, 0x4E	; 78
     c62:	fd 4f       	sbci	r31, 0xFD	; 253
     c64:	c0 83       	st	Z, r28
				printf("%c", serial_input);
     c66:	ce 01       	movw	r24, r28
     c68:	99 27       	eor	r25, r25
     c6a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <putchar>
				score_name_pointer++;
     c6e:	0f 5f       	subi	r16, 0xFF	; 255
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	dd cf       	rjmp	.-70     	; 0xc2e <set_high_score_name+0x34>
			}else if(serial_input =='\n' && score_name_pointer>1){
     c74:	8a 30       	cpi	r24, 0x0A	; 10
     c76:	21 f4       	brne	.+8      	; 0xc80 <set_high_score_name+0x86>
     c78:	02 30       	cpi	r16, 0x02	; 2
     c7a:	11 05       	cpc	r17, r1
     c7c:	c4 f2       	brlt	.-80     	; 0xc2e <set_high_score_name+0x34>
     c7e:	11 c0       	rjmp	.+34     	; 0xca2 <set_high_score_name+0xa8>
				break; 
			}else if (serial_input == BACKSPACE_CHAR){
     c80:	8f 37       	cpi	r24, 0x7F	; 127
     c82:	a9 f6       	brne	.-86     	; 0xc2e <set_high_score_name+0x34>
				printf("%c", ' ');
     c84:	80 e2       	ldi	r24, 0x20	; 32
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	0e 94 39 15 	call	0x2a72	; 0x2a72 <putchar>
				if (score_name_pointer >0){score_name_pointer--;}
     c8c:	10 16       	cp	r1, r16
     c8e:	11 06       	cpc	r1, r17
     c90:	14 f4       	brge	.+4      	; 0xc96 <set_high_score_name+0x9c>
     c92:	01 50       	subi	r16, 0x01	; 1
     c94:	11 09       	sbc	r17, r1
				move_cursor(10 + score_name_pointer, 9);
     c96:	69 e0       	ldi	r22, 0x09	; 9
     c98:	8a e0       	ldi	r24, 0x0A	; 10
     c9a:	80 0f       	add	r24, r16
     c9c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
     ca0:	c6 cf       	rjmp	.-116    	; 0xc2e <set_high_score_name+0x34>
			}
			}
		}
		// handle sequence into EEPFROM
		while(1){
			if(eeprom_is_ready()){
     ca2:	f9 99       	sbic	0x1f, 1	; 31
     ca4:	fe cf       	rjmp	.-4      	; 0xca2 <set_high_score_name+0xa8>
				handle_sequence_into_EEPFROM();
     ca6:	0e 94 aa 05 	call	0xb54	; 0xb54 <handle_sequence_into_EEPFROM>
				current_high_score_name[0] = ' ';
     caa:	e2 eb       	ldi	r30, 0xB2	; 178
     cac:	f2 e0       	ldi	r31, 0x02	; 2
     cae:	80 e2       	ldi	r24, 0x20	; 32
     cb0:	80 83       	st	Z, r24
				current_high_score_name[1] = ' ';
     cb2:	81 83       	std	Z+1, r24	; 0x01
				current_high_score_name[2] = ' ';
     cb4:	82 83       	std	Z+2, r24	; 0x02
				break; 
			}
		}
	}
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	1f 91       	pop	r17
     cbc:	0f 91       	pop	r16
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	08 95       	ret

00000cc4 <display_EEPROM_high_score>:
int EEPROM_High_Score_has_been_initialised(void){
	uint32_t current_signature = eeprom_read_dword(HIGHSCORE_SIGNATURE_MEMORY);
	return (current_signature == HIGHSCORE_SIGNATURE);
}

void display_EEPROM_high_score(void){
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	27 97       	sbiw	r28, 0x07	; 7
     cce:	0f b6       	in	r0, 0x3f	; 63
     cd0:	f8 94       	cli
     cd2:	de bf       	out	0x3e, r29	; 62
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	cd bf       	out	0x3d, r28	; 61
	move_cursor(10,11);
     cd8:	6b e0       	ldi	r22, 0x0B	; 11
     cda:	8a e0       	ldi	r24, 0x0A	; 10
     cdc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf_P(PSTR("###HIGH SCORES###"));
     ce0:	8c e7       	ldi	r24, 0x7C	; 124
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	9f 93       	push	r25
     ce6:	8f 93       	push	r24
     ce8:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
	move_cursor(10,13);
     cec:	6d e0       	ldi	r22, 0x0D	; 13
     cee:	8a e0       	ldi	r24, 0x0A	; 10
     cf0:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	//initialise_EEPROM();
	if(EEPROM_High_Score_has_been_initialised()){
     cf4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <EEPROM_High_Score_has_been_initialised>
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	89 2b       	or	r24, r25
     cfe:	09 f4       	brne	.+2      	; 0xd02 <display_EEPROM_high_score+0x3e>
     d00:	b6 c0       	rjmp	.+364    	; 0xe6e <display_EEPROM_high_score+0x1aa>
		struct High_Score_Place score_place_to_display; 
		eeprom_read_block(&score_place_to_display, NAME_ONE, 7);
     d02:	47 e0       	ldi	r20, 0x07	; 7
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	60 e4       	ldi	r22, 0x40	; 64
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	ce 01       	movw	r24, r28
     d0c:	01 96       	adiw	r24, 0x01	; 1
     d0e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
		printf("First: %c%c%c %d", score_place_to_display.name[0], 
     d12:	8f 81       	ldd	r24, Y+7	; 0x07
     d14:	8f 93       	push	r24
     d16:	8e 81       	ldd	r24, Y+6	; 0x06
     d18:	8f 93       	push	r24
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	8f 93       	push	r24
     d1e:	8c 81       	ldd	r24, Y+4	; 0x04
     d20:	8f 93       	push	r24
     d22:	8b 81       	ldd	r24, Y+3	; 0x03
     d24:	1f 92       	push	r1
     d26:	8f 93       	push	r24
     d28:	8a 81       	ldd	r24, Y+2	; 0x02
     d2a:	1f 92       	push	r1
     d2c:	8f 93       	push	r24
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	1f 92       	push	r1
     d32:	8f 93       	push	r24
     d34:	81 ef       	ldi	r24, 0xF1	; 241
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	9f 93       	push	r25
     d3a:	8f 93       	push	r24
     d3c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
									score_place_to_display.name[1], 
									score_place_to_display.name[2], 
									score_place_to_display.score);
		
		move_cursor(10,14);					
     d40:	6e e0       	ldi	r22, 0x0E	; 14
     d42:	8a e0       	ldi	r24, 0x0A	; 10
     d44:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
		
		eeprom_read_block(&score_place_to_display, NAME_TWO, 7);
     d48:	47 e0       	ldi	r20, 0x07	; 7
     d4a:	50 e0       	ldi	r21, 0x00	; 0
     d4c:	60 e8       	ldi	r22, 0x80	; 128
     d4e:	70 e0       	ldi	r23, 0x00	; 0
     d50:	ce 01       	movw	r24, r28
     d52:	01 96       	adiw	r24, 0x01	; 1
     d54:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
		printf("Second: %c%c%c %d", score_place_to_display.name[0],
     d58:	8f 81       	ldd	r24, Y+7	; 0x07
     d5a:	8f 93       	push	r24
     d5c:	8e 81       	ldd	r24, Y+6	; 0x06
     d5e:	8f 93       	push	r24
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	8f 93       	push	r24
     d64:	8c 81       	ldd	r24, Y+4	; 0x04
     d66:	8f 93       	push	r24
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	1f 92       	push	r1
     d6c:	8f 93       	push	r24
     d6e:	8a 81       	ldd	r24, Y+2	; 0x02
     d70:	1f 92       	push	r1
     d72:	8f 93       	push	r24
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	1f 92       	push	r1
     d78:	8f 93       	push	r24
     d7a:	82 e0       	ldi	r24, 0x02	; 2
     d7c:	92 e0       	ldi	r25, 0x02	; 2
     d7e:	9f 93       	push	r25
     d80:	8f 93       	push	r24
     d82:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,15);
     d86:	6f e0       	ldi	r22, 0x0F	; 15
     d88:	8a e0       	ldi	r24, 0x0A	; 10
     d8a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_THREE, 7);
     d8e:	47 e0       	ldi	r20, 0x07	; 7
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	60 ec       	ldi	r22, 0xC0	; 192
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	ce 01       	movw	r24, r28
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
		printf("Third: %c%c%c %d", score_place_to_display.name[0],
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	8f 93       	push	r24
     da2:	8e 81       	ldd	r24, Y+6	; 0x06
     da4:	8f 93       	push	r24
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	8f 93       	push	r24
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	8f 93       	push	r24
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	1f 92       	push	r1
     db2:	8f 93       	push	r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	1f 92       	push	r1
     db8:	8f 93       	push	r24
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	1f 92       	push	r1
     dbe:	8f 93       	push	r24
     dc0:	84 e1       	ldi	r24, 0x14	; 20
     dc2:	92 e0       	ldi	r25, 0x02	; 2
     dc4:	9f 93       	push	r25
     dc6:	8f 93       	push	r24
     dc8:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,16);
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	60 e1       	ldi	r22, 0x10	; 16
     dd8:	8a e0       	ldi	r24, 0x0A	; 10
     dda:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FOUR, 7);
     dde:	47 e0       	ldi	r20, 0x07	; 7
     de0:	50 e0       	ldi	r21, 0x00	; 0
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	71 e0       	ldi	r23, 0x01	; 1
     de6:	ce 01       	movw	r24, r28
     de8:	01 96       	adiw	r24, 0x01	; 1
     dea:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
		printf("Fourth: %c%c%c %d", score_place_to_display.name[0],
     dee:	8f 81       	ldd	r24, Y+7	; 0x07
     df0:	8f 93       	push	r24
     df2:	8e 81       	ldd	r24, Y+6	; 0x06
     df4:	8f 93       	push	r24
     df6:	8d 81       	ldd	r24, Y+5	; 0x05
     df8:	8f 93       	push	r24
     dfa:	8c 81       	ldd	r24, Y+4	; 0x04
     dfc:	8f 93       	push	r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	1f 92       	push	r1
     e02:	8f 93       	push	r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	1f 92       	push	r1
     e08:	8f 93       	push	r24
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	1f 92       	push	r1
     e0e:	8f 93       	push	r24
     e10:	85 e2       	ldi	r24, 0x25	; 37
     e12:	92 e0       	ldi	r25, 0x02	; 2
     e14:	9f 93       	push	r25
     e16:	8f 93       	push	r24
     e18:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
		move_cursor(10,17);
     e1c:	61 e1       	ldi	r22, 0x11	; 17
     e1e:	8a e0       	ldi	r24, 0x0A	; 10
     e20:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>

		eeprom_read_block(&score_place_to_display, NAME_FIVE, 7);
     e24:	47 e0       	ldi	r20, 0x07	; 7
     e26:	50 e0       	ldi	r21, 0x00	; 0
     e28:	60 e4       	ldi	r22, 0x40	; 64
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	ce 01       	movw	r24, r28
     e2e:	01 96       	adiw	r24, 0x01	; 1
     e30:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <eeprom_read_block>
		printf("Fifth: %c%c%c %d", score_place_to_display.name[0],
     e34:	8f 81       	ldd	r24, Y+7	; 0x07
     e36:	8f 93       	push	r24
     e38:	8e 81       	ldd	r24, Y+6	; 0x06
     e3a:	8f 93       	push	r24
     e3c:	8d 81       	ldd	r24, Y+5	; 0x05
     e3e:	8f 93       	push	r24
     e40:	8c 81       	ldd	r24, Y+4	; 0x04
     e42:	8f 93       	push	r24
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	1f 92       	push	r1
     e48:	8f 93       	push	r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	1f 92       	push	r1
     e4e:	8f 93       	push	r24
     e50:	89 81       	ldd	r24, Y+1	; 0x01
     e52:	1f 92       	push	r1
     e54:	8f 93       	push	r24
     e56:	87 e3       	ldi	r24, 0x37	; 55
     e58:	92 e0       	ldi	r25, 0x02	; 2
     e5a:	9f 93       	push	r25
     e5c:	8f 93       	push	r24
     e5e:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
     e62:	0f b6       	in	r0, 0x3f	; 63
     e64:	f8 94       	cli
     e66:	de bf       	out	0x3e, r29	; 62
     e68:	0f be       	out	0x3f, r0	; 63
     e6a:	cd bf       	out	0x3d, r28	; 61
     e6c:	0a c0       	rjmp	.+20     	; 0xe82 <display_EEPROM_high_score+0x1be>
									score_place_to_display.name[1],
									score_place_to_display.name[2],
									score_place_to_display.score);
	}
	else{
		initialise_EEPROM();
     e6e:	0e 94 8b 04 	call	0x916	; 0x916 <initialise_EEPROM>
		printf("There Are Currently No HighScores");
     e72:	88 e4       	ldi	r24, 0x48	; 72
     e74:	92 e0       	ldi	r25, 0x02	; 2
     e76:	9f 93       	push	r25
     e78:	8f 93       	push	r24
     e7a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
	}

}
     e82:	27 96       	adiw	r28, 0x07	; 7
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	de bf       	out	0x3e, r29	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	cd bf       	out	0x3d, r28	; 61
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <init_food>:

/* 
** Initialise food details.
*/
void init_food(void) {
	numFoodItems = 0; 
     e94:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <numFoodItems>
     e98:	08 95       	ret

00000e9a <food_at>:
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     e9a:	30 91 06 03 	lds	r19, 0x0306	; 0x800306 <numFoodItems>
     e9e:	13 16       	cp	r1, r19
     ea0:	84 f4       	brge	.+32     	; 0xec2 <food_at+0x28>
        if(foodPositions[id] == posn) {
     ea2:	90 91 07 03 	lds	r25, 0x0307	; 0x800307 <foodPositions>
     ea6:	89 17       	cp	r24, r25
     ea8:	71 f0       	breq	.+28     	; 0xec6 <food_at+0x2c>
     eaa:	e8 e0       	ldi	r30, 0x08	; 8
     eac:	f3 e0       	ldi	r31, 0x03	; 3
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	03 c0       	rjmp	.+6      	; 0xeb8 <food_at+0x1e>
     eb2:	21 91       	ld	r18, Z+
     eb4:	28 17       	cp	r18, r24
     eb6:	49 f0       	breq	.+18     	; 0xeca <food_at+0x30>
     eb8:	9f 5f       	subi	r25, 0xFF	; 255
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     eba:	39 13       	cpse	r19, r25
     ebc:	fa cf       	rjmp	.-12     	; 0xeb2 <food_at+0x18>
            // Food found at this position 
            return id;
        }
    }
    // No food found at the given position.
    return -1;
     ebe:	8f ef       	ldi	r24, 0xFF	; 255
     ec0:	08 95       	ret
     ec2:	8f ef       	ldi	r24, 0xFF	; 255
     ec4:	08 95       	ret
** otherwise returns -1
*/
int8_t food_at(PosnType posn) {
    int8_t id;
	// Iterate over all the food items and see if the position matches
    for(id=0; id < numFoodItems; id++) {
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	08 95       	ret
     eca:	89 2f       	mov	r24, r25
            return id;
        }
    }
    // No food found at the given position.
    return -1;
}
     ecc:	08 95       	ret

00000ece <is_food_at>:
}

/* Returns true if there is food at the given position, false (0) otherwise.
*/
uint8_t is_food_at(PosnType posn) {
	return (food_at(posn) != -1);
     ece:	0e 94 4d 07 	call	0xe9a	; 0xe9a <food_at>
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	09 f4       	brne	.+2      	; 0xeda <is_food_at+0xc>
     ed8:	90 e0       	ldi	r25, 0x00	; 0
}
     eda:	89 2f       	mov	r24, r25
     edc:	08 95       	ret

00000ede <add_food_item>:
}

/* Add a food item and return the position - or 
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
	if(numFoodItems >= MAX_FOOD) {
     ee8:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <numFoodItems>
     eec:	88 30       	cpi	r24, 0x08	; 8
     eee:	0c f0       	brlt	.+2      	; 0xef2 <add_food_item+0x14>
     ef0:	44 c0       	rjmp	.+136    	; 0xf7a <add_food_item+0x9c>
     ef2:	00 e0       	ldi	r16, 0x00	; 0
     ef4:	10 e0       	ldi	r17, 0x00	; 0
     ef6:	d0 e0       	ldi	r29, 0x00	; 0
     ef8:	c0 e0       	ldi	r28, 0x00	; 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <add_food_item+0x22>
     efc:	0f 5f       	subi	r16, 0xFF	; 255
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
     f00:	2c 2f       	mov	r18, r28
     f02:	cc 0f       	add	r28, r28
     f04:	33 0b       	sbc	r19, r19
     f06:	2d 5f       	subi	r18, 0xFD	; 253
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	20 0f       	add	r18, r16
     f0c:	31 1f       	adc	r19, r17
     f0e:	2f 70       	andi	r18, 0x0F	; 15
     f10:	30 78       	andi	r19, 0x80	; 128
     f12:	33 23       	and	r19, r19
     f14:	34 f4       	brge	.+12     	; 0xf22 <add_food_item+0x44>
     f16:	21 50       	subi	r18, 0x01	; 1
     f18:	31 09       	sbc	r19, r1
     f1a:	20 6f       	ori	r18, 0xF0	; 240
     f1c:	3f 6f       	ori	r19, 0xFF	; 255
     f1e:	2f 5f       	subi	r18, 0xFF	; 255
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	82 2f       	mov	r24, r18
     f24:	c2 2f       	mov	r28, r18
        y = (y+5)%BOARD_HEIGHT;
     f26:	6d 2f       	mov	r22, r29
     f28:	dd 0f       	add	r29, r29
     f2a:	77 0b       	sbc	r23, r23
     f2c:	6b 5f       	subi	r22, 0xFB	; 251
     f2e:	7f 4f       	sbci	r23, 0xFF	; 255
     f30:	67 70       	andi	r22, 0x07	; 7
     f32:	70 78       	andi	r23, 0x80	; 128
     f34:	77 23       	and	r23, r23
     f36:	34 f4       	brge	.+12     	; 0xf44 <add_food_item+0x66>
     f38:	61 50       	subi	r22, 0x01	; 1
     f3a:	71 09       	sbc	r23, r1
     f3c:	68 6f       	ori	r22, 0xF8	; 248
     f3e:	7f 6f       	ori	r23, 0xFF	; 255
     f40:	6f 5f       	subi	r22, 0xFF	; 255
     f42:	7f 4f       	sbci	r23, 0xFF	; 255
     f44:	d6 2f       	mov	r29, r22
		test_position = position(x,y);
     f46:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
     f4a:	f8 2e       	mov	r15, r24
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     f4c:	03 36       	cpi	r16, 0x63	; 99
     f4e:	11 05       	cpc	r17, r1
     f50:	b1 f0       	breq	.+44     	; 0xf7e <add_food_item+0xa0>
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
                (is_snake_at(test_position) || is_food_at(test_position)
     f52:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <is_snake_at>
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 && 
     f56:	81 11       	cpse	r24, r1
     f58:	d1 cf       	rjmp	.-94     	; 0xefc <add_food_item+0x1e>
                (is_snake_at(test_position) || is_food_at(test_position)
     f5a:	8f 2d       	mov	r24, r15
     f5c:	0e 94 67 07 	call	0xece	; 0xece <is_food_at>
     f60:	81 11       	cpse	r24, r1
     f62:	cc cf       	rjmp	.-104    	; 0xefc <add_food_item+0x1e>
					|| is_superfood_at(test_position) || is_rat_at(test_position)));
     f64:	8f 2d       	mov	r24, r15
     f66:	0e 94 5f 10 	call	0x20be	; 0x20be <is_superfood_at>
     f6a:	81 11       	cpse	r24, r1
     f6c:	c7 cf       	rjmp	.-114    	; 0xefc <add_food_item+0x1e>
     f6e:	8f 2d       	mov	r24, r15
     f70:	0e 94 b7 0b 	call	0x176e	; 0x176e <is_rat_at>
     f74:	81 11       	cpse	r24, r1
     f76:	c2 cf       	rjmp	.-124    	; 0xefc <add_food_item+0x1e>
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <add_food_item+0xa4>
** INVALID_POSITION if we can't.
*/
PosnType add_food_item(void) {
	if(numFoodItems >= MAX_FOOD) {
		// Can't fit any more food items in our list
		return INVALID_POSITION;
     f7a:	88 e0       	ldi	r24, 0x08	; 8
     f7c:	0f c0       	rjmp	.+30     	; 0xf9c <add_food_item+0xbe>
        
    if(attempts >= 100) {
        /* We tried 100 times to generate a position
        ** but they were all occupied.
        */
        return INVALID_POSITION;
     f7e:	88 e0       	ldi	r24, 0x08	; 8
     f80:	0d c0       	rjmp	.+26     	; 0xf9c <add_food_item+0xbe>
    }
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
     f82:	80 91 06 03 	lds	r24, 0x0306	; 0x800306 <numFoodItems>
	foodPositions[newFoodID] = test_position;
     f86:	e8 2f       	mov	r30, r24
     f88:	08 2e       	mov	r0, r24
     f8a:	00 0c       	add	r0, r0
     f8c:	ff 0b       	sbc	r31, r31
     f8e:	e9 5f       	subi	r30, 0xF9	; 249
     f90:	fc 4f       	sbci	r31, 0xFC	; 252
     f92:	f0 82       	st	Z, r15
	numFoodItems++;
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <numFoodItems>
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = (x+3+attempts)%BOARD_WIDTH;
        y = (y+5)%BOARD_HEIGHT;
		test_position = position(x,y);
     f9a:	8f 2d       	mov	r24, r15
	// Add it to our list, display it, and return its ID.
	int8_t newFoodID = numFoodItems;
	foodPositions[newFoodID] = test_position;
	numFoodItems++;
	return test_position;
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	08 95       	ret

00000fa8 <get_position_of_food>:

/* Return the position of the given food item. The ID is assumed
** to be valid.
*/
PosnType get_position_of_food(int8_t foodID) {
	return foodPositions[foodID];
     fa8:	e8 2f       	mov	r30, r24
     faa:	88 0f       	add	r24, r24
     fac:	ff 0b       	sbc	r31, r31
     fae:	e9 5f       	subi	r30, 0xF9	; 249
     fb0:	fc 4f       	sbci	r31, 0xFC	; 252
}
     fb2:	80 81       	ld	r24, Z
     fb4:	08 95       	ret

00000fb6 <remove_food>:
** Remove the food item from our list of food
*/
void remove_food(int8_t foodID) {
    int8_t i;
        
    if(foodID < 0 || foodID >= numFoodItems) {
     fb6:	88 23       	and	r24, r24
     fb8:	b4 f0       	brlt	.+44     	; 0xfe6 <remove_food+0x30>
     fba:	20 91 06 03 	lds	r18, 0x0306	; 0x800306 <numFoodItems>
     fbe:	82 17       	cp	r24, r18
     fc0:	94 f4       	brge	.+36     	; 0xfe6 <remove_food+0x30>
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	82 17       	cp	r24, r18
     fc6:	64 f4       	brge	.+24     	; 0xfe0 <remove_food+0x2a>
        foodPositions[i-1] = foodPositions[i];
     fc8:	e8 2f       	mov	r30, r24
     fca:	08 2e       	mov	r0, r24
     fcc:	00 0c       	add	r0, r0
     fce:	ff 0b       	sbc	r31, r31
     fd0:	e9 5f       	subi	r30, 0xF9	; 249
     fd2:	fc 4f       	sbci	r31, 0xFC	; 252
     fd4:	90 81       	ld	r25, Z
     fd6:	31 97       	sbiw	r30, 0x01	; 1
     fd8:	90 83       	st	Z, r25
     fda:	8f 5f       	subi	r24, 0xFF	; 255
    }
	     
    /* Shuffle our list of food items along so there are
	** no holes in our list 
	*/
    for(i=foodID+1; i <numFoodItems; i++) {
     fdc:	82 17       	cp	r24, r18
     fde:	a4 f3       	brlt	.-24     	; 0xfc8 <remove_food+0x12>
        foodPositions[i-1] = foodPositions[i];
    }
    numFoodItems--;
     fe0:	21 50       	subi	r18, 0x01	; 1
     fe2:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <numFoodItems>
     fe6:	08 95       	ret

00000fe8 <update_display_at_position>:

int get_current_game_speed(void){
	return current_speed;
}
void reset_game_speed(void){
	current_speed = 600;
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	c8 2f       	mov	r28, r24
     ff0:	16 2f       	mov	r17, r22
     ff2:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
     ff6:	d8 2f       	mov	r29, r24
     ff8:	8c 2f       	mov	r24, r28
     ffa:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
     ffe:	41 2f       	mov	r20, r17
    1000:	6d 2f       	mov	r22, r29
    1002:	0e 94 ca 08 	call	0x1194	; 0x1194 <ledmatrix_update_pixel>
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <init_game>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	0e 94 0d 09 	call	0x121a	; 0x121a <ledmatrix_clear>
    1016:	0e 94 38 11 	call	0x2270	; 0x2270 <init_score_on_terminal>
    101a:	88 e5       	ldi	r24, 0x58	; 88
    101c:	92 e0       	ldi	r25, 0x02	; 2
    101e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1022:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    1026:	0e 94 be 0b 	call	0x177c	; 0x177c <add_new_rat_position>
    102a:	0e 94 3a 12 	call	0x2474	; 0x2474 <initialise_timer_one>
    102e:	0e 94 07 02 	call	0x40e	; 0x40e <play_start_game_sound_effect>
    1032:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <init_snake>
    1036:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <get_snake_head_position>
    103a:	6f e0       	ldi	r22, 0x0F	; 15
    103c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    1040:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <get_snake_tail_position>
    1044:	60 ef       	ldi	r22, 0xF0	; 240
    1046:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    104a:	0e 94 4a 07 	call	0xe94	; 0xe94 <init_food>
    104e:	c3 e0       	ldi	r28, 0x03	; 3
    1050:	0e 94 6f 07 	call	0xede	; 0xede <add_food_item>
    1054:	d8 2f       	mov	r29, r24
    1056:	0e 94 16 09 	call	0x122c	; 0x122c <is_position_valid>
    105a:	88 23       	and	r24, r24
    105c:	21 f0       	breq	.+8      	; 0x1066 <init_game+0x58>
    105e:	63 e3       	ldi	r22, 0x33	; 51
    1060:	8d 2f       	mov	r24, r29
    1062:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    1066:	c1 50       	subi	r28, 0x01	; 1
    1068:	99 f7       	brne	.-26     	; 0x1050 <init_game+0x42>
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	08 95       	ret

00001070 <increase_game_speed>:
    1070:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    1074:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    1078:	8b 3f       	cpi	r24, 0xFB	; 251
    107a:	91 05       	cpc	r25, r1
    107c:	a4 f0       	brlt	.+40     	; 0x10a6 <increase_game_speed+0x36>
    107e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <current_speed>
    1082:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <current_speed+0x1>
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	0e 94 85 12 	call	0x250a	; 0x250a <__floatunsisf>
    108e:	26 e6       	ldi	r18, 0x66	; 102
    1090:	36 e6       	ldi	r19, 0x66	; 102
    1092:	46 e6       	ldi	r20, 0x66	; 102
    1094:	5f e3       	ldi	r21, 0x3F	; 63
    1096:	0e 94 13 13 	call	0x2626	; 0x2626 <__mulsf3>
    109a:	0e 94 56 12 	call	0x24ac	; 0x24ac <__fixunssfsi>
    109e:	70 93 0b 01 	sts	0x010B, r23	; 0x80010b <current_speed+0x1>
    10a2:	60 93 0a 01 	sts	0x010A, r22	; 0x80010a <current_speed>
    10a6:	08 95       	ret

000010a8 <attempt_to_move_snake_forward>:
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <get_snake_head_position>
    10b4:	d8 2f       	mov	r29, r24
    10b6:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <advance_snake_head>
    10ba:	c8 2f       	mov	r28, r24
    10bc:	88 23       	and	r24, r24
    10be:	0c f4       	brge	.+2      	; 0x10c2 <attempt_to_move_snake_forward+0x1a>
    10c0:	55 c0       	rjmp	.+170    	; 0x116c <attempt_to_move_snake_forward+0xc4>
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <add_to_score>
    10ca:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <get_snake_head_position>
    10ce:	18 2f       	mov	r17, r24
    10d0:	8e ef       	ldi	r24, 0xFE	; 254
    10d2:	8c 0f       	add	r24, r28
    10d4:	82 30       	cpi	r24, 0x02	; 2
    10d6:	c0 f4       	brcc	.+48     	; 0x1108 <attempt_to_move_snake_forward+0x60>
    10d8:	81 2f       	mov	r24, r17
    10da:	0e 94 4d 07 	call	0xe9a	; 0xe9a <food_at>
    10de:	0e 94 db 07 	call	0xfb6	; 0xfb6 <remove_food>
    10e2:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    10e6:	82 e0       	ldi	r24, 0x02	; 2
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	0e 94 3c 0c 	call	0x1878	; 0x1878 <add_to_score>
    10ee:	0e 94 38 08 	call	0x1070	; 0x1070 <increase_game_speed>
    10f2:	0e 94 6f 07 	call	0xede	; 0xede <add_food_item>
    10f6:	08 2f       	mov	r16, r24
    10f8:	0e 94 16 09 	call	0x122c	; 0x122c <is_position_valid>
    10fc:	88 23       	and	r24, r24
    10fe:	21 f0       	breq	.+8      	; 0x1108 <attempt_to_move_snake_forward+0x60>
    1100:	63 e3       	ldi	r22, 0x33	; 51
    1102:	80 2f       	mov	r24, r16
    1104:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    1108:	8c ef       	ldi	r24, 0xFC	; 252
    110a:	8c 0f       	add	r24, r28
    110c:	82 30       	cpi	r24, 0x02	; 2
    110e:	50 f4       	brcc	.+20     	; 0x1124 <attempt_to_move_snake_forward+0x7c>
    1110:	0e 94 53 10 	call	0x20a6	; 0x20a6 <eat_superfood_from_board>
    1114:	89 e0       	ldi	r24, 0x09	; 9
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	0e 94 3c 0c 	call	0x1878	; 0x1878 <add_to_score>
    111c:	0e 94 38 08 	call	0x1070	; 0x1070 <increase_game_speed>
    1120:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    1124:	8a ef       	ldi	r24, 0xFA	; 250
    1126:	8c 0f       	add	r24, r28
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	50 f4       	brcc	.+20     	; 0x1140 <attempt_to_move_snake_forward+0x98>
    112c:	0e 94 be 0b 	call	0x177c	; 0x177c <add_new_rat_position>
    1130:	84 e0       	ldi	r24, 0x04	; 4
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 3c 0c 	call	0x1878	; 0x1878 <add_to_score>
    1138:	0e 94 38 08 	call	0x1070	; 0x1070 <increase_game_speed>
    113c:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
    1140:	cd 7f       	andi	r28, 0xFD	; 253
    1142:	c1 30       	cpi	r28, 0x01	; 1
    1144:	11 f0       	breq	.+4      	; 0x114a <attempt_to_move_snake_forward+0xa2>
    1146:	c5 30       	cpi	r28, 0x05	; 5
    1148:	29 f4       	brne	.+10     	; 0x1154 <attempt_to_move_snake_forward+0xac>
    114a:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <advance_snake_tail>
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    1154:	60 ef       	ldi	r22, 0xF0	; 240
    1156:	8d 2f       	mov	r24, r29
    1158:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    115c:	6f e0       	ldi	r22, 0x0F	; 15
    115e:	81 2f       	mov	r24, r17
    1160:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <update_display_at_position>
    1164:	0e 94 71 11 	call	0x22e2	; 0x22e2 <update_terminal_score>
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	01 c0       	rjmp	.+2      	; 0x116e <attempt_to_move_snake_forward+0xc6>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	df 91       	pop	r29
    1170:	cf 91       	pop	r28
    1172:	1f 91       	pop	r17
    1174:	0f 91       	pop	r16
    1176:	08 95       	ret

00001178 <get_current_game_speed>:
    1178:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <current_speed>
    117c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <current_speed+0x1>
    1180:	08 95       	ret

00001182 <set_game_speed>:
}

void set_game_speed(uint16_t new_speed){
	current_speed = new_speed;
    1182:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <current_speed+0x1>
    1186:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <current_speed>
    118a:	08 95       	ret

0000118c <ledmatrix_setup>:
	(void)spi_send_byte(0x08);
}

void ledmatrix_shift_display_down(void) {
	(void)spi_send_byte(CMD_SHIFT_DISPLAY);
	(void)spi_send_byte(0x04);
    118c:	80 e8       	ldi	r24, 0x80	; 128
    118e:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <spi_setup_master>
    1192:	08 95       	ret

00001194 <ledmatrix_update_pixel>:
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	80 31       	cpi	r24, 0x10	; 16
    119c:	b0 f4       	brcc	.+44     	; 0x11ca <ledmatrix_update_pixel+0x36>
    119e:	68 30       	cpi	r22, 0x08	; 8
    11a0:	a0 f4       	brcc	.+40     	; 0x11ca <ledmatrix_update_pixel+0x36>
    11a2:	14 2f       	mov	r17, r20
    11a4:	c6 2f       	mov	r28, r22
    11a6:	d8 2f       	mov	r29, r24
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    11ae:	6c 2f       	mov	r22, r28
    11b0:	67 70       	andi	r22, 0x07	; 7
    11b2:	80 e1       	ldi	r24, 0x10	; 16
    11b4:	68 9f       	mul	r22, r24
    11b6:	90 01       	movw	r18, r0
    11b8:	11 24       	eor	r1, r1
    11ba:	8d 2f       	mov	r24, r29
    11bc:	8f 70       	andi	r24, 0x0F	; 15
    11be:	82 2b       	or	r24, r18
    11c0:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    11c4:	81 2f       	mov	r24, r17
    11c6:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	08 95       	ret

000011d2 <ledmatrix_update_column>:
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	80 31       	cpi	r24, 0x10	; 16
    11dc:	90 f4       	brcc	.+36     	; 0x1202 <ledmatrix_update_column+0x30>
    11de:	8b 01       	movw	r16, r22
    11e0:	c8 2f       	mov	r28, r24
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    11e8:	8c 2f       	mov	r24, r28
    11ea:	8f 70       	andi	r24, 0x0F	; 15
    11ec:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    11f0:	e8 01       	movw	r28, r16
    11f2:	08 5f       	subi	r16, 0xF8	; 248
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	89 91       	ld	r24, Y+
    11f8:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    11fc:	c0 17       	cp	r28, r16
    11fe:	d1 07       	cpc	r29, r17
    1200:	d1 f7       	brne	.-12     	; 0x11f6 <ledmatrix_update_column+0x24>
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	08 95       	ret

0000120c <ledmatrix_shift_display_left>:
    120c:	84 e0       	ldi	r24, 0x04	; 4
    120e:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    1218:	08 95       	ret

0000121a <ledmatrix_clear>:
}

void ledmatrix_clear(void) {
	(void)spi_send_byte(CMD_CLEAR_SCREEN);
    121a:	8f e0       	ldi	r24, 0x0F	; 15
    121c:	0e 94 06 10 	call	0x200c	; 0x200c <spi_send_byte>
    1220:	08 95       	ret

00001222 <x_position>:

/* Functions that can extract the x and y values from a position type 
*/
uint8_t x_position(PosnType posn) {
	return (posn >> 4) & 0x0F;
}
    1222:	82 95       	swap	r24
    1224:	8f 70       	andi	r24, 0x0F	; 15
    1226:	08 95       	ret

00001228 <y_position>:

uint8_t y_position(PosnType posn) {
	return (posn & 0x0F);
}
    1228:	8f 70       	andi	r24, 0x0F	; 15
    122a:	08 95       	ret

0000122c <is_position_valid>:

int8_t is_position_valid(PosnType posn) {
	// We extract bit 3 of the position. If this is 0, then the 
	// position is valid (otherwise the y position is 8 or higher)
	return ((posn & 0x08) == 0);
    122c:	83 fb       	bst	r24, 3
    122e:	88 27       	eor	r24, r24
    1230:	80 f9       	bld	r24, 0
}
    1232:	91 e0       	ldi	r25, 0x01	; 1
    1234:	89 27       	eor	r24, r25
    1236:	08 95       	ret

00001238 <position>:
/* Function to construct a position from x and y values.
** We  take the lower 4 bits of the x value and the lower
** 3 bits of the y value.
*/
PosnType position(uint8_t x, uint8_t y) {
	return ((x & 0x0F) << 4) | (y & 0x07);
    1238:	20 e1       	ldi	r18, 0x10	; 16
    123a:	82 9f       	mul	r24, r18
    123c:	c0 01       	movw	r24, r0
    123e:	11 24       	eor	r1, r1
    1240:	67 70       	andi	r22, 0x07	; 7
}
    1242:	86 2b       	or	r24, r22
    1244:	08 95       	ret

00001246 <initialise_hardware>:
// initialise_hardware()
//
// Sets up all of the hardware devices and then turns on global interrupts
void initialise_hardware(void) {
	// Set up SPI communication with LED matrix
	ledmatrix_setup();
    1246:	0e 94 c6 08 	call	0x118c	; 0x118c <ledmatrix_setup>
	
	// Set up pin change interrupts on the push-buttons
	init_button_interrupts();
    124a:	0e 94 12 01 	call	0x224	; 0x224 <init_button_interrupts>
	
	// Setup serial port for 19200 baud communication with no echo
	// of incoming characters
	init_serial_stdio(19200, 0);
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	7b e4       	ldi	r23, 0x4B	; 75
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <init_serial_stdio>
	
	// Set up our main timer to give us an interrupt every millisecond
	init_timer0();
    125c:	0e 94 8a 11 	call	0x2314	; 0x2314 <init_timer0>
	
	// Turn on global interrupts
	sei();
    1260:	78 94       	sei
    1262:	08 95       	ret

00001264 <splash_screen>:
}

void splash_screen(void) {
    1264:	ff 92       	push	r15
    1266:	0f 93       	push	r16
    1268:	1f 93       	push	r17
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
	// Reset display attributes and clear terminal screen then output a message
	set_display_attribute(TERM_RESET);
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <set_display_attribute>
	clear_terminal();
    1274:	0e 94 ef 10 	call	0x21de	; 0x21de <clear_terminal>
	
	hide_cursor();	// We don't need to see the cursor when we're just doing output
    1278:	0e 94 05 11 	call	0x220a	; 0x220a <hide_cursor>
	display_start_terminal_screen();
    127c:	0e 94 17 11 	call	0x222e	; 0x222e <display_start_terminal_screen>
	
	// Output the scrolling message to the LED matrix
	// and wait for a push button to be pushed.
	ledmatrix_clear();
    1280:	0e 94 0d 09 	call	0x121a	; 0x121a <ledmatrix_clear>
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
    1284:	cf e0       	ldi	r28, 0x0F	; 15
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
			case 1: colour = COLOUR_RED; break;
    1286:	0f 2e       	mov	r0, r31
    1288:	ff e0       	ldi	r31, 0x0F	; 15
    128a:	ff 2e       	mov	r15, r31
    128c:	f0 2d       	mov	r31, r0
			case 2: colour = COLOUR_YELLOW; break;
    128e:	0f ef       	ldi	r16, 0xFF	; 255
			case 3: colour = COLOUR_GREEN; break;
    1290:	10 ef       	ldi	r17, 0xF0	; 240
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1292:	d5 e1       	ldi	r29, 0x15	; 21
	ledmatrix_clear();
	
	// Red message the first time through
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
    1294:	6c 2f       	mov	r22, r28
    1296:	8a e6       	ldi	r24, 0x6A	; 106
    1298:	92 e0       	ldi	r25, 0x02	; 2
    129a:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <set_scrolling_display_text>
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    129e:	0d c0       	rjmp	.+26     	; 0x12ba <splash_screen+0x56>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    12a0:	2f e7       	ldi	r18, 0x7F	; 127
    12a2:	8c e2       	ldi	r24, 0x2C	; 44
    12a4:	93 e0       	ldi	r25, 0x03	; 3
    12a6:	21 50       	subi	r18, 0x01	; 1
    12a8:	80 40       	sbci	r24, 0x00	; 0
    12aa:	90 40       	sbci	r25, 0x00	; 0
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <splash_screen+0x42>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <splash_screen+0x4c>
    12b0:	00 00       	nop
			_delay_ms(130);
			if(button_pushed() != -1) {
    12b2:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    12b6:	8f 3f       	cpi	r24, 0xFF	; 255
    12b8:	a9 f5       	brne	.+106    	; 0x1324 <splash_screen+0xc0>
	PixelColour colour = COLOUR_RED;
	while(1) {
		set_scrolling_display_text("SNAKE By 44354369", colour);
		// Scroll the message until it has scrolled off the 
		// display or a button is pushed. We pause for 130ms between each scroll.
		while(scroll_display()) {
    12ba:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <scroll_display>
    12be:	81 11       	cpse	r24, r1
    12c0:	ef cf       	rjmp	.-34     	; 0x12a0 <splash_screen+0x3c>
				return;
			}
		}
		// Message has scrolled off the display. Change colour
		// to a random colour and scroll again.
		switch(random()%4) {
    12c2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <random>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	83 70       	andi	r24, 0x03	; 3
    12cc:	99 27       	eor	r25, r25
    12ce:	aa 27       	eor	r26, r26
    12d0:	b0 78       	andi	r27, 0x80	; 128
    12d2:	bb 23       	and	r27, r27
    12d4:	54 f4       	brge	.+20     	; 0x12ea <splash_screen+0x86>
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	a1 09       	sbc	r26, r1
    12da:	b1 09       	sbc	r27, r1
    12dc:	8c 6f       	ori	r24, 0xFC	; 252
    12de:	9f 6f       	ori	r25, 0xFF	; 255
    12e0:	af 6f       	ori	r26, 0xFF	; 255
    12e2:	bf 6f       	ori	r27, 0xFF	; 255
    12e4:	01 96       	adiw	r24, 0x01	; 1
    12e6:	a1 1d       	adc	r26, r1
    12e8:	b1 1d       	adc	r27, r1
    12ea:	81 30       	cpi	r24, 0x01	; 1
    12ec:	91 05       	cpc	r25, r1
    12ee:	a1 05       	cpc	r26, r1
    12f0:	b1 05       	cpc	r27, r1
    12f2:	91 f0       	breq	.+36     	; 0x1318 <splash_screen+0xb4>
    12f4:	2c f4       	brge	.+10     	; 0x1300 <splash_screen+0x9c>
    12f6:	89 2b       	or	r24, r25
    12f8:	8a 2b       	or	r24, r26
    12fa:	8b 2b       	or	r24, r27
    12fc:	59 f0       	breq	.+22     	; 0x1314 <splash_screen+0xb0>
    12fe:	ca cf       	rjmp	.-108    	; 0x1294 <splash_screen+0x30>
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	a1 05       	cpc	r26, r1
    1306:	b1 05       	cpc	r27, r1
    1308:	49 f0       	breq	.+18     	; 0x131c <splash_screen+0xb8>
    130a:	03 97       	sbiw	r24, 0x03	; 3
    130c:	a1 05       	cpc	r26, r1
    130e:	b1 05       	cpc	r27, r1
    1310:	39 f0       	breq	.+14     	; 0x1320 <splash_screen+0xbc>
    1312:	c0 cf       	rjmp	.-128    	; 0x1294 <splash_screen+0x30>
			case 0: colour = COLOUR_LIGHT_ORANGE; break;
    1314:	cd 2f       	mov	r28, r29
    1316:	be cf       	rjmp	.-132    	; 0x1294 <splash_screen+0x30>
			case 1: colour = COLOUR_RED; break;
    1318:	cf 2d       	mov	r28, r15
    131a:	bc cf       	rjmp	.-136    	; 0x1294 <splash_screen+0x30>
			case 2: colour = COLOUR_YELLOW; break;
    131c:	c0 2f       	mov	r28, r16
    131e:	ba cf       	rjmp	.-140    	; 0x1294 <splash_screen+0x30>
			case 3: colour = COLOUR_GREEN; break;
    1320:	c1 2f       	mov	r28, r17
    1322:	b8 cf       	rjmp	.-144    	; 0x1294 <splash_screen+0x30>
		}
	}
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	1f 91       	pop	r17
    132a:	0f 91       	pop	r16
    132c:	ff 90       	pop	r15
    132e:	08 95       	ret

00001330 <new_game>:

void new_game(void) {
	// Clear the serial terminal
	clear_terminal();
    1330:	0e 94 ef 10 	call	0x21de	; 0x21de <clear_terminal>
	
	// Initialise the game and display
	init_game();
    1334:	0e 94 07 08 	call	0x100e	; 0x100e <init_game>
		
	// Initialise the score
	init_score();
    1338:	0e 94 33 0c 	call	0x1866	; 0x1866 <init_score>
	
	// Delete any pending button pushes or serial input
	empty_button_queue();
    133c:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
	clear_serial_input_buffer();
    1340:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <clear_serial_input_buffer>
    1344:	08 95       	ret

00001346 <play_game>:
}

void play_game(void) {
    1346:	4f 92       	push	r4
    1348:	5f 92       	push	r5
    134a:	7f 92       	push	r7
    134c:	8f 92       	push	r8
    134e:	9f 92       	push	r9
    1350:	af 92       	push	r10
    1352:	bf 92       	push	r11
    1354:	cf 92       	push	r12
    1356:	df 92       	push	r13
    1358:	ef 92       	push	r14
    135a:	ff 92       	push	r15
    135c:	0f 93       	push	r16
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
	
	// Record the last time the snake moved as the current time -
	// this ensures we don't move the snake immediately.
	last_move_time = get_clock_ticks();
    1364:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    1368:	4b 01       	movw	r8, r22
    136a:	5c 01       	movw	r10, r24

void play_game(void) {
	uint32_t last_move_time;
	int8_t button;
	char serial_input, escape_sequence_char;
	uint8_t characters_into_escape_sequence = 0;
    136c:	00 e0       	ldi	r16, 0x00	; 0
    136e:	1f ef       	ldi	r17, 0xFF	; 255
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1370:	0f 2e       	mov	r0, r31
    1372:	ff ed       	ldi	r31, 0xDF	; 223
    1374:	7f 2e       	mov	r7, r31
    1376:	f0 2d       	mov	r31, r0
		if(button == -1) {

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    1378:	0f 2e       	mov	r0, r31
    137a:	f6 e2       	ldi	r31, 0x26	; 38
    137c:	4f 2e       	mov	r4, r31
    137e:	f4 e0       	ldi	r31, 0x04	; 4
    1380:	5f 2e       	mov	r5, r31
    1382:	f0 2d       	mov	r31, r0
	// We play the game forever. If the game is over, we will break out of
	// this loop. The loop checks for events (button pushes, serial input etc.)
	// and on a regular basis will move the snake forward.

	while(1) {
			if(time_to_add_superfood()){
    1384:	0e 94 15 10 	call	0x202a	; 0x202a <time_to_add_superfood>
    1388:	81 11       	cpse	r24, r1
				add_superfood_to_board();}
    138a:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <add_superfood_to_board>
			if(time_to_remove_superfood()){
    138e:	0e 94 2b 10 	call	0x2056	; 0x2056 <time_to_remove_superfood>
    1392:	81 11       	cpse	r24, r1
				remove_superfood_from_board();}
    1394:	0e 94 3b 10 	call	0x2076	; 0x2076 <remove_superfood_from_board>
			if(is_time_to_move_rat()){move_rat();}
    1398:	0e 94 21 0c 	call	0x1842	; 0x1842 <is_time_to_move_rat>
    139c:	81 11       	cpse	r24, r1
    139e:	0e 94 46 0b 	call	0x168c	; 0x168c <move_rat>
			handle_buzzer_loop();
    13a2:	0e 94 6d 02 	call	0x4da	; 0x4da <handle_buzzer_loop>
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
		escape_sequence_char = -1;
		if (timer_is_paused()){
    13a6:	0e 94 a9 11 	call	0x2352	; 0x2352 <timer_is_paused>
    13aa:	89 2b       	or	r24, r25
    13ac:	19 f0       	breq	.+6      	; 0x13b4 <play_game+0x6e>
			button = -1;
			empty_button_queue();
    13ae:	0e 94 20 01 	call	0x240	; 0x240 <empty_button_queue>
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <play_game+0x7a>
			}else{
		button = button_pushed();}
    13b4:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    13b8:	d8 2f       	mov	r29, r24
		// printf("%i\n", timer_is_paused());
		if(button == -1) {
    13ba:	8f 3f       	cpi	r24, 0xFF	; 255
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <play_game+0x7a>
    13be:	9a c0       	rjmp	.+308    	; 0x14f4 <play_game+0x1ae>

			// No push button was pushed, see if there is any serial input
			if(serial_input_available()) {
    13c0:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <serial_input_available>
    13c4:	88 23       	and	r24, r24
    13c6:	09 f4       	brne	.+2      	; 0x13ca <play_game+0x84>
    13c8:	a4 c0       	rjmp	.+328    	; 0x1512 <play_game+0x1cc>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
    13ca:	f2 01       	movw	r30, r4
    13cc:	80 81       	ld	r24, Z
    13ce:	91 81       	ldd	r25, Z+1	; 0x01
    13d0:	0e 94 bf 14 	call	0x297e	; 0x297e <fgetc>
    13d4:	c8 2f       	mov	r28, r24
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
    13d6:	01 11       	cpse	r16, r1
    13d8:	03 c0       	rjmp	.+6      	; 0x13e0 <play_game+0x9a>
    13da:	8b 31       	cpi	r24, 0x1B	; 27
    13dc:	51 f4       	brne	.+20     	; 0x13f2 <play_game+0xac>
    13de:	96 c0       	rjmp	.+300    	; 0x150c <play_game+0x1c6>
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
    13e0:	01 30       	cpi	r16, 0x01	; 1
    13e2:	19 f4       	brne	.+6      	; 0x13ea <play_game+0xa4>
    13e4:	8b 35       	cpi	r24, 0x5B	; 91
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <play_game+0xac>
    13e8:	93 c0       	rjmp	.+294    	; 0x1510 <play_game+0x1ca>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
    13ea:	02 30       	cpi	r16, 0x02	; 2
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <play_game+0xaa>
    13ee:	88 c0       	rjmp	.+272    	; 0x1500 <play_game+0x1ba>
    13f0:	7b c0       	rjmp	.+246    	; 0x14e8 <play_game+0x1a2>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    13f2:	0e 94 a9 11 	call	0x2352	; 0x2352 <timer_is_paused>
    13f6:	89 2b       	or	r24, r25
    13f8:	09 f0       	breq	.+2      	; 0x13fc <play_game+0xb6>
    13fa:	3f c0       	rjmp	.+126    	; 0x147a <play_game+0x134>
    13fc:	08 c0       	rjmp	.+16     	; 0x140e <play_game+0xc8>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    13fe:	d1 11       	cpse	r29, r1
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <play_game+0xce>
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <play_game+0xc0>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1404:	00 e0       	ldi	r16, 0x00	; 0
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <set_snake_dirn>
    140c:	50 c0       	rjmp	.+160    	; 0x14ae <play_game+0x168>
    140e:	00 e0       	ldi	r16, 0x00	; 0
    1410:	d1 2f       	mov	r29, r17
    1412:	01 c0       	rjmp	.+2      	; 0x1416 <play_game+0xd0>
		// other than -1 if input is available.
		// (We don't initalise button to -1 since button_pushed() will return -1
		// if no button pushes are waiting to be returned.)
		// Button pushes take priority over serial input. If there are both then
		// we'll retrieve the serial input the next time through this loop
		serial_input = -1;
    1414:	c1 2f       	mov	r28, r17
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
			// Set next direction to be moved to be right.
			set_snake_dirn(SNAKE_RIGHT);
		} else  if (button==2 || escape_sequence_char == 'A') {
    1416:	d2 30       	cpi	r29, 0x02	; 2
    1418:	19 f0       	breq	.+6      	; 0x1420 <play_game+0xda>
    141a:	81 2f       	mov	r24, r17
    141c:	81 34       	cpi	r24, 0x41	; 65
    141e:	21 f4       	brne	.+8      	; 0x1428 <play_game+0xe2>
			// Set next direction to be moved to be up
			set_snake_dirn(SNAKE_UP);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <set_snake_dirn>
    1426:	43 c0       	rjmp	.+134    	; 0x14ae <play_game+0x168>
		} else if(button==3 || escape_sequence_char=='D') {
    1428:	d3 30       	cpi	r29, 0x03	; 3
    142a:	11 f0       	breq	.+4      	; 0x1430 <play_game+0xea>
    142c:	84 34       	cpi	r24, 0x44	; 68
    142e:	21 f4       	brne	.+8      	; 0x1438 <play_game+0xf2>
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
    1430:	83 e0       	ldi	r24, 0x03	; 3
    1432:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <set_snake_dirn>
    1436:	3b c0       	rjmp	.+118    	; 0x14ae <play_game+0x168>
		} else if (button==1 || escape_sequence_char == 'B') {
    1438:	d1 30       	cpi	r29, 0x01	; 1
    143a:	11 f0       	breq	.+4      	; 0x1440 <play_game+0xfa>
    143c:	82 34       	cpi	r24, 0x42	; 66
    143e:	29 f4       	brne	.+10     	; 0x144a <play_game+0x104>
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <set_snake_dirn>
    1446:	33 c0       	rjmp	.+102    	; 0x14ae <play_game+0x168>
					characters_into_escape_sequence = 0;
				} else {
					// Character was not part of an escape sequence (or we received
					// an invalid second character in the sequence). We'll process 
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
    1448:	00 e0       	ldi	r16, 0x00	; 0
			// Set next direction to be moved to be left
			set_snake_dirn(SNAKE_LEFT);
		} else if (button==1 || escape_sequence_char == 'B') {
			// Set next direction to be moved to be down
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
    144a:	8c 2f       	mov	r24, r28
    144c:	8f 7d       	andi	r24, 0xDF	; 223
    144e:	80 35       	cpi	r24, 0x50	; 80
    1450:	19 f4       	brne	.+6      	; 0x1458 <play_game+0x112>
			toggle_timer_clock();
    1452:	0e 94 a2 11 	call	0x2344	; 0x2344 <toggle_timer_clock>
    1456:	2b c0       	rjmp	.+86     	; 0x14ae <play_game+0x168>
		}else if(serial_input == 's'|| serial_input == 's'){
    1458:	c3 37       	cpi	r28, 0x73	; 115
    145a:	19 f4       	brne	.+6      	; 0x1462 <play_game+0x11c>
			save_game_to_EPPROM();
    145c:	0e 94 90 02 	call	0x520	; 0x520 <save_game_to_EPPROM>
    1460:	26 c0       	rjmp	.+76     	; 0x14ae <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1462:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1466:	89 2b       	or	r24, r25
    1468:	11 f1       	breq	.+68     	; 0x14ae <play_game+0x168>
    146a:	8c 2f       	mov	r24, r28
    146c:	8f 7d       	andi	r24, 0xDF	; 223
    146e:	8f 34       	cpi	r24, 0x4F	; 79
    1470:	f1 f4       	brne	.+60     	; 0x14ae <play_game+0x168>
 			load_EEPROM_data_on_next_game = 1;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <load_EEPROM_data_on_next_game>
 			break;
    1478:	62 c0       	rjmp	.+196    	; 0x153e <play_game+0x1f8>
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    147a:	8c 2f       	mov	r24, r28
    147c:	8f 7d       	andi	r24, 0xDF	; 223
    147e:	80 35       	cpi	r24, 0x50	; 80
    1480:	21 f4       	brne	.+8      	; 0x148a <play_game+0x144>
			toggle_timer_clock();
    1482:	0e 94 a2 11 	call	0x2344	; 0x2344 <toggle_timer_clock>
    1486:	00 e0       	ldi	r16, 0x00	; 0
    1488:	12 c0       	rjmp	.+36     	; 0x14ae <play_game+0x168>
    148a:	00 e0       	ldi	r16, 0x00	; 0
		}else if(serial_input == 's'|| serial_input == 'S'){
    148c:	83 35       	cpi	r24, 0x53	; 83
    148e:	19 f4       	brne	.+6      	; 0x1496 <play_game+0x150>
			save_game_to_EPPROM();
    1490:	0e 94 90 02 	call	0x520	; 0x520 <save_game_to_EPPROM>
    1494:	0c c0       	rjmp	.+24     	; 0x14ae <play_game+0x168>
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1496:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    149a:	89 2b       	or	r24, r25
    149c:	41 f0       	breq	.+16     	; 0x14ae <play_game+0x168>
    149e:	8c 2f       	mov	r24, r28
    14a0:	8f 7d       	andi	r24, 0xDF	; 223
    14a2:	8f 34       	cpi	r24, 0x4F	; 79
    14a4:	21 f4       	brne	.+8      	; 0x14ae <play_game+0x168>
			load_EEPROM_data_on_next_game = 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <load_EEPROM_data_on_next_game>
			break;
    14ac:	48 c0       	rjmp	.+144    	; 0x153e <play_game+0x1f8>
	}
		// else - invalid input or we're part way through an escape sequence -
		// do nothing
		
		// Check for timer related events here
		if(get_clock_ticks() >= last_move_time + get_current_game_speed()) {
    14ae:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    14b2:	6b 01       	movw	r12, r22
    14b4:	7c 01       	movw	r14, r24
    14b6:	0e 94 bc 08 	call	0x1178	; 0x1178 <get_current_game_speed>
    14ba:	09 2e       	mov	r0, r25
    14bc:	00 0c       	add	r0, r0
    14be:	aa 0b       	sbc	r26, r26
    14c0:	bb 0b       	sbc	r27, r27
    14c2:	88 0d       	add	r24, r8
    14c4:	99 1d       	adc	r25, r9
    14c6:	aa 1d       	adc	r26, r10
    14c8:	bb 1d       	adc	r27, r11
    14ca:	c8 16       	cp	r12, r24
    14cc:	d9 06       	cpc	r13, r25
    14ce:	ea 06       	cpc	r14, r26
    14d0:	fb 06       	cpc	r15, r27
    14d2:	08 f4       	brcc	.+2      	; 0x14d6 <play_game+0x190>
    14d4:	57 cf       	rjmp	.-338    	; 0x1384 <play_game+0x3e>
			// 600ms (0.6 second) has passed since the last time we moved the snake,
			// so move it now
			if(!attempt_to_move_snake_forward()) {
    14d6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <attempt_to_move_snake_forward>
    14da:	88 23       	and	r24, r24
    14dc:	81 f1       	breq	.+96     	; 0x153e <play_game+0x1f8>
				// Move attempt failed - game over
				break;
			}
			last_move_time = get_clock_ticks();
    14de:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    14e2:	4b 01       	movw	r8, r22
    14e4:	5c 01       	movw	r10, r24
    14e6:	4e cf       	rjmp	.-356    	; 0x1384 <play_game+0x3e>
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    14e8:	0e 94 a9 11 	call	0x2352	; 0x2352 <timer_is_paused>
    14ec:	89 2b       	or	r24, r25
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <play_game+0x1ac>
    14f0:	ab cf       	rjmp	.-170    	; 0x1448 <play_game+0x102>
    14f2:	c3 cf       	rjmp	.-122    	; 0x147a <play_game+0x134>
    14f4:	0e 94 a9 11 	call	0x2352	; 0x2352 <timer_is_paused>
    14f8:	89 2b       	or	r24, r25
    14fa:	09 f4       	brne	.+2      	; 0x14fe <play_game+0x1b8>
    14fc:	80 cf       	rjmp	.-256    	; 0x13fe <play_game+0xb8>
    14fe:	1c c0       	rjmp	.+56     	; 0x1538 <play_game+0x1f2>
    1500:	0e 94 a9 11 	call	0x2352	; 0x2352 <timer_is_paused>
    1504:	89 2b       	or	r24, r25
    1506:	51 f0       	breq	.+20     	; 0x151c <play_game+0x1d6>
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	13 c0       	rjmp	.+38     	; 0x1532 <play_game+0x1ec>
				// Serial data was available - read the data from standard input
				serial_input = fgetc(stdin);
				// Check if the character is part of an escape sequence
				if(characters_into_escape_sequence == 0 && serial_input == ESCAPE_CHAR) {
					// We've hit the first character in an escape sequence (escape)
					characters_into_escape_sequence++;
    150c:	01 e0       	ldi	r16, 0x01	; 1
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <play_game+0x1cc>
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 1 && serial_input == '[') {
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
    1510:	02 e0       	ldi	r16, 0x02	; 2
					// the data in the serial_input variable.
					characters_into_escape_sequence = 0;
				}
			}
		}
	if(!(timer_is_paused())){
    1512:	0e 94 a9 11 	call	0x2352	; 0x2352 <timer_is_paused>
    1516:	89 2b       	or	r24, r25
    1518:	61 f4       	brne	.+24     	; 0x1532 <play_game+0x1ec>
    151a:	08 c0       	rjmp	.+16     	; 0x152c <play_game+0x1e6>
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    151c:	c3 34       	cpi	r28, 0x43	; 67
    151e:	09 f4       	brne	.+2      	; 0x1522 <play_game+0x1dc>
    1520:	71 cf       	rjmp	.-286    	; 0x1404 <play_game+0xbe>
					// We've hit the second character in an escape sequence
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
    1522:	8c 2f       	mov	r24, r28
					serial_input = -1;  // Don't further process this character - we
										// deal with it as part of the escape sequence
					characters_into_escape_sequence = 0;
    1524:	00 e0       	ldi	r16, 0x00	; 0
					characters_into_escape_sequence++;
					serial_input = -1; // Don't further process this character
				} else if(characters_into_escape_sequence == 2) {
					// Third (and last) character in the escape sequence
					escape_sequence_char = serial_input;
					serial_input = -1;  // Don't further process this character - we
    1526:	c1 2f       	mov	r28, r17
				}
			}
		}
	if(!(timer_is_paused())){
		// Process the input. 
		if(button==0 || escape_sequence_char=='C') {
    1528:	d1 2f       	mov	r29, r17
    152a:	78 cf       	rjmp	.-272    	; 0x141c <play_game+0xd6>
			set_snake_dirn(SNAKE_DOWN);
		} else if(serial_input == 'p' || serial_input == 'P') {
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 's'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    152c:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    1530:	be cf       	rjmp	.-132    	; 0x14ae <play_game+0x168>
    1532:	c1 2f       	mov	r28, r17
 			load_EEPROM_data_on_next_game = 1;
 			break;
		}
	}else if(serial_input == 'p' || serial_input == 'P') {
    1534:	87 2d       	mov	r24, r7
    1536:	aa cf       	rjmp	.-172    	; 0x148c <play_game+0x146>
			toggle_timer_clock();
		}else if(serial_input == 's'|| serial_input == 'S'){
			save_game_to_EPPROM();
		}else if(EEPROM_has_saved_game() && (serial_input == 'o' || serial_input == 'O')){
    1538:	0e 94 83 02 	call	0x506	; 0x506 <EEPROM_has_saved_game>
    153c:	b8 cf       	rjmp	.-144    	; 0x14ae <play_game+0x168>
			}
			last_move_time = get_clock_ticks();
		}
	}
	// If we get here the game is over. 
}
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	0f 91       	pop	r16
    1546:	ff 90       	pop	r15
    1548:	ef 90       	pop	r14
    154a:	df 90       	pop	r13
    154c:	cf 90       	pop	r12
    154e:	bf 90       	pop	r11
    1550:	af 90       	pop	r10
    1552:	9f 90       	pop	r9
    1554:	8f 90       	pop	r8
    1556:	7f 90       	pop	r7
    1558:	5f 90       	pop	r5
    155a:	4f 90       	pop	r4
    155c:	08 95       	ret

0000155e <handle_game_over>:

void handle_game_over() {
	clear_terminal();
    155e:	0e 94 ef 10 	call	0x21de	; 0x21de <clear_terminal>
	move_cursor(10,5);
    1562:	65 e0       	ldi	r22, 0x05	; 5
    1564:	8a e0       	ldi	r24, 0x0A	; 10
    1566:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf_P(PSTR("GAME OVER"));
    156a:	8c ea       	ldi	r24, 0xAC	; 172
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	9f 93       	push	r25
    1570:	8f 93       	push	r24
    1572:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
	move_cursor(10,7);
    1576:	67 e0       	ldi	r22, 0x07	; 7
    1578:	8a e0       	ldi	r24, 0x0A	; 10
    157a:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf("Score: %u", get_score());
    157e:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
    1582:	9f 93       	push	r25
    1584:	8f 93       	push	r24
    1586:	7f 93       	push	r23
    1588:	6f 93       	push	r22
    158a:	8c e7       	ldi	r24, 0x7C	; 124
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	9f 93       	push	r25
    1590:	8f 93       	push	r24
    1592:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
	display_EEPROM_high_score();
    1596:	0e 94 62 06 	call	0xcc4	; 0xcc4 <display_EEPROM_high_score>

	if (is_high_score()){
    159a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <is_high_score>
    159e:	2d b7       	in	r18, 0x3d	; 61
    15a0:	3e b7       	in	r19, 0x3e	; 62
    15a2:	28 5f       	subi	r18, 0xF8	; 248
    15a4:	3f 4f       	sbci	r19, 0xFF	; 255
    15a6:	0f b6       	in	r0, 0x3f	; 63
    15a8:	f8 94       	cli
    15aa:	3e bf       	out	0x3e, r19	; 62
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	2d bf       	out	0x3d, r18	; 61
    15b0:	81 11       	cpse	r24, r1
		set_high_score_name();	
    15b2:	0e 94 fd 05 	call	0xbfa	; 0xbfa <set_high_score_name>
	}
	move_cursor(10,9);
    15b6:	69 e0       	ldi	r22, 0x09	; 9
    15b8:	8a e0       	ldi	r24, 0x0A	; 10
    15ba:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf_P(PSTR("Press a button to start again"));
    15be:	8e e8       	ldi	r24, 0x8E	; 142
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9f 93       	push	r25
    15c4:	8f 93       	push	r24
    15c6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
	display_EEPROM_high_score(); 
    15ca:	0e 94 62 06 	call	0xcc4	; 0xcc4 <display_EEPROM_high_score>
	while(button_pushed() == -1) {		
    15ce:	0f 90       	pop	r0
    15d0:	0f 90       	pop	r0
    15d2:	0e 94 23 01 	call	0x246	; 0x246 <button_pushed>
    15d6:	8f 3f       	cpi	r24, 0xFF	; 255
    15d8:	e1 f3       	breq	.-8      	; 0x15d2 <handle_game_over+0x74>
		; // wait until a button has been pushed
	}
	clear_terminal(); 
    15da:	0e 94 ef 10 	call	0x21de	; 0x21de <clear_terminal>
    15de:	08 95       	ret

000015e0 <main>:

/////////////////////////////// main //////////////////////////////////
int main(void) {
	// Setup hardware and call backs. This will turn on 
	// interrupts.
	initialise_hardware();
    15e0:	0e 94 23 09 	call	0x1246	; 0x1246 <initialise_hardware>
	DDRA = 0xff;
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	81 b9       	out	0x01, r24	; 1
	DDRD |= (1<<2);
    15e8:	52 9a       	sbi	0x0a, 2	; 10
	DDRD &= ~(1<<3); 
    15ea:	53 98       	cbi	0x0a, 3	; 10
	
	// Show the splash screen message. Returns when display
	// is complete
	splash_screen();
    15ec:	0e 94 32 09 	call	0x1264	; 0x1264 <splash_screen>
	
	while(1) {
		//  If next game is to be loaded from EEPROM, set up from EEPROM
		//  Else make new game as normal
		if(load_EEPROM_data_on_next_game){new_game_from_EEPROM();}
    15f0:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <load_EEPROM_data_on_next_game>
    15f4:	88 23       	and	r24, r24
    15f6:	19 f0       	breq	.+6      	; 0x15fe <main+0x1e>
    15f8:	0e 94 18 04 	call	0x830	; 0x830 <new_game_from_EEPROM>
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <main+0x22>
			else{new_game();}
    15fe:	0e 94 98 09 	call	0x1330	; 0x1330 <new_game>
		play_game();
    1602:	0e 94 a3 09 	call	0x1346	; 0x1346 <play_game>
		
		//  if 1, then no game_over handling should occur because game is reset, not lost. 
		if(!(load_EEPROM_data_on_next_game)){handle_game_over();}
    1606:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <load_EEPROM_data_on_next_game>
    160a:	81 11       	cpse	r24, r1
    160c:	f1 cf       	rjmp	.-30     	; 0x15f0 <main+0x10>
    160e:	0e 94 af 0a 	call	0x155e	; 0x155e <handle_game_over>
    1612:	ee cf       	rjmp	.-36     	; 0x15f0 <main+0x10>

00001614 <get_rat_position>:
		(rat_y==0 && (y_position(new_pos) == BOARD_HEIGHT-1)) ||
		(rat_y == BOARD_HEIGHT-1 && (y_position(new_pos) == 0))){
			return 1; 
		}
	return 0; 
}
    1614:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    1618:	08 95       	ret

0000161a <set_rat_at_pos>:
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	c8 2f       	mov	r28, r24
    1620:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    1624:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    1628:	d8 2f       	mov	r29, r24
    162a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    162e:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    1632:	40 e0       	ldi	r20, 0x00	; 0
    1634:	6d 2f       	mov	r22, r29
    1636:	0e 94 ca 08 	call	0x1194	; 0x1194 <ledmatrix_update_pixel>
    163a:	c0 93 0f 03 	sts	0x030F, r28	; 0x80030f <rat_position>
    163e:	8c 2f       	mov	r24, r28
    1640:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    1644:	d8 2f       	mov	r29, r24
    1646:	8c 2f       	mov	r24, r28
    1648:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    164c:	43 e3       	ldi	r20, 0x33	; 51
    164e:	6d 2f       	mov	r22, r29
    1650:	0e 94 ca 08 	call	0x1194	; 0x1194 <ledmatrix_update_pixel>
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <is_item_at>:
    165a:	cf 93       	push	r28
    165c:	c8 2f       	mov	r28, r24
    165e:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <is_snake_at>
    1662:	81 11       	cpse	r24, r1
    1664:	0d c0       	rjmp	.+26     	; 0x1680 <is_item_at+0x26>
    1666:	8c 2f       	mov	r24, r28
    1668:	0e 94 67 07 	call	0xece	; 0xece <is_food_at>
    166c:	81 11       	cpse	r24, r1
    166e:	0a c0       	rjmp	.+20     	; 0x1684 <is_item_at+0x2a>
    1670:	8c 2f       	mov	r24, r28
    1672:	0e 94 5f 10 	call	0x20be	; 0x20be <is_superfood_at>
    1676:	91 e0       	ldi	r25, 0x01	; 1
    1678:	81 11       	cpse	r24, r1
    167a:	05 c0       	rjmp	.+10     	; 0x1686 <is_item_at+0x2c>
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <is_item_at+0x2c>
    1680:	91 e0       	ldi	r25, 0x01	; 1
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <is_item_at+0x2c>
    1684:	91 e0       	ldi	r25, 0x01	; 1
    1686:	89 2f       	mov	r24, r25
    1688:	cf 91       	pop	r28
    168a:	08 95       	ret

0000168c <move_rat>:
    168c:	1f 93       	push	r17
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	60 e0       	ldi	r22, 0x00	; 0
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    169a:	18 2f       	mov	r17, r24
    169c:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
    16a0:	83 70       	andi	r24, 0x03	; 3
    16a2:	90 78       	andi	r25, 0x80	; 128
    16a4:	99 23       	and	r25, r25
    16a6:	24 f4       	brge	.+8      	; 0x16b0 <move_rat+0x24>
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	8c 6f       	ori	r24, 0xFC	; 252
    16ac:	9f 6f       	ori	r25, 0xFF	; 255
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	c8 2f       	mov	r28, r24
    16b2:	d0 e0       	ldi	r29, 0x00	; 0
    16b4:	c1 30       	cpi	r28, 0x01	; 1
    16b6:	a9 f0       	breq	.+42     	; 0x16e2 <move_rat+0x56>
    16b8:	28 f0       	brcs	.+10     	; 0x16c4 <move_rat+0x38>
    16ba:	c2 30       	cpi	r28, 0x02	; 2
    16bc:	09 f1       	breq	.+66     	; 0x1700 <move_rat+0x74>
    16be:	c3 30       	cpi	r28, 0x03	; 3
    16c0:	71 f1       	breq	.+92     	; 0x171e <move_rat+0x92>
    16c2:	3b c0       	rjmp	.+118    	; 0x173a <move_rat+0xae>
    16c4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    16c8:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    16cc:	c8 2f       	mov	r28, r24
    16ce:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    16d2:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	6c 0f       	add	r22, r28
    16da:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    16de:	18 2f       	mov	r17, r24
    16e0:	2c c0       	rjmp	.+88     	; 0x173a <move_rat+0xae>
    16e2:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    16e6:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    16ea:	c8 2f       	mov	r28, r24
    16ec:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    16f0:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    16f4:	6f ef       	ldi	r22, 0xFF	; 255
    16f6:	6c 0f       	add	r22, r28
    16f8:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    16fc:	18 2f       	mov	r17, r24
    16fe:	1d c0       	rjmp	.+58     	; 0x173a <move_rat+0xae>
    1700:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    1704:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    1708:	c8 2f       	mov	r28, r24
    170a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    170e:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    1712:	6c 2f       	mov	r22, r28
    1714:	8f 5f       	subi	r24, 0xFF	; 255
    1716:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    171a:	18 2f       	mov	r17, r24
    171c:	0e c0       	rjmp	.+28     	; 0x173a <move_rat+0xae>
    171e:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    1722:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    1726:	c8 2f       	mov	r28, r24
    1728:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    172c:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    1730:	6c 2f       	mov	r22, r28
    1732:	81 50       	subi	r24, 0x01	; 1
    1734:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    1738:	18 2f       	mov	r17, r24
    173a:	df 5f       	subi	r29, 0xFF	; 255
    173c:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
    1740:	83 70       	andi	r24, 0x03	; 3
    1742:	90 78       	andi	r25, 0x80	; 128
    1744:	99 23       	and	r25, r25
    1746:	24 f4       	brge	.+8      	; 0x1750 <move_rat+0xc4>
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	8c 6f       	ori	r24, 0xFC	; 252
    174c:	9f 6f       	ori	r25, 0xFF	; 255
    174e:	01 96       	adiw	r24, 0x01	; 1
    1750:	c8 2f       	mov	r28, r24
    1752:	81 2f       	mov	r24, r17
    1754:	0e 94 2d 0b 	call	0x165a	; 0x165a <is_item_at>
    1758:	81 11       	cpse	r24, r1
    175a:	ac cf       	rjmp	.-168    	; 0x16b4 <move_rat+0x28>
    175c:	d5 30       	cpi	r29, 0x05	; 5
    175e:	18 f4       	brcc	.+6      	; 0x1766 <move_rat+0xda>
    1760:	81 2f       	mov	r24, r17
    1762:	0e 94 0d 0b 	call	0x161a	; 0x161a <set_rat_at_pos>
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	08 95       	ret

0000176e <is_rat_at>:

uint8_t is_rat_at(PosnType pos){
	return (rat_position == pos);
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	20 91 0f 03 	lds	r18, 0x030F	; 0x80030f <rat_position>
    1774:	28 13       	cpse	r18, r24
    1776:	90 e0       	ldi	r25, 0x00	; 0
}
    1778:	89 2f       	mov	r24, r25
    177a:	08 95       	ret

0000177c <add_new_rat_position>:

void add_new_rat_position(void){
    177c:	1f 93       	push	r17
    177e:	cf 93       	push	r28
    1780:	df 93       	push	r29
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    1782:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
    1786:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    1788:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
        test_position = position(x,y);
    178c:	bc 01       	movw	r22, r24
    178e:	67 70       	andi	r22, 0x07	; 7
    1790:	70 78       	andi	r23, 0x80	; 128
    1792:	77 23       	and	r23, r23
    1794:	34 f4       	brge	.+12     	; 0x17a2 <add_new_rat_position+0x26>
    1796:	61 50       	subi	r22, 0x01	; 1
    1798:	71 09       	sbc	r23, r1
    179a:	68 6f       	ori	r22, 0xF8	; 248
    179c:	7f 6f       	ori	r23, 0xFF	; 255
    179e:	6f 5f       	subi	r22, 0xFF	; 255
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	ce 01       	movw	r24, r28
    17a4:	8f 70       	andi	r24, 0x0F	; 15
    17a6:	90 78       	andi	r25, 0x80	; 128
    17a8:	99 23       	and	r25, r25
    17aa:	24 f4       	brge	.+8      	; 0x17b4 <add_new_rat_position+0x38>
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	80 6f       	ori	r24, 0xF0	; 240
    17b0:	9f 6f       	ori	r25, 0xFF	; 255
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    17b8:	c8 2f       	mov	r28, r24
    17ba:	13 e6       	ldi	r17, 0x63	; 99
    17bc:	1e c0       	rjmp	.+60     	; 0x17fa <add_new_rat_position+0x7e>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    17be:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
    17c2:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    17c4:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
        test_position = position(x,y);
    17c8:	bc 01       	movw	r22, r24
    17ca:	67 70       	andi	r22, 0x07	; 7
    17cc:	70 78       	andi	r23, 0x80	; 128
    17ce:	77 23       	and	r23, r23
    17d0:	34 f4       	brge	.+12     	; 0x17de <add_new_rat_position+0x62>
    17d2:	61 50       	subi	r22, 0x01	; 1
    17d4:	71 09       	sbc	r23, r1
    17d6:	68 6f       	ori	r22, 0xF8	; 248
    17d8:	7f 6f       	ori	r23, 0xFF	; 255
    17da:	6f 5f       	subi	r22, 0xFF	; 255
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	ce 01       	movw	r24, r28
    17e0:	8f 70       	andi	r24, 0x0F	; 15
    17e2:	90 78       	andi	r25, 0x80	; 128
    17e4:	99 23       	and	r25, r25
    17e6:	24 f4       	brge	.+8      	; 0x17f0 <add_new_rat_position+0x74>
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	80 6f       	ori	r24, 0xF0	; 240
    17ec:	9f 6f       	ori	r25, 0xFF	; 255
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    17f4:	c8 2f       	mov	r28, r24
    17f6:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    17f8:	91 f0       	breq	.+36     	; 0x181e <add_new_rat_position+0xa2>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    17fa:	8c 2f       	mov	r24, r28
    17fc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
        test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    1800:	81 11       	cpse	r24, r1
    1802:	dd cf       	rjmp	.-70     	; 0x17be <add_new_rat_position+0x42>
		(is_snake_at(test_position) || is_food_at(test_position)
    1804:	8c 2f       	mov	r24, r28
    1806:	0e 94 67 07 	call	0xece	; 0xece <is_food_at>
    180a:	81 11       	cpse	r24, r1
    180c:	d8 cf       	rjmp	.-80     	; 0x17be <add_new_rat_position+0x42>
		|| test_position == get_superfood_position() || test_position == get_rat_position()));
    180e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <get_superfood_position>
    1812:	8c 17       	cp	r24, r28
    1814:	a1 f2       	breq	.-88     	; 0x17be <add_new_rat_position+0x42>
    1816:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    181a:	8c 17       	cp	r24, r28
    181c:	81 f2       	breq	.-96     	; 0x17be <add_new_rat_position+0x42>
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	rat_position = test_position;
    181e:	c0 93 0f 03 	sts	0x030F, r28	; 0x80030f <rat_position>
	ledmatrix_update_pixel(x_position(rat_position), y_position(rat_position), COLOUR_ORANGE);
    1822:	8c 2f       	mov	r24, r28
    1824:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    1828:	c8 2f       	mov	r28, r24
    182a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <rat_position>
    182e:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    1832:	4c e3       	ldi	r20, 0x3C	; 60
    1834:	6c 2f       	mov	r22, r28
    1836:	0e 94 ca 08 	call	0x1194	; 0x1194 <ledmatrix_update_pixel>
}
    183a:	df 91       	pop	r29
    183c:	cf 91       	pop	r28
    183e:	1f 91       	pop	r17
    1840:	08 95       	ret

00001842 <is_time_to_move_rat>:

uint8_t is_time_to_move_rat(void){
	return ((get_clock_ticks() %RAT_WAIT_TIME) ==0);
    1842:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    1846:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RAT_WAIT_TIME>
    184a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RAT_WAIT_TIME+0x1>
    184e:	40 e0       	ldi	r20, 0x00	; 0
    1850:	50 e0       	ldi	r21, 0x00	; 0
    1852:	0e 94 80 13 	call	0x2700	; 0x2700 <__udivmodsi4>
    1856:	21 e0       	ldi	r18, 0x01	; 1
    1858:	67 2b       	or	r22, r23
    185a:	68 2b       	or	r22, r24
    185c:	69 2b       	or	r22, r25
    185e:	09 f0       	breq	.+2      	; 0x1862 <is_time_to_move_rat+0x20>
    1860:	20 e0       	ldi	r18, 0x00	; 0
}
    1862:	82 2f       	mov	r24, r18
    1864:	08 95       	ret

00001866 <init_score>:
// modules should call the functions below to modify/access the
// variable.
static uint32_t score;

void init_score(void) {
	score = 0;
    1866:	10 92 b6 02 	sts	0x02B6, r1	; 0x8002b6 <score>
    186a:	10 92 b7 02 	sts	0x02B7, r1	; 0x8002b7 <score+0x1>
    186e:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <score+0x2>
    1872:	10 92 b9 02 	sts	0x02B9, r1	; 0x8002b9 <score+0x3>
    1876:	08 95       	ret

00001878 <add_to_score>:
}

void add_to_score(uint16_t value) {
	score += value;
    1878:	40 91 b6 02 	lds	r20, 0x02B6	; 0x8002b6 <score>
    187c:	50 91 b7 02 	lds	r21, 0x02B7	; 0x8002b7 <score+0x1>
    1880:	60 91 b8 02 	lds	r22, 0x02B8	; 0x8002b8 <score+0x2>
    1884:	70 91 b9 02 	lds	r23, 0x02B9	; 0x8002b9 <score+0x3>
    1888:	48 0f       	add	r20, r24
    188a:	59 1f       	adc	r21, r25
    188c:	61 1d       	adc	r22, r1
    188e:	71 1d       	adc	r23, r1
    1890:	40 93 b6 02 	sts	0x02B6, r20	; 0x8002b6 <score>
    1894:	50 93 b7 02 	sts	0x02B7, r21	; 0x8002b7 <score+0x1>
    1898:	60 93 b8 02 	sts	0x02B8, r22	; 0x8002b8 <score+0x2>
    189c:	70 93 b9 02 	sts	0x02B9, r23	; 0x8002b9 <score+0x3>
    18a0:	08 95       	ret

000018a2 <get_score>:
}

uint32_t get_score(void) {
	return score;
    18a2:	60 91 b6 02 	lds	r22, 0x02B6	; 0x8002b6 <score>
    18a6:	70 91 b7 02 	lds	r23, 0x02B7	; 0x8002b7 <score+0x1>
    18aa:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <score+0x2>
    18ae:	90 91 b9 02 	lds	r25, 0x02B9	; 0x8002b9 <score+0x3>
}
    18b2:	08 95       	ret

000018b4 <set_score>:

void set_score(uint32_t new_score){
	score = new_score; 
    18b4:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <score>
    18b8:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <score+0x1>
    18bc:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <score+0x2>
    18c0:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <score+0x3>
    18c4:	08 95       	ret

000018c6 <set_scrolling_display_text>:
 * is called while the string is still being displayed.
 * We reset the pointers to ensure the next column to be displayed
 * comes from the first character of this string.
 */
void set_scrolling_display_text(char* string_to_display, PixelColour c) {
	colour = c;
    18c6:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <colour>
	display_string = string_to_display;
    18ca:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <display_string+0x1>
    18ce:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <display_string>
	next_col_ptr = 0;
    18d2:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <next_col_ptr+0x1>
    18d6:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <next_col_ptr>
	next_char_to_display = 0;
    18da:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <next_char_to_display+0x1>
    18de:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <next_char_to_display>
    18e2:	08 95       	ret

000018e4 <scroll_display>:
/*
 * Scroll the display. Should be called whenever the display
 * is to be scrolled. 
 * Returns 1 if still scrolling display.
 */
uint8_t scroll_display(void) {
    18e4:	0f 93       	push	r16
    18e6:	1f 93       	push	r17
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	28 97       	sbiw	r28, 0x08	; 8
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;

	if(next_col_ptr) {
    18fc:	e0 91 bf 02 	lds	r30, 0x02BF	; 0x8002bf <next_col_ptr>
    1900:	f0 91 c0 02 	lds	r31, 0x02C0	; 0x8002c0 <next_col_ptr+0x1>
    1904:	30 97       	sbiw	r30, 0x00	; 0
    1906:	81 f0       	breq	.+32     	; 0x1928 <scroll_display+0x44>
		/* We're currently outputting a character and next_col_ptr
		 * points to the display data for the next column. We
		 * extract that data from program memory.
		 */
		col_data = pgm_read_byte(next_col_ptr);
    1908:	14 91       	lpm	r17, Z

		if(col_data & 1) {
    190a:	10 ff       	sbrs	r17, 0
    190c:	06 c0       	rjmp	.+12     	; 0x191a <scroll_display+0x36>
			/* Least significant bit is set - this is the last
			 * column of this character
			 */
			next_col_ptr = 0;
    190e:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <next_col_ptr+0x1>
    1912:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1916:	00 e0       	ldi	r16, 0x00	; 0
    1918:	6b c0       	rjmp	.+214    	; 0x19f0 <scroll_display+0x10c>
			next_col_ptr = 0;
		} else {
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
    191a:	31 96       	adiw	r30, 0x01	; 1
    191c:	f0 93 c0 02 	sts	0x02C0, r31	; 0x8002c0 <next_col_ptr+0x1>
    1920:	e0 93 bf 02 	sts	0x02BF, r30	; 0x8002bf <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1924:	00 e0       	ldi	r16, 0x00	; 0
    1926:	64 c0       	rjmp	.+200    	; 0x19f0 <scroll_display+0x10c>
			/* This is not the last column of this character - make
			 * the pointer point to the data for the next column.
			 */
			next_col_ptr++;
		}
	} else if(next_char_to_display) {
    1928:	e0 91 bb 02 	lds	r30, 0x02BB	; 0x8002bb <next_char_to_display>
    192c:	f0 91 bc 02 	lds	r31, 0x02BC	; 0x8002bc <next_char_to_display+0x1>
    1930:	30 97       	sbiw	r30, 0x00	; 0
    1932:	09 f4       	brne	.+2      	; 0x1936 <scroll_display+0x52>
    1934:	49 c0       	rjmp	.+146    	; 0x19c8 <scroll_display+0xe4>
		 * the next character. We first get the next character to be 
		 * displayed and advance our next character pointer 
		 * (next_char_to_display) so that it points to the character 
		 * after.
		 */
		next_char = *(next_char_to_display++);
    1936:	cf 01       	movw	r24, r30
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <next_char_to_display+0x1>
    193e:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <next_char_to_display>
    1942:	e0 81       	ld	r30, Z
		if(next_char == 0) {
    1944:	e1 11       	cpse	r30, r1
    1946:	0a c0       	rjmp	.+20     	; 0x195c <scroll_display+0x78>
			/* We reached the null character at the end of the string.
			 * There is no next character, reset our pointer to 
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
    1948:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <next_char_to_display+0x1>
    194c:	10 92 bb 02 	sts	0x02BB, r1	; 0x8002bb <next_char_to_display>
			shift_countdown = 16;
    1950:	80 e1       	ldi	r24, 0x10	; 16
    1952:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <shift_countdown.1854>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    1956:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    1958:	10 e0       	ldi	r17, 0x00	; 0
    195a:	4a c0       	rjmp	.+148    	; 0x19f0 <scroll_display+0x10c>
			 * the next character and set our countdown until the 
			 * message disappears from the display.
			 */
			next_char_to_display = 0;
			shift_countdown = 16;
		} else if (next_char >= 'a' && next_char <= 'z') {
    195c:	8f e9       	ldi	r24, 0x9F	; 159
    195e:	8e 0f       	add	r24, r30
    1960:	8a 31       	cpi	r24, 0x1A	; 26
    1962:	70 f4       	brcc	.+28     	; 0x1980 <scroll_display+0x9c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	e8 5f       	subi	r30, 0xF8	; 248
    196c:	ff 4f       	sbci	r31, 0xFF	; 255
    196e:	85 91       	lpm	r24, Z+
    1970:	94 91       	lpm	r25, Z
    1972:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <next_col_ptr+0x1>
    1976:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    197a:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    197c:	10 e0       	ldi	r17, 0x00	; 0
    197e:	38 c0       	rjmp	.+112    	; 0x19f0 <scroll_display+0x10c>
			/* Character is a lower case letter - the next column to 
			 * be displayed will be the first column of the letter
			 * data for that letter
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
    1980:	8f eb       	ldi	r24, 0xBF	; 191
    1982:	8e 0f       	add	r24, r30
    1984:	8a 31       	cpi	r24, 0x1A	; 26
    1986:	70 f4       	brcc	.+28     	; 0x19a4 <scroll_display+0xc0>
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	ee 0f       	add	r30, r30
    198c:	ff 1f       	adc	r31, r31
    198e:	e8 5b       	subi	r30, 0xB8	; 184
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	85 91       	lpm	r24, Z+
    1994:	94 91       	lpm	r25, Z
    1996:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <next_col_ptr+0x1>
    199a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    199e:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19a0:	10 e0       	ldi	r17, 0x00	; 0
    19a2:	26 c0       	rjmp	.+76     	; 0x19f0 <scroll_display+0x10c>
			 */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'a']);
		} else if (next_char >= 'A' && next_char <= 'Z') {
			/* Upper case character */
			next_col_ptr = (const uint8_t*)pgm_read_word(&letters[next_char - 'A']);
		} else if (next_char >= '0' && next_char <= '9') {
    19a4:	80 ed       	ldi	r24, 0xD0	; 208
    19a6:	8e 0f       	add	r24, r30
    19a8:	8a 30       	cpi	r24, 0x0A	; 10
    19aa:	00 f5       	brcc	.+64     	; 0x19ec <scroll_display+0x108>
			/* Digit */
			next_col_ptr = (const uint8_t*)pgm_read_word(&numbers[next_char - '0']);
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	ea 5a       	subi	r30, 0xAA	; 170
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	85 91       	lpm	r24, Z+
    19b8:	94 91       	lpm	r25, Z
    19ba:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <next_col_ptr+0x1>
    19be:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <next_col_ptr>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19c2:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19c4:	10 e0       	ldi	r17, 0x00	; 0
    19c6:	14 c0       	rjmp	.+40     	; 0x19f0 <scroll_display+0x10c>
	} else {
		/* We're not outputting a column of dots and there is 
		 * no next character. Move on to the string that we
		 * have stored (if any).
		 */
		if(!display_string) {
    19c8:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <display_string>
    19cc:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <display_string+0x1>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19d0:	01 e0       	ldi	r16, 0x01	; 1
    19d2:	00 97       	sbiw	r24, 0x00	; 0
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <scroll_display+0xf4>
    19d6:	00 e0       	ldi	r16, 0x00	; 0
			/* May be finished - flag this and adjust below if we're still
			 * showing pixels
			 */
			finished = 1;
		}
		next_char_to_display = display_string;
    19d8:	90 93 bc 02 	sts	0x02BC, r25	; 0x8002bc <next_char_to_display+0x1>
    19dc:	80 93 bb 02 	sts	0x02BB, r24	; 0x8002bb <next_char_to_display>
		display_string = 0;
    19e0:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <display_string+0x1>
    19e4:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <display_string>
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19e8:	10 e0       	ldi	r17, 0x00	; 0
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <scroll_display+0x10c>
uint8_t scroll_display(void) {
	static uint8_t shift_countdown = 0;
	uint8_t i;
	uint8_t col_data;
	char next_char;
	uint8_t finished = 0;
    19ec:	00 e0       	ldi	r16, 0x00	; 0
	/* Data to be displayed in the next column - by 
	 * default we show a blank column. Bit 7 of this
	 * column data corresponds to row 7 of the display
	 * etc.
	 */
	col_data = 0;
    19ee:	10 e0       	ldi	r17, 0x00	; 0
	/* Shift the current display one pixel to the left and insert the 
	 * new column data at column 15.
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
    19f0:	0e 94 06 09 	call	0x120c	; 0x120c <ledmatrix_shift_display_left>
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
			column_colour_data[i] = colour;
    19f4:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colour>
    19f8:	fe 01       	movw	r30, r28
    19fa:	38 96       	adiw	r30, 0x08	; 8
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
		// If the relevant font bit is set, we make this a red pixel, otherwise blank
		if(col_data & 0x80) {
    1a00:	11 23       	and	r17, r17
    1a02:	14 f4       	brge	.+4      	; 0x1a08 <scroll_display+0x124>
			column_colour_data[i] = colour;
    1a04:	20 83       	st	Z, r18
    1a06:	01 c0       	rjmp	.+2      	; 0x1a0a <scroll_display+0x126>
		} else {
			column_colour_data[i] = 0;
    1a08:	10 82       	st	Z, r1
		}
		col_data <<= 1;
    1a0a:	11 0f       	add	r17, r17
    1a0c:	31 97       	sbiw	r30, 0x01	; 1
	 * Adjust our "finished" variable if we've finished scrolling the
	 * message off the display
	 */
	ledmatrix_shift_display_left();
	MatrixColumn column_colour_data;
	for(i=7; i>=1; i--) {
    1a0e:	e8 17       	cp	r30, r24
    1a10:	f9 07       	cpc	r31, r25
    1a12:	b1 f7       	brne	.-20     	; 0x1a00 <scroll_display+0x11c>
		} else {
			column_colour_data[i] = 0;
		}
		col_data <<= 1;
	}
	column_colour_data[0] = 0;
    1a14:	19 82       	std	Y+1, r1	; 0x01
	ledmatrix_update_column(15, column_colour_data);
    1a16:	be 01       	movw	r22, r28
    1a18:	6f 5f       	subi	r22, 0xFF	; 255
    1a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1c:	8f e0       	ldi	r24, 0x0F	; 15
    1a1e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <ledmatrix_update_column>
	if(shift_countdown > 0) {
    1a22:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <shift_countdown.1854>
    1a26:	88 23       	and	r24, r24
    1a28:	89 f0       	breq	.+34     	; 0x1a4c <scroll_display+0x168>
		shift_countdown--;
    1a2a:	81 50       	subi	r24, 0x01	; 1
    1a2c:	80 93 ba 02 	sts	0x02BA, r24	; 0x8002ba <shift_countdown.1854>
	}
	finished = finished && (shift_countdown == 0);
    1a30:	00 23       	and	r16, r16
    1a32:	11 f0       	breq	.+4      	; 0x1a38 <scroll_display+0x154>
    1a34:	88 23       	and	r24, r24
    1a36:	11 f0       	breq	.+4      	; 0x1a3c <scroll_display+0x158>
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <scroll_display+0x15e>
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <scroll_display+0x15e>
    1a40:	91 e0       	ldi	r25, 0x01	; 1
	return !finished;
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	99 23       	and	r25, r25
    1a46:	29 f0       	breq	.+10     	; 0x1a52 <scroll_display+0x16e>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	03 c0       	rjmp	.+6      	; 0x1a52 <scroll_display+0x16e>
	column_colour_data[0] = 0;
	ledmatrix_update_column(15, column_colour_data);
	if(shift_countdown > 0) {
		shift_countdown--;
	}
	finished = finished && (shift_countdown == 0);
    1a4c:	00 23       	and	r16, r16
    1a4e:	a1 f3       	breq	.-24     	; 0x1a38 <scroll_display+0x154>
    1a50:	f7 cf       	rjmp	.-18     	; 0x1a40 <scroll_display+0x15c>
	return !finished;
}
    1a52:	28 96       	adiw	r28, 0x08	; 8
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	08 95       	ret

00001a68 <uart_put_char>:
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
	bytes_in_input_buffer = 0;
}

static int uart_put_char(char c, FILE* stream) {
    1a68:	cf 93       	push	r28
    1a6a:	c8 2f       	mov	r28, r24
	/* Add the character to the buffer for transmission (if there 
	 * is space to do so). If not we wait until the buffer has space.
	 * If the character is \n, we output \r (carriage return)
	 * also.
	*/
	if(c == '\n') {
    1a6c:	8a 30       	cpi	r24, 0x0A	; 10
    1a6e:	19 f4       	brne	.+6      	; 0x1a76 <uart_put_char+0xe>
		uart_put_char('\r', stream);
    1a70:	8d e0       	ldi	r24, 0x0D	; 13
    1a72:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <uart_put_char>
	 * never be emptied if interrupts are disabled. If the buffer is full
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
    1a76:	9f b7       	in	r25, 0x3f	; 63
    1a78:	90 78       	andi	r25, 0x80	; 128
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <uart_put_char+0x18>
		if(!interrupts_enabled) {
    1a7c:	99 23       	and	r25, r25
    1a7e:	29 f1       	breq	.+74     	; 0x1aca <uart_put_char+0x62>
	 * and interrupts are enabled then we loop until the buffer has 
	 * enough space. The bytes_in_buffer variable will get modified by the
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
    1a80:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1a84:	8f 3f       	cpi	r24, 0xFF	; 255
    1a86:	d1 f3       	breq	.-12     	; 0x1a7c <uart_put_char+0x14>
	 * NOTE: we disable interrupts before modifying the buffer. This
	 * prevents the ISR from modifying the buffer at the same time.
	 * We reenable them if they were enabled when we entered the
	 * function.
	*/	
	cli();
    1a88:	f8 94       	cli
	out_buffer[out_insert_pos++] = c;
    1a8a:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <out_insert_pos>
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	8e 0f       	add	r24, r30
    1a92:	80 93 10 03 	sts	0x0310, r24	; 0x800310 <out_insert_pos>
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	ee 5e       	subi	r30, 0xEE	; 238
    1a9a:	fc 4f       	sbci	r31, 0xFC	; 252
    1a9c:	c0 83       	st	Z, r28
	bytes_in_out_buffer++;
    1a9e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1aa2:	8f 5f       	subi	r24, 0xFF	; 255
    1aa4:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <bytes_in_out_buffer>
	if(out_insert_pos == OUTPUT_BUFFER_SIZE) {
    1aa8:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <out_insert_pos>
    1aac:	8f 3f       	cpi	r24, 0xFF	; 255
    1aae:	11 f4       	brne	.+4      	; 0x1ab4 <uart_put_char+0x4c>
		/* Wrap around buffer pointer if necessary */
		out_insert_pos = 0;
    1ab0:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <out_insert_pos>
	}
	/* Reenable interrupts (UDR Empty interrupt may have been
	 * disabled) - we ensure it is now enabled so that it will
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
    1ab4:	e1 ec       	ldi	r30, 0xC1	; 193
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 62       	ori	r24, 0x20	; 32
    1abc:	80 83       	st	Z, r24
	if(interrupts_enabled) {
    1abe:	99 23       	and	r25, r25
    1ac0:	39 f0       	breq	.+14     	; 0x1ad0 <uart_put_char+0x68>
		sei();
    1ac2:	78 94       	sei
	}
	return 0;
    1ac4:	80 e0       	ldi	r24, 0x00	; 0
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	05 c0       	rjmp	.+10     	; 0x1ad4 <uart_put_char+0x6c>
	 * ISR which extracts bytes from the buffer.
	*/
	interrupts_enabled = bit_is_set(SREG, SREG_I);
	while(bytes_in_out_buffer >= OUTPUT_BUFFER_SIZE) {
		if(!interrupts_enabled) {
			return 1;
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 c0       	rjmp	.+4      	; 0x1ad4 <uart_put_char+0x6c>
	 * fire and deal with the next character in the buffer. */
	UCSR0B |= (1 << UDRIE0);
	if(interrupts_enabled) {
		sei();
	}
	return 0;
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
}
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <uart_get_char>:

int uart_get_char(FILE* stream) {
	/* Wait until we've received a character */
	while(bytes_in_input_buffer == 0) {
    1ad8:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1adc:	88 23       	and	r24, r24
    1ade:	e1 f3       	breq	.-8      	; 0x1ad8 <uart_get_char>
	 * buffer. We reenable interrupts if they were on.
	 * The pending character is the one which is byte_in_input_buffer
	 * characters before the insert position (taking into account
	 * that we may need to wrap around).
	 */
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
    1ae0:	2f b7       	in	r18, 0x3f	; 63
    1ae2:	20 78       	andi	r18, 0x80	; 128
	cli();
    1ae4:	f8 94       	cli
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
    1ae6:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <input_insert_pos>
    1aea:	30 91 23 04 	lds	r19, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	83 1b       	sub	r24, r19
    1af2:	91 09       	sbc	r25, r1
    1af4:	5a f4       	brpl	.+22     	; 0x1b0c <uart_get_char+0x34>
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1af6:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <input_insert_pos>
    1afa:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <bytes_in_input_buffer>
				+ INPUT_BUFFER_SIZE];
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	e8 1b       	sub	r30, r24
    1b02:	f1 09       	sbc	r31, r1
	uint8_t interrupts_enabled = bit_is_set(SREG, SREG_I);
	cli();
	char c;
	if(input_insert_pos - bytes_in_input_buffer < 0) {
		/* Need to wrap around */
		c = input_buffer[input_insert_pos - bytes_in_input_buffer
    1b04:	ee 5d       	subi	r30, 0xDE	; 222
    1b06:	fb 4f       	sbci	r31, 0xFB	; 251
    1b08:	80 81       	ld	r24, Z
    1b0a:	0a c0       	rjmp	.+20     	; 0x1b20 <uart_get_char+0x48>
				+ INPUT_BUFFER_SIZE];
	} else {
		c = input_buffer[input_insert_pos - bytes_in_input_buffer];
    1b0c:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <input_insert_pos>
    1b10:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	e8 1b       	sub	r30, r24
    1b18:	f1 09       	sbc	r31, r1
    1b1a:	ee 5e       	subi	r30, 0xEE	; 238
    1b1c:	fb 4f       	sbci	r31, 0xFB	; 251
    1b1e:	80 81       	ld	r24, Z
	}
	
	/* Decrement our count of bytes in the input buffer */
	bytes_in_input_buffer--;
    1b20:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1b24:	91 50       	subi	r25, 0x01	; 1
    1b26:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <bytes_in_input_buffer>
	if(interrupts_enabled) {
    1b2a:	22 23       	and	r18, r18
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <uart_get_char+0x58>
		sei();
    1b2e:	78 94       	sei
	}	
	return c;
}
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	08 95       	ret

00001b34 <init_serial_stdio>:
void init_serial_stdio(long baudrate, int8_t echo) {
	uint16_t ubrr;
	/*
	 * Initialise our buffers
	*/
	out_insert_pos = 0;
    1b34:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <out_insert_pos>
	bytes_in_out_buffer = 0;
    1b38:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <bytes_in_out_buffer>
	input_insert_pos = 0;
    1b3c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1b40:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <bytes_in_input_buffer>
	input_overrun = 0;
    1b44:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <input_overrun>
	
	/*
	 * Record whether we're going to echo characters or not
	*/
	do_echo = echo;
    1b48:	40 93 c1 02 	sts	0x02C1, r20	; 0x8002c1 <do_echo>
	/* Configure the serial port baud rate */
	/* (This differs from the datasheet formula so that we get 
	 * rounding to the nearest integer while using integer division
	 * (which truncates)).
	*/
	ubrr = ((SYSCLK / (8 * baudrate)) + 1)/2 - 1;
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	aa 1f       	adc	r26, r26
    1b56:	bb 1f       	adc	r27, r27
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	aa 1f       	adc	r26, r26
    1b5e:	bb 1f       	adc	r27, r27
    1b60:	9c 01       	movw	r18, r24
    1b62:	ad 01       	movw	r20, r26
    1b64:	22 0f       	add	r18, r18
    1b66:	33 1f       	adc	r19, r19
    1b68:	44 1f       	adc	r20, r20
    1b6a:	55 1f       	adc	r21, r21
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	72 e1       	ldi	r23, 0x12	; 18
    1b70:	8a e7       	ldi	r24, 0x7A	; 122
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 a2 13 	call	0x2744	; 0x2744 <__divmodsi4>
    1b78:	ba 01       	movw	r22, r20
    1b7a:	a9 01       	movw	r20, r18
    1b7c:	4f 5f       	subi	r20, 0xFF	; 255
    1b7e:	5f 4f       	sbci	r21, 0xFF	; 255
    1b80:	6f 4f       	sbci	r22, 0xFF	; 255
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	db 01       	movw	r26, r22
    1b86:	ca 01       	movw	r24, r20
    1b88:	1a f4       	brpl	.+6      	; 0x1b90 <init_serial_stdio+0x5c>
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	a1 1d       	adc	r26, r1
    1b8e:	b1 1d       	adc	r27, r1
    1b90:	b5 95       	asr	r27
    1b92:	a7 95       	ror	r26
    1b94:	97 95       	ror	r25
    1b96:	87 95       	ror	r24
    1b98:	01 97       	sbiw	r24, 0x01	; 1
	UBRR0 = ubrr;
    1b9a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1b9e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 * the UDR empty interrupt here (we wait until we've got a
	 * character to transmit).
	 * NOTE: Interrupts must be enabled globally for this
	 * library to work, but we do not do this here.
	*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1ba2:	e1 ec       	ldi	r30, 0xC1	; 193
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	88 e1       	ldi	r24, 0x18	; 24
    1ba8:	80 83       	st	Z, r24
	
	/*
	 * Enable receive complete interrupt 
	*/
	UCSR0B  |= (1 <<RXCIE0);
    1baa:	80 81       	ld	r24, Z
    1bac:	80 68       	ori	r24, 0x80	; 128
    1bae:	80 83       	st	Z, r24

	/* Set up our stream so the put and get functions below are used 
	 * to write/read characters via the serial port when we use
	 * stdio functions
	*/
	stdout = &myStream;
    1bb0:	e6 e2       	ldi	r30, 0x26	; 38
    1bb2:	f4 e0       	ldi	r31, 0x04	; 4
    1bb4:	8f e0       	ldi	r24, 0x0F	; 15
    1bb6:	91 e0       	ldi	r25, 0x01	; 1
    1bb8:	93 83       	std	Z+3, r25	; 0x03
    1bba:	82 83       	std	Z+2, r24	; 0x02
	stdin = &myStream;
    1bbc:	91 83       	std	Z+1, r25	; 0x01
    1bbe:	80 83       	st	Z, r24
    1bc0:	08 95       	ret

00001bc2 <serial_input_available>:
}

int8_t serial_input_available(void) {
	return (bytes_in_input_buffer != 0);
    1bc2:	90 91 23 04 	lds	r25, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	91 11       	cpse	r25, r1
    1bca:	01 c0       	rjmp	.+2      	; 0x1bce <serial_input_available+0xc>
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
}
    1bce:	08 95       	ret

00001bd0 <clear_serial_input_buffer>:

void clear_serial_input_buffer(void) {
	/* Just adjust our buffer data so it looks empty */
	input_insert_pos = 0;
    1bd0:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <input_insert_pos>
	bytes_in_input_buffer = 0;
    1bd4:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <bytes_in_input_buffer>
    1bd8:	08 95       	ret

00001bda <__vector_21>:
/*
 * Define the interrupt handler for UART Data Register Empty (i.e. 
 * another character can be taken from our buffer and written out)
 */
ISR(USART0_UDRE_vect) 
{ if (1){
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	2f 93       	push	r18
    1be6:	8f 93       	push	r24
    1be8:	9f 93       	push	r25
    1bea:	ef 93       	push	r30
    1bec:	ff 93       	push	r31
	/* Check if we have data in our buffer */
	if(bytes_in_out_buffer > 0) {
    1bee:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1bf2:	88 23       	and	r24, r24
    1bf4:	29 f1       	breq	.+74     	; 0x1c40 <__vector_21+0x66>
		 * one which is "bytes_in_buffer" characters before the 
		 * insert_pos (taking into account that we may 
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
    1bf6:	80 91 10 03 	lds	r24, 0x0310	; 0x800310 <out_insert_pos>
    1bfa:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	82 1b       	sub	r24, r18
    1c02:	91 09       	sbc	r25, r1
    1c04:	5a f4       	brpl	.+22     	; 0x1c1c <__vector_21+0x42>
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c06:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <out_insert_pos>
    1c0a:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
				+ OUTPUT_BUFFER_SIZE];
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	e8 1b       	sub	r30, r24
    1c12:	f1 09       	sbc	r31, r1
		 * need to wrap around to the end of the buffer).
		 */
		char c;
		if(out_insert_pos - bytes_in_out_buffer < 0) {
			/* Need to wrap around */
			c = out_buffer[out_insert_pos - bytes_in_out_buffer
    1c14:	ef 5e       	subi	r30, 0xEF	; 239
    1c16:	fb 4f       	sbci	r31, 0xFB	; 251
    1c18:	90 81       	ld	r25, Z
    1c1a:	0a c0       	rjmp	.+20     	; 0x1c30 <__vector_21+0x56>
				+ OUTPUT_BUFFER_SIZE];
		} else {
			c = out_buffer[out_insert_pos - bytes_in_out_buffer];
    1c1c:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <out_insert_pos>
    1c20:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	e8 1b       	sub	r30, r24
    1c28:	f1 09       	sbc	r31, r1
    1c2a:	ee 5e       	subi	r30, 0xEE	; 238
    1c2c:	fc 4f       	sbci	r31, 0xFC	; 252
    1c2e:	90 81       	ld	r25, Z
		}
		/* Decrement our count of the number of bytes in the 
		 * buffer 
		 */
		bytes_in_out_buffer--;
    1c30:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1c34:	81 50       	subi	r24, 0x01	; 1
    1c36:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <bytes_in_out_buffer>
		
		/* Output the character via the UART */
		UDR0 = c;
    1c3a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1c3e:	05 c0       	rjmp	.+10     	; 0x1c4a <__vector_21+0x70>
		 * Register Empty interrupt because otherwise it 
		 * will trigger again immediately this ISR exits. 
		 * The interrupt is reenabled when a character is
		 * placed in the buffer.
		 */
		UCSR0B &= ~(1<<UDRIE0);
    1c40:	e1 ec       	ldi	r30, 0xC1	; 193
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8f 7d       	andi	r24, 0xDF	; 223
    1c48:	80 83       	st	Z, r24
	}
		}else{}
		
}
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	9f 91       	pop	r25
    1c50:	8f 91       	pop	r24
    1c52:	2f 91       	pop	r18
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_20>:
 * we can read a character. The character is read and placed in
 * the input buffer.
 */

ISR(USART0_RX_vect) 
{
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	2f 93       	push	r18
    1c6a:	3f 93       	push	r19
    1c6c:	4f 93       	push	r20
    1c6e:	5f 93       	push	r21
    1c70:	6f 93       	push	r22
    1c72:	7f 93       	push	r23
    1c74:	8f 93       	push	r24
    1c76:	9f 93       	push	r25
    1c78:	af 93       	push	r26
    1c7a:	bf 93       	push	r27
    1c7c:	cf 93       	push	r28
    1c7e:	ef 93       	push	r30
    1c80:	ff 93       	push	r31
	/* Read the character - we ignore the possibility of overrun. */
	char c;
	c = UDR0;
    1c82:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		
	if(do_echo && bytes_in_out_buffer < OUTPUT_BUFFER_SIZE) {
    1c86:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <do_echo>
    1c8a:	88 23       	and	r24, r24
    1c8c:	49 f0       	breq	.+18     	; 0x1ca0 <__vector_20+0x42>
    1c8e:	80 91 11 03 	lds	r24, 0x0311	; 0x800311 <bytes_in_out_buffer>
    1c92:	8f 3f       	cpi	r24, 0xFF	; 255
    1c94:	29 f0       	breq	.+10     	; 0x1ca0 <__vector_20+0x42>
		/* If echoing is enabled and there is output buffer
		 * space, echo the received character back to the UART.
		 * (If there is no output buffer space, characters
		 * will be lost.)
		 */
		uart_put_char(c, 0);
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	8c 2f       	mov	r24, r28
    1c9c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <uart_put_char>
	 * Check if we have space in our buffer. If not, set the overrun
	 * flag and throw away the character. (We never clear the 
	 * overrun flag - it's up to the programmer to check/clear
	 * this flag if desired.)
	 */
	if(bytes_in_input_buffer >= INPUT_BUFFER_SIZE) {
    1ca0:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1ca4:	80 31       	cpi	r24, 0x10	; 16
    1ca6:	20 f0       	brcs	.+8      	; 0x1cb0 <__vector_20+0x52>
		input_overrun = 1;
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <input_overrun>
    1cae:	18 c0       	rjmp	.+48     	; 0x1ce0 <__vector_20+0x82>
	} else {
		/* If the character is a carriage return, turn it into a
		 * linefeed 
		*/
		if (c == '\r') {
    1cb0:	cd 30       	cpi	r28, 0x0D	; 13
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <__vector_20+0x58>
			c = '\n';
    1cb4:	ca e0       	ldi	r28, 0x0A	; 10
		}
		
		/* 
		 * There is room in the input buffer 
		 */
		input_buffer[input_insert_pos++] = c;
    1cb6:	e0 91 11 04 	lds	r30, 0x0411	; 0x800411 <input_insert_pos>
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	8e 0f       	add	r24, r30
    1cbe:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <input_insert_pos>
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	ee 5e       	subi	r30, 0xEE	; 238
    1cc6:	fb 4f       	sbci	r31, 0xFB	; 251
    1cc8:	c0 83       	st	Z, r28
		bytes_in_input_buffer++;
    1cca:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <bytes_in_input_buffer>
    1cce:	8f 5f       	subi	r24, 0xFF	; 255
    1cd0:	80 93 23 04 	sts	0x0423, r24	; 0x800423 <bytes_in_input_buffer>
		if(input_insert_pos == INPUT_BUFFER_SIZE) {
    1cd4:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <input_insert_pos>
    1cd8:	80 31       	cpi	r24, 0x10	; 16
    1cda:	11 f4       	brne	.+4      	; 0x1ce0 <__vector_20+0x82>
			/* Wrap around buffer pointer if necessary */
			input_insert_pos = 0;
    1cdc:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <input_insert_pos>
		}
	}
}
    1ce0:	ff 91       	pop	r31
    1ce2:	ef 91       	pop	r30
    1ce4:	cf 91       	pop	r28
    1ce6:	bf 91       	pop	r27
    1ce8:	af 91       	pop	r26
    1cea:	9f 91       	pop	r25
    1cec:	8f 91       	pop	r24
    1cee:	7f 91       	pop	r23
    1cf0:	6f 91       	pop	r22
    1cf2:	5f 91       	pop	r21
    1cf4:	4f 91       	pop	r20
    1cf6:	3f 91       	pop	r19
    1cf8:	2f 91       	pop	r18
    1cfa:	0f 90       	pop	r0
    1cfc:	0f be       	out	0x3f, r0	; 63
    1cfe:	0f 90       	pop	r0
    1d00:	1f 90       	pop	r1
    1d02:	18 95       	reti

00001d04 <init_snake>:
/* FUNCTIONS */
/* init_snake()
**
** Resets our snake to the initial configuration
*/
void init_snake(void) {
    1d04:	0f 93       	push	r16
    1d06:	1f 93       	push	r17
    1d08:	cf 93       	push	r28
	/* Snake starts at (1,1) and finishes at (2,1) and
	** has an initial length of 2. These positions will
	** be stored at indexes 0 and 1 in the array. Snake 
	** is initially moving to the right.
	*/
	snakeLength = 2;
    1d0a:	82 e0       	ldi	r24, 0x02	; 2
    1d0c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <snakeLength>
	snakeTailIndex = 0;
    1d10:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <snakeTailIndex>
	snakeHeadIndex = 1;
    1d14:	c1 e0       	ldi	r28, 0x01	; 1
    1d16:	c0 93 c5 02 	sts	0x02C5, r28	; 0x8002c5 <snakeHeadIndex>
	snakePositions[0] = position(1,1);
    1d1a:	61 e0       	ldi	r22, 0x01	; 1
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    1d22:	07 ec       	ldi	r16, 0xC7	; 199
    1d24:	12 e0       	ldi	r17, 0x02	; 2
    1d26:	f8 01       	movw	r30, r16
    1d28:	80 83       	st	Z, r24
	snakePositions[1] = position(2,1);
    1d2a:	61 e0       	ldi	r22, 0x01	; 1
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    1d32:	f8 01       	movw	r30, r16
    1d34:	81 83       	std	Z+1, r24	; 0x01
	curSnakeDirn = SNAKE_RIGHT;
    1d36:	c0 93 c3 02 	sts	0x02C3, r28	; 0x8002c3 <curSnakeDirn>
    nextSnakeDirn = SNAKE_RIGHT;
    1d3a:	c0 93 c2 02 	sts	0x02C2, r28	; 0x8002c2 <nextSnakeDirn>
}
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <get_snake_head_position>:
/* get_snake_head_position()
**
** Returns the position of the head of the snake. 
*/
PosnType get_snake_head_position(void) {
    return snakePositions[snakeHeadIndex];
    1d46:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <snakeHeadIndex>
    1d4a:	0e 2e       	mov	r0, r30
    1d4c:	00 0c       	add	r0, r0
    1d4e:	ff 0b       	sbc	r31, r31
    1d50:	e9 53       	subi	r30, 0x39	; 57
    1d52:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d54:	80 81       	ld	r24, Z
    1d56:	08 95       	ret

00001d58 <reset_snake_drn>:
/* get_snake_tail_position()
**
** Returns the position of the tail of the snake.
*/
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
    1d58:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <curSnakeDirn>
	nextSnakeDirn = dirn;
    1d5c:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <nextSnakeDirn>
    1d60:	08 95       	ret

00001d62 <get_snake_tail_position>:
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1d62:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <snakeTailIndex>
    1d66:	0e 2e       	mov	r0, r30
    1d68:	00 0c       	add	r0, r0
    1d6a:	ff 0b       	sbc	r31, r31
    1d6c:	e9 53       	subi	r30, 0x39	; 57
    1d6e:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d70:	80 81       	ld	r24, Z
    1d72:	08 95       	ret

00001d74 <get_snake_length>:
**
** Returns the length of the snake.
*/
uint8_t get_snake_length(void) {
	return snakeLength;
}
    1d74:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <snakeLength>
    1d78:	08 95       	ret

00001d7a <get_snake_position_at_index>:

PosnType get_snake_position_at_index(uint8_t index) {
	return snakePositions[index];
    1d7a:	e8 2f       	mov	r30, r24
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	e9 53       	subi	r30, 0x39	; 57
    1d80:	fd 4f       	sbci	r31, 0xFD	; 253
}
    1d82:	80 81       	ld	r24, Z
    1d84:	08 95       	ret

00001d86 <set_snake_length>:
void set_snake_length(uint8_t length){
	snakeLength = length;
    1d86:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <snakeLength>
    1d8a:	08 95       	ret

00001d8c <set_snake_position_in_array>:
}

void set_snake_position_in_array(PosnType pos, uint8_t index){
	snakePositions[index] = pos; 
    1d8c:	e6 2f       	mov	r30, r22
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	e9 53       	subi	r30, 0x39	; 57
    1d92:	fd 4f       	sbci	r31, 0xFD	; 253
    1d94:	80 83       	st	Z, r24
    1d96:	08 95       	ret

00001d98 <set_snake_head_pointer>:
}

void set_snake_head_pointer(uint8_t pointer){
	snakeHeadIndex = pointer; 
    1d98:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <snakeHeadIndex>
    1d9c:	08 95       	ret

00001d9e <set_snake_tail_pointer>:
}
void set_snake_tail_pointer(uint8_t pointer){
	snakeTailIndex = pointer; 
    1d9e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <snakeTailIndex>
    1da2:	08 95       	ret

00001da4 <get_snake_head_index>:
}

uint8_t get_snake_head_index(void){
	return snakeHeadIndex;
}
    1da4:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <snakeHeadIndex>
    1da8:	08 95       	ret

00001daa <get_snake_tail_index>:
uint8_t get_snake_tail_index(void){
	return snakeTailIndex;
}
    1daa:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <snakeTailIndex>
    1dae:	08 95       	ret

00001db0 <get_current_drn>:
SnakeDirnType get_current_drn(void){
	return curSnakeDirn; 
}
    1db0:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <curSnakeDirn>
    1db4:	08 95       	ret

00001db6 <advance_snake_tail>:
** position "drop" off the end.
** We return the previous tail position.
*/
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
    1db6:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <snakeTailIndex>
    1dba:	e9 2f       	mov	r30, r25
    1dbc:	09 2e       	mov	r0, r25
    1dbe:	00 0c       	add	r0, r0
    1dc0:	ff 0b       	sbc	r31, r31
    1dc2:	e9 53       	subi	r30, 0x39	; 57
    1dc4:	fd 4f       	sbci	r31, 0xFD	; 253
    1dc6:	80 81       	ld	r24, Z
	
	/* Update the tail index */
	snakeTailIndex++;
    1dc8:	9f 5f       	subi	r25, 0xFF	; 255
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1dca:	91 32       	cpi	r25, 0x21	; 33
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <advance_snake_tail+0x1e>
PosnType advance_snake_tail(void) {
	// Get the current tail position
	PosnType prev_tail_position = snakePositions[snakeTailIndex];
	
	/* Update the tail index */
	snakeTailIndex++;
    1dce:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <snakeTailIndex>
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <advance_snake_tail+0x22>
	if(snakeTailIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeTailIndex = 0;
    1dd4:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <snakeTailIndex>
	}
	snakeLength--;
    1dd8:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <snakeLength>
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <snakeLength>
	
	return prev_tail_position;
}
    1de2:	08 95       	ret

00001de4 <set_snake_dirn>:

	**
	** Initially, we assume the move is OK and just set the 
	** next direction.
	*/
	switch (curSnakeDirn) {
    1de4:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <curSnakeDirn>
    1de8:	91 30       	cpi	r25, 0x01	; 1
    1dea:	a9 f0       	breq	.+42     	; 0x1e16 <set_snake_dirn+0x32>
    1dec:	28 f0       	brcs	.+10     	; 0x1df8 <set_snake_dirn+0x14>
    1dee:	92 30       	cpi	r25, 0x02	; 2
    1df0:	41 f0       	breq	.+16     	; 0x1e02 <set_snake_dirn+0x1e>
    1df2:	93 30       	cpi	r25, 0x03	; 3
    1df4:	59 f0       	breq	.+22     	; 0x1e0c <set_snake_dirn+0x28>
    1df6:	08 95       	ret
		case SNAKE_UP:
			if( dirn != SNAKE_DOWN){
    1df8:	82 30       	cpi	r24, 0x02	; 2
    1dfa:	89 f0       	breq	.+34     	; 0x1e1e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1dfc:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <nextSnakeDirn>
    1e00:	08 95       	ret
			}
			break;
		case SNAKE_DOWN:
			if(dirn!= SNAKE_UP){
    1e02:	88 23       	and	r24, r24
    1e04:	61 f0       	breq	.+24     	; 0x1e1e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e06:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <nextSnakeDirn>
    1e0a:	08 95       	ret
			}
			break; 
		case SNAKE_LEFT:
			if(dirn!= SNAKE_RIGHT){
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	39 f0       	breq	.+14     	; 0x1e1e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e10:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <nextSnakeDirn>
    1e14:	08 95       	ret
			}
			break;
		case SNAKE_RIGHT:
			if(dirn!= SNAKE_LEFT){
    1e16:	83 30       	cpi	r24, 0x03	; 3
    1e18:	11 f0       	breq	.+4      	; 0x1e1e <set_snake_dirn+0x3a>
				nextSnakeDirn = dirn;
    1e1a:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <nextSnakeDirn>
    1e1e:	08 95       	ret

00001e20 <is_snake_at>:
int8_t is_snake_at(PosnType position) {
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
    1e20:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <snakeTailIndex>
	while(index != snakeHeadIndex) {
    1e24:	30 91 c5 02 	lds	r19, 0x02C5	; 0x8002c5 <snakeHeadIndex>
		if(position == snakePositions[index]) {
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
    1e28:	40 e0       	ldi	r20, 0x00	; 0
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1e2a:	0d c0       	rjmp	.+26     	; 0x1e46 <is_snake_at+0x26>
		if(position == snakePositions[index]) {
    1e2c:	e9 2f       	mov	r30, r25
    1e2e:	09 2e       	mov	r0, r25
    1e30:	00 0c       	add	r0, r0
    1e32:	ff 0b       	sbc	r31, r31
    1e34:	e9 53       	subi	r30, 0x39	; 57
    1e36:	fd 4f       	sbci	r31, 0xFD	; 253
    1e38:	20 81       	ld	r18, Z
    1e3a:	28 17       	cp	r18, r24
    1e3c:	89 f0       	breq	.+34     	; 0x1e60 <is_snake_at+0x40>
    1e3e:	9f 5f       	subi	r25, 0xFF	; 255
			return 1;
		}
		index++;
		if(index > MAX_SNAKE_SIZE) {
    1e40:	91 32       	cpi	r25, 0x21	; 33
    1e42:	0c f0       	brlt	.+2      	; 0x1e46 <is_snake_at+0x26>
			index = 0;
    1e44:	94 2f       	mov	r25, r20
	int8_t index;

	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
    1e46:	93 13       	cpse	r25, r19
    1e48:	f1 cf       	rjmp	.-30     	; 0x1e2c <is_snake_at+0xc>
		if(index > MAX_SNAKE_SIZE) {
			index = 0;
		}
	}
	/* Now check head position, since it is not checked above. */
	if(position == snakePositions[snakeHeadIndex]) {
    1e4a:	e3 2f       	mov	r30, r19
    1e4c:	33 0f       	add	r19, r19
    1e4e:	ff 0b       	sbc	r31, r31
    1e50:	e9 53       	subi	r30, 0x39	; 57
    1e52:	fd 4f       	sbci	r31, 0xFD	; 253
	/* Start at tail and work forward to the head.
	*/
	index = snakeTailIndex;
	while(index != snakeHeadIndex) {
		if(position == snakePositions[index]) {
			return 1;
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	20 81       	ld	r18, Z
    1e58:	28 17       	cp	r18, r24
    1e5a:	19 f0       	breq	.+6      	; 0x1e62 <is_snake_at+0x42>
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	01 c0       	rjmp	.+2      	; 0x1e62 <is_snake_at+0x42>
    1e60:	91 e0       	ldi	r25, 0x01	; 1
	if(position == snakePositions[snakeHeadIndex]) {
		return 1;
	}
	/* Snake does not occupy the given position */
	return 0;
}
    1e62:	89 2f       	mov	r24, r25
    1e64:	08 95       	ret

00001e66 <advance_snake_head>:
**   snake can't grow.
** - ATE_SUPERFOOD if the snake ate the Superfood
** - ATE_SUPERFOOD_BUT_CANT_GROW 
** (Only the last five of these result in the head position being moved.)
*/
int8_t advance_snake_head(void) {
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
	int8_t headX;	/* head X position */
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
    1e6a:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <snakeLength>
    1e6e:	81 32       	cpi	r24, 0x21	; 33
    1e70:	08 f0       	brcs	.+2      	; 0x1e74 <advance_snake_head+0xe>
    1e72:	96 c0       	rjmp	.+300    	; 0x1fa0 <advance_snake_head+0x13a>
		return SNAKE_LENGTH_ERROR;
	}
    
	/* Current head position */
	headX = x_position(snakePositions[snakeHeadIndex]);
    1e74:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <snakeHeadIndex>
    1e78:	0e 2e       	mov	r0, r30
    1e7a:	00 0c       	add	r0, r0
    1e7c:	ff 0b       	sbc	r31, r31
    1e7e:	e9 53       	subi	r30, 0x39	; 57
    1e80:	fd 4f       	sbci	r31, 0xFD	; 253
    1e82:	80 81       	ld	r24, Z
    1e84:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    1e88:	d8 2f       	mov	r29, r24
    1e8a:	c8 2f       	mov	r28, r24
	headY = y_position(snakePositions[snakeHeadIndex]);
    1e8c:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <snakeHeadIndex>
    1e90:	0e 2e       	mov	r0, r30
    1e92:	00 0c       	add	r0, r0
    1e94:	ff 0b       	sbc	r31, r31
    1e96:	e9 53       	subi	r30, 0x39	; 57
    1e98:	fd 4f       	sbci	r31, 0xFD	; 253
    1e9a:	80 81       	ld	r24, Z
    1e9c:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    1ea0:	68 2f       	mov	r22, r24
    /* Work out where the new head position should be - we
    ** move 1 position in our NEXT direction of movement if we can.
	** If we're at the edge of the board, then we wrap around to
	** the other edge.
    */
    switch (nextSnakeDirn) {
    1ea2:	90 91 c2 02 	lds	r25, 0x02C2	; 0x8002c2 <nextSnakeDirn>
    1ea6:	91 30       	cpi	r25, 0x01	; 1
    1ea8:	59 f0       	breq	.+22     	; 0x1ec0 <advance_snake_head+0x5a>
    1eaa:	28 f0       	brcs	.+10     	; 0x1eb6 <advance_snake_head+0x50>
    1eac:	92 30       	cpi	r25, 0x02	; 2
    1eae:	69 f0       	breq	.+26     	; 0x1eca <advance_snake_head+0x64>
    1eb0:	93 30       	cpi	r25, 0x03	; 3
    1eb2:	81 f0       	breq	.+32     	; 0x1ed4 <advance_snake_head+0x6e>
    1eb4:	1b c0       	rjmp	.+54     	; 0x1eec <advance_snake_head+0x86>
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
    1eb6:	87 30       	cpi	r24, 0x07	; 7
    1eb8:	91 f0       	breq	.+36     	; 0x1ede <advance_snake_head+0x78>
				// Head is already at the top of the board - wrap around
				headY = 0;
			} else {
	            headY += 1;
    1eba:	61 e0       	ldi	r22, 0x01	; 1
    1ebc:	68 0f       	add	r22, r24
    1ebe:	16 c0       	rjmp	.+44     	; 0x1eec <advance_snake_head+0x86>
			}
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
    1ec0:	df 30       	cpi	r29, 0x0F	; 15
    1ec2:	79 f0       	breq	.+30     	; 0x1ee2 <advance_snake_head+0x7c>
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
			} else {
				headX += 1;
    1ec4:	c1 e0       	ldi	r28, 0x01	; 1
    1ec6:	cd 0f       	add	r28, r29
    1ec8:	11 c0       	rjmp	.+34     	; 0x1eec <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
    1eca:	88 23       	and	r24, r24
    1ecc:	61 f0       	breq	.+24     	; 0x1ee6 <advance_snake_head+0x80>
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
			        } else {
			        headY -= 1;
    1ece:	6f ef       	ldi	r22, 0xFF	; 255
    1ed0:	68 0f       	add	r22, r24
    1ed2:	0c c0       	rjmp	.+24     	; 0x1eec <advance_snake_head+0x86>
		        }
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
    1ed4:	dd 23       	and	r29, r29
    1ed6:	49 f0       	breq	.+18     	; 0x1eea <advance_snake_head+0x84>
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
	        } else {
	        headX -= 1;
    1ed8:	cf ef       	ldi	r28, 0xFF	; 255
    1eda:	cd 0f       	add	r28, r29
    1edc:	07 c0       	rjmp	.+14     	; 0x1eec <advance_snake_head+0x86>
    */
    switch (nextSnakeDirn) {
        case SNAKE_UP:
			if(headY == BOARD_HEIGHT - 1) {
				// Head is already at the top of the board - wrap around
				headY = 0;
    1ede:	60 e0       	ldi	r22, 0x00	; 0
    1ee0:	05 c0       	rjmp	.+10     	; 0x1eec <advance_snake_head+0x86>
            break;
        case SNAKE_RIGHT:
			if(headX == BOARD_WIDTH - 1) {
				// Snake head is already at the right hand edge of the board
				// - wrap around to left hand side
				headX = 0;
    1ee2:	c0 e0       	ldi	r28, 0x00	; 0
    1ee4:	03 c0       	rjmp	.+6      	; 0x1eec <advance_snake_head+0x86>
			}
            break;
		 case SNAKE_DOWN:
		        if(headY == 0) {
			        // Head is already at the top of the board - wrap around
			        headY = BOARD_HEIGHT - 1;
    1ee6:	67 e0       	ldi	r22, 0x07	; 7
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <advance_snake_head+0x86>
		        break;
        case SNAKE_LEFT:
        if(headX == 0) {
	        // Snake head is already at the right hand edge of the board
	        // - wrap around to left hand side
	        headX = BOARD_WIDTH - 1;
    1eea:	cf e0       	ldi	r28, 0x0F	; 15
	        headX -= 1;
        }
        break;
    }

	newHeadPosn = position(headX, headY);
    1eec:	8c 2f       	mov	r24, r28
    1eee:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    1ef2:	c8 2f       	mov	r28, r24

	if(curSnakeDirn != nextSnakeDirn){
    1ef4:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <nextSnakeDirn>
    1ef8:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <curSnakeDirn>
    1efc:	98 17       	cp	r25, r24
    1efe:	41 f0       	breq	.+16     	; 0x1f10 <advance_snake_head+0xaa>
	/* Update the current direction */
	curSnakeDirn = nextSnakeDirn;
    1f00:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <curSnakeDirn>
	
	if(sound_effects_on_mode()){
    1f04:	0e 94 a2 01 	call	0x344	; 0x344 <sound_effects_on_mode>
    1f08:	89 2b       	or	r24, r25
    1f0a:	11 f0       	breq	.+4      	; 0x1f10 <advance_snake_head+0xaa>
		 play_eating_food_sound_effect();
    1f0c:	0e 94 33 02 	call	0x466	; 0x466 <play_eating_food_sound_effect>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1f10:	8c 2f       	mov	r24, r28
    1f12:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <is_snake_at>
    1f16:	88 23       	and	r24, r24
    1f18:	51 f0       	breq	.+20     	; 0x1f2e <advance_snake_head+0xc8>
void reset_snake_drn(SnakeDirnType dirn){
	curSnakeDirn = dirn;
	nextSnakeDirn = dirn;
}
PosnType get_snake_tail_position(void) {
	return snakePositions[snakeTailIndex];
    1f1a:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <snakeTailIndex>
    1f1e:	0e 2e       	mov	r0, r30
    1f20:	00 0c       	add	r0, r0
    1f22:	ff 0b       	sbc	r31, r31
    1f24:	e9 53       	subi	r30, 0x39	; 57
    1f26:	fd 4f       	sbci	r31, 0xFD	; 253
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1f28:	80 81       	ld	r24, Z
    1f2a:	c8 13       	cpse	r28, r24
    1f2c:	3b c0       	rjmp	.+118    	; 0x1fa4 <advance_snake_head+0x13e>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1f2e:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <snakeHeadIndex>
    1f32:	8f 5f       	subi	r24, 0xFF	; 255
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
    1f34:	81 32       	cpi	r24, 0x21	; 33
    1f36:	19 f0       	breq	.+6      	; 0x1f3e <advance_snake_head+0xd8>
	** or not. Update the length.
    */
	
	
	
	snakeHeadIndex++;
    1f38:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <snakeHeadIndex>
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <advance_snake_head+0xdc>
	if(snakeHeadIndex == SNAKE_POSITION_ARRAY_SIZE) {
		/* Array has wrapped around */
		snakeHeadIndex = 0;
    1f3e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <snakeHeadIndex>
	}
	/* Store the head position */
	snakePositions[snakeHeadIndex] = newHeadPosn;
    1f42:	e0 91 c5 02 	lds	r30, 0x02C5	; 0x8002c5 <snakeHeadIndex>
    1f46:	0e 2e       	mov	r0, r30
    1f48:	00 0c       	add	r0, r0
    1f4a:	ff 0b       	sbc	r31, r31
    1f4c:	e9 53       	subi	r30, 0x39	; 57
    1f4e:	fd 4f       	sbci	r31, 0xFD	; 253
    1f50:	c0 83       	st	Z, r28
	/* Update the snake's length */
	snakeLength++;
    1f52:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <snakeLength>
    1f56:	8f 5f       	subi	r24, 0xFF	; 255
    1f58:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <snakeLength>
	
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
    1f5c:	8c 2f       	mov	r24, r28
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	0e 94 b7 0b 	call	0x176e	; 0x176e <is_rat_at>
    1f64:	89 2b       	or	r24, r25
    1f66:	31 f0       	breq	.+12     	; 0x1f74 <advance_snake_head+0x10e>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1f68:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <snakeLength>
    1f6c:	81 32       	cpi	r24, 0x21	; 33
    1f6e:	e0 f0       	brcs	.+56     	; 0x1fa8 <advance_snake_head+0x142>
			return ATE_RAT;
		} else {
			return ATE_RAT_BUT_CANT_GROW;
    1f70:	87 e0       	ldi	r24, 0x07	; 7
    1f72:	21 c0       	rjmp	.+66     	; 0x1fb6 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
    1f74:	8c 2f       	mov	r24, r28
    1f76:	0e 94 5f 10 	call	0x20be	; 0x20be <is_superfood_at>
    1f7a:	88 23       	and	r24, r24
    1f7c:	31 f0       	breq	.+12     	; 0x1f8a <advance_snake_head+0x124>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1f7e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <snakeLength>
    1f82:	81 32       	cpi	r24, 0x21	; 33
    1f84:	98 f0       	brcs	.+38     	; 0x1fac <advance_snake_head+0x146>
			return ATE_SUPERFOOD;
		} else {
			return ATE_SUPERFOOD_BUT_CANT_GROW;
    1f86:	85 e0       	ldi	r24, 0x05	; 5
    1f88:	16 c0       	rjmp	.+44     	; 0x1fb6 <advance_snake_head+0x150>
		}
	}
	if(is_food_at(newHeadPosn)) {
    1f8a:	8c 2f       	mov	r24, r28
    1f8c:	0e 94 67 07 	call	0xece	; 0xece <is_food_at>
    1f90:	88 23       	and	r24, r24
    1f92:	71 f0       	breq	.+28     	; 0x1fb0 <advance_snake_head+0x14a>
		if(snakeLength <= MAX_SNAKE_SIZE) {
    1f94:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <snakeLength>
    1f98:	81 32       	cpi	r24, 0x21	; 33
    1f9a:	60 f0       	brcs	.+24     	; 0x1fb4 <advance_snake_head+0x14e>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	0b c0       	rjmp	.+22     	; 0x1fb6 <advance_snake_head+0x150>
	int8_t headY;	/* head Y position */
	PosnType newHeadPosn;
	
	/* Check the snake isn't already too long */
	if(snakeLength > MAX_SNAKE_SIZE) {
		return SNAKE_LENGTH_ERROR;
    1fa0:	8d ef       	ldi	r24, 0xFD	; 253
    1fa2:	09 c0       	rjmp	.+18     	; 0x1fb6 <advance_snake_head+0x150>
	** which can help you. (If the new head position is the same
	** as the current tail position then this move is permitted
	**  - the tail position won't be updated until after the head
	**  is advanced but we don't consider this a collision.)
	*/
	if ((is_snake_at(newHeadPosn) !=0) && (newHeadPosn !=get_snake_tail_position())){return COLLISION;}
    1fa4:	8e ef       	ldi	r24, 0xFE	; 254
    1fa6:	07 c0       	rjmp	.+14     	; 0x1fb6 <advance_snake_head+0x150>
	/* Check whether we ate food or not and return the appropriate
	** value.
	*/
	if(is_rat_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_RAT;
    1fa8:	86 e0       	ldi	r24, 0x06	; 6
    1faa:	05 c0       	rjmp	.+10     	; 0x1fb6 <advance_snake_head+0x150>
			}
	}
	
	if (is_superfood_at(newHeadPosn)){
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_SUPERFOOD;
    1fac:	84 e0       	ldi	r24, 0x04	; 4
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <advance_snake_head+0x150>
			return ATE_FOOD;
		} else {
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	01 c0       	rjmp	.+2      	; 0x1fb6 <advance_snake_head+0x150>
			return ATE_SUPERFOOD_BUT_CANT_GROW;
		}
	}
	if(is_food_at(newHeadPosn)) {
		if(snakeLength <= MAX_SNAKE_SIZE) {
			return ATE_FOOD;
    1fb4:	82 e0       	ldi	r24, 0x02	; 2
			return ATE_FOOD_BUT_CANT_GROW;
		}
	} else {
		return MOVE_OK;
	}
}
    1fb6:	df 91       	pop	r29
    1fb8:	cf 91       	pop	r28
    1fba:	08 95       	ret

00001fbc <spi_setup_master>:
void spi_setup_master(uint8_t clockdivider) {
	// Set up SPI communication as a master
	// Make the SS, MOSI and SCK pins outputs. These are pins
	// 4, 5 and 7 of port B on the ATmega324A
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);
    1fbc:	94 b1       	in	r25, 0x04	; 4
    1fbe:	90 6b       	ori	r25, 0xB0	; 176
    1fc0:	94 b9       	out	0x04, r25	; 4
	
	// Set the slave select (SS) line high
	PORTB |= (1<<4);
    1fc2:	2c 9a       	sbi	0x05, 4	; 5
	
	// Set up the SPI control registers SPCR0 and SPSR0:
	// - SPE0 bit = 1 (SPI is enabled)
	// - MSTR0 bit = 1 (Master Mode)
	SPCR0 = (1<<SPE0)|(1<<MSTR0);
    1fc4:	90 e5       	ldi	r25, 0x50	; 80
    1fc6:	9c bd       	out	0x2c, r25	; 44
	
	// Set SPR00 and SPR01 bits in SPCR0 and SPI2X0 bit in SPSR0
	// based on the given clock divider
	// Invalid values default to the slowest speed
	// We consider each bit in turn
	switch(clockdivider) {
    1fc8:	88 30       	cpi	r24, 0x08	; 8
    1fca:	21 f0       	breq	.+8      	; 0x1fd4 <spi_setup_master+0x18>
    1fcc:	80 32       	cpi	r24, 0x20	; 32
    1fce:	11 f0       	breq	.+4      	; 0x1fd4 <spi_setup_master+0x18>
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	19 f4       	brne	.+6      	; 0x1fda <spi_setup_master+0x1e>
		case 2:
		case 8:
		case 32:
			SPSR0 = (1<<SPI2X0);
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	9d bd       	out	0x2d, r25	; 45
			break;
    1fd8:	01 c0       	rjmp	.+2      	; 0x1fdc <spi_setup_master+0x20>
		default:
			SPSR0 = 0;
    1fda:	1d bc       	out	0x2d, r1	; 45
			break;
	}
	switch(clockdivider) {
    1fdc:	80 32       	cpi	r24, 0x20	; 32
    1fde:	69 f0       	breq	.+26     	; 0x1ffa <spi_setup_master+0x3e>
    1fe0:	28 f4       	brcc	.+10     	; 0x1fec <spi_setup_master+0x30>
    1fe2:	88 30       	cpi	r24, 0x08	; 8
    1fe4:	71 f0       	breq	.+28     	; 0x2002 <spi_setup_master+0x46>
    1fe6:	80 31       	cpi	r24, 0x10	; 16
    1fe8:	61 f0       	breq	.+24     	; 0x2002 <spi_setup_master+0x46>
    1fea:	0e c0       	rjmp	.+28     	; 0x2008 <spi_setup_master+0x4c>
    1fec:	80 34       	cpi	r24, 0x40	; 64
    1fee:	29 f0       	breq	.+10     	; 0x1ffa <spi_setup_master+0x3e>
    1ff0:	80 38       	cpi	r24, 0x80	; 128
    1ff2:	51 f4       	brne	.+20     	; 0x2008 <spi_setup_master+0x4c>
		case 128:
			SPCR0 |= (1<<SPR00);
    1ff4:	8c b5       	in	r24, 0x2c	; 44
    1ff6:	81 60       	ori	r24, 0x01	; 1
    1ff8:	8c bd       	out	0x2c, r24	; 44
			// Note this flows through to the next code block
		case 32:
		case 64:
			SPCR0 |= (1<<SPR10);
    1ffa:	8c b5       	in	r24, 0x2c	; 44
    1ffc:	82 60       	ori	r24, 0x02	; 2
    1ffe:	8c bd       	out	0x2c, r24	; 44
			break;
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <spi_setup_master+0x4c>
		case 8:
		case 16:
			SPCR0 |= (1<<SPR00);
    2002:	8c b5       	in	r24, 0x2c	; 44
    2004:	81 60       	ori	r24, 0x01	; 1
    2006:	8c bd       	out	0x2c, r24	; 44
			break;
	}
	
	// Take SS (slave select) line low
	PORTB &= ~(1<<4);
    2008:	2c 98       	cbi	0x05, 4	; 5
    200a:	08 95       	ret

0000200c <spi_send_byte>:
	// the transfer. We then wait until the most significant byte of
	// SPSR0 (SPIF0 bit) is set - this indicates that the transfer is
	// complete. (The final read of SPSR0 followed by a read of SPDR0
	// will cause the SPIF0 bit to be reset to 0. See page 224 of the 
	// ATmega324A datasheet - 10/2016 version.)
	SPDR0 = byte;
    200c:	8e bd       	out	0x2e, r24	; 46
	while((SPSR0 & (1<<SPIF0)) == 0) {
    200e:	0d b4       	in	r0, 0x2d	; 45
    2010:	07 fe       	sbrs	r0, 7
    2012:	fd cf       	rjmp	.-6      	; 0x200e <spi_send_byte+0x2>
		; // wait
	}
	return SPDR0;
    2014:	8e b5       	in	r24, 0x2e	; 46
    2016:	08 95       	ret

00002018 <load_superfood>:

uint8_t superfood_on_board; 
PosnType superfood_position; 

uint8_t load_superfood(PosnType loaded_pos){
	superfood_position = loaded_pos; 
    2018:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <superfood_position>
	superfood_on_board = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <superfood_on_board>
}
    2022:	08 95       	ret

00002024 <superfood_is_on_board>:

uint8_t superfood_is_on_board(void){
	return superfood_on_board;
}
    2024:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <superfood_on_board>
    2028:	08 95       	ret

0000202a <time_to_add_superfood>:

uint8_t time_to_add_superfood(void){
	return ((((get_clock_ticks() -15000)%20000) ==0) && (get_clock_ticks() - 15000 >=0));
    202a:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    202e:	68 59       	subi	r22, 0x98	; 152
    2030:	7a 43       	sbci	r23, 0x3A	; 58
    2032:	81 09       	sbc	r24, r1
    2034:	91 09       	sbc	r25, r1
    2036:	20 e2       	ldi	r18, 0x20	; 32
    2038:	3e e4       	ldi	r19, 0x4E	; 78
    203a:	40 e0       	ldi	r20, 0x00	; 0
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	0e 94 80 13 	call	0x2700	; 0x2700 <__udivmodsi4>
    2042:	67 2b       	or	r22, r23
    2044:	68 2b       	or	r22, r24
    2046:	69 2b       	or	r22, r25
    2048:	21 f4       	brne	.+8      	; 0x2052 <time_to_add_superfood+0x28>
    204a:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	08 95       	ret
    2052:	80 e0       	ldi	r24, 0x00	; 0
}
    2054:	08 95       	ret

00002056 <time_to_remove_superfood>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
    2056:	0e 94 b2 11 	call	0x2364	; 0x2364 <get_clock_ticks>
    205a:	20 e2       	ldi	r18, 0x20	; 32
    205c:	3e e4       	ldi	r19, 0x4E	; 78
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	0e 94 80 13 	call	0x2700	; 0x2700 <__udivmodsi4>
    2066:	21 e0       	ldi	r18, 0x01	; 1
    2068:	67 2b       	or	r22, r23
    206a:	68 2b       	or	r22, r24
    206c:	69 2b       	or	r22, r25
    206e:	09 f0       	breq	.+2      	; 0x2072 <time_to_remove_superfood+0x1c>
    2070:	20 e0       	ldi	r18, 0x00	; 0
}
    2072:	82 2f       	mov	r24, r18
    2074:	08 95       	ret

00002076 <remove_superfood_from_board>:
	superfood_position = test_position;
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
	superfood_on_board = 1;
}

void remove_superfood_from_board(void){
    2076:	cf 93       	push	r28
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_BLACK);
    2078:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <superfood_position>
    207c:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    2080:	c8 2f       	mov	r28, r24
    2082:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <superfood_position>
    2086:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	6c 2f       	mov	r22, r28
    208e:	0e 94 ca 08 	call	0x1194	; 0x1194 <ledmatrix_update_pixel>
	superfood_position = position(0,0);
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    209a:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <superfood_position>
	superfood_on_board = 0; 
    209e:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <superfood_on_board>
}
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <eat_superfood_from_board>:

void eat_superfood_from_board(void){
	superfood_position = position(0,0);
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	80 e0       	ldi	r24, 0x00	; 0
    20aa:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    20ae:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <superfood_position>
	superfood_on_board = 0;
    20b2:	10 92 25 04 	sts	0x0425, r1	; 0x800425 <superfood_on_board>
    20b6:	08 95       	ret

000020b8 <get_superfood_position>:
}

PosnType get_superfood_position(void){
	return superfood_position;
}
    20b8:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <superfood_position>
    20bc:	08 95       	ret

000020be <is_superfood_at>:

uint8_t is_superfood_at(PosnType pos){
	return (superfood_on_board && pos == superfood_position);
    20be:	90 91 25 04 	lds	r25, 0x0425	; 0x800425 <superfood_on_board>
    20c2:	99 23       	and	r25, r25
    20c4:	39 f0       	breq	.+14     	; 0x20d4 <is_superfood_at+0x16>
    20c6:	91 e0       	ldi	r25, 0x01	; 1
    20c8:	20 91 24 04 	lds	r18, 0x0424	; 0x800424 <superfood_position>
    20cc:	28 13       	cpse	r18, r24
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	89 2f       	mov	r24, r25
    20d2:	08 95       	ret
    20d4:	80 e0       	ldi	r24, 0x00	; 0
}
    20d6:	08 95       	ret

000020d8 <add_superfood_to_board>:

uint8_t time_to_remove_superfood(void){
	return ((get_clock_ticks()%20000) ==0);
}

void add_superfood_to_board(void){
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
	/* Generate "random" positions until we get one which
	** is not occupied by a snake or food.
	*/
	remove_superfood_from_board();
    20de:	0e 94 3b 10 	call	0x2076	; 0x2076 <remove_superfood_from_board>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    20e2:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
    20e6:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    20e8:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
		test_position = position(x,y);
    20ec:	bc 01       	movw	r22, r24
    20ee:	67 70       	andi	r22, 0x07	; 7
    20f0:	70 78       	andi	r23, 0x80	; 128
    20f2:	77 23       	and	r23, r23
    20f4:	34 f4       	brge	.+12     	; 0x2102 <add_superfood_to_board+0x2a>
    20f6:	61 50       	subi	r22, 0x01	; 1
    20f8:	71 09       	sbc	r23, r1
    20fa:	68 6f       	ori	r22, 0xF8	; 248
    20fc:	7f 6f       	ori	r23, 0xFF	; 255
    20fe:	6f 5f       	subi	r22, 0xFF	; 255
    2100:	7f 4f       	sbci	r23, 0xFF	; 255
    2102:	ce 01       	movw	r24, r28
    2104:	8f 70       	andi	r24, 0x0F	; 15
    2106:	90 78       	andi	r25, 0x80	; 128
    2108:	99 23       	and	r25, r25
    210a:	24 f4       	brge	.+8      	; 0x2114 <add_superfood_to_board+0x3c>
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	80 6f       	ori	r24, 0xF0	; 240
    2110:	9f 6f       	ori	r25, 0xFF	; 255
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    2118:	c8 2f       	mov	r28, r24
    211a:	13 e6       	ldi	r17, 0x63	; 99
    211c:	1e c0       	rjmp	.+60     	; 0x215a <add_superfood_to_board+0x82>
	y = 0;
	attempts = 0;
	do {
		// Generate a new position - this is based on a sequence rather
		// then being random
        x = rand()%BOARD_WIDTH;
    211e:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
    2122:	ec 01       	movw	r28, r24
        y = rand()%BOARD_HEIGHT;
    2124:	0e 94 0d 14 	call	0x281a	; 0x281a <rand>
		test_position = position(x,y);
    2128:	bc 01       	movw	r22, r24
    212a:	67 70       	andi	r22, 0x07	; 7
    212c:	70 78       	andi	r23, 0x80	; 128
    212e:	77 23       	and	r23, r23
    2130:	34 f4       	brge	.+12     	; 0x213e <add_superfood_to_board+0x66>
    2132:	61 50       	subi	r22, 0x01	; 1
    2134:	71 09       	sbc	r23, r1
    2136:	68 6f       	ori	r22, 0xF8	; 248
    2138:	7f 6f       	ori	r23, 0xFF	; 255
    213a:	6f 5f       	subi	r22, 0xFF	; 255
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	ce 01       	movw	r24, r28
    2140:	8f 70       	andi	r24, 0x0F	; 15
    2142:	90 78       	andi	r25, 0x80	; 128
    2144:	99 23       	and	r25, r25
    2146:	24 f4       	brge	.+8      	; 0x2150 <add_superfood_to_board+0x78>
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	80 6f       	ori	r24, 0xF0	; 240
    214c:	9f 6f       	ori	r25, 0xFF	; 255
    214e:	01 96       	adiw	r24, 0x01	; 1
    2150:	0e 94 1c 09 	call	0x1238	; 0x1238 <position>
    2154:	c8 2f       	mov	r28, r24
    2156:	11 50       	subi	r17, 0x01	; 1
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    2158:	a1 f0       	breq	.+40     	; 0x2182 <add_superfood_to_board+0xaa>
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
		(is_snake_at(test_position) || is_food_at(test_position)
    215a:	8c 2f       	mov	r24, r28
    215c:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <is_snake_at>
		// then being random
        x = rand()%BOARD_WIDTH;
        y = rand()%BOARD_HEIGHT;
		test_position = position(x,y);
        attempts++;
    } while(attempts < 100 &&
    2160:	81 11       	cpse	r24, r1
    2162:	dd cf       	rjmp	.-70     	; 0x211e <add_superfood_to_board+0x46>
		(is_snake_at(test_position) || is_food_at(test_position)
    2164:	8c 2f       	mov	r24, r28
    2166:	0e 94 67 07 	call	0xece	; 0xece <is_food_at>
    216a:	81 11       	cpse	r24, r1
    216c:	d8 cf       	rjmp	.-80     	; 0x211e <add_superfood_to_board+0x46>
		|| is_superfood_at(test_position) || is_rat_at(test_position)));
    216e:	8c 2f       	mov	r24, r28
    2170:	0e 94 5f 10 	call	0x20be	; 0x20be <is_superfood_at>
    2174:	81 11       	cpse	r24, r1
    2176:	d3 cf       	rjmp	.-90     	; 0x211e <add_superfood_to_board+0x46>
    2178:	8c 2f       	mov	r24, r28
    217a:	0e 94 b7 0b 	call	0x176e	; 0x176e <is_rat_at>
    217e:	81 11       	cpse	r24, r1
    2180:	ce cf       	rjmp	.-100    	; 0x211e <add_superfood_to_board+0x46>
   
	
	// If we get here, we've found an unoccupied position (test_position)
	// Add it to our list, display it, and return its ID.
	superfood_position = test_position;
    2182:	c0 93 24 04 	sts	0x0424, r28	; 0x800424 <superfood_position>
	ledmatrix_update_pixel(x_position(superfood_position), y_position(superfood_position), COLOUR_ORANGE);
    2186:	8c 2f       	mov	r24, r28
    2188:	0e 94 14 09 	call	0x1228	; 0x1228 <y_position>
    218c:	c8 2f       	mov	r28, r24
    218e:	80 91 24 04 	lds	r24, 0x0424	; 0x800424 <superfood_position>
    2192:	0e 94 11 09 	call	0x1222	; 0x1222 <x_position>
    2196:	4c e3       	ldi	r20, 0x3C	; 60
    2198:	6c 2f       	mov	r22, r28
    219a:	0e 94 ca 08 	call	0x1194	; 0x1194 <ledmatrix_update_pixel>
	superfood_on_board = 1;
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <superfood_on_board>
}
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	1f 91       	pop	r17
    21aa:	08 95       	ret

000021ac <move_cursor>:
		/* Move down one and back to the left one */
		printf_P(PSTR("\x1b[B\x1b[D"));
	}
	printf(" ");
	normal_display_mode();
}
    21ac:	28 2f       	mov	r18, r24
    21ae:	08 2e       	mov	r0, r24
    21b0:	00 0c       	add	r0, r0
    21b2:	33 0b       	sbc	r19, r19
    21b4:	3f 93       	push	r19
    21b6:	8f 93       	push	r24
    21b8:	86 2f       	mov	r24, r22
    21ba:	06 2e       	mov	r0, r22
    21bc:	00 0c       	add	r0, r0
    21be:	99 0b       	sbc	r25, r25
    21c0:	9f 93       	push	r25
    21c2:	6f 93       	push	r22
    21c4:	8d ed       	ldi	r24, 0xDD	; 221
    21c6:	91 e0       	ldi	r25, 0x01	; 1
    21c8:	9f 93       	push	r25
    21ca:	8f 93       	push	r24
    21cc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	08 95       	ret

000021de <clear_terminal>:
    21de:	88 ed       	ldi	r24, 0xD8	; 216
    21e0:	91 e0       	ldi	r25, 0x01	; 1
    21e2:	9f 93       	push	r25
    21e4:	8f 93       	push	r24
    21e6:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	08 95       	ret

000021f0 <set_display_attribute>:
    21f0:	1f 92       	push	r1
    21f2:	8f 93       	push	r24
    21f4:	82 ed       	ldi	r24, 0xD2	; 210
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	9f 93       	push	r25
    21fa:	8f 93       	push	r24
    21fc:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	08 95       	ret

0000220a <hide_cursor>:
    220a:	8b ec       	ldi	r24, 0xCB	; 203
    220c:	91 e0       	ldi	r25, 0x01	; 1
    220e:	9f 93       	push	r25
    2210:	8f 93       	push	r24
    2212:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	08 95       	ret

0000221c <show_cursor>:
    221c:	84 ec       	ldi	r24, 0xC4	; 196
    221e:	91 e0       	ldi	r25, 0x01	; 1
    2220:	9f 93       	push	r25
    2222:	8f 93       	push	r24
    2224:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
    2228:	0f 90       	pop	r0
    222a:	0f 90       	pop	r0
    222c:	08 95       	ret

0000222e <display_start_terminal_screen>:

void display_start_terminal_screen(void){
	move_cursor(3,3);
    222e:	63 e0       	ldi	r22, 0x03	; 3
    2230:	83 e0       	ldi	r24, 0x03	; 3
    2232:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf_P(PSTR("Snake"));
    2236:	8e eb       	ldi	r24, 0xBE	; 190
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	9f 93       	push	r25
    223c:	8f 93       	push	r24
    223e:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>

	move_cursor(3,5);
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	83 e0       	ldi	r24, 0x03	; 3
    2246:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	set_display_attribute(FG_GREEN);	// Make the text green
    224a:	80 e2       	ldi	r24, 0x20	; 32
    224c:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <set_display_attribute>
	// Modify the following line
	printf_P(PSTR("CSSE2010/7201 Snake Project by Jack Eadie"));
    2250:	84 e9       	ldi	r24, 0x94	; 148
    2252:	91 e0       	ldi	r25, 0x01	; 1
    2254:	9f 93       	push	r25
    2256:	8f 93       	push	r24
    2258:	0e 94 13 15 	call	0x2a26	; 0x2a26 <printf_P>
	// Return to default colour (White)
	set_display_attribute(FG_WHITE);
    225c:	85 e2       	ldi	r24, 0x25	; 37
    225e:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <set_display_attribute>
	display_EEPROM_high_score();
    2262:	0e 94 62 06 	call	0xcc4	; 0xcc4 <display_EEPROM_high_score>
}
    2266:	0f 90       	pop	r0
    2268:	0f 90       	pop	r0
    226a:	0f 90       	pop	r0
    226c:	0f 90       	pop	r0
    226e:	08 95       	ret

00002270 <init_score_on_terminal>:

void init_score_on_terminal(void){
	
	hide_cursor();
    2270:	0e 94 05 11 	call	0x220a	; 0x220a <hide_cursor>
	
	move_cursor(10,1);
    2274:	61 e0       	ldi	r22, 0x01	; 1
    2276:	8a e0       	ldi	r24, 0x0A	; 10
    2278:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf("Snake");
    227c:	86 e8       	ldi	r24, 0x86	; 134
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	9f 93       	push	r25
    2282:	8f 93       	push	r24
    2284:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>

	move_cursor(1,3);
    2288:	63 e0       	ldi	r22, 0x03	; 3
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf("Score:						       ", get_score());
    2290:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
    2294:	9f 93       	push	r25
    2296:	8f 93       	push	r24
    2298:	7f 93       	push	r23
    229a:	6f 93       	push	r22
    229c:	8c e8       	ldi	r24, 0x8C	; 140
    229e:	92 e0       	ldi	r25, 0x02	; 2
    22a0:	9f 93       	push	r25
    22a2:	8f 93       	push	r24
    22a4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
	
	move_cursor(10, 3);
    22a8:	63 e0       	ldi	r22, 0x03	; 3
    22aa:	8a e0       	ldi	r24, 0x0A	; 10
    22ac:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf("%10u", get_score()); 
    22b0:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
    22b4:	9f 93       	push	r25
    22b6:	8f 93       	push	r24
    22b8:	7f 93       	push	r23
    22ba:	6f 93       	push	r22
    22bc:	80 ea       	ldi	r24, 0xA0	; 160
    22be:	92 e0       	ldi	r25, 0x02	; 2
    22c0:	9f 93       	push	r25
    22c2:	8f 93       	push	r24
    22c4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
	move_cursor(10,3);
    22c8:	63 e0       	ldi	r22, 0x03	; 3
    22ca:	8a e0       	ldi	r24, 0x0A	; 10
    22cc:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
}
    22d0:	8d b7       	in	r24, 0x3d	; 61
    22d2:	9e b7       	in	r25, 0x3e	; 62
    22d4:	0e 96       	adiw	r24, 0x0e	; 14
    22d6:	0f b6       	in	r0, 0x3f	; 63
    22d8:	f8 94       	cli
    22da:	9e bf       	out	0x3e, r25	; 62
    22dc:	0f be       	out	0x3f, r0	; 63
    22de:	8d bf       	out	0x3d, r24	; 61
    22e0:	08 95       	ret

000022e2 <update_terminal_score>:

void update_terminal_score(void){
	hide_cursor();
    22e2:	0e 94 05 11 	call	0x220a	; 0x220a <hide_cursor>
	move_cursor(10, 3);
    22e6:	63 e0       	ldi	r22, 0x03	; 3
    22e8:	8a e0       	ldi	r24, 0x0A	; 10
    22ea:	0e 94 d6 10 	call	0x21ac	; 0x21ac <move_cursor>
	printf("%10u", get_score());
    22ee:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <get_score>
    22f2:	9f 93       	push	r25
    22f4:	8f 93       	push	r24
    22f6:	7f 93       	push	r23
    22f8:	6f 93       	push	r22
    22fa:	80 ea       	ldi	r24, 0xA0	; 160
    22fc:	92 e0       	ldi	r25, 0x02	; 2
    22fe:	9f 93       	push	r25
    2300:	8f 93       	push	r24
    2302:	0e 94 fd 14 	call	0x29fa	; 0x29fa <printf>
}
    2306:	0f 90       	pop	r0
    2308:	0f 90       	pop	r0
    230a:	0f 90       	pop	r0
    230c:	0f 90       	pop	r0
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	08 95       	ret

00002314 <init_timer0>:
 * The counter will be reset to 0 when it reaches it's
 * output compare value.
 */
void init_timer0(void) {
	// Reset clock tick count. L indicates a long (32 bit) constant. 
	clock_ticks = 0L;
    2314:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <clock_ticks>
    2318:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <clock_ticks+0x1>
    231c:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <clock_ticks+0x2>
    2320:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <clock_ticks+0x3>
	
	/* Clear the timer */
	TCNT0 = 0;
    2324:	16 bc       	out	0x26, r1	; 38

	/* Set the output compare value to be 124 */
	OCR0A = 124;
    2326:	8c e7       	ldi	r24, 0x7C	; 124
    2328:	87 bd       	out	0x27, r24	; 39
	
	/* Set the timer to clear on compare match (CTC mode)
	 * and to divide the clock by 64. This starts the timer
	 * running.
	 */
	TCCR0A = (1<<WGM01);
    232a:	82 e0       	ldi	r24, 0x02	; 2
    232c:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01)|(1<<CS00);
    232e:	83 e0       	ldi	r24, 0x03	; 3
    2330:	85 bd       	out	0x25, r24	; 37

	/* Enable an interrupt on output compare match. 
	 * Note that interrupts have to be enabled globally
	 * before the interrupts will fire.
	 */
	TIMSK0 |= (1<<OCIE0A);
    2332:	ee e6       	ldi	r30, 0x6E	; 110
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	82 60       	ori	r24, 0x02	; 2
    233a:	80 83       	st	Z, r24
	
	/* Make sure the interrupt flag is cleared by writing a 
	 * 1 to it.
	 */
	TIFR0 &= (1<<OCF0A);
    233c:	85 b3       	in	r24, 0x15	; 21
    233e:	82 70       	andi	r24, 0x02	; 2
    2340:	85 bb       	out	0x15, r24	; 21
    2342:	08 95       	ret

00002344 <toggle_timer_clock>:
}

void toggle_timer_clock(void){
	unpaused_game = 1- unpaused_game;
    2344:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <unpaused_game>
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	89 1b       	sub	r24, r25
    234c:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <unpaused_game>
    2350:	08 95       	ret

00002352 <timer_is_paused>:
	// TIMSK0 ^= (1<<OCIE0A);
}
int timer_is_paused(void){
	return !unpaused_game;
    2352:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <unpaused_game>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	22 23       	and	r18, r18
    235c:	11 f0       	breq	.+4      	; 0x2362 <timer_is_paused+0x10>
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	90 e0       	ldi	r25, 0x00	; 0
	// return !(TIMSK0 & (1<<OCIE0A)); 
}
    2362:	08 95       	ret

00002364 <get_clock_ticks>:
	/* Disable interrupts so we can be sure that the interrupt
	 * doesn't fire when we've copied just a couple of bytes
	 * of the value. Interrupts are re-enabled if they were
	 * enabled at the start.
	 */
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    2364:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2366:	f8 94       	cli
	return_value = clock_ticks;
    2368:	60 91 e8 02 	lds	r22, 0x02E8	; 0x8002e8 <clock_ticks>
    236c:	70 91 e9 02 	lds	r23, 0x02E9	; 0x8002e9 <clock_ticks+0x1>
    2370:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <clock_ticks+0x2>
    2374:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <clock_ticks+0x3>
	if(interrupts_were_on) {
    2378:	22 23       	and	r18, r18
    237a:	0c f4       	brge	.+2      	; 0x237e <get_clock_ticks+0x1a>
		sei();
    237c:	78 94       	sei
	}
	return return_value;
}
    237e:	08 95       	ret

00002380 <set_clock_ticks>:

void set_clock_ticks(uint32_t clock){
	uint8_t interrupts_were_on = bit_is_set(SREG, SREG_I);
    2380:	2f b7       	in	r18, 0x3f	; 63
	cli();
    2382:	f8 94       	cli
	clock_ticks =clock;
    2384:	60 93 e8 02 	sts	0x02E8, r22	; 0x8002e8 <clock_ticks>
    2388:	70 93 e9 02 	sts	0x02E9, r23	; 0x8002e9 <clock_ticks+0x1>
    238c:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <clock_ticks+0x2>
    2390:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <clock_ticks+0x3>
	if(interrupts_were_on) {
    2394:	22 23       	and	r18, r18
    2396:	0c f4       	brge	.+2      	; 0x239a <set_clock_ticks+0x1a>
		sei();
    2398:	78 94       	sei
    239a:	08 95       	ret

0000239c <display_SSD_value>:

void display_SSD_value(){
	//  1 is 10's space.
	//  0 is 1's space.
	
	if (SSD_CC_value) {
    239c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <SSD_CC_value>
    23a0:	88 23       	and	r24, r24
    23a2:	81 f0       	breq	.+32     	; 0x23c4 <display_SSD_value+0x28>
		PORTD |= (1<<2);
    23a4:	5a 9a       	sbi	0x0b, 2	; 11
		PORTA = seven_seg_for_tens[get_snake_length()/10];
    23a6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <get_snake_length>
    23aa:	ed ec       	ldi	r30, 0xCD	; 205
    23ac:	8e 9f       	mul	r24, r30
    23ae:	e1 2d       	mov	r30, r1
    23b0:	11 24       	eor	r1, r1
    23b2:	e6 95       	lsr	r30
    23b4:	e6 95       	lsr	r30
    23b6:	e6 95       	lsr	r30
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	e8 5d       	subi	r30, 0xD8	; 216
    23bc:	fe 4f       	sbci	r31, 0xFE	; 254
    23be:	80 81       	ld	r24, Z
    23c0:	82 b9       	out	0x02, r24	; 2
    23c2:	16 c0       	rjmp	.+44     	; 0x23f0 <display_SSD_value+0x54>
	}
	else{
		PORTD &= ~(1<<2);
    23c4:	5a 98       	cbi	0x0b, 2	; 11
		PORTA = seven_seg_for_ones[get_snake_length()%10];
    23c6:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <get_snake_length>
    23ca:	9d ec       	ldi	r25, 0xCD	; 205
    23cc:	89 9f       	mul	r24, r25
    23ce:	91 2d       	mov	r25, r1
    23d0:	11 24       	eor	r1, r1
    23d2:	96 95       	lsr	r25
    23d4:	96 95       	lsr	r25
    23d6:	96 95       	lsr	r25
    23d8:	99 0f       	add	r25, r25
    23da:	29 2f       	mov	r18, r25
    23dc:	22 0f       	add	r18, r18
    23de:	22 0f       	add	r18, r18
    23e0:	92 0f       	add	r25, r18
    23e2:	89 1b       	sub	r24, r25
    23e4:	e8 2f       	mov	r30, r24
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	e2 5e       	subi	r30, 0xE2	; 226
    23ea:	fe 4f       	sbci	r31, 0xFE	; 254
    23ec:	80 81       	ld	r24, Z
    23ee:	82 b9       	out	0x02, r24	; 2
	}
	SSD_CC_value = 1-SSD_CC_value; 
    23f0:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <SSD_CC_value>
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	89 1b       	sub	r24, r25
    23f8:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <SSD_CC_value>
    23fc:	08 95       	ret

000023fe <__vector_16>:
}

/* Interrupt handler which fires when timer/counter 0 reaches 
 * the defined output compare value (every millisecond)
 */
ISR(TIMER0_COMPA_vect) {
    23fe:	1f 92       	push	r1
    2400:	0f 92       	push	r0
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	0f 92       	push	r0
    2406:	11 24       	eor	r1, r1
    2408:	2f 93       	push	r18
    240a:	3f 93       	push	r19
    240c:	4f 93       	push	r20
    240e:	5f 93       	push	r21
    2410:	6f 93       	push	r22
    2412:	7f 93       	push	r23
    2414:	8f 93       	push	r24
    2416:	9f 93       	push	r25
    2418:	af 93       	push	r26
    241a:	bf 93       	push	r27
    241c:	ef 93       	push	r30
    241e:	ff 93       	push	r31
	if(unpaused_game){
    2420:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <unpaused_game>
    2424:	88 23       	and	r24, r24
    2426:	99 f0       	breq	.+38     	; 0x244e <__vector_16+0x50>
		clock_ticks++;
    2428:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <clock_ticks>
    242c:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <clock_ticks+0x1>
    2430:	a0 91 ea 02 	lds	r26, 0x02EA	; 0x8002ea <clock_ticks+0x2>
    2434:	b0 91 eb 02 	lds	r27, 0x02EB	; 0x8002eb <clock_ticks+0x3>
    2438:	01 96       	adiw	r24, 0x01	; 1
    243a:	a1 1d       	adc	r26, r1
    243c:	b1 1d       	adc	r27, r1
    243e:	80 93 e8 02 	sts	0x02E8, r24	; 0x8002e8 <clock_ticks>
    2442:	90 93 e9 02 	sts	0x02E9, r25	; 0x8002e9 <clock_ticks+0x1>
    2446:	a0 93 ea 02 	sts	0x02EA, r26	; 0x8002ea <clock_ticks+0x2>
    244a:	b0 93 eb 02 	sts	0x02EB, r27	; 0x8002eb <clock_ticks+0x3>
	}
	display_SSD_value();
    244e:	0e 94 ce 11 	call	0x239c	; 0x239c <display_SSD_value>
}
    2452:	ff 91       	pop	r31
    2454:	ef 91       	pop	r30
    2456:	bf 91       	pop	r27
    2458:	af 91       	pop	r26
    245a:	9f 91       	pop	r25
    245c:	8f 91       	pop	r24
    245e:	7f 91       	pop	r23
    2460:	6f 91       	pop	r22
    2462:	5f 91       	pop	r21
    2464:	4f 91       	pop	r20
    2466:	3f 91       	pop	r19
    2468:	2f 91       	pop	r18
    246a:	0f 90       	pop	r0
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	0f 90       	pop	r0
    2470:	1f 90       	pop	r1
    2472:	18 95       	reti

00002474 <initialise_timer_one>:
		DDRD &= ~(1<<3); 
}
void change_timer_one_frequency(int new_frequency){
	//  
	uint16_t new_OCR1A = (8000000/(new_frequency * 8)) -1;
	OCR1A = new_OCR1A;
    2474:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    2478:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    247c:	e1 e8       	ldi	r30, 0x81	; 129
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	8a 60       	ori	r24, 0x0A	; 10
    2484:	80 83       	st	Z, r24
    2486:	80 e4       	ldi	r24, 0x40	; 64
    2488:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    248c:	88 ee       	ldi	r24, 0xE8	; 232
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    2494:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    2498:	55 98       	cbi	0x0a, 5	; 10
    249a:	53 98       	cbi	0x0a, 3	; 10
    249c:	08 95       	ret

0000249e <change_OCR1A>:
	//  printf("OCR1a: %u \n", OCR1A); 
	// OCR1A = 1000;
}

void change_OCR1A(int new_OCR1A){
	OCR1A = new_OCR1A;
    249e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    24a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    24a6:	08 95       	ret

000024a8 <enable_timer_one>:
}
 void enable_timer_one(void){
	DDRD |= (1<<5); 
    24a8:	55 9a       	sbi	0x0a, 5	; 10
    24aa:	08 95       	ret

000024ac <__fixunssfsi>:
    24ac:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__fp_splitA>
    24b0:	88 f0       	brcs	.+34     	; 0x24d4 <__fixunssfsi+0x28>
    24b2:	9f 57       	subi	r25, 0x7F	; 127
    24b4:	98 f0       	brcs	.+38     	; 0x24dc <__fixunssfsi+0x30>
    24b6:	b9 2f       	mov	r27, r25
    24b8:	99 27       	eor	r25, r25
    24ba:	b7 51       	subi	r27, 0x17	; 23
    24bc:	b0 f0       	brcs	.+44     	; 0x24ea <__fixunssfsi+0x3e>
    24be:	e1 f0       	breq	.+56     	; 0x24f8 <__fixunssfsi+0x4c>
    24c0:	66 0f       	add	r22, r22
    24c2:	77 1f       	adc	r23, r23
    24c4:	88 1f       	adc	r24, r24
    24c6:	99 1f       	adc	r25, r25
    24c8:	1a f0       	brmi	.+6      	; 0x24d0 <__fixunssfsi+0x24>
    24ca:	ba 95       	dec	r27
    24cc:	c9 f7       	brne	.-14     	; 0x24c0 <__fixunssfsi+0x14>
    24ce:	14 c0       	rjmp	.+40     	; 0x24f8 <__fixunssfsi+0x4c>
    24d0:	b1 30       	cpi	r27, 0x01	; 1
    24d2:	91 f0       	breq	.+36     	; 0x24f8 <__fixunssfsi+0x4c>
    24d4:	0e 94 0c 13 	call	0x2618	; 0x2618 <__fp_zero>
    24d8:	b1 e0       	ldi	r27, 0x01	; 1
    24da:	08 95       	ret
    24dc:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__fp_zero>
    24e0:	67 2f       	mov	r22, r23
    24e2:	78 2f       	mov	r23, r24
    24e4:	88 27       	eor	r24, r24
    24e6:	b8 5f       	subi	r27, 0xF8	; 248
    24e8:	39 f0       	breq	.+14     	; 0x24f8 <__fixunssfsi+0x4c>
    24ea:	b9 3f       	cpi	r27, 0xF9	; 249
    24ec:	cc f3       	brlt	.-14     	; 0x24e0 <__fixunssfsi+0x34>
    24ee:	86 95       	lsr	r24
    24f0:	77 95       	ror	r23
    24f2:	67 95       	ror	r22
    24f4:	b3 95       	inc	r27
    24f6:	d9 f7       	brne	.-10     	; 0x24ee <__fixunssfsi+0x42>
    24f8:	3e f4       	brtc	.+14     	; 0x2508 <__fixunssfsi+0x5c>
    24fa:	90 95       	com	r25
    24fc:	80 95       	com	r24
    24fe:	70 95       	com	r23
    2500:	61 95       	neg	r22
    2502:	7f 4f       	sbci	r23, 0xFF	; 255
    2504:	8f 4f       	sbci	r24, 0xFF	; 255
    2506:	9f 4f       	sbci	r25, 0xFF	; 255
    2508:	08 95       	ret

0000250a <__floatunsisf>:
    250a:	e8 94       	clt
    250c:	09 c0       	rjmp	.+18     	; 0x2520 <__floatsisf+0x12>

0000250e <__floatsisf>:
    250e:	97 fb       	bst	r25, 7
    2510:	3e f4       	brtc	.+14     	; 0x2520 <__floatsisf+0x12>
    2512:	90 95       	com	r25
    2514:	80 95       	com	r24
    2516:	70 95       	com	r23
    2518:	61 95       	neg	r22
    251a:	7f 4f       	sbci	r23, 0xFF	; 255
    251c:	8f 4f       	sbci	r24, 0xFF	; 255
    251e:	9f 4f       	sbci	r25, 0xFF	; 255
    2520:	99 23       	and	r25, r25
    2522:	a9 f0       	breq	.+42     	; 0x254e <__floatsisf+0x40>
    2524:	f9 2f       	mov	r31, r25
    2526:	96 e9       	ldi	r25, 0x96	; 150
    2528:	bb 27       	eor	r27, r27
    252a:	93 95       	inc	r25
    252c:	f6 95       	lsr	r31
    252e:	87 95       	ror	r24
    2530:	77 95       	ror	r23
    2532:	67 95       	ror	r22
    2534:	b7 95       	ror	r27
    2536:	f1 11       	cpse	r31, r1
    2538:	f8 cf       	rjmp	.-16     	; 0x252a <__floatsisf+0x1c>
    253a:	fa f4       	brpl	.+62     	; 0x257a <__floatsisf+0x6c>
    253c:	bb 0f       	add	r27, r27
    253e:	11 f4       	brne	.+4      	; 0x2544 <__floatsisf+0x36>
    2540:	60 ff       	sbrs	r22, 0
    2542:	1b c0       	rjmp	.+54     	; 0x257a <__floatsisf+0x6c>
    2544:	6f 5f       	subi	r22, 0xFF	; 255
    2546:	7f 4f       	sbci	r23, 0xFF	; 255
    2548:	8f 4f       	sbci	r24, 0xFF	; 255
    254a:	9f 4f       	sbci	r25, 0xFF	; 255
    254c:	16 c0       	rjmp	.+44     	; 0x257a <__floatsisf+0x6c>
    254e:	88 23       	and	r24, r24
    2550:	11 f0       	breq	.+4      	; 0x2556 <__floatsisf+0x48>
    2552:	96 e9       	ldi	r25, 0x96	; 150
    2554:	11 c0       	rjmp	.+34     	; 0x2578 <__floatsisf+0x6a>
    2556:	77 23       	and	r23, r23
    2558:	21 f0       	breq	.+8      	; 0x2562 <__floatsisf+0x54>
    255a:	9e e8       	ldi	r25, 0x8E	; 142
    255c:	87 2f       	mov	r24, r23
    255e:	76 2f       	mov	r23, r22
    2560:	05 c0       	rjmp	.+10     	; 0x256c <__floatsisf+0x5e>
    2562:	66 23       	and	r22, r22
    2564:	71 f0       	breq	.+28     	; 0x2582 <__floatsisf+0x74>
    2566:	96 e8       	ldi	r25, 0x86	; 134
    2568:	86 2f       	mov	r24, r22
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	2a f0       	brmi	.+10     	; 0x257a <__floatsisf+0x6c>
    2570:	9a 95       	dec	r25
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	88 1f       	adc	r24, r24
    2578:	da f7       	brpl	.-10     	; 0x2570 <__floatsisf+0x62>
    257a:	88 0f       	add	r24, r24
    257c:	96 95       	lsr	r25
    257e:	87 95       	ror	r24
    2580:	97 f9       	bld	r25, 7
    2582:	08 95       	ret

00002584 <__fp_inf>:
    2584:	97 f9       	bld	r25, 7
    2586:	9f 67       	ori	r25, 0x7F	; 127
    2588:	80 e8       	ldi	r24, 0x80	; 128
    258a:	70 e0       	ldi	r23, 0x00	; 0
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	08 95       	ret

00002590 <__fp_nan>:
    2590:	9f ef       	ldi	r25, 0xFF	; 255
    2592:	80 ec       	ldi	r24, 0xC0	; 192
    2594:	08 95       	ret

00002596 <__fp_pscA>:
    2596:	00 24       	eor	r0, r0
    2598:	0a 94       	dec	r0
    259a:	16 16       	cp	r1, r22
    259c:	17 06       	cpc	r1, r23
    259e:	18 06       	cpc	r1, r24
    25a0:	09 06       	cpc	r0, r25
    25a2:	08 95       	ret

000025a4 <__fp_pscB>:
    25a4:	00 24       	eor	r0, r0
    25a6:	0a 94       	dec	r0
    25a8:	12 16       	cp	r1, r18
    25aa:	13 06       	cpc	r1, r19
    25ac:	14 06       	cpc	r1, r20
    25ae:	05 06       	cpc	r0, r21
    25b0:	08 95       	ret

000025b2 <__fp_round>:
    25b2:	09 2e       	mov	r0, r25
    25b4:	03 94       	inc	r0
    25b6:	00 0c       	add	r0, r0
    25b8:	11 f4       	brne	.+4      	; 0x25be <__fp_round+0xc>
    25ba:	88 23       	and	r24, r24
    25bc:	52 f0       	brmi	.+20     	; 0x25d2 <__fp_round+0x20>
    25be:	bb 0f       	add	r27, r27
    25c0:	40 f4       	brcc	.+16     	; 0x25d2 <__fp_round+0x20>
    25c2:	bf 2b       	or	r27, r31
    25c4:	11 f4       	brne	.+4      	; 0x25ca <__fp_round+0x18>
    25c6:	60 ff       	sbrs	r22, 0
    25c8:	04 c0       	rjmp	.+8      	; 0x25d2 <__fp_round+0x20>
    25ca:	6f 5f       	subi	r22, 0xFF	; 255
    25cc:	7f 4f       	sbci	r23, 0xFF	; 255
    25ce:	8f 4f       	sbci	r24, 0xFF	; 255
    25d0:	9f 4f       	sbci	r25, 0xFF	; 255
    25d2:	08 95       	ret

000025d4 <__fp_split3>:
    25d4:	57 fd       	sbrc	r21, 7
    25d6:	90 58       	subi	r25, 0x80	; 128
    25d8:	44 0f       	add	r20, r20
    25da:	55 1f       	adc	r21, r21
    25dc:	59 f0       	breq	.+22     	; 0x25f4 <__fp_splitA+0x10>
    25de:	5f 3f       	cpi	r21, 0xFF	; 255
    25e0:	71 f0       	breq	.+28     	; 0x25fe <__fp_splitA+0x1a>
    25e2:	47 95       	ror	r20

000025e4 <__fp_splitA>:
    25e4:	88 0f       	add	r24, r24
    25e6:	97 fb       	bst	r25, 7
    25e8:	99 1f       	adc	r25, r25
    25ea:	61 f0       	breq	.+24     	; 0x2604 <__fp_splitA+0x20>
    25ec:	9f 3f       	cpi	r25, 0xFF	; 255
    25ee:	79 f0       	breq	.+30     	; 0x260e <__fp_splitA+0x2a>
    25f0:	87 95       	ror	r24
    25f2:	08 95       	ret
    25f4:	12 16       	cp	r1, r18
    25f6:	13 06       	cpc	r1, r19
    25f8:	14 06       	cpc	r1, r20
    25fa:	55 1f       	adc	r21, r21
    25fc:	f2 cf       	rjmp	.-28     	; 0x25e2 <__fp_split3+0xe>
    25fe:	46 95       	lsr	r20
    2600:	f1 df       	rcall	.-30     	; 0x25e4 <__fp_splitA>
    2602:	08 c0       	rjmp	.+16     	; 0x2614 <__fp_splitA+0x30>
    2604:	16 16       	cp	r1, r22
    2606:	17 06       	cpc	r1, r23
    2608:	18 06       	cpc	r1, r24
    260a:	99 1f       	adc	r25, r25
    260c:	f1 cf       	rjmp	.-30     	; 0x25f0 <__fp_splitA+0xc>
    260e:	86 95       	lsr	r24
    2610:	71 05       	cpc	r23, r1
    2612:	61 05       	cpc	r22, r1
    2614:	08 94       	sec
    2616:	08 95       	ret

00002618 <__fp_zero>:
    2618:	e8 94       	clt

0000261a <__fp_szero>:
    261a:	bb 27       	eor	r27, r27
    261c:	66 27       	eor	r22, r22
    261e:	77 27       	eor	r23, r23
    2620:	cb 01       	movw	r24, r22
    2622:	97 f9       	bld	r25, 7
    2624:	08 95       	ret

00002626 <__mulsf3>:
    2626:	0e 94 26 13 	call	0x264c	; 0x264c <__mulsf3x>
    262a:	0c 94 d9 12 	jmp	0x25b2	; 0x25b2 <__fp_round>
    262e:	0e 94 cb 12 	call	0x2596	; 0x2596 <__fp_pscA>
    2632:	38 f0       	brcs	.+14     	; 0x2642 <__mulsf3+0x1c>
    2634:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <__fp_pscB>
    2638:	20 f0       	brcs	.+8      	; 0x2642 <__mulsf3+0x1c>
    263a:	95 23       	and	r25, r21
    263c:	11 f0       	breq	.+4      	; 0x2642 <__mulsf3+0x1c>
    263e:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_inf>
    2642:	0c 94 c8 12 	jmp	0x2590	; 0x2590 <__fp_nan>
    2646:	11 24       	eor	r1, r1
    2648:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__fp_szero>

0000264c <__mulsf3x>:
    264c:	0e 94 ea 12 	call	0x25d4	; 0x25d4 <__fp_split3>
    2650:	70 f3       	brcs	.-36     	; 0x262e <__mulsf3+0x8>

00002652 <__mulsf3_pse>:
    2652:	95 9f       	mul	r25, r21
    2654:	c1 f3       	breq	.-16     	; 0x2646 <__mulsf3+0x20>
    2656:	95 0f       	add	r25, r21
    2658:	50 e0       	ldi	r21, 0x00	; 0
    265a:	55 1f       	adc	r21, r21
    265c:	62 9f       	mul	r22, r18
    265e:	f0 01       	movw	r30, r0
    2660:	72 9f       	mul	r23, r18
    2662:	bb 27       	eor	r27, r27
    2664:	f0 0d       	add	r31, r0
    2666:	b1 1d       	adc	r27, r1
    2668:	63 9f       	mul	r22, r19
    266a:	aa 27       	eor	r26, r26
    266c:	f0 0d       	add	r31, r0
    266e:	b1 1d       	adc	r27, r1
    2670:	aa 1f       	adc	r26, r26
    2672:	64 9f       	mul	r22, r20
    2674:	66 27       	eor	r22, r22
    2676:	b0 0d       	add	r27, r0
    2678:	a1 1d       	adc	r26, r1
    267a:	66 1f       	adc	r22, r22
    267c:	82 9f       	mul	r24, r18
    267e:	22 27       	eor	r18, r18
    2680:	b0 0d       	add	r27, r0
    2682:	a1 1d       	adc	r26, r1
    2684:	62 1f       	adc	r22, r18
    2686:	73 9f       	mul	r23, r19
    2688:	b0 0d       	add	r27, r0
    268a:	a1 1d       	adc	r26, r1
    268c:	62 1f       	adc	r22, r18
    268e:	83 9f       	mul	r24, r19
    2690:	a0 0d       	add	r26, r0
    2692:	61 1d       	adc	r22, r1
    2694:	22 1f       	adc	r18, r18
    2696:	74 9f       	mul	r23, r20
    2698:	33 27       	eor	r19, r19
    269a:	a0 0d       	add	r26, r0
    269c:	61 1d       	adc	r22, r1
    269e:	23 1f       	adc	r18, r19
    26a0:	84 9f       	mul	r24, r20
    26a2:	60 0d       	add	r22, r0
    26a4:	21 1d       	adc	r18, r1
    26a6:	82 2f       	mov	r24, r18
    26a8:	76 2f       	mov	r23, r22
    26aa:	6a 2f       	mov	r22, r26
    26ac:	11 24       	eor	r1, r1
    26ae:	9f 57       	subi	r25, 0x7F	; 127
    26b0:	50 40       	sbci	r21, 0x00	; 0
    26b2:	9a f0       	brmi	.+38     	; 0x26da <__mulsf3_pse+0x88>
    26b4:	f1 f0       	breq	.+60     	; 0x26f2 <__mulsf3_pse+0xa0>
    26b6:	88 23       	and	r24, r24
    26b8:	4a f0       	brmi	.+18     	; 0x26cc <__mulsf3_pse+0x7a>
    26ba:	ee 0f       	add	r30, r30
    26bc:	ff 1f       	adc	r31, r31
    26be:	bb 1f       	adc	r27, r27
    26c0:	66 1f       	adc	r22, r22
    26c2:	77 1f       	adc	r23, r23
    26c4:	88 1f       	adc	r24, r24
    26c6:	91 50       	subi	r25, 0x01	; 1
    26c8:	50 40       	sbci	r21, 0x00	; 0
    26ca:	a9 f7       	brne	.-22     	; 0x26b6 <__mulsf3_pse+0x64>
    26cc:	9e 3f       	cpi	r25, 0xFE	; 254
    26ce:	51 05       	cpc	r21, r1
    26d0:	80 f0       	brcs	.+32     	; 0x26f2 <__mulsf3_pse+0xa0>
    26d2:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__fp_inf>
    26d6:	0c 94 0d 13 	jmp	0x261a	; 0x261a <__fp_szero>
    26da:	5f 3f       	cpi	r21, 0xFF	; 255
    26dc:	e4 f3       	brlt	.-8      	; 0x26d6 <__mulsf3_pse+0x84>
    26de:	98 3e       	cpi	r25, 0xE8	; 232
    26e0:	d4 f3       	brlt	.-12     	; 0x26d6 <__mulsf3_pse+0x84>
    26e2:	86 95       	lsr	r24
    26e4:	77 95       	ror	r23
    26e6:	67 95       	ror	r22
    26e8:	b7 95       	ror	r27
    26ea:	f7 95       	ror	r31
    26ec:	e7 95       	ror	r30
    26ee:	9f 5f       	subi	r25, 0xFF	; 255
    26f0:	c1 f7       	brne	.-16     	; 0x26e2 <__mulsf3_pse+0x90>
    26f2:	fe 2b       	or	r31, r30
    26f4:	88 0f       	add	r24, r24
    26f6:	91 1d       	adc	r25, r1
    26f8:	96 95       	lsr	r25
    26fa:	87 95       	ror	r24
    26fc:	97 f9       	bld	r25, 7
    26fe:	08 95       	ret

00002700 <__udivmodsi4>:
    2700:	a1 e2       	ldi	r26, 0x21	; 33
    2702:	1a 2e       	mov	r1, r26
    2704:	aa 1b       	sub	r26, r26
    2706:	bb 1b       	sub	r27, r27
    2708:	fd 01       	movw	r30, r26
    270a:	0d c0       	rjmp	.+26     	; 0x2726 <__udivmodsi4_ep>

0000270c <__udivmodsi4_loop>:
    270c:	aa 1f       	adc	r26, r26
    270e:	bb 1f       	adc	r27, r27
    2710:	ee 1f       	adc	r30, r30
    2712:	ff 1f       	adc	r31, r31
    2714:	a2 17       	cp	r26, r18
    2716:	b3 07       	cpc	r27, r19
    2718:	e4 07       	cpc	r30, r20
    271a:	f5 07       	cpc	r31, r21
    271c:	20 f0       	brcs	.+8      	; 0x2726 <__udivmodsi4_ep>
    271e:	a2 1b       	sub	r26, r18
    2720:	b3 0b       	sbc	r27, r19
    2722:	e4 0b       	sbc	r30, r20
    2724:	f5 0b       	sbc	r31, r21

00002726 <__udivmodsi4_ep>:
    2726:	66 1f       	adc	r22, r22
    2728:	77 1f       	adc	r23, r23
    272a:	88 1f       	adc	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	1a 94       	dec	r1
    2730:	69 f7       	brne	.-38     	; 0x270c <__udivmodsi4_loop>
    2732:	60 95       	com	r22
    2734:	70 95       	com	r23
    2736:	80 95       	com	r24
    2738:	90 95       	com	r25
    273a:	9b 01       	movw	r18, r22
    273c:	ac 01       	movw	r20, r24
    273e:	bd 01       	movw	r22, r26
    2740:	cf 01       	movw	r24, r30
    2742:	08 95       	ret

00002744 <__divmodsi4>:
    2744:	05 2e       	mov	r0, r21
    2746:	97 fb       	bst	r25, 7
    2748:	1e f4       	brtc	.+6      	; 0x2750 <__divmodsi4+0xc>
    274a:	00 94       	com	r0
    274c:	0e 94 b9 13 	call	0x2772	; 0x2772 <__negsi2>
    2750:	57 fd       	sbrc	r21, 7
    2752:	07 d0       	rcall	.+14     	; 0x2762 <__divmodsi4_neg2>
    2754:	0e 94 80 13 	call	0x2700	; 0x2700 <__udivmodsi4>
    2758:	07 fc       	sbrc	r0, 7
    275a:	03 d0       	rcall	.+6      	; 0x2762 <__divmodsi4_neg2>
    275c:	4e f4       	brtc	.+18     	; 0x2770 <__divmodsi4_exit>
    275e:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__negsi2>

00002762 <__divmodsi4_neg2>:
    2762:	50 95       	com	r21
    2764:	40 95       	com	r20
    2766:	30 95       	com	r19
    2768:	21 95       	neg	r18
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	4f 4f       	sbci	r20, 0xFF	; 255
    276e:	5f 4f       	sbci	r21, 0xFF	; 255

00002770 <__divmodsi4_exit>:
    2770:	08 95       	ret

00002772 <__negsi2>:
    2772:	90 95       	com	r25
    2774:	80 95       	com	r24
    2776:	70 95       	com	r23
    2778:	61 95       	neg	r22
    277a:	7f 4f       	sbci	r23, 0xFF	; 255
    277c:	8f 4f       	sbci	r24, 0xFF	; 255
    277e:	9f 4f       	sbci	r25, 0xFF	; 255
    2780:	08 95       	ret

00002782 <do_rand>:
    2782:	8f 92       	push	r8
    2784:	9f 92       	push	r9
    2786:	af 92       	push	r10
    2788:	bf 92       	push	r11
    278a:	cf 92       	push	r12
    278c:	df 92       	push	r13
    278e:	ef 92       	push	r14
    2790:	ff 92       	push	r15
    2792:	cf 93       	push	r28
    2794:	df 93       	push	r29
    2796:	ec 01       	movw	r28, r24
    2798:	68 81       	ld	r22, Y
    279a:	79 81       	ldd	r23, Y+1	; 0x01
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	9b 81       	ldd	r25, Y+3	; 0x03
    27a0:	61 15       	cp	r22, r1
    27a2:	71 05       	cpc	r23, r1
    27a4:	81 05       	cpc	r24, r1
    27a6:	91 05       	cpc	r25, r1
    27a8:	21 f4       	brne	.+8      	; 0x27b2 <do_rand+0x30>
    27aa:	64 e2       	ldi	r22, 0x24	; 36
    27ac:	79 ed       	ldi	r23, 0xD9	; 217
    27ae:	8b e5       	ldi	r24, 0x5B	; 91
    27b0:	97 e0       	ldi	r25, 0x07	; 7
    27b2:	2d e1       	ldi	r18, 0x1D	; 29
    27b4:	33 ef       	ldi	r19, 0xF3	; 243
    27b6:	41 e0       	ldi	r20, 0x01	; 1
    27b8:	50 e0       	ldi	r21, 0x00	; 0
    27ba:	0e 94 a2 13 	call	0x2744	; 0x2744 <__divmodsi4>
    27be:	49 01       	movw	r8, r18
    27c0:	5a 01       	movw	r10, r20
    27c2:	9b 01       	movw	r18, r22
    27c4:	ac 01       	movw	r20, r24
    27c6:	a7 ea       	ldi	r26, 0xA7	; 167
    27c8:	b1 e4       	ldi	r27, 0x41	; 65
    27ca:	0e 94 1a 18 	call	0x3034	; 0x3034 <__muluhisi3>
    27ce:	6b 01       	movw	r12, r22
    27d0:	7c 01       	movw	r14, r24
    27d2:	ac ee       	ldi	r26, 0xEC	; 236
    27d4:	b4 ef       	ldi	r27, 0xF4	; 244
    27d6:	a5 01       	movw	r20, r10
    27d8:	94 01       	movw	r18, r8
    27da:	0e 94 28 18 	call	0x3050	; 0x3050 <__mulohisi3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	8c 0d       	add	r24, r12
    27e4:	9d 1d       	adc	r25, r13
    27e6:	ae 1d       	adc	r26, r14
    27e8:	bf 1d       	adc	r27, r15
    27ea:	b7 ff       	sbrs	r27, 7
    27ec:	03 c0       	rjmp	.+6      	; 0x27f4 <do_rand+0x72>
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	a1 09       	sbc	r26, r1
    27f2:	b0 48       	sbci	r27, 0x80	; 128
    27f4:	88 83       	st	Y, r24
    27f6:	99 83       	std	Y+1, r25	; 0x01
    27f8:	aa 83       	std	Y+2, r26	; 0x02
    27fa:	bb 83       	std	Y+3, r27	; 0x03
    27fc:	9f 77       	andi	r25, 0x7F	; 127
    27fe:	df 91       	pop	r29
    2800:	cf 91       	pop	r28
    2802:	ff 90       	pop	r15
    2804:	ef 90       	pop	r14
    2806:	df 90       	pop	r13
    2808:	cf 90       	pop	r12
    280a:	bf 90       	pop	r11
    280c:	af 90       	pop	r10
    280e:	9f 90       	pop	r9
    2810:	8f 90       	pop	r8
    2812:	08 95       	ret

00002814 <rand_r>:
    2814:	0e 94 c1 13 	call	0x2782	; 0x2782 <do_rand>
    2818:	08 95       	ret

0000281a <rand>:
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	91 e0       	ldi	r25, 0x01	; 1
    281e:	0e 94 c1 13 	call	0x2782	; 0x2782 <do_rand>
    2822:	08 95       	ret

00002824 <srand>:
    2824:	a0 e0       	ldi	r26, 0x00	; 0
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    282c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    2830:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    2834:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    2838:	08 95       	ret

0000283a <random_r>:
    283a:	8f 92       	push	r8
    283c:	9f 92       	push	r9
    283e:	af 92       	push	r10
    2840:	bf 92       	push	r11
    2842:	cf 92       	push	r12
    2844:	df 92       	push	r13
    2846:	ef 92       	push	r14
    2848:	ff 92       	push	r15
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
    284e:	ec 01       	movw	r28, r24
    2850:	68 81       	ld	r22, Y
    2852:	79 81       	ldd	r23, Y+1	; 0x01
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	61 15       	cp	r22, r1
    285a:	71 05       	cpc	r23, r1
    285c:	81 05       	cpc	r24, r1
    285e:	91 05       	cpc	r25, r1
    2860:	21 f4       	brne	.+8      	; 0x286a <random_r+0x30>
    2862:	64 e2       	ldi	r22, 0x24	; 36
    2864:	79 ed       	ldi	r23, 0xD9	; 217
    2866:	8b e5       	ldi	r24, 0x5B	; 91
    2868:	97 e0       	ldi	r25, 0x07	; 7
    286a:	2d e1       	ldi	r18, 0x1D	; 29
    286c:	33 ef       	ldi	r19, 0xF3	; 243
    286e:	41 e0       	ldi	r20, 0x01	; 1
    2870:	50 e0       	ldi	r21, 0x00	; 0
    2872:	0e 94 a2 13 	call	0x2744	; 0x2744 <__divmodsi4>
    2876:	49 01       	movw	r8, r18
    2878:	5a 01       	movw	r10, r20
    287a:	9b 01       	movw	r18, r22
    287c:	ac 01       	movw	r20, r24
    287e:	a7 ea       	ldi	r26, 0xA7	; 167
    2880:	b1 e4       	ldi	r27, 0x41	; 65
    2882:	0e 94 1a 18 	call	0x3034	; 0x3034 <__muluhisi3>
    2886:	6b 01       	movw	r12, r22
    2888:	7c 01       	movw	r14, r24
    288a:	ac ee       	ldi	r26, 0xEC	; 236
    288c:	b4 ef       	ldi	r27, 0xF4	; 244
    288e:	a5 01       	movw	r20, r10
    2890:	94 01       	movw	r18, r8
    2892:	0e 94 28 18 	call	0x3050	; 0x3050 <__mulohisi3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	8c 0d       	add	r24, r12
    289c:	9d 1d       	adc	r25, r13
    289e:	ae 1d       	adc	r26, r14
    28a0:	bf 1d       	adc	r27, r15
    28a2:	b7 ff       	sbrs	r27, 7
    28a4:	03 c0       	rjmp	.+6      	; 0x28ac <random_r+0x72>
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	a1 09       	sbc	r26, r1
    28aa:	b0 48       	sbci	r27, 0x80	; 128
    28ac:	88 83       	st	Y, r24
    28ae:	99 83       	std	Y+1, r25	; 0x01
    28b0:	aa 83       	std	Y+2, r26	; 0x02
    28b2:	bb 83       	std	Y+3, r27	; 0x03
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	9f 77       	andi	r25, 0x7F	; 127
    28ba:	df 91       	pop	r29
    28bc:	cf 91       	pop	r28
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	df 90       	pop	r13
    28c4:	cf 90       	pop	r12
    28c6:	bf 90       	pop	r11
    28c8:	af 90       	pop	r10
    28ca:	9f 90       	pop	r9
    28cc:	8f 90       	pop	r8
    28ce:	08 95       	ret

000028d0 <random>:
    28d0:	8f 92       	push	r8
    28d2:	9f 92       	push	r9
    28d4:	af 92       	push	r10
    28d6:	bf 92       	push	r11
    28d8:	cf 92       	push	r12
    28da:	df 92       	push	r13
    28dc:	ef 92       	push	r14
    28de:	ff 92       	push	r15
    28e0:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <next>
    28e4:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <next+0x1>
    28e8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <next+0x2>
    28ec:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <next+0x3>
    28f0:	61 15       	cp	r22, r1
    28f2:	71 05       	cpc	r23, r1
    28f4:	81 05       	cpc	r24, r1
    28f6:	91 05       	cpc	r25, r1
    28f8:	21 f4       	brne	.+8      	; 0x2902 <random+0x32>
    28fa:	64 e2       	ldi	r22, 0x24	; 36
    28fc:	79 ed       	ldi	r23, 0xD9	; 217
    28fe:	8b e5       	ldi	r24, 0x5B	; 91
    2900:	97 e0       	ldi	r25, 0x07	; 7
    2902:	2d e1       	ldi	r18, 0x1D	; 29
    2904:	33 ef       	ldi	r19, 0xF3	; 243
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	50 e0       	ldi	r21, 0x00	; 0
    290a:	0e 94 a2 13 	call	0x2744	; 0x2744 <__divmodsi4>
    290e:	49 01       	movw	r8, r18
    2910:	5a 01       	movw	r10, r20
    2912:	9b 01       	movw	r18, r22
    2914:	ac 01       	movw	r20, r24
    2916:	a7 ea       	ldi	r26, 0xA7	; 167
    2918:	b1 e4       	ldi	r27, 0x41	; 65
    291a:	0e 94 1a 18 	call	0x3034	; 0x3034 <__muluhisi3>
    291e:	6b 01       	movw	r12, r22
    2920:	7c 01       	movw	r14, r24
    2922:	ac ee       	ldi	r26, 0xEC	; 236
    2924:	b4 ef       	ldi	r27, 0xF4	; 244
    2926:	a5 01       	movw	r20, r10
    2928:	94 01       	movw	r18, r8
    292a:	0e 94 28 18 	call	0x3050	; 0x3050 <__mulohisi3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8c 0d       	add	r24, r12
    2934:	9d 1d       	adc	r25, r13
    2936:	ae 1d       	adc	r26, r14
    2938:	bf 1d       	adc	r27, r15
    293a:	b7 ff       	sbrs	r27, 7
    293c:	03 c0       	rjmp	.+6      	; 0x2944 <random+0x74>
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	a1 09       	sbc	r26, r1
    2942:	b0 48       	sbci	r27, 0x80	; 128
    2944:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <next>
    2948:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <next+0x1>
    294c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <next+0x2>
    2950:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <next+0x3>
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	9f 77       	andi	r25, 0x7F	; 127
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	bf 90       	pop	r11
    2964:	af 90       	pop	r10
    2966:	9f 90       	pop	r9
    2968:	8f 90       	pop	r8
    296a:	08 95       	ret

0000296c <srandom>:
    296c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <next>
    2970:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <next+0x1>
    2974:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next+0x2>
    2978:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x3>
    297c:	08 95       	ret

0000297e <fgetc>:
    297e:	cf 93       	push	r28
    2980:	df 93       	push	r29
    2982:	ec 01       	movw	r28, r24
    2984:	2b 81       	ldd	r18, Y+3	; 0x03
    2986:	20 ff       	sbrs	r18, 0
    2988:	33 c0       	rjmp	.+102    	; 0x29f0 <fgetc+0x72>
    298a:	26 ff       	sbrs	r18, 6
    298c:	0a c0       	rjmp	.+20     	; 0x29a2 <fgetc+0x24>
    298e:	2f 7b       	andi	r18, 0xBF	; 191
    2990:	2b 83       	std	Y+3, r18	; 0x03
    2992:	8e 81       	ldd	r24, Y+6	; 0x06
    2994:	9f 81       	ldd	r25, Y+7	; 0x07
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	9f 83       	std	Y+7, r25	; 0x07
    299a:	8e 83       	std	Y+6, r24	; 0x06
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	29 c0       	rjmp	.+82     	; 0x29f4 <fgetc+0x76>
    29a2:	22 ff       	sbrs	r18, 2
    29a4:	0f c0       	rjmp	.+30     	; 0x29c4 <fgetc+0x46>
    29a6:	e8 81       	ld	r30, Y
    29a8:	f9 81       	ldd	r31, Y+1	; 0x01
    29aa:	80 81       	ld	r24, Z
    29ac:	08 2e       	mov	r0, r24
    29ae:	00 0c       	add	r0, r0
    29b0:	99 0b       	sbc	r25, r25
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	19 f4       	brne	.+6      	; 0x29bc <fgetc+0x3e>
    29b6:	20 62       	ori	r18, 0x20	; 32
    29b8:	2b 83       	std	Y+3, r18	; 0x03
    29ba:	1a c0       	rjmp	.+52     	; 0x29f0 <fgetc+0x72>
    29bc:	31 96       	adiw	r30, 0x01	; 1
    29be:	f9 83       	std	Y+1, r31	; 0x01
    29c0:	e8 83       	st	Y, r30
    29c2:	0e c0       	rjmp	.+28     	; 0x29e0 <fgetc+0x62>
    29c4:	ea 85       	ldd	r30, Y+10	; 0x0a
    29c6:	fb 85       	ldd	r31, Y+11	; 0x0b
    29c8:	09 95       	icall
    29ca:	97 ff       	sbrs	r25, 7
    29cc:	09 c0       	rjmp	.+18     	; 0x29e0 <fgetc+0x62>
    29ce:	2b 81       	ldd	r18, Y+3	; 0x03
    29d0:	01 96       	adiw	r24, 0x01	; 1
    29d2:	11 f0       	breq	.+4      	; 0x29d8 <fgetc+0x5a>
    29d4:	80 e2       	ldi	r24, 0x20	; 32
    29d6:	01 c0       	rjmp	.+2      	; 0x29da <fgetc+0x5c>
    29d8:	80 e1       	ldi	r24, 0x10	; 16
    29da:	82 2b       	or	r24, r18
    29dc:	8b 83       	std	Y+3, r24	; 0x03
    29de:	08 c0       	rjmp	.+16     	; 0x29f0 <fgetc+0x72>
    29e0:	2e 81       	ldd	r18, Y+6	; 0x06
    29e2:	3f 81       	ldd	r19, Y+7	; 0x07
    29e4:	2f 5f       	subi	r18, 0xFF	; 255
    29e6:	3f 4f       	sbci	r19, 0xFF	; 255
    29e8:	3f 83       	std	Y+7, r19	; 0x07
    29ea:	2e 83       	std	Y+6, r18	; 0x06
    29ec:	99 27       	eor	r25, r25
    29ee:	02 c0       	rjmp	.+4      	; 0x29f4 <fgetc+0x76>
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	9f ef       	ldi	r25, 0xFF	; 255
    29f4:	df 91       	pop	r29
    29f6:	cf 91       	pop	r28
    29f8:	08 95       	ret

000029fa <printf>:
    29fa:	a0 e0       	ldi	r26, 0x00	; 0
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e3 e0       	ldi	r30, 0x03	; 3
    2a00:	f5 e1       	ldi	r31, 0x15	; 21
    2a02:	0c 94 3d 18 	jmp	0x307a	; 0x307a <__prologue_saves__+0x20>
    2a06:	ae 01       	movw	r20, r28
    2a08:	4b 5f       	subi	r20, 0xFB	; 251
    2a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0c:	fa 01       	movw	r30, r20
    2a0e:	61 91       	ld	r22, Z+
    2a10:	71 91       	ld	r23, Z+
    2a12:	af 01       	movw	r20, r30
    2a14:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__iob+0x2>
    2a18:	90 91 29 04 	lds	r25, 0x0429	; 0x800429 <__iob+0x3>
    2a1c:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vfprintf>
    2a20:	e2 e0       	ldi	r30, 0x02	; 2
    2a22:	0c 94 59 18 	jmp	0x30b2	; 0x30b2 <__epilogue_restores__+0x20>

00002a26 <printf_P>:
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e9 e1       	ldi	r30, 0x19	; 25
    2a2c:	f5 e1       	ldi	r31, 0x15	; 21
    2a2e:	0c 94 3b 18 	jmp	0x3076	; 0x3076 <__prologue_saves__+0x1c>
    2a32:	ae 01       	movw	r20, r28
    2a34:	49 5f       	subi	r20, 0xF9	; 249
    2a36:	5f 4f       	sbci	r21, 0xFF	; 255
    2a38:	da 01       	movw	r26, r20
    2a3a:	6d 91       	ld	r22, X+
    2a3c:	7d 91       	ld	r23, X+
    2a3e:	ad 01       	movw	r20, r26
    2a40:	06 e2       	ldi	r16, 0x26	; 38
    2a42:	14 e0       	ldi	r17, 0x04	; 4
    2a44:	f8 01       	movw	r30, r16
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	93 81       	ldd	r25, Z+3	; 0x03
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	13 96       	adiw	r26, 0x03	; 3
    2a4e:	2c 91       	ld	r18, X
    2a50:	13 97       	sbiw	r26, 0x03	; 3
    2a52:	28 60       	ori	r18, 0x08	; 8
    2a54:	13 96       	adiw	r26, 0x03	; 3
    2a56:	2c 93       	st	X, r18
    2a58:	0e 94 40 15 	call	0x2a80	; 0x2a80 <vfprintf>
    2a5c:	d8 01       	movw	r26, r16
    2a5e:	12 96       	adiw	r26, 0x02	; 2
    2a60:	ed 91       	ld	r30, X+
    2a62:	fc 91       	ld	r31, X
    2a64:	13 97       	sbiw	r26, 0x03	; 3
    2a66:	23 81       	ldd	r18, Z+3	; 0x03
    2a68:	27 7f       	andi	r18, 0xF7	; 247
    2a6a:	23 83       	std	Z+3, r18	; 0x03
    2a6c:	e4 e0       	ldi	r30, 0x04	; 4
    2a6e:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <__epilogue_restores__+0x1c>

00002a72 <putchar>:
    2a72:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <__iob+0x2>
    2a76:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <__iob+0x3>
    2a7a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2a7e:	08 95       	ret

00002a80 <vfprintf>:
    2a80:	ab e0       	ldi	r26, 0x0B	; 11
    2a82:	b0 e0       	ldi	r27, 0x00	; 0
    2a84:	e6 e4       	ldi	r30, 0x46	; 70
    2a86:	f5 e1       	ldi	r31, 0x15	; 21
    2a88:	0c 94 2d 18 	jmp	0x305a	; 0x305a <__prologue_saves__>
    2a8c:	6c 01       	movw	r12, r24
    2a8e:	7b 01       	movw	r14, r22
    2a90:	8a 01       	movw	r16, r20
    2a92:	fc 01       	movw	r30, r24
    2a94:	17 82       	std	Z+7, r1	; 0x07
    2a96:	16 82       	std	Z+6, r1	; 0x06
    2a98:	83 81       	ldd	r24, Z+3	; 0x03
    2a9a:	81 ff       	sbrs	r24, 1
    2a9c:	cc c1       	rjmp	.+920    	; 0x2e36 <vfprintf+0x3b6>
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	01 96       	adiw	r24, 0x01	; 1
    2aa2:	3c 01       	movw	r6, r24
    2aa4:	f6 01       	movw	r30, r12
    2aa6:	93 81       	ldd	r25, Z+3	; 0x03
    2aa8:	f7 01       	movw	r30, r14
    2aaa:	93 fd       	sbrc	r25, 3
    2aac:	85 91       	lpm	r24, Z+
    2aae:	93 ff       	sbrs	r25, 3
    2ab0:	81 91       	ld	r24, Z+
    2ab2:	7f 01       	movw	r14, r30
    2ab4:	88 23       	and	r24, r24
    2ab6:	09 f4       	brne	.+2      	; 0x2aba <vfprintf+0x3a>
    2ab8:	ba c1       	rjmp	.+884    	; 0x2e2e <vfprintf+0x3ae>
    2aba:	85 32       	cpi	r24, 0x25	; 37
    2abc:	39 f4       	brne	.+14     	; 0x2acc <vfprintf+0x4c>
    2abe:	93 fd       	sbrc	r25, 3
    2ac0:	85 91       	lpm	r24, Z+
    2ac2:	93 ff       	sbrs	r25, 3
    2ac4:	81 91       	ld	r24, Z+
    2ac6:	7f 01       	movw	r14, r30
    2ac8:	85 32       	cpi	r24, 0x25	; 37
    2aca:	29 f4       	brne	.+10     	; 0x2ad6 <vfprintf+0x56>
    2acc:	b6 01       	movw	r22, r12
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2ad4:	e7 cf       	rjmp	.-50     	; 0x2aa4 <vfprintf+0x24>
    2ad6:	91 2c       	mov	r9, r1
    2ad8:	21 2c       	mov	r2, r1
    2ada:	31 2c       	mov	r3, r1
    2adc:	ff e1       	ldi	r31, 0x1F	; 31
    2ade:	f3 15       	cp	r31, r3
    2ae0:	d8 f0       	brcs	.+54     	; 0x2b18 <vfprintf+0x98>
    2ae2:	8b 32       	cpi	r24, 0x2B	; 43
    2ae4:	79 f0       	breq	.+30     	; 0x2b04 <vfprintf+0x84>
    2ae6:	38 f4       	brcc	.+14     	; 0x2af6 <vfprintf+0x76>
    2ae8:	80 32       	cpi	r24, 0x20	; 32
    2aea:	79 f0       	breq	.+30     	; 0x2b0a <vfprintf+0x8a>
    2aec:	83 32       	cpi	r24, 0x23	; 35
    2aee:	a1 f4       	brne	.+40     	; 0x2b18 <vfprintf+0x98>
    2af0:	23 2d       	mov	r18, r3
    2af2:	20 61       	ori	r18, 0x10	; 16
    2af4:	1d c0       	rjmp	.+58     	; 0x2b30 <vfprintf+0xb0>
    2af6:	8d 32       	cpi	r24, 0x2D	; 45
    2af8:	61 f0       	breq	.+24     	; 0x2b12 <vfprintf+0x92>
    2afa:	80 33       	cpi	r24, 0x30	; 48
    2afc:	69 f4       	brne	.+26     	; 0x2b18 <vfprintf+0x98>
    2afe:	23 2d       	mov	r18, r3
    2b00:	21 60       	ori	r18, 0x01	; 1
    2b02:	16 c0       	rjmp	.+44     	; 0x2b30 <vfprintf+0xb0>
    2b04:	83 2d       	mov	r24, r3
    2b06:	82 60       	ori	r24, 0x02	; 2
    2b08:	38 2e       	mov	r3, r24
    2b0a:	e3 2d       	mov	r30, r3
    2b0c:	e4 60       	ori	r30, 0x04	; 4
    2b0e:	3e 2e       	mov	r3, r30
    2b10:	2a c0       	rjmp	.+84     	; 0x2b66 <vfprintf+0xe6>
    2b12:	f3 2d       	mov	r31, r3
    2b14:	f8 60       	ori	r31, 0x08	; 8
    2b16:	1d c0       	rjmp	.+58     	; 0x2b52 <vfprintf+0xd2>
    2b18:	37 fc       	sbrc	r3, 7
    2b1a:	2d c0       	rjmp	.+90     	; 0x2b76 <vfprintf+0xf6>
    2b1c:	20 ed       	ldi	r18, 0xD0	; 208
    2b1e:	28 0f       	add	r18, r24
    2b20:	2a 30       	cpi	r18, 0x0A	; 10
    2b22:	40 f0       	brcs	.+16     	; 0x2b34 <vfprintf+0xb4>
    2b24:	8e 32       	cpi	r24, 0x2E	; 46
    2b26:	b9 f4       	brne	.+46     	; 0x2b56 <vfprintf+0xd6>
    2b28:	36 fc       	sbrc	r3, 6
    2b2a:	81 c1       	rjmp	.+770    	; 0x2e2e <vfprintf+0x3ae>
    2b2c:	23 2d       	mov	r18, r3
    2b2e:	20 64       	ori	r18, 0x40	; 64
    2b30:	32 2e       	mov	r3, r18
    2b32:	19 c0       	rjmp	.+50     	; 0x2b66 <vfprintf+0xe6>
    2b34:	36 fe       	sbrs	r3, 6
    2b36:	06 c0       	rjmp	.+12     	; 0x2b44 <vfprintf+0xc4>
    2b38:	8a e0       	ldi	r24, 0x0A	; 10
    2b3a:	98 9e       	mul	r9, r24
    2b3c:	20 0d       	add	r18, r0
    2b3e:	11 24       	eor	r1, r1
    2b40:	92 2e       	mov	r9, r18
    2b42:	11 c0       	rjmp	.+34     	; 0x2b66 <vfprintf+0xe6>
    2b44:	ea e0       	ldi	r30, 0x0A	; 10
    2b46:	2e 9e       	mul	r2, r30
    2b48:	20 0d       	add	r18, r0
    2b4a:	11 24       	eor	r1, r1
    2b4c:	22 2e       	mov	r2, r18
    2b4e:	f3 2d       	mov	r31, r3
    2b50:	f0 62       	ori	r31, 0x20	; 32
    2b52:	3f 2e       	mov	r3, r31
    2b54:	08 c0       	rjmp	.+16     	; 0x2b66 <vfprintf+0xe6>
    2b56:	8c 36       	cpi	r24, 0x6C	; 108
    2b58:	21 f4       	brne	.+8      	; 0x2b62 <vfprintf+0xe2>
    2b5a:	83 2d       	mov	r24, r3
    2b5c:	80 68       	ori	r24, 0x80	; 128
    2b5e:	38 2e       	mov	r3, r24
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <vfprintf+0xe6>
    2b62:	88 36       	cpi	r24, 0x68	; 104
    2b64:	41 f4       	brne	.+16     	; 0x2b76 <vfprintf+0xf6>
    2b66:	f7 01       	movw	r30, r14
    2b68:	93 fd       	sbrc	r25, 3
    2b6a:	85 91       	lpm	r24, Z+
    2b6c:	93 ff       	sbrs	r25, 3
    2b6e:	81 91       	ld	r24, Z+
    2b70:	7f 01       	movw	r14, r30
    2b72:	81 11       	cpse	r24, r1
    2b74:	b3 cf       	rjmp	.-154    	; 0x2adc <vfprintf+0x5c>
    2b76:	98 2f       	mov	r25, r24
    2b78:	9f 7d       	andi	r25, 0xDF	; 223
    2b7a:	95 54       	subi	r25, 0x45	; 69
    2b7c:	93 30       	cpi	r25, 0x03	; 3
    2b7e:	28 f4       	brcc	.+10     	; 0x2b8a <vfprintf+0x10a>
    2b80:	0c 5f       	subi	r16, 0xFC	; 252
    2b82:	1f 4f       	sbci	r17, 0xFF	; 255
    2b84:	9f e3       	ldi	r25, 0x3F	; 63
    2b86:	99 83       	std	Y+1, r25	; 0x01
    2b88:	0d c0       	rjmp	.+26     	; 0x2ba4 <vfprintf+0x124>
    2b8a:	83 36       	cpi	r24, 0x63	; 99
    2b8c:	31 f0       	breq	.+12     	; 0x2b9a <vfprintf+0x11a>
    2b8e:	83 37       	cpi	r24, 0x73	; 115
    2b90:	71 f0       	breq	.+28     	; 0x2bae <vfprintf+0x12e>
    2b92:	83 35       	cpi	r24, 0x53	; 83
    2b94:	09 f0       	breq	.+2      	; 0x2b98 <vfprintf+0x118>
    2b96:	59 c0       	rjmp	.+178    	; 0x2c4a <vfprintf+0x1ca>
    2b98:	21 c0       	rjmp	.+66     	; 0x2bdc <vfprintf+0x15c>
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	80 81       	ld	r24, Z
    2b9e:	89 83       	std	Y+1, r24	; 0x01
    2ba0:	0e 5f       	subi	r16, 0xFE	; 254
    2ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba4:	88 24       	eor	r8, r8
    2ba6:	83 94       	inc	r8
    2ba8:	91 2c       	mov	r9, r1
    2baa:	53 01       	movw	r10, r6
    2bac:	13 c0       	rjmp	.+38     	; 0x2bd4 <vfprintf+0x154>
    2bae:	28 01       	movw	r4, r16
    2bb0:	f2 e0       	ldi	r31, 0x02	; 2
    2bb2:	4f 0e       	add	r4, r31
    2bb4:	51 1c       	adc	r5, r1
    2bb6:	f8 01       	movw	r30, r16
    2bb8:	a0 80       	ld	r10, Z
    2bba:	b1 80       	ldd	r11, Z+1	; 0x01
    2bbc:	36 fe       	sbrs	r3, 6
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <vfprintf+0x146>
    2bc0:	69 2d       	mov	r22, r9
    2bc2:	70 e0       	ldi	r23, 0x00	; 0
    2bc4:	02 c0       	rjmp	.+4      	; 0x2bca <vfprintf+0x14a>
    2bc6:	6f ef       	ldi	r22, 0xFF	; 255
    2bc8:	7f ef       	ldi	r23, 0xFF	; 255
    2bca:	c5 01       	movw	r24, r10
    2bcc:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <strnlen>
    2bd0:	4c 01       	movw	r8, r24
    2bd2:	82 01       	movw	r16, r4
    2bd4:	f3 2d       	mov	r31, r3
    2bd6:	ff 77       	andi	r31, 0x7F	; 127
    2bd8:	3f 2e       	mov	r3, r31
    2bda:	16 c0       	rjmp	.+44     	; 0x2c08 <vfprintf+0x188>
    2bdc:	28 01       	movw	r4, r16
    2bde:	22 e0       	ldi	r18, 0x02	; 2
    2be0:	42 0e       	add	r4, r18
    2be2:	51 1c       	adc	r5, r1
    2be4:	f8 01       	movw	r30, r16
    2be6:	a0 80       	ld	r10, Z
    2be8:	b1 80       	ldd	r11, Z+1	; 0x01
    2bea:	36 fe       	sbrs	r3, 6
    2bec:	03 c0       	rjmp	.+6      	; 0x2bf4 <vfprintf+0x174>
    2bee:	69 2d       	mov	r22, r9
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	02 c0       	rjmp	.+4      	; 0x2bf8 <vfprintf+0x178>
    2bf4:	6f ef       	ldi	r22, 0xFF	; 255
    2bf6:	7f ef       	ldi	r23, 0xFF	; 255
    2bf8:	c5 01       	movw	r24, r10
    2bfa:	0e 94 21 17 	call	0x2e42	; 0x2e42 <strnlen_P>
    2bfe:	4c 01       	movw	r8, r24
    2c00:	f3 2d       	mov	r31, r3
    2c02:	f0 68       	ori	r31, 0x80	; 128
    2c04:	3f 2e       	mov	r3, r31
    2c06:	82 01       	movw	r16, r4
    2c08:	33 fc       	sbrc	r3, 3
    2c0a:	1b c0       	rjmp	.+54     	; 0x2c42 <vfprintf+0x1c2>
    2c0c:	82 2d       	mov	r24, r2
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	88 16       	cp	r8, r24
    2c12:	99 06       	cpc	r9, r25
    2c14:	b0 f4       	brcc	.+44     	; 0x2c42 <vfprintf+0x1c2>
    2c16:	b6 01       	movw	r22, r12
    2c18:	80 e2       	ldi	r24, 0x20	; 32
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2c20:	2a 94       	dec	r2
    2c22:	f4 cf       	rjmp	.-24     	; 0x2c0c <vfprintf+0x18c>
    2c24:	f5 01       	movw	r30, r10
    2c26:	37 fc       	sbrc	r3, 7
    2c28:	85 91       	lpm	r24, Z+
    2c2a:	37 fe       	sbrs	r3, 7
    2c2c:	81 91       	ld	r24, Z+
    2c2e:	5f 01       	movw	r10, r30
    2c30:	b6 01       	movw	r22, r12
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2c38:	21 10       	cpse	r2, r1
    2c3a:	2a 94       	dec	r2
    2c3c:	21 e0       	ldi	r18, 0x01	; 1
    2c3e:	82 1a       	sub	r8, r18
    2c40:	91 08       	sbc	r9, r1
    2c42:	81 14       	cp	r8, r1
    2c44:	91 04       	cpc	r9, r1
    2c46:	71 f7       	brne	.-36     	; 0x2c24 <vfprintf+0x1a4>
    2c48:	e8 c0       	rjmp	.+464    	; 0x2e1a <vfprintf+0x39a>
    2c4a:	84 36       	cpi	r24, 0x64	; 100
    2c4c:	11 f0       	breq	.+4      	; 0x2c52 <vfprintf+0x1d2>
    2c4e:	89 36       	cpi	r24, 0x69	; 105
    2c50:	41 f5       	brne	.+80     	; 0x2ca2 <vfprintf+0x222>
    2c52:	f8 01       	movw	r30, r16
    2c54:	37 fe       	sbrs	r3, 7
    2c56:	07 c0       	rjmp	.+14     	; 0x2c66 <vfprintf+0x1e6>
    2c58:	60 81       	ld	r22, Z
    2c5a:	71 81       	ldd	r23, Z+1	; 0x01
    2c5c:	82 81       	ldd	r24, Z+2	; 0x02
    2c5e:	93 81       	ldd	r25, Z+3	; 0x03
    2c60:	0c 5f       	subi	r16, 0xFC	; 252
    2c62:	1f 4f       	sbci	r17, 0xFF	; 255
    2c64:	08 c0       	rjmp	.+16     	; 0x2c76 <vfprintf+0x1f6>
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	07 2e       	mov	r0, r23
    2c6c:	00 0c       	add	r0, r0
    2c6e:	88 0b       	sbc	r24, r24
    2c70:	99 0b       	sbc	r25, r25
    2c72:	0e 5f       	subi	r16, 0xFE	; 254
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	f3 2d       	mov	r31, r3
    2c78:	ff 76       	andi	r31, 0x6F	; 111
    2c7a:	3f 2e       	mov	r3, r31
    2c7c:	97 ff       	sbrs	r25, 7
    2c7e:	09 c0       	rjmp	.+18     	; 0x2c92 <vfprintf+0x212>
    2c80:	90 95       	com	r25
    2c82:	80 95       	com	r24
    2c84:	70 95       	com	r23
    2c86:	61 95       	neg	r22
    2c88:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8a:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8c:	9f 4f       	sbci	r25, 0xFF	; 255
    2c8e:	f0 68       	ori	r31, 0x80	; 128
    2c90:	3f 2e       	mov	r3, r31
    2c92:	2a e0       	ldi	r18, 0x0A	; 10
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	a3 01       	movw	r20, r6
    2c98:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__ultoa_invert>
    2c9c:	88 2e       	mov	r8, r24
    2c9e:	86 18       	sub	r8, r6
    2ca0:	45 c0       	rjmp	.+138    	; 0x2d2c <vfprintf+0x2ac>
    2ca2:	85 37       	cpi	r24, 0x75	; 117
    2ca4:	31 f4       	brne	.+12     	; 0x2cb2 <vfprintf+0x232>
    2ca6:	23 2d       	mov	r18, r3
    2ca8:	2f 7e       	andi	r18, 0xEF	; 239
    2caa:	b2 2e       	mov	r11, r18
    2cac:	2a e0       	ldi	r18, 0x0A	; 10
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	25 c0       	rjmp	.+74     	; 0x2cfc <vfprintf+0x27c>
    2cb2:	93 2d       	mov	r25, r3
    2cb4:	99 7f       	andi	r25, 0xF9	; 249
    2cb6:	b9 2e       	mov	r11, r25
    2cb8:	8f 36       	cpi	r24, 0x6F	; 111
    2cba:	c1 f0       	breq	.+48     	; 0x2cec <vfprintf+0x26c>
    2cbc:	18 f4       	brcc	.+6      	; 0x2cc4 <vfprintf+0x244>
    2cbe:	88 35       	cpi	r24, 0x58	; 88
    2cc0:	79 f0       	breq	.+30     	; 0x2ce0 <vfprintf+0x260>
    2cc2:	b5 c0       	rjmp	.+362    	; 0x2e2e <vfprintf+0x3ae>
    2cc4:	80 37       	cpi	r24, 0x70	; 112
    2cc6:	19 f0       	breq	.+6      	; 0x2cce <vfprintf+0x24e>
    2cc8:	88 37       	cpi	r24, 0x78	; 120
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <vfprintf+0x254>
    2ccc:	b0 c0       	rjmp	.+352    	; 0x2e2e <vfprintf+0x3ae>
    2cce:	e9 2f       	mov	r30, r25
    2cd0:	e0 61       	ori	r30, 0x10	; 16
    2cd2:	be 2e       	mov	r11, r30
    2cd4:	b4 fe       	sbrs	r11, 4
    2cd6:	0d c0       	rjmp	.+26     	; 0x2cf2 <vfprintf+0x272>
    2cd8:	fb 2d       	mov	r31, r11
    2cda:	f4 60       	ori	r31, 0x04	; 4
    2cdc:	bf 2e       	mov	r11, r31
    2cde:	09 c0       	rjmp	.+18     	; 0x2cf2 <vfprintf+0x272>
    2ce0:	34 fe       	sbrs	r3, 4
    2ce2:	0a c0       	rjmp	.+20     	; 0x2cf8 <vfprintf+0x278>
    2ce4:	29 2f       	mov	r18, r25
    2ce6:	26 60       	ori	r18, 0x06	; 6
    2ce8:	b2 2e       	mov	r11, r18
    2cea:	06 c0       	rjmp	.+12     	; 0x2cf8 <vfprintf+0x278>
    2cec:	28 e0       	ldi	r18, 0x08	; 8
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	05 c0       	rjmp	.+10     	; 0x2cfc <vfprintf+0x27c>
    2cf2:	20 e1       	ldi	r18, 0x10	; 16
    2cf4:	30 e0       	ldi	r19, 0x00	; 0
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <vfprintf+0x27c>
    2cf8:	20 e1       	ldi	r18, 0x10	; 16
    2cfa:	32 e0       	ldi	r19, 0x02	; 2
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	b7 fe       	sbrs	r11, 7
    2d00:	07 c0       	rjmp	.+14     	; 0x2d10 <vfprintf+0x290>
    2d02:	60 81       	ld	r22, Z
    2d04:	71 81       	ldd	r23, Z+1	; 0x01
    2d06:	82 81       	ldd	r24, Z+2	; 0x02
    2d08:	93 81       	ldd	r25, Z+3	; 0x03
    2d0a:	0c 5f       	subi	r16, 0xFC	; 252
    2d0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0e:	06 c0       	rjmp	.+12     	; 0x2d1c <vfprintf+0x29c>
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	80 e0       	ldi	r24, 0x00	; 0
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	0e 5f       	subi	r16, 0xFE	; 254
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	a3 01       	movw	r20, r6
    2d1e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <__ultoa_invert>
    2d22:	88 2e       	mov	r8, r24
    2d24:	86 18       	sub	r8, r6
    2d26:	fb 2d       	mov	r31, r11
    2d28:	ff 77       	andi	r31, 0x7F	; 127
    2d2a:	3f 2e       	mov	r3, r31
    2d2c:	36 fe       	sbrs	r3, 6
    2d2e:	0d c0       	rjmp	.+26     	; 0x2d4a <vfprintf+0x2ca>
    2d30:	23 2d       	mov	r18, r3
    2d32:	2e 7f       	andi	r18, 0xFE	; 254
    2d34:	a2 2e       	mov	r10, r18
    2d36:	89 14       	cp	r8, r9
    2d38:	58 f4       	brcc	.+22     	; 0x2d50 <vfprintf+0x2d0>
    2d3a:	34 fe       	sbrs	r3, 4
    2d3c:	0b c0       	rjmp	.+22     	; 0x2d54 <vfprintf+0x2d4>
    2d3e:	32 fc       	sbrc	r3, 2
    2d40:	09 c0       	rjmp	.+18     	; 0x2d54 <vfprintf+0x2d4>
    2d42:	83 2d       	mov	r24, r3
    2d44:	8e 7e       	andi	r24, 0xEE	; 238
    2d46:	a8 2e       	mov	r10, r24
    2d48:	05 c0       	rjmp	.+10     	; 0x2d54 <vfprintf+0x2d4>
    2d4a:	b8 2c       	mov	r11, r8
    2d4c:	a3 2c       	mov	r10, r3
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <vfprintf+0x2d6>
    2d50:	b8 2c       	mov	r11, r8
    2d52:	01 c0       	rjmp	.+2      	; 0x2d56 <vfprintf+0x2d6>
    2d54:	b9 2c       	mov	r11, r9
    2d56:	a4 fe       	sbrs	r10, 4
    2d58:	0f c0       	rjmp	.+30     	; 0x2d78 <vfprintf+0x2f8>
    2d5a:	fe 01       	movw	r30, r28
    2d5c:	e8 0d       	add	r30, r8
    2d5e:	f1 1d       	adc	r31, r1
    2d60:	80 81       	ld	r24, Z
    2d62:	80 33       	cpi	r24, 0x30	; 48
    2d64:	21 f4       	brne	.+8      	; 0x2d6e <vfprintf+0x2ee>
    2d66:	9a 2d       	mov	r25, r10
    2d68:	99 7e       	andi	r25, 0xE9	; 233
    2d6a:	a9 2e       	mov	r10, r25
    2d6c:	09 c0       	rjmp	.+18     	; 0x2d80 <vfprintf+0x300>
    2d6e:	a2 fe       	sbrs	r10, 2
    2d70:	06 c0       	rjmp	.+12     	; 0x2d7e <vfprintf+0x2fe>
    2d72:	b3 94       	inc	r11
    2d74:	b3 94       	inc	r11
    2d76:	04 c0       	rjmp	.+8      	; 0x2d80 <vfprintf+0x300>
    2d78:	8a 2d       	mov	r24, r10
    2d7a:	86 78       	andi	r24, 0x86	; 134
    2d7c:	09 f0       	breq	.+2      	; 0x2d80 <vfprintf+0x300>
    2d7e:	b3 94       	inc	r11
    2d80:	a3 fc       	sbrc	r10, 3
    2d82:	11 c0       	rjmp	.+34     	; 0x2da6 <vfprintf+0x326>
    2d84:	a0 fe       	sbrs	r10, 0
    2d86:	06 c0       	rjmp	.+12     	; 0x2d94 <vfprintf+0x314>
    2d88:	b2 14       	cp	r11, r2
    2d8a:	88 f4       	brcc	.+34     	; 0x2dae <vfprintf+0x32e>
    2d8c:	28 0c       	add	r2, r8
    2d8e:	92 2c       	mov	r9, r2
    2d90:	9b 18       	sub	r9, r11
    2d92:	0e c0       	rjmp	.+28     	; 0x2db0 <vfprintf+0x330>
    2d94:	b2 14       	cp	r11, r2
    2d96:	60 f4       	brcc	.+24     	; 0x2db0 <vfprintf+0x330>
    2d98:	b6 01       	movw	r22, r12
    2d9a:	80 e2       	ldi	r24, 0x20	; 32
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2da2:	b3 94       	inc	r11
    2da4:	f7 cf       	rjmp	.-18     	; 0x2d94 <vfprintf+0x314>
    2da6:	b2 14       	cp	r11, r2
    2da8:	18 f4       	brcc	.+6      	; 0x2db0 <vfprintf+0x330>
    2daa:	2b 18       	sub	r2, r11
    2dac:	02 c0       	rjmp	.+4      	; 0x2db2 <vfprintf+0x332>
    2dae:	98 2c       	mov	r9, r8
    2db0:	21 2c       	mov	r2, r1
    2db2:	a4 fe       	sbrs	r10, 4
    2db4:	10 c0       	rjmp	.+32     	; 0x2dd6 <vfprintf+0x356>
    2db6:	b6 01       	movw	r22, r12
    2db8:	80 e3       	ldi	r24, 0x30	; 48
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2dc0:	a2 fe       	sbrs	r10, 2
    2dc2:	17 c0       	rjmp	.+46     	; 0x2df2 <vfprintf+0x372>
    2dc4:	a1 fc       	sbrc	r10, 1
    2dc6:	03 c0       	rjmp	.+6      	; 0x2dce <vfprintf+0x34e>
    2dc8:	88 e7       	ldi	r24, 0x78	; 120
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	02 c0       	rjmp	.+4      	; 0x2dd2 <vfprintf+0x352>
    2dce:	88 e5       	ldi	r24, 0x58	; 88
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	b6 01       	movw	r22, r12
    2dd4:	0c c0       	rjmp	.+24     	; 0x2dee <vfprintf+0x36e>
    2dd6:	8a 2d       	mov	r24, r10
    2dd8:	86 78       	andi	r24, 0x86	; 134
    2dda:	59 f0       	breq	.+22     	; 0x2df2 <vfprintf+0x372>
    2ddc:	a1 fe       	sbrs	r10, 1
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <vfprintf+0x364>
    2de0:	8b e2       	ldi	r24, 0x2B	; 43
    2de2:	01 c0       	rjmp	.+2      	; 0x2de6 <vfprintf+0x366>
    2de4:	80 e2       	ldi	r24, 0x20	; 32
    2de6:	a7 fc       	sbrc	r10, 7
    2de8:	8d e2       	ldi	r24, 0x2D	; 45
    2dea:	b6 01       	movw	r22, r12
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2df2:	89 14       	cp	r8, r9
    2df4:	38 f4       	brcc	.+14     	; 0x2e04 <vfprintf+0x384>
    2df6:	b6 01       	movw	r22, r12
    2df8:	80 e3       	ldi	r24, 0x30	; 48
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2e00:	9a 94       	dec	r9
    2e02:	f7 cf       	rjmp	.-18     	; 0x2df2 <vfprintf+0x372>
    2e04:	8a 94       	dec	r8
    2e06:	f3 01       	movw	r30, r6
    2e08:	e8 0d       	add	r30, r8
    2e0a:	f1 1d       	adc	r31, r1
    2e0c:	80 81       	ld	r24, Z
    2e0e:	b6 01       	movw	r22, r12
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2e16:	81 10       	cpse	r8, r1
    2e18:	f5 cf       	rjmp	.-22     	; 0x2e04 <vfprintf+0x384>
    2e1a:	22 20       	and	r2, r2
    2e1c:	09 f4       	brne	.+2      	; 0x2e20 <vfprintf+0x3a0>
    2e1e:	42 ce       	rjmp	.-892    	; 0x2aa4 <vfprintf+0x24>
    2e20:	b6 01       	movw	r22, r12
    2e22:	80 e2       	ldi	r24, 0x20	; 32
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <fputc>
    2e2a:	2a 94       	dec	r2
    2e2c:	f6 cf       	rjmp	.-20     	; 0x2e1a <vfprintf+0x39a>
    2e2e:	f6 01       	movw	r30, r12
    2e30:	86 81       	ldd	r24, Z+6	; 0x06
    2e32:	97 81       	ldd	r25, Z+7	; 0x07
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <vfprintf+0x3ba>
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	9f ef       	ldi	r25, 0xFF	; 255
    2e3a:	2b 96       	adiw	r28, 0x0b	; 11
    2e3c:	e2 e1       	ldi	r30, 0x12	; 18
    2e3e:	0c 94 49 18 	jmp	0x3092	; 0x3092 <__epilogue_restores__>

00002e42 <strnlen_P>:
    2e42:	fc 01       	movw	r30, r24
    2e44:	05 90       	lpm	r0, Z+
    2e46:	61 50       	subi	r22, 0x01	; 1
    2e48:	70 40       	sbci	r23, 0x00	; 0
    2e4a:	01 10       	cpse	r0, r1
    2e4c:	d8 f7       	brcc	.-10     	; 0x2e44 <strnlen_P+0x2>
    2e4e:	80 95       	com	r24
    2e50:	90 95       	com	r25
    2e52:	8e 0f       	add	r24, r30
    2e54:	9f 1f       	adc	r25, r31
    2e56:	08 95       	ret

00002e58 <strnlen>:
    2e58:	fc 01       	movw	r30, r24
    2e5a:	61 50       	subi	r22, 0x01	; 1
    2e5c:	70 40       	sbci	r23, 0x00	; 0
    2e5e:	01 90       	ld	r0, Z+
    2e60:	01 10       	cpse	r0, r1
    2e62:	d8 f7       	brcc	.-10     	; 0x2e5a <strnlen+0x2>
    2e64:	80 95       	com	r24
    2e66:	90 95       	com	r25
    2e68:	8e 0f       	add	r24, r30
    2e6a:	9f 1f       	adc	r25, r31
    2e6c:	08 95       	ret

00002e6e <fputc>:
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	fb 01       	movw	r30, r22
    2e78:	23 81       	ldd	r18, Z+3	; 0x03
    2e7a:	21 fd       	sbrc	r18, 1
    2e7c:	03 c0       	rjmp	.+6      	; 0x2e84 <fputc+0x16>
    2e7e:	8f ef       	ldi	r24, 0xFF	; 255
    2e80:	9f ef       	ldi	r25, 0xFF	; 255
    2e82:	2c c0       	rjmp	.+88     	; 0x2edc <fputc+0x6e>
    2e84:	22 ff       	sbrs	r18, 2
    2e86:	16 c0       	rjmp	.+44     	; 0x2eb4 <fputc+0x46>
    2e88:	46 81       	ldd	r20, Z+6	; 0x06
    2e8a:	57 81       	ldd	r21, Z+7	; 0x07
    2e8c:	24 81       	ldd	r18, Z+4	; 0x04
    2e8e:	35 81       	ldd	r19, Z+5	; 0x05
    2e90:	42 17       	cp	r20, r18
    2e92:	53 07       	cpc	r21, r19
    2e94:	44 f4       	brge	.+16     	; 0x2ea6 <fputc+0x38>
    2e96:	a0 81       	ld	r26, Z
    2e98:	b1 81       	ldd	r27, Z+1	; 0x01
    2e9a:	9d 01       	movw	r18, r26
    2e9c:	2f 5f       	subi	r18, 0xFF	; 255
    2e9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea0:	31 83       	std	Z+1, r19	; 0x01
    2ea2:	20 83       	st	Z, r18
    2ea4:	8c 93       	st	X, r24
    2ea6:	26 81       	ldd	r18, Z+6	; 0x06
    2ea8:	37 81       	ldd	r19, Z+7	; 0x07
    2eaa:	2f 5f       	subi	r18, 0xFF	; 255
    2eac:	3f 4f       	sbci	r19, 0xFF	; 255
    2eae:	37 83       	std	Z+7, r19	; 0x07
    2eb0:	26 83       	std	Z+6, r18	; 0x06
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <fputc+0x6e>
    2eb4:	8b 01       	movw	r16, r22
    2eb6:	ec 01       	movw	r28, r24
    2eb8:	fb 01       	movw	r30, r22
    2eba:	00 84       	ldd	r0, Z+8	; 0x08
    2ebc:	f1 85       	ldd	r31, Z+9	; 0x09
    2ebe:	e0 2d       	mov	r30, r0
    2ec0:	09 95       	icall
    2ec2:	89 2b       	or	r24, r25
    2ec4:	e1 f6       	brne	.-72     	; 0x2e7e <fputc+0x10>
    2ec6:	d8 01       	movw	r26, r16
    2ec8:	16 96       	adiw	r26, 0x06	; 6
    2eca:	8d 91       	ld	r24, X+
    2ecc:	9c 91       	ld	r25, X
    2ece:	17 97       	sbiw	r26, 0x07	; 7
    2ed0:	01 96       	adiw	r24, 0x01	; 1
    2ed2:	17 96       	adiw	r26, 0x07	; 7
    2ed4:	9c 93       	st	X, r25
    2ed6:	8e 93       	st	-X, r24
    2ed8:	16 97       	sbiw	r26, 0x06	; 6
    2eda:	ce 01       	movw	r24, r28
    2edc:	df 91       	pop	r29
    2ede:	cf 91       	pop	r28
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	08 95       	ret

00002ee6 <__ultoa_invert>:
    2ee6:	fa 01       	movw	r30, r20
    2ee8:	aa 27       	eor	r26, r26
    2eea:	28 30       	cpi	r18, 0x08	; 8
    2eec:	51 f1       	breq	.+84     	; 0x2f42 <__ultoa_invert+0x5c>
    2eee:	20 31       	cpi	r18, 0x10	; 16
    2ef0:	81 f1       	breq	.+96     	; 0x2f52 <__ultoa_invert+0x6c>
    2ef2:	e8 94       	clt
    2ef4:	6f 93       	push	r22
    2ef6:	6e 7f       	andi	r22, 0xFE	; 254
    2ef8:	6e 5f       	subi	r22, 0xFE	; 254
    2efa:	7f 4f       	sbci	r23, 0xFF	; 255
    2efc:	8f 4f       	sbci	r24, 0xFF	; 255
    2efe:	9f 4f       	sbci	r25, 0xFF	; 255
    2f00:	af 4f       	sbci	r26, 0xFF	; 255
    2f02:	b1 e0       	ldi	r27, 0x01	; 1
    2f04:	3e d0       	rcall	.+124    	; 0x2f82 <__ultoa_invert+0x9c>
    2f06:	b4 e0       	ldi	r27, 0x04	; 4
    2f08:	3c d0       	rcall	.+120    	; 0x2f82 <__ultoa_invert+0x9c>
    2f0a:	67 0f       	add	r22, r23
    2f0c:	78 1f       	adc	r23, r24
    2f0e:	89 1f       	adc	r24, r25
    2f10:	9a 1f       	adc	r25, r26
    2f12:	a1 1d       	adc	r26, r1
    2f14:	68 0f       	add	r22, r24
    2f16:	79 1f       	adc	r23, r25
    2f18:	8a 1f       	adc	r24, r26
    2f1a:	91 1d       	adc	r25, r1
    2f1c:	a1 1d       	adc	r26, r1
    2f1e:	6a 0f       	add	r22, r26
    2f20:	71 1d       	adc	r23, r1
    2f22:	81 1d       	adc	r24, r1
    2f24:	91 1d       	adc	r25, r1
    2f26:	a1 1d       	adc	r26, r1
    2f28:	20 d0       	rcall	.+64     	; 0x2f6a <__ultoa_invert+0x84>
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <__ultoa_invert+0x48>
    2f2c:	68 94       	set
    2f2e:	3f 91       	pop	r19
    2f30:	2a e0       	ldi	r18, 0x0A	; 10
    2f32:	26 9f       	mul	r18, r22
    2f34:	11 24       	eor	r1, r1
    2f36:	30 19       	sub	r19, r0
    2f38:	30 5d       	subi	r19, 0xD0	; 208
    2f3a:	31 93       	st	Z+, r19
    2f3c:	de f6       	brtc	.-74     	; 0x2ef4 <__ultoa_invert+0xe>
    2f3e:	cf 01       	movw	r24, r30
    2f40:	08 95       	ret
    2f42:	46 2f       	mov	r20, r22
    2f44:	47 70       	andi	r20, 0x07	; 7
    2f46:	40 5d       	subi	r20, 0xD0	; 208
    2f48:	41 93       	st	Z+, r20
    2f4a:	b3 e0       	ldi	r27, 0x03	; 3
    2f4c:	0f d0       	rcall	.+30     	; 0x2f6c <__ultoa_invert+0x86>
    2f4e:	c9 f7       	brne	.-14     	; 0x2f42 <__ultoa_invert+0x5c>
    2f50:	f6 cf       	rjmp	.-20     	; 0x2f3e <__ultoa_invert+0x58>
    2f52:	46 2f       	mov	r20, r22
    2f54:	4f 70       	andi	r20, 0x0F	; 15
    2f56:	40 5d       	subi	r20, 0xD0	; 208
    2f58:	4a 33       	cpi	r20, 0x3A	; 58
    2f5a:	18 f0       	brcs	.+6      	; 0x2f62 <__ultoa_invert+0x7c>
    2f5c:	49 5d       	subi	r20, 0xD9	; 217
    2f5e:	31 fd       	sbrc	r19, 1
    2f60:	40 52       	subi	r20, 0x20	; 32
    2f62:	41 93       	st	Z+, r20
    2f64:	02 d0       	rcall	.+4      	; 0x2f6a <__ultoa_invert+0x84>
    2f66:	a9 f7       	brne	.-22     	; 0x2f52 <__ultoa_invert+0x6c>
    2f68:	ea cf       	rjmp	.-44     	; 0x2f3e <__ultoa_invert+0x58>
    2f6a:	b4 e0       	ldi	r27, 0x04	; 4
    2f6c:	a6 95       	lsr	r26
    2f6e:	97 95       	ror	r25
    2f70:	87 95       	ror	r24
    2f72:	77 95       	ror	r23
    2f74:	67 95       	ror	r22
    2f76:	ba 95       	dec	r27
    2f78:	c9 f7       	brne	.-14     	; 0x2f6c <__ultoa_invert+0x86>
    2f7a:	00 97       	sbiw	r24, 0x00	; 0
    2f7c:	61 05       	cpc	r22, r1
    2f7e:	71 05       	cpc	r23, r1
    2f80:	08 95       	ret
    2f82:	9b 01       	movw	r18, r22
    2f84:	ac 01       	movw	r20, r24
    2f86:	0a 2e       	mov	r0, r26
    2f88:	06 94       	lsr	r0
    2f8a:	57 95       	ror	r21
    2f8c:	47 95       	ror	r20
    2f8e:	37 95       	ror	r19
    2f90:	27 95       	ror	r18
    2f92:	ba 95       	dec	r27
    2f94:	c9 f7       	brne	.-14     	; 0x2f88 <__ultoa_invert+0xa2>
    2f96:	62 0f       	add	r22, r18
    2f98:	73 1f       	adc	r23, r19
    2f9a:	84 1f       	adc	r24, r20
    2f9c:	95 1f       	adc	r25, r21
    2f9e:	a0 1d       	adc	r26, r0
    2fa0:	08 95       	ret

00002fa2 <eeprom_read_block>:
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22

00002fa6 <eeprom_read_blraw>:
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	f9 99       	sbic	0x1f, 1	; 31
    2faa:	fe cf       	rjmp	.-4      	; 0x2fa8 <eeprom_read_blraw+0x2>
    2fac:	06 c0       	rjmp	.+12     	; 0x2fba <eeprom_read_blraw+0x14>
    2fae:	f2 bd       	out	0x22, r31	; 34
    2fb0:	e1 bd       	out	0x21, r30	; 33
    2fb2:	f8 9a       	sbi	0x1f, 0	; 31
    2fb4:	31 96       	adiw	r30, 0x01	; 1
    2fb6:	00 b4       	in	r0, 0x20	; 32
    2fb8:	0d 92       	st	X+, r0
    2fba:	41 50       	subi	r20, 0x01	; 1
    2fbc:	50 40       	sbci	r21, 0x00	; 0
    2fbe:	b8 f7       	brcc	.-18     	; 0x2fae <eeprom_read_blraw+0x8>
    2fc0:	08 95       	ret

00002fc2 <eeprom_read_byte>:
    2fc2:	f9 99       	sbic	0x1f, 1	; 31
    2fc4:	fe cf       	rjmp	.-4      	; 0x2fc2 <eeprom_read_byte>
    2fc6:	92 bd       	out	0x22, r25	; 34
    2fc8:	81 bd       	out	0x21, r24	; 33
    2fca:	f8 9a       	sbi	0x1f, 0	; 31
    2fcc:	99 27       	eor	r25, r25
    2fce:	80 b5       	in	r24, 0x20	; 32
    2fd0:	08 95       	ret

00002fd2 <eeprom_read_dword>:
    2fd2:	a6 e1       	ldi	r26, 0x16	; 22
    2fd4:	b0 e0       	ldi	r27, 0x00	; 0
    2fd6:	44 e0       	ldi	r20, 0x04	; 4
    2fd8:	50 e0       	ldi	r21, 0x00	; 0
    2fda:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <eeprom_read_blraw>

00002fde <eeprom_read_word>:
    2fde:	a8 e1       	ldi	r26, 0x18	; 24
    2fe0:	b0 e0       	ldi	r27, 0x00	; 0
    2fe2:	42 e0       	ldi	r20, 0x02	; 2
    2fe4:	50 e0       	ldi	r21, 0x00	; 0
    2fe6:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <eeprom_read_blraw>

00002fea <eeprom_write_block>:
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	03 c0       	rjmp	.+6      	; 0x2ff6 <eeprom_write_block+0xc>
    2ff0:	2d 91       	ld	r18, X+
    2ff2:	0e 94 00 18 	call	0x3000	; 0x3000 <eeprom_write_r18>
    2ff6:	41 50       	subi	r20, 0x01	; 1
    2ff8:	50 40       	sbci	r21, 0x00	; 0
    2ffa:	d0 f7       	brcc	.-12     	; 0x2ff0 <eeprom_write_block+0x6>
    2ffc:	08 95       	ret

00002ffe <eeprom_write_byte>:
    2ffe:	26 2f       	mov	r18, r22

00003000 <eeprom_write_r18>:
    3000:	f9 99       	sbic	0x1f, 1	; 31
    3002:	fe cf       	rjmp	.-4      	; 0x3000 <eeprom_write_r18>
    3004:	1f ba       	out	0x1f, r1	; 31
    3006:	92 bd       	out	0x22, r25	; 34
    3008:	81 bd       	out	0x21, r24	; 33
    300a:	20 bd       	out	0x20, r18	; 32
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	fa 9a       	sbi	0x1f, 2	; 31
    3012:	f9 9a       	sbi	0x1f, 1	; 31
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	01 96       	adiw	r24, 0x01	; 1
    3018:	08 95       	ret

0000301a <eeprom_write_dword>:
    301a:	24 2f       	mov	r18, r20
    301c:	0e 94 00 18 	call	0x3000	; 0x3000 <eeprom_write_r18>
    3020:	25 2f       	mov	r18, r21
    3022:	0e 94 00 18 	call	0x3000	; 0x3000 <eeprom_write_r18>
    3026:	0c 94 15 18 	jmp	0x302a	; 0x302a <eeprom_write_word>

0000302a <eeprom_write_word>:
    302a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <eeprom_write_byte>
    302e:	27 2f       	mov	r18, r23
    3030:	0c 94 00 18 	jmp	0x3000	; 0x3000 <eeprom_write_r18>

00003034 <__muluhisi3>:
    3034:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__umulhisi3>
    3038:	a5 9f       	mul	r26, r21
    303a:	90 0d       	add	r25, r0
    303c:	b4 9f       	mul	r27, r20
    303e:	90 0d       	add	r25, r0
    3040:	a4 9f       	mul	r26, r20
    3042:	80 0d       	add	r24, r0
    3044:	91 1d       	adc	r25, r1
    3046:	11 24       	eor	r1, r1
    3048:	08 95       	ret

0000304a <__mulshisi3>:
    304a:	b7 ff       	sbrs	r27, 7
    304c:	0c 94 1a 18 	jmp	0x3034	; 0x3034 <__muluhisi3>

00003050 <__mulohisi3>:
    3050:	0e 94 1a 18 	call	0x3034	; 0x3034 <__muluhisi3>
    3054:	82 1b       	sub	r24, r18
    3056:	93 0b       	sbc	r25, r19
    3058:	08 95       	ret

0000305a <__prologue_saves__>:
    305a:	2f 92       	push	r2
    305c:	3f 92       	push	r3
    305e:	4f 92       	push	r4
    3060:	5f 92       	push	r5
    3062:	6f 92       	push	r6
    3064:	7f 92       	push	r7
    3066:	8f 92       	push	r8
    3068:	9f 92       	push	r9
    306a:	af 92       	push	r10
    306c:	bf 92       	push	r11
    306e:	cf 92       	push	r12
    3070:	df 92       	push	r13
    3072:	ef 92       	push	r14
    3074:	ff 92       	push	r15
    3076:	0f 93       	push	r16
    3078:	1f 93       	push	r17
    307a:	cf 93       	push	r28
    307c:	df 93       	push	r29
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	ca 1b       	sub	r28, r26
    3084:	db 0b       	sbc	r29, r27
    3086:	0f b6       	in	r0, 0x3f	; 63
    3088:	f8 94       	cli
    308a:	de bf       	out	0x3e, r29	; 62
    308c:	0f be       	out	0x3f, r0	; 63
    308e:	cd bf       	out	0x3d, r28	; 61
    3090:	09 94       	ijmp

00003092 <__epilogue_restores__>:
    3092:	2a 88       	ldd	r2, Y+18	; 0x12
    3094:	39 88       	ldd	r3, Y+17	; 0x11
    3096:	48 88       	ldd	r4, Y+16	; 0x10
    3098:	5f 84       	ldd	r5, Y+15	; 0x0f
    309a:	6e 84       	ldd	r6, Y+14	; 0x0e
    309c:	7d 84       	ldd	r7, Y+13	; 0x0d
    309e:	8c 84       	ldd	r8, Y+12	; 0x0c
    30a0:	9b 84       	ldd	r9, Y+11	; 0x0b
    30a2:	aa 84       	ldd	r10, Y+10	; 0x0a
    30a4:	b9 84       	ldd	r11, Y+9	; 0x09
    30a6:	c8 84       	ldd	r12, Y+8	; 0x08
    30a8:	df 80       	ldd	r13, Y+7	; 0x07
    30aa:	ee 80       	ldd	r14, Y+6	; 0x06
    30ac:	fd 80       	ldd	r15, Y+5	; 0x05
    30ae:	0c 81       	ldd	r16, Y+4	; 0x04
    30b0:	1b 81       	ldd	r17, Y+3	; 0x03
    30b2:	aa 81       	ldd	r26, Y+2	; 0x02
    30b4:	b9 81       	ldd	r27, Y+1	; 0x01
    30b6:	ce 0f       	add	r28, r30
    30b8:	d1 1d       	adc	r29, r1
    30ba:	0f b6       	in	r0, 0x3f	; 63
    30bc:	f8 94       	cli
    30be:	de bf       	out	0x3e, r29	; 62
    30c0:	0f be       	out	0x3f, r0	; 63
    30c2:	cd bf       	out	0x3d, r28	; 61
    30c4:	ed 01       	movw	r28, r26
    30c6:	08 95       	ret

000030c8 <__umulhisi3>:
    30c8:	a2 9f       	mul	r26, r18
    30ca:	b0 01       	movw	r22, r0
    30cc:	b3 9f       	mul	r27, r19
    30ce:	c0 01       	movw	r24, r0
    30d0:	a3 9f       	mul	r26, r19
    30d2:	70 0d       	add	r23, r0
    30d4:	81 1d       	adc	r24, r1
    30d6:	11 24       	eor	r1, r1
    30d8:	91 1d       	adc	r25, r1
    30da:	b2 9f       	mul	r27, r18
    30dc:	70 0d       	add	r23, r0
    30de:	81 1d       	adc	r24, r1
    30e0:	11 24       	eor	r1, r1
    30e2:	91 1d       	adc	r25, r1
    30e4:	08 95       	ret

000030e6 <_exit>:
    30e6:	f8 94       	cli

000030e8 <__stop_program>:
    30e8:	ff cf       	rjmp	.-2      	; 0x30e8 <__stop_program>
